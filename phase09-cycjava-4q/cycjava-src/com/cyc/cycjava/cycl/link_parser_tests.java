package com.cyc.cycjava.cycl;

import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory;
import com.cyc.cycjava.cycl.cyc_testing.generic_testing;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public final class link_parser_tests extends SubLTranslatedFile
{
    public static final SubLFile me;
    public static final String myName = "com.cyc.cycjava.cycl.link_parser_tests";
    public static final String myFingerPrint = "466e7f58a7318a411800ae22f2ef4c19e4b49453737c14583074e5a42d827e0c";
    private static final SubLSymbol $sym0$LINK_PARSE;
    private static final SubLSymbol $kw1$TEST;
    private static final SubLSymbol $kw2$OWNER;
    private static final SubLSymbol $kw3$CLASSES;
    private static final SubLSymbol $kw4$KB;
    private static final SubLSymbol $kw5$FULL;
    private static final SubLSymbol $kw6$WORKING_;
    private static final SubLObject $list7;
    private static final SubLSymbol $sym8$SEARCH;
    private static final SubLSymbol $sym9$GET_STRING;
    private static final SubLSymbol $sym10$TEST_GET_LINK_PHRASE;
    private static final SubLList $list11;
    
    @SubLTranslatedFile.SubL(source = "cycl/link-parser-tests.lisp", position = 6844L)
    public static SubLObject test_get_link_phrase(final SubLObject sent, final SubLObject head, final SubLObject ans_phrase) {
        final SubLObject v_linkage = linkage.new_linkage(sent, (SubLObject)link_parser_tests.UNPROVIDED);
        final SubLObject lp = linkage.get_link_phrase((SubLObject)ConsesLow.list(methods.funcall_instance_method_with_1_args(v_linkage, (SubLObject)link_parser_tests.$sym8$SEARCH, head)));
        return Equality.equal(methods.funcall_instance_method_with_0_args(lp, (SubLObject)link_parser_tests.$sym9$GET_STRING), ans_phrase);
    }
    
    public static SubLObject declare_link_parser_tests_file() {
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.link_parser_tests", "test_get_link_phrase", "TEST-GET-LINK-PHRASE", 3, 0, false);
        return (SubLObject)link_parser_tests.NIL;
    }
    
    public static SubLObject init_link_parser_tests_file() {
        return (SubLObject)link_parser_tests.NIL;
    }
    
    public static SubLObject setup_link_parser_tests_file() {
        generic_testing.define_test_case_table_int((SubLObject)link_parser_tests.$sym0$LINK_PARSE, (SubLObject)ConsesLow.list(new SubLObject[] { link_parser_tests.$kw1$TEST, Symbols.symbol_function((SubLObject)link_parser_tests.EQUALP), link_parser_tests.$kw2$OWNER, link_parser_tests.NIL, link_parser_tests.$kw3$CLASSES, link_parser_tests.NIL, link_parser_tests.$kw4$KB, link_parser_tests.$kw5$FULL, link_parser_tests.$kw6$WORKING_, link_parser_tests.T }), link_parser_tests.$list7);
        generic_testing.define_test_case_table_int((SubLObject)link_parser_tests.$sym10$TEST_GET_LINK_PHRASE, (SubLObject)ConsesLow.list(new SubLObject[] { link_parser_tests.$kw1$TEST, link_parser_tests.EQ, link_parser_tests.$kw2$OWNER, link_parser_tests.NIL, link_parser_tests.$kw3$CLASSES, link_parser_tests.NIL, link_parser_tests.$kw4$KB, link_parser_tests.$kw5$FULL, link_parser_tests.$kw6$WORKING_, link_parser_tests.T }), (SubLObject)link_parser_tests.$list11);
        return (SubLObject)link_parser_tests.NIL;
    }
    
    private static SubLObject _constant_7_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("John loves Mary")), (SubLObject)ConsesLow.list(Vectors.vector(new SubLObject[] { Vectors.vector(new SubLObject[] { SubLObjectFactory.makeString("LEFT-WALL"), SubLObjectFactory.makeString("John.n"), SubLObjectFactory.makeString("loves"), SubLObjectFactory.makeString("Mary"), SubLObjectFactory.makeString("RIGHT-WALL") }), Vectors.vector(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeString("RW"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.FOUR_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Wd"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.ONE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ss"), (SubLObject)link_parser_tests.ONE_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Os"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.THREE_INTEGER) }), SubLObjectFactory.makeString("\n   +--Ss-+--Os-+\n   |     |     |\nJohn.n loves Mary \n\n"), SubLObjectFactory.makeString("(:S (:NP \"John\")\n   (:VP \"loves\"\n       (:NP \"Mary\")))\n") }))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("The fact that he smiled at me gives me hope")), (SubLObject)ConsesLow.list(Vectors.vector(new SubLObject[] { Vectors.vector(new SubLObject[] { SubLObjectFactory.makeString("LEFT-WALL"), SubLObjectFactory.makeString("the"), SubLObjectFactory.makeString("fact.n"), SubLObjectFactory.makeString("that.c"), SubLObjectFactory.makeString("he"), SubLObjectFactory.makeString("smiled.v"), SubLObjectFactory.makeString("at"), SubLObjectFactory.makeString("me"), SubLObjectFactory.makeString("gives.v"), SubLObjectFactory.makeString("me"), SubLObjectFactory.makeString("hope.n"), SubLObjectFactory.makeString("RIGHT-WALL") }), Vectors.vector(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeString("RW"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.ELEVEN_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Wd"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("D*u"), (SubLObject)link_parser_tests.ONE_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ss*t"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.EIGHT_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("TH"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.THREE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Cet"), (SubLObject)link_parser_tests.THREE_INTEGER, (SubLObject)link_parser_tests.FOUR_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ss"), (SubLObject)link_parser_tests.FOUR_INTEGER, (SubLObject)link_parser_tests.FIVE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("MVp"), (SubLObject)link_parser_tests.FIVE_INTEGER, (SubLObject)link_parser_tests.SIX_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("J"), (SubLObject)link_parser_tests.SIX_INTEGER, (SubLObject)link_parser_tests.SEVEN_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Osn"), (SubLObject)link_parser_tests.EIGHT_INTEGER, (SubLObject)link_parser_tests.TEN_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ox"), (SubLObject)link_parser_tests.EIGHT_INTEGER, (SubLObject)link_parser_tests.NINE_INTEGER) }), SubLObjectFactory.makeString("\n       +--------------Ss*t-------------+----Osn---+\n +-D*u-+--TH--+-Cet+--Ss-+-MVp-+-J+    +--Ox-+    |\n |     |      |    |     |     |  |    |     |    |\nthe fact.n that.c he smiled.v at me gives.v me hope.n \n\n"), SubLObjectFactory.makeString("(:S (:NP \"The\" \"fact\"\n       (:SBAR \"that\"\n             (:S (:NP \"he\")\n                (:VP \"smiled\"\n                    (:PP \"at\"\n                        (:NP \"me\"))))))\n   (:VP \"gives\"\n       (:NP \"me\")\n       (:NP \"hope\")))\n") }))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Many people were angered by the hearings")), (SubLObject)ConsesLow.list(Vectors.vector(new SubLObject[] { Vectors.vector(new SubLObject[] { SubLObjectFactory.makeString("LEFT-WALL"), SubLObjectFactory.makeString("many"), SubLObjectFactory.makeString("people.p"), SubLObjectFactory.makeString("were.v"), SubLObjectFactory.makeString("angered.v"), SubLObjectFactory.makeString("by"), SubLObjectFactory.makeString("the"), SubLObjectFactory.makeString("hearings.n"), SubLObjectFactory.makeString("RIGHT-WALL") }), Vectors.vector(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeString("RW"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.EIGHT_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Wd"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Dmc"), (SubLObject)link_parser_tests.ONE_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Spx"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.THREE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Pv"), (SubLObject)link_parser_tests.THREE_INTEGER, (SubLObject)link_parser_tests.FOUR_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("MVp"), (SubLObject)link_parser_tests.FOUR_INTEGER, (SubLObject)link_parser_tests.FIVE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Jp"), (SubLObject)link_parser_tests.FIVE_INTEGER, (SubLObject)link_parser_tests.SEVEN_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Dmc"), (SubLObject)link_parser_tests.SIX_INTEGER, (SubLObject)link_parser_tests.SEVEN_INTEGER) }), SubLObjectFactory.makeString("\n                                +----Jp----+\n  +--Dmc-+--Spx--+---Pv--+--MVp-+  +--Dmc--+\n  |      |       |       |      |  |       |\nmany people.p were.v angered.v by the hearings.n \n\n"), SubLObjectFactory.makeString("(:S (:NP \"Many\" \"people\")\n   (:VP \"were\"\n       (:VP \"angered\"\n           (:PP \"by\"\n               (:NP \"the\" \"hearings\")))))\n") }))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("2 million attended")), (SubLObject)ConsesLow.list(Vectors.vector(new SubLObject[] { Vectors.vector(new SubLObject[] { SubLObjectFactory.makeString("LEFT-WALL"), SubLObjectFactory.makeString("2"), SubLObjectFactory.makeString("million"), SubLObjectFactory.makeString("attended.v"), SubLObjectFactory.makeString("RIGHT-WALL") }), Vectors.vector(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeString("RW"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.FOUR_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Wd"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("NN"), (SubLObject)link_parser_tests.ONE_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Sp"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.THREE_INTEGER) }), SubLObjectFactory.makeString("\n+-NN-+----Sp---+\n|    |         |\n2 million attended.v \n\n"), SubLObjectFactory.makeString("(:S (:NP \"2\" \"million\")\n   (:VP \"attended\"))\n") }))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("We're thinking about going to a movie this evening")), (SubLObject)ConsesLow.list(Vectors.vector(new SubLObject[] { Vectors.vector(new SubLObject[] { SubLObjectFactory.makeString("LEFT-WALL"), SubLObjectFactory.makeString("we"), SubLObjectFactory.makeString("'re"), SubLObjectFactory.makeString("thinking.v"), SubLObjectFactory.makeString("about"), SubLObjectFactory.makeString("going.v"), SubLObjectFactory.makeString("to"), SubLObjectFactory.makeString("a"), SubLObjectFactory.makeString("movie.n"), SubLObjectFactory.makeString("this.d"), SubLObjectFactory.makeString("evening.t"), SubLObjectFactory.makeString("RIGHT-WALL") }), Vectors.vector(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeString("RW"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.ELEVEN_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Wd"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.ONE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Spx"), (SubLObject)link_parser_tests.ONE_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Pg"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.THREE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("MVp"), (SubLObject)link_parser_tests.THREE_INTEGER, (SubLObject)link_parser_tests.FOUR_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Mgp"), (SubLObject)link_parser_tests.FOUR_INTEGER, (SubLObject)link_parser_tests.FIVE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("MVpn"), (SubLObject)link_parser_tests.FIVE_INTEGER, (SubLObject)link_parser_tests.TEN_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("MVp"), (SubLObject)link_parser_tests.FIVE_INTEGER, (SubLObject)link_parser_tests.SIX_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Js"), (SubLObject)link_parser_tests.SIX_INTEGER, (SubLObject)link_parser_tests.EIGHT_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ds"), (SubLObject)link_parser_tests.SEVEN_INTEGER, (SubLObject)link_parser_tests.EIGHT_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("DTn"), (SubLObject)link_parser_tests.NINE_INTEGER, (SubLObject)link_parser_tests.TEN_INTEGER) }), SubLObjectFactory.makeString("\n                           +------------MVpn------------+\n                           |     +--Js--+               |\n +Sp+---Pg--+--MVp--+--Mgp-+-MVp-+ +-Ds-+       +--DTn--+\n |  |       |       |      |     | |    |       |       |\nwe 're thinking.v about going.v to a movie.n this.d evening.t \n\n"), SubLObjectFactory.makeString("(:S (:NP \"We\")\n   (:VP \"'re\"\n       (:VP \"thinking\"\n           (:PP \"about\"\n               (:S (:VP \"going\"\n                      (:PP \"to\"\n                          (:NP \"a\" \"movie\"))\n                      (:NP \"this\" \"evening\")))))))\n") }))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Abrams does like programming")), (SubLObject)ConsesLow.list(Vectors.vector(new SubLObject[] { Vectors.vector(new SubLObject[] { SubLObjectFactory.makeString("LEFT-WALL"), SubLObjectFactory.makeString("Abrams"), SubLObjectFactory.makeString("does.v"), SubLObjectFactory.makeString("like.v"), SubLObjectFactory.makeString("programming.n"), SubLObjectFactory.makeString("RIGHT-WALL") }), Vectors.vector(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeString("RW"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.FIVE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Wd"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.ONE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ss"), (SubLObject)link_parser_tests.ONE_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("I*d"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.THREE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Os"), (SubLObject)link_parser_tests.THREE_INTEGER, (SubLObject)link_parser_tests.FOUR_INTEGER) }), SubLObjectFactory.makeString("\n   +--Ss--+--I*d-+----Os---+\n   |      |      |         |\nAbrams does.v like.v programming.n \n\n"), SubLObjectFactory.makeString("(:S (:NP \"Abrams\")\n   (:VP \"does\"\n       (:VP \"like\"\n           (:NP \"programming\"))))\n") }))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("I have doubts about inviting him")), (SubLObject)ConsesLow.list(Vectors.vector(new SubLObject[] { Vectors.vector(new SubLObject[] { SubLObjectFactory.makeString("LEFT-WALL"), SubLObjectFactory.makeString("I.p"), SubLObjectFactory.makeString("have.v"), SubLObjectFactory.makeString("doubts.n"), SubLObjectFactory.makeString("about"), SubLObjectFactory.makeString("inviting.v"), SubLObjectFactory.makeString("him"), SubLObjectFactory.makeString("RIGHT-WALL") }), Vectors.vector(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeString("RW"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.SEVEN_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Wd"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.ONE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Sp*i"), (SubLObject)link_parser_tests.ONE_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("MVp"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.FOUR_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Op"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.THREE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Mgp"), (SubLObject)link_parser_tests.FOUR_INTEGER, (SubLObject)link_parser_tests.FIVE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ox"), (SubLObject)link_parser_tests.FIVE_INTEGER, (SubLObject)link_parser_tests.SIX_INTEGER) }), SubLObjectFactory.makeString("\n       +------MVp-----+                \n +-Sp*i+---Op--+      +---Mgp--+--Ox--+\n |     |       |      |        |      |\nI.p have.v doubts.n about inviting.v him \n\n"), SubLObjectFactory.makeString("(:S (:NP \"I\")\n   (:VP \"have\"\n       (:NP \"doubts\")\n       (:PP \"about\"\n           (:S (:VP \"inviting\"\n                  (:NP \"him\"))))))\n") }))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("You are lucky that there is no exam today")), (SubLObject)ConsesLow.list(Vectors.vector(new SubLObject[] { Vectors.vector(new SubLObject[] { SubLObjectFactory.makeString("LEFT-WALL"), SubLObjectFactory.makeString("you"), SubLObjectFactory.makeString("are.v"), SubLObjectFactory.makeString("lucky.a"), SubLObjectFactory.makeString("that.c"), SubLObjectFactory.makeString("there"), SubLObjectFactory.makeString("is.v"), SubLObjectFactory.makeString("no.d"), SubLObjectFactory.makeString("exam.n"), SubLObjectFactory.makeString("today"), SubLObjectFactory.makeString("RIGHT-WALL") }), Vectors.vector(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeString("RW"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.TEN_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Wd"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.ONE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Spx"), (SubLObject)link_parser_tests.ONE_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Pa"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.THREE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("TH"), (SubLObject)link_parser_tests.THREE_INTEGER, (SubLObject)link_parser_tests.FOUR_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Cet"), (SubLObject)link_parser_tests.FOUR_INTEGER, (SubLObject)link_parser_tests.FIVE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("SFst"), (SubLObject)link_parser_tests.FIVE_INTEGER, (SubLObject)link_parser_tests.SIX_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("MVpn"), (SubLObject)link_parser_tests.SIX_INTEGER, (SubLObject)link_parser_tests.NINE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ost"), (SubLObject)link_parser_tests.SIX_INTEGER, (SubLObject)link_parser_tests.EIGHT_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ds"), (SubLObject)link_parser_tests.SEVEN_INTEGER, (SubLObject)link_parser_tests.EIGHT_INTEGER) }), SubLObjectFactory.makeString("\n                                 +------MVpn------+\n                                 +----Ost---+     |\n +-Spx+--Pa--+---TH--+-Cet-+-SFst+    +--Ds-+     |\n |    |      |       |     |     |    |     |     |\nyou are.v lucky.a that.c there is.v no.d exam.n today \n\n"), SubLObjectFactory.makeString("(:S (:NP \"You\")\n   (:VP \"are\"\n       (:ADJP \"lucky\"\n             (:SBAR \"that\"\n                   (:S (:NP \"there\")\n                      (:VP \"is\"\n                          (:NP \"no\" \"exam\")\n                          (:NP \"today\")))))))\n") }))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("He is apparently an expert on dogs")), (SubLObject)ConsesLow.list(Vectors.vector(new SubLObject[] { Vectors.vector(new SubLObject[] { SubLObjectFactory.makeString("LEFT-WALL"), SubLObjectFactory.makeString("he"), SubLObjectFactory.makeString("is.v"), SubLObjectFactory.makeString("apparently"), SubLObjectFactory.makeString("an"), SubLObjectFactory.makeString("expert.n"), SubLObjectFactory.makeString("on"), SubLObjectFactory.makeString("dogs.n"), SubLObjectFactory.makeString("RIGHT-WALL") }), Vectors.vector(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeString("RW"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.EIGHT_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Wd"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.ONE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ss"), (SubLObject)link_parser_tests.ONE_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("MVp"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.SIX_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ost"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.FIVE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("EBm"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.THREE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ds"), (SubLObject)link_parser_tests.FOUR_INTEGER, (SubLObject)link_parser_tests.FIVE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Jp"), (SubLObject)link_parser_tests.SIX_INTEGER, (SubLObject)link_parser_tests.SEVEN_INTEGER) }), SubLObjectFactory.makeString("\n     +------------MVp-----------+     \n     +---------Ost--------+     |     \n +-Ss+--EBm--+      +--Ds-+     +-Jp-+\n |   |       |      |     |     |    |\nhe is.v apparently an expert.n on dogs.n \n\n"), SubLObjectFactory.makeString("(:S (:NP \"He\")\n   (:VP \"is\" \"apparently\"\n       (:NP \"an\" \"expert\")\n       (:PP \"on\"\n           (:NP \"dogs\"))))\n") }))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Which dog did you chase")), (SubLObject)ConsesLow.list(Vectors.vector(new SubLObject[] { Vectors.vector(new SubLObject[] { SubLObjectFactory.makeString("LEFT-WALL"), SubLObjectFactory.makeString("which"), SubLObjectFactory.makeString("dog.n"), SubLObjectFactory.makeString("did.v"), SubLObjectFactory.makeString("you"), SubLObjectFactory.makeString("chase.v"), SubLObjectFactory.makeString("RIGHT-WALL") }), Vectors.vector(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeString("RW"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.SIX_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Wq"), (SubLObject)link_parser_tests.ZERO_INTEGER, (SubLObject)link_parser_tests.ONE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ds*w"), (SubLObject)link_parser_tests.ONE_INTEGER, (SubLObject)link_parser_tests.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Bsm"), (SubLObject)link_parser_tests.TWO_INTEGER, (SubLObject)link_parser_tests.FIVE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("I*d"), (SubLObject)link_parser_tests.THREE_INTEGER, (SubLObject)link_parser_tests.FIVE_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeString("SIp"), (SubLObject)link_parser_tests.THREE_INTEGER, (SubLObject)link_parser_tests.FOUR_INTEGER) }), SubLObjectFactory.makeString("\n                  +-------Bsm------+\n                  |     +----I*d---+\n    +---Wq--+-Ds*w+     +-SIp+     |\n    |       |     |     |    |     |\nLEFT-WALL which dog.n did.v you chase.v \n\n"), SubLObjectFactory.makeString("(:S \"Which\" \"dog\" \"did\"\n   (:NP \"you\")\n   (:VP \"chase\"))\n") }))) });
    }
    
    public void declareFunctions() {
        declare_link_parser_tests_file();
    }
    
    public void initializeVariables() {
        init_link_parser_tests_file();
    }
    
    public void runTopLevelForms() {
        setup_link_parser_tests_file();
    }
    
    static {
        me = (SubLFile)new link_parser_tests();
        $sym0$LINK_PARSE = SubLObjectFactory.makeSymbol("LINK-PARSE");
        $kw1$TEST = SubLObjectFactory.makeKeyword("TEST");
        $kw2$OWNER = SubLObjectFactory.makeKeyword("OWNER");
        $kw3$CLASSES = SubLObjectFactory.makeKeyword("CLASSES");
        $kw4$KB = SubLObjectFactory.makeKeyword("KB");
        $kw5$FULL = SubLObjectFactory.makeKeyword("FULL");
        $kw6$WORKING_ = SubLObjectFactory.makeKeyword("WORKING?");
        $list7 = _constant_7_initializer();
        $sym8$SEARCH = SubLObjectFactory.makeSymbol("SEARCH");
        $sym9$GET_STRING = SubLObjectFactory.makeSymbol("GET-STRING");
        $sym10$TEST_GET_LINK_PHRASE = SubLObjectFactory.makeSymbol("TEST-GET-LINK-PHRASE");
        $list11 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("This luxurious carpet from Kashmir is expensive"), (SubLObject)SubLObjectFactory.makeString("carpet"), (SubLObject)SubLObjectFactory.makeString("this luxurious carpet from Kashmir")), (SubLObject)link_parser_tests.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("She knows."), (SubLObject)SubLObjectFactory.makeString("she"), (SubLObject)SubLObjectFactory.makeString("she")), (SubLObject)link_parser_tests.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("A set of tubes is located inside the muffler."), (SubLObject)SubLObjectFactory.makeString("muffler"), (SubLObject)SubLObjectFactory.makeString("the muffler")), (SubLObject)link_parser_tests.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Many retired soldiers are speaking out about fairness in reporting on the war in Iraq"), (SubLObject)SubLObjectFactory.makeString("soldiers"), (SubLObject)SubLObjectFactory.makeString("many retired soldiers")), (SubLObject)link_parser_tests.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("A lovestruck teen personally delivers his declaration of love"), (SubLObject)SubLObjectFactory.makeString("declaration"), (SubLObject)SubLObjectFactory.makeString("his declaration of love")), (SubLObject)link_parser_tests.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("The man who tried to kill the Pope is released"), (SubLObject)SubLObjectFactory.makeString("man"), (SubLObject)SubLObjectFactory.makeString("the man who tried to kill the Pope")), (SubLObject)link_parser_tests.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("The velvet dress by Versace was a big hit"), (SubLObject)SubLObjectFactory.makeString("dress"), (SubLObject)SubLObjectFactory.makeString("the velvet dress by Versace")), (SubLObject)link_parser_tests.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("They specialize in the sale of antique porcelains"), (SubLObject)SubLObjectFactory.makeString("porcelains"), (SubLObject)SubLObjectFactory.makeString("antique porcelains")), (SubLObject)link_parser_tests.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Graceful ballerinas with good postures were seen everywhere"), (SubLObject)SubLObjectFactory.makeString("ballerinas"), (SubLObject)SubLObjectFactory.makeString("graceful ballerinas with good postures")), (SubLObject)link_parser_tests.T) });
    }
}

/*

	Total time: 163 ms
	
*/