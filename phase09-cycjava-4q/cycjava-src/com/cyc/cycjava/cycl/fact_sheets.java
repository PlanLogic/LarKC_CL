package com.cyc.cycjava.cycl;

import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDecl;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.CommonSymbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDeclNative;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLStructNative;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.visitation;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLSpecialOperatorDeclarations;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures;
import com.cyc.cycjava.cycl.cyc_testing.generic_testing;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.random;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Environment;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Packages;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_methods;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.StreamsLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Processes;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.stream_macros;
import com.cyc.cycjava.cycl.sbhl.sbhl_time_modules;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference;
import com.cyc.cycjava.cycl.sbhl.sbhl_links;
import com.cyc.cycjava.cycl.sbhl.sbhl_graphs;
import com.cyc.cycjava.cycl.sbhl.sbhl_macros;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_paranoia;
import com.cyc.cycjava.cycl.sbhl.sbhl_search_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.cycjava.cycl.inference.ask_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.compatibility;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Filesys;
import com.cyc.cycjava.cycl.owl.owl_cycl_to_xml;
import com.cyc.cycjava.cycl.owl.owl_uris_and_prefixes;
import com.cyc.cycjava.cycl.owl.owlification;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store;
import com.cyc.cycjava.cycl.inference.modules.removal.removal_modules_indexical_referent;
import com.cyc.cycjava.cycl.inference.harness.inference_kernel;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.time_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences;
import com.cyc.cycjava.cycl.inference.kb_query;
import com.cyc.cycjava.cycl.inference.browser.cb_query;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLFloat;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public final class fact_sheets extends SubLTranslatedFile
{
    public static final SubLFile me;
    public static final String myName = "com.cyc.cycjava.cycl.fact_sheets";
    public static final String myFingerPrint = "814de76c30523aab7dae101004483e07b16bfa61b62e84ddbf9e4403c8c4b9f9";
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 845L)
    public static SubLSymbol $allow_fact_sheet_evaluationsP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 1589L)
    private static SubLSymbol $fact_sheet_eval_log_file$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 1944L)
    private static SubLSymbol $fact_sheet_query_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 2256L)
    private static SubLSymbol $fact_sheet_table_type$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 2502L)
    private static SubLSymbol $fact_sheet_sentence$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 2956L)
    private static SubLSymbol $within_fact_sheet_paraphraseP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 3832L)
    private static SubLSymbol $fact_sheet_sentence_sorter_pred_counts$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 3901L)
    private static SubLSymbol $fact_sheet_focal_term$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 4221L)
    private static SubLSymbol $fact_sheet_verbosity$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 4437L)
    private static SubLSymbol $suppress_fact_sheet_extra_images$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 4559L)
    private static SubLSymbol $suppress_fact_sheet_extra_images_css$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 4671L)
    private static SubLSymbol $chmod_safe_to_useP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 4791L)
    private static SubLSymbol $catch_fact_sheet_errorsP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6000L)
    private static SubLSymbol $fact_sheet_default_language_monad_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6089L)
    private static SubLSymbol $fact_sheet_default_language_mt_time_interval$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6163L)
    private static SubLSymbol $fact_sheet_default_language_mt_time_parameter$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6253L)
    private static SubLSymbol $fact_sheet_default_language_mt_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6397L)
    private static SubLSymbol $build_fact_sheet_default_language_mt_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6946L)
    private static SubLSymbol $fact_sheet_default_domain_monad_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7029L)
    private static SubLSymbol $fact_sheet_default_domain_mt_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7169L)
    private static SubLSymbol $build_fact_sheet_default_domain_mt_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 11286L)
    private static SubLSymbol $fact_sheet_thcl_section_category$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 25351L)
    private static SubLSymbol $fact_sheet_table_border_width$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 25489L)
    private static SubLSymbol $fact_sheet_table_cellpadding$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 25543L)
    private static SubLSymbol $fact_sheet_table_horizontal_alignment$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 25613L)
    private static SubLSymbol $fact_sheet_table_width$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 25665L)
    private static SubLSymbol $fact_sheet_table_title_bgcolor$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 25748L)
    private static SubLSymbol $fact_sheet_table_title_font_color$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 25824L)
    private static SubLSymbol $fact_sheet_table_title_horizontal_alignment$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 25900L)
    private static SubLSymbol $fact_sheet_table_header_bgcolor$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 25984L)
    private static SubLSymbol $fact_sheet_table_header_horizontal_alignment$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 26061L)
    private static SubLSymbol $fact_sheet_table_header_font_color$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 26138L)
    private static SubLSymbol $fact_sheet_table_data_bgcolor$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 26210L)
    private static SubLSymbol $fact_sheet_table_data_first_column_horizontal_alignment$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 43299L)
    private static SubLSymbol $fact_sheet_relevant_terms$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 46200L)
    private static SubLSymbol $fact_sheet_term_paraphrase_for_titleP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 46608L)
    private static SubLSymbol $fact_sheet_use_base_urlP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 48300L)
    private static SubLSymbol $fact_sheet_followup_loader_root_relative_path$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 54323L)
    private static SubLSymbol $fact_sheet_request_patterns$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 58526L)
    private static SubLSymbol $scalar_interval_p_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 59199L)
    private static SubLSymbol $mini_fact_sheet_term_types$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 59375L)
    private static SubLSymbol $fact_sheet_data_path$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 60063L)
    private static SubLSymbol $fact_sheet_id_upper_case_escape_char$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 60128L)
    private static SubLSymbol $fact_sheet_id_legacy_upper_case_escape_char$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 60199L)
    private static SubLSymbol $use_fact_sheet_legacy_idsP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 60498L)
    private static SubLSymbol $fact_sheet_term_id_low_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 62426L)
    private static SubLSymbol $warn_unknown_fact_sheet_term_id_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 66157L)
    private static SubLSymbol $fact_sheet_category_order$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 67354L)
    private static SubLSymbol $fact_sheet_sentence_group_summary_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 69987L)
    private static SubLSymbol $fact_sheet_bogus_url_prefix$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 86827L)
    private static SubLSymbol $fact_sheet_outer_table_class$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 86897L)
    private static SubLSymbol $fact_sheet_main_image$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 86965L)
    private static SubLSymbol $fact_sheet_in_cyc_logo$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 87034L)
    private static SubLSymbol $fact_sheet_title$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 87097L)
    private static SubLSymbol $fact_sheet_title_div$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 87164L)
    private static SubLSymbol $fact_sheet_category_title$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 87230L)
    private static SubLSymbol $fact_sheet_fact_class1$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 87294L)
    private static SubLSymbol $fact_sheet_fact_class2$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 87358L)
    private static SubLSymbol $fact_sheet_footnote_class1$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 87426L)
    private static SubLSymbol $fact_sheet_footnote_class2$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 89987L)
    private static SubLSymbol $fact_sheet_kb_version_string_introducer$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 91546L)
    private static SubLSymbol $fact_sheet_revision_string_introducer$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 93939L)
    private static SubLSymbol $fact_sheet_demerit_cutoff$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 94077L)
    private static SubLSymbol $fact_sheet_min_paragraph_length$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 94276L)
    private static SubLSymbol $fact_sheet_verbosities$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 94462L)
    private static SubLSymbol $fact_sheet_image_max_width$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 94519L)
    private static SubLSymbol $fact_sheet_image_max_height$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 94574L)
    private static SubLSymbol $fact_sheet_image_root_placeholder$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 95308L)
    private static SubLSymbol $fact_sheet_base_url_placeholder$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 95967L)
    private static SubLSymbol $fact_sheet_replacement_color_spec$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97314L)
    private static SubLSymbol $fact_sheet_image_file_root_directory$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97438L)
    private static SubLSymbol $fact_sheet_image_file_root_url_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97645L)
    private static SubLSymbol $use_fact_sheet_image_file_root_urlP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97823L)
    private static SubLSymbol $use_relative_fact_sheet_image_urlsP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 98686L)
    private static SubLSymbol $fact_sheet_image_url_root_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 101405L)
    private static SubLSymbol $get_mini_fact_sheet_for_term_cached_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 103571L)
    private static SubLSymbol $use_fact_sheet_builder_queriesP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 103631L)
    private static SubLSymbol $include_miscellaneous_on_fact_sheetsP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 103697L)
    private static SubLSymbol $omitted_fact_sheet_sentences$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 106395L)
    private static SubLSymbol $fact_sheet_sentences_for_term_from_kbq_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 107422L)
    private static SubLSymbol $fact_sheet_sentences_for_term_internal_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 108891L)
    private static SubLSymbol $fact_sheet_pred_aboutness_map$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 110572L)
    private static SubLSymbol $fact_sheet_sentence_trivially_impliesP_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 113647L)
    private static SubLSymbol $fact_highly_prevalent_among_instancesP_cached_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 117578L)
    private static SubLSymbol $fact_sheet_transitivity_check_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 119990L)
    private static SubLSymbol $fact_sheet_queries_browsableP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 120140L)
    private static SubLSymbol $fact_sheet_query_spec_pool$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 120516L)
    private static SubLSymbol $fact_sheet_query_polling_interval$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 124777L)
    private static SubLSymbol $fact_sheet_label_for_category_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 128248L)
    private static SubLSymbol $fact_sheet_sentence_time_interval_cached_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 137512L)
    private static SubLSymbol $fact_sheet_optional_section_start_comment_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 138048L)
    private static SubLSymbol $fact_sheet_optional_section_end_comment_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 155089L)
    private static SubLSymbol $fact_sheet_under_construction_code$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 166256L)
    private static SubLSymbol $stop_fact_sheet_update_after_current_termP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 168089L)
    private static SubLSymbol $fact_sheet_inactivity_image_restart_delay$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 169827L)
    private static SubLSymbol $fact_sheet_generator_update_date_and_second$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 193101L)
    private static SubLSymbol $fact_sheet_screensaver_users$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 194018L)
    private static SubLSymbol $fact_sheet_screensavers$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 194907L)
    private static SubLSymbol $fact_sheet_screensavers_should_sleepP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 195492L)
    private static SubLSymbol $fact_sheet_screensavers_should_dieP$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 200913L)
    private static SubLSymbol $fact_sheet_query_soft_timeout_time$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 201506L)
    private static SubLSymbol $fact_sheet_paraphrase_soft_timeout_time$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 213541L)
    private static SubLSymbol $fact_sheet_directory_from_list_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLSymbol $dtp_fact_sheet_update_term_prioritizer$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214858L)
    private static SubLSymbol $fact_sheet_update_term_prioritizers$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 216254L)
    private static SubLSymbol $fsut_prioritizer_default_nice_level$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 216383L)
    private static SubLSymbol $fsut_prioritizer_max_nice_level$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 216555L)
    private static SubLSymbol $fsut_prioritizer_min_nice_level$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 216728L)
    private static SubLSymbol $fsut_prioritizer_default_new_days$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 223943L)
    private static SubLSymbol $fsut_prioritizer_divisor$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 223996L)
    private static SubLSymbol $fsut_prioritizer_sleep_interval_from_nice_level_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 225951L)
    private static SubLSymbol $fact_sheet_statuses$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 234742L)
    private static SubLSymbol $fact_sheet_updating_lock$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 234924L)
    private static SubLSymbol $fact_sheet_updating_process_dictionary$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 236270L)
    private static SubLSymbol $fact_sheet_lookaside_cache$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 237405L)
    private static SubLSymbol $public_fact_sheet_path$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 239214L)
    private static SubLSymbol $public_fact_sheet_ad_html$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 241055L)
    private static SubLSymbol $get_public_fact_sheet_term_parent_directory_string_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 242753L)
    private static SubLSymbol $terms_for_public_fact_sheets_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 243718L)
    private static SubLSymbol $types_for_public_fact_sheets_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 243933L)
    private static SubLSymbol $fact_sheet_term_strings_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 244466L)
    private static SubLSymbol $get_public_fact_sheet_string_url_mappings_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 246130L)
    private static SubLSymbol $incyc_factsheet_staging_directory$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 246243L)
    private static SubLSymbol $incyc_searchdata_staging_file$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 246356L)
    private static SubLSymbol $incyc_searchdata_xml_file$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 246463L)
    private static SubLSymbol $incyc_searchdata_htaccess_file$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 246580L)
    private static SubLSymbol $incyc_searchdata_sql_file$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 255562L)
    private static SubLSymbol $public_fact_sheet_properties$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 257866L)
    private static SubLSymbol $fs_type$;
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 263844L)
    private static SubLSymbol $cached_num_gaf_arg_index_caching_state$;
    private static final SubLList $list0;
    private static final SubLSymbol $sym1$_ALLOW_FACT_SHEET_EVALUATIONS__;
    private static final SubLSymbol $kw2$PARAMETER;
    private static final SubLSymbol $sym3$CLET;
    private static final SubLList $list4;
    private static final SubLList $list5;
    private static final SubLSymbol $sym6$ALLOW_FACT_SHEET_EVALUATIONS;
    private static final SubLList $list7;
    private static final SubLSymbol $sym8$_FACT_SHEET_EVAL_LOG_FILE_;
    private static final SubLString $str9$_cyc_projects_aquaint_ginko_metri;
    private static final SubLObject $const10$FactSheetQueryContextIndexical;
    private static final SubLSymbol $sym11$INDEXICAL_FACT_SHEET_QUERY_MT;
    private static final SubLObject $const12$FactSheetTableTypeIndexical;
    private static final SubLSymbol $sym13$INDEXICAL_FACT_SHEET_TABLE_TYPE;
    private static final SubLObject $const14$FactSheetSentenceIndexical;
    private static final SubLSymbol $sym15$INDEXICAL_FACT_SHEET_SENTENCE;
    private static final SubLList $list16;
    private static final SubLSymbol $sym17$CUNWIND_PROTECT;
    private static final SubLSymbol $sym18$PROGN;
    private static final SubLSymbol $sym19$CSETQ;
    private static final SubLList $list20;
    private static final SubLSymbol $sym21$PUNLESS;
    private static final SubLList $list22;
    private static final SubLSymbol $sym23$DESTROY_PROBLEM_STORE;
    private static final SubLList $list24;
    private static final SubLList $list25;
    private static final SubLSymbol $sym26$WITH_FACT_SHEET_FOCAL_TERM;
    private static final SubLSymbol $sym27$WITH_PPH_HTML_FUNCTION_AND_TARGET;
    private static final SubLList $list28;
    private static final SubLSymbol $sym29$WITH_PPH_HTML_TERM_ID_FN;
    private static final SubLList $list30;
    private static final SubLSymbol $sym31$WITH_PPH_SPEAKER_AND_ADDRESSEE;
    private static final SubLList $list32;
    private static final SubLObject $const33$FactSheetTopicIndexical;
    private static final SubLSymbol $sym34$INDEXICAL_FACT_SHEET_TOPIC;
    private static final SubLSymbol $kw35$NORMAL;
    private static final SubLList $list36;
    private static final SubLSymbol $sym37$_FACT_SHEET_FOCAL_TERM_;
    private static final SubLSymbol $sym38$POSSIBLY_WITH_THCL_FORT;
    private static final SubLString $str39$_cycdoc_css_cb_fact_sheets_suppre;
    private static final SubLList $list40;
    private static final SubLSymbol $sym41$POSSIBLY_CATCH_ERROR_MESSAGE;
    private static final SubLList $list42;
    private static final SubLSymbol $sym43$WITH_TEXT_FILE;
    private static final SubLList $list44;
    private static final SubLSymbol $sym45$PWHEN;
    private static final SubLSymbol $sym46$_CHMOD_SAFE_TO_USE__;
    private static final SubLSymbol $sym47$CHMOD;
    private static final SubLSymbol $sym48$LOGICAL_PATHNAME_TO_PHYSICAL;
    private static final SubLList $list49;
    private static final SubLSymbol $sym50$WITH_PRIVATE_BINARY_FILE;
    private static final SubLSymbol $sym51$MUST;
    private static final SubLSymbol $sym52$STREAMP;
    private static final SubLString $str53$Cannot_open__A;
    private static final SubLList $list54;
    private static final SubLObject $const55$FactSheetParaphraseMt;
    private static final SubLObject $const56$Now;
    private static final SubLObject $const57$Null_TimeParameter;
    private static final SubLSymbol $sym58$FACT_SHEET_DEFAULT_LANGUAGE_MT;
    private static final SubLSymbol $sym59$_FACT_SHEET_DEFAULT_LANGUAGE_MT_CACHING_STATE_;
    private static final SubLSymbol $sym60$BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT;
    private static final SubLSymbol $sym61$_BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT_CACHING_STATE_;
    private static final SubLObject $const62$FactSheetGenerationMt;
    private static final SubLSymbol $sym63$FACT_SHEET_DEFAULT_DOMAIN_MT;
    private static final SubLSymbol $sym64$_FACT_SHEET_DEFAULT_DOMAIN_MT_CACHING_STATE_;
    private static final SubLSymbol $sym65$BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT;
    private static final SubLSymbol $sym66$_BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT_CACHING_STATE_;
    private static final SubLSymbol $kw67$PUBLIC;
    private static final SubLObject $const68$FactSheetDomainMtQuery;
    private static final SubLObject $const69$MtUnionFn;
    private static final SubLSymbol $kw70$DEFAULT;
    private static final SubLSymbol $sym71$CONVERT_FACT_SHEET_LINK_TO_SPAN;
    private static final SubLString $str72$fact_sheet_sentence;
    private static final SubLString $str73$;
    private static final SubLString $str74$_span_id__;
    private static final SubLString $str75$__class__fact_sheet_sentence__;
    private static final SubLString $str76$__span_;
    private static final SubLSymbol $sym77$CYCL_DENOTATIONAL_TERM_P;
    private static final SubLSymbol $sym78$FACT_SHEET_VERBOSITY_P;
    private static final SubLSymbol $sym79$POSSIBLY_MT_P;
    private static final SubLList $list80;
    private static final SubLString $str81$Miscellaneous;
    private static final SubLSymbol $sym82$GET_FACT_SHEET_FOR_TERM_IN_XML_WITH_ONLY_KB_SPECIFIED_CONTENT;
    private static final SubLSymbol $kw83$MARKUP_TYPE;
    private static final SubLSymbol $kw84$XML;
    private static final SubLSymbol $kw85$SKIP_SECTIONS;
    private static final SubLSymbol $sym86$GET_FACT_SHEET_FOR_TERM_IN_HTML;
    private static final SubLSymbol $kw87$HTML;
    private static final SubLSymbol $kw88$STYLESHEETS;
    private static final SubLList $list89;
    private static final SubLSymbol $kw90$MAX_TIME;
    private static final SubLList $list91;
    private static final SubLSymbol $sym92$PRINC;
    private static final SubLSymbol $sym93$FACT_SHEET_OPTIONAL_SECTION_START_COMMENT;
    private static final SubLList $list94;
    private static final SubLSymbol $sym95$FACT_SHEET_OPTIONAL_SECTION_END_COMMENT;
    private static final SubLSymbol $sym96$STRINGP;
    private static final SubLSymbol $kw97$MINI;
    private static final SubLString $str98$NOTE;
    private static final SubLString $str99$Gathered__D_group__P_of_sentences;
    private static final SubLList $list100;
    private static final SubLList $list101;
    private static final SubLSymbol $sym102$CYCL_REPRESENTED_TERM_P;
    private static final SubLSymbol $sym103$HLMT_;
    private static final SubLSymbol $sym104$NON_NEGATIVE_INTEGER_P;
    private static final SubLSymbol $sym105$NON_NEGATIVE_NUMBER_P;
    private static final SubLSymbol $kw106$INCLUDE_SECTIONS;
    private static final SubLList $list107;
    private static final SubLString $str108$Prefering_slot_value_format_for__;
    private static final SubLString $str109$Disprefering_slot_value_format_fo;
    private static final SubLSymbol $kw110$SLOT_VALUE_PREFERENCE_PATTERN;
    private static final SubLString $str111$center;
    private static final SubLString $str112$50_;
    private static final SubLString $str113$right;
    private static final SubLString $str114$title;
    private static final SubLString $str115$factGroup;
    private static final SubLSymbol $kw116$UNINITIALIZED;
    private static final SubLList $list117;
    private static final SubLString $str118$id;
    private static final SubLString $str119$cycl;
    private static final SubLString $str120$fact;
    private static final SubLList $list121;
    private static final SubLString $str122$header;
    private static final SubLString $str123$arg;
    private static final SubLString $str124$_A;
    private static final SubLSymbol $sym125$_;
    private static final SubLSymbol $sym126$TERM__;
    private static final SubLSymbol $sym127$FACT_SHEET_PRED_COUNT__;
    private static final SubLSymbol $sym128$FACT_SHEET_TABLE_SENTENCE_DATA_PREDICATE;
    private static final SubLObject $const129$titleForTablesOfType;
    private static final SubLSymbol $sym130$SECOND;
    private static final SubLSymbol $sym131$THIRD;
    private static final SubLSymbol $sym132$FOURTH;
    private static final SubLList $list133;
    private static final SubLSymbol $kw134$TEXT;
    private static final SubLSymbol $kw135$FACT_SHEET;
    private static final SubLSymbol $sym136$FACT_SHEET_TERM_ID;
    private static final SubLSymbol $kw137$UNKNOWN;
    private static final SubLObject $const138$FactSheetTableSectionAndHeaderQue;
    private static final SubLSymbol $kw139$BROWSABLE_;
    private static final SubLSymbol $sym140$FIRST;
    private static final SubLObject $const141$FactSheetTableCellValuesQuery;
    private static final SubLSymbol $kw142$INFERENCE_MODE;
    private static final SubLSymbol $kw143$SHALLOW;
    private static final SubLSymbol $kw144$MAX_NUMBER;
    private static final SubLSymbol $kw145$PROBLEM_STORE;
    private static final SubLSymbol $kw146$IGNORE;
    private static final SubLObject $const147$indexicalReferent;
    private static final SubLList $list148;
    private static final SubLSymbol $sym149$VAR;
    private static final SubLList $list150;
    private static final SubLObject $const151$AnytimePSC;
    private static final SubLList $list152;
    private static final SubLSymbol $sym153$CAR;
    private static final SubLSymbol $sym154$FACT_SHEET_TABLE_TYPE_WIDTH;
    private static final SubLObject $const155$tableTypeWidth;
    private static final SubLSymbol $kw156$SENTENCE;
    private static final SubLSymbol $kw157$ASSERTIONS;
    private static final SubLSymbol $sym158$ASSERTION_P;
    private static final SubLSymbol $sym159$SUMMARY_SENTENCE_PLIST_;
    private static final SubLSymbol $sym160$SUMMARY_SENTENCE_PLIST_CYCL;
    private static final SubLSymbol $sym161$INVALID_ASSERTION_;
    private static final SubLSymbol $kw162$ALLOWED_TERM_TYPE;
    private static final SubLSymbol $kw163$ALL;
    private static final SubLSymbol $kw164$BLACKLIST_SOURCES;
    private static final SubLList $list165;
    private static final SubLSymbol $sym166$INVALID_FORT_;
    private static final SubLSymbol $sym167$FACT_SHEET_SLOT_VALUE_STRING;
    private static final SubLObject $const168$QuantificationalRuleMacroPredicat;
    private static final SubLString $str169$Wrong_number_of_args_in__S;
    private static final SubLString $str170$Couldn_t_find__S_in__S;
    private static final SubLObject $const171$TheCoordinationSet;
    private static final SubLSymbol $sym172$UNLEXIFIED_;
    private static final SubLSymbol $sym173$CONSTANT_P;
    private static final SubLObject $const174$BaseKB;
    private static final SubLList $list175;
    private static final SubLSymbol $kw176$PUBLIC_ONLY;
    private static final SubLSymbol $sym177$NON_PUBLIC_CONSTANT;
    private static final SubLSymbol $sym178$NON_PUBLIC_CONSTANT_;
    private static final SubLString $str179$Filtering__S___due_to_non_public_;
    private static final SubLSymbol $kw180$NON_PROPRIETARY;
    private static final SubLSymbol $sym181$PROPRIETARY_CONSTANT_;
    private static final SubLString $str182$Filtering__S___due_to_proprietary;
    private static final SubLString $str183$Filtering__S___due_to_blacklisted;
    private static final SubLString $str184$Filtering____S;
    private static final SubLSymbol $kw185$NONE;
    private static final SubLSymbol $sym186$_EXIT;
    private static final SubLString $str187$Fact_Sheet_for_;
    private static final SubLSymbol $sym188$FACT_SHEET_STATS_P;
    private static final SubLString $str189$factSheet;
    private static final SubLString $str190$_Enesta_resources_followupLoader_;
    private static final SubLSymbol $kw191$STYLESHEET;
    private static final SubLSymbol $kw192$SHOW_AD_;
    private static final SubLSymbol $kw193$SHOW_INFO_LINK_URL;
    private static final SubLSymbol $kw194$SHOW_URI_;
    private static final SubLSymbol $kw195$SHOW_FOLLOWUP_WIDGET_;
    private static final SubLString $str196$__DOCTYPE_html_PUBLIC_____W3C__DT;
    private static final SubLString $str197$_meta_http_equiv__X_UA_Compatible;
    private static final SubLString $str198$stylesheet;
    private static final SubLString $str199$text_css;
    private static final SubLString $str200$_div_class__cycFollowup__termId__;
    private static final SubLSymbol $sym201$CATCH_ERROR_MESSAGE_HANDLER;
    private static final SubLSymbol $kw202$STATS;
    private static final SubLSymbol $kw203$COPYRIGHT;
    private static final SubLString $str204$_script_src___A__type__text_javas;
    private static final SubLString $str205$WARN;
    private static final SubLString $str206$Unable_to_print_fact_sheet_statis;
    private static final SubLList $list207;
    private static final SubLString $str208$A_Semantic_Web_URI_is_a_stable_na;
    private static final SubLString $str209$__and_you_should_use_it_in_web_pa;
    private static final SubLString $str210$Technical_Details;
    private static final SubLString $str211$This_page_was_automatically_creat;
    private static final SubLString $str212$automated_reasoning_and_natural_l;
    private static final SubLString $str213$__;
    private static final SubLString $str214$Cyc_first_learned_about__A_on__A_;
    private static final SubLString $str215$The_;
    private static final SubLString $str216$http___sw_opencyc_org_docs_swuri_;
    private static final SubLString $str217$Semantic_Web_URI;
    private static final SubLString $str218$_for__A_is__;
    private static final SubLSymbol $sym219$GET_FACT_SHEET_FOR_TERM_ID_IN_HTML;
    private static final SubLSymbol $sym220$CLEAR_ALL_FACT_SHEET_CACHES;
    private static final SubLSymbol $kw221$CLEARED;
    private static final SubLString $str222$what_do_you_know_about_;
    private static final SubLString $str223$tell_me_about_;
    private static final SubLString $str224$facts_about_;
    private static final SubLString $str225$explain_;
    private static final SubLString $str226$fact_sheet_for_;
    private static final SubLString $str227$fact_sheet_about_;
    private static final SubLString $str228$show_;
    private static final SubLString $str229$_facts;
    private static final SubLString $str230$_knowledge;
    private static final SubLString $str231$_fact_sheet;
    private static final SubLList $list232;
    private static final SubLList $list233;
    private static final SubLList $list234;
    private static final SubLSymbol $kw235$DENOT;
    private static final SubLSymbol $kw236$NEVER;
    private static final SubLSymbol $sym237$GET_POSSIBLE_FACT_SHEET_TERMS_MENTIONED_IN_STRING;
    private static final SubLSymbol $sym238$TERM_OK_FOR_CAE_QUERY_SEARCH_TERM_BOX_P;
    private static final SubLList $list239;
    private static final SubLList $list240;
    private static final SubLSymbol $sym241$ADD_LEARNER;
    private static final SubLSymbol $sym242$SCALAR_INTERVAL_LEARN;
    private static final SubLSymbol $sym243$RKF_STANDARD_STRING_WORDIFY;
    private static final SubLSymbol $kw244$LEXICON;
    private static final SubLSymbol $kw245$OUTPUT_SPEC;
    private static final SubLList $list246;
    private static final SubLSymbol $sym247$SCALAR_INTERVAL_P;
    private static final SubLObject $const248$ScalarInterval;
    private static final SubLSymbol $sym249$_SCALAR_INTERVAL_P_CACHING_STATE_;
    private static final SubLInteger $int250$4096;
    private static final SubLSymbol $sym251$TERM_OK_FOR_FACT_SHEET_P;
    private static final SubLSymbol $sym252$FORT_P;
    private static final SubLObject $const253$InferencePSC;
    private static final SubLList $list254;
    private static final SubLString $str255$data;
    private static final SubLString $str256$fact_sheets;
    private static final SubLString $str257$_S_does_not_specify_an_existing_d;
    private static final SubLSymbol $sym258$FACT_SHEET_TERM_ID_LOW;
    private static final SubLSymbol $sym259$_FACT_SHEET_TERM_ID_LOW_CACHING_STATE_;
    private static final SubLInteger $int260$1024;
    private static final SubLSymbol $sym261$FACT_SHEET_TERM_FROM_ID;
    private static final SubLSymbol $sym262$POSSIBLE_FACT_SHEET_TERM_ID_P;
    private static final SubLSymbol $sym263$WARN_UNKNOWN_FACT_SHEET_TERM_ID;
    private static final SubLString $str264$Couldn_t_identify_term_from_fact_;
    private static final SubLSymbol $sym265$_WARN_UNKNOWN_FACT_SHEET_TERM_ID_CACHING_STATE_;
    private static final SubLSymbol $sym266$FACT_SHEET_TERM_FROM_SPAN_ID;
    private static final SubLString $str267$Error_getting_fact_sheet_term_fro;
    private static final SubLList $list268;
    private static final SubLString $str269$Using_PPH_timeout_of__S_seconds_;
    private static final SubLString $str270$___Top_level_CycL___S;
    private static final SubLSymbol $kw271$NEW;
    private static final SubLString $str272$Error_generating_paraphrases___A;
    private static final SubLString $str273$Generated__D_paragraph__P_contain;
    private static final SubLSymbol $kw274$SUPERSCRIPTS;
    private static final SubLSymbol $sym275$HIGHER_PRIORITY_FACT_SHEET_CATEGORY_;
    private static final SubLList $list276;
    private static final SubLSymbol $sym277$FACT_SHEET_SENTENCE_GROUP_SUMMARY;
    private static final SubLString $str278$Failed_to_paraphrase__D_sentence_;
    private static final SubLSymbol $sym279$_FACT_SHEET_SENTENCE_GROUP_SUMMARY_CACHING_STATE_;
    private static final SubLString $str280$_a_href_;
    private static final SubLString $str281$_;
    private static final SubLString $str282$http___fact_sheet;
    private static final SubLSymbol $kw283$OUTPUT;
    private static final SubLString $str284$Unable_to_open__S;
    private static final SubLString $str285$664;
    private static final SubLList $list286;
    private static final SubLList $list287;
    private static final SubLString $str288$_a;
    private static final SubLString $str289$_span;
    private static final SubLList $list290;
    private static final SubLString $str291$__a;
    private static final SubLString $str292$__span;
    private static final SubLList $list293;
    private static final SubLSymbol $kw294$DONT_REPLACE;
    private static final SubLString $str295$close_tag__S_and_current_tag__S_d;
    private static final SubLString $str296$__;
    private static final SubLSymbol $sym297$GET_TERM_AND_CLOSE_TAG_FROM_TOKEN;
    private static final SubLSymbol $kw298$TEST;
    private static final SubLSymbol $kw299$OWNER;
    private static final SubLSymbol $kw300$CLASSES;
    private static final SubLSymbol $kw301$KB;
    private static final SubLSymbol $kw302$FULL;
    private static final SubLSymbol $kw303$WORKING_;
    private static final SubLList $list304;
    private static final SubLString $str305$sentence;
    private static final SubLSymbol $sym306$REMOVE_LINK;
    private static final SubLSymbol $sym307$COMPACT_HL_EXTERNAL_ID_STRING;
    private static final SubLSymbol $sym308$COMPACT_HL_INTERNAL_ID_STRING;
    private static final SubLSymbol $sym309$LAST_ONE;
    private static final SubLString $str310$fact_sheet_term;
    private static final SubLList $list311;
    private static final SubLList $list312;
    private static final SubLSymbol $sym313$_;
    private static final SubLList $list314;
    private static final SubLList $list315;
    private static final SubLSymbol $kw316$TERSE;
    private static final SubLSymbol $kw317$BRANDING_INFO;
    private static final SubLSymbol $kw318$CENTER;
    private static final SubLSymbol $kw319$TITLE;
    private static final SubLString $str320$image;
    private static final SubLList $list321;
    private static final SubLString $str322$white;
    private static final SubLString $str323$fs_outer_table;
    private static final SubLString $str324$fs_main_image;
    private static final SubLString $str325$fs_in_cyc_logo;
    private static final SubLString $str326$fs_title;
    private static final SubLString $str327$fs_title_div;
    private static final SubLString $str328$fs_category;
    private static final SubLString $str329$fs_fact_1;
    private static final SubLString $str330$fs_fact_2;
    private static final SubLString $str331$fs_footnote_1;
    private static final SubLString $str332$fs_footnote_2;
    private static final SubLList $list333;
    private static final SubLString $str334$_;
    private static final SubLString $str335$Header;
    private static final SubLString $str336$url;
    private static final SubLString $str337$category;
    private static final SubLString $str338$factSheetSection;
    private static final SubLString $str339$footnotes;
    private static final SubLString $str340$KB__;
    private static final SubLString $str341$System__;
    private static final SubLList $list342;
    private static final SubLString $str343$Domain_mt___A;
    private static final SubLString $str344$Verbosity___A;
    private static final SubLString $str345$Sentence_Count___S;
    private static final SubLString $str346$Section_Count___S;
    private static final SubLString $str347$Information_Gathering_Time___a;
    private static final SubLString $str348$Paraphrase_Time___a;
    private static final SubLString $str349$Customization_and_Display_Time___;
    private static final SubLString $str350$_A_at__A_on__A;
    private static final SubLString $str351$Started;
    private static final SubLString $str352$Created;
    private static final SubLString $str353$Image_ID___A;
    private static final SubLString $str354$_A_A__A_A_;
    private static final SubLList $list355;
    private static final SubLInteger $int356$500;
    private static final SubLInteger $int357$200;
    private static final SubLString $str358$FACT_SHEET_IMAGE_ROOT_;
    private static final SubLObject $const359$salientTermImagePathname;
    private static final SubLSymbol $kw360$TRUE;
    private static final SubLString $str361$FACT_SHEET_BASE_URL_;
    private static final SubLList $list362;
    private static final SubLSymbol $sym363$FACT_SHEET_IMAGE_FILE_ROOT_URL;
    private static final SubLString $str364$file___;
    private static final SubLSymbol $sym365$_FACT_SHEET_IMAGE_FILE_ROOT_URL_CACHING_STATE_;
    private static final SubLString $str366$___img_;
    private static final SubLSymbol $sym367$FACT_SHEET_IMAGE_URL_ROOT;
    private static final SubLSymbol $sym368$_URL;
    private static final SubLList $list369;
    private static final SubLSymbol $sym370$_FACT_SHEET_IMAGE_URL_ROOT_CACHING_STATE_;
    private static final SubLObject $const371$FactSheetSentenceQuery;
    private static final SubLObject $const372$equalSymbols;
    private static final SubLSymbol $sym373$_SENTENCE;
    private static final SubLObject $const374$MiniFactSheetSentenceQuery;
    private static final SubLObject $const375$TerrorismParaphraseMt;
    private static final SubLList $list376;
    private static final SubLSymbol $sym377$GET_MINI_FACT_SHEET_FOR_TERM_CACHED;
    private static final SubLString $str378$Query_got_mini_fact_sheet_of_leng;
    private static final SubLString $str379$Query_failed_to_get_mini_fact_she;
    private static final SubLSymbol $sym380$_GET_MINI_FACT_SHEET_FOR_TERM_CACHED_CACHING_STATE_;
    private static final SubLSymbol $kw381$VERBOSE;
    private static final SubLString $str382$Using_soft_query_timeout_of__S_se;
    private static final SubLSymbol $kw383$PROBABLY_APPROXIMATELY_DONE;
    private static final SubLFloat $float384$0_99;
    private static final SubLObject $const385$GetFactSheetBuilderQueriesForTopi;
    private static final SubLSymbol $kw386$RETURN;
    private static final SubLList $list387;
    private static final SubLString $str388$FactSheetBuilderQuery;
    private static final SubLSymbol $sym389$FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ;
    private static final SubLString $str390$Caught_error_while_running__S_for;
    private static final SubLString $str391$_S____yielded__D_paragraph__P_in_;
    private static final SubLSymbol $sym392$_FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ_CACHING_STATE_;
    private static final SubLInteger $int393$128;
    private static final SubLSymbol $sym394$FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL;
    private static final SubLSymbol $kw395$FACT_SHEET_INFERENCE_ERROR;
    private static final SubLList $list396;
    private static final SubLList $list397;
    private static final SubLSymbol $sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_;
    private static final SubLSymbol $sym399$_FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL_CACHING_STATE_;
    private static final SubLList $list400;
    private static final SubLFloat $float401$0_5;
    private static final SubLList $list402;
    private static final SubLObject $const403$relationInstanceExists;
    private static final SubLString $str404$_S___implies__S;
    private static final SubLList $list405;
    private static final SubLString $str406$_S___is_a_trivial_meta_support_of;
    private static final SubLObject $const407$isa;
    private static final SubLString $str408$_S___is_highly_prevalent_among_in;
    private static final SubLSymbol $sym409$_FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES__CACHING_STATE_;
    private static final SubLSymbol $kw410$REPLACEME;
    private static final SubLSymbol $sym411$FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED;
    private static final SubLFloat $float412$0_9;
    private static final SubLSymbol $sym413$_FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED_CACHING_STATE_;
    private static final SubLInteger $int414$256;
    private static final SubLSymbol $sym415$RULE_ASSERTION_;
    private static final SubLList $list416;
    private static final SubLObject $const417$temporallySubsumes;
    private static final SubLObject $const418$Always_TimeInterval;
    private static final SubLSymbol $kw419$DEPTH;
    private static final SubLSymbol $kw420$STACK;
    private static final SubLSymbol $kw421$QUEUE;
    private static final SubLSymbol $sym422$RELEVANT_SBHL_TV_IS_GENERAL_TV;
    private static final SubLSymbol $kw423$ERROR;
    private static final SubLString $str424$_A_is_not_a__A;
    private static final SubLSymbol $sym425$SBHL_TRUE_TV_P;
    private static final SubLSymbol $kw426$CERROR;
    private static final SubLString $str427$continue_anyway;
    private static final SubLSymbol $kw428$WARN;
    private static final SubLString $str429$_A_is_not_a_valid__sbhl_type_erro;
    private static final SubLObject $const430$genlPreds;
    private static final SubLObject $const431$transitiveViaArgInverse;
    private static final SubLObject $const432$transitiveViaArg;
    private static final SubLString $str433$_A_is_neither_SET_P_nor_LISTP_;
    private static final SubLString $str434$attempting_to_bind_direction_link;
    private static final SubLString $str435$Node__a_does_not_pass_sbhl_type_t;
    private static final SubLSymbol $sym436$FACT_SHEET_TRANSITIVITY_CHECK;
    private static final SubLSymbol $sym437$_FACT_SHEET_TRANSITIVITY_CHECK_CACHING_STATE_;
    private static final SubLList $list438;
    private static final SubLString $str439$Added__D_THCL_sentence__P_in__5F_;
    private static final SubLList $list440;
    private static final SubLSymbol $kw441$GAF;
    private static final SubLString $str442$Fact_Sheet_Query_Daemon;
    private static final SubLSymbol $sym443$FACT_SHEET_QUERY_DAEMON_RUN;
    private static final SubLString $str444$Fact_Sheet_Query_Daemon_caught_er;
    private static final SubLSymbol $kw445$TIMED_OUT;
    private static final SubLInteger $int446$300;
    private static final SubLString $str447$Hit_soft_timeout_of__S_seconds_af;
    private static final SubLString $str448$Hit_hard_timeout_of__S_seconds_af;
    private static final SubLSymbol $sym449$FACT_SHEET_LABEL_FOR_CATEGORY;
    private static final SubLObject $const450$termSummaryPredicateLabel;
    private static final SubLSymbol $sym451$_FACT_SHEET_LABEL_FOR_CATEGORY_CACHING_STATE_;
    private static final SubLList $list452;
    private static final SubLList $list453;
    private static final SubLSymbol $sym454$FACT_SHEET_SENTENCE_MORE_RECENT_;
    private static final SubLSymbol $sym455$FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED;
    private static final SubLSymbol $sym456$_FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED_CACHING_STATE_;
    private static final SubLSymbol $sym457$FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY;
    private static final SubLObject $const458$agentBioDataSentence;
    private static final SubLObject $const459$ethnicity;
    private static final SubLObject $const460$birthPlace;
    private static final SubLObject $const461$birthDate;
    private static final SubLObject $const462$placeOfDeath;
    private static final SubLObject $const463$dateOfDeath;
    private static final SubLList $list464;
    private static final SubLSymbol $sym465$FACT_SHEET_SENTENCES_EQUAL_;
    private static final SubLString $str466$_S___has_coherence__S_to____S;
    private static final SubLSymbol $sym467$FACT_SHEET_SENTENCE_COHERENCE;
    private static final SubLList $list468;
    private static final SubLSymbol $sym469$FACT_SHEET_SENTENCE_PREDICATE;
    private static final SubLSymbol $sym470$FACT_SHEET_SENTENCE_REFERENCES_EARLIER_DATE_;
    private static final SubLString $str471$Earlierness_problem_____S____S;
    private static final SubLSymbol $sym472$DATE_P;
    private static final SubLSymbol $sym473$EXPRESSION_CONTAINS_;
    private static final SubLSymbol $sym474$DATE_;
    private static final SubLSymbol $kw475$DISPLAY_TITLE_;
    private static final SubLSymbol $kw476$PRINT_STATS_;
    private static final SubLSymbol $kw477$SHOW_COPYRIGHT_;
    private static final SubLString $str478$KB____0123456789_____;
    private static final SubLString $str479$System____0123456789_____;
    private static final SubLString $str480$_span_class__copyright__;
    private static final SubLString $str481$Copyright;
    private static final SubLSymbol $sym482$_FACT_SHEET_OPTIONAL_SECTION_START_COMMENT_CACHING_STATE_;
    private static final SubLSymbol $sym483$_FACT_SHEET_OPTIONAL_SECTION_END_COMMENT_CACHING_STATE_;
    private static final SubLString $str484$Start_Fact_Sheet_Section_;
    private static final SubLString $str485$End_Fact_Sheet_Section_;
    private static final SubLSymbol $sym486$TERM_HAS_PRECACHED_FACT_SHEET_;
    private static final SubLSymbol $kw487$ANY;
    private static final SubLList $list488;
    private static final SubLList $list489;
    private static final SubLList $list490;
    private static final SubLString $str491$html;
    private static final SubLSymbol $kw492$IGNORE_ERRORS_TARGET;
    private static final SubLSymbol $sym493$IGNORE_ERRORS_HANDLER;
    private static final SubLSymbol $kw494$FELL_BACK_ON_DEFAULT_;
    private static final SubLString $str495$Recently_Added;
    private static final SubLList $list496;
    private static final SubLSymbol $sym497$MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM;
    private static final SubLSymbol $sym498$DIRECTORY_P;
    private static final SubLString $str499$cdolist;
    private static final SubLString $str500$_;
    private static final SubLList $list501;
    private static final SubLSymbol $kw502$ALLOWED;
    private static final SubLString $str503$cfasl;
    private static final SubLSymbol $kw504$CURRENT;
    private static final SubLSymbol $kw505$INPUT;
    private static final SubLString $str506$Error_loading_data_for__S___A;
    private static final SubLString $str507$This_fact_sheet_for_;
    private static final SubLString $str508$_is_under_construction__Come_back;
    private static final SubLString $str509$775;
    private static final SubLString $str510$Couldn_t_create_directory_for_fac;
    private static final SubLString $str511$_;
    private static final SubLString $str512$_under_construction_;
    private static final SubLString $str513$_html;
    private static final SubLString $str514$under_construction__Come_back_soo;
    private static final SubLString $str515$Gathering_old_under_construction_;
    private static final SubLString $str516$_Directory__;
    private static final SubLString $str517$_under_construction_cfasl;
    private static final SubLSymbol $kw518$DELETED;
    private static final SubLString $str519$_S_is_not_a_valid_extension__Must;
    private static final SubLString $str520$Couldn_t_create_directory_for_fac;
    private static final SubLString $str521$Couldn_t_write_fact_sheet_for__S_;
    private static final SubLString $str522$Couldn_t_write_fact_sheet_for__S_;
    private static final SubLString $str523$Couldn_t_write_fact_sheet_formatt;
    private static final SubLString $str524$Couldn_t_create_directory_for_fac;
    private static final SubLString $str525$Couldn_t_write_fact_sheet_data_fo;
    private static final SubLString $str526$Fact_Sheet_Updater;
    private static final SubLSymbol $sym527$UPDATE_FACT_SHEETS;
    private static final SubLString $str528$Stale_Fact_Sheet_Updater;
    private static final SubLSymbol $sym529$UPDATE_ALL_STALE_FACT_SHEETS;
    private static final SubLList $list530;
    private static final SubLList $list531;
    private static final SubLString $str532$All_Fact_Sheet_Updater;
    private static final SubLSymbol $sym533$UPDATE_ALL_FACT_SHEETS;
    private static final SubLString $str534$Fact_Sheet_Log_File_Watcher;
    private static final SubLSymbol $sym535$WATCH_FACT_SHEET_LOG_FILE;
    private static final SubLInteger $int536$60;
    private static final SubLString $str537$No_progress_after_at_least__A_try;
    private static final SubLString $str538$Halting_fact_sheet_updating___S;
    private static final SubLList $list539;
    private static final SubLObject $const540$Individual;
    private static final SubLSymbol $sym541$COLLECTION_P;
    private static final SubLSymbol $sym542$INTEGERP;
    private static final SubLString $str543$__Logging_Fact_Sheet_generation_t;
    private static final SubLSymbol $kw544$APPEND;
    private static final SubLString $str545$Updating_fact_sheets_for_all_fact;
    private static final SubLSymbol $kw546$BREADTH;
    private static final SubLList $list547;
    private static final SubLString $str548$Closing_log_;
    private static final SubLString $str549$Fact_Sheet_updater_for_Public_Fac;
    private static final SubLSymbol $sym550$UPDATE_FACT_SHEETS_OF_FS_TYPE_NOT_UPDATED_SINCE;
    private static final SubLString $str551$Updating_;
    private static final SubLString $str552$_fact_sheets;
    private static final SubLString $str553$Updating_fact_sheets_for_public_t;
    private static final SubLString $str554$Updating_stale_fact_sheets___;
    private static final SubLString $str555$Updating_all_stale_fact_sheets_fr;
    private static final SubLString $str556$Now_doing__S__S__S;
    private static final SubLString $str557$Stale_Fact_Sheet_Updater_error_on;
    private static final SubLString $str558$Abandoning_after__D_errors_;
    private static final SubLString $str559$Instructed_to_stop_updates_after_;
    private static final SubLString $str560$Finished_stale_fact_sheet_update_;
    private static final SubLString $str561$Sleeping_until_8_00_tonight__Zzz_;
    private static final SubLString $str562$Checking_for_fact_sheets_that_hav;
    private static final SubLSymbol $kw563$DONE;
    private static final SubLString $str564$KEYWORD;
    private static final SubLSymbol $kw565$NOT_UPDATED;
    private static final SubLString $str566$under_construction;
    private static final SubLString $str567$_cfasl;
    private static final SubLString $str568$Couldn_t_determine_focal_term_fro;
    private static final SubLString $str569$Can_t_update_fact_sheet_for__S___;
    private static final SubLString $str570$Can_t_update_fact_sheet_for__S___;
    private static final SubLString $str571$Can_t_update_fact_sheet_for__S___;
    private static final SubLString $str572$Can_t_update_fact_sheet_for__S___;
    private static final SubLString $str573$Updating_stale_fact_sheet_for__S_;
    private static final SubLSymbol $kw574$UPDATED;
    private static final SubLList $list575;
    private static final SubLSymbol $sym576$WITH_ALL_MTS;
    private static final SubLSymbol $sym577$DO_ALL_FORT_INSTANCES;
    private static final SubLList $list578;
    private static final SubLList $list579;
    private static final SubLInteger $int580$50;
    private static final SubLString $str581$term_ids_to_update_;
    private static final SubLSymbol $sym582$RELEVANT_MT_IS_EVERYTHING;
    private static final SubLObject $const583$EverythingPSC;
    private static final SubLObject $const584$TerroristAttack;
    private static final SubLString $str585$_term_ids_to_update_;
    private static final SubLSymbol $kw586$CONSTANT;
    private static final SubLSymbol $sym587$FIND_CONSTANT_BY_INTERNAL_ID;
    private static final SubLSymbol $kw588$NART;
    private static final SubLSymbol $sym589$FIND_NART_BY_ID;
    private static final SubLString $str590$Invalid_term_type_specification__;
    private static final SubLString $str591$a_specific_ID_set;
    private static final SubLString $str592$Updating_fact_sheets_from_;
    private static final SubLString $str593$Skipping__S__which_was_updated_on;
    private static final SubLString $str594$Writing_fact_sheet_data_for__S_to;
    private static final SubLString $str595$Couldn_t_find_fact_sheet_file_for;
    private static final SubLString $str596$term_ids_;
    private static final SubLString $str597$_3__0D;
    private static final SubLString $str598$Updating_fact_sheets_file___D_of_;
    private static final SubLString $str599$Couldn_t_find_id_file__S;
    private static final SubLSymbol $sym600$NON_DOTTED_LIST_P;
    private static final SubLSymbol $sym601$FACT_SHEET_STATUS_P;
    private static final SubLString $str602$Scanning_for_fact_sheets_requirin;
    private static final SubLSymbol $kw603$SKIP;
    private static final SubLString $str604$Determining_for_all_fact_sheet_na;
    private static final SubLSymbol $sym605$POSITIVE_INTEGER_P;
    private static final SubLString $str606$THIS_WORKER_NUMBER___a__must_be_l;
    private static final SubLString $str607$Starting_fact_sheet_update_sessio;
    private static final SubLString $str608$Iterating_over_all_FORTs_to_updat;
    private static final SubLList $list609;
    private static final SubLString $str610$Starting__S_update_on__S__Status_;
    private static final SubLString $str611$Fact_Sheet_Updater_error_on__S___;
    private static final SubLString $str612$Halting_Fact_Sheet_Update_after__;
    private static final SubLString $str613$Finished_fact_sheet_update_sessio;
    private static final SubLString $str614$Starting_fact_sheet_update_sessio;
    private static final SubLString $str615$Fact_Sheet_Updater_error__;
    private static final SubLString $str616$Background;
    private static final SubLString $str617$Run;
    private static final SubLList $list618;
    private static final SubLSymbol $sym619$_FACT_SHEET_SCREENSAVERS_;
    private static final SubLString $str620$Fact_Sheet_Screensaver;
    private static final SubLSymbol $sym621$UPDATE_FACT_SHEET_SCREENSAVER;
    private static final SubLString $str622$Starting_fact_sheet_update_screen;
    private static final SubLString $str623$_00;
    private static final SubLString $str624$midnight;
    private static final SubLString $str625$Start_time_hasn_t_arrived__Sleepi;
    private static final SubLString $str626$End_time_of__S_00_has_passed__Sle;
    private static final SubLString $str627$Been_told_to_sleep__Sleeping_for_;
    private static final SubLString $str628$Image_appears_to_be_busy__Sleepin;
    private static final SubLString $str629$Fact_Sheet_Screensavers_have_been;
    private static final SubLString $str630$Updating__S;
    private static final SubLString $str631$Finished_fact_sheet_for__S_in__5F;
    private static final SubLString $str632$Caught_error_while_updating__S_fa;
    private static final SubLList $list633;
    private static final SubLInteger $int634$1800;
    private static final SubLString $str635$Encountered_inference_error_while;
    private static final SubLList $list636;
    private static final SubLString $str637$Launching_make_up_updater_for__S_;
    private static final SubLString $str638$_Timed_out_after_;
    private static final SubLString $str639$_seconds__;
    private static final SubLString $str640$_Didn_t_time_out__Probably_ran_in;
    private static final SubLString $str641$Fact_Sheet_Post_Timeout_Updater;
    private static final SubLSymbol $sym642$UPDATE_FACT_SHEET_FOR_TERM;
    private static final SubLList $list643;
    private static final SubLList $list644;
    private static final SubLList $list645;
    private static final SubLSymbol $kw646$ANYTHING;
    private static final SubLList $list647;
    private static final SubLList $list648;
    private static final SubLList $list649;
    private static final SubLString $str650$_S_was_modified_on__S____New_GAF_;
    private static final SubLString $str651$_formatting_guidelines_cfasl;
    private static final SubLList $list652;
    private static final SubLSymbol $sym653$FACT_SHEET_DIRECTORY_FROM_LIST;
    private static final SubLSymbol $sym654$_FACT_SHEET_DIRECTORY_FROM_LIST_CACHING_STATE_;
    private static final SubLSymbol $sym655$FACT_SHEET_UPDATE_TERM_PRIORITIZER;
    private static final SubLSymbol $sym656$FACT_SHEET_UPDATE_TERM_PRIORITIZER_P;
    private static final SubLList $list657;
    private static final SubLList $list658;
    private static final SubLList $list659;
    private static final SubLList $list660;
    private static final SubLSymbol $sym661$PPRINT_FSUT_PRIORITIZER;
    private static final SubLSymbol $sym662$FACT_SHEET_UPDATE_TERM_PRIORITIZER_PRINT_FUNCTION_TRAMPOLINE;
    private static final SubLList $list663;
    private static final SubLSymbol $sym664$FSUT_PRIORITIZER_STALE_TERMS;
    private static final SubLSymbol $sym665$_CSETF_FSUT_PRIORITIZER_STALE_TERMS;
    private static final SubLSymbol $sym666$FSUT_PRIORITIZER_MISSING_TERMS;
    private static final SubLSymbol $sym667$_CSETF_FSUT_PRIORITIZER_MISSING_TERMS;
    private static final SubLSymbol $sym668$FSUT_PRIORITIZER_UP_TO_DATE_TERMS;
    private static final SubLSymbol $sym669$_CSETF_FSUT_PRIORITIZER_UP_TO_DATE_TERMS;
    private static final SubLSymbol $sym670$FSUT_PRIORITIZER_THREAD;
    private static final SubLSymbol $sym671$_CSETF_FSUT_PRIORITIZER_THREAD;
    private static final SubLSymbol $sym672$FSUT_PRIORITIZER_SHOULD_SLEEP_;
    private static final SubLSymbol $sym673$_CSETF_FSUT_PRIORITIZER_SHOULD_SLEEP_;
    private static final SubLSymbol $sym674$FSUT_PRIORITIZER_VERBOSITY;
    private static final SubLSymbol $sym675$_CSETF_FSUT_PRIORITIZER_VERBOSITY;
    private static final SubLSymbol $sym676$FSUT_PRIORITIZER_DOMAIN_MT;
    private static final SubLSymbol $sym677$_CSETF_FSUT_PRIORITIZER_DOMAIN_MT;
    private static final SubLSymbol $sym678$FSUT_PRIORITIZER_LANGUAGE_MT;
    private static final SubLSymbol $sym679$_CSETF_FSUT_PRIORITIZER_LANGUAGE_MT;
    private static final SubLSymbol $sym680$FSUT_PRIORITIZER_NICE_LEVEL;
    private static final SubLSymbol $sym681$_CSETF_FSUT_PRIORITIZER_NICE_LEVEL;
    private static final SubLSymbol $sym682$FSUT_PRIORITIZER_NEW_DAYS;
    private static final SubLSymbol $sym683$_CSETF_FSUT_PRIORITIZER_NEW_DAYS;
    private static final SubLSymbol $kw684$STALE_TERMS;
    private static final SubLSymbol $kw685$MISSING_TERMS;
    private static final SubLSymbol $kw686$UP_TO_DATE_TERMS;
    private static final SubLSymbol $kw687$THREAD;
    private static final SubLSymbol $kw688$SHOULD_SLEEP_;
    private static final SubLSymbol $kw689$VERBOSITY;
    private static final SubLSymbol $kw690$DOMAIN_MT;
    private static final SubLSymbol $kw691$LANGUAGE_MT;
    private static final SubLSymbol $kw692$NICE_LEVEL;
    private static final SubLSymbol $kw693$NEW_DAYS;
    private static final SubLString $str694$Invalid_slot__S_for_construction_;
    private static final SubLSymbol $kw695$BEGIN;
    private static final SubLSymbol $sym696$MAKE_FACT_SHEET_UPDATE_TERM_PRIORITIZER;
    private static final SubLSymbol $kw697$SLOT;
    private static final SubLSymbol $kw698$END;
    private static final SubLSymbol $sym699$VISIT_DEFSTRUCT_OBJECT_FACT_SHEET_UPDATE_TERM_PRIORITIZER_METHOD;
    private static final SubLString $str700$__PRIORITIZER_stale__S_missing__S;
    private static final SubLSymbol $sym701$_FACT_SHEET_UPDATE_TERM_PRIORITIZERS_;
    private static final SubLInteger $int702$_20;
    private static final SubLInteger $int703$1000;
    private static final SubLSymbol $sym704$FSUT_PRIORITIZER_QUEUE_RANK_FUNC;
    private static final SubLSymbol $sym705$FSUT_PRIORITIZER_QUEUE_COMP_FUNC;
    private static final SubLString $str706$Non_cons_item_in_prioritizer_queu;
    private static final SubLString $str707$Non_non_negative_integer_priority;
    private static final SubLString $str708$Fact_Sheet_Prioritizer;
    private static final SubLSymbol $sym709$FSUT_PRIORITIZER_PLACE_TERMS;
    private static final SubLSymbol $kw710$STOPPED;
    private static final SubLInteger $int711$100;
    private static final SubLString $str712$Had_trouble_getting_a_term_from__;
    private static final SubLString $str713$Skipping__S__Update_already_under;
    private static final SubLList $list714;
    private static final SubLSymbol $kw715$STALE;
    private static final SubLString $str716$Dequeuing__S__Status__stale__Prio;
    private static final SubLSymbol $kw717$MISSING;
    private static final SubLString $str718$Dequeuing__S__Status__missing__Pr;
    private static final SubLSymbol $kw719$UP_TO_DATE;
    private static final SubLString $str720$Dequeuing__S__Status__up_to_date_;
    private static final SubLSymbol $sym721$FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL;
    private static final SubLSymbol $sym722$_FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL_CACHING_STATE_;
    private static final SubLInteger $int723$40;
    private static final SubLString $str724$mapping_Cyc_FORTs;
    private static final SubLString $str725$Non_cons_in_fact_sheet_prioritize;
    private static final SubLSymbol $kw726$OK;
    private static final SubLList $list727;
    private static final SubLInteger $int728$25;
    private static final SubLString $str729$border_0;
    private static final SubLSymbol $kw730$FORBIDDEN;
    private static final SubLSymbol $sym731$PRED_ARGNUM_COMBOS_FOR_TERM;
    private static final SubLString $str732$term;
    private static final SubLString $str733$creation_kb;
    private static final SubLString $str734$creation_system;
    private static final SubLString $str735$evaluator;
    private static final SubLString $str736$Fact_Sheet_Evaluation;
    private static final SubLSymbol $kw737$CB_CYC;
    private static final SubLSymbol $kw738$SAM_AUTOCOMPLETE_CSS;
    private static final SubLSymbol $kw739$SHA1;
    private static final SubLString $str740$yui_skin_sam;
    private static final SubLString $str741$reloadFrameButton;
    private static final SubLString $str742$button;
    private static final SubLString $str743$reload;
    private static final SubLString $str744$Refresh_Frames;
    private static final SubLString $str745$post;
    private static final SubLString $str746$cb_handle_fact_sheet_evaluation;
    private static final SubLSymbol $kw747$COVERAGE;
    private static final SubLList $list748;
    private static final SubLSymbol $kw749$FILTERING;
    private static final SubLList $list750;
    private static final SubLSymbol $kw751$REDUNDANCY;
    private static final SubLList $list752;
    private static final SubLSymbol $kw753$CLARITY;
    private static final SubLList $list754;
    private static final SubLSymbol $kw755$LINKS;
    private static final SubLList $list756;
    private static final SubLSymbol $kw757$CATEGORIZATION;
    private static final SubLList $list758;
    private static final SubLSymbol $kw759$FLUIDITY;
    private static final SubLList $list760;
    private static final SubLSymbol $kw761$ESTHETIC_VALUE;
    private static final SubLList $list762;
    private static final SubLString $str763$Submit_Evaluation;
    private static final SubLSymbol $sym764$CB_FACT_SHEET_EVALUATION;
    private static final SubLSymbol $kw765$HTML_HANDLER;
    private static final SubLString $str766$__;
    private static final SubLString $str767$_comments;
    private static final SubLString $str768$Score__;
    private static final SubLString $str769$Comments__;
    private static final SubLInteger $int770$80;
    private static final SubLString $str771$No_Value_Selected;
    private static final SubLList $list772;
    private static final SubLSymbol $kw773$TERM;
    private static final SubLSymbol $kw774$EVALUATOR;
    private static final SubLList $list775;
    private static final SubLSymbol $kw776$EVAL_SYSTEM;
    private static final SubLSymbol $kw777$EVAL_TIME;
    private static final SubLString $str778$_S__;
    private static final SubLSymbol $sym779$CB_HANDLE_FACT_SHEET_EVALUATION;
    private static final SubLString $str780$cg_cb_fact_sheet_evaluation_term_;
    private static final SubLString $str781$_evaluator_;
    private static final SubLString $str782$_creation_kb_;
    private static final SubLString $str783$_creation_system_;
    private static final SubLString $str784$Evaluate_Fact_Sheet;
    private static final SubLString $str785$Evaluate_this_Fact_Sheet;
    private static final SubLSymbol $sym786$_FACT_SHEET_UPDATING_LOCK_;
    private static final SubLString $str787$Fact_Sheet_Data_Update_Lock;
    private static final SubLString $str788$The_process_that_is_marking_the_f;
    private static final SubLString $str789$public;
    private static final SubLString $str790$_script_type__text_javascript____;
    private static final SubLString $str791$__;
    private static final SubLSymbol $sym792$GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING;
    private static final SubLSymbol $sym793$MIN_ISA_AMONG;
    private static final SubLSymbol $sym794$MIN_GENLS_AMONG;
    private static final SubLSymbol $sym795$FACT_SHEET_FILENAME_CHAR_;
    private static final SubLString $str796$_;
    private static final SubLSymbol $sym797$_GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING_CACHING_STATE;
    private static final SubLString $str798$_term_mapping_cfasl;
    private static final SubLString $str799$_term_mapping_txt;
    private static final SubLSymbol $kw800$INCYC;
    private static final SubLSymbol $sym801$TERMS_FOR_PUBLIC_FACT_SHEETS;
    private static final SubLSymbol $sym802$_X;
    private static final SubLSymbol $kw803$ANSWER_LANGUAGE;
    private static final SubLSymbol $kw804$HL;
    private static final SubLList $list805;
    private static final SubLString $str806$_S__S___S;
    private static final SubLList $list807;
    private static final SubLSymbol $sym808$_TERMS_FOR_PUBLIC_FACT_SHEETS_CACHING_STATE_;
    private static final SubLSymbol $sym809$TYPES_FOR_PUBLIC_FACT_SHEETS;
    private static final SubLSymbol $sym810$COLLECTION_IN_ANY_MT_;
    private static final SubLSymbol $sym811$_TYPES_FOR_PUBLIC_FACT_SHEETS_CACHING_STATE_;
    private static final SubLSymbol $sym812$FACT_SHEET_TERM_STRINGS;
    private static final SubLSymbol $sym813$_FACT_SHEET_TERM_STRINGS_CACHING_STATE_;
    private static final SubLString $str814$Getting_English_for_terms;
    private static final SubLSymbol $sym815$GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS;
    private static final SubLString $str816$getting_urls_for_terms;
    private static final SubLList $list817;
    private static final SubLSymbol $sym818$_GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS_CACHING_STATE_;
    private static final SubLString $str819$resultSet;
    private static final SubLString $str820$Writing_out_paths;
    private static final SubLList $list821;
    private static final SubLString $str822$displayNl;
    private static final SubLString $str823$nl;
    private static final SubLString $str824$factSheetPath;
    private static final SubLString $str825$cyclId;
    private static final SubLString $str826$_cyc_projects_inCyc_staging_area_;
    private static final SubLString $str827$_cyc_projects_inCyc_staging_area_;
    private static final SubLString $str828$_cyc_projects_inCyc_staging_area_;
    private static final SubLString $str829$_cyc_projects_inCyc_staging_area_;
    private static final SubLString $str830$_cyc_projects_inCyc_staging_area_;
    private static final SubLString $str831$factSheetPath__________cyclId____;
    private static final SubLString $str832$RewriteCond________1___A___;
    private static final SubLString $str833$RewriteRule________scratch_www_in;
    private static final SubLString $str834$_A__;
    private static final SubLString $str835$DROP_TABLE_HAS_INCYC_PAGE_;
    private static final SubLString $str836$CREATE_TABLE_HAS_INCYC_PAGE__EXTE;
    private static final SubLString $str837$cyclId________;
    private static final SubLString $str838$__;
    private static final SubLString $str839$INSERT_INTO_InCyc_Pages__EXTERNAL;
    private static final SubLString $str840$__;
    private static final SubLString $str841$__;
    private static final SubLString $str842$Mapping_public_fact_sheet_files__;
    private static final SubLString $str843$var_searchData____;
    private static final SubLString $str844$writing_json;
    private static final SubLString $str845$_;
    private static final SubLString $str846$_;
    private static final SubLList $list847;
    private static final SubLString $str848$__A_;
    private static final SubLString $str849$___;
    private static final SubLString $str850$_;
    private static final SubLString $str851$checking_for_fact_sheets;
    private static final SubLSymbol $kw852$COLLECTION_NAME;
    private static final SubLSymbol $kw853$ROOT_TYPES;
    private static final SubLSymbol $kw854$BLACKLIST_TYPES;
    private static final SubLSymbol $kw855$BLACKLIST_QUOTED_TYPES;
    private static final SubLSymbol $kw856$DEFAULT_STARTING_POINTS_FILENAME;
    private static final SubLList $list857;
    private static final SubLSymbol $kw858$CATEGORY_LABELS;
    private static final SubLSymbol $sym859$ALPHANUMERICP;
    private static final SubLSymbol $kw860$SORT_FN;
    private static final SubLSymbol $sym861$DEFAULT_FACT_SHEET_PARAGRAPH_RETRIEVAL_TIME_SORT_FN;
    private static final SubLList $list862;
    private static final SubLString $str863$incyc;
    private static final SubLString $str864$______info_html;
    private static final SubLString $str865$______styles_css;
    private static final SubLString $str866$______index_html;
    private static final SubLString $str867$______img_inCyc_beta_png;
    private static final SubLList $list868;
    private static final SubLList $list869;
    private static final SubLList $list870;
    private static final SubLList $list871;
    private static final SubLList $list872;
    private static final SubLObject $const873$HPACMaterialFileFn;
    private static final SubLList $list874;
    private static final SubLSymbol $kw875$AKB;
    private static final SubLString $str876$analyst_knowledge_base;
    private static final SubLString $str877$___styles_css;
    private static final SubLList $list878;
    private static final SubLList $list879;
    private static final SubLString $str880$data_fact_sheets_public_analyst_k;
    private static final SubLObject $const881$TKBSourceSpindleCollectorMt;
    private static final SubLString $str882$Public_Fact_Sheet_Updater_for_;
    private static final SubLString $str883$_Fact_Sheets;
    private static final SubLSymbol $sym884$ENSURE_ALL_PUBLIC_FACT_SHEETS;
    private static final SubLString $str885$Ensuring_public_fact_sheets_are_i;
    private static final SubLSymbol $sym886$PUBLICIZE_FACT_SHEET_LINK;
    private static final SubLString $str887$_a_href__;
    private static final SubLString $str888$__;
    private static final SubLString $str889$Updating__A_public_fact_sheets_fi;
    private static final SubLString $str890$_public_fact_sheets_from_;
    private static final SubLString $str891$Couldn_t_find_term_for_id___S__;
    private static final SubLString $str892$Couldn_t_find_datafile___S;
    private static final SubLString $str893$Writing_fact_sheet_starting_point;
    private static final SubLString $str894$___;
    private static final SubLInteger $int895$1500;
    private static final SubLSymbol $sym896$CACHED_NUM_GAF_ARG_INDEX;
    private static final SubLSymbol $sym897$_CACHED_NUM_GAF_ARG_INDEX_CACHING_STATE_;
    private static final SubLString $str898$normal;
    private static final SubLString $str899$Dumping_fact_sheet_sentences_to_;
    private static final SubLString $str900$Data_for__S_has__D_categories_;
    private static final SubLList $list901;
    private static final SubLString $str902$Doing__S___D_paragraphs___D_sente;
    private static final SubLSymbol $sym903$_;
    private static final SubLSymbol $sym904$LENGTH;
    private static final SubLString $str905$This_paragraph_has__D_sentences_;
    private static final SubLList $list906;
    private static final SubLString $str907$Non_sentence__S_in__S_for__S;
    private static final SubLString $str908$missing_from_parse_result___S__;
    private static final SubLList $list909;
    private static final SubLSymbol $sym910$FACT_SHEETS_TERM_FROM_STRING_CONTAINS_;
    private static final SubLList $list911;
    static  boolean assertionsDisabledSynth = true;
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 1087L)
    public static SubLObject allowing_fact_sheet_evalations(final SubLObject macroform, final SubLObject environment) {
        final SubLObject datum = macroform.rest();
        final SubLObject body;
        final SubLObject current = body = datum;
        return (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym3$CLET, (SubLObject)fact_sheets.$list4, ConsesLow.append(body, (SubLObject)fact_sheets.NIL));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 1217L)
    public static SubLObject disallowing_fact_sheet_evalations(final SubLObject macroform, final SubLObject environment) {
        final SubLObject datum = macroform.rest();
        final SubLObject body;
        final SubLObject current = body = datum;
        return (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym3$CLET, (SubLObject)fact_sheets.$list5, ConsesLow.append(body, (SubLObject)fact_sheets.NIL));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 1350L)
    public static SubLObject allow_fact_sheet_evaluationsP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return Equality.eql((SubLObject)fact_sheets.ONE_INTEGER, fact_sheets.$allow_fact_sheet_evaluationsP$.getDynamicValue(thread));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 1449L)
    public static SubLObject allow_fact_sheet_evaluations(SubLObject allowP) {
        if (allowP == fact_sheets.UNPROVIDED) {
            allowP = (SubLObject)fact_sheets.T;
        }
        fact_sheets.$allow_fact_sheet_evaluationsP$.setDynamicValue((SubLObject)((fact_sheets.NIL != allowP) ? fact_sheets.ONE_INTEGER : fact_sheets.ZERO_INTEGER));
        return (SubLObject)fact_sheets.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 1994L)
    public static SubLObject indexical_fact_sheet_query_mt() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject mt = fact_sheets.$fact_sheet_query_mt$.getDynamicValue(thread);
        return (fact_sheets.NIL != mt) ? mt : fact_sheets.$fact_sheet_default_domain_monad_mt$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 2308L)
    public static SubLObject indexical_fact_sheet_table_type() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return fact_sheets.$fact_sheet_table_type$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 2552L)
    public static SubLObject indexical_fact_sheet_sentence() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return fact_sheets.$fact_sheet_sentence$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 2641L)
    public static SubLObject with_new_fact_sheet_problem_store(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list16);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject problem_store_var = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list16);
        problem_store_var = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym3$CLET, (SubLObject)ConsesLow.list(problem_store_var), (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym17$CUNWIND_PROTECT, (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym18$PROGN, (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym19$CSETQ, problem_store_var, (SubLObject)fact_sheets.$list20), ConsesLow.append(body, (SubLObject)fact_sheets.NIL)), (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym21$PUNLESS, (SubLObject)fact_sheets.$list22, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym23$DESTROY_PROBLEM_STORE, problem_store_var))));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list16);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 3197L)
    public static SubLObject within_fact_sheet_paraphrase(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        SubLObject focal_term = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list24);
        focal_term = current.first();
        final SubLObject body;
        current = (body = current.rest());
        return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym3$CLET, (SubLObject)fact_sheets.$list25, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym26$WITH_FACT_SHEET_FOCAL_TERM, (SubLObject)ConsesLow.list(focal_term), (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym27$WITH_PPH_HTML_FUNCTION_AND_TARGET, (SubLObject)fact_sheets.$list28, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym29$WITH_PPH_HTML_TERM_ID_FN, (SubLObject)fact_sheets.$list30, (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym31$WITH_PPH_SPEAKER_AND_ADDRESSEE, (SubLObject)fact_sheets.$list32, ConsesLow.append(body, (SubLObject)fact_sheets.NIL))))));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 3673L)
    public static SubLObject within_fact_sheet_paraphraseP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return fact_sheets.$within_fact_sheet_paraphraseP$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 4133L)
    public static SubLObject indexical_fact_sheet_topic() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 4276L)
    public static SubLObject with_fact_sheet_focal_term(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list36);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject v_term = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list36);
        v_term = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym3$CLET, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym37$_FACT_SHEET_FOCAL_TERM_, v_term)), (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym38$POSSIBLY_WITH_THCL_FORT, (SubLObject)ConsesLow.list(v_term), ConsesLow.append(body, (SubLObject)fact_sheets.NIL)));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list36);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 4720L)
    public static SubLObject chmod_safe_to_useP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 4844L)
    public static SubLObject writing_fact_sheet_file(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        SubLObject error_message_var = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        filename = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        stream = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        error_message_var = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym41$POSSIBLY_CATCH_ERROR_MESSAGE, reader.bq_cons(error_message_var, (SubLObject)fact_sheets.$list42), (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym43$WITH_TEXT_FILE, (SubLObject)ConsesLow.listS(stream, filename, (SubLObject)fact_sheets.$list44), ConsesLow.append(body, (SubLObject)fact_sheets.NIL)), (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym45$PWHEN, (SubLObject)fact_sheets.$sym46$_CHMOD_SAFE_TO_USE__, (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym47$CHMOD, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym48$LOGICAL_PATHNAME_TO_PHYSICAL, filename), (SubLObject)fact_sheets.$list49)));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list40);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 5177L)
    public static SubLObject writing_fact_sheet_data_file(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        SubLObject error_message_var = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        filename = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        stream = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        error_message_var = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym41$POSSIBLY_CATCH_ERROR_MESSAGE, reader.bq_cons(error_message_var, (SubLObject)fact_sheets.$list42), (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym50$WITH_PRIVATE_BINARY_FILE, (SubLObject)ConsesLow.listS(stream, filename, (SubLObject)fact_sheets.$list44), (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym51$MUST, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym52$STREAMP, stream), (SubLObject)fact_sheets.$str53$Cannot_open__A, filename), ConsesLow.append(body, (SubLObject)fact_sheets.NIL)), (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym45$PWHEN, (SubLObject)fact_sheets.$sym46$_CHMOD_SAFE_TO_USE__, (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym47$CHMOD, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym48$LOGICAL_PATHNAME_TO_PHYSICAL, filename), (SubLObject)fact_sheets.$list49)));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list40);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 5589L)
    public static SubLObject reading_fact_sheet_data_file(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        SubLObject error_message_var = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        filename = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        stream = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list40);
        error_message_var = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym41$POSSIBLY_CATCH_ERROR_MESSAGE, reader.bq_cons(error_message_var, (SubLObject)fact_sheets.$list42), (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym50$WITH_PRIVATE_BINARY_FILE, (SubLObject)ConsesLow.listS(stream, filename, (SubLObject)fact_sheets.$list54), (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym51$MUST, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym52$STREAMP, stream), (SubLObject)fact_sheets.$str53$Cannot_open__A, filename), ConsesLow.append(body, (SubLObject)fact_sheets.NIL)), (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym45$PWHEN, (SubLObject)fact_sheets.$sym46$_CHMOD_SAFE_TO_USE__, (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym47$CHMOD, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym48$LOGICAL_PATHNAME_TO_PHYSICAL, filename), (SubLObject)fact_sheets.$list49)));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list40);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6253L)
    public static SubLObject clear_fact_sheet_default_language_mt() {
        final SubLObject cs = fact_sheets.$fact_sheet_default_language_mt_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6253L)
    public static SubLObject remove_fact_sheet_default_language_mt() {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_default_language_mt_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(fact_sheets.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6253L)
    public static SubLObject fact_sheet_default_language_mt_internal() {
        final SubLObject mt = build_fact_sheet_default_language_mt();
        return mt;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6253L)
    public static SubLObject fact_sheet_default_language_mt() {
        SubLObject caching_state = fact_sheets.$fact_sheet_default_language_mt_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym58$FACT_SHEET_DEFAULT_LANGUAGE_MT, (SubLObject)fact_sheets.$sym59$_FACT_SHEET_DEFAULT_LANGUAGE_MT_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQL, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, (SubLObject)fact_sheets.UNPROVIDED);
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_default_language_mt_internal()));
            memoization_state.caching_state_set_zero_arg_results(caching_state, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6397L)
    public static SubLObject clear_build_fact_sheet_default_language_mt() {
        final SubLObject cs = fact_sheets.$build_fact_sheet_default_language_mt_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6397L)
    public static SubLObject remove_build_fact_sheet_default_language_mt() {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$build_fact_sheet_default_language_mt_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(fact_sheets.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6397L)
    public static SubLObject build_fact_sheet_default_language_mt_internal() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject monad_mt = (fact_sheets.NIL != constant_handles.valid_constantP(fact_sheets.$fact_sheet_default_language_monad_mt$.getGlobalValue(), (SubLObject)fact_sheets.UNPROVIDED)) ? fact_sheets.$fact_sheet_default_language_monad_mt$.getGlobalValue() : hlmt.hlmt_monad_mt(pph_vars.$pph_language_mt$.getDynamicValue(thread));
        final SubLObject mt = hlmt_czer.canonicalize_hlmt(hlmt.new_temporal_hlmt(monad_mt, fact_sheets.$fact_sheet_default_language_mt_time_interval$.getGlobalValue(), fact_sheets.$fact_sheet_default_language_mt_time_parameter$.getGlobalValue()));
        return mt;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6397L)
    public static SubLObject build_fact_sheet_default_language_mt() {
        SubLObject caching_state = fact_sheets.$build_fact_sheet_default_language_mt_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym60$BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT, (SubLObject)fact_sheets.$sym61$_BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQL, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, (SubLObject)fact_sheets.UNPROVIDED);
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(build_fact_sheet_default_language_mt_internal()));
            memoization_state.caching_state_set_zero_arg_results(caching_state, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 6824L)
    public static SubLObject fact_sheet_default_language_mt_for_term(final SubLObject v_term) {
        return fact_sheet_default_language_mt();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7029L)
    public static SubLObject clear_fact_sheet_default_domain_mt() {
        final SubLObject cs = fact_sheets.$fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7029L)
    public static SubLObject remove_fact_sheet_default_domain_mt() {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_default_domain_mt_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(fact_sheets.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7029L)
    public static SubLObject fact_sheet_default_domain_mt_internal() {
        final SubLObject mt = build_fact_sheet_default_domain_mt();
        return mt;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7029L)
    public static SubLObject fact_sheet_default_domain_mt() {
        SubLObject caching_state = fact_sheets.$fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym63$FACT_SHEET_DEFAULT_DOMAIN_MT, (SubLObject)fact_sheets.$sym64$_FACT_SHEET_DEFAULT_DOMAIN_MT_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQL, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, (SubLObject)fact_sheets.UNPROVIDED);
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_default_domain_mt_internal()));
            memoization_state.caching_state_set_zero_arg_results(caching_state, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7169L)
    public static SubLObject clear_build_fact_sheet_default_domain_mt() {
        final SubLObject cs = fact_sheets.$build_fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7169L)
    public static SubLObject remove_build_fact_sheet_default_domain_mt() {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$build_fact_sheet_default_domain_mt_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(fact_sheets.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7169L)
    public static SubLObject build_fact_sheet_default_domain_mt_internal() {
        final SubLObject mt = (fact_sheets.NIL != constant_handles.valid_constantP(fact_sheets.$fact_sheet_default_domain_monad_mt$.getGlobalValue(), (SubLObject)fact_sheets.UNPROVIDED)) ? fact_sheets.$fact_sheet_default_domain_monad_mt$.getGlobalValue() : cb_query.default_new_inference_monad_mt();
        return mt;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7169L)
    public static SubLObject build_fact_sheet_default_domain_mt() {
        SubLObject caching_state = fact_sheets.$build_fact_sheet_default_domain_mt_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym65$BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT, (SubLObject)fact_sheets.$sym66$_BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQL, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, (SubLObject)fact_sheets.UNPROVIDED);
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(build_fact_sheet_default_domain_mt_internal()));
            memoization_state.caching_state_set_zero_arg_results(caching_state, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 7417L)
    public static SubLObject fact_sheet_default_domain_mt_for_term(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject default_mt = fact_sheet_default_domain_mt();
        SubLObject term_specific_mt = (SubLObject)fact_sheets.NIL;
        if (!fact_sheets.$fact_sheet_verbosity$.getDynamicValue(thread).eql((SubLObject)fact_sheets.$kw67$PUBLIC)) {
            final SubLObject v_kb_query = fact_sheets.$const68$FactSheetDomainMtQuery;
            if (fact_sheets.NIL != forts.valid_fortP(v_kb_query)) {
                final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
                final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
                try {
                    fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
                    thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
                    term_specific_mt = kb_query.new_cyc_query_from_kbq(v_kb_query, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED).first();
                }
                finally {
                    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
                    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
                }
            }
        }
        if (fact_sheets.NIL == term_specific_mt) {
            return default_mt;
        }
        if (fact_sheets.NIL != genl_mts.genl_mtP(default_mt, term_specific_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            return default_mt;
        }
        if (fact_sheets.NIL != genl_mts.genl_mtP(term_specific_mt, default_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            return term_specific_mt;
        }
        return hlmt_czer.canonicalize_hlmt((SubLObject)ConsesLow.list(fact_sheets.$const69$MtUnionFn, term_specific_mt, default_mt));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 8281L)
    public static SubLObject get_linkless_fact_sheet_for_term_in_html(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (v_properties == fact_sheets.UNPROVIDED) {
            v_properties = (SubLObject)fact_sheets.NIL;
        }
        final SubLObject raw_fact_sheet = get_fact_sheet_for_term_in_html(v_term, verbosity, domain_mt, language_mt, v_properties).first();
        final SubLObject link_free = convert_fact_sheet_sentence_links_to_spans(raw_fact_sheet);
        return link_free;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 8959L)
    public static SubLObject convert_fact_sheet_sentence_links_to_spans(final SubLObject raw_fact_sheet) {
        return replace_fact_sheet_markups_fast(raw_fact_sheet, (SubLObject)fact_sheets.$sym71$CONVERT_FACT_SHEET_LINK_TO_SPAN, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 9127L)
    public static SubLObject convert_fact_sheet_link_to_span(final SubLObject v_term, final SubLObject open_tag, final SubLObject link_tokens, final SubLObject close_tag) {
        if (fact_sheets.NIL == Sequences.search((SubLObject)fact_sheets.$str72$fact_sheet_sentence, open_tag, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str73$, link_tokens, (SubLObject)fact_sheets.$str73$);
        }
        final SubLObject concept_id = kb_utilities.compact_hl_internal_id_string(v_term);
        return (SubLObject)ConsesLow.list(Sequences.cconcatenate((SubLObject)fact_sheets.$str74$_span_id__, new SubLObject[] { format_nil.format_nil_a_no_copy(concept_id), fact_sheets.$str75$__class__fact_sheet_sentence__ }), link_tokens, (SubLObject)fact_sheets.$str76$__span_);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 9492L)
    public static SubLObject get_updated_fact_sheet_for_term_and_sentence_in_html(final SubLObject v_term, final SubLObject v_assert, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (v_properties == fact_sheets.UNPROVIDED) {
            v_properties = (SubLObject)fact_sheets.NIL;
        }
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term) : v_term;
        assert fact_sheets.NIL != fact_sheet_verbosity_p(verbosity) : verbosity;
        if (domain_mt == fact_sheets.$kw70$DEFAULT) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.$kw70$DEFAULT) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        assert fact_sheets.NIL != hlmt.possibly_mt_p(domain_mt) : domain_mt;
        assert fact_sheets.NIL != hlmt.possibly_mt_p(language_mt) : language_mt;
        return get_updated_fact_sheet_for_term_and_sentence_in_markup_internal(v_term, v_assert, verbosity, domain_mt, language_mt, v_properties);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 10220L)
    public static SubLObject get_updated_fact_sheet_for_term_and_sentence_in_markup_internal(final SubLObject v_term, final SubLObject v_assert, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject v_properties) {
        final SubLObject ans = (SubLObject)ConsesLow.list(string_utilities.$empty_string$.getGlobalValue(), (SubLObject)fact_sheets.NIL);
        final SubLObject fact_sheet_domain_mt = (fact_sheets.NIL != hlmt.possibly_hlmt_p(domain_mt)) ? hlmt.hlmt_monad_mt(domain_mt) : fact_sheet_default_domain_mt_for_term(v_term);
        final SubLObject focal_term = czer_main.canonicalize_term(v_term, fact_sheet_domain_mt);
        final SubLObject updated_data = updated_fact_sheet_data_for_term_and_sentence(focal_term, v_assert, verbosity, fact_sheet_domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
        SubLObject current;
        final SubLObject datum = current = updated_data;
        SubLObject data = (SubLObject)fact_sheets.NIL;
        SubLObject stats = (SubLObject)fact_sheets.NIL;
        SubLObject footnotes = (SubLObject)fact_sheets.NIL;
        SubLObject formatting_guidelines = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
        data = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
        stats = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
        footnotes = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
        formatting_guidelines = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            SubLObject texts = (SubLObject)fact_sheets.NIL;
            SubLObject display_time = (SubLObject)fact_sheets.NIL;
            final SubLObject time_var = Time.get_internal_real_time();
            texts = fact_sheet_texts_from_data(language_mt, domain_mt, v_term, data, v_properties);
            display_time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
            final SubLObject markup = (fact_sheets.NIL != xml_factsheetsP(v_properties)) ? generate_fact_sheet_xml(v_term, domain_mt, texts, footnotes, stats, display_time, v_properties) : generate_fact_sheet_html(v_term, domain_mt, texts, footnotes, stats, display_time, v_properties);
            return (SubLObject)ConsesLow.list(markup, formatting_guidelines);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list80);
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 11359L)
    public static SubLObject get_fact_sheet_for_term_in_xml_with_only_kb_specified_content(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (v_properties == fact_sheets.UNPROVIDED) {
            v_properties = (SubLObject)fact_sheets.NIL;
        }
        v_properties = conses_high.putf(v_properties, (SubLObject)fact_sheets.$kw83$MARKUP_TYPE, (SubLObject)fact_sheets.$kw84$XML);
        v_properties = conses_high.putf(v_properties, (SubLObject)fact_sheets.$kw85$SKIP_SECTIONS, (SubLObject)ConsesLow.list(fact_sheets.$fact_sheet_thcl_section_category$.getGlobalValue()));
        return get_fact_sheet_for_term_in_markup_language(v_term, verbosity, domain_mt, language_mt, v_properties);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 12037L)
    public static SubLObject get_fact_sheet_for_term_in_html(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (v_properties == fact_sheets.UNPROVIDED) {
            v_properties = (SubLObject)fact_sheets.NIL;
        }
        v_properties = conses_high.putf(v_properties, (SubLObject)fact_sheets.$kw83$MARKUP_TYPE, (SubLObject)fact_sheets.$kw87$HTML);
        return get_fact_sheet_for_term_in_markup_language(v_term, verbosity, domain_mt, language_mt, v_properties);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 12379L)
    public static SubLObject get_fact_sheet_for_term_in_markup_language(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (v_properties == fact_sheets.UNPROVIDED) {
            v_properties = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term) : v_term;
        assert fact_sheets.NIL != fact_sheet_verbosity_p(verbosity) : verbosity;
        if (domain_mt == fact_sheets.$kw70$DEFAULT) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.$kw70$DEFAULT) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        assert fact_sheets.NIL != hlmt.possibly_mt_p(domain_mt) : domain_mt;
        assert fact_sheets.NIL != hlmt.possibly_mt_p(language_mt) : language_mt;
        if (fact_sheets.NIL != fact_sheets.$suppress_fact_sheet_extra_images$.getDynamicValue(thread)) {
            v_properties = conses_high.putf(v_properties, (SubLObject)fact_sheets.$kw88$STYLESHEETS, (SubLObject)ConsesLow.cons(fact_sheets.$suppress_fact_sheet_extra_images_css$.getDynamicValue(thread), conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw88$STYLESHEETS, (SubLObject)fact_sheets.UNPROVIDED)));
        }
        list_utilities.augment_plist_with_defaults(v_properties, (SubLObject)fact_sheets.$list89);
        return get_fact_sheet_for_term_in_markup_internal(v_term, verbosity, domain_mt, language_mt, v_properties, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 15878L)
    public static SubLObject get_fact_sheet_for_term_in_markup_internal(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject v_properties, SubLObject recursedP) {
        if (recursedP == fact_sheets.UNPROVIDED) {
            recursedP = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = (SubLObject)ConsesLow.list(string_utilities.$empty_string$.getGlobalValue(), (SubLObject)fact_sheets.NIL);
        final SubLObject max_time = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw90$MAX_TIME, (SubLObject)fact_sheets.NIL);
        final SubLObject fact_sheet_domain_mt = (fact_sheets.NIL != hlmt.possibly_hlmt_p(domain_mt)) ? hlmt.hlmt_monad_mt(domain_mt) : fact_sheet_default_domain_mt_for_term(v_term);
        final SubLObject focal_term = czer_main.canonicalize_term(v_term, fact_sheet_domain_mt);
        final SubLObject cached_data = cached_fact_sheet_data_for_term(focal_term, verbosity, fact_sheet_domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject precached_fact_sheet = (SubLObject)((fact_sheets.NIL != cached_data) ? fact_sheets.NIL : precached_fact_sheet_for_term_in_html(focal_term, verbosity, fact_sheet_domain_mt, language_mt, v_properties, (SubLObject)fact_sheets.UNPROVIDED));
        if (fact_sheets.NIL != cached_data) {
            SubLObject current;
            final SubLObject datum = current = cached_data;
            SubLObject data = (SubLObject)fact_sheets.NIL;
            SubLObject stats = (SubLObject)fact_sheets.NIL;
            SubLObject footnotes = (SubLObject)fact_sheets.NIL;
            SubLObject formatting_guidelines = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
            data = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
            stats = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
            footnotes = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
            formatting_guidelines = current.first();
            current = current.rest();
            if (fact_sheets.NIL == current) {
                SubLObject texts = (SubLObject)fact_sheets.NIL;
                SubLObject v_sources = (SubLObject)fact_sheets.NIL;
                SubLObject display_time = (SubLObject)fact_sheets.NIL;
                final SubLObject time_var = Time.get_internal_real_time();
                thread.resetMultipleValues();
                final SubLObject texts_$1 = fact_sheet_texts_from_data(language_mt, domain_mt, v_term, data, v_properties);
                final SubLObject v_sources_$2 = thread.secondMultipleValue();
                thread.resetMultipleValues();
                texts = texts_$1;
                v_sources = v_sources_$2;
                display_time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
                final SubLObject filtered_footnotes = fact_sheet_filter_footnotes_for_sources(v_sources, footnotes);
                final SubLObject markup = generate_fact_sheet_markup(v_term, domain_mt, texts, filtered_footnotes, stats, display_time, v_properties);
                return (SubLObject)ConsesLow.list(markup, formatting_guidelines);
            }
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list80);
        }
        else if (fact_sheets.NIL != precached_fact_sheet) {
            ans = precached_fact_sheet;
        }
        else if (fact_sheets.NIL == recursedP) {
            update_fact_sheet_for_term(focal_term, verbosity, fact_sheet_domain_mt, language_mt, max_time, (SubLObject)fact_sheets.UNPROVIDED);
            ans = get_fact_sheet_for_term_in_markup_internal(v_term, verbosity, domain_mt, language_mt, v_properties, (SubLObject)fact_sheets.T);
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 17521L)
    public static SubLObject fact_sheet_filter_footnotes_for_sources(final SubLObject v_sources, final SubLObject footnotes) {
        SubLObject supported_footnotes = (SubLObject)fact_sheets.NIL;
        SubLObject cdolist_list_var = footnotes;
        SubLObject footnote = (SubLObject)fact_sheets.NIL;
        footnote = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            if (fact_sheets.NIL != subl_promotions.memberP(footnote_source(footnote), v_sources, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
                final SubLObject item_var = footnote;
                if (fact_sheets.NIL == conses_high.member(item_var, supported_footnotes, Symbols.symbol_function((SubLObject)fact_sheets.EQL), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY))) {
                    supported_footnotes = (SubLObject)ConsesLow.cons(item_var, supported_footnotes);
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            footnote = cdolist_list_var.first();
        }
        return supported_footnotes;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 17795L)
    public static SubLObject html_fact_sheet_optional_section(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list91);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject section_key = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list91);
        section_key = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym18$PROGN, (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym92$PRINC, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym93$FACT_SHEET_OPTIONAL_SECTION_START_COMMENT, section_key), (SubLObject)fact_sheets.$list94), ConsesLow.append(body, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym92$PRINC, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym95$FACT_SHEET_OPTIONAL_SECTION_END_COMMENT, section_key), (SubLObject)fact_sheets.$list94))));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list91);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 18157L)
    public static SubLObject footnote_text(final SubLObject footnote) {
        if (footnote.isString()) {
            return footnote;
        }
        return footnote.first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 18424L)
    public static SubLObject footnote_source(final SubLObject footnote) {
        if (footnote.isString()) {
            return (SubLObject)fact_sheets.NIL;
        }
        return conses_high.second(footnote);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 18650L)
    public static SubLObject generate_fact_sheet_data(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject info_gathering_time = (SubLObject)fact_sheets.NIL;
        SubLObject grouped_sentences = (SubLObject)fact_sheets.NIL;
        SubLObject fact_sheet_data = (SubLObject)fact_sheets.NIL;
        SubLObject stats = (SubLObject)fact_sheets.NIL;
        SubLObject footnotes = (SubLObject)fact_sheets.NIL;
        SubLObject rendering_instructions = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
        final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sources.$tkb_image_root_placeholder$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
            thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
            sources.$tkb_image_root_placeholder$.bind(fact_sheet_image_root_placeholder(), thread);
            if (fact_sheets.NIL != sources.$tkb_image_root_placeholder$.getDynamicValue(thread) && !fact_sheets.assertionsDisabledSynth && fact_sheets.NIL == Types.stringp(sources.$tkb_image_root_placeholder$.getDynamicValue(thread))) {
                throw new AssertionError(sources.$tkb_image_root_placeholder$.getDynamicValue(thread));
            }
            if (verbosity.eql((SubLObject)fact_sheets.$kw97$MINI)) {
                final SubLObject datum_evaluated_var = get_mini_fact_sheet_for_term_in_html(v_term, domain_mt, language_mt);
                fact_sheet_data = datum_evaluated_var.first();
                rendering_instructions = conses_high.cadr(datum_evaluated_var);
            }
            else {
                final SubLObject time_var = Time.get_internal_real_time();
                grouped_sentences = fact_sheet_sentences_for_term(v_term, domain_mt);
                info_gathering_time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str99$Gathered__D_group__P_of_sentences, new SubLObject[] { Sequences.length(grouped_sentences), v_term, numeric_date_utilities.readable_elapsed_time_string(info_gathering_time, (SubLObject)fact_sheets.UNPROVIDED) });
                    streams_high.force_output(stream);
                }
                thread.resetMultipleValues();
                final SubLObject paragraph_data = paraphrase_fact_sheet_sentences(v_term, grouped_sentences, verbosity, language_mt, domain_mt);
                final SubLObject sentence_count = thread.secondMultipleValue();
                final SubLObject pph_time = thread.thirdMultipleValue();
                final SubLObject generated_footnotes = thread.fourthMultipleValue();
                thread.resetMultipleValues();
                fact_sheet_data = paragraph_data;
                stats = new_fact_sheet_stats(v_term, domain_mt, verbosity, sentence_count, Sequences.length(grouped_sentences), info_gathering_time, pph_time);
                footnotes = generated_footnotes;
            }
        }
        finally {
            sources.$tkb_image_root_placeholder$.rebind(_prev_bind_3, thread);
            thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
            fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)ConsesLow.list(fact_sheet_data, stats, footnotes, rendering_instructions);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 19957L)
    public static SubLObject fact_sheet_stats_p(final SubLObject v_object) {
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != list_utilities.proper_list_p(v_object) && ((fact_sheets.NIL != list_utilities.lengthE(v_object, (SubLObject)fact_sheets.ELEVEN_INTEGER, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != pattern_match.tree_matches_pattern(v_object, (SubLObject)fact_sheets.$list100)) || (fact_sheets.NIL != list_utilities.lengthE(v_object, (SubLObject)fact_sheets.TWELVE_INTEGER, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != pattern_match.tree_matches_pattern(v_object, (SubLObject)fact_sheets.$list101))));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 21255L)
    public static SubLObject possibly_fact_sheet_domain_mtP(final SubLObject v_object) {
        return hlmt.hlmtP(v_object);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 21336L)
    public static SubLObject new_fact_sheet_stats(final SubLObject v_term, final SubLObject domain_mt, final SubLObject verbosity, final SubLObject sentence_count, final SubLObject section_count, final SubLObject info_gathering_time, final SubLObject pph_time) {
        assert fact_sheets.NIL != cycl_grammar.cycl_represented_term_p(v_term) : v_term;
        assert fact_sheets.NIL != hlmt.hlmtP(domain_mt) : domain_mt;
        assert fact_sheets.NIL != fact_sheet_verbosity_p(verbosity) : verbosity;
        assert fact_sheets.NIL != subl_promotions.non_negative_integer_p(sentence_count) : sentence_count;
        assert fact_sheets.NIL != subl_promotions.non_negative_integer_p(section_count) : section_count;
        assert fact_sheets.NIL != number_utilities.non_negative_number_p(info_gathering_time) : info_gathering_time;
        assert fact_sheets.NIL != number_utilities.non_negative_number_p(pph_time) : pph_time;
        return (SubLObject)ConsesLow.list(new SubLObject[] { domain_mt, verbosity, sentence_count, section_count, info_gathering_time, pph_time, numeric_date_utilities.secondstring((SubLObject)fact_sheets.UNPROVIDED), numeric_date_utilities.datestring((SubLObject)fact_sheets.UNPROVIDED), control_vars.cyc_image_id(), operation_communication.kb_version_string(), system_info.cyc_revision_string(), v_term });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 22012L)
    public static SubLObject fact_sheet_texts_from_data(final SubLObject language_mt, final SubLObject domain_mt, final SubLObject focal_term, final SubLObject paragraph_data, final SubLObject v_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject texts = (SubLObject)fact_sheets.NIL;
        SubLObject v_sources = (SubLObject)fact_sheets.NIL;
        final SubLObject skip_sections = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw85$SKIP_SECTIONS, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject include_sections = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw106$INCLUDE_SECTIONS, (SubLObject)fact_sheets.UNPROVIDED);
        if (paragraph_data.eql(fact_sheet_under_construction_code())) {
            texts = (SubLObject)ConsesLow.list(paragraph_data);
        }
        else {
            final SubLObject sorted_paragraph_data = fact_sheet_sort_paragraphs_at_retrieval_time(paragraph_data, v_properties);
            final SubLObject table_specs = fact_sheet_table_specs(focal_term, domain_mt);
            SubLObject cdolist_list_var = substitute_fact_sheet_labels_for_categories(sorted_paragraph_data, language_mt, v_properties);
            SubLObject category_data = (SubLObject)fact_sheets.NIL;
            category_data = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = category_data;
                SubLObject label = (SubLObject)fact_sheets.NIL;
                SubLObject paragraph_data_$3 = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list107);
                label = current.first();
                current = (paragraph_data_$3 = current.rest());
                final SubLObject category_pred = category_label_pred(label);
                if ((fact_sheets.NIL == include_sections || fact_sheets.NIL != subl_promotions.memberP(category_pred, include_sections, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED)) && fact_sheets.NIL == subl_promotions.memberP(category_pred, skip_sections, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED)) {
                    SubLObject paragraph_texts = (SubLObject)fact_sheets.NIL;
                    final SubLObject force_bulletsP = fact_sheet_force_bullets_for_categoryP(category_pred);
                    final SubLObject slot_values_onlyP = fact_sheet_prefer_slot_values_for_categoryP(category_pred, v_properties);
                    final SubLObject section_table_specs = section_table_specs(label, table_specs);
                    final SubLObject table_types = table_types_from_section_table_specs(section_table_specs);
                    final SubLObject table_data = (SubLObject)((fact_sheets.NIL != table_types) ? dictionary.new_dictionary(Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED) : fact_sheets.NIL);
                    if (fact_sheets.NIL != slot_values_onlyP) {
                        Errors.warn((SubLObject)fact_sheets.$str108$Prefering_slot_value_format_for__, category_pred);
                    }
                    else {
                        Errors.warn((SubLObject)fact_sheets.$str109$Disprefering_slot_value_format_fo, category_pred);
                    }
                    SubLObject cdolist_list_var_$4 = paragraph_data_$3;
                    SubLObject sentence_paraphrases = (SubLObject)fact_sheets.NIL;
                    sentence_paraphrases = cdolist_list_var_$4.first();
                    while (fact_sheets.NIL != cdolist_list_var_$4) {
                        thread.resetMultipleValues();
                        final SubLObject paragraph_text = construct_fact_sheet_paragraph(sentence_paraphrases, focal_term, domain_mt, v_properties, table_types, table_data, force_bulletsP, slot_values_onlyP);
                        final SubLObject paragraph_sources = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject var = paragraph_text;
                        if (fact_sheets.NIL != var) {
                            paragraph_texts = (SubLObject)ConsesLow.cons(var, paragraph_texts);
                        }
                        v_sources = Sequences.cconcatenate(paragraph_sources, v_sources);
                        cdolist_list_var_$4 = cdolist_list_var_$4.rest();
                        sentence_paraphrases = cdolist_list_var_$4.first();
                    }
                    final SubLObject markup_tables = (SubLObject)((fact_sheets.NIL != table_data) ? fact_sheet_markup_tables_from_data(section_table_specs, table_data, language_mt, domain_mt, v_properties, focal_term) : fact_sheets.NIL);
                    texts = list_utilities.alist_enter(texts, label, ConsesLow.nconc(markup_tables, Sequences.nreverse(paragraph_texts)), (SubLObject)fact_sheets.UNPROVIDED);
                }
                cdolist_list_var = cdolist_list_var.rest();
                category_data = cdolist_list_var.first();
            }
        }
        return Values.values(Sequences.nreverse(texts), v_sources);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 24461L)
    public static SubLObject fact_sheet_prefer_slot_values_for_categoryP(final SubLObject category_pred, final SubLObject v_properties) {
        final SubLObject pattern = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw110$SLOT_VALUE_PREFERENCE_PATTERN, (SubLObject)fact_sheets.NIL);
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != fort_types_interface.isa_predicateP(category_pred, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != pattern_match.tree_matches_pattern(category_pred, pattern));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 24725L)
    public static SubLObject fact_sheet_markup_tables_from_data(final SubLObject section_table_specs, final SubLObject table_data, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject v_properties, final SubLObject focal_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject markup_tables = (SubLObject)fact_sheets.NIL;
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(table_data)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject table_type = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject table_type_data = thread.secondMultipleValue();
            thread.resetMultipleValues();
            final SubLObject markup_table = (fact_sheets.NIL != xml_factsheetsP(v_properties)) ? fact_sheet_xml_table_from_data(section_table_specs, table_type, table_type_data, v_properties, language_mt, domain_mt, focal_term) : fact_sheet_html_table_from_data(section_table_specs, table_type, table_type_data, v_properties, language_mt, domain_mt, focal_term);
            markup_tables = (SubLObject)ConsesLow.cons(markup_table, markup_tables);
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        return markup_tables;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 26297L)
    public static SubLObject fact_sheet_xml_table_from_data(final SubLObject section_table_specs, final SubLObject table_type, final SubLObject table_type_data, final SubLObject v_properties, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject focal_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject table_title = fact_sheet_table_title(table_type, language_mt);
        SubLObject xml_table = (SubLObject)fact_sheets.NIL;
        final SubLObject table_title_attrs = (SubLObject)((fact_sheets.NIL != table_title) ? ConsesLow.list((SubLObject)fact_sheets.$str114$title, table_title) : fact_sheets.NIL);
        final SubLObject fact_headers = fact_sheet_table_header_values(section_table_specs, table_type);
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
            try {
                xml_vars.$xml_stream$.bind(stream, thread);
                try {
                    final SubLObject _prev_bind_0_$5 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                    try {
                        xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                        xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                        xml_utilities.xml_start_tag_internal((SubLObject)fact_sheets.$str115$factGroup, table_title_attrs, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$kw116$UNINITIALIZED);
                        final SubLObject _prev_bind_0_$6 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                        try {
                            xml_vars.$xml_default_namespace$.bind((SubLObject)fact_sheets.$kw116$UNINITIALIZED, thread);
                            SubLObject cdolist_list_var = sort_fact_sheet_table_data(table_type_data);
                            SubLObject cons = (SubLObject)fact_sheets.NIL;
                            cons = cdolist_list_var.first();
                            while (fact_sheets.NIL != cdolist_list_var) {
                                SubLObject current;
                                final SubLObject datum = current = cons;
                                SubLObject sentence = (SubLObject)fact_sheets.NIL;
                                SubLObject sentence_data = (SubLObject)fact_sheets.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list117);
                                sentence = current.first();
                                current = (sentence_data = current.rest());
                                final SubLObject assertion = find_assertion_for_fact_sheet_sentence(sentence, domain_mt);
                                final SubLObject assertion_formula = (SubLObject)((fact_sheets.NIL != assertion) ? uncanonicalizer.assertion_el_ist_formula(assertion) : fact_sheets.NIL);
                                final SubLObject fact_sentence = (fact_sheets.NIL != assertion_formula) ? assertion_formula : sentence;
                                final SubLObject fact_attrs = (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str118$id, kb_utilities.compact_hl_external_id_string(fact_sentence), (SubLObject)fact_sheets.$str119$cycl, fact_sentence);
                                try {
                                    final SubLObject _prev_bind_0_$7 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$8 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                                    try {
                                        xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                        xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                        xml_utilities.xml_start_tag_internal((SubLObject)fact_sheets.$str120$fact, fact_attrs, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$kw116$UNINITIALIZED);
                                        final SubLObject _prev_bind_0_$8 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                        try {
                                            xml_vars.$xml_default_namespace$.bind((SubLObject)fact_sheets.$kw116$UNINITIALIZED, thread);
                                            SubLObject cdolist_list_var_$10 = list_utilities.sort_alist_by_keys(sentence_data, Symbols.symbol_function((SubLObject)fact_sheets.$sym125$_));
                                            SubLObject cons_$11 = (SubLObject)fact_sheets.NIL;
                                            cons_$11 = cdolist_list_var_$10.first();
                                            while (fact_sheets.NIL != cdolist_list_var_$10) {
                                                SubLObject current_$13;
                                                final SubLObject datum_$12 = current_$13 = cons_$11;
                                                SubLObject column = (SubLObject)fact_sheets.NIL;
                                                SubLObject value = (SubLObject)fact_sheets.NIL;
                                                cdestructuring_bind.destructuring_bind_must_consp(current_$13, datum_$12, (SubLObject)fact_sheets.$list121);
                                                column = current_$13.first();
                                                current_$13 = (value = current_$13.rest());
                                                final SubLObject arg_headers = (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str122$header, ConsesLow.nth(Numbers.subtract(column, (SubLObject)fact_sheets.ONE_INTEGER), fact_headers), (SubLObject)fact_sheets.$str118$id, kb_utilities.compact_hl_external_id_string(value), (SubLObject)fact_sheets.$str119$cycl, value);
                                                try {
                                                    final SubLObject _prev_bind_0_$9 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$9 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                                                    try {
                                                        xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                                        xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                                        xml_utilities.xml_start_tag_internal((SubLObject)fact_sheets.$str123$arg, arg_headers, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$kw116$UNINITIALIZED);
                                                        final SubLObject _prev_bind_0_$10 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                                        try {
                                                            xml_vars.$xml_default_namespace$.bind((SubLObject)fact_sheets.$kw116$UNINITIALIZED, thread);
                                                            PrintLow.format(xml_vars.$xml_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str124$_A, fact_sheet_table_data_for_value(column, value, v_properties, language_mt, domain_mt, focal_term));
                                                        }
                                                        finally {
                                                            xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$10, thread);
                                                        }
                                                    }
                                                    finally {
                                                        xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$9, thread);
                                                        xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$9, thread);
                                                    }
                                                }
                                                finally {
                                                    final SubLObject _prev_bind_0_$11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                                        final SubLObject _values = Values.getValuesAsVector();
                                                        xml_utilities.xml_terpri();
                                                        xml_utilities.xml_end_tag_internal((SubLObject)fact_sheets.$str123$arg);
                                                        Values.restoreValuesFromVector(_values);
                                                    }
                                                    finally {
                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$11, thread);
                                                    }
                                                }
                                                cdolist_list_var_$10 = cdolist_list_var_$10.rest();
                                                cons_$11 = cdolist_list_var_$10.first();
                                            }
                                        }
                                        finally {
                                            xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$8, thread);
                                        }
                                    }
                                    finally {
                                        xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$8, thread);
                                        xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$7, thread);
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$12 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                        final SubLObject _values2 = Values.getValuesAsVector();
                                        xml_utilities.xml_terpri();
                                        xml_utilities.xml_end_tag_internal((SubLObject)fact_sheets.$str120$fact);
                                        Values.restoreValuesFromVector(_values2);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$12, thread);
                                    }
                                }
                                cdolist_list_var = cdolist_list_var.rest();
                                cons = cdolist_list_var.first();
                            }
                        }
                        finally {
                            xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$6, thread);
                        }
                    }
                    finally {
                        xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                        xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$5, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$13 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        xml_utilities.xml_terpri();
                        xml_utilities.xml_end_tag_internal((SubLObject)fact_sheets.$str115$factGroup);
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$13, thread);
                    }
                }
            }
            finally {
                xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
            }
            xml_table = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values4 = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                Values.restoreValuesFromVector(_values4);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return xml_table;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 27594L)
    public static SubLObject fact_sheet_html_table_from_data(final SubLObject section_table_specs, final SubLObject table_type, final SubLObject table_type_data, final SubLObject v_properties, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject focal_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject table_title = fact_sheet_table_title(table_type, language_mt);
        SubLObject html_table = (SubLObject)fact_sheets.NIL;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
            try {
                html_macros.$html_stream$.bind(stream, thread);
                html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                if (fact_sheets.NIL != fact_sheets.$fact_sheet_table_horizontal_alignment$.getGlobalValue()) {
                    html_utilities.html_markup(html_macros.$html_table_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align(fact_sheets.$fact_sheet_table_horizontal_alignment$.getGlobalValue()));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                }
                if (fact_sheets.NIL != fact_sheets.$fact_sheet_table_border_width$.getGlobalValue()) {
                    html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(fact_sheets.$fact_sheet_table_border_width$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                }
                if (fact_sheets.NIL != fact_sheets.$fact_sheet_table_cellpadding$.getGlobalValue()) {
                    html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(fact_sheets.$fact_sheet_table_cellpadding$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                }
                if (fact_sheets.NIL != fact_sheets.$fact_sheet_table_width$.getGlobalValue()) {
                    html_utilities.html_markup(html_macros.$html_table_width$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(fact_sheets.$fact_sheet_table_width$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                }
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$20 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                    if (fact_sheets.NIL != table_title) {
                        output_fact_sheet_table_title_row(table_title, table_type);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    if (fact_sheets.NIL != fact_sheets.$fact_sheet_table_header_horizontal_alignment$.getGlobalValue()) {
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(fact_sheets.$fact_sheet_table_header_horizontal_alignment$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    if (fact_sheets.NIL != fact_sheets.$fact_sheet_table_header_bgcolor$.getGlobalValue()) {
                        html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(fact_sheets.$fact_sheet_table_header_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$21 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        output_fact_sheet_table_sentence_link((SubLObject)fact_sheets.NIL);
                        SubLObject cdolist_list_var = fact_sheet_table_header_values(section_table_specs, table_type);
                        SubLObject header_value = (SubLObject)fact_sheets.NIL;
                        header_value = cdolist_list_var.first();
                        while (fact_sheets.NIL != cdolist_list_var) {
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                            final SubLObject _prev_bind_0_$22 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                                final SubLObject color_val = fact_sheets.$fact_sheet_table_header_font_color$.getGlobalValue();
                                html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                                if (fact_sheets.NIL != color_val) {
                                    html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_color(color_val));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                                }
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                                final SubLObject _prev_bind_0_$23 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                                    html_utilities.html_markup(header_value);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$23, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$22, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            cdolist_list_var = cdolist_list_var.rest();
                            header_value = cdolist_list_var.first();
                        }
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$21, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    SubLObject cdolist_list_var2 = sort_fact_sheet_table_data(table_type_data);
                    SubLObject cons = (SubLObject)fact_sheets.NIL;
                    cons = cdolist_list_var2.first();
                    while (fact_sheets.NIL != cdolist_list_var2) {
                        SubLObject current;
                        final SubLObject datum = current = cons;
                        SubLObject sentence = (SubLObject)fact_sheets.NIL;
                        SubLObject sentence_data = (SubLObject)fact_sheets.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list117);
                        sentence = current.first();
                        current = (sentence_data = current.rest());
                        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        if (fact_sheets.NIL != fact_sheets.$fact_sheet_table_data_bgcolor$.getGlobalValue()) {
                            html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup(fact_sheets.$fact_sheet_table_data_bgcolor$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$24 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                            final SubLObject assertion = find_assertion_for_fact_sheet_sentence(sentence, domain_mt);
                            output_fact_sheet_table_sentence_link((fact_sheets.NIL != assertion) ? assertion : sentence);
                            SubLObject cdolist_list_var_$25 = list_utilities.sort_alist_by_keys(sentence_data, Symbols.symbol_function((SubLObject)fact_sheets.$sym125$_));
                            SubLObject cons_$26 = (SubLObject)fact_sheets.NIL;
                            cons_$26 = cdolist_list_var_$25.first();
                            while (fact_sheets.NIL != cdolist_list_var_$25) {
                                SubLObject current_$28;
                                final SubLObject datum_$27 = current_$28 = cons_$26;
                                SubLObject column = (SubLObject)fact_sheets.NIL;
                                SubLObject value = (SubLObject)fact_sheets.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$28, datum_$27, (SubLObject)fact_sheets.$list121);
                                column = current_$28.first();
                                current_$28 = (value = current_$28.rest());
                                final SubLObject align = (SubLObject)(column.eql((SubLObject)fact_sheets.ONE_INTEGER) ? fact_sheets.$fact_sheet_table_data_first_column_horizontal_alignment$.getGlobalValue() : fact_sheets.NIL);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                if (fact_sheets.NIL != align) {
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align(align));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                                }
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                                final SubLObject _prev_bind_0_$25 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                                    html_utilities.html_markup(fact_sheet_table_data_for_value(column, value, v_properties, language_mt, domain_mt, focal_term));
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$25, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                cdolist_list_var_$25 = cdolist_list_var_$25.rest();
                                cons_$26 = cdolist_list_var_$25.first();
                            }
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$24, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                        cdolist_list_var2 = cdolist_list_var2.rest();
                        cons = cdolist_list_var2.first();
                    }
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$20, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_stream$.rebind(_prev_bind_0, thread);
            }
            html_table = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        return html_table;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 29204L)
    public static SubLObject sort_fact_sheet_table_data(final SubLObject table_type_data) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject sorted = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.bind(pred_counts_for_sentences(dictionary.dictionary_keys(table_type_data)), thread);
            sorted = Sort.stable_sort(dictionary_utilities.sort_dictionary_by_keys(table_type_data, Symbols.symbol_function((SubLObject)fact_sheets.$sym126$TERM__)), (SubLObject)fact_sheets.$sym127$FACT_SHEET_PRED_COUNT__, (SubLObject)fact_sheets.$sym128$FACT_SHEET_TABLE_SENTENCE_DATA_PREDICATE);
        }
        finally {
            fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.rebind(_prev_bind_0, thread);
        }
        return sorted;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 29729L)
    public static SubLObject fact_sheet_table_sentence_data_predicate(final SubLObject sentence_data) {
        return cycl_utilities.formula_arg0(sentence_data.first());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 29847L)
    public static SubLObject find_assertion_for_fact_sheet_sentence(final SubLObject sentence, final SubLObject domain_mt) {
        return (fact_sheets.NIL != assertion_handles.assertion_p(sentence)) ? sentence : czer_meta.find_visible_assertions_cycl(sentence, domain_mt).first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 30034L)
    public static SubLObject fact_sheet_table_title(final SubLObject table_type, final SubLObject language_mt) {
        return kb_mapping_utilities.fpred_value_in_relevant_mts(table_type, fact_sheets.$const129$titleForTablesOfType, language_mt, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 30188L)
    public static SubLObject output_fact_sheet_table_title_row(final SubLObject table_title, final SubLObject table_type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
        if (fact_sheets.NIL != fact_sheets.$fact_sheet_table_title_horizontal_alignment$.getGlobalValue()) {
            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            html_utilities.html_markup(fact_sheets.$fact_sheet_table_title_horizontal_alignment$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        }
        if (fact_sheets.NIL != fact_sheets.$fact_sheet_table_title_bgcolor$.getGlobalValue()) {
            html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            html_utilities.html_markup(fact_sheets.$fact_sheet_table_title_bgcolor$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
            final SubLObject colspan = number_utilities.f_1X(fact_sheet_table_type_width(table_type));
            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
            if (fact_sheets.NIL != colspan) {
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup(colspan);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            }
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject _prev_bind_0_$30 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject color_val = fact_sheets.$fact_sheet_table_title_font_color$.getGlobalValue();
                html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                if (fact_sheets.NIL != color_val) {
                    html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_color(color_val));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                }
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$31 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                    html_utilities.html_princ_strong(table_title);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$31, thread);
                }
                html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$30, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
        return table_title;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 30653L)
    public static SubLObject output_fact_sheet_table_sentence_link(final SubLObject sentence) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
            if (fact_sheets.NIL != sentence) {
                final SubLObject v_properties = (SubLObject)fact_sheets.NIL;
                html_utilities.html_markup(fact_sheet_possibly_mark_up_sentence_paraphrase(sentence, (SubLObject)fact_sheets.$str73$, v_properties));
            }
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
        return sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 30933L)
    public static SubLObject fact_sheet_table_header_values(final SubLObject section_table_specs, final SubLObject table_type) {
        final SubLObject relevant_specs = list_utilities.find_all(table_type, section_table_specs, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), Symbols.symbol_function((SubLObject)fact_sheets.$sym130$SECOND));
        final SubLObject sorted = Sort.sort(relevant_specs, Symbols.symbol_function((SubLObject)fact_sheets.$sym125$_), Symbols.symbol_function((SubLObject)fact_sheets.$sym131$THIRD));
        return Mapping.mapcar(Symbols.symbol_function((SubLObject)fact_sheets.$sym132$FOURTH), sorted);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 31216L)
    public static SubLObject fact_sheet_table_data_for_value(final SubLObject column, final SubLObject value, final SubLObject v_properties, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject focal_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject table_data = (SubLObject)((column.eql((SubLObject)fact_sheets.ONE_INTEGER) && fact_sheets.NIL != kb_accessors.binary_predicateP(value)) ? formula_template_utilities.make_fet_gloss_for_arg2_of_binary_pred(value, (SubLObject)fact_sheets.UNPROVIDED) : fact_sheets.NIL);
        final SubLObject xmlP = xml_factsheetsP(v_properties);
        if (table_data.isString()) {
            table_data = Strings.string_right_trim((SubLObject)fact_sheets.$list133, table_data);
        }
        else if (fact_sheets.NIL != xmlP) {
            table_data = pph_main.generate_text_wXsentential_force(value, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.$kw70$DEFAULT, language_mt, domain_mt, (SubLObject)fact_sheets.$kw134$TEXT, (SubLObject)fact_sheets.UNPROVIDED);
        }
        else {
            final SubLObject _prev_bind_0 = fact_sheets.$within_fact_sheet_paraphraseP$.currentBinding(thread);
            final SubLObject _prev_bind_2 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
            final SubLObject _prev_bind_3 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
            final SubLObject _prev_bind_4 = pph_vars.$constant_link_function$.currentBinding(thread);
            final SubLObject _prev_bind_5 = pph_vars.$html_generation_target$.currentBinding(thread);
            final SubLObject _prev_bind_6 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
            final SubLObject _prev_bind_7 = pph_vars.$pph_speaker$.currentBinding(thread);
            final SubLObject _prev_bind_8 = pph_vars.$pph_addressee$.currentBinding(thread);
            try {
                fact_sheets.$within_fact_sheet_paraphraseP$.bind((SubLObject)fact_sheets.T, thread);
                fact_sheets.$fact_sheet_focal_term$.bind(focal_term, thread);
                thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(focal_term)) ? ConsesLow.cons(focal_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
                pph_vars.$constant_link_function$.bind((SubLObject)fact_sheets.$kw135$FACT_SHEET, thread);
                pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
                pph_vars.$html_generation_term_id_function$.bind((SubLObject)fact_sheets.$sym136$FACT_SHEET_TERM_ID, thread);
                pph_vars.$pph_speaker$.bind((SubLObject)fact_sheets.$kw137$UNKNOWN, thread);
                pph_vars.$pph_addressee$.bind((SubLObject)fact_sheets.$kw137$UNKNOWN, thread);
                table_data = pph_main.generate_text_wXsentential_force(value, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.$kw70$DEFAULT, language_mt, domain_mt, (SubLObject)fact_sheets.$kw87$HTML, (SubLObject)fact_sheets.UNPROVIDED);
            }
            finally {
                pph_vars.$pph_addressee$.rebind(_prev_bind_8, thread);
                pph_vars.$pph_speaker$.rebind(_prev_bind_7, thread);
                pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_6, thread);
                pph_vars.$html_generation_target$.rebind(_prev_bind_5, thread);
                pph_vars.$constant_link_function$.rebind(_prev_bind_4, thread);
                thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_3, thread);
                fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_2, thread);
                fact_sheets.$within_fact_sheet_paraphraseP$.rebind(_prev_bind_0, thread);
            }
        }
        return table_data;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 31926L)
    public static SubLObject fact_sheet_table_specs(SubLObject focal_term, SubLObject domain_mt) {
        if (focal_term == fact_sheets.UNPROVIDED) {
            focal_term = fact_sheets.$fact_sheet_focal_term$.getDynamicValue();
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(focal_term);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject specs = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
        final SubLObject _prev_bind_2 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_focal_term$.bind(focal_term, thread);
            fact_sheets.$fact_sheet_query_mt$.bind(fact_sheet_anytime_mt(domain_mt), thread);
            specs = kb_query.new_cyc_query_from_kbq(fact_sheets.$const138$FactSheetTableSectionAndHeaderQue, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$kw139$BROWSABLE_, fact_sheet_queries_browsableP()), (SubLObject)fact_sheets.UNPROVIDED);
        }
        finally {
            fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_2, thread);
            fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
        }
        return specs;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 32363L)
    public static SubLObject section_table_specs(final SubLObject label, final SubLObject table_specs) {
        final SubLObject category = category_label_pred(label);
        return list_utilities.find_all(category, table_specs, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), Symbols.symbol_function((SubLObject)fact_sheets.$sym140$FIRST));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 32529L)
    public static SubLObject table_types_from_section_table_specs(final SubLObject section_table_specs) {
        return Sequences.delete_duplicates(Mapping.mapcar((SubLObject)fact_sheets.$sym130$SECOND, section_table_specs), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 32671L)
    public static SubLObject table_data_for_sentence(final SubLObject table_type, final SubLObject sentence, SubLObject focal_term, SubLObject domain_mt, SubLObject problem_store) {
        if (focal_term == fact_sheets.UNPROVIDED) {
            focal_term = fact_sheets.$fact_sheet_focal_term$.getDynamicValue();
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(focal_term);
        }
        if (problem_store == fact_sheets.UNPROVIDED) {
            problem_store = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject data = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
        final SubLObject _prev_bind_2 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
        final SubLObject _prev_bind_3 = fact_sheets.$fact_sheet_sentence$.currentBinding(thread);
        final SubLObject _prev_bind_4 = fact_sheets.$fact_sheet_table_type$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_focal_term$.bind(focal_term, thread);
            fact_sheets.$fact_sheet_query_mt$.bind(fact_sheet_anytime_mt(domain_mt), thread);
            fact_sheets.$fact_sheet_sentence$.bind(sentence, thread);
            fact_sheets.$fact_sheet_table_type$.bind(table_type, thread);
            final SubLObject kbq = fact_sheets.$const141$FactSheetTableCellValuesQuery;
            final SubLObject raw_sentence = kb_query.kbq_sentence(kbq);
            final SubLObject query_sentence = dereference_fact_sheet_indexicals(raw_sentence);
            final SubLObject mt = kb_query.kbq_mt(kbq);
            final SubLObject table_width = fact_sheet_table_type_width(table_type);
            final SubLObject v_properties = inference_datastructures_enumerated_types.merge_query_properties(kb_query.kbq_query_properties(kbq), (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$kw139$BROWSABLE_, fact_sheets.$fact_sheet_queries_browsableP$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw142$INFERENCE_MODE, (SubLObject)fact_sheets.$kw143$SHALLOW, (SubLObject)fact_sheets.$kw144$MAX_NUMBER, table_width, (SubLObject)fact_sheets.$kw145$PROBLEM_STORE, problem_store));
            final SubLObject result = inference_kernel.new_cyc_query(query_sentence, mt, v_properties);
            data = (SubLObject)((fact_sheets.NIL != list_utilities.lengthE(result, table_width, (SubLObject)fact_sheets.UNPROVIDED)) ? result : fact_sheets.NIL);
        }
        finally {
            fact_sheets.$fact_sheet_table_type$.rebind(_prev_bind_4, thread);
            fact_sheets.$fact_sheet_sentence$.rebind(_prev_bind_3, thread);
            fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_2, thread);
            fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
        }
        return data;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 33762L)
    public static SubLObject dereference_fact_sheet_indexicals(final SubLObject query_sentence) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (fact_sheets.NIL == el_utilities.el_conjunction_p(query_sentence)) {
            return query_sentence;
        }
        SubLObject new_conjuncts = (SubLObject)fact_sheets.NIL;
        SubLObject v_bindings = (SubLObject)fact_sheets.NIL;
        SubLObject cdolist_list_var;
        final SubLObject args = cdolist_list_var = cycl_utilities.formula_args(query_sentence, (SubLObject)fact_sheets.$kw146$IGNORE);
        SubLObject old_conjunct = (SubLObject)fact_sheets.NIL;
        old_conjunct = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            SubLObject substitutedP = (SubLObject)fact_sheets.NIL;
            if (fact_sheets.NIL == substitutedP) {
                SubLObject csome_list_var = (SubLObject)fact_sheets.$list150;
                SubLObject indexical = (SubLObject)fact_sheets.NIL;
                indexical = csome_list_var.first();
                while (fact_sheets.NIL == substitutedP && fact_sheets.NIL != csome_list_var) {
                    thread.resetMultipleValues();
                    final SubLObject success = formula_pattern_match.formula_matches_pattern(old_conjunct, (SubLObject)ConsesLow.listS(fact_sheets.$const147$indexicalReferent, indexical, (SubLObject)fact_sheets.$list148));
                    final SubLObject v_bindings_$32 = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    if (fact_sheets.NIL != success) {
                        final SubLObject var = list_utilities.alist_lookup_without_values(v_bindings_$32, (SubLObject)fact_sheets.$sym149$VAR, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject referent = removal_modules_indexical_referent.cyc_indexical_referent(indexical);
                        v_bindings = list_utilities.alist_enter(v_bindings, var, referent, (SubLObject)fact_sheets.UNPROVIDED);
                        substitutedP = (SubLObject)fact_sheets.T;
                    }
                    csome_list_var = csome_list_var.rest();
                    indexical = csome_list_var.first();
                }
            }
            if (fact_sheets.NIL == substitutedP) {
                new_conjuncts = (SubLObject)ConsesLow.cons(old_conjunct, new_conjuncts);
            }
            cdolist_list_var = cdolist_list_var.rest();
            old_conjunct = cdolist_list_var.first();
        }
        new_conjuncts = bindings.apply_bindings(v_bindings, new_conjuncts);
        return (fact_sheets.NIL != list_utilities.singletonP(new_conjuncts)) ? list_utilities.only_one(new_conjuncts) : simplifier.conjoin(Sequences.nreverse(new_conjuncts), (SubLObject)fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 34747L)
    public static SubLObject fact_sheet_anytime_mt(final SubLObject domain_mt) {
        return hlmt_czer.canonicalize_hlmt(hlmt.new_hlmt((SubLObject)ConsesLow.list(hlmt.hlmt_monad_mt(domain_mt), fact_sheets.$const151$AnytimePSC)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 34884L)
    public static SubLObject possibly_reserve_sentence_for_tables(final SubLObject summary_sentence, final SubLObject table_types, final SubLObject table_data, SubLObject focal_term, SubLObject domain_mt, SubLObject problem_store) {
        if (focal_term == fact_sheets.UNPROVIDED) {
            focal_term = fact_sheets.$fact_sheet_focal_term$.getDynamicValue();
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(focal_term);
        }
        if (problem_store == fact_sheets.UNPROVIDED) {
            problem_store = (SubLObject)fact_sheets.NIL;
        }
        SubLObject reservedP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != summary_sentence && fact_sheets.NIL != table_types && fact_sheets.NIL != table_data) {
            final SubLObject conjuncts = fact_sheet_sentence_conjuncts(summary_sentence);
            SubLObject cdolist_list_var = table_types;
            SubLObject table_type = (SubLObject)fact_sheets.NIL;
            table_type = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject failP = (SubLObject)fact_sheets.NIL;
                SubLObject conjuncts_data = (SubLObject)fact_sheets.NIL;
                if (fact_sheets.NIL == failP) {
                    SubLObject csome_list_var = conjuncts;
                    SubLObject conjunct = (SubLObject)fact_sheets.NIL;
                    conjunct = csome_list_var.first();
                    while (fact_sheets.NIL == failP && fact_sheets.NIL != csome_list_var) {
                        final SubLObject conjunct_data = table_data_for_sentence(table_type, conjunct, focal_term, domain_mt, problem_store);
                        if (fact_sheets.NIL != valid_sentence_data_for_table_typeP(table_type, conjunct_data)) {
                            conjuncts_data = list_utilities.alist_enter(conjuncts_data, conjunct, conjunct_data, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        else {
                            failP = (SubLObject)fact_sheets.T;
                        }
                        csome_list_var = csome_list_var.rest();
                        conjunct = csome_list_var.first();
                    }
                }
                if (fact_sheets.NIL == failP && fact_sheets.NIL == list_utilities.empty_list_p(conjuncts_data)) {
                    SubLObject table_type_data = dictionary.dictionary_lookup_without_values(table_data, table_type, (SubLObject)fact_sheets.UNPROVIDED);
                    if (fact_sheets.NIL == dictionary.dictionary_p(table_type_data)) {
                        table_type_data = dictionary.new_dictionary(Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED);
                        dictionary.dictionary_enter(table_data, table_type, table_type_data);
                    }
                    SubLObject cdolist_list_var_$33 = conjuncts_data;
                    SubLObject cons = (SubLObject)fact_sheets.NIL;
                    cons = cdolist_list_var_$33.first();
                    while (fact_sheets.NIL != cdolist_list_var_$33) {
                        SubLObject current;
                        final SubLObject datum = current = cons;
                        SubLObject conjunct2 = (SubLObject)fact_sheets.NIL;
                        SubLObject conjunct_data2 = (SubLObject)fact_sheets.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list152);
                        conjunct2 = current.first();
                        current = (conjunct_data2 = current.rest());
                        dictionary.dictionary_enter(table_type_data, conjunct2, conjunct_data2);
                        cdolist_list_var_$33 = cdolist_list_var_$33.rest();
                        cons = cdolist_list_var_$33.first();
                    }
                    reservedP = (SubLObject)fact_sheets.T;
                }
                cdolist_list_var = cdolist_list_var.rest();
                table_type = cdolist_list_var.first();
            }
        }
        return reservedP;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 36220L)
    public static SubLObject fact_sheet_sentence_conjuncts(final SubLObject sentence) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject conjunction = fact_sheet_sentence_expand_coordination_sets(sentence);
        final SubLObject expandedP = thread.secondMultipleValue();
        thread.resetMultipleValues();
        return (SubLObject)((fact_sheets.NIL != expandedP && fact_sheets.NIL != el_utilities.el_conjunction_p(conjunction)) ? cycl_utilities.el_formula_args(conjunction, (SubLObject)fact_sheets.UNPROVIDED) : ConsesLow.list(sentence));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 36514L)
    public static SubLObject valid_sentence_data_for_table_typeP(final SubLObject table_type, final SubLObject sentence_data) {
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != sentence_data && fact_sheets.NIL == list_utilities.duplicatesP(sentence_data, Symbols.symbol_function((SubLObject)fact_sheets.EQL), Symbols.symbol_function((SubLObject)fact_sheets.$sym153$CAR)) && Sequences.length(sentence_data).eql(fact_sheet_table_type_width(table_type)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 36757L)
    public static SubLObject fact_sheet_table_type_width_internal(final SubLObject table_type) {
        return kb_mapping_utilities.fpred_value_in_any_mt(table_type, fact_sheets.$const155$tableTypeWidth, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 36757L)
    public static SubLObject fact_sheet_table_type_width(final SubLObject table_type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == v_memoization_state) {
            return fact_sheet_table_type_width_internal(table_type);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, (SubLObject)fact_sheets.$sym154$FACT_SHEET_TABLE_TYPE_WIDTH, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), (SubLObject)fact_sheets.$sym154$FACT_SHEET_TABLE_TYPE_WIDTH, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, (SubLObject)fact_sheets.$sym154$FACT_SHEET_TABLE_TYPE_WIDTH, caching_state);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, table_type, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(thread.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_table_type_width_internal(table_type)));
            memoization_state.caching_state_put(caching_state, table_type, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 36912L)
    public static SubLObject fact_sheet_sort_paragraphs_at_retrieval_time(final SubLObject fs_data, final SubLObject v_properties) {
        final SubLObject sort_fn = get_sort_fn_from_properties(v_properties);
        final SubLObject sorted_data = (fact_sheets.NIL != Symbols.fboundp(sort_fn)) ? Sort.stable_sort(fs_data, sort_fn, (SubLObject)fact_sheets.UNPROVIDED) : conses_high.copy_list(fs_data);
        return sorted_data;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 37182L)
    public static SubLObject possibly_convert_summary_sentence_to_cycl(final SubLObject obj) {
        if (fact_sheets.NIL != summary_sentence_plistP(obj)) {
            return summary_sentence_cycl(obj);
        }
        return obj;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 37539L)
    public static SubLObject new_summary_sentence(final SubLObject cycl, final SubLObject cycl_or_assert_list) {
        return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$kw156$SENTENCE, cycl, (SubLObject)fact_sheets.$kw157$ASSERTIONS, list_utilities.remove_if_not((SubLObject)fact_sheets.$sym158$ASSERTION_P, cycl_or_assert_list, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 37699L)
    public static SubLObject summary_sentence_cycl(final SubLObject summ_sent) {
        return cycl_utilities.expression_transform(summ_sent, (SubLObject)fact_sheets.$sym159$SUMMARY_SENTENCE_PLIST_, (SubLObject)fact_sheets.$sym160$SUMMARY_SENTENCE_PLIST_CYCL, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 37848L)
    public static SubLObject summary_sentence_plist_cycl(final SubLObject summ_sent) {
        return conses_high.getf(summ_sent, (SubLObject)fact_sheets.$kw156$SENTENCE, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 37941L)
    public static SubLObject summary_sentence_assertions(final SubLObject summ_sent) {
        if (fact_sheets.NIL != assertion_handles.assertion_p(summ_sent)) {
            return (SubLObject)ConsesLow.list(summ_sent);
        }
        if (fact_sheets.NIL != summary_sentence_plistP(summ_sent)) {
            return conses_high.getf(summ_sent, (SubLObject)fact_sheets.$kw157$ASSERTIONS, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 38237L)
    public static SubLObject summary_sentence_sources(final SubLObject summ_sent) {
        SubLObject v_sources = (SubLObject)fact_sheets.NIL;
        SubLObject cdolist_list_var = summary_sentence_assertions(summ_sent);
        SubLObject v_assert = (SubLObject)fact_sheets.NIL;
        v_assert = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            v_sources = Sequences.cconcatenate(v_sources, sources.assertion_sources(v_assert));
            cdolist_list_var = cdolist_list_var.rest();
            v_assert = cdolist_list_var.first();
        }
        return Sequences.remove_duplicates(v_sources, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 38486L)
    public static SubLObject summary_sentence_plistP(final SubLObject obj) {
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != list_utilities.property_list_p(obj) && fact_sheets.NIL != conses_high.getf(obj, (SubLObject)fact_sheets.$kw156$SENTENCE, (SubLObject)fact_sheets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 38598L)
    public static SubLObject construct_fact_sheet_paragraph(final SubLObject sentence_paraphrases, final SubLObject focal_term, final SubLObject domain_mt, final SubLObject v_properties, final SubLObject table_types, final SubLObject table_data, final SubLObject force_bulletsP, SubLObject slot_values_onlyP) {
        if (slot_values_onlyP == fact_sheets.UNPROVIDED) {
            slot_values_onlyP = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject new_sentence_paraphrases = (SubLObject)fact_sheets.NIL;
        final SubLObject use_bulletsP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == xml_factsheetsP(v_properties) && (fact_sheets.NIL != force_bulletsP || fact_sheets.NIL != pph_document.pph_summary_sentences_share_predP(Sequences.remove_if((SubLObject)fact_sheets.$sym161$INVALID_ASSERTION_, Sequences.remove((SubLObject)fact_sheets.NIL, list_utilities.alist_keys(sentence_paraphrases), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED))));
        SubLObject paragraph_text = (SubLObject)fact_sheets.NIL;
        final SubLObject allowed_term_type = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw162$ALLOWED_TERM_TYPE, (SubLObject)fact_sheets.$kw163$ALL);
        final SubLObject blacklist_sources = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw164$BLACKLIST_SOURCES, (SubLObject)fact_sheets.UNPROVIDED);
        SubLObject slot_values = (SubLObject)fact_sheets.NIL;
        SubLObject v_sources = (SubLObject)fact_sheets.NIL;
        SubLObject problem_store = (SubLObject)fact_sheets.NIL;
        try {
            problem_store = inference_datastructures_problem_store.new_problem_store((SubLObject)fact_sheets.UNPROVIDED);
            SubLObject cdolist_list_var = sentence_paraphrases;
            SubLObject cons = (SubLObject)fact_sheets.NIL;
            cons = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = cons;
                SubLObject summary_sentence = (SubLObject)fact_sheets.NIL;
                SubLObject paraphrase = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list165);
                summary_sentence = current.first();
                current = (paraphrase = current.rest());
                if (fact_sheets.NIL == cycl_utilities.expression_find_if((SubLObject)fact_sheets.$sym161$INVALID_ASSERTION_, summary_sentence, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
                    if (fact_sheets.NIL == cycl_utilities.expression_find_if((SubLObject)fact_sheets.$sym166$INVALID_FORT_, summary_sentence, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
                        if (fact_sheets.NIL == possibly_reserve_sentence_for_tables(summary_sentence, table_types, table_data, focal_term, domain_mt, problem_store)) {
                            if (fact_sheets.NIL != ((fact_sheets.NIL != summary_sentence) ? fact_sheet_summary_sentence_passes_retrieval_time_filterP(focal_term, summary_sentence, domain_mt, allowed_term_type, blacklist_sources) : list_utilities.non_empty_list_p(new_sentence_paraphrases))) {
                                new_sentence_paraphrases = (SubLObject)ConsesLow.cons(fact_sheet_possibly_mark_up_sentence_paraphrase(summary_sentence_cycl(summary_sentence), paraphrase, v_properties), new_sentence_paraphrases);
                                v_sources = Sequences.cconcatenate(v_sources, summary_sentence_sources(summary_sentence));
                                if (fact_sheets.NIL != slot_values_onlyP) {
                                    final SubLObject new_slot_values = fact_sheet_slot_values(summary_sentence_cycl(summary_sentence), focal_term);
                                    if (fact_sheets.NIL != new_slot_values) {
                                        final SubLObject items_var = new_slot_values;
                                        if (items_var.isVector()) {
                                            final SubLObject vector_var = items_var;
                                            final SubLObject backwardP_var = (SubLObject)fact_sheets.NIL;
                                            SubLObject length;
                                            SubLObject v_iteration;
                                            SubLObject element_num;
                                            SubLObject item_var;
                                            SubLObject item;
                                            for (length = Sequences.length(vector_var), v_iteration = (SubLObject)fact_sheets.NIL, v_iteration = (SubLObject)fact_sheets.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)fact_sheets.ONE_INTEGER)) {
                                                element_num = ((fact_sheets.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)fact_sheets.ONE_INTEGER) : v_iteration);
                                                item = (item_var = Vectors.aref(vector_var, element_num));
                                                if (fact_sheets.NIL == conses_high.member(item_var, slot_values, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY))) {
                                                    slot_values = (SubLObject)ConsesLow.cons(item_var, slot_values);
                                                }
                                            }
                                        }
                                        else {
                                            SubLObject cdolist_list_var_$34 = items_var;
                                            SubLObject item2 = (SubLObject)fact_sheets.NIL;
                                            item2 = cdolist_list_var_$34.first();
                                            while (fact_sheets.NIL != cdolist_list_var_$34) {
                                                final SubLObject item_var2 = item2;
                                                if (fact_sheets.NIL == conses_high.member(item_var2, slot_values, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY))) {
                                                    slot_values = (SubLObject)ConsesLow.cons(item_var2, slot_values);
                                                }
                                                cdolist_list_var_$34 = cdolist_list_var_$34.rest();
                                                item2 = cdolist_list_var_$34.first();
                                            }
                                        }
                                    }
                                    else {
                                        slot_values_onlyP = (SubLObject)fact_sheets.NIL;
                                    }
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                cons = cdolist_list_var.first();
            }
        }
        finally {
            final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                if (fact_sheets.NIL == fact_sheet_queries_browsableP()) {
                    inference_datastructures_problem_store.destroy_problem_store(problem_store);
                }
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
            }
        }
        if (fact_sheets.NIL != new_sentence_paraphrases) {
            if (fact_sheets.NIL != use_bulletsP && fact_sheets.NIL != slot_values_onlyP) {
                final SubLObject _prev_bind_2 = fact_sheets.$within_fact_sheet_paraphraseP$.currentBinding(thread);
                final SubLObject _prev_bind_3 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
                final SubLObject _prev_bind_4 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
                final SubLObject _prev_bind_5 = pph_vars.$constant_link_function$.currentBinding(thread);
                final SubLObject _prev_bind_6 = pph_vars.$html_generation_target$.currentBinding(thread);
                final SubLObject _prev_bind_7 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
                final SubLObject _prev_bind_8 = pph_vars.$pph_speaker$.currentBinding(thread);
                final SubLObject _prev_bind_9 = pph_vars.$pph_addressee$.currentBinding(thread);
                try {
                    fact_sheets.$within_fact_sheet_paraphraseP$.bind((SubLObject)fact_sheets.T, thread);
                    fact_sheets.$fact_sheet_focal_term$.bind(focal_term, thread);
                    thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(focal_term)) ? ConsesLow.cons(focal_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
                    pph_vars.$constant_link_function$.bind((SubLObject)fact_sheets.$kw135$FACT_SHEET, thread);
                    pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
                    pph_vars.$html_generation_term_id_function$.bind((SubLObject)fact_sheets.$sym136$FACT_SHEET_TERM_ID, thread);
                    pph_vars.$pph_speaker$.bind((SubLObject)fact_sheets.$kw137$UNKNOWN, thread);
                    pph_vars.$pph_addressee$.bind((SubLObject)fact_sheets.$kw137$UNKNOWN, thread);
                    paragraph_text = pph_document.pph_make_bulleted_list(Mapping.mapcar((SubLObject)fact_sheets.$sym167$FACT_SHEET_SLOT_VALUE_STRING, Sequences.nreverse(slot_values)));
                }
                finally {
                    pph_vars.$pph_addressee$.rebind(_prev_bind_9, thread);
                    pph_vars.$pph_speaker$.rebind(_prev_bind_8, thread);
                    pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_7, thread);
                    pph_vars.$html_generation_target$.rebind(_prev_bind_6, thread);
                    pph_vars.$constant_link_function$.rebind(_prev_bind_5, thread);
                    thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_4, thread);
                    fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_3, thread);
                    fact_sheets.$within_fact_sheet_paraphraseP$.rebind(_prev_bind_2, thread);
                }
            }
            else if (fact_sheets.NIL != use_bulletsP && fact_sheets.NIL != list_utilities.lengthG(new_sentence_paraphrases, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.UNPROVIDED)) {
                paragraph_text = pph_document.pph_make_bulleted_list(Sequences.nreverse(new_sentence_paraphrases));
            }
            else {
                paragraph_text = pph_utilities.clean_bunge_nreverse(new_sentence_paraphrases, (SubLObject)fact_sheets.UNPROVIDED);
            }
        }
        return Values.values(paragraph_text, v_sources);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 41273L)
    public static SubLObject fact_sheet_slot_values(SubLObject summary_sentence_cycl, final SubLObject focal_term) {
        if (fact_sheets.NIL != isa.isa_in_any_mtP(cycl_utilities.formula_arg0(summary_sentence_cycl), fact_sheets.$const168$QuantificationalRuleMacroPredicat)) {
            summary_sentence_cycl = el_utilities.make_el_formula(cycl_utilities.formula_arg1(summary_sentence_cycl, (SubLObject)fact_sheets.UNPROVIDED), Sequences.subseq(cycl_utilities.formula_args(summary_sentence_cycl, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.THREE_INTEGER), (SubLObject)fact_sheets.UNPROVIDED);
        }
        SubLObject raw_value = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == el_utilities.formula_arityE(summary_sentence_cycl, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.UNPROVIDED)) {
            Errors.warn((SubLObject)fact_sheets.$str169$Wrong_number_of_args_in__S, summary_sentence_cycl);
        }
        else if (fact_sheets.NIL != czer_utilities.equals_elP(focal_term, cycl_utilities.formula_arg1(summary_sentence_cycl, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            raw_value = cycl_utilities.formula_arg2(summary_sentence_cycl, (SubLObject)fact_sheets.UNPROVIDED);
        }
        else if (fact_sheets.NIL != czer_utilities.equals_elP(focal_term, cycl_utilities.formula_arg2(summary_sentence_cycl, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            raw_value = cycl_utilities.formula_arg1(summary_sentence_cycl, (SubLObject)fact_sheets.UNPROVIDED);
        }
        else {
            Errors.warn((SubLObject)fact_sheets.$str170$Couldn_t_find__S_in__S, focal_term, summary_sentence_cycl);
        }
        return (SubLObject)((fact_sheets.NIL != el_utilities.el_formula_with_operator_p(raw_value, fact_sheets.$const171$TheCoordinationSet)) ? cycl_utilities.formula_args(raw_value, (SubLObject)fact_sheets.UNPROVIDED) : ((fact_sheets.NIL == raw_value) ? fact_sheets.NIL : ConsesLow.list(raw_value)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 42348L)
    public static SubLObject fact_sheet_slot_value_string(final SubLObject value) {
        return pph_html.html_generate_phrase(value, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 42494L)
    public static SubLObject fact_sheet_summary_sentence_passes_data_gathering_time_filterP(final SubLObject summary_sentence, final SubLObject topic, final SubLObject query_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject asent = (fact_sheets.NIL != el_utilities.ist_sentence_p(summary_sentence, (SubLObject)fact_sheets.UNPROVIDED)) ? cycl_utilities.formula_arg2(summary_sentence, (SubLObject)fact_sheets.UNPROVIDED) : summary_sentence;
        SubLObject passes_filterP = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
        try {
            thcl.$thcl_forts_by_fiat$.bind((SubLObject)ConsesLow.cons(cycl_utilities.atomic_sentence_predicate(asent), thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
            passes_filterP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != cycl_grammar.cycl_sentence_p(summary_sentence) && fact_sheets.NIL != thcl.thcl_formulaP(asent, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL == Sequences.find_if((SubLObject)fact_sheets.$sym172$UNLEXIFIED_, cycl_utilities.expression_gather(cycl_utilities.formula_terms(asent, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$sym173$CONSTANT_P, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != fact_sheet_sentence_about_topicP(asent, topic, query_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL == pph_proof.pph_irrelevant_formulaP(summary_sentence, (SubLObject)ConsesLow.list(topic), fact_sheets.$const174$BaseKB) && fact_sheets.NIL == pph_proof.pph_trivial_sentenceP(summary_sentence, fact_sheets.$const174$BaseKB));
        }
        finally {
            thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_0, thread);
        }
        return Values.values(passes_filterP, cycl_utilities.atomic_sentence_predicate(asent));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 43460L)
    public static SubLObject fact_sheet_summary_sentence_passes_retrieval_time_filterP(final SubLObject focal_term, final SubLObject summary_sentence, SubLObject domain_mt, SubLObject allowed_term_type, SubLObject blacklist_sources) {
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(focal_term);
        }
        if (allowed_term_type == fact_sheets.UNPROVIDED) {
            allowed_term_type = (SubLObject)fact_sheets.$kw163$ALL;
        }
        if (blacklist_sources == fact_sheets.UNPROVIDED) {
            blacklist_sources = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cycl = summary_sentence_cycl(summary_sentence);
        final SubLObject asserts = summary_sentence_assertions(summary_sentence);
        final SubLObject asent = (fact_sheets.NIL != el_utilities.ist_sentence_p(cycl, (SubLObject)fact_sheets.UNPROVIDED)) ? cycl_utilities.formula_arg2(cycl, (SubLObject)fact_sheets.UNPROVIDED) : cycl;
        SubLObject passes_filterP = (SubLObject)fact_sheets.T;
        final SubLObject _prev_bind_0 = pph_vars.$pph_domain_mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$pph_irrelevant_warnP$.currentBinding(thread);
        try {
            pph_vars.$pph_domain_mt$.bind(domain_mt, thread);
            pph_vars.$pph_irrelevant_warnP$.bind((SubLObject)fact_sheets.T, thread);
            if (fact_sheets.NIL != list_utilities.any_in_list((SubLObject)fact_sheets.$sym161$INVALID_ASSERTION_, asserts, (SubLObject)fact_sheets.UNPROVIDED)) {
                passes_filterP = (SubLObject)fact_sheets.NIL;
            }
            else if (fact_sheets.NIL != pph_proof.pph_trivial_sentenceP(cycl, (SubLObject)fact_sheets.UNPROVIDED)) {
                passes_filterP = (SubLObject)fact_sheets.NIL;
            }
            else if (allowed_term_type == fact_sheets.$kw176$PUBLIC_ONLY && ((fact_sheets.NIL != asserts && fact_sheets.NIL != any_term_in_assertion_list_passes_test((SubLObject)fact_sheets.$sym177$NON_PUBLIC_CONSTANT, asserts, (SubLObject)fact_sheets.T)) || fact_sheets.NIL != cycl_utilities.expression_find_if((SubLObject)fact_sheets.$sym178$NON_PUBLIC_CONSTANT_, asent, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED))) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str179$Filtering__S___due_to_non_public_, summary_sentence, cycl_utilities.expression_find_if((SubLObject)fact_sheets.$sym178$NON_PUBLIC_CONSTANT_, asent, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED));
                    streams_high.force_output(stream);
                }
                passes_filterP = (SubLObject)fact_sheets.NIL;
            }
            else if (allowed_term_type == fact_sheets.$kw180$NON_PROPRIETARY && ((fact_sheets.NIL != asserts && fact_sheets.NIL != any_term_in_assertion_list_passes_test((SubLObject)fact_sheets.$sym181$PROPRIETARY_CONSTANT_, asserts, (SubLObject)fact_sheets.T)) || fact_sheets.NIL != cycl_utilities.expression_find_if((SubLObject)fact_sheets.$sym181$PROPRIETARY_CONSTANT_, asent, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED))) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str182$Filtering__S___due_to_proprietary, summary_sentence, cycl_utilities.expression_find_if((SubLObject)fact_sheets.$sym181$PROPRIETARY_CONSTANT_, asent, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED));
                    streams_high.force_output(stream);
                }
                passes_filterP = (SubLObject)fact_sheets.NIL;
            }
            else if (fact_sheets.NIL != fact_sheet_blacklisted_sources(summary_sentence, blacklist_sources)) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str183$Filtering__S___due_to_blacklisted, summary_sentence, fact_sheet_blacklisted_sources(summary_sentence, blacklist_sources));
                    streams_high.force_output(stream);
                }
                passes_filterP = (SubLObject)fact_sheets.NIL;
            }
            else if (fact_sheets.NIL != pph_proof.pph_irrelevant_formulaP(asent, (SubLObject)ConsesLow.cons(focal_term, fact_sheets.$fact_sheet_relevant_terms$.getDynamicValue(thread)), (SubLObject)fact_sheets.UNPROVIDED)) {
                passes_filterP = (SubLObject)fact_sheets.NIL;
            }
        }
        finally {
            pph_vars.$pph_irrelevant_warnP$.rebind(_prev_bind_2, thread);
            pph_vars.$pph_domain_mt$.rebind(_prev_bind_0, thread);
        }
        if (fact_sheets.NIL == passes_filterP) {
            Errors.warn((SubLObject)fact_sheets.$str184$Filtering____S, asent);
        }
        return Values.values(passes_filterP, (SubLObject)((fact_sheets.NIL != passes_filterP) ? cycl_utilities.atomic_sentence_predicate(asent) : fact_sheets.NIL));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 45632L)
    public static SubLObject fact_sheet_blacklisted_sources(final SubLObject summary_sentence, final SubLObject blacklisted_sources) {
        SubLObject cdolist_list_var = summary_sentence_assertions(summary_sentence);
        SubLObject v_assert = (SubLObject)fact_sheets.NIL;
        v_assert = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            final SubLObject v_sources = sources.assertion_sources(v_assert);
            final SubLObject blacklisted = conses_high.intersection(v_sources, blacklisted_sources, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            if (fact_sheets.NIL != blacklisted) {
                return blacklisted;
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_assert = cdolist_list_var.first();
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 45956L)
    public static SubLObject any_term_in_assertion_list_passes_test(final SubLObject test, final SubLObject asserts, final SubLObject penetrate_hl_structuresP) {
        SubLObject passP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == passP) {
            SubLObject csome_list_var;
            SubLObject v_assert;
            for (csome_list_var = asserts, v_assert = (SubLObject)fact_sheets.NIL, v_assert = csome_list_var.first(); fact_sheets.NIL == passP && fact_sheets.NIL != csome_list_var; passP = cycl_utilities.assertion_find_if(test, v_assert, penetrate_hl_structuresP, (SubLObject)fact_sheets.UNPROVIDED), csome_list_var = csome_list_var.rest(), v_assert = csome_list_var.first()) {}
        }
        return passP;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 46266L)
    public static SubLObject fact_sheet_title(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = pph_vars.$constant_link_function$.currentBinding(thread);
        try {
            pph_vars.$constant_link_function$.bind((SubLObject)fact_sheets.$kw185$NONE, thread);
            SubLObject term_paraphrase = pph_html.html_generate_phrase(v_term, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            term_paraphrase = pph_utilities.add_title_capitalization(term_paraphrase);
            return (fact_sheets.NIL != fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.getDynamicValue(thread)) ? term_paraphrase : Sequences.cconcatenate((SubLObject)fact_sheets.$str187$Fact_Sheet_for_, format_nil.format_nil_a_no_copy(term_paraphrase));
        }
        finally {
            pph_vars.$constant_link_function$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 46661L)
    public static SubLObject generate_fact_sheet_markup(final SubLObject v_term, final SubLObject domain_mt, final SubLObject paragraph_texts, final SubLObject footnotes, final SubLObject stats, final SubLObject display_time, final SubLObject v_properties) {
        if (fact_sheets.NIL != xml_factsheetsP(v_properties)) {
            return generate_fact_sheet_xml(v_term, domain_mt, paragraph_texts, footnotes, stats, display_time, v_properties);
        }
        return generate_fact_sheet_html(v_term, domain_mt, paragraph_texts, footnotes, stats, display_time, v_properties);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 47122L)
    public static SubLObject generate_fact_sheet_xml(final SubLObject v_term, final SubLObject domain_mt, final SubLObject paragraph_texts, final SubLObject footnotes, final SubLObject stats, final SubLObject display_time, final SubLObject v_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != fact_sheet_stats_p(stats) : stats;
        if (paragraph_texts.equal((SubLObject)ConsesLow.list(fact_sheet_under_construction_code()))) {
            return fact_sheet_under_construction_xml(v_term, stats);
        }
        final SubLObject image_url = (SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? fact_sheet_image_url_for_term(v_term, domain_mt) : fact_sheets.NIL);
        final SubLObject title = fact_sheet_title(v_term);
        SubLObject fact_sheet_xml = (SubLObject)fact_sheets.NIL;
        final SubLObject fact_sheet_attrs = (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str118$id, kb_utilities.compact_hl_external_id_string(v_term), (SubLObject)fact_sheets.$str119$cycl, v_term);
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
            try {
                xml_vars.$xml_stream$.bind(stream, thread);
                try {
                    final SubLObject _prev_bind_0_$35 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                    try {
                        xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                        xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                        xml_utilities.xml_start_tag_internal((SubLObject)fact_sheets.$str189$factSheet, fact_sheet_attrs, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$kw116$UNINITIALIZED);
                        final SubLObject _prev_bind_0_$36 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                        try {
                            xml_vars.$xml_default_namespace$.bind((SubLObject)fact_sheets.$kw116$UNINITIALIZED, thread);
                            PrintLow.format(xml_vars.$xml_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str124$_A, title);
                            display_fact_sheet(title, image_url, paragraph_texts, footnotes, v_properties);
                        }
                        finally {
                            xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$36, thread);
                        }
                    }
                    finally {
                        xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                        xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$35, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$37 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        xml_utilities.xml_terpri();
                        xml_utilities.xml_end_tag_internal((SubLObject)fact_sheets.$str189$factSheet);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$37, thread);
                    }
                }
            }
            finally {
                xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
            }
            fact_sheet_xml = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return fact_sheet_xml;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 48543L)
    public static SubLObject generate_fact_sheet_html(final SubLObject v_term, final SubLObject domain_mt, final SubLObject paragraph_texts, final SubLObject footnotes, final SubLObject stats, final SubLObject display_time, final SubLObject v_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (paragraph_texts.equal((SubLObject)ConsesLow.list(fact_sheet_under_construction_code()))) {
            return fact_sheet_under_construction_html(v_term, stats);
        }
        final SubLObject image_url = (SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? fact_sheet_image_url_for_term(v_term, domain_mt) : fact_sheets.NIL);
        final SubLObject title = fact_sheet_title(v_term);
        final SubLObject stylesheet = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw191$STYLESHEET, (SubLObject)fact_sheets.NIL);
        final SubLObject stylesheets = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw88$STYLESHEETS, (SubLObject)fact_sheets.NIL);
        final SubLObject show_adP = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw192$SHOW_AD_, (SubLObject)fact_sheets.NIL);
        final SubLObject show_info_link_url = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw193$SHOW_INFO_LINK_URL, (SubLObject)fact_sheets.NIL);
        final SubLObject show_opencyc_uriP = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw194$SHOW_URI_, (SubLObject)fact_sheets.NIL);
        final SubLObject show_followup_widgetP = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw195$SHOW_FOLLOWUP_WIDGET_, (SubLObject)fact_sheets.NIL);
        SubLObject fact_sheet_html = (SubLObject)fact_sheets.NIL;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
            try {
                html_macros.$html_stream$.bind(stream, thread);
                html_utilities.html_markup((SubLObject)fact_sheets.$str196$__DOCTYPE_html_PUBLIC_____W3C__DT);
                if (fact_sheets.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                    html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)fact_sheets.$str197$_meta_http_equiv__X_UA_Compatible);
                }
                html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$38 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                try {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == fact_sheets.$kw116$UNINITIALIZED) ? ConsesLow.list(fact_sheets.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                    html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                    html_macros.html_head_content_type();
                    if (stylesheet.isString()) {
                        html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_link_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_link_rel$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)fact_sheets.$str198$stylesheet);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        if (fact_sheets.NIL != stylesheet) {
                            html_utilities.html_markup(html_macros.$html_link_href$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup(stylesheet);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_link_type$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)fact_sheets.$str199$text_css);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    SubLObject cdolist_list_var = stylesheets;
                    SubLObject cs = (SubLObject)fact_sheets.NIL;
                    cs = cdolist_list_var.first();
                    while (fact_sheets.NIL != cdolist_list_var) {
                        html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_link_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_link_rel$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)fact_sheets.$str198$stylesheet);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        if (fact_sheets.NIL != cs) {
                            html_utilities.html_markup(html_macros.$html_link_href$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup(cs);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_link_type$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)fact_sheets.$str199$text_css);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        cdolist_list_var = cdolist_list_var.rest();
                        cs = cdolist_list_var.first();
                    }
                    if (fact_sheets.NIL != fact_sheets.$fact_sheet_use_base_urlP$.getDynamicValue(thread)) {
                        final SubLObject base_url = fact_sheet_base_url_placeholder();
                        html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_base_head$.getGlobalValue());
                        if (fact_sheets.NIL != base_url) {
                            html_utilities.html_markup(html_macros.$html_base_href$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup(base_url);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$39 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                    try {
                        html_macros.$html_inside_bodyP$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$40 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                            if (fact_sheets.NIL != show_adP) {
                                final SubLObject _prev_bind_0_$41 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.NIL, thread);
                                    html_utilities.html_markup(html_macros.$html_center_head$.getGlobalValue());
                                    html_utilities.html_princ(public_fact_sheet_ad_html());
                                    html_utilities.html_markup(html_macros.$html_center_tail$.getGlobalValue());
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$41, thread);
                                }
                                html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                            }
                            if (fact_sheets.NIL != show_followup_widgetP) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str200$_div_class__cycFollowup__termId__, kb_utilities.compact_hl_external_id_string(v_term), pph_main.generate_phrase(v_term, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
                            }
                            html_utilities.html_terpri((SubLObject)fact_sheets.UNPROVIDED);
                            SubLObject more_display_time = (SubLObject)fact_sheets.NIL;
                            SubLObject error_message = (SubLObject)fact_sheets.NIL;
                            final SubLObject time_var = Time.get_internal_real_time();
                            display_fact_sheet(title, image_url, paragraph_texts, footnotes, v_properties);
                            more_display_time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
                            if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                                try {
                                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                    final SubLObject _prev_bind_0_$42 = Errors.$error_handler$.currentBinding(thread);
                                    try {
                                        Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                                        try {
                                            print_high.princ(fact_sheet_optional_section_start_comment((SubLObject)fact_sheets.$kw202$STATS, (SubLObject)fact_sheets.UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
                                            print_fact_sheet_stats(stats, Numbers.add(display_time, more_display_time), (SubLObject)fact_sheets.UNPROVIDED);
                                            print_high.princ(fact_sheet_optional_section_end_comment((SubLObject)fact_sheets.$kw202$STATS), html_macros.$html_stream$.getDynamicValue(thread));
                                        }
                                        catch (Throwable catch_var) {
                                            Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                                        }
                                    }
                                    finally {
                                        Errors.$error_handler$.rebind(_prev_bind_0_$42, thread);
                                    }
                                }
                                catch (Throwable ccatch_env_var) {
                                    error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                }
                                finally {
                                    thread.throwStack.pop();
                                }
                            }
                            else {
                                print_high.princ(fact_sheet_optional_section_start_comment((SubLObject)fact_sheets.$kw202$STATS, (SubLObject)fact_sheets.UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
                                print_fact_sheet_stats(stats, Numbers.add(display_time, more_display_time), (SubLObject)fact_sheets.UNPROVIDED);
                                print_high.princ(fact_sheet_optional_section_end_comment((SubLObject)fact_sheets.$kw202$STATS), html_macros.$html_stream$.getDynamicValue(thread));
                            }
                            if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                                try {
                                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                    final SubLObject _prev_bind_0_$43 = Errors.$error_handler$.currentBinding(thread);
                                    try {
                                        Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                                        try {
                                            print_high.princ(fact_sheet_optional_section_start_comment((SubLObject)fact_sheets.$kw203$COPYRIGHT, (SubLObject)fact_sheets.UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
                                            html_utilities.html_copyright_notice();
                                            print_high.princ(fact_sheet_optional_section_end_comment((SubLObject)fact_sheets.$kw203$COPYRIGHT), html_macros.$html_stream$.getDynamicValue(thread));
                                        }
                                        catch (Throwable catch_var) {
                                            Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                                        }
                                    }
                                    finally {
                                        Errors.$error_handler$.rebind(_prev_bind_0_$43, thread);
                                    }
                                }
                                catch (Throwable ccatch_env_var) {
                                    error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                }
                                finally {
                                    thread.throwStack.pop();
                                }
                            }
                            else {
                                print_high.princ(fact_sheet_optional_section_start_comment((SubLObject)fact_sheets.$kw203$COPYRIGHT, (SubLObject)fact_sheets.UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
                                html_utilities.html_copyright_notice();
                                print_high.princ(fact_sheet_optional_section_end_comment((SubLObject)fact_sheets.$kw203$COPYRIGHT), html_macros.$html_stream$.getDynamicValue(thread));
                            }
                            if (fact_sheets.NIL != show_followup_widgetP) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str204$_script_src___A__type__text_javas, fact_sheets.$fact_sheet_followup_loader_root_relative_path$.getDynamicValue(thread));
                                html_utilities.html_terpri((SubLObject)fact_sheets.UNPROVIDED);
                            }
                            if (fact_sheets.NIL != error_message) {
                                final SubLObject stream_$44 = fact_sheet_logs.fact_sheet_log_stream();
                                if ((fact_sheets.T == stream_$44 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$44.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$44))) {
                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$44);
                                    PrintLow.format(stream_$44, (SubLObject)fact_sheets.$str206$Unable_to_print_fact_sheet_statis, v_term);
                                    streams_high.force_output(stream_$44);
                                }
                            }
                            if (fact_sheets.NIL != show_opencyc_uriP || fact_sheets.NIL != show_info_link_url) {
                                emit_fact_sheet_opencyc_uri(v_term, show_opencyc_uriP, show_info_link_url);
                            }
                            html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$40, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    }
                    finally {
                        html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$39, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                }
                finally {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$38, thread);
                }
                html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
            }
            finally {
                html_macros.$html_stream$.rebind(_prev_bind_0, thread);
            }
            fact_sheet_html = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        return possibly_remove_fact_sheet_sections(fact_sheet_html_replace_placeholders(fact_sheet_html, domain_mt), v_properties, v_term);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 51238L)
    public static SubLObject emit_fact_sheet_opencyc_uri(final SubLObject v_term, final SubLObject show_uri, final SubLObject info_link_url) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject uri = (SubLObject)fact_sheets.NIL;
        final SubLObject term_phrase = pph_main.generate_phrase(v_term, (SubLObject)fact_sheets.$list207, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject title = Sequences.cconcatenate((SubLObject)fact_sheets.$str208$A_Semantic_Web_URI_is_a_stable_na, new SubLObject[] { format_nil.format_nil_a_no_copy(term_phrase), fact_sheets.$str209$__and_you_should_use_it_in_web_pa });
        final SubLObject date = (SubLObject)((fact_sheets.NIL != bookkeeping_store.creation_date_cycl(v_term)) ? pph_main.generate_phrase(bookkeeping_store.creation_date_cycl(v_term), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) : fact_sheets.NIL);
        SubLObject _prev_bind_0 = owlification.$owl_use_pretty_stringsP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = owlification.$owl_use_external_ids_for_namesP$.currentBinding(thread);
        final SubLObject _prev_bind_3 = owl_uris_and_prefixes.$owl_export_version_date$.currentBinding(thread);
        final SubLObject _prev_bind_4 = owlification.$owl_use_entity_referencesP$.currentBinding(thread);
        final SubLObject _prev_bind_5 = owl_uris_and_prefixes.$owl_export_limited_to_opencyc_contentP$.currentBinding(thread);
        final SubLObject _prev_bind_6 = owl_uris_and_prefixes.$owl_export_include_sameas_links_to_cyc_urisP$.currentBinding(thread);
        final SubLObject _prev_bind_7 = owlification.$owl_export_from_opencyc_kbP$.currentBinding(thread);
        try {
            owlification.$owl_use_pretty_stringsP$.bind((SubLObject)fact_sheets.T, thread);
            owlification.$owl_use_external_ids_for_namesP$.bind((SubLObject)fact_sheets.T, thread);
            owl_uris_and_prefixes.$owl_export_version_date$.bind((SubLObject)fact_sheets.NIL, thread);
            owlification.$owl_use_entity_referencesP$.bind((SubLObject)fact_sheets.NIL, thread);
            owl_uris_and_prefixes.$owl_export_limited_to_opencyc_contentP$.bind((SubLObject)fact_sheets.T, thread);
            owl_uris_and_prefixes.$owl_export_include_sameas_links_to_cyc_urisP$.bind((SubLObject)fact_sheets.T, thread);
            owlification.$owl_export_from_opencyc_kbP$.bind((SubLObject)fact_sheets.T, thread);
            uri = owl_cycl_to_xml.owl_opencyc_uri_for_fort(v_term, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        }
        finally {
            owlification.$owl_export_from_opencyc_kbP$.rebind(_prev_bind_7, thread);
            owl_uris_and_prefixes.$owl_export_include_sameas_links_to_cyc_urisP$.rebind(_prev_bind_6, thread);
            owl_uris_and_prefixes.$owl_export_limited_to_opencyc_contentP$.rebind(_prev_bind_5, thread);
            owlification.$owl_use_entity_referencesP$.rebind(_prev_bind_4, thread);
            owl_uris_and_prefixes.$owl_export_version_date$.rebind(_prev_bind_3, thread);
            owlification.$owl_use_external_ids_for_namesP$.rebind(_prev_bind_2, thread);
            owlification.$owl_use_pretty_stringsP$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        if (fact_sheets.NIL != fact_sheets.$fact_sheet_category_title$.getGlobalValue()) {
            html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            html_utilities.html_markup(fact_sheets.$fact_sheet_category_title$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
            html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject _prev_bind_0_$45 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str210$Technical_Details);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$45, thread);
            }
            html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
            if (fact_sheets.NIL != info_link_url) {
                html_utilities.html_princ((SubLObject)fact_sheets.$str211$This_page_was_automatically_creat);
                html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup(info_link_url);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$46 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                    html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$47 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_princ((SubLObject)fact_sheets.$str212$automated_reasoning_and_natural_l);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$47, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$46, thread);
                }
                html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                html_utilities.html_princ((SubLObject)fact_sheets.$str213$__);
            }
            if (fact_sheets.NIL != date) {
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str214$Cyc_first_learned_about__A_on__A_, term_phrase, date);
            }
            if (fact_sheets.NIL != show_uri) {
                html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$48 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str215$The_);
                    html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)fact_sheets.$str216$http___sw_opencyc_org_docs_swuri_);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    if (fact_sheets.NIL != title) {
                        html_utilities.html_markup(html_macros.$html_anchor_title$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(title);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$49 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str217$Semantic_Web_URI);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$49, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str218$_for__A_is__, term_phrase);
                    html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(uri);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$50 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_princ(uri);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$50, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$48, thread);
                }
                html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
            }
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 52711L)
    public static SubLObject get_fact_sheet_for_term_id_in_html(final SubLObject term_id, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_properties) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (v_properties == fact_sheets.UNPROVIDED) {
            v_properties = (SubLObject)fact_sheets.NIL;
        }
        final SubLObject v_term = fact_sheet_term_from_id(term_id, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject fact_sheet_domain_mt = (fact_sheets.NIL != hlmt.possibly_hlmt_p(domain_mt)) ? hlmt.hlmt_monad_mt(domain_mt) : fact_sheet_default_domain_mt_for_term(v_term);
        final SubLObject precached_fact_sheet = precached_fact_sheet_for_term_id_in_html(term_id, verbosity, fact_sheet_domain_mt, language_mt, v_properties, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL != precached_fact_sheet) {
            return list_utilities.add_to_end(v_term, precached_fact_sheet);
        }
        final SubLObject result_list = get_fact_sheet_for_term_in_html(v_term, verbosity, fact_sheet_domain_mt, language_mt, v_properties);
        return list_utilities.add_to_end(v_term, result_list);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 53807L)
    public static SubLObject clear_all_fact_sheet_caches() {
        clear_fact_sheet_sentence_group_summary();
        clear_fact_sheet_sentences_for_term_internal();
        clear_fact_sheet_image_url_root();
        clear_get_mini_fact_sheet_for_term_cached();
        clear_fact_sheet_sentence_trivially_impliesP();
        clear_fact_sheet_transitivity_check();
        clear_fact_sheet_label_for_category();
        lexicon_utilities.clear_cached_lexifications_for_term();
        return (SubLObject)fact_sheets.$kw221$CLEARED;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 55245L)
    public static SubLObject fact_sheet_request_denots(SubLObject string) {
        string = string_utilities.trim_whitespace(string);
        string = string_utilities.strip_punctuation(string);
        string = string_utilities.trim_whitespace(string);
        final SubLObject mt = fact_sheet_anytime_mt((SubLObject)fact_sheets.$list232);
        SubLObject stripped_string = (SubLObject)fact_sheets.NIL;
        SubLObject denots;
        SubLObject rest;
        SubLObject pattern;
        SubLObject current;
        SubLObject datum;
        SubLObject pattern_start;
        SubLObject pattern_end;
        for (denots = (SubLObject)fact_sheets.NIL, rest = (SubLObject)fact_sheets.NIL, rest = fact_sheets.$fact_sheet_request_patterns$.getGlobalValue(); fact_sheets.NIL == denots && fact_sheets.NIL != rest; rest = rest.rest()) {
            pattern = rest.first();
            stripped_string = string;
            datum = (current = pattern);
            pattern_start = (SubLObject)fact_sheets.NIL;
            pattern_end = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list233);
            pattern_start = current.first();
            current = (pattern_end = current.rest());
            if (fact_sheets.NIL != string_utilities.starts_with_by_test(string, pattern_start, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP)) && fact_sheets.NIL != string_utilities.ends_with(string, pattern_end, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP))) {
                stripped_string = string_utilities.strip_first_n(stripped_string, Sequences.length(pattern_start));
                stripped_string = string_utilities.strip_final_n(stripped_string, Sequences.length(pattern_end));
                stripped_string = string_utilities.trim_whitespace(stripped_string);
                denots = lexicon_accessors.denots_of_string(stripped_string, (SubLObject)fact_sheets.$list234, (SubLObject)fact_sheets.$kw235$DENOT, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.NIL, mt, (SubLObject)fact_sheets.$kw236$NEVER, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            }
        }
        return (SubLObject)ConsesLow.cons(denots, stripped_string);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 56609L)
    public static SubLObject get_possible_fact_sheet_terms_mentioned_in_string(final SubLObject string, final SubLObject domain_mt, SubLObject filter_fn) {
        if (filter_fn == fact_sheets.UNPROVIDED) {
            filter_fn = Symbols.symbol_function((SubLObject)fact_sheets.$sym238$TERM_OK_FOR_CAE_QUERY_SEARCH_TERM_BOX_P);
        }
        SubLObject current;
        final SubLObject datum = current = fact_sheet_request_denots(string);
        SubLObject stripped_string_denots = (SubLObject)fact_sheets.NIL;
        SubLObject stripped_string = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list239);
        stripped_string_denots = current.first();
        current = (stripped_string = current.rest());
        SubLObject substring_renderings_alist = (SubLObject)fact_sheets.NIL;
        final SubLObject single_termP = list_utilities.non_empty_list_p(stripped_string_denots);
        SubLObject cdolist_list_var;
        final SubLObject word_by_word_results = cdolist_list_var = (SubLObject)((fact_sheets.NIL != single_termP) ? ConsesLow.list((SubLObject)ConsesLow.list(stripped_string, stripped_string_denots)) : get_word_denots_for_fact_sheets(string));
        SubLObject phrase_result = (SubLObject)fact_sheets.NIL;
        phrase_result = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            SubLObject current_$52;
            final SubLObject datum_$51 = current_$52 = phrase_result;
            SubLObject phrase_string = (SubLObject)fact_sheets.NIL;
            SubLObject denots = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current_$52, datum_$51, (SubLObject)fact_sheets.$list240);
            phrase_string = current_$52.first();
            current_$52 = current_$52.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current_$52, datum_$51, (SubLObject)fact_sheets.$list240);
            denots = current_$52.first();
            current_$52 = current_$52.rest();
            if (fact_sheets.NIL == current_$52) {
                final SubLObject terms = list_utilities.delete_if_not(filter_fn, denots, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject renderings = api_widgets.convert_term_list_to_renderings_for_java(terms, domain_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                if (fact_sheets.NIL != list_utilities.non_empty_list_p(renderings)) {
                    substring_renderings_alist = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.cons(phrase_string, renderings), substring_renderings_alist);
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum_$51, (SubLObject)fact_sheets.$list240);
            }
            cdolist_list_var = cdolist_list_var.rest();
            phrase_result = cdolist_list_var.first();
        }
        return (SubLObject)ConsesLow.cons(substring_renderings_alist, misc_utilities.boolean_to_keyword(single_termP));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 57655L)
    public static SubLObject get_word_denots_for_fact_sheets(final SubLObject string) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject lexicon = term_lexicon.new_term_lexicon();
        methods.funcall_instance_method_with_1_args(lexicon, (SubLObject)fact_sheets.$sym241$ADD_LEARNER, (SubLObject)fact_sheets.$sym242$SCALAR_INTERVAL_LEARN);
        final SubLObject sentence_iterator = concept_tagger.tag_concepts(document.new_document(string, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$sym243$RKF_STANDARD_STRING_WORDIFY), (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$kw244$LEXICON, lexicon, (SubLObject)fact_sheets.$kw245$OUTPUT_SPEC, nl_api_datastructures.new_nl_interpretation_spec((SubLObject)fact_sheets.$list246)));
        SubLObject result_word_cycls_pairs = (SubLObject)fact_sheets.NIL;
        SubLObject valid;
        for (SubLObject done_var = (SubLObject)fact_sheets.NIL; fact_sheets.NIL == done_var; done_var = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == valid)) {
            thread.resetMultipleValues();
            final SubLObject sentence_result = iteration.iteration_next(sentence_iterator);
            valid = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (fact_sheets.NIL != valid) {
                SubLObject cdolist_list_var = document.sentence_yield_exhaustive(sentence_result);
                SubLObject word = (SubLObject)fact_sheets.NIL;
                word = cdolist_list_var.first();
                while (fact_sheets.NIL != cdolist_list_var) {
                    final SubLObject cycls = document.word_cycls(word);
                    final SubLObject word_string = document.word_string(word);
                    result_word_cycls_pairs = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(word_string, cycls), result_word_cycls_pairs);
                    cdolist_list_var = cdolist_list_var.rest();
                    word = cdolist_list_var.first();
                }
            }
        }
        return result_word_cycls_pairs;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 58365L)
    public static SubLObject term_ok_for_cae_query_search_term_box_p(final SubLObject v_term) {
        return (SubLObject)SubLObjectFactory.makeBoolean(v_term.isNumber() || fact_sheets.NIL != term_ok_for_fact_sheet_p(v_term, (SubLObject)fact_sheets.UNPROVIDED) || fact_sheets.NIL != scalar_interval_p(v_term, (SubLObject)fact_sheets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 58526L)
    public static SubLObject clear_scalar_interval_p() {
        final SubLObject cs = fact_sheets.$scalar_interval_p_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 58526L)
    public static SubLObject remove_scalar_interval_p(final SubLObject v_term, SubLObject mt) {
        if (mt == fact_sheets.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$scalar_interval_p_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, mt), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 58526L)
    public static SubLObject scalar_interval_p_internal(final SubLObject v_term, final SubLObject mt) {
        return isa.isaP(v_term, fact_sheets.$const248$ScalarInterval, mt, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 58526L)
    public static SubLObject scalar_interval_p(final SubLObject v_term, SubLObject mt) {
        if (mt == fact_sheets.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        SubLObject caching_state = fact_sheets.$scalar_interval_p_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym247$SCALAR_INTERVAL_P, (SubLObject)fact_sheets.$sym249$_SCALAR_INTERVAL_P_CACHING_STATE_, (SubLObject)fact_sheets.$int250$4096, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(scalar_interval_p_internal(v_term, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 58664L)
    public static SubLObject term_ok_for_fact_sheet_p(final SubLObject v_term, SubLObject miniP) {
        if (miniP == fact_sheets.UNPROVIDED) {
            miniP = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        return (SubLObject)SubLObjectFactory.makeBoolean(v_term.equal(fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread)) || (fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term) && fact_sheets.NIL != cycl_utilities.expression_find_if((SubLObject)fact_sheets.$sym252$FORT_P, v_term, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL == fort_types_interface.relation_p(v_term) && fact_sheets.NIL != fact_sheet_term_id(v_term, (SubLObject)fact_sheets.NIL) && (fact_sheets.NIL == forts.fort_p(v_term) || (fact_sheets.NIL != thcl.thcl_fortP(v_term, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != lexification_utilities.lexifiedP(v_term, (SubLObject)fact_sheets.NIL))) && (fact_sheets.NIL == miniP || fact_sheets.NIL != isa.isa_anyP(v_term, mini_fact_sheet_term_types(), fact_sheets.$const253$InferencePSC, (SubLObject)fact_sheets.UNPROVIDED))));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 59290L)
    public static SubLObject mini_fact_sheet_term_types() {
        return fact_sheets.$mini_fact_sheet_term_types$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 59551L)
    public static SubLObject fact_sheet_data_path() {
        return fact_sheets.$fact_sheet_data_path$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 59626L)
    public static SubLObject set_fact_sheet_data_path(final SubLObject directory_list) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject fact_sheet_directory = fact_sheet_directory_from_list(directory_list);
        if (fact_sheets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && fact_sheets.NIL == Filesys.directory_p(fact_sheet_directory)) {
            Errors.error((SubLObject)fact_sheets.$str257$_S_does_not_specify_an_existing_d, fact_sheet_directory);
        }
        fact_sheets.$fact_sheet_data_path$.setGlobalValue(directory_list);
        return fact_sheets.$fact_sheet_data_path$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 60256L)
    public static SubLObject fact_sheet_term_id(final SubLObject v_term, SubLObject ignore_me) {
        if (ignore_me == fact_sheets.UNPROVIDED) {
            ignore_me = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        return fact_sheet_term_id_low(v_term, fact_sheets.$use_fact_sheet_legacy_idsP$.getDynamicValue(thread));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 60407L)
    public static SubLObject fact_sheet_term_legacy_id(final SubLObject v_term) {
        return fact_sheet_term_id_low(v_term, (SubLObject)fact_sheets.T);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 60498L)
    public static SubLObject clear_fact_sheet_term_id_low() {
        final SubLObject cs = fact_sheets.$fact_sheet_term_id_low_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 60498L)
    public static SubLObject remove_fact_sheet_term_id_low(final SubLObject v_term, SubLObject legacyP) {
        if (legacyP == fact_sheets.UNPROVIDED) {
            legacyP = (SubLObject)fact_sheets.NIL;
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_term_id_low_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, legacyP), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 60498L)
    public static SubLObject fact_sheet_term_id_low_internal(final SubLObject v_term, final SubLObject legacyP) {
        final SubLObject chleid = kb_utilities.compact_hl_external_id_string(v_term);
        SubLObject id = (SubLObject)fact_sheets.NIL;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject string_var = chleid;
            SubLObject end_var_$53;
            SubLObject end_var;
            SubLObject char_num;
            SubLObject v_char;
            for (end_var = (end_var_$53 = Sequences.length(string_var)), char_num = (SubLObject)fact_sheets.NIL, char_num = (SubLObject)fact_sheets.ZERO_INTEGER; !char_num.numGE(end_var_$53); char_num = number_utilities.f_1X(char_num)) {
                v_char = Strings.sublisp_char(string_var, char_num);
                if (fact_sheets.NIL != Characters.upper_case_p(v_char)) {
                    print_high.princ((fact_sheets.NIL != legacyP) ? fact_sheets.$fact_sheet_id_legacy_upper_case_escape_char$.getGlobalValue() : fact_sheets.$fact_sheet_id_upper_case_escape_char$.getGlobalValue(), stream);
                    print_high.princ(Characters.char_downcase(v_char), stream);
                }
                else {
                    print_high.princ(v_char, stream);
                }
            }
            id = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)fact_sheets.T);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return id;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 60498L)
    public static SubLObject fact_sheet_term_id_low(final SubLObject v_term, SubLObject legacyP) {
        if (legacyP == fact_sheets.UNPROVIDED) {
            legacyP = (SubLObject)fact_sheets.NIL;
        }
        SubLObject caching_state = fact_sheets.$fact_sheet_term_id_low_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym258$FACT_SHEET_TERM_ID_LOW, (SubLObject)fact_sheets.$sym259$_FACT_SHEET_TERM_ID_LOW_CACHING_STATE_, (SubLObject)fact_sheets.$int260$1024, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, legacyP);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && legacyP.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_term_id_low_internal(v_term, legacyP)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, legacyP));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 61004L)
    public static SubLObject possible_fact_sheet_term_id_p(final SubLObject v_object) {
        if (v_object.isString() && fact_sheets.NIL != list_utilities.lengthG(v_object, (SubLObject)fact_sheets.THREE_INTEGER, (SubLObject)fact_sheets.UNPROVIDED)) {
            SubLObject end_var_$54;
            SubLObject end_var;
            SubLObject char_num;
            SubLObject v_char;
            for (end_var = (end_var_$54 = Sequences.length(v_object)), char_num = (SubLObject)fact_sheets.NIL, char_num = (SubLObject)fact_sheets.ZERO_INTEGER; !char_num.numGE(end_var_$54); char_num = number_utilities.f_1X(char_num)) {
                v_char = Strings.sublisp_char(v_object, char_num);
                if (fact_sheets.NIL == string_utilities.f_64_bit_char_p(v_char) && !Characters.CHAR_equal.eql(v_char) && !fact_sheets.$fact_sheet_id_legacy_upper_case_escape_char$.getGlobalValue().eql(v_char) && !fact_sheets.$fact_sheet_id_upper_case_escape_char$.getGlobalValue().eql(v_char)) {
                    return (SubLObject)fact_sheets.NIL;
                }
            }
            return (SubLObject)fact_sheets.T;
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 61390L)
    public static SubLObject fact_sheet_term_idP(final SubLObject v_object) {
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != possible_fact_sheet_term_id_p(v_object) && v_object.equal(fact_sheet_term_id(fact_sheet_term_from_id(v_object, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 61566L)
    public static SubLObject fact_sheet_term_from_id(final SubLObject term_id, SubLObject not_found_value) {
        if (not_found_value == fact_sheets.UNPROVIDED) {
            not_found_value = (SubLObject)fact_sheets.NIL;
        }
        assert fact_sheets.NIL != possible_fact_sheet_term_id_p(term_id) : term_id;
        SubLObject upcase_nextP = (SubLObject)fact_sheets.NIL;
        SubLObject chleid = (SubLObject)fact_sheets.NIL;
        SubLObject v_term = (SubLObject)fact_sheets.NIL;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            SubLObject end_var_$55;
            SubLObject end_var;
            SubLObject char_num;
            SubLObject v_char;
            for (end_var = (end_var_$55 = Sequences.length(term_id)), char_num = (SubLObject)fact_sheets.NIL, char_num = (SubLObject)fact_sheets.ZERO_INTEGER; !char_num.numGE(end_var_$55); char_num = number_utilities.f_1X(char_num)) {
                v_char = Strings.sublisp_char(term_id, char_num);
                if (fact_sheets.$fact_sheet_id_upper_case_escape_char$.getGlobalValue().eql(v_char) || fact_sheets.$fact_sheet_id_legacy_upper_case_escape_char$.getGlobalValue().eql(v_char)) {
                    upcase_nextP = (SubLObject)fact_sheets.T;
                }
                else if (fact_sheets.NIL != upcase_nextP) {
                    print_high.princ(Characters.char_upcase(v_char), stream);
                    upcase_nextP = (SubLObject)fact_sheets.NIL;
                }
                else {
                    print_high.princ(v_char, stream);
                    upcase_nextP = (SubLObject)fact_sheets.NIL;
                }
            }
            chleid = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)fact_sheets.T);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        v_term = kb_utilities.maybe_find_object_by_compact_hl_external_id_string(chleid);
        if (fact_sheets.NIL == v_term || (!term_id.equal(fact_sheet_term_id(v_term, (SubLObject)fact_sheets.UNPROVIDED)) && !term_id.equal(fact_sheet_term_legacy_id(v_term)))) {
            warn_unknown_fact_sheet_term_id(term_id);
            return not_found_value;
        }
        return v_term;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 62426L)
    public static SubLObject clear_warn_unknown_fact_sheet_term_id() {
        final SubLObject cs = fact_sheets.$warn_unknown_fact_sheet_term_id_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 62426L)
    public static SubLObject remove_warn_unknown_fact_sheet_term_id(final SubLObject term_id) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$warn_unknown_fact_sheet_term_id_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(term_id), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 62426L)
    public static SubLObject warn_unknown_fact_sheet_term_id_internal(final SubLObject term_id) {
        final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
        if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
            PrintLow.format(stream, (SubLObject)fact_sheets.$str264$Couldn_t_identify_term_from_fact_, term_id);
            streams_high.force_output(stream);
        }
        return term_id;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 62426L)
    public static SubLObject warn_unknown_fact_sheet_term_id(final SubLObject term_id) {
        SubLObject caching_state = fact_sheets.$warn_unknown_fact_sheet_term_id_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym263$WARN_UNKNOWN_FACT_SHEET_TERM_ID, (SubLObject)fact_sheets.$sym265$_WARN_UNKNOWN_FACT_SHEET_TERM_ID_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.$int260$1024);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, term_id, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(warn_unknown_fact_sheet_term_id_internal(term_id)));
            memoization_state.caching_state_put(caching_state, term_id, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 62616L)
    public static SubLObject fact_sheet_term_from_span_id(final SubLObject span_id, SubLObject not_found_value) {
        if (not_found_value == fact_sheets.UNPROVIDED) {
            not_found_value = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject v_term = not_found_value;
        SubLObject error = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        final SubLObject found_value = kb_utilities.find_object_by_hl_external_id_string(span_id);
                        if (fact_sheets.NIL != found_value) {
                            v_term = found_value;
                        }
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                error = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
        }
        else {
            final SubLObject found_value2 = kb_utilities.find_object_by_hl_external_id_string(span_id);
            if (fact_sheets.NIL != found_value2) {
                v_term = found_value2;
            }
        }
        if (fact_sheets.NIL != error) {
            Errors.warn((SubLObject)fact_sheets.$str267$Error_getting_fact_sheet_term_fro, span_id, error);
        }
        if (!v_term.equal(not_found_value) && fact_sheets.NIL != cycl_utilities.expression_find_if((SubLObject)fact_sheets.$sym166$INVALID_FORT_, v_term, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            v_term = not_found_value;
        }
        if (fact_sheets.NIL != assertion_handles.assertion_p(v_term)) {
            v_term = uncanonicalizer.assertion_el_formula(v_term);
        }
        return v_term;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 63298L)
    public static SubLObject paraphrase_fact_sheet_sentences(final SubLObject v_term, final SubLObject grouped_sentences, final SubLObject verbosity, final SubLObject language_mt, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject categorized_paragraph_data = (SubLObject)fact_sheets.NIL;
        SubLObject sentence_count = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject pph_time = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject v_sources = (SubLObject)fact_sheets.NIL;
        SubLObject error_message = (SubLObject)fact_sheets.NIL;
        SubLObject footnotes = (SubLObject)fact_sheets.NIL;
        final SubLObject time_var = Time.get_internal_real_time();
        SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
        try {
            pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)fact_sheets.NIL, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$56 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
            try {
                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                final SubLObject reuseP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    thread.resetMultipleValues();
                    final SubLObject _prev_bind_0_$57 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                    try {
                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                        final SubLObject new_or_reused = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$58 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                            final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                            final SubLObject _prev_bind_0_$59 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                try {
                                    final SubLObject _prev_bind_0_$60 = Errors.$continue_cerrorP$.currentBinding(thread);
                                    final SubLObject _prev_bind_2 = pph_error.$pph_error_handling_onP$.currentBinding(thread);
                                    try {
                                        Errors.$continue_cerrorP$.bind((SubLObject)fact_sheets.NIL, thread);
                                        pph_error.$pph_error_handling_onP$.bind((SubLObject)fact_sheets.T, thread);
                                        if (fact_sheets.NIL != pph_error.pph_break_on_errorP()) {
                                            SubLObject cdolist_list_var = sort_fact_sheet_texts_by_category(conses_high.copy_list(grouped_sentences));
                                            SubLObject cons = (SubLObject)fact_sheets.NIL;
                                            cons = cdolist_list_var.first();
                                            while (fact_sheets.NIL != cdolist_list_var) {
                                                SubLObject current;
                                                final SubLObject datum = current = cons;
                                                SubLObject pred = (SubLObject)fact_sheets.NIL;
                                                SubLObject sentence_groups = (SubLObject)fact_sheets.NIL;
                                                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list268);
                                                pred = current.first();
                                                current = (sentence_groups = current.rest());
                                                SubLObject paragraph_data = (SubLObject)fact_sheets.NIL;
                                                final SubLObject pph_timeout = fact_sheet_paraphrase_soft_timeout_time_left();
                                                SubLObject timed_outP = (SubLObject)fact_sheets.NIL;
                                                if (fact_sheets.NIL == pph_timeout || pph_timeout.isPositive()) {
                                                    if (fact_sheets.NIL != pph_timeout) {
                                                        final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                                                        if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                                                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                                                            PrintLow.format(stream, (SubLObject)fact_sheets.$str269$Using_PPH_timeout_of__S_seconds_, pph_timeout);
                                                            streams_high.force_output(stream);
                                                        }
                                                    }
                                                    final SubLObject _prev_bind_0_$61 = pph_macros.$pph_timeout_time_check_count$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$62 = pph_macros.$pph_timeout_time$.currentBinding(thread);
                                                    final SubLObject _prev_bind_3 = pph_macros.$pph_timeout_reachedP$.currentBinding(thread);
                                                    try {
                                                        pph_macros.$pph_timeout_time_check_count$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                                        pph_macros.$pph_timeout_time$.bind(pph_macros.pph_compute_timeout_time(pph_timeout), thread);
                                                        pph_macros.$pph_timeout_reachedP$.bind(pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread), thread);
                                                        pph_macros.$pph_timeout_reachedP$.setDynamicValue(pph_macros.pph_timeout_time_reachedP(), thread);
                                                        if (fact_sheets.NIL == pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread) && fact_sheets.NIL == timed_outP) {
                                                            SubLObject csome_list_var = sentence_groups;
                                                            SubLObject sentence_group = (SubLObject)fact_sheets.NIL;
                                                            sentence_group = csome_list_var.first();
                                                            while (fact_sheets.NIL == timed_outP && fact_sheets.NIL != csome_list_var) {
                                                                sentence_count = Numbers.add(sentence_count, Sequences.length(sentence_group));
                                                                thread.resetMultipleValues();
                                                                final SubLObject summary = fact_sheet_sentence_group_summary(v_term, sentence_group, verbosity, language_mt, domain_mt, v_sources, (SubLObject)fact_sheets.UNPROVIDED);
                                                                final SubLObject group_new_sources = thread.secondMultipleValue();
                                                                final SubLObject paraphrased_sentences_to_output_lists = thread.thirdMultipleValue();
                                                                thread.resetMultipleValues();
                                                                if (fact_sheets.NIL != string_utilities.non_empty_string_p(summary)) {
                                                                    paragraph_data = (SubLObject)ConsesLow.cons(paraphrased_sentences_to_output_lists, paragraph_data);
                                                                    v_sources = ConsesLow.append(v_sources, group_new_sources);
                                                                }
                                                                if (fact_sheets.NIL != fact_sheet_paraphrase_soft_timeout_time_reachedP()) {
                                                                    timed_outP = (SubLObject)fact_sheets.T;
                                                                }
                                                                csome_list_var = csome_list_var.rest();
                                                                sentence_group = csome_list_var.first();
                                                            }
                                                        }
                                                        timed_outP = pph_macros.pph_timeout_time_reachedP();
                                                    }
                                                    finally {
                                                        pph_macros.$pph_timeout_reachedP$.rebind(_prev_bind_3, thread);
                                                        pph_macros.$pph_timeout_time$.rebind(_prev_bind_1_$62, thread);
                                                        pph_macros.$pph_timeout_time_check_count$.rebind(_prev_bind_0_$61, thread);
                                                    }
                                                }
                                                if (fact_sheets.NIL != list_utilities.non_empty_list_p(paragraph_data)) {
                                                    categorized_paragraph_data = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.cons(pred, Sequences.nreverse(paragraph_data)), categorized_paragraph_data);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                cons = cdolist_list_var.first();
                                            }
                                        }
                                        else {
                                            try {
                                                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                                final SubLObject _prev_bind_0_$62 = Errors.$error_handler$.currentBinding(thread);
                                                try {
                                                    Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                                                    try {
                                                        SubLObject cdolist_list_var2 = sort_fact_sheet_texts_by_category(conses_high.copy_list(grouped_sentences));
                                                        SubLObject cons2 = (SubLObject)fact_sheets.NIL;
                                                        cons2 = cdolist_list_var2.first();
                                                        while (fact_sheets.NIL != cdolist_list_var2) {
                                                            SubLObject current2;
                                                            final SubLObject datum2 = current2 = cons2;
                                                            SubLObject pred2 = (SubLObject)fact_sheets.NIL;
                                                            SubLObject sentence_groups2 = (SubLObject)fact_sheets.NIL;
                                                            cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)fact_sheets.$list268);
                                                            pred2 = current2.first();
                                                            current2 = (sentence_groups2 = current2.rest());
                                                            SubLObject paragraph_data2 = (SubLObject)fact_sheets.NIL;
                                                            final SubLObject pph_timeout2 = fact_sheet_paraphrase_soft_timeout_time_left();
                                                            SubLObject timed_outP2 = (SubLObject)fact_sheets.NIL;
                                                            if (fact_sheets.NIL == pph_timeout2 || pph_timeout2.isPositive()) {
                                                                if (fact_sheets.NIL != pph_timeout2) {
                                                                    final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
                                                                    if ((fact_sheets.T == stream2 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream2))) {
                                                                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream2);
                                                                        PrintLow.format(stream2, (SubLObject)fact_sheets.$str269$Using_PPH_timeout_of__S_seconds_, pph_timeout2);
                                                                        streams_high.force_output(stream2);
                                                                    }
                                                                }
                                                                final SubLObject _prev_bind_0_$63 = pph_macros.$pph_timeout_time_check_count$.currentBinding(thread);
                                                                final SubLObject _prev_bind_1_$63 = pph_macros.$pph_timeout_time$.currentBinding(thread);
                                                                final SubLObject _prev_bind_4 = pph_macros.$pph_timeout_reachedP$.currentBinding(thread);
                                                                try {
                                                                    pph_macros.$pph_timeout_time_check_count$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                                                    pph_macros.$pph_timeout_time$.bind(pph_macros.pph_compute_timeout_time(pph_timeout2), thread);
                                                                    pph_macros.$pph_timeout_reachedP$.bind(pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread), thread);
                                                                    pph_macros.$pph_timeout_reachedP$.setDynamicValue(pph_macros.pph_timeout_time_reachedP(), thread);
                                                                    if (fact_sheets.NIL == pph_macros.$pph_timeout_reachedP$.getDynamicValue(thread) && fact_sheets.NIL == timed_outP2) {
                                                                        SubLObject csome_list_var2 = sentence_groups2;
                                                                        SubLObject sentence_group2 = (SubLObject)fact_sheets.NIL;
                                                                        sentence_group2 = csome_list_var2.first();
                                                                        while (fact_sheets.NIL == timed_outP2 && fact_sheets.NIL != csome_list_var2) {
                                                                            sentence_count = Numbers.add(sentence_count, Sequences.length(sentence_group2));
                                                                            thread.resetMultipleValues();
                                                                            final SubLObject summary2 = fact_sheet_sentence_group_summary(v_term, sentence_group2, verbosity, language_mt, domain_mt, v_sources, (SubLObject)fact_sheets.UNPROVIDED);
                                                                            final SubLObject group_new_sources2 = thread.secondMultipleValue();
                                                                            final SubLObject paraphrased_sentences_to_output_lists2 = thread.thirdMultipleValue();
                                                                            thread.resetMultipleValues();
                                                                            if (fact_sheets.NIL != string_utilities.non_empty_string_p(summary2)) {
                                                                                paragraph_data2 = (SubLObject)ConsesLow.cons(paraphrased_sentences_to_output_lists2, paragraph_data2);
                                                                                v_sources = ConsesLow.append(v_sources, group_new_sources2);
                                                                            }
                                                                            if (fact_sheets.NIL != fact_sheet_paraphrase_soft_timeout_time_reachedP()) {
                                                                                timed_outP2 = (SubLObject)fact_sheets.T;
                                                                            }
                                                                            csome_list_var2 = csome_list_var2.rest();
                                                                            sentence_group2 = csome_list_var2.first();
                                                                        }
                                                                    }
                                                                    timed_outP2 = pph_macros.pph_timeout_time_reachedP();
                                                                }
                                                                finally {
                                                                    pph_macros.$pph_timeout_reachedP$.rebind(_prev_bind_4, thread);
                                                                    pph_macros.$pph_timeout_time$.rebind(_prev_bind_1_$63, thread);
                                                                    pph_macros.$pph_timeout_time_check_count$.rebind(_prev_bind_0_$63, thread);
                                                                }
                                                            }
                                                            if (fact_sheets.NIL != list_utilities.non_empty_list_p(paragraph_data2)) {
                                                                categorized_paragraph_data = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.cons(pred2, Sequences.nreverse(paragraph_data2)), categorized_paragraph_data);
                                                            }
                                                            cdolist_list_var2 = cdolist_list_var2.rest();
                                                            cons2 = cdolist_list_var2.first();
                                                        }
                                                    }
                                                    catch (Throwable catch_var) {
                                                        Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                                                    }
                                                }
                                                finally {
                                                    Errors.$error_handler$.rebind(_prev_bind_0_$62, thread);
                                                }
                                            }
                                            catch (Throwable ccatch_env_var) {
                                                error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                            }
                                            finally {
                                                thread.throwStack.pop();
                                            }
                                            if (error_message.isString() && fact_sheets.NIL == pph_error.suppress_pph_warningsP()) {
                                                Errors.warn(Sequences.cconcatenate(pph_error_message_truncator.truncate_pph_error_message(error_message), (SubLObject)fact_sheets.$str270$___Top_level_CycL___S), pph_vars.pph_top_level_cycl());
                                            }
                                        }
                                    }
                                    finally {
                                        pph_error.$pph_error_handling_onP$.rebind(_prev_bind_2, thread);
                                        Errors.$continue_cerrorP$.rebind(_prev_bind_0_$60, thread);
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$64 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$64, thread);
                                    }
                                }
                            }
                            finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0_$59, thread);
                            }
                        }
                        finally {
                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$58, thread);
                        }
                        if (new_or_reused == fact_sheets.$kw271$NEW && fact_sheets.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                            memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                        }
                    }
                    finally {
                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$57, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$65 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (fact_sheets.NIL == reuseP) {
                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$65, thread);
                    }
                }
            }
            finally {
                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$56, thread);
            }
        }
        finally {
            pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
        }
        if (fact_sheets.NIL != error_message) {
            final SubLObject stream3 = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream3 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream3.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream3))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream3);
                PrintLow.format(stream3, (SubLObject)fact_sheets.$str272$Error_generating_paraphrases___A, error_message);
                streams_high.force_output(stream3);
            }
        }
        categorized_paragraph_data = Sequences.nreverse(categorized_paragraph_data);
        _prev_bind_0 = fact_sheets.$within_fact_sheet_paraphraseP$.currentBinding(thread);
        final SubLObject _prev_bind_5 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
        final SubLObject _prev_bind_6 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
        final SubLObject _prev_bind_7 = pph_vars.$constant_link_function$.currentBinding(thread);
        final SubLObject _prev_bind_8 = pph_vars.$html_generation_target$.currentBinding(thread);
        final SubLObject _prev_bind_9 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
        final SubLObject _prev_bind_10 = pph_vars.$pph_speaker$.currentBinding(thread);
        final SubLObject _prev_bind_11 = pph_vars.$pph_addressee$.currentBinding(thread);
        try {
            fact_sheets.$within_fact_sheet_paraphraseP$.bind((SubLObject)fact_sheets.T, thread);
            fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
            thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
            pph_vars.$constant_link_function$.bind((SubLObject)fact_sheets.$kw135$FACT_SHEET, thread);
            pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
            pph_vars.$html_generation_term_id_function$.bind((SubLObject)fact_sheets.$sym136$FACT_SHEET_TERM_ID, thread);
            pph_vars.$pph_speaker$.bind((SubLObject)fact_sheets.$kw137$UNKNOWN, thread);
            pph_vars.$pph_addressee$.bind((SubLObject)fact_sheets.$kw137$UNKNOWN, thread);
            footnotes = fact_sheet_footnotes_for_sources(v_sources, (SubLObject)fact_sheets.UNPROVIDED);
        }
        finally {
            pph_vars.$pph_addressee$.rebind(_prev_bind_11, thread);
            pph_vars.$pph_speaker$.rebind(_prev_bind_10, thread);
            pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_9, thread);
            pph_vars.$html_generation_target$.rebind(_prev_bind_8, thread);
            pph_vars.$constant_link_function$.rebind(_prev_bind_7, thread);
            thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_6, thread);
            fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_5, thread);
            fact_sheets.$within_fact_sheet_paraphraseP$.rebind(_prev_bind_0, thread);
        }
        pph_time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
        final SubLObject stream3 = fact_sheet_logs.fact_sheet_log_stream();
        if ((fact_sheets.T == stream3 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream3.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream3))) {
            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream3);
            PrintLow.format(stream3, (SubLObject)fact_sheets.$str273$Generated__D_paragraph__P_contain, new SubLObject[] { Sequences.length(categorized_paragraph_data), sentence_count, v_term, numeric_date_utilities.readable_elapsed_time_string(pph_time, (SubLObject)fact_sheets.UNPROVIDED) });
            streams_high.force_output(stream3);
        }
        return Values.values(categorized_paragraph_data, sentence_count, pph_time, footnotes);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 65341L)
    public static SubLObject fact_sheet_force_bullets_for_categoryP(final SubLObject pred) {
        if (fact_sheets.$fact_sheet_thcl_section_category$.getGlobalValue().equal(pred)) {
            return (SubLObject)fact_sheets.T;
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 65497L)
    public static SubLObject fact_sheet_footnotes_for_sources(final SubLObject v_sources, SubLObject type) {
        if (type == fact_sheets.UNPROVIDED) {
            type = (SubLObject)fact_sheets.$kw274$SUPERSCRIPTS;
        }
        SubLObject footnotes = (SubLObject)fact_sheets.NIL;
        SubLObject list_var = (SubLObject)fact_sheets.NIL;
        SubLObject source = (SubLObject)fact_sheets.NIL;
        SubLObject zero_index = (SubLObject)fact_sheets.NIL;
        list_var = v_sources;
        source = list_var.first();
        for (zero_index = (SubLObject)fact_sheets.ZERO_INTEGER; fact_sheets.NIL != list_var; list_var = list_var.rest(), source = list_var.first(), zero_index = Numbers.add((SubLObject)fact_sheets.ONE_INTEGER, zero_index)) {
            footnotes = (SubLObject)ConsesLow.cons(fact_sheet_footnote_for_source(source, number_utilities.f_1X(zero_index), type), footnotes);
        }
        return Sequences.nreverse(footnotes);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 65782L)
    public static SubLObject fact_sheet_footnote_for_source(SubLObject source, final SubLObject index, final SubLObject type) {
        final SubLObject citation = pph_html.new_pph_source_citation(source, index, (SubLObject)fact_sheets.NIL);
        return (SubLObject)ConsesLow.list(pph_html.pph_html_citation_string(citation, type, (SubLObject)fact_sheets.UNPROVIDED), source);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 65981L)
    public static SubLObject sort_fact_sheet_texts_by_category(final SubLObject categorized_paragraph_texts) {
        return Sort.stable_sort(categorized_paragraph_texts, (SubLObject)fact_sheets.$sym275$HIGHER_PRIORITY_FACT_SHEET_CATEGORY_, Symbols.symbol_function((SubLObject)fact_sheets.$sym153$CAR));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 66394L)
    public static SubLObject higher_priority_fact_sheet_categoryP(final SubLObject cat1, final SubLObject cat2) {
        final SubLObject cat1_priority = Sequences.position(cat1, fact_sheets.$fact_sheet_category_order$.getGlobalValue(), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject cat2_priority = Sequences.position(cat2, fact_sheets.$fact_sheet_category_order$.getGlobalValue(), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL != cat1_priority && (fact_sheets.NIL == cat2_priority || cat1_priority.numL(cat2_priority))) {
            return (SubLObject)fact_sheets.T;
        }
        if (cat2.isString()) {
            return (SubLObject)fact_sheets.T;
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 66770L)
    public static SubLObject substitute_fact_sheet_labels_for_categories(final SubLObject categorized_paragraph_texts, final SubLObject language_mt, final SubLObject v_properties) {
        SubLObject cdolist_list_var = categorized_paragraph_texts;
        SubLObject text = (SubLObject)fact_sheets.NIL;
        text = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            substitute_fact_sheet_label_for_category(text, language_mt, v_properties);
            cdolist_list_var = cdolist_list_var.rest();
            text = cdolist_list_var.first();
        }
        return categorized_paragraph_texts;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 67043L)
    public static SubLObject substitute_fact_sheet_label_for_category(final SubLObject categorized_paragraph_text, final SubLObject language_mt, final SubLObject v_properties) {
        final SubLObject category = categorized_paragraph_text.first();
        ConsesLow.rplaca(categorized_paragraph_text, fact_sheet_label_for_category(category, language_mt, v_properties));
        return categorized_paragraph_text;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 67354L)
    public static SubLObject clear_fact_sheet_sentence_group_summary() {
        final SubLObject cs = fact_sheets.$fact_sheet_sentence_group_summary_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 67354L)
    public static SubLObject remove_fact_sheet_sentence_group_summary(final SubLObject v_term, final SubLObject sentence_group, final SubLObject verbosity, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject v_sources, SubLObject demerit_cutoff) {
        if (demerit_cutoff == fact_sheets.UNPROVIDED) {
            demerit_cutoff = fact_sheet_pph_demerit_cutoff();
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_sentence_group_summary_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, sentence_group, verbosity, language_mt, domain_mt, v_sources, demerit_cutoff), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 67354L)
    public static SubLObject fact_sheet_sentence_group_summary_internal(final SubLObject v_term, final SubLObject sentence_group, final SubLObject verbosity, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject v_sources, final SubLObject demerit_cutoff) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject summary = (SubLObject)fact_sheets.NIL;
        SubLObject group_new_sources = (SubLObject)fact_sheets.NIL;
        SubLObject sentences_to_olists = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = fact_sheets.$within_fact_sheet_paraphraseP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
        final SubLObject _prev_bind_3 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
        final SubLObject _prev_bind_4 = pph_vars.$constant_link_function$.currentBinding(thread);
        final SubLObject _prev_bind_5 = pph_vars.$html_generation_target$.currentBinding(thread);
        final SubLObject _prev_bind_6 = pph_vars.$html_generation_term_id_function$.currentBinding(thread);
        final SubLObject _prev_bind_7 = pph_vars.$pph_speaker$.currentBinding(thread);
        final SubLObject _prev_bind_8 = pph_vars.$pph_addressee$.currentBinding(thread);
        final SubLObject _prev_bind_9 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
        final SubLObject _prev_bind_10 = pph_vars.$pph_use_bulleted_lists_min_level$.currentBinding(thread);
        final SubLObject _prev_bind_11 = pph_vars.$pph_use_bulleted_listsP$.currentBinding(thread);
        final SubLObject _prev_bind_12 = pph_document.$pph_summary_max_sentences_for_same_pred$.currentBinding(thread);
        final SubLObject _prev_bind_13 = pph_document.$pph_track_summary_sourcesP$.currentBinding(thread);
        final SubLObject _prev_bind_14 = pph_document.$pph_summary_sources$.currentBinding(thread);
        try {
            fact_sheets.$within_fact_sheet_paraphraseP$.bind((SubLObject)fact_sheets.T, thread);
            fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
            thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
            pph_vars.$constant_link_function$.bind((SubLObject)fact_sheets.$kw135$FACT_SHEET, thread);
            pph_vars.$html_generation_target$.bind(pph_vars.$html_generation_target$.getDynamicValue(thread), thread);
            pph_vars.$html_generation_term_id_function$.bind((SubLObject)fact_sheets.$sym136$FACT_SHEET_TERM_ID, thread);
            pph_vars.$pph_speaker$.bind((SubLObject)fact_sheets.$kw137$UNKNOWN, thread);
            pph_vars.$pph_addressee$.bind((SubLObject)fact_sheets.$kw137$UNKNOWN, thread);
            pph_vars.$pph_demerit_cutoff$.bind(demerit_cutoff, thread);
            pph_vars.$pph_use_bulleted_lists_min_level$.bind((SubLObject)fact_sheets.TWO_INTEGER, thread);
            pph_vars.$pph_use_bulleted_listsP$.bind((SubLObject)fact_sheets.T, thread);
            pph_document.$pph_summary_max_sentences_for_same_pred$.bind(fact_sheet_max_sentences_per_pred(verbosity), thread);
            pph_document.$pph_track_summary_sourcesP$.bind((SubLObject)fact_sheets.T, thread);
            pph_document.$pph_summary_sources$.bind(v_sources, thread);
            SubLObject failed_sentences = (SubLObject)fact_sheets.NIL;
            thread.resetMultipleValues();
            final SubLObject summary_$68 = pph_document.pph_summarize_term(v_term, sentence_group, language_mt, domain_mt, (SubLObject)fact_sheets.$kw87$HTML, (SubLObject)fact_sheets.NIL);
            final SubLObject failed_sentences_$69 = thread.secondMultipleValue();
            final SubLObject sentences_to_olists_$70 = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            summary = summary_$68;
            failed_sentences = failed_sentences_$69;
            sentences_to_olists = sentences_to_olists_$70;
            if (fact_sheets.NIL != failed_sentences) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str278$Failed_to_paraphrase__D_sentence_, new SubLObject[] { Sequences.length(failed_sentences), v_term, failed_sentences });
                    streams_high.force_output(stream);
                }
            }
            group_new_sources = conses_high.last(pph_document.$pph_summary_sources$.getDynamicValue(thread), Numbers.subtract(Sequences.length(pph_document.$pph_summary_sources$.getDynamicValue(thread)), Sequences.length(v_sources)));
        }
        finally {
            pph_document.$pph_summary_sources$.rebind(_prev_bind_14, thread);
            pph_document.$pph_track_summary_sourcesP$.rebind(_prev_bind_13, thread);
            pph_document.$pph_summary_max_sentences_for_same_pred$.rebind(_prev_bind_12, thread);
            pph_vars.$pph_use_bulleted_listsP$.rebind(_prev_bind_11, thread);
            pph_vars.$pph_use_bulleted_lists_min_level$.rebind(_prev_bind_10, thread);
            pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_9, thread);
            pph_vars.$pph_addressee$.rebind(_prev_bind_8, thread);
            pph_vars.$pph_speaker$.rebind(_prev_bind_7, thread);
            pph_vars.$html_generation_term_id_function$.rebind(_prev_bind_6, thread);
            pph_vars.$html_generation_target$.rebind(_prev_bind_5, thread);
            pph_vars.$constant_link_function$.rebind(_prev_bind_4, thread);
            thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_3, thread);
            fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_2, thread);
            fact_sheets.$within_fact_sheet_paraphraseP$.rebind(_prev_bind_0, thread);
        }
        return Values.values(summary, group_new_sources, sentences_to_olists);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 67354L)
    public static SubLObject fact_sheet_sentence_group_summary(final SubLObject v_term, final SubLObject sentence_group, final SubLObject verbosity, final SubLObject language_mt, final SubLObject domain_mt, final SubLObject v_sources, SubLObject demerit_cutoff) {
        if (demerit_cutoff == fact_sheets.UNPROVIDED) {
            demerit_cutoff = fact_sheet_pph_demerit_cutoff();
        }
        SubLObject caching_state = fact_sheets.$fact_sheet_sentence_group_summary_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym277$FACT_SHEET_SENTENCE_GROUP_SUMMARY, (SubLObject)fact_sheets.$sym279$_FACT_SHEET_SENTENCE_GROUP_SUMMARY_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.SEVEN_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_7(v_term, sentence_group, verbosity, language_mt, domain_mt, v_sources, demerit_cutoff);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (sentence_group.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (verbosity.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (language_mt.equal(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (domain_mt.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (v_sources.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && demerit_cutoff.equal(cached_args.first())) {
                                            return memoization_state.caching_results(results2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_sentence_group_summary_internal(v_term, sentence_group, verbosity, language_mt, domain_mt, v_sources, demerit_cutoff)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, sentence_group, verbosity, language_mt, domain_mt, v_sources, demerit_cutoff));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 68777L)
    public static SubLObject simulate_fact_sheet_sentence_paraphrase(final SubLObject v_term, final SubLObject sentence, SubLObject language_mt, SubLObject domain_mt) {
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        return simulate_fact_sheet_sentences_paraphrase(v_term, (SubLObject)ConsesLow.list(sentence, language_mt, domain_mt), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 69112L)
    public static SubLObject simulate_fact_sheet_sentences_paraphrase(final SubLObject v_term, final SubLObject sentences, SubLObject language_mt, SubLObject domain_mt) {
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
        try {
            pph_vars.$pph_demerit_cutoff$.bind(fact_sheet_pph_demerit_cutoff(), thread);
            return pph_document.pph_summarize_term(v_term, sentences, language_mt, domain_mt, (SubLObject)fact_sheets.$kw134$TEXT, (SubLObject)fact_sheets.NIL);
        }
        finally {
            pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 69495L)
    public static SubLObject fact_sheet_bogus_hyperlink_open_tag_for_term(final SubLObject v_term, final SubLObject term_id) {
        return (SubLObject)((fact_sheets.NIL != fact_sheet_term_inappropriate_for_hyperlinkP(v_term)) ? fact_sheets.NIL : fact_sheet_bogus_hyperlink_open_tag_for_term_id(term_id));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 69707L)
    public static SubLObject fact_sheet_bogus_hyperlink_open_tag_for_term_id(final SubLObject term_id) {
        return Sequences.cconcatenate((SubLObject)fact_sheets.$str280$_a_href_, new SubLObject[] { format_nil.format_nil_s_no_copy(fact_sheet_bogus_url_for_term_id(term_id)), fact_sheets.$str281$_ });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 69863L)
    public static SubLObject fact_sheet_bogus_url_for_term(final SubLObject v_term) {
        return fact_sheet_bogus_url_for_term_id(fact_sheet_term_id(v_term, (SubLObject)fact_sheets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 70059L)
    public static SubLObject fact_sheet_bogus_url_for_term_id(final SubLObject term_id) {
        return Sequences.cconcatenate(fact_sheets.$fact_sheet_bogus_url_prefix$.getGlobalValue(), term_id);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 70181L)
    public static SubLObject strip_bogus_hyperlinks_for_term_id(final SubLObject term_id, final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject html = string_utilities.read_string_from_file(filename, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject open_tag = fact_sheet_bogus_hyperlink_open_tag_for_term_id(term_id);
        final SubLObject open_tag_length = Sequences.length(open_tag);
        final SubLObject close_tag = html_macros.$html_anchor_tail$.getGlobalValue();
        final SubLObject close_tag_length = Sequences.length(close_tag);
        SubLObject open_tag_start = Sequences.search(open_tag, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        SubLObject close_tag_start = (SubLObject)((fact_sheets.NIL != open_tag_start) ? Sequences.search(close_tag, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.NIL, Numbers.add(open_tag_length, open_tag_start), (SubLObject)fact_sheets.UNPROVIDED) : fact_sheets.NIL);
        SubLObject modifiedP = (SubLObject)fact_sheets.NIL;
        while (fact_sheets.NIL != close_tag_start) {
            html = Sequences.cconcatenate(string_utilities.substring(html, (SubLObject)fact_sheets.ZERO_INTEGER, open_tag_start), new SubLObject[] { string_utilities.substring(html, Numbers.add(open_tag_start, open_tag_length), close_tag_start), string_utilities.substring(html, Numbers.add(close_tag_start, close_tag_length), (SubLObject)fact_sheets.UNPROVIDED) });
            open_tag_start = Sequences.search(open_tag, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.NIL, Numbers.add(close_tag_start, close_tag_length), (SubLObject)fact_sheets.UNPROVIDED);
            close_tag_start = (SubLObject)((fact_sheets.NIL != open_tag_start) ? Sequences.search(close_tag, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.NIL, Numbers.add(open_tag_length, open_tag_start), (SubLObject)fact_sheets.UNPROVIDED) : fact_sheets.NIL);
            modifiedP = (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL != modifiedP) {
            SubLObject error_message = (SubLObject)fact_sheets.NIL;
            if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                try {
                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                    final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                        try {
                            SubLObject stream = (SubLObject)fact_sheets.NIL;
                            try {
                                stream = compatibility.open_text(filename, (SubLObject)fact_sheets.$kw283$OUTPUT);
                                if (!stream.isStream()) {
                                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, filename);
                                }
                                final SubLObject stream_$71 = stream;
                                print_high.princ(html, stream_$71);
                            }
                            finally {
                                final SubLObject _prev_bind_0_$72 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    if (stream.isStream()) {
                                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                                    }
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$72, thread);
                                }
                            }
                            if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                                file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), (SubLObject)fact_sheets.$str285$664);
                            }
                        }
                        catch (Throwable catch_var) {
                            Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_0, thread);
                    }
                }
                catch (Throwable ccatch_env_var) {
                    error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                }
                finally {
                    thread.throwStack.pop();
                }
            }
            else {
                SubLObject stream2 = (SubLObject)fact_sheets.NIL;
                try {
                    stream2 = compatibility.open_text(filename, (SubLObject)fact_sheets.$kw283$OUTPUT);
                    if (!stream2.isStream()) {
                        Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, filename);
                    }
                    final SubLObject stream_$72 = stream2;
                    print_high.princ(html, stream_$72);
                }
                finally {
                    final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream2.isStream()) {
                            streams_high.close(stream2, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                    }
                }
                if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), (SubLObject)fact_sheets.$str285$664);
                }
            }
        }
        return modifiedP;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 71417L)
    public static SubLObject fact_sheet_html_find_marked_up_terms(final SubLObject html, SubLObject include_sentencesP) {
        if (include_sentencesP == fact_sheets.UNPROVIDED) {
            include_sentencesP = (SubLObject)fact_sheets.T;
        }
        SubLObject ans = (SubLObject)fact_sheets.NIL;
        SubLObject prefix = (SubLObject)fact_sheets.NIL;
        SubLObject prefix_$74 = (SubLObject)fact_sheets.NIL;
        SubLObject close_tag = (SubLObject)fact_sheets.NIL;
        SubLObject close_tag_$75 = (SubLObject)fact_sheets.NIL;
        SubLObject term_lookup_fn = (SubLObject)fact_sheets.NIL;
        SubLObject term_lookup_fn_$76 = (SubLObject)fact_sheets.NIL;
        prefix = (SubLObject)fact_sheets.$list286;
        prefix_$74 = prefix.first();
        close_tag = (SubLObject)ConsesLow.list(html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_span_tail$.getGlobalValue(), html_macros.$html_anchor_tail$.getGlobalValue());
        close_tag_$75 = close_tag.first();
        term_lookup_fn = (SubLObject)fact_sheets.$list287;
        term_lookup_fn_$76 = term_lookup_fn.first();
        while (fact_sheets.NIL != term_lookup_fn || fact_sheets.NIL != close_tag || fact_sheets.NIL != prefix) {
            final SubLObject prefix_length = Sequences.length(prefix_$74);
            final SubLObject close_tag_length = Sequences.length(close_tag_$75);
            SubLObject cdolist_list_var;
            final SubLObject start_positions = cdolist_list_var = string_utilities.search_all(prefix_$74, html, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            SubLObject start_position = (SubLObject)fact_sheets.NIL;
            start_position = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                final SubLObject term_id_start = Numbers.add(prefix_length, start_position);
                final SubLObject term_id_end = Sequences.position((SubLObject)Characters.CHAR_quotation, html, Symbols.symbol_function((SubLObject)fact_sheets.EQL), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), term_id_start, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject term_id = string_utilities.substring(html, term_id_start, term_id_end);
                final SubLObject term_from_id = Functions.funcall(term_lookup_fn_$76, term_id);
                SubLObject v_term = (SubLObject)((fact_sheets.NIL != term_from_id) ? term_from_id : fact_sheets.$kw137$UNKNOWN);
                final SubLObject close_tag_start = fact_sheet_html_find_matching_close_tag_start(html, close_tag_$75, term_id_end, start_positions);
                final SubLObject end_position = Numbers.add(close_tag_start, close_tag_length);
                final SubLObject link_text = string_utilities.substring(html, start_position, end_position);
                final SubLObject open_tag_end = Sequences.position((SubLObject)Characters.CHAR_greater, html, Symbols.symbol_function((SubLObject)fact_sheets.EQL), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), term_id_end, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject linked_text_start = number_utilities.f_1X(open_tag_end);
                final SubLObject linked_text = string_utilities.substring(html, linked_text_start, close_tag_start);
                if (fact_sheets.NIL == cycl_grammar.cycl_sentence_p(v_term) || fact_sheets.NIL != include_sentencesP) {
                    if (fact_sheets.$kw137$UNKNOWN.eql(v_term) && fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term)) {
                        final SubLObject denots = lexicon_accessors.denots_of_string(linked_text, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                        SubLObject found_itP = (SubLObject)fact_sheets.NIL;
                        if (fact_sheets.NIL == found_itP) {
                            SubLObject csome_list_var = denots;
                            SubLObject denot = (SubLObject)fact_sheets.NIL;
                            denot = csome_list_var.first();
                            while (fact_sheets.NIL == found_itP && fact_sheets.NIL != csome_list_var) {
                                if (term_id.equal(fact_sheet_term_id(denot, (SubLObject)fact_sheets.UNPROVIDED))) {
                                    v_term = denot;
                                    found_itP = (SubLObject)fact_sheets.T;
                                }
                                csome_list_var = csome_list_var.rest();
                                denot = csome_list_var.first();
                            }
                        }
                    }
                    ans = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(start_position, end_position, v_term, link_text, linked_text), ans);
                }
                cdolist_list_var = cdolist_list_var.rest();
                start_position = cdolist_list_var.first();
            }
            prefix = prefix.rest();
            prefix_$74 = prefix.first();
            close_tag = close_tag.rest();
            close_tag_$75 = close_tag.first();
            term_lookup_fn = term_lookup_fn.rest();
            term_lookup_fn_$76 = term_lookup_fn.first();
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 73316L)
    public static SubLObject fact_sheet_html_find_marked_up_terms_fast(final SubLObject tokenized_html, SubLObject include_sentencesP) {
        if (include_sentencesP == fact_sheets.UNPROVIDED) {
            include_sentencesP = (SubLObject)fact_sheets.T;
        }
        SubLObject ans = (SubLObject)fact_sheets.NIL;
        SubLObject unclosed_tags = (SubLObject)fact_sheets.NIL;
        SubLObject list_var = (SubLObject)fact_sheets.NIL;
        SubLObject token = (SubLObject)fact_sheets.NIL;
        SubLObject token_index = (SubLObject)fact_sheets.NIL;
        list_var = tokenized_html;
        token = list_var.first();
        for (token_index = (SubLObject)fact_sheets.ZERO_INTEGER; fact_sheets.NIL != list_var; list_var = list_var.rest(), token = list_var.first(), token_index = Numbers.add((SubLObject)fact_sheets.ONE_INTEGER, token_index)) {
            if (fact_sheets.NIL != string_utilities.starts_with(token, (SubLObject)fact_sheets.$str288$_a) || fact_sheets.NIL != string_utilities.starts_with(token, (SubLObject)fact_sheets.$str289$_span)) {
                SubLObject current;
                final SubLObject datum = current = get_term_and_close_tag_from_token(token);
                SubLObject v_term = (SubLObject)fact_sheets.NIL;
                SubLObject close_tag = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list290);
                v_term = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list290);
                close_tag = current.first();
                current = current.rest();
                if (fact_sheets.NIL == current) {
                    unclosed_tags = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(token, token_index, v_term, close_tag), unclosed_tags);
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list290);
                }
            }
            if (fact_sheets.NIL != unclosed_tags && (fact_sheets.NIL != string_utilities.starts_with(token, (SubLObject)fact_sheets.$str291$__a) || fact_sheets.NIL != string_utilities.starts_with(token, (SubLObject)fact_sheets.$str292$__span))) {
                final SubLObject start_token_data = unclosed_tags.first();
                unclosed_tags = unclosed_tags.rest();
                SubLObject current2;
                final SubLObject datum2 = current2 = start_token_data;
                SubLObject start_token = (SubLObject)fact_sheets.NIL;
                SubLObject start_token_index = (SubLObject)fact_sheets.NIL;
                SubLObject v_term2 = (SubLObject)fact_sheets.NIL;
                SubLObject close_tag2 = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)fact_sheets.$list293);
                start_token = current2.first();
                current2 = current2.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)fact_sheets.$list293);
                start_token_index = current2.first();
                current2 = current2.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)fact_sheets.$list293);
                v_term2 = current2.first();
                current2 = current2.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)fact_sheets.$list293);
                close_tag2 = current2.first();
                current2 = current2.rest();
                if (fact_sheets.NIL == current2) {
                    if (close_tag2.equal(token)) {
                        final SubLObject linked_text_tokens = Sequences.subseq(tokenized_html, Numbers.add((SubLObject)fact_sheets.ONE_INTEGER, start_token_index), token_index);
                        if (v_term2 != fact_sheets.$kw294$DONT_REPLACE && (fact_sheets.NIL == cycl_grammar.cycl_sentence_p(v_term2) || fact_sheets.NIL != include_sentencesP)) {
                            ans = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(start_token, start_token_index, linked_text_tokens, token, token_index, v_term2), ans);
                        }
                    }
                    else {
                        Errors.warn((SubLObject)fact_sheets.$str295$close_tag__S_and_current_tag__S_d, close_tag2, token);
                    }
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum2, (SubLObject)fact_sheets.$list293);
                }
            }
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 74580L)
    public static SubLObject get_term_and_close_tag_from_token(final SubLObject html_token) {
        SubLObject prefix = (SubLObject)fact_sheets.NIL;
        SubLObject prefix_$77 = (SubLObject)fact_sheets.NIL;
        SubLObject close_tag = (SubLObject)fact_sheets.NIL;
        SubLObject close_tag_$78 = (SubLObject)fact_sheets.NIL;
        SubLObject term_lookup_fn = (SubLObject)fact_sheets.NIL;
        SubLObject term_lookup_fn_$79 = (SubLObject)fact_sheets.NIL;
        prefix = (SubLObject)fact_sheets.$list286;
        prefix_$77 = prefix.first();
        close_tag = (SubLObject)ConsesLow.list(html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_anchor_tail$.getGlobalValue(), html_macros.$html_span_tail$.getGlobalValue(), html_macros.$html_anchor_tail$.getGlobalValue());
        close_tag_$78 = close_tag.first();
        term_lookup_fn = (SubLObject)fact_sheets.$list287;
        term_lookup_fn_$79 = term_lookup_fn.first();
        while (fact_sheets.NIL != term_lookup_fn || fact_sheets.NIL != close_tag || fact_sheets.NIL != prefix) {
            if (fact_sheets.NIL != string_utilities.starts_with(html_token, prefix_$77)) {
                final SubLObject term_id_end = Sequences.position((SubLObject)Characters.CHAR_quotation, html_token, Symbols.symbol_function((SubLObject)fact_sheets.EQL), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), Sequences.length(prefix_$77), (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject term_id = string_utilities.substring(html_token, Sequences.length(prefix_$77), term_id_end);
                final SubLObject term_from_id = Functions.funcall(term_lookup_fn_$79, term_id);
                final SubLObject v_term = (SubLObject)((fact_sheets.NIL != term_from_id) ? term_from_id : fact_sheets.$kw137$UNKNOWN);
                return (SubLObject)ConsesLow.list(v_term, close_tag_$78);
            }
            prefix = prefix.rest();
            prefix_$77 = prefix.first();
            close_tag = close_tag.rest();
            close_tag_$78 = close_tag.first();
            term_lookup_fn = term_lookup_fn.rest();
            term_lookup_fn_$79 = term_lookup_fn.first();
        }
        final SubLObject space_pos = Sequences.position((SubLObject)Characters.CHAR_space, html_token, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject name_end = (fact_sheets.NIL != space_pos) ? space_pos : Numbers.subtract(Sequences.length(html_token), (SubLObject)fact_sheets.ONE_INTEGER);
        final SubLObject name = Sequences.subseq(html_token, (SubLObject)fact_sheets.ONE_INTEGER, name_end);
        final SubLObject close_tag2 = Sequences.cconcatenate((SubLObject)fact_sheets.$str296$__, new SubLObject[] { format_nil.format_nil_a_no_copy(name), fact_sheets.$str281$_ });
        return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$kw294$DONT_REPLACE, close_tag2);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 76025L)
    public static SubLObject fact_sheet_html_find_matching_close_tag_start(final SubLObject html, final SubLObject close_tag, final SubLObject term_id_end, final SubLObject start_positions) {
        SubLObject next_close_tag_start = Sequences.search(close_tag, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.NIL, term_id_end, (SubLObject)fact_sheets.NIL);
        SubLObject intervening_count = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject matching_close_tag_start = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == matching_close_tag_start) {
            SubLObject csome_list_var = start_positions;
            SubLObject start_position = (SubLObject)fact_sheets.NIL;
            start_position = csome_list_var.first();
            while (fact_sheets.NIL == matching_close_tag_start && fact_sheets.NIL != csome_list_var) {
                if (!start_position.numL(term_id_end)) {
                    if (start_position.numL(next_close_tag_start)) {
                        intervening_count = Numbers.add(intervening_count, (SubLObject)fact_sheets.ONE_INTEGER);
                    }
                    else if (intervening_count.isZero()) {
                        matching_close_tag_start = next_close_tag_start;
                    }
                    else {
                        next_close_tag_start = Sequences.search(close_tag, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.NIL, Numbers.add(next_close_tag_start, Sequences.length(close_tag)), (SubLObject)fact_sheets.NIL);
                        intervening_count = Numbers.subtract(intervening_count, (SubLObject)fact_sheets.ONE_INTEGER);
                    }
                }
                csome_list_var = csome_list_var.rest();
                start_position = csome_list_var.first();
            }
        }
        if (fact_sheets.NIL == matching_close_tag_start) {
            if (intervening_count.isZero()) {
                matching_close_tag_start = next_close_tag_start;
            }
            else if (intervening_count.eql((SubLObject)fact_sheets.ONE_INTEGER)) {
                next_close_tag_start = (matching_close_tag_start = Sequences.search(close_tag, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.NIL, Numbers.add(next_close_tag_start, Sequences.length(close_tag)), (SubLObject)fact_sheets.NIL));
            }
        }
        return matching_close_tag_start;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 77327L)
    public static SubLObject fact_sheet_term_inappropriate_for_hyperlinkP(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return (SubLObject)SubLObjectFactory.makeBoolean(v_term.eql(fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread)) || fact_sheets.NIL == term_ok_for_fact_sheet_p(v_term, (SubLObject)fact_sheets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 77540L)
    public static SubLObject mark_up_fact_sheet_sentenceP(final SubLObject sentence, final SubLObject v_properties) {
        if (fact_sheets.NIL != conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw191$STYLESHEET, (SubLObject)fact_sheets.NIL)) {
            return (SubLObject)fact_sheets.T;
        }
        return (SubLObject)fact_sheets.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 77738L)
    public static SubLObject fact_sheet_possibly_mark_up_sentence_paraphrase(final SubLObject sentence, final SubLObject paraphrase, final SubLObject v_properties) {
        if (fact_sheets.NIL != mark_up_fact_sheet_sentenceP(sentence, v_properties)) {
            return fact_sheet_mark_up_sentence_paraphrase(sentence, paraphrase, v_properties);
        }
        return paraphrase;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 78049L)
    public static SubLObject fact_sheet_mark_up_sentence_paraphrase(final SubLObject sentence, final SubLObject paraphrase, final SubLObject v_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject new_string = (SubLObject)fact_sheets.NIL;
        final SubLObject id_function = fact_sheet_sentence_id_function(v_properties);
        SubLObject expanded_sentence = fact_sheet_sentence_expand_coordination_sets(sentence);
        final SubLObject id_string = Functions.funcall(id_function, expanded_sentence);
        if (fact_sheets.NIL != assertion_handles.assertion_p(expanded_sentence)) {
            expanded_sentence = uncanonicalizer.assertion_el_ist_formula(expanded_sentence);
        }
        if (fact_sheets.NIL != xml_factsheetsP(v_properties)) {
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                stream = streams_high.make_private_string_output_stream();
                final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
                try {
                    xml_vars.$xml_stream$.bind(stream, thread);
                    final SubLObject name_var = (SubLObject)fact_sheets.$str305$sentence;
                    xml_utilities.xml_start_tag_internal(name_var, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str118$id, id_string, (SubLObject)fact_sheets.$str119$cycl, expanded_sentence), (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                    xml_utilities.xml_write_wXescaped_special_chars(replace_fact_sheet_markups(paraphrase, (SubLObject)fact_sheets.$sym306$REMOVE_LINK, (SubLObject)fact_sheets.UNPROVIDED));
                    xml_utilities.xml_end_tag_internal(name_var);
                }
                finally {
                    xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
                }
                new_string = streams_high.get_output_stream_string(stream);
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        else {
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                stream = streams_high.make_private_string_output_stream();
                final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
                    if (fact_sheets.NIL != id_string) {
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(id_string);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)fact_sheets.$str72$fact_sheet_sentence);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$80 = html_macros.$html_safe_print$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.NIL, thread);
                        html_utilities.html_princ(paraphrase);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_3, thread);
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$80, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                new_string = streams_high.get_output_stream_string(stream);
            }
            finally {
                final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                }
            }
        }
        return new_string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 78927L)
    public static SubLObject remove_link(final SubLObject v_term, final SubLObject linked_text, final SubLObject link_text) {
        return linked_text;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 79165L)
    public static SubLObject fact_sheet_sentence_id_function(final SubLObject v_properties) {
        return (SubLObject)((fact_sheets.NIL != xml_factsheetsP(v_properties)) ? fact_sheets.$sym307$COMPACT_HL_EXTERNAL_ID_STRING : fact_sheets.$sym308$COMPACT_HL_INTERNAL_ID_STRING);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 79343L)
    public static SubLObject xml_factsheetsP(final SubLObject v_properties) {
        return Equality.equal(conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw83$MARKUP_TYPE, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$kw84$XML);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 79442L)
    public static SubLObject fact_sheet_sentence_expand_coordination_sets(final SubLObject sentence) {
        if (fact_sheets.NIL == el_utilities.el_formula_p(sentence)) {
            return Values.values(sentence, (SubLObject)fact_sheets.NIL);
        }
        SubLObject arg_position = Sequences.find((SubLObject)fact_sheets.ZERO_INTEGER, cycl_utilities.arg_positions_bfs(fact_sheets.$const171$TheCoordinationSet, sentence, (SubLObject)fact_sheets.UNPROVIDED), Symbols.symbol_function((SubLObject)fact_sheets.EQL), Symbols.symbol_function((SubLObject)fact_sheets.$sym309$LAST_ONE), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        SubLObject new_sentence = (fact_sheets.NIL != list_utilities.lengthG(arg_position, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.UNPROVIDED)) ? el_utilities.copy_expression(sentence) : sentence;
        SubLObject expandedP = (SubLObject)fact_sheets.NIL;
        while (fact_sheets.NIL != arg_position) {
            final SubLObject coordination_argpos = conses_high.butlast(arg_position, (SubLObject)fact_sheets.UNPROVIDED);
            SubLObject enclosing_sentence_argpos;
            SubLObject enclosing_sentence;
            SubLObject found_sentenceP;
            for (enclosing_sentence_argpos = conses_high.butlast(coordination_argpos, (SubLObject)fact_sheets.UNPROVIDED), enclosing_sentence = cycl_utilities.formula_arg_position(new_sentence, enclosing_sentence_argpos, (SubLObject)fact_sheets.UNPROVIDED), found_sentenceP = cycl_grammar.cycl_sentence_p(enclosing_sentence); fact_sheets.NIL != enclosing_sentence_argpos && fact_sheets.NIL == found_sentenceP; enclosing_sentence_argpos = conses_high.butlast(enclosing_sentence_argpos, (SubLObject)fact_sheets.UNPROVIDED), enclosing_sentence = cycl_utilities.formula_arg_position(new_sentence, enclosing_sentence_argpos, (SubLObject)fact_sheets.UNPROVIDED), found_sentenceP = cycl_grammar.cycl_sentence_p(enclosing_sentence)) {}
            if (fact_sheets.NIL != found_sentenceP) {
                SubLObject conjuncts = (SubLObject)fact_sheets.NIL;
                final SubLObject coordination = cycl_utilities.formula_arg_position(new_sentence, coordination_argpos, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject coordination_argpos_in_enclosing_sentence = Sequences.subseq(coordination_argpos, Sequences.length(enclosing_sentence_argpos), (SubLObject)fact_sheets.UNPROVIDED);
                eval_in_api.trace_me(coordination_argpos_in_enclosing_sentence, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                SubLObject cdolist_list_var;
                final SubLObject args = cdolist_list_var = cycl_utilities.formula_args(coordination, (SubLObject)fact_sheets.$kw146$IGNORE);
                SubLObject coordinated_term = (SubLObject)fact_sheets.NIL;
                coordinated_term = cdolist_list_var.first();
                while (fact_sheets.NIL != cdolist_list_var) {
                    final SubLObject conjunct = el_utilities.replace_formula_arg_position(coordination_argpos_in_enclosing_sentence, coordinated_term, enclosing_sentence);
                    conjuncts = (SubLObject)ConsesLow.cons(conjunct, conjuncts);
                    cdolist_list_var = cdolist_list_var.rest();
                    coordinated_term = cdolist_list_var.first();
                }
                final SubLObject conjunction = simplifier.nconjoin(Sequences.nreverse(conjuncts), (SubLObject)fact_sheets.T);
                final SubLObject new_new_sentence = (fact_sheets.NIL != enclosing_sentence_argpos) ? el_utilities.replace_formula_arg_position(enclosing_sentence_argpos, conjunction, new_sentence) : conjunction;
                if (new_sentence.equal(new_new_sentence)) {
                    return Values.values(new_sentence, expandedP);
                }
                new_sentence = new_new_sentence;
                expandedP = (SubLObject)fact_sheets.T;
            }
            arg_position = (SubLObject)((fact_sheets.NIL != found_sentenceP) ? Sequences.find((SubLObject)fact_sheets.ZERO_INTEGER, cycl_utilities.arg_positions_bfs(fact_sheets.$const171$TheCoordinationSet, new_sentence, (SubLObject)fact_sheets.UNPROVIDED), Symbols.symbol_function((SubLObject)fact_sheets.EQL), Symbols.symbol_function((SubLObject)fact_sheets.$sym309$LAST_ONE), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) : fact_sheets.NIL);
        }
        return Values.values(new_sentence, expandedP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 81475L)
    public static SubLObject fact_sheet_span_for_term(final SubLObject v_term, final SubLObject linked_text) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject new_string = (SubLObject)fact_sheets.NIL;
        final SubLObject id_string = kb_utilities.hl_external_id_string(v_term);
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
            try {
                html_macros.$html_stream$.bind(stream, thread);
                html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
                if (fact_sheets.NIL != id_string) {
                    html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(id_string);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                }
                html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup((SubLObject)fact_sheets.$str310$fact_sheet_term);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$81 = html_macros.$html_safe_print$.currentBinding(thread);
                final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.NIL, thread);
                    html_utilities.html_princ(linked_text);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$81, thread);
                }
                html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_stream$.rebind(_prev_bind_0, thread);
            }
            new_string = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return new_string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 81796L)
    public static SubLObject replace_fact_sheet_markups(final SubLObject html, final SubLObject callback_fn, SubLObject include_sentencesP) {
        if (include_sentencesP == fact_sheets.UNPROVIDED) {
            include_sentencesP = (SubLObject)fact_sheets.T;
        }
        SubLObject new_html = html;
        SubLObject adjustments = (SubLObject)fact_sheets.NIL;
        SubLObject cdolist_list_var = Sort.sort(fact_sheet_html_find_marked_up_terms(html, include_sentencesP), Symbols.symbol_function((SubLObject)fact_sheets.$sym313$_), Symbols.symbol_function((SubLObject)fact_sheets.$sym140$FIRST));
        SubLObject data = (SubLObject)fact_sheets.NIL;
        data = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = data;
            SubLObject start_position = (SubLObject)fact_sheets.NIL;
            SubLObject end_position = (SubLObject)fact_sheets.NIL;
            SubLObject v_term = (SubLObject)fact_sheets.NIL;
            SubLObject link_text = (SubLObject)fact_sheets.NIL;
            SubLObject linked_text = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list311);
            start_position = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list311);
            end_position = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list311);
            v_term = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list311);
            link_text = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list311);
            linked_text = current.first();
            current = current.rest();
            if (fact_sheets.NIL == current) {
                SubLObject adjust_amount = (SubLObject)fact_sheets.ZERO_INTEGER;
                SubLObject cdolist_list_var_$82 = adjustments;
                SubLObject adjustment = (SubLObject)fact_sheets.NIL;
                adjustment = cdolist_list_var_$82.first();
                while (fact_sheets.NIL != cdolist_list_var_$82) {
                    if (end_position.numG(adjustment.first())) {
                        SubLObject current_$84;
                        final SubLObject datum_$83 = current_$84 = adjustment.rest();
                        SubLObject amount = (SubLObject)fact_sheets.NIL;
                        SubLObject old = (SubLObject)fact_sheets.NIL;
                        SubLObject v_new = (SubLObject)fact_sheets.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current_$84, datum_$83, (SubLObject)fact_sheets.$list312);
                        amount = current_$84.first();
                        current_$84 = current_$84.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current_$84, datum_$83, (SubLObject)fact_sheets.$list312);
                        old = current_$84.first();
                        current_$84 = current_$84.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current_$84, datum_$83, (SubLObject)fact_sheets.$list312);
                        v_new = current_$84.first();
                        current_$84 = current_$84.rest();
                        if (fact_sheets.NIL == current_$84) {
                            adjust_amount = Numbers.add(adjust_amount, amount);
                            linked_text = string_utilities.replace_substring(linked_text, old, v_new);
                        }
                        else {
                            cdestructuring_bind.cdestructuring_bind_error(datum_$83, (SubLObject)fact_sheets.$list312);
                        }
                    }
                    cdolist_list_var_$82 = cdolist_list_var_$82.rest();
                    adjustment = cdolist_list_var_$82.first();
                }
                if (!adjust_amount.isZero()) {
                    end_position = Numbers.subtract(end_position, adjust_amount);
                }
                final SubLObject replacement_text = (fact_sheets.$kw137$UNKNOWN == v_term) ? linked_text : Functions.funcall(callback_fn, v_term, linked_text, link_text);
                final SubLObject old_length = Sequences.length(link_text);
                final SubLObject new_length = Sequences.length(replacement_text);
                final SubLObject net_shrinkage = Numbers.subtract(old_length, new_length, adjust_amount);
                if (!net_shrinkage.isZero()) {
                    adjustments = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(start_position, net_shrinkage, link_text, replacement_text), adjustments);
                }
                new_html = Sequences.cconcatenate(string_utilities.substring(new_html, (SubLObject)fact_sheets.ZERO_INTEGER, start_position), new SubLObject[] { replacement_text, string_utilities.substring(new_html, end_position, (SubLObject)fact_sheets.NIL) });
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list311);
            }
            cdolist_list_var = cdolist_list_var.rest();
            data = cdolist_list_var.first();
        }
        return new_html;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 83281L)
    public static SubLObject replace_fact_sheet_markups_fast(final SubLObject html, final SubLObject callback_fn, SubLObject include_sentencesP) {
        if (include_sentencesP == fact_sheets.UNPROVIDED) {
            include_sentencesP = (SubLObject)fact_sheets.T;
        }
        SubLObject new_html = (SubLObject)fact_sheets.NIL;
        final SubLObject tokenized_html = xml_parsing_utilities.xml_string_tokenize(html, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        SubLObject replacements = (SubLObject)fact_sheets.NIL;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            SubLObject cdolist_list_var = fact_sheet_html_find_marked_up_terms_fast(tokenized_html, include_sentencesP);
            SubLObject data = (SubLObject)fact_sheets.NIL;
            data = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = data;
                SubLObject original_open_tag = (SubLObject)fact_sheets.NIL;
                SubLObject open_tag_position = (SubLObject)fact_sheets.NIL;
                SubLObject original_link_tokens = (SubLObject)fact_sheets.NIL;
                SubLObject original_close_tag = (SubLObject)fact_sheets.NIL;
                SubLObject close_tag_position = (SubLObject)fact_sheets.NIL;
                SubLObject v_term = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list314);
                original_open_tag = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list314);
                open_tag_position = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list314);
                original_link_tokens = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list314);
                original_close_tag = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list314);
                close_tag_position = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list314);
                v_term = current.first();
                current = current.rest();
                if (fact_sheets.NIL == current) {
                    SubLObject current_$86;
                    final SubLObject datum_$85 = current_$86 = Functions.funcall(callback_fn, v_term, original_open_tag, original_link_tokens, original_close_tag);
                    SubLObject open_tag = (SubLObject)fact_sheets.NIL;
                    SubLObject link_text = (SubLObject)fact_sheets.NIL;
                    SubLObject close_tag = (SubLObject)fact_sheets.NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current_$86, datum_$85, (SubLObject)fact_sheets.$list315);
                    open_tag = current_$86.first();
                    current_$86 = current_$86.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current_$86, datum_$85, (SubLObject)fact_sheets.$list315);
                    link_text = current_$86.first();
                    current_$86 = current_$86.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current_$86, datum_$85, (SubLObject)fact_sheets.$list315);
                    close_tag = current_$86.first();
                    current_$86 = current_$86.rest();
                    if (fact_sheets.NIL == current_$86) {
                        if (!original_open_tag.equal(open_tag)) {
                            replacements = (SubLObject)ConsesLow.cons(reader.bq_cons(open_tag_position, open_tag), replacements);
                        }
                        if (!original_link_tokens.equal(link_text)) {
                            replacements = (SubLObject)ConsesLow.cons(reader.bq_cons(number_utilities.f_1X(open_tag_position), link_text), replacements);
                        }
                        if (!original_close_tag.equal(close_tag)) {
                            replacements = (SubLObject)ConsesLow.cons(reader.bq_cons(close_tag_position, close_tag), replacements);
                        }
                    }
                    else {
                        cdestructuring_bind.cdestructuring_bind_error(datum_$85, (SubLObject)fact_sheets.$list315);
                    }
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list314);
                }
                cdolist_list_var = cdolist_list_var.rest();
                data = cdolist_list_var.first();
            }
            SubLObject list_var = (SubLObject)fact_sheets.NIL;
            SubLObject token = (SubLObject)fact_sheets.NIL;
            SubLObject token_index = (SubLObject)fact_sheets.NIL;
            list_var = tokenized_html;
            token = list_var.first();
            for (token_index = (SubLObject)fact_sheets.ZERO_INTEGER; fact_sheets.NIL != list_var; list_var = list_var.rest(), token = list_var.first(), token_index = Numbers.add((SubLObject)fact_sheets.ONE_INTEGER, token_index)) {
                if (fact_sheets.NIL != conses_high.assoc(token_index, replacements, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
                    print_high.princ(conses_high.assoc(token_index, replacements, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED).rest(), stream);
                }
                else {
                    print_high.princ(token, stream);
                }
            }
            new_html = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)fact_sheets.T);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return new_html;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 84716L)
    public static SubLObject fact_sheet_max_sentences_per_pred(final SubLObject verbosity) {
        if (verbosity.eql((SubLObject)fact_sheets.$kw316$TERSE)) {
            return (SubLObject)fact_sheets.ONE_INTEGER;
        }
        if (verbosity.eql((SubLObject)fact_sheets.$kw35$NORMAL)) {
            return (SubLObject)fact_sheets.THREE_INTEGER;
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 84877L)
    public static SubLObject display_fact_sheet(final SubLObject title, final SubLObject image_url, final SubLObject categorized_paragraph_texts, final SubLObject footnotes, final SubLObject v_properties) {
        final SubLObject branding_info = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw317$BRANDING_INFO, (SubLObject)fact_sheets.NIL);
        if (fact_sheets.NIL != xml_factsheetsP(v_properties)) {
            display_fact_sheet_xml(title, image_url, categorized_paragraph_texts, footnotes, branding_info);
        }
        else if (fact_sheets.NIL != conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw191$STYLESHEET, (SubLObject)fact_sheets.UNPROVIDED)) {
            display_fact_sheet_for_external_styles(title, image_url, categorized_paragraph_texts, footnotes, branding_info);
        }
        else {
            display_fact_sheet_with_internal_styles(title, image_url, categorized_paragraph_texts, footnotes);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 85455L)
    public static SubLObject display_fact_sheet_with_internal_styles(final SubLObject title, final SubLObject image_url, final SubLObject categorized_paragraph_texts, final SubLObject footnotes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_align$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        html_utilities.html_markup(html_utilities.html_align((SubLObject)fact_sheets.$kw318$CENTER));
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        html_utilities.html_markup((SubLObject)fact_sheets.ZERO_INTEGER);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
            print_high.princ(fact_sheet_optional_section_start_comment((SubLObject)fact_sheets.$kw319$TITLE, (SubLObject)fact_sheets.UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject _prev_bind_0_$87 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)fact_sheets.$kw318$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$88 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                    html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                    html_utilities.html_markup((SubLObject)fact_sheets.ONE_INTEGER);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_princ(title);
                    html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                    html_utilities.html_markup((SubLObject)fact_sheets.ONE_INTEGER);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$88, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$87, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
            print_high.princ(fact_sheet_optional_section_end_comment((SubLObject)fact_sheets.$kw319$TITLE), html_macros.$html_stream$.getDynamicValue(thread));
            if (image_url.isString()) {
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$89 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)fact_sheets.$kw318$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$90 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_markup(html_macros.$html_image_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_image_src$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(image_url);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_image_name$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)fact_sheets.$str320$image);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_image_alt$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)fact_sheets.$str320$image);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_image_border$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)fact_sheets.ONE_INTEGER);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$91 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$91, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_image_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$90, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$89, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
            }
            SubLObject bgcolor = (SubLObject)fact_sheets.NIL;
            SubLObject cdolist_list_var = categorized_paragraph_texts;
            SubLObject cons = (SubLObject)fact_sheets.NIL;
            cons = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = cons;
                SubLObject category = (SubLObject)fact_sheets.NIL;
                SubLObject paragraph_texts = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list321);
                category = current.first();
                current = (paragraph_texts = current.rest());
                if (fact_sheets.NIL != paragraph_texts) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)fact_sheets.$str322$white);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$92 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$93 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                            html_utilities.html_markup(category_label_string(category));
                            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$93, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$92, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    SubLObject color_toggle = (SubLObject)fact_sheets.NIL;
                    SubLObject list_var = (SubLObject)fact_sheets.NIL;
                    SubLObject paragraph_text = (SubLObject)fact_sheets.NIL;
                    SubLObject ignore_me = (SubLObject)fact_sheets.NIL;
                    list_var = paragraph_texts;
                    paragraph_text = list_var.first();
                    for (ignore_me = (SubLObject)fact_sheets.ZERO_INTEGER; fact_sheets.NIL != list_var; list_var = list_var.rest(), paragraph_text = list_var.first(), ignore_me = Numbers.add((SubLObject)fact_sheets.ONE_INTEGER, ignore_me)) {
                        if (fact_sheets.NIL != color_toggle) {
                            color_toggle = (SubLObject)fact_sheets.NIL;
                        }
                        else {
                            color_toggle = (SubLObject)fact_sheets.T;
                        }
                        bgcolor = ((fact_sheets.NIL != color_toggle) ? html_macros.$html_color_cyc_logo_lighter_blue$.getGlobalValue() : html_macros.$html_color_cyc_logo_light_blue$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        if (fact_sheets.NIL != bgcolor) {
                            html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup(bgcolor);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$94 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                            final SubLObject _prev_bind_0_$95 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                                html_utilities.html_markup(paragraph_text);
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$95, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$94, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                cons = cdolist_list_var.first();
            }
            bgcolor = (SubLObject)fact_sheets.NIL;
            SubLObject color_toggle2 = (SubLObject)fact_sheets.NIL;
            SubLObject list_var2 = (SubLObject)fact_sheets.NIL;
            SubLObject footnote = (SubLObject)fact_sheets.NIL;
            SubLObject ignore_me2 = (SubLObject)fact_sheets.NIL;
            list_var2 = footnotes;
            footnote = list_var2.first();
            for (ignore_me2 = (SubLObject)fact_sheets.ZERO_INTEGER; fact_sheets.NIL != list_var2; list_var2 = list_var2.rest(), footnote = list_var2.first(), ignore_me2 = Numbers.add((SubLObject)fact_sheets.ONE_INTEGER, ignore_me2)) {
                if (fact_sheets.NIL != color_toggle2) {
                    color_toggle2 = (SubLObject)fact_sheets.NIL;
                }
                else {
                    color_toggle2 = (SubLObject)fact_sheets.T;
                }
                bgcolor = ((fact_sheets.NIL != color_toggle2) ? html_macros.$html_color_cyc_logo_lighter_blue$.getGlobalValue() : html_macros.$html_color_cyc_logo_light_blue$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                if (fact_sheets.NIL != bgcolor) {
                    html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(bgcolor);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                }
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$96 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$97 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_markup(footnote_text(footnote));
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$97, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$96, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
            }
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 87494L)
    public static SubLObject display_fact_sheet_for_external_styles(final SubLObject title, final SubLObject image_url, final SubLObject categorized_paragraph_texts, final SubLObject footnotes, SubLObject branding_info) {
        if (branding_info == fact_sheets.UNPROVIDED) {
            branding_info = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        print_high.princ(fact_sheet_optional_section_start_comment((SubLObject)fact_sheets.$kw319$TITLE, (SubLObject)fact_sheets.UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        if (fact_sheets.NIL != fact_sheets.$fact_sheet_title_div$.getGlobalValue()) {
            html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            html_utilities.html_markup(fact_sheets.$fact_sheet_title_div$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
            if (fact_sheets.NIL != branding_info) {
                SubLObject current;
                final SubLObject datum = current = branding_info;
                SubLObject url = (SubLObject)fact_sheets.NIL;
                SubLObject logo_url = (SubLObject)fact_sheets.NIL;
                SubLObject brand_class = (SubLObject)fact_sheets.NIL;
                SubLObject alt_text = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list333);
                url = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list333);
                logo_url = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list333);
                brand_class = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list333);
                alt_text = current.first();
                current = current.rest();
                if (fact_sheets.NIL == current) {
                    html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(url);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$98 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_markup(html_macros.$html_image_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_image_src$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(logo_url);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        if (fact_sheets.NIL != brand_class) {
                            html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup(brand_class);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        if (fact_sheets.NIL != alt_text) {
                            html_utilities.html_markup(html_macros.$html_image_alt$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup(alt_text);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$99 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$99, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_image_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$98, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                    html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list333);
                }
            }
            html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
            if (fact_sheets.NIL != fact_sheets.$fact_sheet_title$.getGlobalValue()) {
                html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup(fact_sheets.$fact_sheet_title$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            }
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject _prev_bind_0_$100 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                html_utilities.html_princ(title);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$100, thread);
            }
            html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
            if (image_url.isString()) {
                html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_image_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_image_src$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup(image_url);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_image_name$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup((SubLObject)fact_sheets.$str320$image);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                if (fact_sheets.NIL != fact_sheets.$fact_sheet_main_image$.getGlobalValue()) {
                    html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(fact_sheets.$fact_sheet_main_image$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                }
                html_utilities.html_markup(html_macros.$html_image_alt$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup((SubLObject)fact_sheets.$str320$image);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$101 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$101, thread);
                }
                html_utilities.html_markup(html_macros.$html_image_tail$.getGlobalValue());
            }
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        print_high.princ(fact_sheet_optional_section_end_comment((SubLObject)fact_sheets.$kw319$TITLE), html_macros.$html_stream$.getDynamicValue(thread));
        SubLObject v_class = (SubLObject)fact_sheets.NIL;
        SubLObject cdolist_list_var = categorized_paragraph_texts;
        SubLObject cons = (SubLObject)fact_sheets.NIL;
        cons = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            SubLObject current2;
            final SubLObject datum2 = current2 = cons;
            SubLObject category = (SubLObject)fact_sheets.NIL;
            SubLObject paragraph_texts = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)fact_sheets.$list321);
            category = current2.first();
            current2 = (paragraph_texts = current2.rest());
            if (fact_sheets.NIL != paragraph_texts) {
                final SubLObject category_class = category_label_style(category);
                final SubLObject style = Sequences.cconcatenate(format_nil.format_nil_a_no_copy(fact_sheets.$fact_sheet_category_title$.getGlobalValue()), new SubLObject[] { fact_sheets.$str334$_, format_nil.format_nil_a_no_copy(category_class), fact_sheets.$str335$Header });
                html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                if (fact_sheets.NIL != style) {
                    html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(style);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                }
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                    html_utilities.html_markup(category_label_string(category));
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
                }
                html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                SubLObject alternator_toggle = (SubLObject)fact_sheets.NIL;
                SubLObject list_var = (SubLObject)fact_sheets.NIL;
                SubLObject paragraph_text = (SubLObject)fact_sheets.NIL;
                SubLObject ignore_me = (SubLObject)fact_sheets.NIL;
                list_var = paragraph_texts;
                paragraph_text = list_var.first();
                for (ignore_me = (SubLObject)fact_sheets.ZERO_INTEGER; fact_sheets.NIL != list_var; list_var = list_var.rest(), paragraph_text = list_var.first(), ignore_me = Numbers.add((SubLObject)fact_sheets.ONE_INTEGER, ignore_me)) {
                    if (fact_sheets.NIL != alternator_toggle) {
                        alternator_toggle = (SubLObject)fact_sheets.NIL;
                    }
                    else {
                        alternator_toggle = (SubLObject)fact_sheets.T;
                    }
                    v_class = ((fact_sheets.NIL != alternator_toggle) ? fact_sheets.$fact_sheet_fact_class2$.getGlobalValue() : fact_sheets.$fact_sheet_fact_class1$.getGlobalValue());
                    final SubLObject sentence_class = Sequences.cconcatenate(format_nil.format_nil_a_no_copy(category_class), new SubLObject[] { fact_sheets.$str334$_, format_nil.format_nil_a_no_copy(v_class) });
                    html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                    if (fact_sheets.NIL != sentence_class) {
                        html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(sentence_class);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_3 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_markup(paragraph_text);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_3, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        v_class = (SubLObject)fact_sheets.NIL;
        SubLObject alternator_toggle2 = (SubLObject)fact_sheets.NIL;
        SubLObject list_var2 = (SubLObject)fact_sheets.NIL;
        SubLObject footnote = (SubLObject)fact_sheets.NIL;
        SubLObject ignore_me2 = (SubLObject)fact_sheets.NIL;
        list_var2 = footnotes;
        footnote = list_var2.first();
        for (ignore_me2 = (SubLObject)fact_sheets.ZERO_INTEGER; fact_sheets.NIL != list_var2; list_var2 = list_var2.rest(), footnote = list_var2.first(), ignore_me2 = Numbers.add((SubLObject)fact_sheets.ONE_INTEGER, ignore_me2)) {
            if (fact_sheets.NIL != alternator_toggle2) {
                alternator_toggle2 = (SubLObject)fact_sheets.NIL;
            }
            else {
                alternator_toggle2 = (SubLObject)fact_sheets.T;
            }
            v_class = ((fact_sheets.NIL != alternator_toggle2) ? fact_sheets.$fact_sheet_footnote_class2$.getGlobalValue() : fact_sheets.$fact_sheet_footnote_class1$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
            if (fact_sheets.NIL != v_class) {
                html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup(v_class);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            }
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject _prev_bind_4 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                html_utilities.html_markup(footnote_text(footnote));
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_4, thread);
            }
            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 89269L)
    public static SubLObject display_fact_sheet_xml(final SubLObject title, final SubLObject image_url, final SubLObject categorized_paragraph_texts, final SubLObject footnotes, SubLObject branding_info) {
        if (branding_info == fact_sheets.UNPROVIDED) {
            branding_info = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (fact_sheets.NIL != image_url) {
            final SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
            final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
            try {
                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                xml_utilities.xml_start_tag_internal((SubLObject)fact_sheets.$str320$image, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str336$url, image_url), (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$kw116$UNINITIALIZED);
                final SubLObject _prev_bind_0_$102 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                try {
                    xml_vars.$xml_default_namespace$.bind((SubLObject)fact_sheets.$kw116$UNINITIALIZED, thread);
                }
                finally {
                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$102, thread);
                }
            }
            finally {
                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
            }
        }
        SubLObject cdolist_list_var = categorized_paragraph_texts;
        SubLObject cons = (SubLObject)fact_sheets.NIL;
        cons = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject category = (SubLObject)fact_sheets.NIL;
            SubLObject paragraph_texts = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list321);
            category = current.first();
            current = (paragraph_texts = current.rest());
            if (fact_sheets.NIL != paragraph_texts) {
                final SubLObject attrs = (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str337$category, category_label_pred(category), (SubLObject)fact_sheets.$str114$title, category_label_string(category));
                try {
                    final SubLObject _prev_bind_3 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                    try {
                        xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                        xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                        xml_utilities.xml_start_tag_internal((SubLObject)fact_sheets.$str338$factSheetSection, attrs, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$kw116$UNINITIALIZED);
                        final SubLObject _prev_bind_0_$103 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                        try {
                            xml_vars.$xml_default_namespace$.bind((SubLObject)fact_sheets.$kw116$UNINITIALIZED, thread);
                            SubLObject cdolist_list_var_$104 = paragraph_texts;
                            SubLObject paragraph_text = (SubLObject)fact_sheets.NIL;
                            paragraph_text = cdolist_list_var_$104.first();
                            while (fact_sheets.NIL != cdolist_list_var_$104) {
                                xml_utilities.xml_markup(paragraph_text);
                                cdolist_list_var_$104 = cdolist_list_var_$104.rest();
                                paragraph_text = cdolist_list_var_$104.first();
                            }
                        }
                        finally {
                            xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$103, thread);
                        }
                    }
                    finally {
                        xml_utilities.$cycml_indent_level$.rebind(_prev_bind_4, thread);
                        xml_utilities.$xml_indentation_level$.rebind(_prev_bind_3, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        xml_utilities.xml_terpri();
                        xml_utilities.xml_end_tag_internal((SubLObject)fact_sheets.$str338$factSheetSection);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                    }
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        try {
            final SubLObject _prev_bind_0 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
            final SubLObject _prev_bind_2 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
            try {
                xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                xml_utilities.xml_start_tag_internal((SubLObject)fact_sheets.$str339$footnotes, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$kw116$UNINITIALIZED);
                final SubLObject _prev_bind_0_$104 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                try {
                    xml_vars.$xml_default_namespace$.bind((SubLObject)fact_sheets.$kw116$UNINITIALIZED, thread);
                    SubLObject cdolist_list_var2 = footnotes;
                    SubLObject footnote = (SubLObject)fact_sheets.NIL;
                    footnote = cdolist_list_var2.first();
                    while (fact_sheets.NIL != cdolist_list_var2) {
                        xml_utilities.xml_markup(footnote_text(footnote));
                        cdolist_list_var2 = cdolist_list_var2.rest();
                        footnote = cdolist_list_var2.first();
                    }
                }
                finally {
                    xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$104, thread);
                }
            }
            finally {
                xml_utilities.$cycml_indent_level$.rebind(_prev_bind_2, thread);
                xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                xml_utilities.xml_terpri();
                xml_utilities.xml_end_tag_internal((SubLObject)fact_sheets.$str339$footnotes);
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 91618L)
    public static SubLObject print_fact_sheet_stats(final SubLObject stats, final SubLObject display_time, SubLObject under_constructionP) {
        if (under_constructionP == fact_sheets.UNPROVIDED) {
            under_constructionP = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != fact_sheet_stats_p(stats) : stats;
        SubLObject domain_mt = (SubLObject)fact_sheets.NIL;
        SubLObject verbosity = (SubLObject)fact_sheets.NIL;
        SubLObject sentence_count = (SubLObject)fact_sheets.NIL;
        SubLObject section_count = (SubLObject)fact_sheets.NIL;
        SubLObject info_gathering_time = (SubLObject)fact_sheets.NIL;
        SubLObject pph_time = (SubLObject)fact_sheets.NIL;
        SubLObject secondstring = (SubLObject)fact_sheets.NIL;
        SubLObject datestring = (SubLObject)fact_sheets.NIL;
        SubLObject image_id = (SubLObject)fact_sheets.NIL;
        SubLObject kb_version = (SubLObject)fact_sheets.NIL;
        SubLObject cyc_revision = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(stats, stats, (SubLObject)fact_sheets.$list342);
        domain_mt = stats.first();
        SubLObject current = stats.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list342);
        verbosity = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list342);
        sentence_count = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list342);
        section_count = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list342);
        info_gathering_time = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list342);
        pph_time = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list342);
        secondstring = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list342);
        datestring = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list342);
        image_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list342);
        kb_version = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list342);
        cyc_revision = current.first();
        current = current.rest();
        final SubLObject v_term = (SubLObject)(current.isCons() ? current.first() : fact_sheets.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, stats, (SubLObject)fact_sheets.$list342);
        current = current.rest();
        if (fact_sheets.NIL == current) {
            html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_style_font_size_smaller$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                html_utilities.html_hr((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str343$Domain_mt___A, pph_main.generate_phrase(domain_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
                html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str344$Verbosity___A, verbosity);
                if (fact_sheets.NIL == under_constructionP) {
                    html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str345$Sentence_Count___S, sentence_count);
                    html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str346$Section_Count___S, section_count);
                    html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str347$Information_Gathering_Time___a, numeric_date_utilities.readable_elapsed_time_string(info_gathering_time, (SubLObject)fact_sheets.UNPROVIDED));
                    html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str348$Paraphrase_Time___a, numeric_date_utilities.readable_elapsed_time_string(pph_time, (SubLObject)fact_sheets.UNPROVIDED));
                    html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str349$Customization_and_Display_Time___, numeric_date_utilities.readable_elapsed_time_string(display_time, (SubLObject)fact_sheets.UNPROVIDED));
                }
                html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str350$_A_at__A_on__A, new SubLObject[] { (fact_sheets.NIL != under_constructionP) ? fact_sheets.$str351$Started : fact_sheets.$str352$Created, secondstring, datestring });
                html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str353$Image_ID___A, image_id);
                html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str354$_A_A__A_A_, new SubLObject[] { fact_sheets.$fact_sheet_kb_version_string_introducer$.getGlobalValue(), kb_version, fact_sheets.$fact_sheet_revision_string_introducer$.getGlobalValue(), cyc_revision });
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(stats, (SubLObject)fact_sheets.$list342);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 92986L)
    public static SubLObject fact_sheet_kb_version_string(final SubLObject html) {
        final SubLObject introducer = fact_sheets.$fact_sheet_kb_version_string_introducer$.getGlobalValue();
        return fact_sheet_info_string(html, introducer);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 93157L)
    public static SubLObject fact_sheet_cyc_revision_string(final SubLObject html) {
        final SubLObject introducer = fact_sheets.$fact_sheet_revision_string_introducer$.getGlobalValue();
        return fact_sheet_info_string(html, introducer);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 93328L)
    public static SubLObject fact_sheet_info_string(final SubLObject html, final SubLObject introducer) {
        final SubLObject section_start = fact_sheet_section_start_position(html, (SubLObject)fact_sheets.$kw202$STATS, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject section_end = fact_sheet_section_end_position(html, (SubLObject)fact_sheets.$kw202$STATS, section_start);
        final SubLObject introducer_position = (SubLObject)((fact_sheets.NIL != section_end) ? Sequences.search(introducer, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.NIL, section_start, section_end) : fact_sheets.NIL);
        final SubLObject start_position = (SubLObject)((fact_sheets.NIL != introducer_position) ? Numbers.add(introducer_position, Sequences.length(introducer)) : fact_sheets.NIL);
        final SubLObject end_position = (SubLObject)((fact_sheets.NIL != start_position) ? Sequences.position((SubLObject)Characters.CHAR_space, html, Symbols.symbol_function((SubLObject)fact_sheets.EQ), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), start_position, (SubLObject)fact_sheets.UNPROVIDED) : fact_sheets.NIL);
        return (SubLObject)((fact_sheets.NIL != end_position) ? string_utilities.substring(html, start_position, end_position) : fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 93991L)
    public static SubLObject fact_sheet_pph_demerit_cutoff() {
        return fact_sheets.$fact_sheet_demerit_cutoff$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 94182L)
    public static SubLObject fact_sheet_min_paragraph_length() {
        return fact_sheets.$fact_sheet_min_paragraph_length$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 94364L)
    public static SubLObject fact_sheet_verbosity_p(final SubLObject v_object) {
        return subl_promotions.memberP(v_object, fact_sheets.$fact_sheet_verbosities$.getGlobalValue(), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 94662L)
    public static SubLObject fact_sheet_image_root_placeholder() {
        return fact_sheets.$fact_sheet_image_root_placeholder$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 94762L)
    public static SubLObject fact_sheet_image_url_for_term(final SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (fact_sheets.NIL == forts.fort_p(v_term)) {
            return (SubLObject)fact_sheets.NIL;
        }
        final SubLObject root = fact_sheet_image_root_placeholder();
        SubLObject url = (SubLObject)fact_sheets.NIL;
        if (root.isString() && fact_sheets.NIL != somewhere_cache.some_pred_assertion_somewhereP(fact_sheets.$const359$salientTermImagePathname, v_term, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.T)) {
            final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
            final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                if (fact_sheets.NIL == url) {
                    SubLObject csome_list_var = kb_mapping_utilities.pred_values(v_term, fact_sheets.$const359$salientTermImagePathname, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.$kw360$TRUE);
                    SubLObject path = (SubLObject)fact_sheets.NIL;
                    path = csome_list_var.first();
                    while (fact_sheets.NIL == url && fact_sheets.NIL != csome_list_var) {
                        if (fact_sheets.NIL != fact_sheet_image_path_okP(path)) {
                            url = Sequences.cconcatenate(root, path);
                        }
                        csome_list_var = csome_list_var.rest();
                        path = csome_list_var.first();
                    }
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
        }
        return url;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 95391L)
    public static SubLObject fact_sheet_base_url_placeholder() {
        return fact_sheets.$fact_sheet_base_url_placeholder$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 95485L)
    public static SubLObject fact_sheet_html_replace_placeholders(SubLObject html, final SubLObject domain_mt) {
        if (fact_sheets.NIL != fact_sheet_html_contains_image_root_placeholderP(html)) {
            html = fact_sheet_html_replace_image_root_placeholder(html, domain_mt);
        }
        if (fact_sheets.NIL != fact_sheet_html_contains_base_url_placeholderP(html)) {
            html = fact_sheet_html_replace_base_url_placeholder(html);
        }
        if (fact_sheets.NIL != fact_sheet_html_contains_replaceable_colorsP(html)) {
            html = fact_sheet_html_replace_colors(html);
        }
        return html;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 96255L)
    public static SubLObject fact_sheet_html_contains_replaceable_colorsP(final SubLObject html) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == result) {
            SubLObject csome_list_var = fact_sheets.$fact_sheet_replacement_color_spec$.getDynamicValue(thread);
            SubLObject color_pair = (SubLObject)fact_sheets.NIL;
            color_pair = csome_list_var.first();
            while (fact_sheets.NIL == result && fact_sheets.NIL != csome_list_var) {
                SubLObject current;
                final SubLObject datum = current = color_pair;
                SubLObject original = (SubLObject)fact_sheets.NIL;
                SubLObject replacement = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list362);
                original = current.first();
                current = (replacement = current.rest());
                result = string_utilities.substringP(original, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                csome_list_var = csome_list_var.rest();
                color_pair = csome_list_var.first();
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 96577L)
    public static SubLObject fact_sheet_html_replace_colors(SubLObject html) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject cdolist_list_var = fact_sheets.$fact_sheet_replacement_color_spec$.getDynamicValue(thread);
        SubLObject color_pair = (SubLObject)fact_sheets.NIL;
        color_pair = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = color_pair;
            SubLObject original = (SubLObject)fact_sheets.NIL;
            SubLObject replacement = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list362);
            original = current.first();
            current = (replacement = current.rest());
            html = string_utilities.string_substitute(replacement, original, html, (SubLObject)fact_sheets.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            color_pair = cdolist_list_var.first();
        }
        return html;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 96835L)
    public static SubLObject fact_sheet_html_contains_base_url_placeholderP(final SubLObject html) {
        return string_utilities.substringP(fact_sheets.$fact_sheet_base_url_placeholder$.getGlobalValue(), html, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 96975L)
    public static SubLObject fact_sheet_html_replace_base_url_placeholder(final SubLObject html) {
        final SubLObject base_url = http_kernel.http_server_base_url((SubLObject)fact_sheets.T);
        return string_utilities.string_substitute(base_url, fact_sheets.$fact_sheet_base_url_placeholder$.getGlobalValue(), html, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97170L)
    public static SubLObject fact_sheet_html_contains_image_root_placeholderP(final SubLObject html) {
        return string_utilities.substringP(fact_sheets.$fact_sheet_image_root_placeholder$.getGlobalValue(), html, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97438L)
    public static SubLObject clear_fact_sheet_image_file_root_url() {
        final SubLObject cs = fact_sheets.$fact_sheet_image_file_root_url_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97438L)
    public static SubLObject remove_fact_sheet_image_file_root_url() {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_image_file_root_url_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(fact_sheets.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97438L)
    public static SubLObject fact_sheet_image_file_root_url_internal() {
        return (SubLObject)(fact_sheets.$fact_sheet_image_file_root_directory$.getGlobalValue().isString() ? Sequences.cconcatenate((SubLObject)fact_sheets.$str364$file___, fact_sheets.$fact_sheet_image_file_root_directory$.getGlobalValue()) : fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97438L)
    public static SubLObject fact_sheet_image_file_root_url() {
        SubLObject caching_state = fact_sheets.$fact_sheet_image_file_root_url_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym363$FACT_SHEET_IMAGE_FILE_ROOT_URL, (SubLObject)fact_sheets.$sym365$_FACT_SHEET_IMAGE_FILE_ROOT_URL_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQL, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, (SubLObject)fact_sheets.UNPROVIDED);
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_image_file_root_url_internal()));
            memoization_state.caching_state_set_zero_arg_results(caching_state, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97711L)
    public static SubLObject use_fact_sheet_image_file_root_urlP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return list_utilities.sublisp_boolean(fact_sheets.$use_fact_sheet_image_file_root_urlP$.getDynamicValue(thread));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 97889L)
    public static SubLObject relative_fact_sheet_image_url(SubLObject local_root) {
        if (local_root == fact_sheets.UNPROVIDED) {
            local_root = (SubLObject)fact_sheets.NIL;
        }
        return (SubLObject)fact_sheets.$str366$___img_;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 98000L)
    public static SubLObject fact_sheet_html_replace_image_root_placeholder(final SubLObject html, SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (fact_sheets.$kw70$DEFAULT == domain_mt) {
            domain_mt = fact_sheet_default_domain_mt();
        }
        final SubLObject local_root = fact_sheet_image_url_root(domain_mt);
        if (fact_sheets.NIL == string_utilities.non_empty_string_p(local_root)) {
            return html;
        }
        final SubLObject root = (fact_sheet_image_file_root_url().isString() && fact_sheets.NIL != use_fact_sheet_image_file_root_urlP()) ? fact_sheet_image_file_root_url() : ((fact_sheets.NIL != fact_sheets.$use_relative_fact_sheet_image_urlsP$.getDynamicValue(thread)) ? relative_fact_sheet_image_url(local_root) : http_kernel.get_absolute_url(local_root, (SubLObject)fact_sheets.T));
        final SubLObject replaced = string_utilities.string_substitute(root, fact_sheets.$fact_sheet_image_root_placeholder$.getGlobalValue(), html, (SubLObject)fact_sheets.UNPROVIDED);
        return replaced;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 98686L)
    public static SubLObject clear_fact_sheet_image_url_root() {
        final SubLObject cs = fact_sheets.$fact_sheet_image_url_root_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 98686L)
    public static SubLObject remove_fact_sheet_image_url_root(final SubLObject domain_mt) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_image_url_root_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(domain_mt), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 98686L)
    public static SubLObject fact_sheet_image_url_root_internal(final SubLObject domain_mt) {
        return ask_utilities.query_variable((SubLObject)fact_sheets.$sym368$_URL, (SubLObject)fact_sheets.$list369, domain_mt, (SubLObject)fact_sheets.UNPROVIDED).first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 98686L)
    public static SubLObject fact_sheet_image_url_root(final SubLObject domain_mt) {
        SubLObject caching_state = fact_sheets.$fact_sheet_image_url_root_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym367$FACT_SHEET_IMAGE_URL_ROOT, (SubLObject)fact_sheets.$sym370$_FACT_SHEET_IMAGE_URL_ROOT_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, domain_mt, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_image_url_root_internal(domain_mt)));
            memoization_state.caching_state_put(caching_state, domain_mt, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 98861L)
    public static SubLObject fact_sheet_image_path_okP(final SubLObject path) {
        return (SubLObject)SubLObjectFactory.makeBoolean(path.isString() && fact_sheets.NIL != file_utilities.file_existsP(Sequences.cconcatenate(fact_sheets.$fact_sheet_image_file_root_directory$.getGlobalValue(), path)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 99095L)
    public static SubLObject fact_sheet_query_sentence(SubLObject kbq, SubLObject assertion_to_test) {
        if (kbq == fact_sheets.UNPROVIDED) {
            kbq = fact_sheets.$const371$FactSheetSentenceQuery;
        }
        if (assertion_to_test == fact_sheets.UNPROVIDED) {
            assertion_to_test = (SubLObject)fact_sheets.NIL;
        }
        SubLObject kbq_sentence = kb_query.kbq_sentence(kbq);
        if (fact_sheets.NIL != assertion_to_test) {
            kbq_sentence = simplifier.conjoin((SubLObject)ConsesLow.list(kbq_sentence, (SubLObject)ConsesLow.list(fact_sheets.$const372$equalSymbols, (SubLObject)fact_sheets.$sym373$_SENTENCE, assertions_high.assertion_ist_formula(assertion_to_test))), (SubLObject)fact_sheets.UNPROVIDED);
        }
        return kbq_sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 99431L)
    public static SubLObject get_mini_fact_sheet_for_term_in_html(final SubLObject v_term, SubLObject domain_mt, SubLObject language_mt) {
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject query_sentence = (SubLObject)fact_sheets.NIL;
        SubLObject v_properties = (SubLObject)fact_sheets.NIL;
        if (domain_mt == fact_sheets.$kw70$DEFAULT) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.$kw70$DEFAULT) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
        final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
            thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
            final SubLObject query_mt = fact_sheet_anytime_mt(domain_mt);
            final SubLObject kbq = fact_sheets.$const374$MiniFactSheetSentenceQuery;
            final SubLObject _prev_bind_0_$106 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
            try {
                fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
                query_sentence = cycl_utilities.expression_subst(language_mt, fact_sheets.$const375$TerrorismParaphraseMt, fact_sheet_query_sentence(kbq, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                v_properties = fact_sheet_query_properties(kbq, (SubLObject)fact_sheets.UNPROVIDED);
            }
            finally {
                fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_0_$106, thread);
            }
        }
        finally {
            thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
            fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
        }
        SubLObject current;
        final SubLObject datum = current = get_mini_fact_sheet_for_term_cached(v_term, domain_mt, query_sentence, v_properties);
        SubLObject html = (SubLObject)fact_sheets.NIL;
        SubLObject formatting_directives = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list376);
        html = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list376);
        formatting_directives = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            if (fact_sheets.NIL == html) {
                html = fallback_mini_fact_sheet_for_term_in_html(v_term, domain_mt, language_mt);
            }
            if (fact_sheets.NIL == string_utilities.substringP(api_widgets.$mini_fact_sheet_to_fact_sheet_link_text$.getGlobalValue(), html, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != term_ok_for_fact_sheet_p(v_term, (SubLObject)fact_sheets.UNPROVIDED)) {
                SubLObject normal_fact_sheet_link = (SubLObject)fact_sheets.NIL;
                final SubLObject bogus_url = fact_sheet_bogus_url_for_term(v_term);
                SubLObject stream = (SubLObject)fact_sheets.NIL;
                try {
                    stream = streams_high.make_private_string_output_stream();
                    final SubLObject _prev_bind_3 = html_macros.$html_stream$.currentBinding(thread);
                    try {
                        html_macros.$html_stream$.bind(stream, thread);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$107 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                            final SubLObject _prev_bind_0_$108 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                                final SubLObject _prev_bind_0_$109 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$109, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                                final SubLObject _prev_bind_0_$110 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                                    html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                                    html_utilities.html_markup(bogus_url);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$111 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                                        html_utilities.html_princ(api_widgets.$mini_fact_sheet_to_fact_sheet_link_text$.getGlobalValue());
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$111, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$110, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$108, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$107, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_stream$.rebind(_prev_bind_3, thread);
                    }
                    normal_fact_sheet_link = streams_high.get_output_stream_string(stream);
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
                html = Sequences.cconcatenate(html, normal_fact_sheet_link);
            }
            return (SubLObject)ConsesLow.list(html, formatting_directives);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list376);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 101405L)
    public static SubLObject clear_get_mini_fact_sheet_for_term_cached() {
        final SubLObject cs = fact_sheets.$get_mini_fact_sheet_for_term_cached_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 101405L)
    public static SubLObject remove_get_mini_fact_sheet_for_term_cached(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$get_mini_fact_sheet_for_term_cached_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, domain_mt, query_sentence, v_properties), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 101405L)
    public static SubLObject get_mini_fact_sheet_for_term_cached_internal(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject html = (SubLObject)fact_sheets.NIL;
        final SubLObject formatting_directives = (SubLObject)fact_sheets.NIL;
        final SubLObject query_mt = fact_sheet_anytime_mt(domain_mt);
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
        final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
        final SubLObject _prev_bind_3 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
            thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
            fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
            final SubLObject query_results = fact_sheet_sentence_query(query_sentence, query_mt, v_properties);
            html = query_results.first();
            if (html.isString()) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str378$Query_got_mini_fact_sheet_of_leng, Sequences.length(html), v_term);
                    streams_high.force_output(stream);
                }
            }
            else {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str379$Query_failed_to_get_mini_fact_she, v_term);
                    streams_high.force_output(stream);
                }
            }
        }
        finally {
            fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_3, thread);
            thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
            fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)ConsesLow.list(html, formatting_directives);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 101405L)
    public static SubLObject get_mini_fact_sheet_for_term_cached(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
        SubLObject caching_state = fact_sheets.$get_mini_fact_sheet_for_term_cached_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym377$GET_MINI_FACT_SHEET_FOR_TERM_CACHED, (SubLObject)fact_sheets.$sym380$_GET_MINI_FACT_SHEET_FOR_TERM_CACHED_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.FOUR_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_4(v_term, domain_mt, query_sentence, v_properties);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (domain_mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (query_sentence.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && v_properties.equal(cached_args.first())) {
                                return memoization_state.caching_results(results2);
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_mini_fact_sheet_for_term_cached_internal(v_term, domain_mt, query_sentence, v_properties)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, domain_mt, query_sentence, v_properties));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 102111L)
    public static SubLObject fallback_mini_fact_sheet_for_term_in_html(final SubLObject v_term, final SubLObject domain_mt, final SubLObject language_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject html = (SubLObject)fact_sheets.NIL;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
            try {
                html_macros.$html_stream$.bind(stream, thread);
                html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup((SubLObject)fact_sheets.ZERO_INTEGER);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$112 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$113 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$114 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$114, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$115 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                            html_utilities.html_princ(pph_main.generate_phrase(v_term, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.NIL, language_mt, domain_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$115, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$113, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$112, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_stream$.rebind(_prev_bind_0, thread);
            }
            html = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        return html;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 102428L)
    public static SubLObject fact_sheet_query_properties(SubLObject kbq, SubLObject verbosity) {
        if (kbq == fact_sheets.UNPROVIDED) {
            kbq = fact_sheets.$const371$FactSheetSentenceQuery;
        }
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw381$VERBOSE;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject v_properties = kb_query.kbq_query_properties(kbq);
        final SubLObject inference_max_time = inference_datastructures_enumerated_types.inference_properties_max_time(v_properties);
        final SubLObject fact_sheet_max_time = fact_sheet_query_soft_timeout_time_left();
        if (fact_sheets.NIL != fact_sheet_queries_browsableP()) {
            v_properties = conses_high.putf(v_properties, (SubLObject)fact_sheets.$kw139$BROWSABLE_, (SubLObject)fact_sheets.T);
        }
        if (fact_sheets.NIL != fact_sheet_max_time) {
            final SubLObject min_max = (fact_sheets.NIL != inference_max_time && inference_max_time.numL(fact_sheet_max_time)) ? inference_max_time : fact_sheet_max_time;
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str382$Using_soft_query_timeout_of__S_se, min_max);
                streams_high.force_output(stream);
            }
            v_properties = conses_high.putf(v_properties, (SubLObject)fact_sheets.$kw90$MAX_TIME, min_max);
        }
        else if (fact_sheets.NIL != inference_max_time && fact_sheets.NIL != forts.fort_p(fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread)) && fact_sheet_term_gaf_priority(fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread)).numG((SubLObject)fact_sheets.TWENTY_INTEGER)) {
            v_properties = conses_high.putf(v_properties, (SubLObject)fact_sheets.$kw90$MAX_TIME, (SubLObject)fact_sheets.NIL);
            v_properties = conses_high.putf(v_properties, (SubLObject)fact_sheets.$kw383$PROBABLY_APPROXIMATELY_DONE, (SubLObject)fact_sheets.$float384$0_99);
        }
        return v_properties;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 103756L)
    public static SubLObject omitted_fact_sheet_sentences() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return fact_sheets.$omitted_fact_sheet_sentences$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 103845L)
    public static SubLObject fact_sheet_sentences_for_assertion_and_term(final SubLObject v_term, final SubLObject assertion, SubLObject domain_mt) {
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
        final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
            thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
            final SubLObject query_mt = fact_sheet_anytime_mt(domain_mt);
            final SubLObject _prev_bind_0_$116 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$117 = fact_sheets.$omitted_fact_sheet_sentences$.currentBinding(thread);
            try {
                fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
                fact_sheets.$omitted_fact_sheet_sentences$.bind(set.new_set(Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED), thread);
                SubLObject timed_outP = fact_sheet_query_soft_timeout_time_reachedP();
                SubLObject store = (SubLObject)fact_sheets.NIL;
                try {
                    store = inference_datastructures_problem_store.new_problem_store((SubLObject)fact_sheets.UNPROVIDED);
                    if (fact_sheets.NIL == timed_outP) {
                        SubLObject csome_list_var = kb_query.new_cyc_query_from_kbq(fact_sheets.$const385$GetFactSheetBuilderQueriesForTopi, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$kw386$RETURN, (SubLObject)fact_sheets.$list387, (SubLObject)fact_sheets.$kw145$PROBLEM_STORE, store), (SubLObject)fact_sheets.UNPROVIDED);
                        SubLObject kbq = (SubLObject)fact_sheets.NIL;
                        kbq = csome_list_var.first();
                        while (fact_sheets.NIL == timed_outP && fact_sheets.NIL != csome_list_var) {
                            if (fact_sheets.NIL != kb_indexing_datastructures.indexed_term_p(kbq)) {
                                ans = ConsesLow.append(ans, fact_sheet_sentences_for_term_from_kbq(v_term, kbq, domain_mt, store, assertion));
                                timed_outP = fact_sheet_query_soft_timeout_time_reachedP();
                            }
                            csome_list_var = csome_list_var.rest();
                            kbq = csome_list_var.first();
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$117 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        if (fact_sheets.NIL == fact_sheet_queries_browsableP()) {
                            inference_datastructures_problem_store.destroy_problem_store(store);
                        }
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$117, thread);
                    }
                }
            }
            finally {
                fact_sheets.$omitted_fact_sheet_sentences$.rebind(_prev_bind_1_$117, thread);
                fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_0_$116, thread);
            }
        }
        finally {
            thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
            fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
        }
        return group_fact_sheet_sentences_alist(stable_sort_fact_sheet_sentences(ans));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 104880L)
    public static SubLObject fact_sheet_sentences_for_term(final SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
        final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
            thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
            final SubLObject query_mt = fact_sheet_anytime_mt(domain_mt);
            final SubLObject _prev_bind_0_$119 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$120 = fact_sheets.$omitted_fact_sheet_sentences$.currentBinding(thread);
            try {
                fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
                fact_sheets.$omitted_fact_sheet_sentences$.bind(set.new_set(Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED), thread);
                if (fact_sheets.NIL != fact_sheets.$use_fact_sheet_builder_queriesP$.getDynamicValue(thread) && fact_sheets.NIL != constants_high.find_constant((SubLObject)fact_sheets.$str388$FactSheetBuilderQuery) && fact_sheet_term_gaf_priority(v_term).numG((SubLObject)fact_sheets.TEN_INTEGER)) {
                    SubLObject timed_outP = fact_sheet_query_soft_timeout_time_reachedP();
                    if (fact_sheets.NIL == timed_outP) {
                        SubLObject store = (SubLObject)fact_sheets.NIL;
                        try {
                            store = inference_datastructures_problem_store.new_problem_store((SubLObject)fact_sheets.UNPROVIDED);
                            if (fact_sheets.NIL == timed_outP) {
                                SubLObject csome_list_var = kb_query.new_cyc_query_from_kbq(fact_sheets.$const385$GetFactSheetBuilderQueriesForTopi, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$kw386$RETURN, (SubLObject)fact_sheets.$list387, (SubLObject)fact_sheets.$kw145$PROBLEM_STORE, store), (SubLObject)fact_sheets.UNPROVIDED);
                                SubLObject kbq = (SubLObject)fact_sheets.NIL;
                                kbq = csome_list_var.first();
                                while (fact_sheets.NIL == timed_outP && fact_sheets.NIL != csome_list_var) {
                                    if (fact_sheets.NIL != kb_indexing_datastructures.indexed_term_p(kbq) && fact_sheets.NIL != list_utilities.non_empty_list_p(kb_query.kbq_sentences(kbq))) {
                                        ans = ConsesLow.append(ans, fact_sheet_sentences_for_term_from_kbq(v_term, kbq, domain_mt, store, (SubLObject)fact_sheets.UNPROVIDED));
                                        timed_outP = fact_sheet_query_soft_timeout_time_reachedP();
                                    }
                                    csome_list_var = csome_list_var.rest();
                                    kbq = csome_list_var.first();
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$120 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (fact_sheets.NIL == fact_sheet_queries_browsableP()) {
                                    inference_datastructures_problem_store.destroy_problem_store(store);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$120, thread);
                            }
                        }
                    }
                }
                else {
                    final SubLObject query_sentence = fact_sheet_query_sentence((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject v_properties = fact_sheet_query_properties((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                    ans = fact_sheet_sentences_for_term_internal(v_term, domain_mt, query_sentence, v_properties);
                }
                if (fact_sheets.NIL != fact_sheets.$include_miscellaneous_on_fact_sheetsP$.getDynamicValue(thread)) {
                    ans = add_thcl_fact_sheet_sentences(v_term, query_mt, ans);
                }
            }
            finally {
                fact_sheets.$omitted_fact_sheet_sentences$.rebind(_prev_bind_1_$120, thread);
                fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_0_$119, thread);
            }
        }
        finally {
            thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
            fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
        }
        return group_fact_sheet_sentences_alist(stable_sort_fact_sheet_sentences(ans));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 106395L)
    public static SubLObject clear_fact_sheet_sentences_for_term_from_kbq() {
        final SubLObject cs = fact_sheets.$fact_sheet_sentences_for_term_from_kbq_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 106395L)
    public static SubLObject remove_fact_sheet_sentences_for_term_from_kbq(final SubLObject v_term, final SubLObject kbq, SubLObject domain_mt, SubLObject store, SubLObject limit_to_assertion) {
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (store == fact_sheets.UNPROVIDED) {
            store = (SubLObject)fact_sheets.NIL;
        }
        if (limit_to_assertion == fact_sheets.UNPROVIDED) {
            limit_to_assertion = (SubLObject)fact_sheets.NIL;
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_sentences_for_term_from_kbq_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, kbq, domain_mt, store, limit_to_assertion), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 106395L)
    public static SubLObject fact_sheet_sentences_for_term_from_kbq_internal(final SubLObject v_term, final SubLObject kbq, final SubLObject domain_mt, final SubLObject store, final SubLObject limit_to_assertion) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject sentences = (SubLObject)fact_sheets.NIL;
        final SubLObject query_mt = fact_sheet_anytime_mt(domain_mt);
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
            final SubLObject query_sentence = fact_sheet_query_sentence(kbq, limit_to_assertion);
            final SubLObject v_properties = conses_high.putf(fact_sheet_query_properties(kbq, (SubLObject)fact_sheets.$kw35$NORMAL), (SubLObject)fact_sheets.$kw145$PROBLEM_STORE, store);
            SubLObject p_time = (SubLObject)fact_sheets.NIL;
            SubLObject error_message = (SubLObject)fact_sheets.NIL;
            final SubLObject time_var = Time.get_internal_real_time();
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0_$122 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        sentences = fact_sheet_sentences_for_term_internal(v_term, domain_mt, query_sentence, v_properties);
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0_$122, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
            p_time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
            if (error_message.isString()) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str390$Caught_error_while_running__S_for, new SubLObject[] { kbq, v_term, error_message });
                    streams_high.force_output(stream);
                }
            }
            if (fact_sheets.NIL == list_utilities.empty_list_p(sentences)) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str391$_S____yielded__D_paragraph__P_in_, new SubLObject[] { kbq, Sequences.length(sentences), numeric_date_utilities.readable_elapsed_time_string(p_time, (SubLObject)fact_sheets.UNPROVIDED), v_term });
                    streams_high.force_output(stream);
                }
            }
            return sentences;
        }
        finally {
            fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 106395L)
    public static SubLObject fact_sheet_sentences_for_term_from_kbq(final SubLObject v_term, final SubLObject kbq, SubLObject domain_mt, SubLObject store, SubLObject limit_to_assertion) {
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (store == fact_sheets.UNPROVIDED) {
            store = (SubLObject)fact_sheets.NIL;
        }
        if (limit_to_assertion == fact_sheets.UNPROVIDED) {
            limit_to_assertion = (SubLObject)fact_sheets.NIL;
        }
        SubLObject caching_state = fact_sheets.$fact_sheet_sentences_for_term_from_kbq_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym389$FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ, (SubLObject)fact_sheets.$sym392$_FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ_CACHING_STATE_, (SubLObject)fact_sheets.$int393$128, (SubLObject)fact_sheets.EQL, (SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_5(v_term, kbq, domain_mt, store, limit_to_assertion);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.eql(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (kbq.eql(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (domain_mt.eql(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (store.eql(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && limit_to_assertion.eql(cached_args.first())) {
                                    return memoization_state.caching_results(results2);
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_sentences_for_term_from_kbq_internal(v_term, kbq, domain_mt, store, limit_to_assertion)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, kbq, domain_mt, store, limit_to_assertion));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 107422L)
    public static SubLObject clear_fact_sheet_sentences_for_term_internal() {
        final SubLObject cs = fact_sheets.$fact_sheet_sentences_for_term_internal_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 107422L)
    public static SubLObject remove_fact_sheet_sentences_for_term_internal(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_sentences_for_term_internal_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, domain_mt, query_sentence, v_properties), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 107422L)
    public static SubLObject fact_sheet_sentences_for_term_internal_internal(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject sentences = (SubLObject)fact_sheets.NIL;
        SubLObject cleaned_up_sentences = (SubLObject)fact_sheets.NIL;
        final SubLObject query_mt = fact_sheet_anytime_mt(domain_mt);
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
        final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
        final SubLObject _prev_bind_3 = fact_sheets.$fact_sheet_query_mt$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
            thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
            fact_sheets.$fact_sheet_query_mt$.bind(query_mt, thread);
            thread.resetMultipleValues();
            final SubLObject query_results = fact_sheet_sentence_query(query_sentence, query_mt, v_properties);
            final SubLObject query_halt_reason = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (fact_sheets.NIL != inference_datastructures_enumerated_types.inference_error_suspend_status_p(query_halt_reason)) {
                Dynamic.sublisp_throw((SubLObject)fact_sheets.$kw395$FACT_SHEET_INFERENCE_ERROR, query_halt_reason);
            }
            SubLObject cdolist_list_var = query_results;
            SubLObject cons = (SubLObject)fact_sheets.NIL;
            cons = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = cons;
                SubLObject pred = (SubLObject)fact_sheets.NIL;
                SubLObject summary_sentence = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list396);
                pred = current.first();
                current = (summary_sentence = current.rest());
                if (fact_sheets.NIL != el_utilities.ist_sentence_p(summary_sentence, (SubLObject)fact_sheets.UNPROVIDED)) {
                    final SubLObject as = czer_meta.find_assertion_cycl(summary_sentence, (SubLObject)fact_sheets.UNPROVIDED);
                    if (fact_sheets.NIL != as) {
                        summary_sentence = as;
                    }
                }
                if (fact_sheets.NIL != fact_sheet_summary_sentence_passes_data_gathering_time_filterP(summary_sentence, v_term, query_mt)) {
                    sentences = list_utilities.alist_pushnew(sentences, pred, summary_sentence, Symbols.symbol_function((SubLObject)fact_sheets.EQL), Symbols.symbol_function((SubLObject)fact_sheets.EQUAL));
                }
                cdolist_list_var = cdolist_list_var.rest();
                cons = cdolist_list_var.first();
            }
            SubLObject cdolist_list_var2 = sentences;
            SubLObject cons2 = (SubLObject)fact_sheets.NIL;
            cons2 = cdolist_list_var2.first();
            while (fact_sheets.NIL != cdolist_list_var2) {
                SubLObject current2;
                final SubLObject datum2 = current2 = cons2;
                SubLObject pred2 = (SubLObject)fact_sheets.NIL;
                SubLObject summary_sentences = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)fact_sheets.$list397);
                pred2 = current2.first();
                current2 = (summary_sentences = current2.rest());
                final SubLObject unsubsumed = list_utilities.remove_subsumed_items(summary_sentences, (SubLObject)fact_sheets.$sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject subsumed = conses_high.set_difference(summary_sentences, unsubsumed, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED);
                cleaned_up_sentences = list_utilities.alist_enter(cleaned_up_sentences, pred2, unsubsumed, (SubLObject)fact_sheets.UNPROVIDED);
                if (fact_sheets.NIL != set.set_p(omitted_fact_sheet_sentences())) {
                    SubLObject cdolist_list_var_$123 = subsumed;
                    SubLObject subsumed_sentence = (SubLObject)fact_sheets.NIL;
                    subsumed_sentence = cdolist_list_var_$123.first();
                    while (fact_sheets.NIL != cdolist_list_var_$123) {
                        set.set_add(subsumed_sentence, omitted_fact_sheet_sentences());
                        cdolist_list_var_$123 = cdolist_list_var_$123.rest();
                        subsumed_sentence = cdolist_list_var_$123.first();
                    }
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                cons2 = cdolist_list_var2.first();
            }
        }
        finally {
            fact_sheets.$fact_sheet_query_mt$.rebind(_prev_bind_3, thread);
            thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
            fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
        }
        return cleaned_up_sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 107422L)
    public static SubLObject fact_sheet_sentences_for_term_internal(final SubLObject v_term, final SubLObject domain_mt, final SubLObject query_sentence, final SubLObject v_properties) {
        SubLObject caching_state = fact_sheets.$fact_sheet_sentences_for_term_internal_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym394$FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL, (SubLObject)fact_sheets.$sym399$_FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.FOUR_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_4(v_term, domain_mt, query_sentence, v_properties);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (domain_mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (query_sentence.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && v_properties.equal(cached_args.first())) {
                                return memoization_state.caching_results(results2);
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_sentences_for_term_internal_internal(v_term, domain_mt, query_sentence, v_properties)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, domain_mt, query_sentence, v_properties));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 109434L)
    public static SubLObject fact_sheet_sentence_about_topicP(final SubLObject sentence, final SubLObject topic, SubLObject mt, SubLObject strictness, SubLObject threshold) {
        if (mt == fact_sheets.UNPROVIDED) {
            mt = mt_relevance_macros.inference_relevant_mt();
        }
        if (strictness == fact_sheets.UNPROVIDED) {
            strictness = (SubLObject)fact_sheets.$float401$0_5;
        }
        if (threshold == fact_sheets.UNPROVIDED) {
            threshold = (SubLObject)fact_sheets.TEN_INTEGER;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != number_utilities.non_negative_number_p(strictness) : strictness;
        assert fact_sheets.NIL != subl_promotions.non_negative_integer_p(threshold) : threshold;
        final SubLObject pred = cycl_utilities.formula_arg0(sentence);
        SubLObject min_count = (SubLObject)fact_sheets.NIL;
        SubLObject min_topic_count = (SubLObject)fact_sheets.NIL;
        SubLObject okP = (SubLObject)fact_sheets.NIL;
        SubLObject doneP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == okP) {
            SubLObject csome_list_var;
            SubLObject argnum;
            for (csome_list_var = list_utilities.alist_lookup(fact_sheets.$fact_sheet_pred_aboutness_map$.getGlobalValue(), pred, Symbols.symbol_function((SubLObject)fact_sheets.EQL), (SubLObject)fact_sheets.NIL), argnum = (SubLObject)fact_sheets.NIL, argnum = csome_list_var.first(); fact_sheets.NIL == okP && fact_sheets.NIL != csome_list_var; okP = Equality.eql(topic, cycl_utilities.formula_arg(sentence, argnum, (SubLObject)fact_sheets.UNPROVIDED)), csome_list_var = csome_list_var.rest(), argnum = csome_list_var.first()) {}
        }
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            SubLObject argnum2 = (SubLObject)fact_sheets.ZERO_INTEGER;
            final SubLObject args = cycl_utilities.formula_args(sentence, (SubLObject)fact_sheets.$kw146$IGNORE);
            SubLObject rest;
            SubLObject arg;
            SubLObject count;
            for (rest = (SubLObject)fact_sheets.NIL, rest = args; fact_sheets.NIL == doneP && fact_sheets.NIL != rest; rest = rest.rest()) {
                arg = rest.first();
                argnum2 = Numbers.add(argnum2, (SubLObject)fact_sheets.ONE_INTEGER);
                if (fact_sheets.NIL != forts.fort_p(arg)) {
                    count = number_utilities.f_1_(kb_indexing.relevant_num_gaf_arg_index(arg, argnum2, pred));
                    if (arg.eql(topic) && (fact_sheets.NIL == min_topic_count || count.numL(min_topic_count))) {
                        min_topic_count = count;
                        if (count.numLE(threshold)) {
                            okP = (SubLObject)fact_sheets.T;
                            doneP = (SubLObject)fact_sheets.T;
                        }
                    }
                    else if (fact_sheets.NIL == min_count || count.numL(min_count)) {
                        min_count = count;
                    }
                }
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        if (fact_sheets.NIL != min_topic_count && (fact_sheets.NIL == min_count || Numbers.multiply(strictness, min_topic_count).numLE(min_count))) {
            okP = (SubLObject)fact_sheets.T;
        }
        return okP;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 110572L)
    public static SubLObject clear_fact_sheet_sentence_trivially_impliesP() {
        final SubLObject cs = fact_sheets.$fact_sheet_sentence_trivially_impliesP_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 110572L)
    public static SubLObject remove_fact_sheet_sentence_trivially_impliesP(final SubLObject sentence1, final SubLObject sentence2, SubLObject mt, SubLObject really_trivialP, SubLObject allow_inductionP) {
        if (mt == fact_sheets.UNPROVIDED) {
            mt = ((fact_sheets.NIL != fact_sheets.$fact_sheet_query_mt$.getDynamicValue()) ? fact_sheets.$fact_sheet_query_mt$.getDynamicValue() : fact_sheets.$const174$BaseKB);
        }
        if (really_trivialP == fact_sheets.UNPROVIDED) {
            really_trivialP = (SubLObject)fact_sheets.NIL;
        }
        if (allow_inductionP == fact_sheets.UNPROVIDED) {
            allow_inductionP = (SubLObject)fact_sheets.T;
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_sentence_trivially_impliesP_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(sentence1, sentence2, mt, really_trivialP, allow_inductionP), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 110572L)
    public static SubLObject fact_sheet_sentence_trivially_impliesP_internal(final SubLObject sentence1, final SubLObject sentence2, final SubLObject mt, final SubLObject really_trivialP, final SubLObject allow_inductionP) {
        final SubLObject formula1 = fact_sheet_sentence_formula(sentence1);
        final SubLObject formula2 = fact_sheet_sentence_formula(sentence2);
        if (fact_sheets.NIL != formula_pattern_match.formula_matches_pattern(formula1, (SubLObject)fact_sheets.$list402) && cycl_utilities.formula_terms(sentence2, (SubLObject)fact_sheets.UNPROVIDED).equal(reader.bq_cons(fact_sheets.$const403$relationInstanceExists, Sequences.subseq(cycl_utilities.formula_terms(sentence1, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.FOUR_INTEGER)))) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str404$_S___implies__S, sentence1, sentence2);
                streams_high.force_output(stream);
            }
            return (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL != formula_pattern_match.formula_matches_pattern(formula2, (SubLObject)fact_sheets.$list405) && list_utilities.first_n((SubLObject)fact_sheets.TWO_INTEGER, cycl_utilities.formula_terms(sentence1, (SubLObject)fact_sheets.UNPROVIDED)).equal(list_utilities.first_n((SubLObject)fact_sheets.TWO_INTEGER, cycl_utilities.formula_args(sentence2, (SubLObject)fact_sheets.UNPROVIDED))) && fact_sheets.NIL != isa.isaP(cycl_utilities.formula_arg2(sentence1, (SubLObject)fact_sheets.UNPROVIDED), cycl_utilities.formula_arg3(sentence2, (SubLObject)fact_sheets.UNPROVIDED), mt, (SubLObject)fact_sheets.UNPROVIDED)) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str404$_S___implies__S, sentence1, sentence2);
                streams_high.force_output(stream);
            }
            return (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL != assertion_handles.assertion_p(sentence1) && fact_sheets.NIL != assertion_handles.assertion_p(sentence2) && fact_sheets.NIL != fact_sheet_trivial_meta_supportP(sentence2, sentence1)) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str406$_S___is_a_trivial_meta_support_of, sentence1, sentence2);
                streams_high.force_output(stream);
            }
            return (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL == el_utilities.same_formula_arity_p(sentence1, sentence2, (SubLObject)fact_sheets.UNPROVIDED)) {
            return (SubLObject)fact_sheets.NIL;
        }
        if (fact_sheets.NIL != assertion_handles.assertion_p(sentence1) && fact_sheets.NIL != assertion_handles.assertion_p(sentence2) && fact_sheets.NIL == assertion_mt_times_visibleP(sentence2, sentence1)) {
            return (SubLObject)fact_sheets.NIL;
        }
        if (fact_sheets.NIL != genl_predicates.genl_predicate_in_any_mtP(cycl_utilities.formula_arg0(sentence1), cycl_utilities.formula_arg0(sentence2)) && fact_sheets.NIL != fact_sheet_args_imply_args_for_pred(cycl_utilities.formula_args(sentence1, (SubLObject)fact_sheets.UNPROVIDED), cycl_utilities.formula_args(sentence2, (SubLObject)fact_sheets.UNPROVIDED), cycl_utilities.formula_arg0(sentence1), mt, really_trivialP)) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str404$_S___implies__S, sentence1, sentence2);
                streams_high.force_output(stream);
            }
            return (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL != el_utilities.formula_arityE(sentence1, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != genl_predicates.genl_inverseP(cycl_utilities.formula_arg0(sentence1), cycl_utilities.formula_arg0(sentence2), fact_sheets.$const253$InferencePSC, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != fact_sheet_args_imply_args_for_pred(cycl_utilities.formula_args(sentence1, (SubLObject)fact_sheets.UNPROVIDED), Sequences.reverse(cycl_utilities.formula_args(sentence2, (SubLObject)fact_sheets.UNPROVIDED)), cycl_utilities.formula_arg0(sentence1), mt, really_trivialP)) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str404$_S___implies__S, sentence1, sentence2);
                streams_high.force_output(stream);
            }
            return (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL == allow_inductionP) {
            return (SubLObject)fact_sheets.NIL;
        }
        if (fact_sheets.$const407$isa.eql(cycl_utilities.formula_arg0(sentence1)) && fact_sheets.NIL != Sequences.find(cycl_utilities.formula_arg1(sentence1, (SubLObject)fact_sheets.UNPROVIDED), cycl_utilities.formula_args(sentence2, (SubLObject)fact_sheets.UNPROVIDED), Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != fact_highly_prevalent_among_instancesP(cycl_utilities.formula_arg2(sentence1, (SubLObject)fact_sheets.UNPROVIDED), sentence2, cycl_utilities.formula_arg_positions(sentence2, cycl_utilities.formula_arg1(sentence1, (SubLObject)fact_sheets.UNPROVIDED), Symbols.symbol_function((SubLObject)fact_sheets.EQUAL)).first(), mt)) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str408$_S___is_highly_prevalent_among_in, sentence2, cycl_utilities.formula_arg2(sentence1, (SubLObject)fact_sheets.UNPROVIDED));
                streams_high.force_output(stream);
            }
            return (SubLObject)fact_sheets.T;
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 110572L)
    public static SubLObject fact_sheet_sentence_trivially_impliesP(final SubLObject sentence1, final SubLObject sentence2, SubLObject mt, SubLObject really_trivialP, SubLObject allow_inductionP) {
        if (mt == fact_sheets.UNPROVIDED) {
            mt = ((fact_sheets.NIL != fact_sheets.$fact_sheet_query_mt$.getDynamicValue()) ? fact_sheets.$fact_sheet_query_mt$.getDynamicValue() : fact_sheets.$const174$BaseKB);
        }
        if (really_trivialP == fact_sheets.UNPROVIDED) {
            really_trivialP = (SubLObject)fact_sheets.NIL;
        }
        if (allow_inductionP == fact_sheets.UNPROVIDED) {
            allow_inductionP = (SubLObject)fact_sheets.T;
        }
        SubLObject caching_state = fact_sheets.$fact_sheet_sentence_trivially_impliesP_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_, (SubLObject)fact_sheets.$sym409$_FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES__CACHING_STATE_, (SubLObject)fact_sheets.$int393$128, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_5(sentence1, sentence2, mt, really_trivialP, allow_inductionP);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence1.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (sentence2.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (mt.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (really_trivialP.equal(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && allow_inductionP.equal(cached_args.first())) {
                                    return memoization_state.caching_results(results2);
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_sentence_trivially_impliesP_internal(sentence1, sentence2, mt, really_trivialP, allow_inductionP)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence1, sentence2, mt, really_trivialP, allow_inductionP));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 113404L)
    public static SubLObject fact_highly_prevalent_among_instancesP(final SubLObject collection, final SubLObject sentence, final SubLObject argnum, final SubLObject mt) {
        final SubLObject dummified = el_utilities.replace_formula_arg(argnum, (SubLObject)fact_sheets.$kw410$REPLACEME, sentence);
        return fact_highly_prevalent_among_instancesP_cached(collection, dummified, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 113647L)
    public static SubLObject clear_fact_highly_prevalent_among_instancesP_cached() {
        final SubLObject cs = fact_sheets.$fact_highly_prevalent_among_instancesP_cached_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 113647L)
    public static SubLObject remove_fact_highly_prevalent_among_instancesP_cached(final SubLObject collection, final SubLObject sentence, final SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_highly_prevalent_among_instancesP_cached_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(collection, sentence, mt), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 113647L)
    public static SubLObject fact_highly_prevalent_among_instancesP_cached_internal(final SubLObject collection, final SubLObject sentence, final SubLObject mt) {
        SubLObject checked = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject holds = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject cdolist_list_var = isa.sample_leaf_instances(collection, (SubLObject)fact_sheets.TEN_INTEGER, mt, (SubLObject)fact_sheets.UNPROVIDED);
        SubLObject instance = (SubLObject)fact_sheets.NIL;
        instance = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            if (fact_sheets.NIL != czer_meta.find_visible_assertions_cycl(cycl_utilities.formula_subst(instance, (SubLObject)fact_sheets.$kw410$REPLACEME, sentence, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), mt)) {
                holds = Numbers.add(holds, (SubLObject)fact_sheets.ONE_INTEGER);
            }
            checked = Numbers.add(checked, (SubLObject)fact_sheets.ONE_INTEGER);
            cdolist_list_var = cdolist_list_var.rest();
            instance = cdolist_list_var.first();
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(checked.numG((SubLObject)fact_sheets.ONE_INTEGER) && Numbers.divide(holds, checked).numG((SubLObject)fact_sheets.$float412$0_9));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 113647L)
    public static SubLObject fact_highly_prevalent_among_instancesP_cached(final SubLObject collection, final SubLObject sentence, final SubLObject mt) {
        SubLObject caching_state = fact_sheets.$fact_highly_prevalent_among_instancesP_cached_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym411$FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED, (SubLObject)fact_sheets.$sym413$_FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED_CACHING_STATE_, (SubLObject)fact_sheets.$int414$256, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.THREE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(collection, sentence, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (collection.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (sentence.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_highly_prevalent_among_instancesP_cached_internal(collection, sentence, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(collection, sentence, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 114057L)
    public static SubLObject fact_sheet_sentence_formula(final SubLObject sentence) {
        if (fact_sheets.NIL != assertion_handles.assertion_p(sentence)) {
            return fi.assertion_hl_formula(sentence, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 114216L)
    public static SubLObject fact_sheet_trivial_meta_supportP(final SubLObject assertion, final SubLObject support) {
        SubLObject ans = (SubLObject)fact_sheets.NIL;
        final SubLObject support_sentence = arguments.support_sentence(support);
        SubLObject rest;
        SubLObject argument;
        SubLObject supports;
        for (rest = (SubLObject)fact_sheets.NIL, rest = assertions_high.assertion_arguments(assertion); fact_sheets.NIL == ans && fact_sheets.NIL != rest; rest = rest.rest()) {
            argument = rest.first();
            if (fact_sheets.NIL != deduction_handles.deduction_p(argument)) {
                supports = Sequences.remove_if((SubLObject)fact_sheets.$sym415$RULE_ASSERTION_, deductions_high.deduction_supports(argument), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                if (fact_sheets.NIL != list_utilities.singletonP(supports) && arguments.support_sentence(supports.first()).equal(support_sentence)) {
                    ans = (SubLObject)fact_sheets.T;
                }
            }
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 114676L)
    public static SubLObject assertion_mt_times_visibleP(final SubLObject assertion1, final SubLObject assertion2) {
        final SubLObject interval1 = hlmt.explode_hlmt_temporal_facets_with_defaults(assertions_high.assertion_mt(assertion1));
        final SubLObject interval2 = hlmt.explode_hlmt_temporal_facets_with_defaults(assertions_high.assertion_mt(assertion2));
        if (fact_sheets.NIL != hlmt_relevance.subsumed_time_intervalP(interval1, interval2)) {
            return (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL != fact_sheet_skolem_time_intervalP(interval1) && fact_sheets.NIL != fact_sheet_skolem_time_intervalP(interval2) && fact_sheets.NIL != fact_sheet_skolem_time_interval_more_constrainedP(interval2, interval1)) {
            return (SubLObject)fact_sheets.T;
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 115332L)
    public static SubLObject fact_sheet_skolem_time_intervalP(final SubLObject interval) {
        if (fact_sheets.NIL != formula_pattern_match.formula_matches_pattern(interval, (SubLObject)fact_sheets.$list416)) {
            return (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL != term.skolem_nartP(interval) && fact_sheets.NIL != kb_mapping_utilities.some_pred_value_in_any_mt(interval, fact_sheets.$const417$temporallySubsumes, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.UNPROVIDED)) {
            return (SubLObject)fact_sheets.T;
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 115622L)
    public static SubLObject fact_sheet_skolem_time_interval_more_constrainedP(final SubLObject specific, final SubLObject general) {
        return hlmt_relevance.subsumed_time_intervalP(fact_sheet_skolem_time_interval_subsuming_interval(specific), fact_sheet_skolem_time_interval_subsuming_interval(general));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 115869L)
    public static SubLObject fact_sheet_skolem_time_interval_subsuming_interval(final SubLObject interval) {
        SubLObject ans = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != formula_pattern_match.formula_matches_pattern(interval, (SubLObject)fact_sheets.$list416)) {
            ans = cycl_utilities.nat_arg1(interval, (SubLObject)fact_sheets.UNPROVIDED);
        }
        else if (fact_sheets.NIL != term.skolem_nartP(interval)) {
            ans = kb_mapping_utilities.fpred_value_in_any_mt(interval, fact_sheets.$const417$temporallySubsumes, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return (fact_sheets.NIL != ans) ? ans : fact_sheets.$const418$Always_TimeInterval;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 116254L)
    public static SubLObject fact_sheet_args_imply_args_for_pred(final SubLObject args1, final SubLObject args2, final SubLObject pred, SubLObject mt, SubLObject really_trivialP) {
        if (mt == fact_sheets.UNPROVIDED) {
            mt = ((fact_sheets.NIL != fact_sheets.$fact_sheet_query_mt$.getDynamicValue()) ? fact_sheets.$fact_sheet_query_mt$.getDynamicValue() : fact_sheets.$const174$BaseKB);
        }
        if (really_trivialP == fact_sheets.UNPROVIDED) {
            really_trivialP = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (args1.equal(args2)) {
            return (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL != really_trivialP) {
            return (SubLObject)fact_sheets.NIL;
        }
        if (fact_sheets.NIL != tva_utilities.some_tva_for_predicate(pred)) {
            SubLObject badP = (SubLObject)fact_sheets.NIL;
            if (fact_sheets.NIL == badP) {
                SubLObject end_var;
                SubLObject argnum;
                SubLObject arg1;
                SubLObject arg2;
                SubLObject goodP;
                SubLObject deck_type;
                SubLObject recur_deck;
                SubLObject node_and_predicate_mode;
                SubLObject _prev_bind_0;
                SubLObject tv_var;
                SubLObject _prev_bind_0_$124;
                SubLObject _prev_bind_2;
                SubLObject pcase_var;
                SubLObject _prev_bind_0_$125;
                SubLObject _prev_bind_1_$126;
                SubLObject _prev_bind_3;
                SubLObject _prev_bind_4;
                SubLObject _prev_bind_5;
                SubLObject _prev_bind_0_$126;
                SubLObject _prev_bind_1_$127;
                SubLObject _prev_bind_2_$129;
                SubLObject node_var_$130;
                SubLObject predicate_mode;
                SubLObject spec_pred;
                SubLObject _prev_bind_0_$127;
                SubLObject inverse_modeP;
                SubLObject csome_list_var;
                SubLObject tva_pred;
                SubLObject csome_list_var_$132;
                SubLObject transitive_predicate;
                SubLObject pcase_var2;
                SubLObject accessible_modules;
                SubLObject rest;
                SubLObject module_var;
                SubLObject _prev_bind_0_$128;
                SubLObject _prev_bind_1_$128;
                SubLObject node;
                SubLObject d_link;
                SubLObject mt_links;
                SubLObject iteration_state;
                SubLObject mt_$135;
                SubLObject tv_links;
                SubLObject _prev_bind_0_$129;
                SubLObject iteration_state_$137;
                SubLObject tv;
                SubLObject link_nodes;
                SubLObject _prev_bind_0_$130;
                SubLObject sol;
                SubLObject set_contents_var;
                SubLObject basis_object;
                SubLObject state;
                SubLObject node_vars_link_node;
                SubLObject csome_list_var2;
                SubLObject node_vars_link_node2;
                SubLObject new_list;
                SubLObject rest_$139;
                SubLObject generating_fn;
                SubLObject _prev_bind_0_$131;
                SubLObject sol2;
                SubLObject link_nodes2;
                SubLObject set_contents_var2;
                SubLObject basis_object2;
                SubLObject state2;
                SubLObject node_vars_link_node3;
                SubLObject csome_list_var3;
                SubLObject node_vars_link_node4;
                SubLObject _prev_bind_0_$132;
                SubLObject _values;
                for (end_var = number_utilities.f_1X(Sequences.length(args1)), argnum = (SubLObject)fact_sheets.NIL, argnum = (SubLObject)fact_sheets.ONE_INTEGER; fact_sheets.NIL == badP && !argnum.numGE(end_var); badP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == goodP), argnum = number_utilities.f_1X(argnum)) {
                    arg1 = ConsesLow.nth(number_utilities.f_1_(argnum), args1);
                    arg2 = ConsesLow.nth(number_utilities.f_1_(argnum), args2);
                    goodP = Equality.equal(arg1, arg2);
                    if (fact_sheets.NIL == goodP) {
                        deck_type = (SubLObject)fact_sheets.$kw421$QUEUE;
                        recur_deck = deck.create_deck(deck_type);
                        node_and_predicate_mode = (SubLObject)fact_sheets.NIL;
                        _prev_bind_0 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                            try {
                                tv_var = (SubLObject)fact_sheets.NIL;
                                _prev_bind_0_$124 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                _prev_bind_2 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_tv$.bind((fact_sheets.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((fact_sheets.NIL != tv_var) ? fact_sheets.$sym422$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                                    if (fact_sheets.NIL != tv_var && fact_sheets.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && fact_sheets.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                        pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                        if (pcase_var.eql((SubLObject)fact_sheets.$kw423$ERROR)) {
                                            sbhl_paranoia.sbhl_error((SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                        }
                                        else if (pcase_var.eql((SubLObject)fact_sheets.$kw426$CERROR)) {
                                            sbhl_paranoia.sbhl_cerror((SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.$str427$continue_anyway, (SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                        }
                                        else if (pcase_var.eql((SubLObject)fact_sheets.$kw428$WARN)) {
                                            Errors.warn((SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P);
                                        }
                                        else {
                                            Errors.warn((SubLObject)fact_sheets.$str429$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                            Errors.cerror((SubLObject)fact_sheets.$str427$continue_anyway, (SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P);
                                        }
                                    }
                                    _prev_bind_0_$125 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                    _prev_bind_1_$126 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                    _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                    _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_vars.get_sbhl_module(fact_sheets.$const430$genlPreds), thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_vars.get_sbhl_module(fact_sheets.$const430$genlPreds)), thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_vars.get_sbhl_module(fact_sheets.$const430$genlPreds)), thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)fact_sheets.NIL, thread);
                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module(fact_sheets.$const430$genlPreds), thread);
                                        if (fact_sheets.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || fact_sheets.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(pred, sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED))) {
                                            _prev_bind_0_$126 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                            _prev_bind_1_$127 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                            _prev_bind_2_$129 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_vars.get_sbhl_module(fact_sheets.$const430$genlPreds)), thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)fact_sheets.NIL, thread);
                                                sbhl_marking_utilities.sbhl_mark_node_marked(pred, (SubLObject)fact_sheets.UNPROVIDED);
                                                for (node_and_predicate_mode = (SubLObject)ConsesLow.list(pred, sbhl_search_vars.genl_inverse_mode_p()); fact_sheets.NIL != node_and_predicate_mode && fact_sheets.NIL == goodP; node_and_predicate_mode = deck.deck_pop(recur_deck)) {
                                                    node_var_$130 = node_and_predicate_mode.first();
                                                    predicate_mode = conses_high.second(node_and_predicate_mode);
                                                    spec_pred = node_var_$130;
                                                    _prev_bind_0_$127 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind(predicate_mode, thread);
                                                        inverse_modeP = predicate_mode;
                                                        if (fact_sheets.NIL == goodP) {
                                                            csome_list_var = tva_utilities.get_tva_predicates();
                                                            tva_pred = (SubLObject)fact_sheets.NIL;
                                                            tva_pred = csome_list_var.first();
                                                            while (fact_sheets.NIL == goodP && fact_sheets.NIL != csome_list_var) {
                                                                if (fact_sheets.NIL == badP) {
                                                                    csome_list_var_$132 = tva_utilities.tva_gather_transitive_predicates_for_arg(tva_pred, spec_pred, argnum, inverse_modeP, (SubLObject)fact_sheets.UNPROVIDED);
                                                                    transitive_predicate = (SubLObject)fact_sheets.NIL;
                                                                    transitive_predicate = csome_list_var_$132.first();
                                                                    while (fact_sheets.NIL == badP && fact_sheets.NIL != csome_list_var_$132) {
                                                                        pcase_var2 = tva_pred;
                                                                        if (pcase_var2.eql(fact_sheets.$const431$transitiveViaArgInverse)) {
                                                                            goodP = fact_sheet_transitivity_check(el_utilities.make_binary_formula(transitive_predicate, arg2, arg1), mt);
                                                                        }
                                                                        else if (pcase_var2.eql(fact_sheets.$const432$transitiveViaArg)) {
                                                                            goodP = fact_sheet_transitivity_check(el_utilities.make_binary_formula(transitive_predicate, arg1, arg2), mt);
                                                                        }
                                                                        csome_list_var_$132 = csome_list_var_$132.rest();
                                                                        transitive_predicate = csome_list_var_$132.first();
                                                                    }
                                                                }
                                                                csome_list_var = csome_list_var.rest();
                                                                tva_pred = csome_list_var.first();
                                                            }
                                                        }
                                                        accessible_modules = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module(fact_sheets.$const430$genlPreds));
                                                        for (rest = (SubLObject)fact_sheets.NIL, rest = accessible_modules; fact_sheets.NIL == goodP && fact_sheets.NIL != rest; rest = rest.rest()) {
                                                            module_var = rest.first();
                                                            _prev_bind_0_$128 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                            _prev_bind_1_$128 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                            try {
                                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((fact_sheets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(fact_sheets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                                node = function_terms.naut_to_nart(node_var_$130);
                                                                if (fact_sheets.NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                    d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED));
                                                                    if (fact_sheets.NIL != d_link) {
                                                                        mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED));
                                                                        if (fact_sheets.NIL != mt_links) {
                                                                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); fact_sheets.NIL == goodP && fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                                thread.resetMultipleValues();
                                                                                mt_$135 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                tv_links = thread.secondMultipleValue();
                                                                                thread.resetMultipleValues();
                                                                                if (fact_sheets.NIL != mt_relevance_macros.relevant_mtP(mt_$135)) {
                                                                                    _prev_bind_0_$129 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt_$135, thread);
                                                                                        for (iteration_state_$137 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); fact_sheets.NIL == goodP && fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$137); iteration_state_$137 = dictionary_contents.do_dictionary_contents_next(iteration_state_$137)) {
                                                                                            thread.resetMultipleValues();
                                                                                            tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$137);
                                                                                            link_nodes = thread.secondMultipleValue();
                                                                                            thread.resetMultipleValues();
                                                                                            if (fact_sheets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                                _prev_bind_0_$130 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                                    sol = link_nodes;
                                                                                                    if (fact_sheets.NIL != set.set_p(sol)) {
                                                                                                        set_contents_var = set.do_set_internal(sol);
                                                                                                        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)fact_sheets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); fact_sheets.NIL == goodP && fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                            node_vars_link_node = set_contents.do_set_contents_next(basis_object, state);
                                                                                                            if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state, node_vars_link_node) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                                                deck.deck_push((SubLObject)ConsesLow.list(node_vars_link_node, sbhl_search_vars.genl_inverse_mode_p()), recur_deck);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else if (sol.isList()) {
                                                                                                        if (fact_sheets.NIL == goodP) {
                                                                                                            csome_list_var2 = sol;
                                                                                                            node_vars_link_node2 = (SubLObject)fact_sheets.NIL;
                                                                                                            node_vars_link_node2 = csome_list_var2.first();
                                                                                                            while (fact_sheets.NIL == goodP && fact_sheets.NIL != csome_list_var2) {
                                                                                                                if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                                                    deck.deck_push((SubLObject)ConsesLow.list(node_vars_link_node2, sbhl_search_vars.genl_inverse_mode_p()), recur_deck);
                                                                                                                }
                                                                                                                csome_list_var2 = csome_list_var2.rest();
                                                                                                                node_vars_link_node2 = csome_list_var2.first();
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                    }
                                                                                                }
                                                                                                finally {
                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$130, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_$137);
                                                                                    }
                                                                                    finally {
                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$129, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                        }
                                                                    }
                                                                    else {
                                                                        sbhl_paranoia.sbhl_error((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)fact_sheets.$str434$attempting_to_bind_direction_link, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                                                    }
                                                                }
                                                                else if (fact_sheets.NIL != obsolete.cnat_p(node, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                    new_list = ((fact_sheets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED)));
                                                                    for (rest_$139 = (SubLObject)fact_sheets.NIL, rest_$139 = new_list; fact_sheets.NIL == goodP && fact_sheets.NIL != rest_$139; rest_$139 = rest_$139.rest()) {
                                                                        generating_fn = rest_$139.first();
                                                                        _prev_bind_0_$131 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                            link_nodes2 = (sol2 = Functions.funcall(generating_fn, node));
                                                                            if (fact_sheets.NIL != set.set_p(sol2)) {
                                                                                set_contents_var2 = set.do_set_internal(sol2);
                                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)fact_sheets.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); fact_sheets.NIL == goodP && fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                    if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state2, node_vars_link_node3) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                        deck.deck_push((SubLObject)ConsesLow.list(node_vars_link_node3, sbhl_search_vars.genl_inverse_mode_p()), recur_deck);
                                                                                    }
                                                                                }
                                                                            }
                                                                            else if (sol2.isList()) {
                                                                                if (fact_sheets.NIL == goodP) {
                                                                                    csome_list_var3 = sol2;
                                                                                    node_vars_link_node4 = (SubLObject)fact_sheets.NIL;
                                                                                    node_vars_link_node4 = csome_list_var3.first();
                                                                                    while (fact_sheets.NIL == goodP && fact_sheets.NIL != csome_list_var3) {
                                                                                        if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                            deck.deck_push((SubLObject)ConsesLow.list(node_vars_link_node4, sbhl_search_vars.genl_inverse_mode_p()), recur_deck);
                                                                                        }
                                                                                        csome_list_var3 = csome_list_var3.rest();
                                                                                        node_vars_link_node4 = csome_list_var3.first();
                                                                                    }
                                                                                }
                                                                            }
                                                                            else {
                                                                                Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                            }
                                                                        }
                                                                        finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$131, thread);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            finally {
                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$128, thread);
                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$128, thread);
                                                            }
                                                        }
                                                    }
                                                    finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$127, thread);
                                                    }
                                                }
                                            }
                                            finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$129, thread);
                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$127, thread);
                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$126, thread);
                                            }
                                        }
                                        else {
                                            sbhl_paranoia.sbhl_warn((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.$str435$Node__a_does_not_pass_sbhl_type_t, pred, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED)), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                        }
                                    }
                                    finally {
                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$126, thread);
                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$125, thread);
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_2, thread);
                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$124, thread);
                                }
                            }
                            finally {
                                _prev_bind_0_$132 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                    _values = Values.getValuesAsVector();
                                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$132, thread);
                                }
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0, thread);
                        }
                    }
                }
            }
            return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == badP);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 117578L)
    public static SubLObject clear_fact_sheet_transitivity_check() {
        final SubLObject cs = fact_sheets.$fact_sheet_transitivity_check_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 117578L)
    public static SubLObject remove_fact_sheet_transitivity_check(final SubLObject sentence, final SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_transitivity_check_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(sentence, mt), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 117578L)
    public static SubLObject fact_sheet_transitivity_check_internal(final SubLObject sentence, final SubLObject mt) {
        if (fact_sheets.NIL != tva_inference.tva_unify_from_cache(sentence, mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            return (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL != cycl_grammar.cycl_atomic_sentence_p(sentence) && fact_sheets.NIL != backward.removal_ask(sentence, mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            return (SubLObject)fact_sheets.T;
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 117578L)
    public static SubLObject fact_sheet_transitivity_check(final SubLObject sentence, final SubLObject mt) {
        SubLObject caching_state = fact_sheets.$fact_sheet_transitivity_check_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym436$FACT_SHEET_TRANSITIVITY_CHECK, (SubLObject)fact_sheets.$sym437$_FACT_SHEET_TRANSITIVITY_CHECK_CACHING_STATE_, (SubLObject)fact_sheets.$int260$1024, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(sentence, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_transitivity_check_internal(sentence, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 117890L)
    public static SubLObject add_thcl_fact_sheet_sentences(final SubLObject v_term, final SubLObject query_mt, SubLObject sentences) {
        SubLObject misc_sentences = (SubLObject)fact_sheets.NIL;
        SubLObject time = (SubLObject)fact_sheets.NIL;
        final SubLObject time_var = Time.get_internal_real_time();
        SubLObject cdolist_list_var = thcl_sentences_for_term_fact_sheet(v_term, query_mt);
        SubLObject gaf = (SubLObject)fact_sheets.NIL;
        gaf = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            final SubLObject gaf_formula = assertions_high.gaf_formula(gaf);
            SubLObject skip_sentenceP;
            SubLObject rest;
            SubLObject cons;
            SubLObject current;
            SubLObject datum;
            SubLObject key;
            SubLObject pred_sentences;
            for (skip_sentenceP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != set.set_p(omitted_fact_sheet_sentences()) && (fact_sheets.NIL != set.set_memberP(gaf, omitted_fact_sheet_sentences()) || fact_sheets.NIL != set.set_memberP(gaf_formula, omitted_fact_sheet_sentences()))), rest = (SubLObject)fact_sheets.NIL, rest = sentences; fact_sheets.NIL == skip_sentenceP && fact_sheets.NIL != rest; rest = rest.rest()) {
                cons = rest.first();
                datum = (current = cons);
                key = (SubLObject)fact_sheets.NIL;
                pred_sentences = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list438);
                key = current.first();
                current = (pred_sentences = current.rest());
                if (fact_sheets.NIL != subl_promotions.memberP(gaf, pred_sentences, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) || fact_sheets.NIL != subl_promotions.memberP(gaf_formula, pred_sentences, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED)) {
                    skip_sentenceP = (SubLObject)fact_sheets.T;
                }
            }
            if (fact_sheets.NIL == skip_sentenceP) {
                misc_sentences = (SubLObject)ConsesLow.cons(gaf, misc_sentences);
            }
            cdolist_list_var = cdolist_list_var.rest();
            gaf = cdolist_list_var.first();
        }
        if (fact_sheets.NIL != misc_sentences) {
            misc_sentences = list_utilities.delete_subsumed_items(misc_sentences, (SubLObject)fact_sheets.$sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_, (SubLObject)fact_sheets.UNPROVIDED);
            sentences = list_utilities.alist_enter(sentences, fact_sheets.$fact_sheet_thcl_section_category$.getGlobalValue(), misc_sentences, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL));
        }
        time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
        final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
        if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
            PrintLow.format(stream, (SubLObject)fact_sheets.$str439$Added__D_THCL_sentence__P_in__5F_, Sequences.length(misc_sentences), time);
            streams_high.force_output(stream);
        }
        return sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 119022L)
    public static SubLObject thcl_sentences_for_term_fact_sheet(final SubLObject v_term, SubLObject domain_mt) {
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject misc_sentences = (SubLObject)fact_sheets.NIL;
        final SubLObject query_mt = fact_sheet_anytime_mt(domain_mt);
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        final SubLObject _prev_bind_4 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            thcl.$thcl_forts_by_fiat$.bind((SubLObject)ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
            final SubLObject local_state;
            final SubLObject state = local_state = memoization_state.possibly_new_memoization_state();
            final SubLObject _prev_bind_0_$142 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    SubLObject cdolist_list_var = thcl_preds_for_term_fact_sheet(v_term, (SubLObject)fact_sheets.UNPROVIDED);
                    SubLObject item = (SubLObject)fact_sheets.NIL;
                    item = cdolist_list_var.first();
                    while (fact_sheets.NIL != cdolist_list_var) {
                        SubLObject current;
                        final SubLObject datum = current = item;
                        SubLObject pred = (SubLObject)fact_sheets.NIL;
                        SubLObject argnum = (SubLObject)fact_sheets.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list440);
                        pred = current.first();
                        current = (argnum = current.rest());
                        final SubLObject pred_var = pred;
                        if (fact_sheets.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(v_term, argnum, pred_var)) {
                            final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(v_term, argnum, pred_var);
                            SubLObject done_var = (SubLObject)fact_sheets.NIL;
                            final SubLObject token_var = (SubLObject)fact_sheets.NIL;
                            while (fact_sheets.NIL == done_var) {
                                final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                                final SubLObject valid = (SubLObject)SubLObjectFactory.makeBoolean(!token_var.eql(final_index_spec));
                                if (fact_sheets.NIL != valid) {
                                    SubLObject final_index_iterator = (SubLObject)fact_sheets.NIL;
                                    try {
                                        final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, (SubLObject)fact_sheets.$kw441$GAF, (SubLObject)fact_sheets.$kw360$TRUE, (SubLObject)fact_sheets.NIL);
                                        SubLObject done_var_$143 = (SubLObject)fact_sheets.NIL;
                                        final SubLObject token_var_$144 = (SubLObject)fact_sheets.NIL;
                                        while (fact_sheets.NIL == done_var_$143) {
                                            final SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$144);
                                            final SubLObject valid_$145 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$144.eql(gaf));
                                            if (fact_sheets.NIL != valid_$145 && fact_sheets.NIL != fact_sheet_summary_sentence_passes_data_gathering_time_filterP(gaf, v_term, query_mt)) {
                                                misc_sentences = (SubLObject)ConsesLow.cons(gaf, misc_sentences);
                                            }
                                            done_var_$143 = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == valid_$145);
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$143 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                            final SubLObject _values = Values.getValuesAsVector();
                                            if (fact_sheets.NIL != final_index_iterator) {
                                                kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                            }
                                            Values.restoreValuesFromVector(_values);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$143, thread);
                                        }
                                    }
                                }
                                done_var = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == valid);
                            }
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        item = cdolist_list_var.first();
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$144 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$144, thread);
                    }
                }
            }
            finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0_$142, thread);
            }
        }
        finally {
            thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_4, thread);
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return misc_sentences;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 119677L)
    public static SubLObject thcl_preds_for_term_fact_sheet(final SubLObject v_term, SubLObject cutoff) {
        if (cutoff == fact_sheets.UNPROVIDED) {
            cutoff = (SubLObject)fact_sheets.SIX_INTEGER;
        }
        SubLObject thcl_preds = (SubLObject)fact_sheets.NIL;
        final SubLObject set_var = pred_argnum_combos_for_term(v_term);
        final SubLObject set_contents_var = set.do_set_internal(set_var);
        SubLObject basis_object;
        SubLObject state;
        SubLObject item;
        SubLObject current;
        SubLObject datum;
        SubLObject pred;
        SubLObject argnum;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)fact_sheets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            item = set_contents.do_set_contents_next(basis_object, state);
            if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state, item)) {
                datum = (current = item);
                pred = (SubLObject)fact_sheets.NIL;
                argnum = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list440);
                pred = current.first();
                current = (argnum = current.rest());
                if (kb_indexing.num_gaf_arg_index(v_term, argnum, pred, (SubLObject)fact_sheets.UNPROVIDED).numL(cutoff)) {
                    thcl_preds = (SubLObject)ConsesLow.cons(item, thcl_preds);
                }
            }
        }
        return thcl_preds;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 120050L)
    public static SubLObject fact_sheet_queries_browsableP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return fact_sheets.$fact_sheet_queries_browsableP$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 120206L)
    public static SubLObject new_fact_sheet_query_daemon() {
        final SubLObject spec = Vectors.make_vector((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.NIL);
        final SubLObject daemon = process_utilities.make_cyc_server_process_with_args((SubLObject)fact_sheets.$str442$Fact_Sheet_Query_Daemon, (SubLObject)fact_sheets.$sym443$FACT_SHEET_QUERY_DAEMON_RUN, (SubLObject)ConsesLow.list(spec));
        Vectors.set_aref(spec, (SubLObject)fact_sheets.ONE_INTEGER, daemon);
        stacks.stack_push(spec, fact_sheets.$fact_sheet_query_spec_pool$.getGlobalValue());
        return daemon;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 120577L)
    public static SubLObject fact_sheet_query_daemon_run(final SubLObject spec) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        while (true) {
            if (fact_sheets.NIL == Vectors.aref(spec, (SubLObject)fact_sheets.ZERO_INTEGER)) {
                Threads.sleep(fact_sheets.$fact_sheet_query_polling_interval$.getGlobalValue());
            }
            else {
                SubLObject error_message = (SubLObject)fact_sheets.NIL;
                SubLObject sentence = (SubLObject)fact_sheets.NIL;
                SubLObject mt = (SubLObject)fact_sheets.NIL;
                SubLObject v_properties = (SubLObject)fact_sheets.NIL;
                SubLObject focal_term = (SubLObject)fact_sheets.NIL;
                try {
                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                    final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                        try {
                            final SubLObject datum_evaluated_var = Vectors.aref(spec, (SubLObject)fact_sheets.ZERO_INTEGER);
                            sentence = datum_evaluated_var.first();
                            mt = conses_high.cadr(datum_evaluated_var);
                            v_properties = conses_high.cddr(datum_evaluated_var).first();
                            focal_term = conses_high.cadr(conses_high.cddr(datum_evaluated_var));
                            final SubLObject _prev_bind_0_$148 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
                            final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
                            try {
                                fact_sheets.$fact_sheet_focal_term$.bind(focal_term, thread);
                                thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(focal_term)) ? ConsesLow.cons(focal_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
                                final SubLObject static_properties = inference_datastructures_enumerated_types.extract_inference_static_properties(v_properties);
                                final SubLObject problem_store_privateP = Types.sublisp_null(inference_datastructures_enumerated_types.inference_properties_problem_store(static_properties));
                                final SubLObject dynamic_properties = inference_datastructures_enumerated_types.extract_inference_dynamic_properties(v_properties);
                                final SubLObject inference = inference_kernel.new_continuable_inference(sentence, mt, static_properties);
                                final SubLObject _prev_bind_0_$149 = control_vars.$perform_equals_unification$.currentBinding(thread);
                                try {
                                    control_vars.$perform_equals_unification$.bind((SubLObject)fact_sheets.NIL, thread);
                                    Vectors.set_aref(spec, (SubLObject)fact_sheets.ZERO_INTEGER, inference);
                                    inference_kernel.continue_inference(inference, dynamic_properties);
                                    while (fact_sheets.NIL != Vectors.aref(spec, (SubLObject)fact_sheets.ZERO_INTEGER)) {
                                        Threads.sleep(fact_sheets.$fact_sheet_query_polling_interval$.getGlobalValue());
                                    }
                                    if (fact_sheets.NIL != inference_datastructures_inference.valid_inference_p(inference) && fact_sheets.NIL == inference_datastructures_inference.inference_browsableP(inference)) {
                                        if (fact_sheets.NIL != problem_store_privateP) {
                                            inference_datastructures_problem_store.destroy_problem_store(inference_datastructures_inference.inference_problem_store(inference));
                                        }
                                        else {
                                            inference_datastructures_inference.destroy_inference(inference);
                                        }
                                    }
                                    stacks.stack_push(spec, fact_sheets.$fact_sheet_query_spec_pool$.getGlobalValue());
                                }
                                finally {
                                    control_vars.$perform_equals_unification$.rebind(_prev_bind_0_$149, thread);
                                }
                            }
                            finally {
                                thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
                                fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0_$148, thread);
                            }
                        }
                        catch (Throwable catch_var) {
                            Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_0, thread);
                    }
                }
                catch (Throwable ccatch_env_var) {
                    error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                }
                finally {
                    thread.throwStack.pop();
                }
                if (!error_message.isString()) {
                    continue;
                }
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T != stream || !Threads.current_process().eql(subl_promotions.initial_process())) && (!stream.isStream() || fact_sheets.NIL == streams_high.output_stream_p(stream))) {
                    continue;
                }
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str444$Fact_Sheet_Query_Daemon_caught_er, new SubLObject[] { sentence, mt, v_properties, focal_term, error_message });
                streams_high.force_output(stream);
            }
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 122100L)
    public static SubLObject free_fact_sheet_query_spec(final SubLObject spec) {
        Vectors.set_aref(spec, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.NIL);
        return spec;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 122255L)
    public static SubLObject valid_fact_sheet_query_spec_p(final SubLObject spec) {
        return (SubLObject)SubLObjectFactory.makeBoolean(spec.isVector() && fact_sheets.NIL != list_utilities.lengthE(spec, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != Threads.valid_process_p(Vectors.aref(spec, (SubLObject)fact_sheets.ONE_INTEGER)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 122401L)
    public static SubLObject new_fact_sheet_query(final SubLObject sentence, final SubLObject mt, final SubLObject v_properties, final SubLObject hard_timeout) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject spec = stacks.stack_pop(fact_sheets.$fact_sheet_query_spec_pool$.getGlobalValue());
        SubLObject inference = (SubLObject)fact_sheets.NIL;
        SubLObject query_time = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject query_results = (SubLObject)fact_sheets.NIL;
        SubLObject halt_reason = (SubLObject)fact_sheets.NIL;
        while (fact_sheets.NIL == valid_fact_sheet_query_spec_p(spec)) {
            new_fact_sheet_query_daemon();
            spec = stacks.stack_pop(fact_sheets.$fact_sheet_query_spec_pool$.getGlobalValue());
        }
        try {
            Vectors.set_aref(spec, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)ConsesLow.list(sentence, mt, v_properties, fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread)));
            while (fact_sheets.NIL == inference_datastructures_inference.inference_p(inference)) {
                inference = Vectors.aref(spec, (SubLObject)fact_sheets.ZERO_INTEGER);
                if (fact_sheets.NIL == inference_datastructures_inference.inference_p(inference)) {
                    Threads.sleep(fact_sheets.$fact_sheet_query_polling_interval$.getGlobalValue());
                }
            }
            while (fact_sheets.NIL == halt_reason) {
                halt_reason = inference_datastructures_inference.inference_suspend_status(inference);
                if (fact_sheets.NIL == halt_reason && query_time.numG(hard_timeout)) {
                    halt_reason = (SubLObject)fact_sheets.$kw445$TIMED_OUT;
                }
                if (fact_sheets.NIL != halt_reason) {
                    query_results = inference_kernel.inference_result_from_all_answers(inference);
                }
                else {
                    query_time = Numbers.add(query_time, fact_sheets.$fact_sheet_query_polling_interval$.getGlobalValue());
                    Threads.sleep(fact_sheets.$fact_sheet_query_polling_interval$.getGlobalValue());
                }
            }
        }
        finally {
            final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                free_fact_sheet_query_spec(spec);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
            }
        }
        return Values.values(query_results, halt_reason);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 123723L)
    public static SubLObject fact_sheet_sentence_query(final SubLObject query_sentence, final SubLObject query_mt, final SubLObject v_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject soft_timeout = inference_datastructures_enumerated_types.inference_properties_max_time(v_properties);
        final SubLObject hard_timeout = (SubLObject)((fact_sheets.NIL != soft_timeout) ? Numbers.multiply((SubLObject)fact_sheets.TWO_INTEGER, soft_timeout) : fact_sheets.$int446$300);
        SubLObject query_results = (SubLObject)fact_sheets.NIL;
        SubLObject halt_reason = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != fact_sheet_query_soft_timeout_time_reachedP()) {
            halt_reason = (SubLObject)fact_sheets.$kw90$MAX_TIME;
        }
        else {
            thread.resetMultipleValues();
            final SubLObject query_results_$150 = new_fact_sheet_query(query_sentence, query_mt, v_properties, hard_timeout);
            final SubLObject halt_reason_$151 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            query_results = query_results_$150;
            halt_reason = halt_reason_$151;
        }
        if (halt_reason == fact_sheets.$kw90$MAX_TIME) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str447$Hit_soft_timeout_of__S_seconds_af, new SubLObject[] { soft_timeout, Sequences.length(query_results), fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread) });
                streams_high.force_output(stream);
            }
            fact_sheet_logs.note_fact_sheet_query_timeout_in_hourly_stats();
        }
        else if (halt_reason == fact_sheets.$kw445$TIMED_OUT) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str448$Hit_hard_timeout_of__S_seconds_af, new SubLObject[] { hard_timeout, Sequences.length(query_results), fact_sheets.$fact_sheet_focal_term$.getDynamicValue(thread) });
                streams_high.force_output(stream);
            }
            fact_sheet_logs.note_fact_sheet_query_timeout_in_hourly_stats();
        }
        return Values.values(query_results, halt_reason);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 124777L)
    public static SubLObject clear_fact_sheet_label_for_category() {
        final SubLObject cs = fact_sheets.$fact_sheet_label_for_category_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 124777L)
    public static SubLObject remove_fact_sheet_label_for_category(final SubLObject category, final SubLObject language_mt, final SubLObject v_properties) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_label_for_category_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(category, language_mt, v_properties), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 124777L)
    public static SubLObject fact_sheet_label_for_category_internal(final SubLObject category, final SubLObject language_mt, final SubLObject v_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject label_pred = fact_sheets.$const450$termSummaryPredicateLabel;
        SubLObject label = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != category_label_from_properties(category, v_properties)) {
            label = new_category_label(category, category_label_from_properties(category, v_properties));
        }
        else if (fact_sheets.NIL != kb_indexing_datastructures.indexed_term_p(category) && fact_sheets.NIL != constant_handles.valid_constantP(label_pred, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != kb_mapping_utilities.fpred_value_in_relevant_mts(category, label_pred, language_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            label = new_category_label(category, kb_mapping_utilities.fpred_value_in_relevant_mts(category, label_pred, language_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
        }
        else {
            final SubLObject _prev_bind_0 = pph_vars.$pph_demerit_cutoff$.currentBinding(thread);
            try {
                pph_vars.$pph_demerit_cutoff$.bind(number_utilities.positive_infinity(), thread);
                label = pph_main.generate_phrase(category, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            }
            finally {
                pph_vars.$pph_demerit_cutoff$.rebind(_prev_bind_0, thread);
            }
            if (label.isString()) {
                label = new_category_label(category, label);
            }
        }
        return label;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 124777L)
    public static SubLObject fact_sheet_label_for_category(final SubLObject category, final SubLObject language_mt, final SubLObject v_properties) {
        SubLObject caching_state = fact_sheets.$fact_sheet_label_for_category_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym449$FACT_SHEET_LABEL_FOR_CATEGORY, (SubLObject)fact_sheets.$sym451$_FACT_SHEET_LABEL_FOR_CATEGORY_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQL, (SubLObject)fact_sheets.THREE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(category, language_mt, v_properties);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (category.eql(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (language_mt.eql(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && v_properties.eql(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_label_for_category_internal(category, language_mt, v_properties)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(category, language_mt, v_properties));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 125640L)
    public static SubLObject group_fact_sheet_sentences_alist(final SubLObject alist) {
        SubLObject result = (SubLObject)fact_sheets.NIL;
        SubLObject cdolist_list_var = alist;
        SubLObject cons = (SubLObject)fact_sheets.NIL;
        cons = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject category = (SubLObject)fact_sheets.NIL;
            SubLObject sentences = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list452);
            category = current.first();
            current = (sentences = current.rest());
            final SubLObject groups = group_fact_sheet_sentences_for_category(category, sentences);
            result = list_utilities.alist_enter(result, category, groups, (SubLObject)fact_sheets.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        return Sort.stable_sort(result, Symbols.symbol_function((SubLObject)fact_sheets.$sym126$TERM__), Symbols.symbol_function((SubLObject)fact_sheets.$sym153$CAR));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 125948L)
    public static SubLObject group_fact_sheet_sentences_for_category(final SubLObject category, final SubLObject sentences) {
        SubLObject groups = (SubLObject)fact_sheets.NIL;
        final SubLObject min_group_size = fact_sheet_min_paragraph_length();
        SubLObject current_group = (SubLObject)fact_sheets.NIL;
        SubLObject in_same_groupP = (SubLObject)fact_sheets.NIL;
        SubLObject previous_sentence = (SubLObject)fact_sheets.NIL;
        SubLObject cdolist_list_var = sort_fact_sheet_sentences_for_category(category, sentences);
        SubLObject sentence = (SubLObject)fact_sheets.NIL;
        sentence = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            final SubLObject group_with_previousP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != previous_sentence && fact_sheet_sentence_coherence_to_group(sentence, current_group).numG((SubLObject)fact_sheets.ONE_INTEGER));
            if (fact_sheets.NIL == previous_sentence) {
                current_group = (SubLObject)ConsesLow.cons(sentence, current_group);
            }
            else if (fact_sheets.NIL != group_with_previousP) {
                if (fact_sheets.NIL == in_same_groupP && fact_sheets.NIL == list_utilities.lengthL(current_group, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.UNPROVIDED)) {
                    groups = (SubLObject)ConsesLow.cons(delete_duplicate_fact_sheet_sentences(Sequences.nreverse(current_group.rest())), groups);
                    current_group = (SubLObject)ConsesLow.list(current_group.first());
                }
                current_group = (SubLObject)ConsesLow.cons(sentence, current_group);
            }
            else if (fact_sheets.NIL == in_same_groupP && fact_sheets.NIL != list_utilities.lengthL(current_group, min_group_size, (SubLObject)fact_sheets.UNPROVIDED)) {
                current_group = (SubLObject)ConsesLow.cons(sentence, current_group);
            }
            else {
                groups = (SubLObject)ConsesLow.cons(delete_duplicate_fact_sheet_sentences(Sequences.nreverse(current_group)), groups);
                current_group = (SubLObject)ConsesLow.list(sentence);
            }
            previous_sentence = sentence;
            in_same_groupP = group_with_previousP;
            cdolist_list_var = cdolist_list_var.rest();
            sentence = cdolist_list_var.first();
        }
        if (fact_sheets.NIL != current_group) {
            groups = (SubLObject)ConsesLow.cons(delete_duplicate_fact_sheet_sentences(Sequences.nreverse(current_group)), groups);
        }
        return Sequences.nreverse(groups);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 127285L)
    public static SubLObject sort_fact_sheet_sentences_for_category(final SubLObject category, final SubLObject sentences) {
        SubLObject alist = (SubLObject)fact_sheets.NIL;
        SubLObject sorted_sentences = (SubLObject)fact_sheets.NIL;
        SubLObject cdolist_list_var = sentences;
        SubLObject sentence = (SubLObject)fact_sheets.NIL;
        sentence = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            final SubLObject key = fact_sheet_sentence_precedence_for_category(sentence, category);
            alist = list_utilities.alist_push(alist, key, sentence, (SubLObject)fact_sheets.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            sentence = cdolist_list_var.first();
        }
        cdolist_list_var = list_utilities.sort_alist_by_keys(alist, Symbols.symbol_function((SubLObject)fact_sheets.$sym125$_));
        SubLObject cons = (SubLObject)fact_sheets.NIL;
        cons = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject key2 = (SubLObject)fact_sheets.NIL;
            SubLObject sentences_$152 = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list453);
            key2 = current.first();
            current = (sentences_$152 = current.rest());
            SubLObject cdolist_list_var_$153 = maximize_fact_sheet_sentence_coherence(Sort.sort(sentences_$152, (SubLObject)fact_sheets.$sym454$FACT_SHEET_SENTENCE_MORE_RECENT_, (SubLObject)fact_sheets.UNPROVIDED));
            SubLObject sentence2 = (SubLObject)fact_sheets.NIL;
            sentence2 = cdolist_list_var_$153.first();
            while (fact_sheets.NIL != cdolist_list_var_$153) {
                sorted_sentences = (SubLObject)ConsesLow.cons(sentence2, sorted_sentences);
                cdolist_list_var_$153 = cdolist_list_var_$153.rest();
                sentence2 = cdolist_list_var_$153.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        return Sequences.nreverse(sorted_sentences);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 127833L)
    public static SubLObject fact_sheet_sentence_more_recentP(final SubLObject sentence1, final SubLObject sentence2) {
        return sbhl_time_modules.ends_after_ending_ofP(fact_sheet_sentence_time_interval(sentence1), fact_sheet_sentence_time_interval(sentence2), (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 128039L)
    public static SubLObject fact_sheet_sentence_time_interval(final SubLObject sentence) {
        final SubLObject interval = fact_sheet_sentence_time_interval_cached(sentence);
        final SubLObject now = date_utilities.indexical_now();
        return cycl_utilities.expression_subst(now, fact_sheets.$const56$Now, interval, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 128248L)
    public static SubLObject clear_fact_sheet_sentence_time_interval_cached() {
        final SubLObject cs = fact_sheets.$fact_sheet_sentence_time_interval_cached_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 128248L)
    public static SubLObject remove_fact_sheet_sentence_time_interval_cached(final SubLObject sentence) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_sentence_time_interval_cached_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(sentence), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 128248L)
    public static SubLObject fact_sheet_sentence_time_interval_cached_internal(final SubLObject sentence) {
        final SubLObject v_default = fact_sheets.$const418$Always_TimeInterval;
        SubLObject interval = (fact_sheets.NIL != assertion_handles.assertion_p(sentence)) ? hlmt.explode_hlmt_temporal_facets_with_defaults(assertions_high.assertion_mt(sentence)) : v_default;
        SubLObject doneP = (SubLObject)SubLObjectFactory.makeBoolean(!interval.eql(v_default));
        final SubLObject args = cycl_utilities.formula_args(sentence, (SubLObject)fact_sheets.$kw146$IGNORE);
        SubLObject rest;
        SubLObject time_interval_arg;
        for (rest = (SubLObject)fact_sheets.NIL, rest = args; fact_sheets.NIL == doneP && fact_sheets.NIL != rest; rest = rest.rest()) {
            time_interval_arg = rest.first();
            if (fact_sheets.NIL != hlmt.time_intervalP(time_interval_arg)) {
                interval = time_interval_arg;
                doneP = (SubLObject)fact_sheets.T;
            }
        }
        return interval;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 128248L)
    public static SubLObject fact_sheet_sentence_time_interval_cached(final SubLObject sentence) {
        SubLObject caching_state = fact_sheets.$fact_sheet_sentence_time_interval_cached_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym455$FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED, (SubLObject)fact_sheets.$sym456$_FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED_CACHING_STATE_, (SubLObject)fact_sheets.$int357$200, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, sentence, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_sentence_time_interval_cached_internal(sentence)));
            memoization_state.caching_state_put(caching_state, sentence, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 128756L)
    public static SubLObject fact_sheet_sentence_precedence_for_category_internal(final SubLObject sentence, final SubLObject category) {
        if (!category.eql(fact_sheets.$const458$agentBioDataSentence)) {
            return (SubLObject)fact_sheets.ZERO_INTEGER;
        }
        final SubLObject pcase_var_$154 = cycl_utilities.formula_arg0(sentence);
        if (pcase_var_$154.eql(fact_sheets.$const407$isa) || pcase_var_$154.eql(fact_sheets.$const459$ethnicity)) {
            return (SubLObject)fact_sheets.ZERO_INTEGER;
        }
        if (pcase_var_$154.eql(fact_sheets.$const460$birthPlace) || pcase_var_$154.eql(fact_sheets.$const461$birthDate)) {
            return (SubLObject)fact_sheets.ONE_INTEGER;
        }
        if (pcase_var_$154.eql(fact_sheets.$const462$placeOfDeath) || pcase_var_$154.eql(fact_sheets.$const463$dateOfDeath)) {
            return (SubLObject)fact_sheets.FOUR_INTEGER;
        }
        return (SubLObject)fact_sheets.THREE_INTEGER;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 128756L)
    public static SubLObject fact_sheet_sentence_precedence_for_category(final SubLObject sentence, final SubLObject category) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == v_memoization_state) {
            return fact_sheet_sentence_precedence_for_category_internal(sentence, category);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, (SubLObject)fact_sheets.$sym457$FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), (SubLObject)fact_sheets.$sym457$FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, (SubLObject)fact_sheets.$sym457$FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY, caching_state);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(sentence, category);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && category.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(thread.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_sentence_precedence_for_category_internal(sentence, category)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(sentence, category));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 129249L)
    public static SubLObject maximize_fact_sheet_sentence_coherence(final SubLObject sentences) {
        SubLObject maximized = (SubLObject)fact_sheets.NIL;
        SubLObject first_sentence = (SubLObject)fact_sheets.NIL;
        SubLObject remaining = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(sentences, sentences, (SubLObject)fact_sheets.$list464);
        first_sentence = sentences.first();
        final SubLObject current = remaining = sentences.rest();
        maximized = (SubLObject)ConsesLow.cons(first_sentence, maximized);
        while (fact_sheets.NIL == list_utilities.empty_list_p(remaining)) {
            final SubLObject best_match = most_coherent_fact_sheet_sentence(maximized.first(), remaining);
            maximized = (SubLObject)ConsesLow.cons(best_match, maximized);
            remaining = Sequences.delete(best_match, remaining, Symbols.symbol_function((SubLObject)fact_sheets.$sym465$FACT_SHEET_SENTENCES_EQUAL_), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return Sequences.nreverse(maximized);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 129720L)
    public static SubLObject most_coherent_fact_sheet_sentence(final SubLObject sentence, final SubLObject remaining) {
        final SubLObject terms = cycl_utilities.expression_gather(sentence, (SubLObject)fact_sheets.$sym173$CONSTANT_P, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        SubLObject best_match = (SubLObject)fact_sheets.NIL;
        SubLObject best_coherence = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject cdolist_list_var = remaining;
        SubLObject v_this = (SubLObject)fact_sheets.NIL;
        v_this = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            final SubLObject this_coherence = fact_sheet_sentence_coherence(sentence, v_this, terms);
            if (fact_sheets.NIL == best_match || this_coherence.numG(best_coherence)) {
                if (fact_sheets.NIL != best_match) {
                    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                    if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                        PrintLow.format(stream, (SubLObject)fact_sheets.$str466$_S___has_coherence__S_to____S, new SubLObject[] { v_this, this_coherence, sentence });
                        streams_high.force_output(stream);
                    }
                }
                best_match = v_this;
                best_coherence = this_coherence;
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_this = cdolist_list_var.first();
        }
        return best_match;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 130263L)
    public static SubLObject fact_sheet_sentence_coherence_to_group(final SubLObject sentence, final SubLObject group) {
        SubLObject max = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject cdolist_list_var = group;
        SubLObject other = (SubLObject)fact_sheets.NIL;
        other = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            final SubLObject other_coherence = fact_sheet_sentence_coherence(other, sentence, (SubLObject)fact_sheets.UNPROVIDED);
            if (other_coherence.numG(max)) {
                max = other_coherence;
            }
            cdolist_list_var = cdolist_list_var.rest();
            other = cdolist_list_var.first();
        }
        return max;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 130542L)
    public static SubLObject fact_sheet_sentence_coherence_internal(final SubLObject target, final SubLObject candidate, SubLObject target_terms) {
        if (target_terms == fact_sheets.UNPROVIDED) {
            target_terms = cycl_utilities.expression_gather(target, (SubLObject)fact_sheets.$sym173$CONSTANT_P, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        }
        SubLObject coherence = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject cdolist_list_var = target_terms;
        SubLObject v_term = (SubLObject)fact_sheets.NIL;
        v_term = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            if (fact_sheets.NIL != cycl_utilities.expression_find(v_term, candidate, (SubLObject)fact_sheets.T, Symbols.symbol_function((SubLObject)fact_sheets.EQL), (SubLObject)fact_sheets.UNPROVIDED)) {
                coherence = Numbers.add(coherence, (SubLObject)fact_sheets.ONE_INTEGER);
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_term = cdolist_list_var.first();
        }
        return coherence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 130542L)
    public static SubLObject fact_sheet_sentence_coherence(final SubLObject target, final SubLObject candidate, SubLObject target_terms) {
        if (target_terms == fact_sheets.UNPROVIDED) {
            target_terms = cycl_utilities.expression_gather(target, (SubLObject)fact_sheets.$sym173$CONSTANT_P, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == v_memoization_state) {
            return fact_sheet_sentence_coherence_internal(target, candidate, target_terms);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, (SubLObject)fact_sheets.$sym467$FACT_SHEET_SENTENCE_COHERENCE, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), (SubLObject)fact_sheets.$sym467$FACT_SHEET_SENTENCE_COHERENCE, (SubLObject)fact_sheets.THREE_INTEGER, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, (SubLObject)fact_sheets.$sym467$FACT_SHEET_SENTENCE_COHERENCE, caching_state);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(target, candidate, target_terms);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (target.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (candidate.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && target_terms.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(thread.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_sentence_coherence_internal(target, candidate, target_terms)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(target, candidate, target_terms));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 130865L)
    public static SubLObject delete_duplicate_fact_sheet_sentences(final SubLObject sentences) {
        return Sequences.delete_duplicates(sentences, Symbols.symbol_function((SubLObject)fact_sheets.$sym465$FACT_SHEET_SENTENCES_EQUAL_), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 131001L)
    public static SubLObject fact_sheet_sentences_equalP(final SubLObject sentence1, final SubLObject sentence2) {
        final SubLObject ans = (SubLObject)SubLObjectFactory.makeBoolean(cycl_utilities.formula_terms(sentence1, (SubLObject)fact_sheets.UNPROVIDED).equal(cycl_utilities.formula_terms(sentence2, (SubLObject)fact_sheets.UNPROVIDED)) && (fact_sheets.NIL == assertion_handles.assertion_p(sentence1) || fact_sheets.NIL == assertion_handles.assertion_p(sentence2) || fact_sheets.NIL != fact_sheet_assertion_time_indices_equalP(sentence1, sentence2)));
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 131398L)
    public static SubLObject fact_sheet_assertion_time_indices_equalP(final SubLObject as1, final SubLObject as2) {
        return Equality.equal(fact_sheet_sentence_time_interval_cached(as1), fact_sheet_sentence_time_interval_cached(as2));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 131584L)
    public static SubLObject fact_sheet_sentence_predicate(final SubLObject sentence) {
        return (fact_sheets.NIL != el_utilities.ist_sentence_p(sentence, (SubLObject)fact_sheets.UNPROVIDED)) ? cycl_utilities.formula_arg0(cycl_utilities.formula_arg2(sentence, (SubLObject)fact_sheets.UNPROVIDED)) : cycl_utilities.formula_arg0(sentence);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 131756L)
    public static SubLObject fact_sheet_sentence_mt(final SubLObject sentence) {
        return (SubLObject)((fact_sheets.NIL != el_utilities.ist_sentence_p(sentence, (SubLObject)fact_sheets.UNPROVIDED)) ? cycl_utilities.formula_arg1(sentence, (SubLObject)fact_sheets.UNPROVIDED) : ((fact_sheets.NIL != assertion_handles.assertion_p(sentence)) ? assertions_high.assertion_mt(sentence) : fact_sheets.NIL));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 131944L)
    public static SubLObject pred_counts_for_sentences(final SubLObject sentences) {
        final SubLObject counts = dictionary.new_dictionary(Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED);
        SubLObject cdolist_list_var = sentences;
        SubLObject sentence = (SubLObject)fact_sheets.NIL;
        sentence = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            dictionary_utilities.dictionary_increment(counts, fact_sheet_sentence_predicate(sentence), (SubLObject)fact_sheets.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            sentence = cdolist_list_var.first();
        }
        return counts;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 132174L)
    public static SubLObject fact_sheet_pred_count_L(final SubLObject pred1, final SubLObject pred2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != dictionary.dictionary_p(fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.getDynamicValue(thread)) && dictionary.dictionary_lookup(fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.getDynamicValue(thread), pred1, (SubLObject)fact_sheets.ZERO_INTEGER).numL(dictionary.dictionary_lookup(fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.getDynamicValue(thread), pred2, (SubLObject)fact_sheets.ZERO_INTEGER)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 132451L)
    public static SubLObject stable_sort_fact_sheet_sentences(final SubLObject alist) {
        SubLObject result = (SubLObject)fact_sheets.NIL;
        SubLObject cdolist_list_var = alist;
        SubLObject cons = (SubLObject)fact_sheets.NIL;
        cons = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject pred = (SubLObject)fact_sheets.NIL;
            SubLObject sentences = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list468);
            pred = current.first();
            current = (sentences = current.rest());
            final SubLObject sorted = stable_sort_fact_sheet_sentences_for_category(sentences);
            result = list_utilities.alist_enter(result, pred, sorted, (SubLObject)fact_sheets.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 132719L)
    public static SubLObject stable_sort_fact_sheet_sentences_for_category(final SubLObject sentences) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.bind(pred_counts_for_sentences(sentences), thread);
            return Sort.stable_sort(Sort.stable_sort(Sort.stable_sort(sentences, Symbols.symbol_function((SubLObject)fact_sheets.$sym126$TERM__), (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$sym127$FACT_SHEET_PRED_COUNT__, (SubLObject)fact_sheets.$sym469$FACT_SHEET_SENTENCE_PREDICATE), (SubLObject)fact_sheets.$sym470$FACT_SHEET_SENTENCE_REFERENCES_EARLIER_DATE_, (SubLObject)fact_sheets.UNPROVIDED);
        }
        finally {
            fact_sheets.$fact_sheet_sentence_sorter_pred_counts$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 133085L)
    public static SubLObject fact_sheet_predicate_L(final SubLObject predicate1, final SubLObject predicate2) {
        return kb_utilities.term_L(predicate1, predicate2, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 133199L)
    public static SubLObject fact_sheet_sentence_references_earlier_dateP(final SubLObject sentence1, final SubLObject sentence2) {
        final SubLObject ans = fact_sheet_sentence_references_earlier_dateP_internal(sentence1, sentence2);
        if (fact_sheets.NIL != ans && fact_sheets.NIL != fact_sheet_sentence_references_earlier_dateP_internal(sentence2, sentence1)) {
            Errors.sublisp_break((SubLObject)fact_sheets.$str471$Earlierness_problem_____S____S, new SubLObject[] { sentence1, sentence2 });
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 133557L)
    public static SubLObject fact_sheet_sentence_references_earlier_dateP_internal(final SubLObject sentence1, final SubLObject sentence2) {
        SubLObject dates1 = cycl_utilities.expression_gather(sentence1, (SubLObject)fact_sheets.$sym472$DATE_P, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        SubLObject dates2 = cycl_utilities.expression_gather(sentence2, (SubLObject)fact_sheets.$sym472$DATE_P, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL != assertion_handles.assertion_p(sentence1)) {
            final SubLObject items_var = cycl_utilities.expression_gather(assertions_high.assertion_mt(sentence1), (SubLObject)fact_sheets.$sym472$DATE_P, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            if (items_var.isVector()) {
                final SubLObject vector_var = items_var;
                final SubLObject backwardP_var = (SubLObject)fact_sheets.NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject element_num;
                SubLObject item;
                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)fact_sheets.NIL, v_iteration = (SubLObject)fact_sheets.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)fact_sheets.ONE_INTEGER)) {
                    element_num = ((fact_sheets.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)fact_sheets.ONE_INTEGER) : v_iteration);
                    item = Vectors.aref(vector_var, element_num);
                    dates1 = (SubLObject)ConsesLow.cons(item, dates1);
                }
            }
            else {
                SubLObject cdolist_list_var = items_var;
                SubLObject item2 = (SubLObject)fact_sheets.NIL;
                item2 = cdolist_list_var.first();
                while (fact_sheets.NIL != cdolist_list_var) {
                    dates1 = (SubLObject)ConsesLow.cons(item2, dates1);
                    cdolist_list_var = cdolist_list_var.rest();
                    item2 = cdolist_list_var.first();
                }
            }
        }
        if (fact_sheets.NIL != assertion_handles.assertion_p(sentence2)) {
            final SubLObject items_var = cycl_utilities.expression_gather(assertions_high.assertion_mt(sentence2), (SubLObject)fact_sheets.$sym472$DATE_P, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            if (items_var.isVector()) {
                final SubLObject vector_var = items_var;
                final SubLObject backwardP_var = (SubLObject)fact_sheets.NIL;
                SubLObject length;
                SubLObject v_iteration;
                SubLObject element_num;
                SubLObject item;
                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)fact_sheets.NIL, v_iteration = (SubLObject)fact_sheets.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)fact_sheets.ONE_INTEGER)) {
                    element_num = ((fact_sheets.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)fact_sheets.ONE_INTEGER) : v_iteration);
                    item = Vectors.aref(vector_var, element_num);
                    dates2 = (SubLObject)ConsesLow.cons(item, dates2);
                }
            }
            else {
                SubLObject cdolist_list_var = items_var;
                SubLObject item2 = (SubLObject)fact_sheets.NIL;
                item2 = cdolist_list_var.first();
                while (fact_sheets.NIL != cdolist_list_var) {
                    dates2 = (SubLObject)ConsesLow.cons(item2, dates2);
                    cdolist_list_var = cdolist_list_var.rest();
                    item2 = cdolist_list_var.first();
                }
            }
        }
        if (fact_sheets.NIL == dates1) {
            return (SubLObject)fact_sheets.NIL;
        }
        if (fact_sheets.NIL == dates2) {
            return (SubLObject)fact_sheets.T;
        }
        return date_utilities.dateL(list_utilities.extremal(list_utilities.remove_subsumed_items(dates1, (SubLObject)fact_sheets.$sym473$EXPRESSION_CONTAINS_, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$sym474$DATE_, (SubLObject)fact_sheets.UNPROVIDED), list_utilities.extremal(list_utilities.remove_subsumed_items(dates2, (SubLObject)fact_sheets.$sym473$EXPRESSION_CONTAINS_, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$sym474$DATE_, (SubLObject)fact_sheets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 134253L)
    public static SubLObject expression_containsP(final SubLObject expression, final SubLObject v_object, SubLObject penetrate_hl_structuresP, SubLObject test, SubLObject key) {
        if (penetrate_hl_structuresP == fact_sheets.UNPROVIDED) {
            penetrate_hl_structuresP = (SubLObject)fact_sheets.NIL;
        }
        if (test == fact_sheets.UNPROVIDED) {
            test = Symbols.symbol_function((SubLObject)fact_sheets.EQL);
        }
        if (key == fact_sheets.UNPROVIDED) {
            key = Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY);
        }
        return cycl_utilities.expression_find(v_object, expression, penetrate_hl_structuresP, test, key);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 134469L)
    public static SubLObject possibly_remove_fact_sheet_sections(SubLObject html, final SubLObject v_properties, SubLObject v_term) {
        if (v_term == fact_sheets.UNPROVIDED) {
            v_term = (SubLObject)fact_sheets.NIL;
        }
        final SubLObject display_titleP_tail = cdestructuring_bind.property_list_member((SubLObject)fact_sheets.$kw475$DISPLAY_TITLE_, v_properties);
        final SubLObject display_titleP = (SubLObject)((fact_sheets.NIL != display_titleP_tail) ? conses_high.cadr(display_titleP_tail) : fact_sheets.NIL);
        final SubLObject print_statsP_tail = cdestructuring_bind.property_list_member((SubLObject)fact_sheets.$kw476$PRINT_STATS_, v_properties);
        final SubLObject print_statsP = (SubLObject)((fact_sheets.NIL != print_statsP_tail) ? conses_high.cadr(print_statsP_tail) : fact_sheets.T);
        final SubLObject show_copyrightP_tail = cdestructuring_bind.property_list_member((SubLObject)fact_sheets.$kw477$SHOW_COPYRIGHT_, v_properties);
        final SubLObject show_copyrightP = (SubLObject)((fact_sheets.NIL != show_copyrightP_tail) ? conses_high.cadr(show_copyrightP_tail) : fact_sheets.NIL);
        if (fact_sheets.NIL == display_titleP) {
            html = remove_fact_sheet_section(html, (SubLObject)fact_sheets.$kw319$TITLE, (SubLObject)fact_sheets.UNPROVIDED);
        }
        if (fact_sheets.NIL != allow_fact_sheet_evaluationsP()) {
            final SubLObject kb = get_factsheet_kb_from_html(html);
            final SubLObject system = get_factsheet_system_from_html(html);
            if (fact_sheets.NIL != kb && fact_sheets.NIL != system) {
                html = add_evaluation_link(html, v_term, operation_communication.the_cyclist(), kb, system);
            }
        }
        if (fact_sheets.NIL == print_statsP) {
            html = remove_fact_sheet_section(html, (SubLObject)fact_sheets.$kw202$STATS, (SubLObject)fact_sheets.UNPROVIDED);
        }
        if (fact_sheets.NIL == show_copyrightP) {
            html = remove_fact_sheet_section(html, (SubLObject)fact_sheets.$kw203$COPYRIGHT, v_properties);
        }
        return html;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 135254L)
    public static SubLObject get_factsheet_kb_from_html(final SubLObject html) {
        final SubLObject match = regular_expression_utilities.regexp_capturing_match((SubLObject)fact_sheets.$str478$KB____0123456789_____, html, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL != match) {
            return conses_high.second(match);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 135465L)
    public static SubLObject get_factsheet_system_from_html(final SubLObject html) {
        final SubLObject match = regular_expression_utilities.regexp_capturing_match((SubLObject)fact_sheets.$str479$System____0123456789_____, html, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL != match) {
            return conses_high.second(match);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 135655L)
    public static SubLObject fact_sheet_section_start_position(final SubLObject html, final SubLObject section_key, SubLObject v_properties) {
        if (v_properties == fact_sheets.UNPROVIDED) {
            v_properties = (SubLObject)fact_sheets.NIL;
        }
        final SubLObject start_comment = fact_sheet_optional_section_start_comment(section_key, v_properties);
        final SubLObject start_position = (SubLObject)((fact_sheets.NIL != start_comment) ? Sequences.search(start_comment, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) : fact_sheets.NIL);
        return start_position;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 135943L)
    public static SubLObject fact_sheet_section_end_position(final SubLObject html, final SubLObject section_key, final SubLObject start_position) {
        final SubLObject end_comment = (SubLObject)((fact_sheets.NIL != start_position) ? fact_sheet_optional_section_end_comment(section_key) : fact_sheets.NIL);
        final SubLObject end_comment_start = (SubLObject)((fact_sheets.NIL != end_comment) ? Sequences.search(end_comment, html, Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), Symbols.symbol_function((SubLObject)fact_sheets.IDENTITY), (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.NIL, start_position, (SubLObject)fact_sheets.UNPROVIDED) : fact_sheets.NIL);
        final SubLObject end_position = (SubLObject)((fact_sheets.NIL != end_comment_start) ? Numbers.add(Sequences.length(end_comment), end_comment_start) : fact_sheets.NIL);
        return end_position;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 136366L)
    public static SubLObject remove_fact_sheet_section(final SubLObject html, final SubLObject section_key, SubLObject v_properties) {
        if (v_properties == fact_sheets.UNPROVIDED) {
            v_properties = (SubLObject)fact_sheets.NIL;
        }
        final SubLObject start_position = fact_sheet_section_start_position(html, section_key, v_properties);
        final SubLObject end_position = fact_sheet_section_end_position(html, section_key, start_position);
        final SubLObject new_html = (fact_sheets.NIL != end_position) ? Sequences.cconcatenate(string_utilities.substring(html, (SubLObject)fact_sheets.ZERO_INTEGER, start_position), string_utilities.substring(html, end_position, (SubLObject)fact_sheets.UNPROVIDED)) : html;
        return new_html;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 136771L)
    public static SubLObject add_evaluation_link(final SubLObject html, final SubLObject v_term, SubLObject evaluator, SubLObject creation_kb, SubLObject creation_system) {
        if (evaluator == fact_sheets.UNPROVIDED) {
            evaluator = operation_communication.the_cyclist();
        }
        if (creation_kb == fact_sheets.UNPROVIDED) {
            creation_kb = (SubLObject)fact_sheets.NIL;
        }
        if (creation_system == fact_sheets.UNPROVIDED) {
            creation_system = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject link_string = (SubLObject)fact_sheets.NIL;
        SubLObject new_html = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
        try {
            html_macros.$html_stream$.bind((SubLObject)fact_sheets.NIL, thread);
            try {
                html_macros.$html_stream$.setDynamicValue(streams_high.make_private_string_output_stream(), thread);
                html_emit_fact_sheet_evaluation_link(v_term, evaluator, creation_kb, creation_system);
                link_string = streams_high.get_output_stream_string(html_macros.$html_stream$.getDynamicValue(thread));
            }
            finally {
                final SubLObject _prev_bind_0_$155 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$155, thread);
                }
            }
        }
        finally {
            html_macros.$html_stream$.rebind(_prev_bind_0, thread);
        }
        new_html = add_before_fact_sheet_section(html, (SubLObject)fact_sheets.$kw202$STATS, link_string);
        return new_html;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 137164L)
    public static SubLObject add_before_fact_sheet_section(final SubLObject html, final SubLObject section_key, final SubLObject html_to_add) {
        final SubLObject start_position = fact_sheet_section_start_position(html, section_key, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject new_html = (fact_sheets.NIL != start_position) ? Sequences.cconcatenate(string_utilities.substring(html, (SubLObject)fact_sheets.ZERO_INTEGER, start_position), new SubLObject[] { html_to_add, string_utilities.substring(html, start_position, (SubLObject)fact_sheets.UNPROVIDED) }) : Sequences.cconcatenate(html, html_to_add);
        return new_html;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 137512L)
    public static SubLObject clear_fact_sheet_optional_section_start_comment() {
        final SubLObject cs = fact_sheets.$fact_sheet_optional_section_start_comment_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 137512L)
    public static SubLObject remove_fact_sheet_optional_section_start_comment(final SubLObject section_key, SubLObject v_properties) {
        if (v_properties == fact_sheets.UNPROVIDED) {
            v_properties = (SubLObject)fact_sheets.NIL;
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_optional_section_start_comment_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(section_key, v_properties), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 137512L)
    public static SubLObject fact_sheet_optional_section_start_comment_internal(final SubLObject section_key, final SubLObject v_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject comment = (SubLObject)fact_sheets.NIL;
        if (section_key == fact_sheets.$kw203$COPYRIGHT && fact_sheets.NIL != conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw191$STYLESHEET, (SubLObject)fact_sheets.UNPROVIDED)) {
            comment = Sequences.cconcatenate(html_macros.$html_hr_head$.getGlobalValue(), new SubLObject[] { fact_sheets.$str281$_, fact_sheets.$str480$_span_class__copyright__, html_macros.$html_italic_head$.getGlobalValue(), fact_sheets.$str481$Copyright });
        }
        else {
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                stream = streams_high.make_private_string_output_stream();
                final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    html_utilities.html_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_comment_head$.getGlobalValue());
                    final SubLObject _prev_bind_0_$156 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_princ(fact_sheet_optional_section_start_string(section_key));
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$156, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_comment_tail$.getGlobalValue());
                    html_utilities.html_terpri((SubLObject)fact_sheets.UNPROVIDED);
                }
                finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                comment = streams_high.get_output_stream_string(stream);
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        return comment;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 137512L)
    public static SubLObject fact_sheet_optional_section_start_comment(final SubLObject section_key, SubLObject v_properties) {
        if (v_properties == fact_sheets.UNPROVIDED) {
            v_properties = (SubLObject)fact_sheets.NIL;
        }
        SubLObject caching_state = fact_sheets.$fact_sheet_optional_section_start_comment_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym93$FACT_SHEET_OPTIONAL_SECTION_START_COMMENT, (SubLObject)fact_sheets.$sym482$_FACT_SHEET_OPTIONAL_SECTION_START_COMMENT_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQL, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(section_key, v_properties);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (section_key.eql(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && v_properties.eql(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_optional_section_start_comment_internal(section_key, v_properties)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(section_key, v_properties));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 138048L)
    public static SubLObject clear_fact_sheet_optional_section_end_comment() {
        final SubLObject cs = fact_sheets.$fact_sheet_optional_section_end_comment_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 138048L)
    public static SubLObject remove_fact_sheet_optional_section_end_comment(final SubLObject section_key) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_optional_section_end_comment_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(section_key), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 138048L)
    public static SubLObject fact_sheet_optional_section_end_comment_internal(final SubLObject section_key) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject comment = (SubLObject)fact_sheets.NIL;
        if (section_key.eql((SubLObject)fact_sheets.$kw203$COPYRIGHT)) {
            comment = html_macros.$html_italic_tail$.getGlobalValue();
        }
        else {
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                stream = streams_high.make_private_string_output_stream();
                final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
                try {
                    html_macros.$html_stream$.bind(stream, thread);
                    html_utilities.html_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_comment_head$.getGlobalValue());
                    final SubLObject _prev_bind_0_$157 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_princ(fact_sheet_optional_section_end_string(section_key));
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$157, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_comment_tail$.getGlobalValue());
                    html_utilities.html_terpri((SubLObject)fact_sheets.UNPROVIDED);
                }
                finally {
                    html_macros.$html_stream$.rebind(_prev_bind_0, thread);
                }
                comment = streams_high.get_output_stream_string(stream);
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        return comment;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 138048L)
    public static SubLObject fact_sheet_optional_section_end_comment(final SubLObject section_key) {
        SubLObject caching_state = fact_sheets.$fact_sheet_optional_section_end_comment_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym95$FACT_SHEET_OPTIONAL_SECTION_END_COMMENT, (SubLObject)fact_sheets.$sym483$_FACT_SHEET_OPTIONAL_SECTION_END_COMMENT_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQL, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, section_key, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_optional_section_end_comment_internal(section_key)));
            memoization_state.caching_state_put(caching_state, section_key, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 138443L)
    public static SubLObject fact_sheet_optional_section_start_string(final SubLObject section_key) {
        return Sequences.cconcatenate((SubLObject)fact_sheets.$str484$Start_Fact_Sheet_Section_, format_nil.format_nil_s_no_copy(section_key));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 138579L)
    public static SubLObject fact_sheet_optional_section_end_string(final SubLObject section_key) {
        return Sequences.cconcatenate((SubLObject)fact_sheets.$str485$End_Fact_Sheet_Section_, format_nil.format_nil_s_no_copy(section_key));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 138711L)
    public static SubLObject term_has_precached_fact_sheetP(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject term_id = fact_sheet_term_id(v_term, (SubLObject)fact_sheets.NIL);
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject fell_back_on_defaultP = (SubLObject)fact_sheets.NIL;
        if (domain_mt == fact_sheets.$kw487$ANY || language_mt == fact_sheets.$kw487$ANY) {
            final SubLObject mt_alist = mts_with_precached_fact_sheet_data_for_term(v_term, verbosity);
            if (fact_sheets.NIL != mt_alist && domain_mt == fact_sheets.$kw487$ANY && language_mt == fact_sheets.$kw487$ANY) {
                return Values.values((SubLObject)fact_sheets.T, (SubLObject)fact_sheets.NIL);
            }
            if (domain_mt == fact_sheets.$kw487$ANY) {
                SubLObject cdolist_list_var = mt_alist;
                SubLObject cons = (SubLObject)fact_sheets.NIL;
                cons = cdolist_list_var.first();
                while (fact_sheets.NIL != cdolist_list_var) {
                    SubLObject current;
                    final SubLObject datum = current = cons;
                    SubLObject domain_mt_$158 = (SubLObject)fact_sheets.NIL;
                    SubLObject language_mts = (SubLObject)fact_sheets.NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list488);
                    domain_mt_$158 = current.first();
                    current = (language_mts = current.rest());
                    if (fact_sheets.NIL != subl_promotions.memberP(language_mt, language_mts, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED)) {
                        return Values.values((SubLObject)fact_sheets.T, (SubLObject)fact_sheets.NIL);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    cons = cdolist_list_var.first();
                }
            }
            else if (language_mt == fact_sheets.$kw487$ANY) {
                SubLObject cdolist_list_var = mt_alist;
                SubLObject cons = (SubLObject)fact_sheets.NIL;
                cons = cdolist_list_var.first();
                while (fact_sheets.NIL != cdolist_list_var) {
                    SubLObject current;
                    final SubLObject datum = current = cons;
                    SubLObject known_domain_mt = (SubLObject)fact_sheets.NIL;
                    SubLObject language_mts = (SubLObject)fact_sheets.NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list489);
                    known_domain_mt = current.first();
                    current = (language_mts = current.rest());
                    if (known_domain_mt.equal(domain_mt)) {
                        return Values.values((SubLObject)fact_sheets.T, (SubLObject)fact_sheets.NIL);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    cons = cdolist_list_var.first();
                }
            }
        }
        else {
            thread.resetMultipleValues();
            final SubLObject filename_$159 = precached_fact_sheet_file_for_term_id(term_id, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.T, v_term);
            final SubLObject fell_back_on_defaultP_$160 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            filename = filename_$159;
            fell_back_on_defaultP = fell_back_on_defaultP_$160;
        }
        return Values.values(list_utilities.sublisp_boolean(filename), fell_back_on_defaultP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 139829L)
    public static SubLObject precached_fact_sheet_file_for_term_id(final SubLObject term_id, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, SubLObject allow_fallbackP, SubLObject v_term) {
        if (allow_fallbackP == fact_sheets.UNPROVIDED) {
            allow_fallbackP = (SubLObject)fact_sheets.T;
        }
        if (v_term == fact_sheets.UNPROVIDED) {
            v_term = (SubLObject)fact_sheets.NIL;
        }
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject fell_back_on_defaultP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == filename) {
            SubLObject csome_list_var = (SubLObject)fact_sheets.$list490;
            SubLObject extension = (SubLObject)fact_sheets.NIL;
            extension = csome_list_var.first();
            while (fact_sheets.NIL == filename && fact_sheets.NIL != csome_list_var) {
                filename = Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ONE_INTEGER), directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, v_term, extension));
                fell_back_on_defaultP = (SubLObject)fact_sheets.NIL;
                if (fact_sheets.NIL != allow_fallbackP && fact_sheets.NIL == file_utilities.file_existsP(filename)) {
                    filename = Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ONE_INTEGER), directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.$kw70$DEFAULT, v_term, extension));
                    if (fact_sheets.NIL != file_utilities.file_existsP(filename)) {
                        fell_back_on_defaultP = (SubLObject)fact_sheets.T;
                    }
                    else {
                        filename = (SubLObject)fact_sheets.NIL;
                    }
                }
                csome_list_var = csome_list_var.rest();
                extension = csome_list_var.first();
            }
        }
        return Values.values(filename, fell_back_on_defaultP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 140635L)
    public static SubLObject precached_fact_sheet_for_term_in_html(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject v_properties, SubLObject allow_fallbackP) {
        if (allow_fallbackP == fact_sheets.UNPROVIDED) {
            allow_fallbackP = (SubLObject)fact_sheets.T;
        }
        final SubLObject term_id = fact_sheet_term_id(v_term, (SubLObject)fact_sheets.NIL);
        return precached_fact_sheet_for_term_id_in_html(term_id, verbosity, domain_mt, language_mt, v_properties, allow_fallbackP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 141056L)
    public static SubLObject precached_fact_sheet_for_term_id_in_html(final SubLObject term_id, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject v_properties, SubLObject allow_fallbackP) {
        if (allow_fallbackP == fact_sheets.UNPROVIDED) {
            allow_fallbackP = (SubLObject)fact_sheets.T;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename = Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ONE_INTEGER), directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$str491$html));
        final SubLObject v_term = fact_sheet_term_from_id(term_id, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject fell_back_on_defaultP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != filename) {
            final SubLObject formatting_guidelines_file = fact_sheet_formatting_guidelines_file(filename, (SubLObject)fact_sheets.UNPROVIDED);
            SubLObject html = (SubLObject)fact_sheets.NIL;
            SubLObject formatting_guidelines = (SubLObject)fact_sheets.NIL;
            SubLObject ignore_errors_tag = (SubLObject)fact_sheets.NIL;
            try {
                thread.throwStack.push(fact_sheets.$kw492$IGNORE_ERRORS_TARGET);
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)fact_sheets.$sym493$IGNORE_ERRORS_HANDLER), thread);
                    try {
                        html = string_utilities.read_string_from_file(filename, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                        formatting_guidelines = load_fact_sheet_formatting_guidelines(formatting_guidelines_file);
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)fact_sheets.$kw492$IGNORE_ERRORS_TARGET);
            }
            finally {
                thread.throwStack.pop();
            }
            if (html.isString()) {
                html = fact_sheet_html_replace_placeholders(possibly_remove_fact_sheet_sections(html, v_properties, v_term), domain_mt);
                if (fact_sheets.NIL != fell_back_on_defaultP) {
                    formatting_guidelines = conses_high.putf(formatting_guidelines, (SubLObject)fact_sheets.$kw494$FELL_BACK_ON_DEFAULT_, (SubLObject)fact_sheets.$kw360$TRUE);
                }
                return (SubLObject)ConsesLow.list(html, formatting_guidelines);
            }
            if (fact_sheets.NIL != allow_fallbackP && (language_mt != fact_sheets.$kw70$DEFAULT || domain_mt != fact_sheets.$kw70$DEFAULT)) {
                return precached_fact_sheet_for_term_id_in_html(term_id, verbosity, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.$kw70$DEFAULT, v_properties, (SubLObject)fact_sheets.NIL);
            }
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 142409L)
    public static SubLObject updated_fact_sheet_data_for_term_and_sentence(final SubLObject v_term, final SubLObject assertion, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        if (allow_fallbackP == fact_sheets.UNPROVIDED) {
            allow_fallbackP = (SubLObject)fact_sheets.T;
        }
        while (fact_sheets.NIL == allowed_to_update_fact_sheet_with_sentenceP(v_term, verbosity, domain_mt, language_mt, assertion)) {
            Threads.sleep((SubLObject)fact_sheets.ONE_INTEGER);
        }
        SubLObject current;
        final SubLObject datum = current = cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, allow_fallbackP);
        SubLObject data = (SubLObject)fact_sheets.NIL;
        SubLObject stats = (SubLObject)fact_sheets.NIL;
        SubLObject footnotes = (SubLObject)fact_sheets.NIL;
        SubLObject formatting_guidelines = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
        data = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
        stats = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
        footnotes = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
        formatting_guidelines = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            final SubLObject sentence_data = fact_sheet_sentences_for_assertion_and_term(v_term, assertion, domain_mt);
            SubLObject complete_data = (SubLObject)fact_sheets.NIL;
            final SubLObject updated_stats = updated_fact_sheet_stats(stats);
            SubLObject cdolist_list_var = sentence_data;
            SubLObject cons = (SubLObject)fact_sheets.NIL;
            cons = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject current_$162;
                final SubLObject datum_$161 = current_$162 = cons;
                SubLObject pred = (SubLObject)fact_sheets.NIL;
                SubLObject sentences = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current_$162, datum_$161, (SubLObject)fact_sheets.$list468);
                pred = current_$162.first();
                current_$162 = current_$162.rest();
                SubLObject cdolist_list_var_$163;
                sentences = (cdolist_list_var_$163 = current_$162);
                SubLObject sentence = (SubLObject)fact_sheets.NIL;
                sentence = cdolist_list_var_$163.first();
                while (fact_sheets.NIL != cdolist_list_var_$163) {
                    data = list_utilities.alist_push(data, pred, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.cons(sentence, fact_sheet_sentence_group_summary(v_term, (SubLObject)ConsesLow.list(sentence), verbosity, language_mt, domain_mt, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED))), (SubLObject)fact_sheets.UNPROVIDED);
                    cdolist_list_var_$163 = cdolist_list_var_$163.rest();
                    sentence = cdolist_list_var_$163.first();
                }
                cdolist_list_var = cdolist_list_var.rest();
                cons = cdolist_list_var.first();
            }
            complete_data = (SubLObject)ConsesLow.list(data, stats, footnotes, formatting_guidelines);
            cache_local_fact_sheet_data(complete_data, v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
            mark_fact_sheet_term_modifiable(v_term, verbosity, domain_mt, language_mt);
            return (SubLObject)ConsesLow.list(data, updated_stats, footnotes, formatting_guidelines);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list80);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 143813L)
    public static SubLObject update_fact_sheet_data_for_term_and_user_added_sentence(final SubLObject v_term, final SubLObject sentence, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        if (allow_fallbackP == fact_sheets.UNPROVIDED) {
            allow_fallbackP = (SubLObject)fact_sheets.T;
        }
        final SubLObject data = (SubLObject)fact_sheets.NIL;
        SubLObject updated_stats = (SubLObject)fact_sheets.NIL;
        final SubLObject footnotes = (SubLObject)fact_sheets.NIL;
        final SubLObject formatting_guidelines = (SubLObject)fact_sheets.NIL;
        try {
            while (fact_sheets.NIL == allowed_to_update_fact_sheet_with_sentenceP(v_term, verbosity, domain_mt, language_mt, sentence)) {
                Threads.sleep((SubLObject)fact_sheets.ONE_INTEGER);
            }
            SubLObject fact_sheet_data = cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, allow_fallbackP);
            if (fact_sheets.NIL == fact_sheet_data) {
                fact_sheet_data = (SubLObject)ConsesLow.list((SubLObject)fact_sheets.NIL, new_fact_sheet_stats(v_term, domain_mt, (SubLObject)fact_sheets.$kw35$NORMAL, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER), (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
            }
            SubLObject current;
            final SubLObject datum = current = fact_sheet_data;
            SubLObject data_$164 = (SubLObject)fact_sheets.NIL;
            SubLObject stats = (SubLObject)fact_sheets.NIL;
            SubLObject footnotes_$165 = (SubLObject)fact_sheets.NIL;
            SubLObject formatting_guidelines_$166 = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
            data_$164 = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
            stats = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
            footnotes_$165 = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
            formatting_guidelines_$166 = current.first();
            current = current.rest();
            if (fact_sheets.NIL == current) {
                final SubLObject sentence_data = (SubLObject)ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)fact_sheets.$str495$Recently_Added, (SubLObject)ConsesLow.list(sentence)));
                SubLObject complete_data = (SubLObject)fact_sheets.NIL;
                updated_stats = updated_fact_sheet_stats(stats);
                SubLObject cdolist_list_var = sentence_data;
                SubLObject cons = (SubLObject)fact_sheets.NIL;
                cons = cdolist_list_var.first();
                while (fact_sheets.NIL != cdolist_list_var) {
                    SubLObject current_$168;
                    final SubLObject datum_$167 = current_$168 = cons;
                    SubLObject pred = (SubLObject)fact_sheets.NIL;
                    SubLObject sentences = (SubLObject)fact_sheets.NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current_$168, datum_$167, (SubLObject)fact_sheets.$list468);
                    pred = current_$168.first();
                    current_$168 = current_$168.rest();
                    SubLObject cdolist_list_var_$169;
                    sentences = (cdolist_list_var_$169 = current_$168);
                    SubLObject sentence_$170 = (SubLObject)fact_sheets.NIL;
                    sentence_$170 = cdolist_list_var_$169.first();
                    while (fact_sheets.NIL != cdolist_list_var_$169) {
                        data_$164 = list_utilities.alist_pushnew(data_$164, pred, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.cons(sentence_$170, fact_sheet_sentence_group_summary(v_term, (SubLObject)ConsesLow.list(sentence_$170), verbosity, language_mt, domain_mt, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED))), (SubLObject)fact_sheets.EQUALP, (SubLObject)fact_sheets.EQUALP);
                        cdolist_list_var_$169 = cdolist_list_var_$169.rest();
                        sentence_$170 = cdolist_list_var_$169.first();
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    cons = cdolist_list_var.first();
                }
                complete_data = (SubLObject)ConsesLow.list(data_$164, stats, footnotes_$165, formatting_guidelines_$166);
                cache_local_fact_sheet_data(complete_data, v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list80);
            }
        }
        finally {
            final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)fact_sheets.T);
                final SubLObject _values = Values.getValuesAsVector();
                mark_fact_sheet_term_modifiable(v_term, verbosity, domain_mt, language_mt);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return (SubLObject)ConsesLow.list(data, updated_stats, footnotes, formatting_guidelines);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 145896L)
    public static SubLObject update_fact_sheet_data_for_term_and_removed_sentence(final SubLObject v_term, final SubLObject sentence, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        if (allow_fallbackP == fact_sheets.UNPROVIDED) {
            allow_fallbackP = (SubLObject)fact_sheets.T;
        }
        final SubLObject data = (SubLObject)fact_sheets.NIL;
        SubLObject updated_stats = (SubLObject)fact_sheets.NIL;
        final SubLObject footnotes = (SubLObject)fact_sheets.NIL;
        final SubLObject formatting_guidelines = (SubLObject)fact_sheets.NIL;
        try {
            while (fact_sheets.NIL == allowed_to_update_fact_sheet_with_sentenceP(v_term, verbosity, domain_mt, language_mt, sentence)) {
                Threads.sleep((SubLObject)fact_sheets.ONE_INTEGER);
            }
            final SubLObject cached_data = cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, allow_fallbackP);
            if (fact_sheets.NIL != cached_data) {
                SubLObject current;
                final SubLObject datum = current = cached_data;
                SubLObject data_$171 = (SubLObject)fact_sheets.NIL;
                SubLObject stats = (SubLObject)fact_sheets.NIL;
                SubLObject footnotes_$172 = (SubLObject)fact_sheets.NIL;
                SubLObject formatting_guidelines_$173 = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
                data_$171 = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
                stats = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
                footnotes_$172 = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list80);
                formatting_guidelines_$173 = current.first();
                current = current.rest();
                if (fact_sheets.NIL == current) {
                    final SubLObject sentence_data = (SubLObject)ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)fact_sheets.$str495$Recently_Added, (SubLObject)ConsesLow.list(sentence)));
                    SubLObject complete_data = (SubLObject)fact_sheets.NIL;
                    updated_stats = updated_fact_sheet_stats(stats);
                    SubLObject cdolist_list_var = sentence_data;
                    SubLObject cons = (SubLObject)fact_sheets.NIL;
                    cons = cdolist_list_var.first();
                    while (fact_sheets.NIL != cdolist_list_var) {
                        SubLObject current_$175;
                        final SubLObject datum_$174 = current_$175 = cons;
                        SubLObject pred = (SubLObject)fact_sheets.NIL;
                        SubLObject sentences = (SubLObject)fact_sheets.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current_$175, datum_$174, (SubLObject)fact_sheets.$list468);
                        pred = current_$175.first();
                        current_$175 = current_$175.rest();
                        SubLObject cdolist_list_var_$176;
                        sentences = (cdolist_list_var_$176 = current_$175);
                        SubLObject sentence_$177 = (SubLObject)fact_sheets.NIL;
                        sentence_$177 = cdolist_list_var_$176.first();
                        while (fact_sheets.NIL != cdolist_list_var_$176) {
                            data_$171 = list_utilities.alist_remove_from_value(data_$171, pred, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.cons(sentence_$177, fact_sheet_sentence_group_summary(v_term, (SubLObject)ConsesLow.list(sentence_$177), verbosity, language_mt, domain_mt, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED))), (SubLObject)fact_sheets.EQUALP, (SubLObject)fact_sheets.EQUALP);
                            cdolist_list_var_$176 = cdolist_list_var_$176.rest();
                            sentence_$177 = cdolist_list_var_$176.first();
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        cons = cdolist_list_var.first();
                    }
                    complete_data = (SubLObject)ConsesLow.list(data_$171, stats, footnotes_$172, formatting_guidelines_$173);
                    cache_local_fact_sheet_data(complete_data, v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list80);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)fact_sheets.T);
                final SubLObject _values = Values.getValuesAsVector();
                mark_fact_sheet_term_modifiable(v_term, verbosity, domain_mt, language_mt);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return (SubLObject)ConsesLow.list(data, updated_stats, footnotes, formatting_guidelines);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 147826L)
    public static SubLObject updated_fact_sheet_stats(final SubLObject stats) {
        SubLObject domain_mt = (SubLObject)fact_sheets.NIL;
        SubLObject verbosity = (SubLObject)fact_sheets.NIL;
        SubLObject sentence_count = (SubLObject)fact_sheets.NIL;
        SubLObject section_count = (SubLObject)fact_sheets.NIL;
        SubLObject info_gathering_time = (SubLObject)fact_sheets.NIL;
        SubLObject pph_time = (SubLObject)fact_sheets.NIL;
        SubLObject second_string = (SubLObject)fact_sheets.NIL;
        SubLObject date_string = (SubLObject)fact_sheets.NIL;
        SubLObject cyc_image_id = (SubLObject)fact_sheets.NIL;
        SubLObject kb_version_string = (SubLObject)fact_sheets.NIL;
        SubLObject cyc_revision_string = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(stats, stats, (SubLObject)fact_sheets.$list496);
        domain_mt = stats.first();
        SubLObject current = stats.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list496);
        verbosity = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list496);
        sentence_count = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list496);
        section_count = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list496);
        info_gathering_time = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list496);
        pph_time = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list496);
        second_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list496);
        date_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list496);
        cyc_image_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list496);
        kb_version_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, stats, (SubLObject)fact_sheets.$list496);
        cyc_revision_string = current.first();
        current = current.rest();
        final SubLObject v_term = (SubLObject)(current.isCons() ? current.first() : fact_sheets.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, stats, (SubLObject)fact_sheets.$list496);
        current = current.rest();
        if (fact_sheets.NIL == current) {
            return new_fact_sheet_stats(v_term, domain_mt, verbosity, sentence_count, section_count, info_gathering_time, pph_time);
        }
        cdestructuring_bind.cdestructuring_bind_error(stats, (SubLObject)fact_sheets.$list496);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 148305L)
    public static SubLObject cached_fact_sheet_data_for_term(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        if (allow_fallbackP == fact_sheets.UNPROVIDED) {
            allow_fallbackP = (SubLObject)fact_sheets.T;
        }
        final SubLObject cached_verbosity = (SubLObject)(verbosity.eql((SubLObject)fact_sheets.$kw67$PUBLIC) ? fact_sheets.$kw35$NORMAL : verbosity);
        final SubLObject term_id = fact_sheet_term_id(v_term, (SubLObject)fact_sheets.NIL);
        final SubLObject locally_cached_data = get_cached_local_fact_sheet_data(v_term, cached_verbosity, domain_mt, language_mt);
        if (fact_sheets.NIL != locally_cached_data) {
            return conses_high.copy_tree(locally_cached_data);
        }
        final SubLObject data = precached_fact_sheet_data_for_term_id(term_id, cached_verbosity, domain_mt, language_mt, allow_fallbackP);
        return (fact_sheets.NIL != data) ? data : precached_fact_sheet_data_for_term_id(fact_sheet_term_legacy_id(v_term), cached_verbosity, domain_mt, language_mt, allow_fallbackP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 149284L)
    public static SubLObject mts_with_precached_fact_sheet_data_for_term_internal(final SubLObject v_term, SubLObject verbosity) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject mts = (SubLObject)fact_sheets.NIL;
        SubLObject pair_count = (SubLObject)fact_sheets.ZERO_INTEGER;
        final SubLObject directory_list = list_utilities.snoc(Strings.string_downcase(print_high.princ_to_string(verbosity), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), fact_sheet_data_path());
        SubLObject cdolist_list_var = (SubLObject)ConsesLow.list((SubLObject)fact_sheets.T, (SubLObject)fact_sheets.NIL);
        SubLObject legacyP = (SubLObject)fact_sheets.NIL;
        legacyP = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            final SubLObject _prev_bind_0 = fact_sheets.$use_fact_sheet_legacy_idsP$.currentBinding(thread);
            try {
                fact_sheets.$use_fact_sheet_legacy_idsP$.bind(legacyP, thread);
                final SubLObject term_id = fact_sheet_term_id(v_term, (SubLObject)fact_sheets.UNPROVIDED);
                assert fact_sheets.NIL != Filesys.directory_p(fact_sheet_directory_from_list(directory_list)) : fact_sheet_directory_from_list(directory_list);
                SubLObject directory_contents_var = Filesys.directory(fact_sheet_directory_from_list(directory_list), (SubLObject)fact_sheets.NIL);
                final SubLObject progress_message_var = (SubLObject)fact_sheets.NIL;
                final SubLObject _prev_bind_0_$178 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$silent_progressP$.bind((SubLObject)SubLObjectFactory.makeBoolean(!progress_message_var.isString()), thread);
                    if (fact_sheets.NIL.isFunctionSpec()) {
                        directory_contents_var = Sort.sort(directory_contents_var, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    final SubLObject list_var = directory_contents_var;
                    final SubLObject _prev_bind_0_$179 = utilities_macros.$progress_note$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_note$.bind((SubLObject)((fact_sheets.NIL != progress_message_var) ? progress_message_var : fact_sheets.$str499$cdolist), thread);
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
                        utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                            SubLObject csome_list_var = list_var;
                            SubLObject subdir = (SubLObject)fact_sheets.NIL;
                            subdir = csome_list_var.first();
                            while (fact_sheets.NIL != csome_list_var) {
                                if (fact_sheets.NIL != Filesys.directory_p((fact_sheets.NIL != string_utilities.ends_with(fact_sheet_directory_from_list(directory_list), (SubLObject)fact_sheets.$str500$_, (SubLObject)fact_sheets.UNPROVIDED)) ? Sequences.cconcatenate(fact_sheet_directory_from_list(directory_list), subdir) : Sequences.cconcatenate(fact_sheet_directory_from_list(directory_list), new SubLObject[] { fact_sheets.$str500$_, subdir }))) {
                                    if (!string_utilities.last_char(subdir).eql((SubLObject)Characters.CHAR_slash)) {
                                        subdir = Sequences.cconcatenate(subdir, (SubLObject)fact_sheets.$str500$_);
                                    }
                                    final SubLObject domain_mt_id = Strings.string_right_trim((SubLObject)fact_sheets.$list501, subdir);
                                    if (fact_sheets.NIL != fact_sheet_term_idP(domain_mt_id)) {
                                        SubLObject domain_mt = fact_sheet_term_from_id(domain_mt_id, (SubLObject)fact_sheets.UNPROVIDED);
                                        if (fact_sheets.NIL == cycl_grammar.cycl_denotational_term_p(domain_mt)) {
                                            final SubLObject default_domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
                                            if (domain_mt_id.equal(fact_sheet_term_id(default_domain_mt, (SubLObject)fact_sheets.T))) {
                                                domain_mt = default_domain_mt;
                                            }
                                        }
                                        if (fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt)) {
                                            assert fact_sheets.NIL != Filesys.directory_p(fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list))) : fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list));
                                            SubLObject directory_contents_var_$180 = Filesys.directory(fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), (SubLObject)fact_sheets.NIL);
                                            final SubLObject progress_message_var_$181 = (SubLObject)fact_sheets.NIL;
                                            final SubLObject _prev_bind_0_$180 = utilities_macros.$silent_progressP$.currentBinding(thread);
                                            try {
                                                utilities_macros.$silent_progressP$.bind((SubLObject)SubLObjectFactory.makeBoolean(!progress_message_var_$181.isString()), thread);
                                                if (fact_sheets.NIL.isFunctionSpec()) {
                                                    directory_contents_var_$180 = Sort.sort(directory_contents_var_$180, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED);
                                                }
                                                final SubLObject list_var_$183 = directory_contents_var_$180;
                                                final SubLObject _prev_bind_0_$181 = utilities_macros.$progress_note$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$185 = utilities_macros.$progress_start_time$.currentBinding(thread);
                                                final SubLObject _prev_bind_2_$186 = utilities_macros.$progress_total$.currentBinding(thread);
                                                final SubLObject _prev_bind_3_$187 = utilities_macros.$progress_sofar$.currentBinding(thread);
                                                final SubLObject _prev_bind_4_$188 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                                final SubLObject _prev_bind_5_$189 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                                final SubLObject _prev_bind_6_$190 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                                final SubLObject _prev_bind_7_$191 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                                try {
                                                    utilities_macros.$progress_note$.bind((SubLObject)((fact_sheets.NIL != progress_message_var_$181) ? progress_message_var_$181 : fact_sheets.$str499$cdolist), thread);
                                                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                                                    utilities_macros.$progress_total$.bind(Sequences.length(list_var_$183), thread);
                                                    utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                                                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                                                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                    try {
                                                        utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                                        SubLObject csome_list_var_$192 = list_var_$183;
                                                        SubLObject language_subdir = (SubLObject)fact_sheets.NIL;
                                                        language_subdir = csome_list_var_$192.first();
                                                        while (fact_sheets.NIL != csome_list_var_$192) {
                                                            if (fact_sheets.NIL != Filesys.directory_p((fact_sheets.NIL != string_utilities.ends_with(fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), (SubLObject)fact_sheets.$str500$_, (SubLObject)fact_sheets.UNPROVIDED)) ? Sequences.cconcatenate(fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), language_subdir) : Sequences.cconcatenate(fact_sheet_directory_from_list(list_utilities.snoc(subdir, directory_list)), new SubLObject[] { fact_sheets.$str500$_, language_subdir }))) {
                                                                if (!string_utilities.last_char(language_subdir).eql((SubLObject)Characters.CHAR_slash)) {
                                                                    language_subdir = Sequences.cconcatenate(language_subdir, (SubLObject)fact_sheets.$str500$_);
                                                                }
                                                                final SubLObject language_mt_id = Strings.string_right_trim((SubLObject)fact_sheets.$list501, language_subdir);
                                                                SubLObject language_mt = fact_sheet_term_from_id(language_mt_id, (SubLObject)fact_sheets.UNPROVIDED);
                                                                final SubLObject path = (SubLObject)((fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(language_mt)) ? Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ONE_INTEGER), directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) : fact_sheets.NIL);
                                                                if (fact_sheets.NIL == cycl_grammar.cycl_denotational_term_p(language_mt)) {
                                                                    final SubLObject default_language_mt = fact_sheet_default_language_mt_for_term(v_term);
                                                                    if (language_mt_id.equal(fact_sheet_term_id(default_language_mt, (SubLObject)fact_sheets.T))) {
                                                                        language_mt = default_language_mt;
                                                                    }
                                                                }
                                                                if (fact_sheets.NIL != file_utilities.file_existsP(path)) {
                                                                    mts = list_utilities.alist_push(mts, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                                                                    pair_count = Numbers.add(pair_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                }
                                                            }
                                                            utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                                                            utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                                            csome_list_var_$192 = csome_list_var_$192.rest();
                                                            language_subdir = csome_list_var_$192.first();
                                                        }
                                                    }
                                                    finally {
                                                        final SubLObject _prev_bind_0_$182 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                        try {
                                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                                            final SubLObject _values = Values.getValuesAsVector();
                                                            utilities_macros.noting_percent_progress_postamble();
                                                            Values.restoreValuesFromVector(_values);
                                                        }
                                                        finally {
                                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$182, thread);
                                                        }
                                                    }
                                                }
                                                finally {
                                                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_7_$191, thread);
                                                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_6_$190, thread);
                                                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_5_$189, thread);
                                                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_4_$188, thread);
                                                    utilities_macros.$progress_sofar$.rebind(_prev_bind_3_$187, thread);
                                                    utilities_macros.$progress_total$.rebind(_prev_bind_2_$186, thread);
                                                    utilities_macros.$progress_start_time$.rebind(_prev_bind_1_$185, thread);
                                                    utilities_macros.$progress_note$.rebind(_prev_bind_0_$181, thread);
                                                }
                                            }
                                            finally {
                                                utilities_macros.$silent_progressP$.rebind(_prev_bind_0_$180, thread);
                                            }
                                        }
                                    }
                                }
                                utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                                utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                csome_list_var = csome_list_var.rest();
                                subdir = csome_list_var.first();
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$183 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                final SubLObject _values2 = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values2);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$183, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                        utilities_macros.$progress_note$.rebind(_prev_bind_0_$179, thread);
                    }
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_0_$178, thread);
                }
                if (fact_sheets.ZERO_INTEGER.eql(pair_count)) {
                    final SubLObject ddmt = fact_sheet_default_domain_mt_for_term(v_term);
                    final SubLObject dlmt = fact_sheet_default_language_mt_for_term(v_term);
                    final SubLObject path2 = Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ONE_INTEGER), directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, ddmt, dlmt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
                    if (fact_sheets.NIL != file_utilities.file_existsP(path2)) {
                        mts = list_utilities.alist_push(mts, ddmt, dlmt, (SubLObject)fact_sheets.UNPROVIDED);
                        pair_count = Numbers.add(pair_count, (SubLObject)fact_sheets.ONE_INTEGER);
                    }
                }
            }
            finally {
                fact_sheets.$use_fact_sheet_legacy_idsP$.rebind(_prev_bind_0, thread);
            }
            cdolist_list_var = cdolist_list_var.rest();
            legacyP = cdolist_list_var.first();
        }
        return Values.values(mts, pair_count);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 149284L)
    public static SubLObject mts_with_precached_fact_sheet_data_for_term(final SubLObject v_term, SubLObject verbosity) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == v_memoization_state) {
            return mts_with_precached_fact_sheet_data_for_term_internal(v_term, verbosity);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, (SubLObject)fact_sheets.$sym497$MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), (SubLObject)fact_sheets.$sym497$MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, (SubLObject)fact_sheets.$sym497$MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM, caching_state);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, verbosity);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && verbosity.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(thread.resetMultipleValues(), (SubLObject)Values.multiple_value_list(mts_with_precached_fact_sheet_data_for_term_internal(v_term, verbosity)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, verbosity));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 151509L)
    public static SubLObject precached_fact_sheet_data_for_term(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject allow_fallbackP) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        if (allow_fallbackP == fact_sheets.UNPROVIDED) {
            allow_fallbackP = (SubLObject)fact_sheets.T;
        }
        final SubLObject term_id = fact_sheet_term_id(v_term, (SubLObject)fact_sheets.NIL);
        return precached_fact_sheet_data_for_term_id(term_id, verbosity, domain_mt, language_mt, allow_fallbackP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 152019L)
    public static SubLObject precached_fact_sheet_data_for_term_id(final SubLObject term_id, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, SubLObject fallback) {
        if (fallback == fact_sheets.UNPROVIDED) {
            fallback = (SubLObject)fact_sheets.$kw502$ALLOWED;
        }
        if (verbosity.eql((SubLObject)fact_sheets.$kw97$MINI)) {
            return (SubLObject)fact_sheets.NIL;
        }
        final SubLObject v_term = fact_sheet_term_from_id(term_id, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject extension = (SubLObject)fact_sheets.$str503$cfasl;
        final SubLObject filename = Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ONE_INTEGER), directory_and_filename_for_fact_sheet_from_id(term_id, verbosity, domain_mt, language_mt, v_term, extension));
        return precached_fact_sheet_data_from_file(filename, fallback, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 152708L)
    public static SubLObject precached_fact_sheet_data_from_file(final SubLObject filename, SubLObject fallback, SubLObject extension, SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject term_id) {
        if (fallback == fact_sheets.UNPROVIDED) {
            fallback = (SubLObject)fact_sheets.$kw502$ALLOWED;
        }
        if (extension == fact_sheets.UNPROVIDED) {
            extension = (SubLObject)fact_sheets.$str503$cfasl;
        }
        if (v_term == fact_sheets.UNPROVIDED) {
            v_term = (SubLObject)fact_sheets.NIL;
        }
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.NIL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.NIL;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.NIL;
        }
        if (term_id == fact_sheets.UNPROVIDED) {
            term_id = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (fact_sheets.NIL != file_utilities.file_existsP(filename)) {
            if (fact_sheets.NIL == v_term) {
                thread.resetMultipleValues();
                final SubLObject v_term_$195 = fact_sheet_data_from_filename(filename);
                final SubLObject verbosity_$196 = thread.secondMultipleValue();
                final SubLObject domain_mt_$197 = thread.thirdMultipleValue();
                final SubLObject language_mt_$198 = thread.fourthMultipleValue();
                thread.resetMultipleValues();
                v_term = v_term_$195;
                verbosity = verbosity_$196;
                domain_mt = domain_mt_$197;
                language_mt = language_mt_$198;
            }
            if (fact_sheets.NIL == term_id) {
                term_id = fact_sheet_term_id(v_term, (SubLObject)fact_sheets.UNPROVIDED);
            }
            final SubLObject formatting_guidelines_file = fact_sheet_formatting_guidelines_file(filename, extension);
            SubLObject formatting_guidelines = (SubLObject)fact_sheets.NIL;
            SubLObject error_message = (SubLObject)fact_sheets.NIL;
            final SubLObject fell_back_on_defaultP = Equality.eql(fallback, (SubLObject)fact_sheets.$kw504$CURRENT);
            SubLObject data = (SubLObject)fact_sheets.NIL;
            SubLObject stats = (SubLObject)fact_sheets.NIL;
            SubLObject footnotes = (SubLObject)fact_sheets.NIL;
            if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                try {
                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                    final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                        try {
                            SubLObject stream = (SubLObject)fact_sheets.NIL;
                            try {
                                final SubLObject _prev_bind_0_$199 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                try {
                                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                                    stream = compatibility.open_binary(filename, (SubLObject)fact_sheets.$kw505$INPUT);
                                }
                                finally {
                                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$199, thread);
                                }
                                if (!stream.isStream()) {
                                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, filename);
                                }
                                final SubLObject stream_$200 = stream;
                                if (fact_sheets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !stream_$200.isStream()) {
                                    Errors.error((SubLObject)fact_sheets.$str53$Cannot_open__A, filename);
                                }
                                data = cfasl.cfasl_input(stream_$200, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
                                stats = cfasl.cfasl_input(stream_$200, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
                                if (!data.eql(fact_sheet_under_construction_code())) {
                                    footnotes = cfasl.cfasl_input(stream_$200, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$200 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    if (stream.isStream()) {
                                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                                    }
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$200, thread);
                                }
                            }
                            if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                                file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), (SubLObject)fact_sheets.$str285$664);
                            }
                        }
                        catch (Throwable catch_var) {
                            Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_0, thread);
                    }
                }
                catch (Throwable ccatch_env_var) {
                    error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                }
                finally {
                    thread.throwStack.pop();
                }
            }
            else {
                SubLObject stream2 = (SubLObject)fact_sheets.NIL;
                try {
                    final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                        stream2 = compatibility.open_binary(filename, (SubLObject)fact_sheets.$kw505$INPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
                    }
                    if (!stream2.isStream()) {
                        Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, filename);
                    }
                    final SubLObject stream_$201 = stream2;
                    if (fact_sheets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !stream_$201.isStream()) {
                        Errors.error((SubLObject)fact_sheets.$str53$Cannot_open__A, filename);
                    }
                    data = cfasl.cfasl_input(stream_$201, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
                    stats = cfasl.cfasl_input(stream_$201, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
                    if (!data.eql(fact_sheet_under_construction_code())) {
                        footnotes = cfasl.cfasl_input(stream_$201, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
                    }
                }
                finally {
                    final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream2.isStream()) {
                            streams_high.close(stream2, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                    }
                }
                if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), (SubLObject)fact_sheets.$str285$664);
                }
            }
            if (fact_sheets.NIL != stats) {
                final SubLObject stats_domain_mt = stats.first();
                if (!stats_domain_mt.equal(domain_mt)) {
                    stats = (SubLObject)ConsesLow.cons(domain_mt, stats.rest());
                }
            }
            if (fact_sheets.NIL == error_message && fact_sheets.NIL != file_utilities.file_existsP(formatting_guidelines_file)) {
                SubLObject ignore_errors_tag = (SubLObject)fact_sheets.NIL;
                try {
                    thread.throwStack.push(fact_sheets.$kw492$IGNORE_ERRORS_TARGET);
                    final SubLObject _prev_bind_2 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)fact_sheets.$sym493$IGNORE_ERRORS_HANDLER), thread);
                        try {
                            formatting_guidelines = load_fact_sheet_formatting_guidelines(formatting_guidelines_file);
                        }
                        catch (Throwable catch_var2) {
                            Errors.handleThrowable(catch_var2, (SubLObject)fact_sheets.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_2, thread);
                    }
                }
                catch (Throwable ccatch_env_var2) {
                    ignore_errors_tag = Errors.handleThrowable(ccatch_env_var2, (SubLObject)fact_sheets.$kw492$IGNORE_ERRORS_TARGET);
                }
                finally {
                    thread.throwStack.pop();
                }
            }
            if (fact_sheets.NIL != error_message) {
                final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream2 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream2))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream2);
                    PrintLow.format(stream2, (SubLObject)fact_sheets.$str506$Error_loading_data_for__S___A, v_term, error_message);
                    streams_high.force_output(stream2);
                }
            }
            if (fact_sheets.NIL != stats) {
                if (fact_sheets.NIL != fell_back_on_defaultP) {
                    formatting_guidelines = conses_high.putf(formatting_guidelines, (SubLObject)fact_sheets.$kw494$FELL_BACK_ON_DEFAULT_, (SubLObject)fact_sheets.$kw360$TRUE);
                }
                return (SubLObject)ConsesLow.list(data, stats, footnotes, formatting_guidelines);
            }
            if (fact_sheets.NIL == stats && fallback.eql((SubLObject)fact_sheets.$kw502$ALLOWED) && (language_mt != fact_sheets.$kw70$DEFAULT || domain_mt != fact_sheets.$kw70$DEFAULT)) {
                return precached_fact_sheet_data_for_term_id(term_id, verbosity, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.$kw504$CURRENT);
            }
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 154803L)
    public static SubLObject load_fact_sheet_formatting_guidelines(final SubLObject formatting_guidelines_file) {
        return cfasl_utilities.cfasl_load(formatting_guidelines_file);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 154936L)
    public static SubLObject fact_sheet_under_construction_message(final SubLObject v_term) {
        return Sequences.cconcatenate((SubLObject)fact_sheets.$str507$This_fact_sheet_for_, new SubLObject[] { format_nil.format_nil_s_no_copy(v_term), fact_sheets.$str508$_is_under_construction__Come_back });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 155151L)
    public static SubLObject fact_sheet_under_construction_code() {
        return fact_sheets.$fact_sheet_under_construction_code$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 155252L)
    public static SubLObject fact_sheet_under_construction_xml(final SubLObject v_term, final SubLObject stats) {
        return (SubLObject)fact_sheets.$str73$;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 155338L)
    public static SubLObject fact_sheet_under_construction_html(final SubLObject v_term, final SubLObject stats) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != fact_sheet_stats_p(stats) : stats;
        SubLObject ans = (SubLObject)fact_sheets.NIL;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
            try {
                html_macros.$html_stream$.bind(stream, thread);
                html_utilities.html_markup((SubLObject)fact_sheets.$str196$__DOCTYPE_html_PUBLIC_____W3C__DT);
                if (fact_sheets.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                    html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)fact_sheets.$str197$_meta_http_equiv__X_UA_Compatible);
                }
                html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$203 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                try {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == fact_sheets.$kw116$UNINITIALIZED) ? ConsesLow.list(fact_sheets.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                    html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                    html_macros.html_head_content_type();
                    html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$204 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                    try {
                        html_macros.$html_inside_bodyP$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$205 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                            html_utilities.html_princ(fact_sheet_under_construction_message(v_term));
                            print_high.princ(fact_sheet_optional_section_start_comment((SubLObject)fact_sheets.$kw202$STATS, (SubLObject)fact_sheets.UNPROVIDED), html_macros.$html_stream$.getDynamicValue(thread));
                            print_fact_sheet_stats(stats, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.T);
                            print_high.princ(fact_sheet_optional_section_end_comment((SubLObject)fact_sheets.$kw202$STATS), html_macros.$html_stream$.getDynamicValue(thread));
                            html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_copyright_notice();
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$205, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    }
                    finally {
                        html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$204, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                }
                finally {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$203, thread);
                }
                html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
            }
            finally {
                html_macros.$html_stream$.rebind(_prev_bind_0, thread);
            }
            ans = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 155735L)
    public static SubLObject note_fact_sheet_under_construction(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term) : v_term;
        if (domain_mt == fact_sheets.$kw70$DEFAULT) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.$kw70$DEFAULT) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        final SubLObject filename = fact_sheet_under_construction_filename(v_term, verbosity, domain_mt, language_mt);
        final SubLObject stats = new_fact_sheet_stats(v_term, domain_mt, verbosity, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        cfasl_utilities.cfasl_save(stats, filename);
        if (fact_sheets.NIL != chmod_safe_to_useP()) {
            file_utilities.chmod(filename, (SubLObject)fact_sheets.$str285$664);
        }
        return filename;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 156417L)
    public static SubLObject note_fact_sheet_construction_done(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term) : v_term;
        final SubLObject filename = fact_sheet_under_construction_filename(v_term, verbosity, domain_mt, language_mt);
        if (fact_sheets.NIL != file_utilities.file_existsP(filename)) {
            Filesys.delete_file(filename);
        }
        return filename;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 156793L)
    public static SubLObject fact_sheet_under_construction_filename(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject extension = (SubLObject)fact_sheets.$str503$cfasl;
        thread.resetMultipleValues();
        final SubLObject directory = directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, extension);
        final SubLObject regular_filename = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (fact_sheets.NIL == Filesys.directory_p(directory)) {
            file_utilities.make_directory_recursive(directory, (SubLObject)fact_sheets.NIL, (SubLObject)((fact_sheets.NIL != chmod_safe_to_useP()) ? fact_sheets.$str509$775 : fact_sheets.NIL));
        }
        if (fact_sheets.NIL == Filesys.directory_p(directory)) {
            Errors.warn((SubLObject)fact_sheets.$str510$Couldn_t_create_directory_for_fac, v_term, directory);
            return (SubLObject)fact_sheets.NIL;
        }
        return Sequences.cconcatenate(string_utilities.post_remove(string_utilities.post_remove(regular_filename, extension, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$str511$_, (SubLObject)fact_sheets.UNPROVIDED), new SubLObject[] { fact_sheets.$str512$_under_construction_, extension });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 157512L)
    public static SubLObject fact_sheet_term_under_constructionP(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject exclude_abandonedP) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (exclude_abandonedP == fact_sheets.UNPROVIDED) {
            exclude_abandonedP = (SubLObject)fact_sheets.T;
        }
        if (domain_mt == fact_sheets.$kw70$DEFAULT) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.$kw70$DEFAULT) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term) : v_term;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : domain_mt;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : language_mt;
        final SubLObject filename = fact_sheet_under_construction_filename(v_term, verbosity, domain_mt, language_mt);
        return fact_sheet_file_under_constructionP(filename, exclude_abandonedP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 158238L)
    public static SubLObject fact_sheet_file_under_constructionP(final SubLObject filename, final SubLObject exclude_abandonedP) {
        SubLObject ans = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != file_utilities.file_existsP(filename)) {
            if (fact_sheets.NIL != string_utilities.ends_with(filename, (SubLObject)fact_sheets.$str513$_html, (SubLObject)fact_sheets.UNPROVIDED)) {
                return html_fact_sheet_file_under_constructionP(filename, exclude_abandonedP);
            }
            if (fact_sheets.NIL != exclude_abandonedP) {
                final SubLObject file_write_date = Filesys.file_write_date(filename);
                final SubLObject abandonedP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == file_write_date || subl_promotions.elapsed_universal_time(file_write_date, (SubLObject)fact_sheets.UNPROVIDED).numGE(numeric_date_utilities.$seconds_in_a_day$.getGlobalValue()));
                if (fact_sheets.NIL == abandonedP) {
                    ans = (SubLObject)fact_sheets.T;
                }
            }
            else {
                ans = (SubLObject)fact_sheets.T;
            }
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 158789L)
    public static SubLObject html_fact_sheet_file_under_constructionP(final SubLObject filename, SubLObject exclude_abandonedP) {
        if (exclude_abandonedP == fact_sheets.UNPROVIDED) {
            exclude_abandonedP = (SubLObject)fact_sheets.NIL;
        }
        final SubLObject file_length = file_utilities.get_file_length(filename);
        final SubLObject file_write_date = Filesys.file_write_date(filename);
        return (SubLObject)SubLObjectFactory.makeBoolean((fact_sheets.NIL == file_length || file_length.numL((SubLObject)fact_sheets.$int260$1024)) && (fact_sheets.NIL == exclude_abandonedP || fact_sheets.NIL == file_write_date || Numbers.subtract(Time.get_universal_time(), file_write_date).numL(numeric_date_utilities.$seconds_in_a_day$.getGlobalValue())) && fact_sheets.NIL != Sequences.search((SubLObject)fact_sheets.$str514$under_construction__Come_back_soo, string_utilities.read_string_from_file(filename, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), Symbols.symbol_function((SubLObject)fact_sheets.EQUALP), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 159369L)
    public static SubLObject fact_sheet_term_update_already_undertakenP(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != fact_sheet_term_under_constructionP(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.T) || fact_sheets.NIL != term_fact_sheet_current_on_kb_and_systemP(v_term, verbosity, domain_mt, language_mt));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 159655L)
    public static SubLObject term_fact_sheet_current_on_kb_and_systemP(final SubLObject v_term, final SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (domain_mt == fact_sheets.$kw70$DEFAULT) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.$kw70$DEFAULT) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term) : v_term;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : domain_mt;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : language_mt;
        thread.resetMultipleValues();
        final SubLObject directory = directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject filename = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (fact_sheets.NIL != Filesys.directory_p(directory) && fact_sheets.NIL != file_utilities.file_existsP(filename)) {
            final SubLObject html = string_utilities.read_string_from_file(filename, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheet_kb_version_string(html).equal(operation_communication.kb_version_string()) && fact_sheet_cyc_revision_string(html).equal(system_info.cyc_revision_string()));
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 160581L)
    public static SubLObject gather_old_under_construction_fact_sheet_files(SubLObject root) {
        if (root == fact_sheets.UNPROVIDED) {
            root = file_utilities.cyc_home_subdirectory(fact_sheet_data_path());
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject now = Time.get_universal_time();
        SubLObject current_directory = (SubLObject)fact_sheets.NIL;
        SubLObject current_directory_okP = (SubLObject)fact_sheets.NIL;
        SubLObject files = (SubLObject)fact_sheets.NIL;
        assert fact_sheets.NIL != Filesys.directory_p(root) : root;
        SubLObject directory_list_var = (SubLObject)ConsesLow.list(root);
        SubLObject current_directory_var = (SubLObject)fact_sheets.NIL;
        current_directory_var = directory_list_var.first();
        while (fact_sheets.NIL != directory_list_var) {
            directory_list_var = directory_list_var.rest();
            assert fact_sheets.NIL != Filesys.directory_p(current_directory_var) : current_directory_var;
            SubLObject directory_contents_var = Filesys.directory(current_directory_var, (SubLObject)fact_sheets.T);
            final SubLObject progress_message_var = (SubLObject)(fact_sheets.$str515$Gathering_old_under_construction_.isString() ? Sequences.cconcatenate((SubLObject)fact_sheets.$str515$Gathering_old_under_construction_, Sequences.cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { fact_sheets.$str516$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) })) : fact_sheets.NIL);
            final SubLObject _prev_bind_0 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$silent_progressP$.bind((SubLObject)SubLObjectFactory.makeBoolean(!progress_message_var.isString()), thread);
                if (fact_sheets.NIL.isFunctionSpec()) {
                    directory_contents_var = Sort.sort(directory_contents_var, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED);
                }
                final SubLObject list_var = directory_contents_var;
                final SubLObject _prev_bind_0_$206 = utilities_macros.$progress_note$.currentBinding(thread);
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                try {
                    utilities_macros.$progress_note$.bind((SubLObject)((fact_sheets.NIL != progress_message_var) ? progress_message_var : fact_sheets.$str499$cdolist), thread);
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
                    utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                    try {
                        utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                        SubLObject csome_list_var = list_var;
                        SubLObject file = (SubLObject)fact_sheets.NIL;
                        file = csome_list_var.first();
                        while (fact_sheets.NIL != csome_list_var) {
                            if (fact_sheets.NIL != Filesys.directory_p(file)) {
                                directory_list_var = (SubLObject)ConsesLow.cons(file, directory_list_var);
                            }
                            else {
                                final SubLObject this_directory = file_utilities.deconstruct_path(file);
                                if (!this_directory.equal(current_directory)) {
                                    current_directory = this_directory;
                                    current_directory_okP = possible_fact_sheet_directory_p(current_directory);
                                }
                                if (fact_sheets.NIL != current_directory_okP && fact_sheets.NIL != file_utilities.file_existsP(file) && (fact_sheets.NIL != string_utilities.ends_with(file, (SubLObject)fact_sheets.$str513$_html, (SubLObject)fact_sheets.UNPROVIDED) || fact_sheets.NIL != string_utilities.ends_with(file, (SubLObject)fact_sheets.$str517$_under_construction_cfasl, (SubLObject)fact_sheets.UNPROVIDED))) {
                                    final SubLObject file_write_date = Filesys.file_write_date(file);
                                    if (fact_sheets.NIL != file_write_date && subl_promotions.elapsed_universal_time(file_write_date, now).numG(numeric_date_utilities.$seconds_in_a_day$.getGlobalValue()) && fact_sheets.NIL != fact_sheet_file_under_constructionP(file, (SubLObject)fact_sheets.NIL)) {
                                        print_high.print(file, (SubLObject)fact_sheets.UNPROVIDED);
                                        files = (SubLObject)ConsesLow.cons(file, files);
                                    }
                                }
                            }
                            utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                            utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                            csome_list_var = csome_list_var.rest();
                            file = csome_list_var.first();
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$207 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            utilities_macros.noting_percent_progress_postamble();
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$207, thread);
                        }
                    }
                }
                finally {
                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    utilities_macros.$progress_note$.rebind(_prev_bind_0_$206, thread);
                }
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_0, thread);
            }
            current_directory_var = directory_list_var.first();
        }
        return files;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 161641L)
    public static SubLObject remove_any_cached_fact_sheet_data(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, SubLObject extension) {
        if (extension == fact_sheets.UNPROVIDED) {
            extension = (SubLObject)fact_sheets.$str503$cfasl;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term) : v_term;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : domain_mt;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : language_mt;
        final SubLObject valid_extensions = (SubLObject)fact_sheets.$list490;
        remove_cached_local_fact_sheet_data(v_term, verbosity, domain_mt, language_mt);
        if (extension.eql((SubLObject)fact_sheets.$kw163$ALL)) {
            SubLObject cdolist_list_var = valid_extensions;
            SubLObject this_extension = (SubLObject)fact_sheets.NIL;
            this_extension = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, this_extension);
                cdolist_list_var = cdolist_list_var.rest();
                this_extension = cdolist_list_var.first();
            }
            return (SubLObject)fact_sheets.$kw518$DELETED;
        }
        if (fact_sheets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && fact_sheets.NIL == conses_high.member(extension, valid_extensions, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP), (SubLObject)fact_sheets.UNPROVIDED)) {
            Errors.error((SubLObject)fact_sheets.$str519$_S_is_not_a_valid_extension__Must, valid_extensions);
        }
        thread.resetMultipleValues();
        final SubLObject directory = directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, extension);
        final SubLObject filename = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (fact_sheets.NIL != Filesys.directory_p(directory)) {
            file_utilities.delete_file_if_exists(filename);
        }
        final SubLObject formatting_guidelines_file = fact_sheet_formatting_guidelines_file(filename, (SubLObject)fact_sheets.UNPROVIDED);
        file_utilities.delete_file_if_exists(formatting_guidelines_file);
        return (SubLObject)fact_sheets.$kw518$DELETED;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 162782L)
    public static SubLObject write_fact_sheet_html_and_formatting_guidelines(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject html, final SubLObject formatting_guidelines) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term) : v_term;
        assert fact_sheets.NIL != fact_sheet_verbosity_p(verbosity) : verbosity;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : domain_mt;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : language_mt;
        thread.resetMultipleValues();
        final SubLObject directory = directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.$str491$html);
        final SubLObject filename = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (fact_sheets.NIL == Filesys.directory_p(directory)) {
            file_utilities.make_directory_recursive(directory, (SubLObject)fact_sheets.NIL, (SubLObject)((fact_sheets.NIL != chmod_safe_to_useP()) ? fact_sheets.$str509$775 : fact_sheets.NIL));
        }
        if (fact_sheets.NIL == Filesys.directory_p(directory)) {
            Errors.warn((SubLObject)fact_sheets.$str520$Couldn_t_create_directory_for_fac, v_term, directory);
            return (SubLObject)fact_sheets.NIL;
        }
        SubLObject error_message = (SubLObject)fact_sheets.NIL;
        SubLObject success = (SubLObject)fact_sheets.NIL;
        final SubLObject count = (SubLObject)fact_sheets.ZERO_INTEGER;
        final SubLObject max_tries = (SubLObject)fact_sheets.THREE_INTEGER;
        while (fact_sheets.NIL == success && !count.numG(max_tries)) {
            error_message = (SubLObject)fact_sheets.NIL;
            if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                try {
                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                    final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                        try {
                            SubLObject stream = (SubLObject)fact_sheets.NIL;
                            try {
                                stream = compatibility.open_text(filename, (SubLObject)fact_sheets.$kw283$OUTPUT);
                                if (!stream.isStream()) {
                                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, filename);
                                }
                                final SubLObject stream_$208 = stream;
                                print_high.princ(html, stream_$208);
                                success = (SubLObject)fact_sheets.T;
                            }
                            finally {
                                final SubLObject _prev_bind_0_$209 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    if (stream.isStream()) {
                                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                                    }
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$209, thread);
                                }
                            }
                            if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                                file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), (SubLObject)fact_sheets.$str285$664);
                            }
                        }
                        catch (Throwable catch_var) {
                            Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_0, thread);
                    }
                }
                catch (Throwable ccatch_env_var) {
                    error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                }
                finally {
                    thread.throwStack.pop();
                }
            }
            else {
                SubLObject stream2 = (SubLObject)fact_sheets.NIL;
                try {
                    stream2 = compatibility.open_text(filename, (SubLObject)fact_sheets.$kw283$OUTPUT);
                    if (!stream2.isStream()) {
                        Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, filename);
                    }
                    final SubLObject stream_$209 = stream2;
                    print_high.princ(html, stream_$209);
                    success = (SubLObject)fact_sheets.T;
                }
                finally {
                    final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream2.isStream()) {
                            streams_high.close(stream2, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                    }
                }
                if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                    file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), (SubLObject)fact_sheets.$str285$664);
                }
            }
            if (fact_sheets.NIL != error_message) {
                final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T != stream2 || !Threads.current_process().eql(subl_promotions.initial_process())) && (!stream2.isStream() || fact_sheets.NIL == streams_high.output_stream_p(stream2))) {
                    continue;
                }
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream2);
                PrintLow.format(stream2, (SubLObject)fact_sheets.$str521$Couldn_t_write_fact_sheet_for__S_, new SubLObject[] { v_term, count, error_message });
                streams_high.force_output(stream2);
            }
        }
        if (fact_sheets.NIL != error_message) {
            final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream2 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream2))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream2);
                PrintLow.format(stream2, (SubLObject)fact_sheets.$str522$Couldn_t_write_fact_sheet_for__S_, v_term, error_message);
                streams_high.force_output(stream2);
            }
            Errors.error(error_message);
        }
        if (fact_sheets.NIL != formatting_guidelines) {
            final SubLObject formatting_guidelines_file = fact_sheet_formatting_guidelines_file(filename, (SubLObject)fact_sheets.UNPROVIDED);
            SubLObject error_message2 = (SubLObject)fact_sheets.NIL;
            if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                try {
                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                    final SubLObject _prev_bind_3 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                        try {
                            SubLObject stream3 = (SubLObject)fact_sheets.NIL;
                            try {
                                final SubLObject _prev_bind_0_$210 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                try {
                                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                                    stream3 = compatibility.open_binary(formatting_guidelines_file, (SubLObject)fact_sheets.$kw283$OUTPUT);
                                }
                                finally {
                                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$210, thread);
                                }
                                if (!stream3.isStream()) {
                                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, formatting_guidelines_file);
                                }
                                final SubLObject stream_$210 = stream3;
                                if (fact_sheets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !stream_$210.isStream()) {
                                    Errors.error((SubLObject)fact_sheets.$str53$Cannot_open__A, formatting_guidelines_file);
                                }
                                cfasl.cfasl_output_externalized(formatting_guidelines, stream_$210);
                            }
                            finally {
                                final SubLObject _prev_bind_0_$211 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                    final SubLObject _values3 = Values.getValuesAsVector();
                                    if (stream3.isStream()) {
                                        streams_high.close(stream3, (SubLObject)fact_sheets.UNPROVIDED);
                                    }
                                    Values.restoreValuesFromVector(_values3);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$211, thread);
                                }
                            }
                            if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                                file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), (SubLObject)fact_sheets.$str285$664);
                            }
                        }
                        catch (Throwable catch_var2) {
                            Errors.handleThrowable(catch_var2, (SubLObject)fact_sheets.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_3, thread);
                    }
                }
                catch (Throwable ccatch_env_var2) {
                    error_message2 = Errors.handleThrowable(ccatch_env_var2, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                }
                finally {
                    thread.throwStack.pop();
                }
            }
            else {
                SubLObject stream4 = (SubLObject)fact_sheets.NIL;
                try {
                    final SubLObject _prev_bind_4 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                        stream4 = compatibility.open_binary(formatting_guidelines_file, (SubLObject)fact_sheets.$kw283$OUTPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_4, thread);
                    }
                    if (!stream4.isStream()) {
                        Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, formatting_guidelines_file);
                    }
                    final SubLObject stream_$211 = stream4;
                    if (fact_sheets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !stream_$211.isStream()) {
                        Errors.error((SubLObject)fact_sheets.$str53$Cannot_open__A, formatting_guidelines_file);
                    }
                    cfasl.cfasl_output_externalized(formatting_guidelines, stream_$211);
                }
                finally {
                    final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values4 = Values.getValuesAsVector();
                        if (stream4.isStream()) {
                            streams_high.close(stream4, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values4);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                    }
                }
                if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                    file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), (SubLObject)fact_sheets.$str285$664);
                }
            }
            if (fact_sheets.NIL != error_message2) {
                final SubLObject stream4 = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream4 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream4.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream4))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream4);
                    PrintLow.format(stream4, (SubLObject)fact_sheets.$str523$Couldn_t_write_fact_sheet_formatt, v_term, error_message2);
                    streams_high.force_output(stream4);
                }
                Errors.error(error_message2);
            }
        }
        return filename;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 164587L)
    public static SubLObject write_fact_sheet_data_and_formatting_guidelines(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject data, final SubLObject stats, final SubLObject footnotes, final SubLObject formatting_guidelines) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(v_term) : v_term;
        assert fact_sheets.NIL != fact_sheet_verbosity_p(verbosity) : verbosity;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : domain_mt;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : language_mt;
        thread.resetMultipleValues();
        final SubLObject directory = directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.$str503$cfasl);
        final SubLObject filename = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (fact_sheets.NIL == Filesys.directory_p(directory)) {
            file_utilities.make_directory_recursive(directory, (SubLObject)fact_sheets.NIL, (SubLObject)((fact_sheets.NIL != chmod_safe_to_useP()) ? fact_sheets.$str509$775 : fact_sheets.NIL));
        }
        if (fact_sheets.NIL == Filesys.directory_p(directory)) {
            Errors.warn((SubLObject)fact_sheets.$str524$Couldn_t_create_directory_for_fac, v_term, directory);
            return (SubLObject)fact_sheets.NIL;
        }
        SubLObject error_message = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        SubLObject stream = (SubLObject)fact_sheets.NIL;
                        try {
                            final SubLObject _prev_bind_0_$215 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                            try {
                                stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                                stream = compatibility.open_binary(filename, (SubLObject)fact_sheets.$kw283$OUTPUT);
                            }
                            finally {
                                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$215, thread);
                            }
                            if (!stream.isStream()) {
                                Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, filename);
                            }
                            final SubLObject stream_$216 = stream;
                            if (fact_sheets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !stream_$216.isStream()) {
                                Errors.error((SubLObject)fact_sheets.$str53$Cannot_open__A, filename);
                            }
                            cfasl.cfasl_output_externalized(data, stream_$216);
                            cfasl.cfasl_output_externalized(stats, stream_$216);
                            cfasl.cfasl_output_externalized(footnotes, stream_$216);
                        }
                        finally {
                            final SubLObject _prev_bind_0_$216 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (stream.isStream()) {
                                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$216, thread);
                            }
                        }
                        if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                            file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), (SubLObject)fact_sheets.$str285$664);
                        }
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
        }
        else {
            SubLObject stream2 = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream2 = compatibility.open_binary(filename, (SubLObject)fact_sheets.$kw283$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
                }
                if (!stream2.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, filename);
                }
                final SubLObject stream_$217 = stream2;
                if (fact_sheets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !stream_$217.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str53$Cannot_open__A, filename);
                }
                cfasl.cfasl_output_externalized(data, stream_$217);
                cfasl.cfasl_output_externalized(stats, stream_$217);
                cfasl.cfasl_output_externalized(footnotes, stream_$217);
            }
            finally {
                final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream2.isStream()) {
                        streams_high.close(stream2, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                }
            }
            if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                file_utilities.chmod(file_utilities.logical_pathname_to_physical(filename), (SubLObject)fact_sheets.$str285$664);
            }
        }
        if (fact_sheets.NIL != error_message) {
            final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream2 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream2))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream2);
                PrintLow.format(stream2, (SubLObject)fact_sheets.$str525$Couldn_t_write_fact_sheet_data_fo, v_term, error_message);
                streams_high.force_output(stream2);
            }
            Errors.error(error_message);
        }
        if (fact_sheets.NIL != formatting_guidelines) {
            final SubLObject formatting_guidelines_file = fact_sheet_formatting_guidelines_file(filename, (SubLObject)fact_sheets.UNPROVIDED);
            SubLObject error_message2 = (SubLObject)fact_sheets.NIL;
            if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                try {
                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                    final SubLObject _prev_bind_2 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                        try {
                            SubLObject stream3 = (SubLObject)fact_sheets.NIL;
                            try {
                                final SubLObject _prev_bind_0_$217 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                try {
                                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                                    stream3 = compatibility.open_binary(formatting_guidelines_file, (SubLObject)fact_sheets.$kw283$OUTPUT);
                                }
                                finally {
                                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$217, thread);
                                }
                                if (!stream3.isStream()) {
                                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, formatting_guidelines_file);
                                }
                                final SubLObject stream_$218 = stream3;
                                if (fact_sheets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !stream_$218.isStream()) {
                                    Errors.error((SubLObject)fact_sheets.$str53$Cannot_open__A, formatting_guidelines_file);
                                }
                                cfasl.cfasl_output_externalized(formatting_guidelines, stream_$218);
                            }
                            finally {
                                final SubLObject _prev_bind_0_$218 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                    final SubLObject _values3 = Values.getValuesAsVector();
                                    if (stream3.isStream()) {
                                        streams_high.close(stream3, (SubLObject)fact_sheets.UNPROVIDED);
                                    }
                                    Values.restoreValuesFromVector(_values3);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$218, thread);
                                }
                            }
                            if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                                file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), (SubLObject)fact_sheets.$str285$664);
                            }
                        }
                        catch (Throwable catch_var2) {
                            Errors.handleThrowable(catch_var2, (SubLObject)fact_sheets.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_2, thread);
                    }
                }
                catch (Throwable ccatch_env_var2) {
                    error_message2 = Errors.handleThrowable(ccatch_env_var2, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                }
                finally {
                    thread.throwStack.pop();
                }
            }
            else {
                SubLObject stream = (SubLObject)fact_sheets.NIL;
                try {
                    final SubLObject _prev_bind_4 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                        stream = compatibility.open_binary(formatting_guidelines_file, (SubLObject)fact_sheets.$kw283$OUTPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_4, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, formatting_guidelines_file);
                    }
                    final SubLObject stream_$219 = stream;
                    if (fact_sheets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !stream_$219.isStream()) {
                        Errors.error((SubLObject)fact_sheets.$str53$Cannot_open__A, formatting_guidelines_file);
                    }
                    cfasl.cfasl_output_externalized(formatting_guidelines, stream_$219);
                }
                finally {
                    final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values4 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values4);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                    }
                }
                if (fact_sheets.NIL != fact_sheets.$chmod_safe_to_useP$.getDynamicValue(thread)) {
                    file_utilities.chmod(file_utilities.logical_pathname_to_physical(formatting_guidelines_file), (SubLObject)fact_sheets.$str285$664);
                }
            }
            if (fact_sheets.NIL != error_message2) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str523$Couldn_t_write_fact_sheet_formatt, v_term, error_message2);
                    streams_high.force_output(stream);
                }
                Errors.error(error_message2);
            }
        }
        return filename;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 166327L)
    public static SubLObject stop_fact_sheet_updates_after_current_term() {
        fact_sheets.$stop_fact_sheet_update_after_current_termP$.setGlobalValue((SubLObject)fact_sheets.T);
        return fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 166500L)
    public static SubLObject start_new_fact_sheet_updater(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject stop_after, SubLObject new_days) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (stop_after == fact_sheets.UNPROVIDED) {
            stop_after = (SubLObject)fact_sheets.NIL;
        }
        if (new_days == fact_sheets.UNPROVIDED) {
            new_days = fsut_prioritizer_default_new_days();
        }
        fact_sheets.$stop_fact_sheet_update_after_current_termP$.setGlobalValue((SubLObject)fact_sheets.NIL);
        return process_utilities.make_cyc_server_process_with_args((SubLObject)fact_sheets.$str526$Fact_Sheet_Updater, (SubLObject)fact_sheets.$sym527$UPDATE_FACT_SHEETS, (SubLObject)ConsesLow.list(verbosity, domain_mt, language_mt, stop_after, new_days));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 166941L)
    public static SubLObject start_new_stale_fact_sheet_updater(SubLObject root) {
        if (root == fact_sheets.UNPROVIDED) {
            root = file_utilities.cyc_home_subdirectory(fact_sheet_data_path());
        }
        fact_sheets.$stop_fact_sheet_update_after_current_termP$.setGlobalValue((SubLObject)fact_sheets.NIL);
        return process_utilities.make_cyc_server_process_with_args((SubLObject)fact_sheets.$str528$Stale_Fact_Sheet_Updater, (SubLObject)fact_sheets.$sym529$UPDATE_ALL_STALE_FACT_SHEETS, (SubLObject)ConsesLow.list(root));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 167256L)
    public static SubLObject start_new_all_fact_sheet_updater(SubLObject number_of_workers, SubLObject this_worker_number, SubLObject verbosities, SubLObject target_statuses, SubLObject domain_mt, SubLObject language_mt) {
        if (number_of_workers == fact_sheets.UNPROVIDED) {
            number_of_workers = (SubLObject)fact_sheets.ONE_INTEGER;
        }
        if (this_worker_number == fact_sheets.UNPROVIDED) {
            this_worker_number = (SubLObject)fact_sheets.ZERO_INTEGER;
        }
        if (verbosities == fact_sheets.UNPROVIDED) {
            verbosities = (SubLObject)fact_sheets.$list530;
        }
        if (target_statuses == fact_sheets.UNPROVIDED) {
            target_statuses = (SubLObject)fact_sheets.$list531;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        fact_sheets.$stop_fact_sheet_update_after_current_termP$.setGlobalValue((SubLObject)fact_sheets.NIL);
        return process_utilities.make_cyc_server_process_with_args((SubLObject)fact_sheets.$str532$All_Fact_Sheet_Updater, (SubLObject)fact_sheets.$sym533$UPDATE_ALL_FACT_SHEETS, (SubLObject)ConsesLow.list(number_of_workers, this_worker_number, verbosities, target_statuses, domain_mt, language_mt));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 167862L)
    public static SubLObject start_new_fact_sheet_log_file_watcher(SubLObject file_stream) {
        if (file_stream == fact_sheets.UNPROVIDED) {
            file_stream = fact_sheet_logs.fact_sheet_log_stream();
        }
        return process_utilities.make_cyc_server_process_with_args((SubLObject)fact_sheets.$str534$Fact_Sheet_Log_File_Watcher, (SubLObject)fact_sheets.$sym535$WATCH_FACT_SHEET_LOG_FILE, (SubLObject)ConsesLow.list(file_stream));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 168529L)
    public static SubLObject watch_fact_sheet_log_file(final SubLObject file_stream) {
        while (fact_sheets.NIL == fact_sheet_log_stream_active_p(file_stream)) {
            Threads.sleep((SubLObject)fact_sheets.$int536$60);
        }
        SubLObject last_file_length = streams_high.file_length(file_stream);
        Threads.sleep(fact_sheets.$fact_sheet_inactivity_image_restart_delay$.getGlobalValue());
        while (fact_sheets.NIL != fact_sheet_log_stream_active_p(file_stream)) {
            final SubLObject this_file_length = streams_high.file_length(file_stream);
            if (this_file_length.eql(last_file_length)) {
                SubLObject reason = (SubLObject)fact_sheets.NIL;
                SubLObject stream = (SubLObject)fact_sheets.NIL;
                try {
                    stream = streams_high.make_private_string_output_stream();
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$kw428$WARN, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str537$No_progress_after_at_least__A_try, numeric_date_utilities.readable_elapsed_time_string(fact_sheets.$fact_sheet_inactivity_image_restart_delay$.getGlobalValue(), (SubLObject)fact_sheets.ZERO_INTEGER), file_stream);
                    reason = streams_high.get_output_stream_string(stream);
                }
                finally {
                    final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
                    try {
                        Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)fact_sheets.T);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
                    }
                }
                final SubLObject stream_$223 = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream_$223 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$223.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$223))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$223);
                    PrintLow.format(stream_$223, (SubLObject)fact_sheets.$str538$Halting_fact_sheet_updating___S, reason);
                    streams_high.force_output(stream_$223);
                }
                fact_sheets.$stop_fact_sheet_update_after_current_termP$.setGlobalValue((SubLObject)fact_sheets.T);
            }
            Threads.sleep(fact_sheets.$fact_sheet_inactivity_image_restart_delay$.getGlobalValue());
            last_file_length = this_file_length;
        }
        return file_stream;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 169480L)
    public static SubLObject fact_sheet_log_stream_active_p(final SubLObject file_stream) {
        return (SubLObject)SubLObjectFactory.makeBoolean(file_stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(file_stream) && fact_sheets.NIL != streams_high.open_stream_p(file_stream));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 169638L)
    public static SubLObject halt_fact_sheet_updater_image(final SubLObject reason) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject timed_outP = (SubLObject)fact_sheets.NIL;
        final SubLObject tag = subl_macro_promotions.with_timeout_make_tag();
        try {
            thread.throwStack.push(tag);
            final SubLObject _prev_bind_0 = subl_macro_promotions.$within_with_timeout$.currentBinding(thread);
            try {
                subl_macro_promotions.$within_with_timeout$.bind((SubLObject)fact_sheets.T, thread);
                SubLObject timer = (SubLObject)fact_sheets.NIL;
                try {
                    final SubLObject _prev_bind_0_$224 = subl_macro_promotions.$with_timeout_nesting_depth$.currentBinding(thread);
                    try {
                        subl_macro_promotions.$with_timeout_nesting_depth$.bind(Numbers.add((SubLObject)fact_sheets.ONE_INTEGER, subl_macro_promotions.$with_timeout_nesting_depth$.getDynamicValue(thread)), thread);
                        timer = subl_macro_promotions.with_timeout_start_timer((SubLObject)fact_sheets.$int536$60, tag);
                        operation_communication.halt_cyc_image(reason);
                    }
                    finally {
                        subl_macro_promotions.$with_timeout_nesting_depth$.rebind(_prev_bind_0_$224, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$225 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        subl_macro_promotions.with_timeout_stop_timer(timer);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$225, thread);
                    }
                }
            }
            finally {
                subl_macro_promotions.$within_with_timeout$.rebind(_prev_bind_0, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            timed_outP = Errors.handleThrowable(ccatch_env_var, tag);
        }
        finally {
            thread.throwStack.pop();
        }
        return Processes.exit((SubLObject)fact_sheets.ZERO_INTEGER);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 169920L)
    public static SubLObject update_fact_sheets_for_all_fact_sheetable_instances_of_without_good_fact_sheets_generated_since(SubLObject coll, SubLObject date, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
        if (coll == fact_sheets.UNPROVIDED) {
            coll = fact_sheets.$const540$Individual;
        }
        if (date == fact_sheets.UNPROVIDED) {
            date = fact_sheets.$fact_sheet_generator_update_date_and_second$.getDynamicValue().first();
        }
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt();
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != fort_types_interface.collection_p(coll) : coll;
        assert fact_sheets.NIL != Types.integerp(date) : date;
        final SubLObject old_generator_update_date = fact_sheets.$fact_sheet_generator_update_date_and_second$.getDynamicValue(thread);
        fact_sheets.$fact_sheet_generator_update_date_and_second$.setDynamicValue((SubLObject)ConsesLow.list(date, (SubLObject)fact_sheets.ZERO_INTEGER), thread);
        final SubLObject already_loggingP = Types.stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
        SubLObject directory = (SubLObject)fact_sheets.NIL;
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject use_new_setupP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == already_loggingP) {
            thread.resetMultipleValues();
            final SubLObject directory_$226 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
            final SubLObject filename_$227 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            directory = directory_$226;
            filename = filename_$227;
            use_new_setupP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != Filesys.directory_p(directory) && filename.isString());
        }
        if (fact_sheets.NIL != use_new_setupP) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_file$.bind((fact_sheets.NIL != use_new_setupP) ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_0_$228 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$228, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
                }
                final SubLObject _prev_bind_0_$229 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
                try {
                    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
                    final SubLObject _prev_bind_0_$230 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
                    try {
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind((SubLObject)fact_sheets.NIL, thread);
                        fact_sheet_logs.$hourly_fact_sheet_stats$.bind(Vectors.make_vector((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER), thread);
                        fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject stream_$231 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$231 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$231.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$231))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$231);
                            PrintLow.format(stream_$231, (SubLObject)fact_sheets.$str545$Updating_fact_sheets_for_all_fact, new SubLObject[] { coll, date, verbosity, domain_mt, language_mt });
                            streams_high.force_output(stream_$231);
                        }
                        final SubLObject node_var = coll;
                        final SubLObject _prev_bind_0_$231 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$233 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                        try {
                            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa), thread);
                            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                            try {
                                SubLObject node_var_$234 = node_var;
                                final SubLObject deck_type = (SubLObject)fact_sheets.$kw420$STACK;
                                final SubLObject recur_deck = deck.create_deck(deck_type);
                                final SubLObject _prev_bind_0_$232 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                    try {
                                        final SubLObject mt_var = domain_mt;
                                        final SubLObject _prev_bind_0_$233 = mt_relevance_macros.$mt$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$234 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                        try {
                                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                                            final SubLObject tv_var = (SubLObject)fact_sheets.NIL;
                                            final SubLObject _prev_bind_0_$234 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$235 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_tv$.bind((fact_sheets.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((fact_sheets.NIL != tv_var) ? fact_sheets.$sym422$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                                                if (fact_sheets.NIL != tv_var && fact_sheets.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && fact_sheets.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                    final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                    if (pcase_var.eql((SubLObject)fact_sheets.$kw423$ERROR)) {
                                                        sbhl_paranoia.sbhl_error((SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                                    }
                                                    else if (pcase_var.eql((SubLObject)fact_sheets.$kw426$CERROR)) {
                                                        sbhl_paranoia.sbhl_cerror((SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.$str427$continue_anyway, (SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                                    }
                                                    else if (pcase_var.eql((SubLObject)fact_sheets.$kw428$WARN)) {
                                                        Errors.warn((SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P);
                                                    }
                                                    else {
                                                        Errors.warn((SubLObject)fact_sheets.$str429$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                        Errors.cerror((SubLObject)fact_sheets.$str427$continue_anyway, (SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P);
                                                    }
                                                }
                                                final SubLObject _prev_bind_0_$235 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$236 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                final SubLObject _prev_bind_2_$242 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)), thread);
                                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa))), thread);
                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa))), thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)fact_sheets.NIL, thread);
                                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)), thread);
                                                    if (fact_sheets.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || fact_sheets.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED))) {
                                                        final SubLObject _prev_bind_0_$236 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                        final SubLObject _prev_bind_1_$237 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                        final SubLObject _prev_bind_2_$243 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa))), thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)fact_sheets.NIL, thread);
                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$234, (SubLObject)fact_sheets.UNPROVIDED);
                                                            while (fact_sheets.NIL != node_var_$234) {
                                                                final SubLObject tt_node_var = node_var_$234;
                                                                SubLObject cdolist_list_var;
                                                                final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa));
                                                                SubLObject module_var = (SubLObject)fact_sheets.NIL;
                                                                module_var = cdolist_list_var.first();
                                                                while (fact_sheets.NIL != cdolist_list_var) {
                                                                    final SubLObject _prev_bind_0_$237 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                    final SubLObject _prev_bind_1_$238 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((fact_sheets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(fact_sheets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                                        final SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                        if (fact_sheets.NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                            final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED));
                                                                            if (fact_sheets.NIL != d_link) {
                                                                                final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED));
                                                                                if (fact_sheets.NIL != mt_links) {
                                                                                    SubLObject iteration_state;
                                                                                    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                                        thread.resetMultipleValues();
                                                                                        final SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                        final SubLObject tv_links = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (fact_sheets.NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                                            final SubLObject _prev_bind_0_$238 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                                                SubLObject iteration_state_$249;
                                                                                                for (iteration_state_$249 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$249); iteration_state_$249 = dictionary_contents.do_dictionary_contents_next(iteration_state_$249)) {
                                                                                                    thread.resetMultipleValues();
                                                                                                    final SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$249);
                                                                                                    final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                    thread.resetMultipleValues();
                                                                                                    if (fact_sheets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                                        final SubLObject _prev_bind_0_$239 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                                            final SubLObject sol = link_nodes;
                                                                                                            if (fact_sheets.NIL != set.set_p(sol)) {
                                                                                                                final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                                SubLObject basis_object;
                                                                                                                SubLObject state;
                                                                                                                SubLObject ind;
                                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)fact_sheets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                                    ind = set_contents.do_set_contents_next(basis_object, state);
                                                                                                                    if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state, ind) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ind, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ind, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                        if (fact_sheets.NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                                                                                                                            maybe_update_fact_sheet_and_record_stats(ind, verbosity, domain_mt, language_mt);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            else if (sol.isList()) {
                                                                                                                SubLObject csome_list_var = sol;
                                                                                                                SubLObject ind2 = (SubLObject)fact_sheets.NIL;
                                                                                                                ind2 = csome_list_var.first();
                                                                                                                while (fact_sheets.NIL != csome_list_var) {
                                                                                                                    if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ind2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(ind2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                        if (fact_sheets.NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                                                                                                                            maybe_update_fact_sheet_and_record_stats(ind2, verbosity, domain_mt, language_mt);
                                                                                                                        }
                                                                                                                    }
                                                                                                                    csome_list_var = csome_list_var.rest();
                                                                                                                    ind2 = csome_list_var.first();
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                            }
                                                                                                        }
                                                                                                        finally {
                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$239, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$249);
                                                                                            }
                                                                                            finally {
                                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$238, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                }
                                                                            }
                                                                            else {
                                                                                sbhl_paranoia.sbhl_error((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)fact_sheets.$str434$attempting_to_bind_direction_link, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                                                            }
                                                                            if (fact_sheets.NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED))) {
                                                                                SubLObject csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                SubLObject instance_tuple = (SubLObject)fact_sheets.NIL;
                                                                                instance_tuple = csome_list_var2.first();
                                                                                while (fact_sheets.NIL != csome_list_var2) {
                                                                                    SubLObject current;
                                                                                    final SubLObject datum = current = instance_tuple;
                                                                                    SubLObject link_node = (SubLObject)fact_sheets.NIL;
                                                                                    SubLObject mt2 = (SubLObject)fact_sheets.NIL;
                                                                                    SubLObject tv2 = (SubLObject)fact_sheets.NIL;
                                                                                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list547);
                                                                                    link_node = current.first();
                                                                                    current = current.rest();
                                                                                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list547);
                                                                                    mt2 = current.first();
                                                                                    current = current.rest();
                                                                                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list547);
                                                                                    tv2 = current.first();
                                                                                    current = current.rest();
                                                                                    if (fact_sheets.NIL == current) {
                                                                                        if (fact_sheets.NIL != mt_relevance_macros.relevant_mtP(mt2)) {
                                                                                            final SubLObject _prev_bind_0_$240 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt2, thread);
                                                                                                if (fact_sheets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                                    final SubLObject _prev_bind_0_$241 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                    try {
                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                                        final SubLObject sol;
                                                                                                        final SubLObject link_nodes2 = sol = (SubLObject)ConsesLow.list(link_node);
                                                                                                        if (fact_sheets.NIL != set.set_p(sol)) {
                                                                                                            final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                            SubLObject basis_object;
                                                                                                            SubLObject state;
                                                                                                            SubLObject ind;
                                                                                                            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)fact_sheets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                                ind = set_contents.do_set_contents_next(basis_object, state);
                                                                                                                if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state, ind) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ind, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ind, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                    if (fact_sheets.NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                                                                                                                        maybe_update_fact_sheet_and_record_stats(ind, verbosity, domain_mt, language_mt);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else if (sol.isList()) {
                                                                                                            SubLObject csome_list_var_$253 = sol;
                                                                                                            SubLObject ind2 = (SubLObject)fact_sheets.NIL;
                                                                                                            ind2 = csome_list_var_$253.first();
                                                                                                            while (fact_sheets.NIL != csome_list_var_$253) {
                                                                                                                if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ind2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(ind2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                    if (fact_sheets.NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                                                                                                                        maybe_update_fact_sheet_and_record_stats(ind2, verbosity, domain_mt, language_mt);
                                                                                                                    }
                                                                                                                }
                                                                                                                csome_list_var_$253 = csome_list_var_$253.rest();
                                                                                                                ind2 = csome_list_var_$253.first();
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                        }
                                                                                                    }
                                                                                                    finally {
                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$241, thread);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            finally {
                                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$240, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list547);
                                                                                    }
                                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                                    instance_tuple = csome_list_var2.first();
                                                                                }
                                                                            }
                                                                        }
                                                                        else if (fact_sheets.NIL != obsolete.cnat_p(node, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                            SubLObject cdolist_list_var_$254;
                                                                            final SubLObject new_list = cdolist_list_var_$254 = ((fact_sheets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED)));
                                                                            SubLObject generating_fn = (SubLObject)fact_sheets.NIL;
                                                                            generating_fn = cdolist_list_var_$254.first();
                                                                            while (fact_sheets.NIL != cdolist_list_var_$254) {
                                                                                final SubLObject _prev_bind_0_$242 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                    final SubLObject sol2;
                                                                                    final SubLObject link_nodes3 = sol2 = Functions.funcall(generating_fn, node);
                                                                                    if (fact_sheets.NIL != set.set_p(sol2)) {
                                                                                        final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                                        SubLObject basis_object2;
                                                                                        SubLObject state2;
                                                                                        SubLObject ind3;
                                                                                        for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)fact_sheets.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                            ind3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                            if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state2, ind3) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ind3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ind3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                if (fact_sheets.NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                                                                                                    maybe_update_fact_sheet_and_record_stats(ind3, verbosity, domain_mt, language_mt);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else if (sol2.isList()) {
                                                                                        SubLObject csome_list_var3 = sol2;
                                                                                        SubLObject ind4 = (SubLObject)fact_sheets.NIL;
                                                                                        ind4 = csome_list_var3.first();
                                                                                        while (fact_sheets.NIL != csome_list_var3) {
                                                                                            if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(ind4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(ind4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                if (fact_sheets.NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                                                                                                    maybe_update_fact_sheet_and_record_stats(ind4, verbosity, domain_mt, language_mt);
                                                                                                }
                                                                                            }
                                                                                            csome_list_var3 = csome_list_var3.rest();
                                                                                            ind4 = csome_list_var3.first();
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                                    }
                                                                                }
                                                                                finally {
                                                                                    sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$242, thread);
                                                                                }
                                                                                cdolist_list_var_$254 = cdolist_list_var_$254.rest();
                                                                                generating_fn = cdolist_list_var_$254.first();
                                                                            }
                                                                        }
                                                                    }
                                                                    finally {
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$238, thread);
                                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$237, thread);
                                                                    }
                                                                    cdolist_list_var = cdolist_list_var.rest();
                                                                    module_var = cdolist_list_var.first();
                                                                }
                                                                SubLObject cdolist_list_var2;
                                                                final SubLObject accessible_modules2 = cdolist_list_var2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)));
                                                                SubLObject module_var2 = (SubLObject)fact_sheets.NIL;
                                                                module_var2 = cdolist_list_var2.first();
                                                                while (fact_sheets.NIL != cdolist_list_var2) {
                                                                    final SubLObject _prev_bind_0_$243 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                    final SubLObject _prev_bind_1_$239 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((fact_sheets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(fact_sheets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                                        final SubLObject node2 = function_terms.naut_to_nart(node_var_$234);
                                                                        if (fact_sheets.NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                                            final SubLObject d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED));
                                                                            if (fact_sheets.NIL != d_link2) {
                                                                                final SubLObject mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED));
                                                                                if (fact_sheets.NIL != mt_links2) {
                                                                                    SubLObject iteration_state2;
                                                                                    for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                                        thread.resetMultipleValues();
                                                                                        final SubLObject mt3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                                        final SubLObject tv_links2 = thread.secondMultipleValue();
                                                                                        thread.resetMultipleValues();
                                                                                        if (fact_sheets.NIL != mt_relevance_macros.relevant_mtP(mt3)) {
                                                                                            final SubLObject _prev_bind_0_$244 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt3, thread);
                                                                                                SubLObject iteration_state_$250;
                                                                                                for (iteration_state_$250 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$250); iteration_state_$250 = dictionary_contents.do_dictionary_contents_next(iteration_state_$250)) {
                                                                                                    thread.resetMultipleValues();
                                                                                                    final SubLObject tv2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$250);
                                                                                                    final SubLObject link_nodes4 = thread.secondMultipleValue();
                                                                                                    thread.resetMultipleValues();
                                                                                                    if (fact_sheets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                                        final SubLObject _prev_bind_0_$245 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                                            final SubLObject sol3 = link_nodes4;
                                                                                                            if (fact_sheets.NIL != set.set_p(sol3)) {
                                                                                                                final SubLObject set_contents_var3 = set.do_set_internal(sol3);
                                                                                                                SubLObject basis_object3;
                                                                                                                SubLObject state3;
                                                                                                                SubLObject node_vars_link_node;
                                                                                                                for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = (SubLObject)fact_sheets.NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                                    node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                                    if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            else if (sol3.isList()) {
                                                                                                                SubLObject csome_list_var4 = sol3;
                                                                                                                SubLObject node_vars_link_node2 = (SubLObject)fact_sheets.NIL;
                                                                                                                node_vars_link_node2 = csome_list_var4.first();
                                                                                                                while (fact_sheets.NIL != csome_list_var4) {
                                                                                                                    if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                                                        deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                                    }
                                                                                                                    csome_list_var4 = csome_list_var4.rest();
                                                                                                                    node_vars_link_node2 = csome_list_var4.first();
                                                                                                                }
                                                                                                            }
                                                                                                            else {
                                                                                                                Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                            }
                                                                                                        }
                                                                                                        finally {
                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$245, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$250);
                                                                                            }
                                                                                            finally {
                                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$244, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                                }
                                                                            }
                                                                            else {
                                                                                sbhl_paranoia.sbhl_error((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)fact_sheets.$str434$attempting_to_bind_direction_link, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                                                            }
                                                                        }
                                                                        else if (fact_sheets.NIL != obsolete.cnat_p(node2, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                            SubLObject cdolist_list_var_$255;
                                                                            final SubLObject new_list2 = cdolist_list_var_$255 = ((fact_sheets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED)));
                                                                            SubLObject generating_fn2 = (SubLObject)fact_sheets.NIL;
                                                                            generating_fn2 = cdolist_list_var_$255.first();
                                                                            while (fact_sheets.NIL != cdolist_list_var_$255) {
                                                                                final SubLObject _prev_bind_0_$246 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                                    final SubLObject sol4;
                                                                                    final SubLObject link_nodes5 = sol4 = Functions.funcall(generating_fn2, node2);
                                                                                    if (fact_sheets.NIL != set.set_p(sol4)) {
                                                                                        final SubLObject set_contents_var4 = set.do_set_internal(sol4);
                                                                                        SubLObject basis_object4;
                                                                                        SubLObject state4;
                                                                                        SubLObject node_vars_link_node3;
                                                                                        for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = (SubLObject)fact_sheets.NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                            node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                            if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else if (sol4.isList()) {
                                                                                        SubLObject csome_list_var5 = sol4;
                                                                                        SubLObject node_vars_link_node4 = (SubLObject)fact_sheets.NIL;
                                                                                        node_vars_link_node4 = csome_list_var5.first();
                                                                                        while (fact_sheets.NIL != csome_list_var5) {
                                                                                            if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                                deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                            }
                                                                                            csome_list_var5 = csome_list_var5.rest();
                                                                                            node_vars_link_node4 = csome_list_var5.first();
                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                                    }
                                                                                }
                                                                                finally {
                                                                                    sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$246, thread);
                                                                                }
                                                                                cdolist_list_var_$255 = cdolist_list_var_$255.rest();
                                                                                generating_fn2 = cdolist_list_var_$255.first();
                                                                            }
                                                                        }
                                                                    }
                                                                    finally {
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$239, thread);
                                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$243, thread);
                                                                    }
                                                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                                                    module_var2 = cdolist_list_var2.first();
                                                                }
                                                                node_var_$234 = deck.deck_pop(recur_deck);
                                                            }
                                                        }
                                                        finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$243, thread);
                                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$237, thread);
                                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$236, thread);
                                                        }
                                                    }
                                                    else {
                                                        sbhl_paranoia.sbhl_warn((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.$str435$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED)), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                                    }
                                                }
                                                finally {
                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$242, thread);
                                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$236, thread);
                                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$235, thread);
                                                }
                                            }
                                            finally {
                                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$235, thread);
                                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$234, thread);
                                            }
                                        }
                                        finally {
                                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$234, thread);
                                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_$233, thread);
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$247 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                            final SubLObject _values = Values.getValuesAsVector();
                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                            Values.restoreValuesFromVector(_values);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$247, thread);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$232, thread);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$248 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                    final SubLObject _values2 = Values.getValuesAsVector();
                                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    Values.restoreValuesFromVector(_values2);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$248, thread);
                                }
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1_$233, thread);
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$231, thread);
                        }
                    }
                    finally {
                        fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$230, thread);
                    }
                    if (fact_sheets.NIL != use_new_setupP) {
                        final SubLObject stream_$232 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$232 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$232.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$232))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$232);
                            PrintLow.format(stream_$232, (SubLObject)fact_sheets.$str548$Closing_log_);
                            streams_high.force_output(stream_$232);
                        }
                        fact_sheet_logs.note_fact_sheet_log_file_closed((SubLObject)fact_sheets.UNPROVIDED);
                    }
                }
                finally {
                    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$229, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$249 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$249, thread);
                }
            }
        }
        finally {
            fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
        }
        fact_sheets.$fact_sheet_generator_update_date_and_second$.setDynamicValue(old_generator_update_date, thread);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 171402L)
    public static SubLObject launch_fact_sheet_updater_of_fs_type_not_updated_since(final SubLObject fs_type, SubLObject date, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
        if (date == fact_sheets.UNPROVIDED) {
            date = fact_sheets.$fact_sheet_generator_update_date_and_second$.getDynamicValue().first();
        }
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt();
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        return process_utilities.make_cyc_server_process_with_args((SubLObject)fact_sheets.$str549$Fact_Sheet_updater_for_Public_Fac, (SubLObject)fact_sheets.$sym550$UPDATE_FACT_SHEETS_OF_FS_TYPE_NOT_UPDATED_SINCE, (SubLObject)ConsesLow.list(fs_type, date, verbosity, domain_mt, language_mt));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 171868L)
    public static SubLObject update_fact_sheets_of_fs_type_not_updated_since(final SubLObject fs_type, SubLObject date, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt) {
        if (date == fact_sheets.UNPROVIDED) {
            date = fact_sheets.$fact_sheet_generator_update_date_and_second$.getDynamicValue().first();
        }
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = fact_sheet_default_domain_mt();
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != Types.integerp(date) : date;
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_generator_update_date_and_second$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_generator_update_date_and_second$.bind((SubLObject)ConsesLow.list(date, (SubLObject)fact_sheets.ZERO_INTEGER), thread);
            final SubLObject terms = terms_for_public_fact_sheets(fs_type);
            final SubLObject message = Sequences.cconcatenate((SubLObject)fact_sheets.$str551$Updating_, new SubLObject[] { format_nil.format_nil_a_no_copy(fs_type), fact_sheets.$str552$_fact_sheets });
            final SubLObject already_loggingP = Types.stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
            SubLObject directory = (SubLObject)fact_sheets.NIL;
            SubLObject filename = (SubLObject)fact_sheets.NIL;
            SubLObject use_new_setupP = (SubLObject)fact_sheets.NIL;
            if (fact_sheets.NIL == already_loggingP) {
                thread.resetMultipleValues();
                final SubLObject directory_$267 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
                final SubLObject filename_$268 = thread.secondMultipleValue();
                thread.resetMultipleValues();
                directory = directory_$267;
                filename = filename_$268;
                use_new_setupP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != Filesys.directory_p(directory) && filename.isString());
            }
            if (fact_sheets.NIL != use_new_setupP) {
                PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
                streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
            }
            final SubLObject _prev_bind_0_$269 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
            try {
                fact_sheet_logs.$fact_sheet_log_file$.bind((fact_sheets.NIL != use_new_setupP) ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
                SubLObject stream = (SubLObject)fact_sheets.NIL;
                try {
                    final SubLObject _prev_bind_0_$270 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                        stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$270, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
                    }
                    final SubLObject _prev_bind_0_$271 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
                    try {
                        fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
                        final SubLObject _prev_bind_0_$272 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
                        try {
                            fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind((SubLObject)fact_sheets.NIL, thread);
                            fact_sheet_logs.$hourly_fact_sheet_stats$.bind(Vectors.make_vector((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER), thread);
                            fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                            final SubLObject stream_$273 = fact_sheet_logs.fact_sheet_log_stream();
                            if ((fact_sheets.T == stream_$273 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$273.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$273))) {
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$273);
                                PrintLow.format(stream_$273, (SubLObject)fact_sheets.$str553$Updating_fact_sheets_for_public_t, new SubLObject[] { fs_type, date, verbosity, domain_mt, language_mt });
                                streams_high.force_output(stream_$273);
                            }
                            final SubLObject set_var = terms;
                            final SubLObject _prev_bind_0_$273 = utilities_macros.$progress_note$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$275 = utilities_macros.$progress_start_time$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
                            final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                            final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                            final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                            final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                            try {
                                utilities_macros.$progress_note$.bind(message, thread);
                                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                                utilities_macros.$progress_total$.bind(set.set_size(set_var), thread);
                                utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                try {
                                    utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                    final SubLObject set_contents_var = set.do_set_internal(set_var);
                                    SubLObject basis_object;
                                    SubLObject state;
                                    SubLObject v_term;
                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)fact_sheets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                        v_term = set_contents.do_set_contents_next(basis_object, state);
                                        if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state, v_term)) {
                                            if (fact_sheets.NIL == fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                                                maybe_update_fact_sheet_and_record_stats(v_term, verbosity, domain_mt, language_mt);
                                            }
                                            utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                                            utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                        }
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$274 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        utilities_macros.noting_percent_progress_postamble();
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$274, thread);
                                    }
                                }
                            }
                            finally {
                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                                utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                                utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
                                utilities_macros.$progress_start_time$.rebind(_prev_bind_1_$275, thread);
                                utilities_macros.$progress_note$.rebind(_prev_bind_0_$273, thread);
                            }
                        }
                        finally {
                            fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
                            fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$272, thread);
                        }
                        if (fact_sheets.NIL != use_new_setupP) {
                            final SubLObject stream_$274 = fact_sheet_logs.fact_sheet_log_stream();
                            if ((fact_sheets.T == stream_$274 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$274.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$274))) {
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$274);
                                PrintLow.format(stream_$274, (SubLObject)fact_sheets.$str548$Closing_log_);
                                streams_high.force_output(stream_$274);
                            }
                            fact_sheet_logs.note_fact_sheet_log_file_closed((SubLObject)fact_sheets.UNPROVIDED);
                        }
                    }
                    finally {
                        fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$271, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$275 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$275, thread);
                    }
                }
            }
            finally {
                fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0_$269, thread);
            }
        }
        finally {
            fact_sheets.$fact_sheet_generator_update_date_and_second$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 172876L)
    public static SubLObject maybe_update_fact_sheet_and_record_stats(final SubLObject ind, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
        if (fact_sheets.NIL != possibly_update_fact_sheet_for_term(ind, verbosity, domain_mt, language_mt)) {
            fact_sheet_logs.add_fact_sheet_info_to_hourly_stats(ind);
            fact_sheet_logs.maybe_log_fact_sheet_hourly_report();
        }
        return ind;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 173156L)
    public static SubLObject update_all_stale_fact_sheets(SubLObject root) {
        if (root == fact_sheets.UNPROVIDED) {
            root = file_utilities.cyc_home_subdirectory(fact_sheet_data_path());
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_file$.bind((SubLObject)fact_sheets.NIL, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)fact_sheets.T, thread);
            final SubLObject progress_message = (SubLObject)((fact_sheets.NIL != utilities_macros.$silent_progressP$.getDynamicValue(thread)) ? fact_sheets.NIL : fact_sheets.$str554$Updating_stale_fact_sheets___);
            SubLObject error_count = (SubLObject)fact_sheets.ZERO_INTEGER;
            SubLObject stopP = (SubLObject)fact_sheets.NIL;
            SubLObject current_directory = (SubLObject)fact_sheets.NIL;
            SubLObject current_directory_okP = (SubLObject)fact_sheets.NIL;
            SubLObject verbosity = (SubLObject)fact_sheets.NIL;
            SubLObject domain_mt = (SubLObject)fact_sheets.NIL;
            SubLObject language_mt = (SubLObject)fact_sheets.NIL;
            final SubLObject already_loggingP = Types.stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
            SubLObject directory = (SubLObject)fact_sheets.NIL;
            SubLObject filename = (SubLObject)fact_sheets.NIL;
            SubLObject use_new_setupP = (SubLObject)fact_sheets.NIL;
            if (fact_sheets.NIL == already_loggingP) {
                thread.resetMultipleValues();
                final SubLObject directory_$279 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
                final SubLObject filename_$280 = thread.secondMultipleValue();
                thread.resetMultipleValues();
                directory = directory_$279;
                filename = filename_$280;
                use_new_setupP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != Filesys.directory_p(directory) && filename.isString());
            }
            if (fact_sheets.NIL != use_new_setupP) {
                PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
                streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
            }
            final SubLObject _prev_bind_0_$281 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
            try {
                fact_sheet_logs.$fact_sheet_log_file$.bind((fact_sheets.NIL != use_new_setupP) ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
                SubLObject stream = (SubLObject)fact_sheets.NIL;
                try {
                    final SubLObject _prev_bind_0_$282 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                        stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$282, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
                    }
                    final SubLObject _prev_bind_0_$283 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
                    try {
                        fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
                        final SubLObject _prev_bind_0_$284 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$285 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
                        try {
                            fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind((SubLObject)fact_sheets.NIL, thread);
                            fact_sheet_logs.$hourly_fact_sheet_stats$.bind(Vectors.make_vector((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER), thread);
                            fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                            final SubLObject stream_$286 = fact_sheet_logs.fact_sheet_log_stream();
                            if ((fact_sheets.T == stream_$286 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$286.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$286))) {
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$286);
                                PrintLow.format(stream_$286, (SubLObject)fact_sheets.$str555$Updating_all_stale_fact_sheets_fr, root);
                                streams_high.force_output(stream_$286);
                            }
                            while (fact_sheets.NIL == stopP) {
                                assert fact_sheets.NIL != Filesys.directory_p(root) : root;
                                SubLObject directory_list_var = (SubLObject)ConsesLow.list(root);
                                SubLObject current_directory_var = (SubLObject)fact_sheets.NIL;
                                current_directory_var = directory_list_var.first();
                                while (fact_sheets.NIL != directory_list_var) {
                                    directory_list_var = directory_list_var.rest();
                                    assert fact_sheets.NIL != Filesys.directory_p(current_directory_var) : current_directory_var;
                                    SubLObject directory_contents_var = Filesys.directory(current_directory_var, (SubLObject)fact_sheets.T);
                                    final SubLObject progress_message_var = (SubLObject)(progress_message.isString() ? Sequences.cconcatenate(progress_message, Sequences.cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { fact_sheets.$str516$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) })) : fact_sheets.NIL);
                                    final SubLObject _prev_bind_0_$285 = utilities_macros.$silent_progressP$.currentBinding(thread);
                                    try {
                                        utilities_macros.$silent_progressP$.bind((SubLObject)SubLObjectFactory.makeBoolean(!progress_message_var.isString()), thread);
                                        if (fact_sheets.NIL.isFunctionSpec()) {
                                            directory_contents_var = Sort.sort(directory_contents_var, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED);
                                        }
                                        final SubLObject list_var = directory_contents_var;
                                        final SubLObject _prev_bind_0_$286 = utilities_macros.$progress_note$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$286 = utilities_macros.$progress_start_time$.currentBinding(thread);
                                        final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
                                        final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
                                        final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                        final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                        final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                        final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                        try {
                                            utilities_macros.$progress_note$.bind((SubLObject)((fact_sheets.NIL != progress_message_var) ? progress_message_var : fact_sheets.$str499$cdolist), thread);
                                            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                                            utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
                                            utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                            try {
                                                utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                                SubLObject csome_list_var = list_var;
                                                SubLObject filename_$281 = (SubLObject)fact_sheets.NIL;
                                                filename_$281 = csome_list_var.first();
                                                while (fact_sheets.NIL != csome_list_var) {
                                                    if (fact_sheets.NIL != Filesys.directory_p(filename_$281)) {
                                                        directory_list_var = (SubLObject)ConsesLow.cons(filename_$281, directory_list_var);
                                                    }
                                                    else if (fact_sheets.NIL == stopP) {
                                                        final SubLObject this_directory = file_utilities.deconstruct_path(filename_$281);
                                                        if (!this_directory.equal(current_directory)) {
                                                            current_directory = this_directory;
                                                            SubLObject okP = (SubLObject)fact_sheets.NIL;
                                                            if (fact_sheets.NIL != possible_fact_sheet_directory_p(current_directory)) {
                                                                thread.resetMultipleValues();
                                                                final SubLObject this_verbosity = fact_sheet_data_from_path(file_utilities.deconstruct_path(filename_$281));
                                                                final SubLObject this_domain_mt = thread.secondMultipleValue();
                                                                final SubLObject this_language_mt = thread.thirdMultipleValue();
                                                                thread.resetMultipleValues();
                                                                if (fact_sheets.NIL != this_verbosity && fact_sheets.NIL != this_domain_mt && fact_sheets.NIL != this_language_mt) {
                                                                    okP = (SubLObject)fact_sheets.T;
                                                                    verbosity = this_verbosity;
                                                                    domain_mt = this_domain_mt;
                                                                    language_mt = this_language_mt;
                                                                    final SubLObject stream_$287 = fact_sheet_logs.fact_sheet_log_stream();
                                                                    if ((fact_sheets.T == stream_$287 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$287.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$287))) {
                                                                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$287);
                                                                        PrintLow.format(stream_$287, (SubLObject)fact_sheets.$str556$Now_doing__S__S__S, new SubLObject[] { verbosity, domain_mt, language_mt });
                                                                        streams_high.force_output(stream_$287);
                                                                    }
                                                                }
                                                            }
                                                            current_directory_okP = okP;
                                                        }
                                                        if (fact_sheets.NIL != current_directory_okP) {
                                                            SubLObject error_message = (SubLObject)fact_sheets.NIL;
                                                            final SubLObject _prev_bind_0_$287 = fact_sheets.$fact_sheet_verbosity$.currentBinding(thread);
                                                            try {
                                                                fact_sheets.$fact_sheet_verbosity$.bind(verbosity, thread);
                                                                if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                                                                    try {
                                                                        thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                                                        final SubLObject _prev_bind_0_$288 = Errors.$error_handler$.currentBinding(thread);
                                                                        try {
                                                                            Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                                                                            try {
                                                                                update_fact_sheet_file_if_stale(filename_$281, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED);
                                                                            }
                                                                            catch (Throwable catch_var) {
                                                                                Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                                                                            }
                                                                        }
                                                                        finally {
                                                                            Errors.$error_handler$.rebind(_prev_bind_0_$288, thread);
                                                                        }
                                                                    }
                                                                    catch (Throwable ccatch_env_var) {
                                                                        error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                                                    }
                                                                    finally {
                                                                        thread.throwStack.pop();
                                                                    }
                                                                }
                                                                else {
                                                                    update_fact_sheet_file_if_stale(filename_$281, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED);
                                                                }
                                                                if (error_message.isString()) {
                                                                    final SubLObject stream_$288 = fact_sheet_logs.fact_sheet_log_stream();
                                                                    if ((fact_sheets.T == stream_$288 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$288.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$288))) {
                                                                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$288);
                                                                        PrintLow.format(stream_$288, (SubLObject)fact_sheets.$str557$Stale_Fact_Sheet_Updater_error_on, filename_$281, error_message);
                                                                        streams_high.force_output(stream_$288);
                                                                    }
                                                                    error_count = Numbers.add(error_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                    if (error_count.numG((SubLObject)fact_sheets.TEN_INTEGER)) {
                                                                        final SubLObject stream_$289 = fact_sheet_logs.fact_sheet_log_stream();
                                                                        if ((fact_sheets.T == stream_$289 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$289.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$289))) {
                                                                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$289);
                                                                            PrintLow.format(stream_$289, (SubLObject)fact_sheets.$str558$Abandoning_after__D_errors_, error_count);
                                                                            streams_high.force_output(stream_$289);
                                                                        }
                                                                        stopP = (SubLObject)fact_sheets.T;
                                                                    }
                                                                }
                                                            }
                                                            finally {
                                                                fact_sheets.$fact_sheet_verbosity$.rebind(_prev_bind_0_$287, thread);
                                                            }
                                                            if (fact_sheets.NIL != fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                                                                final SubLObject stream_$290 = fact_sheet_logs.fact_sheet_log_stream();
                                                                if ((fact_sheets.T == stream_$290 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$290.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$290))) {
                                                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$290);
                                                                    PrintLow.format(stream_$290, (SubLObject)fact_sheets.$str559$Instructed_to_stop_updates_after_);
                                                                    streams_high.force_output(stream_$290);
                                                                }
                                                                stopP = (SubLObject)fact_sheets.T;
                                                            }
                                                        }
                                                    }
                                                    utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                                                    utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                                    csome_list_var = csome_list_var.rest();
                                                    filename_$281 = csome_list_var.first();
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$289 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                                    final SubLObject _values = Values.getValuesAsVector();
                                                    utilities_macros.noting_percent_progress_postamble();
                                                    Values.restoreValuesFromVector(_values);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$289, thread);
                                                }
                                            }
                                        }
                                        finally {
                                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                                            utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                                            utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
                                            utilities_macros.$progress_start_time$.rebind(_prev_bind_1_$286, thread);
                                            utilities_macros.$progress_note$.rebind(_prev_bind_0_$286, thread);
                                        }
                                    }
                                    finally {
                                        utilities_macros.$silent_progressP$.rebind(_prev_bind_0_$285, thread);
                                    }
                                    current_directory_var = directory_list_var.first();
                                }
                                final SubLObject stream_$291 = fact_sheet_logs.fact_sheet_log_stream();
                                if ((fact_sheets.T == stream_$291 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$291.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$291))) {
                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$291);
                                    PrintLow.format(stream_$291, (SubLObject)fact_sheets.$str560$Finished_stale_fact_sheet_update_);
                                    streams_high.force_output(stream_$291);
                                }
                                if (fact_sheets.NIL != stopP) {
                                    continue;
                                }
                                if (fact_sheets.NIL == time_of_day_has_arrivedP((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.TWENTY_INTEGER)) {
                                    final SubLObject stream_$292 = fact_sheet_logs.fact_sheet_log_stream();
                                    if ((fact_sheets.T == stream_$292 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$292.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$292))) {
                                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$292);
                                        PrintLow.format(stream_$292, (SubLObject)fact_sheets.$str561$Sleeping_until_8_00_tonight__Zzz_);
                                        streams_high.force_output(stream_$292);
                                    }
                                    sleep_until_time_within_next_day((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.TWENTY_INTEGER);
                                }
                                final SubLObject stream_$293 = fact_sheet_logs.fact_sheet_log_stream();
                                if ((fact_sheets.T != stream_$293 || !Threads.current_process().eql(subl_promotions.initial_process())) && (!stream_$293.isStream() || fact_sheets.NIL == streams_high.output_stream_p(stream_$293))) {
                                    continue;
                                }
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$293);
                                PrintLow.format(stream_$293, (SubLObject)fact_sheets.$str562$Checking_for_fact_sheets_that_hav);
                                streams_high.force_output(stream_$293);
                            }
                        }
                        finally {
                            fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_1_$285, thread);
                            fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$284, thread);
                        }
                        if (fact_sheets.NIL != use_new_setupP) {
                            final SubLObject stream_$294 = fact_sheet_logs.fact_sheet_log_stream();
                            if ((fact_sheets.T == stream_$294 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$294.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$294))) {
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$294);
                                PrintLow.format(stream_$294, (SubLObject)fact_sheets.$str548$Closing_log_);
                                streams_high.force_output(stream_$294);
                            }
                            fact_sheet_logs.note_fact_sheet_log_file_closed((SubLObject)fact_sheets.UNPROVIDED);
                        }
                    }
                    finally {
                        fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$283, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$290 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$290, thread);
                    }
                }
            }
            finally {
                fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0_$281, thread);
            }
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_2, thread);
            fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)fact_sheets.$kw563$DONE;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 175480L)
    public static SubLObject possible_regular_fact_sheet_directory_p(final SubLObject path) {
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != possible_fact_sheet_directory_p(path) && !fact_sheets.$kw67$PUBLIC.eql(fact_sheet_verbosity_from_path(path)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 175664L)
    public static SubLObject possible_fact_sheet_directory_p(final SubLObject path) {
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != list_utilities.list_of_type_p((SubLObject)fact_sheets.$sym96$STRINGP, path) && fact_sheets.NIL != possible_fact_sheet_term_id_p(ConsesLow.nth(Numbers.subtract(Sequences.length(path), (SubLObject)fact_sheets.TWO_INTEGER), path)) && fact_sheets.NIL != possible_fact_sheet_term_id_p(ConsesLow.nth(Numbers.subtract(Sequences.length(path), (SubLObject)fact_sheets.THREE_INTEGER), path)) && fact_sheets.NIL != fact_sheet_verbosity_p(fact_sheet_verbosity_from_path(path)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 175974L)
    public static SubLObject fact_sheet_verbosity_from_path(final SubLObject path) {
        return Packages.find_symbol(Strings.string_upcase(ConsesLow.nth(Numbers.subtract(Sequences.length(path), (SubLObject)fact_sheets.FOUR_INTEGER), path), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), Packages.find_package((SubLObject)fact_sheets.$str564$KEYWORD));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 176130L)
    public static SubLObject update_fact_sheet_file_if_stale(final SubLObject filename, SubLObject verbose_loggingP, SubLObject stale_by_fiatP) {
        if (verbose_loggingP == fact_sheets.UNPROVIDED) {
            verbose_loggingP = (SubLObject)fact_sheets.T;
        }
        if (stale_by_fiatP == fact_sheets.UNPROVIDED) {
            stale_by_fiatP = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)fact_sheets.$kw565$NOT_UPDATED;
        if (fact_sheets.NIL != stale_by_fiatP || (fact_sheets.NIL != file_utilities.file_existsP(filename) && fact_sheets.NIL == string_utilities.substringP((SubLObject)fact_sheets.$str566$under_construction, filename, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) && (fact_sheets.NIL != string_utilities.ends_with(filename, (SubLObject)fact_sheets.$str513$_html, (SubLObject)fact_sheets.UNPROVIDED) || fact_sheets.NIL != string_utilities.ends_with(filename, (SubLObject)fact_sheets.$str567$_cfasl, (SubLObject)fact_sheets.UNPROVIDED)))) {
            thread.resetMultipleValues();
            final SubLObject v_term = fact_sheet_data_from_filename(filename);
            final SubLObject verbosity = thread.secondMultipleValue();
            final SubLObject domain_mt = thread.thirdMultipleValue();
            final SubLObject language_mt = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_focal_term$.currentBinding(thread);
            final SubLObject _prev_bind_2 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
            try {
                fact_sheets.$fact_sheet_focal_term$.bind(v_term, thread);
                thcl.$thcl_forts_by_fiat$.bind((SubLObject)((fact_sheets.NIL != forts.fort_p(v_term)) ? ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)) : thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
                if (fact_sheets.NIL == v_term) {
                    if (fact_sheets.NIL != verbose_loggingP) {
                        final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                            PrintLow.format(stream, (SubLObject)fact_sheets.$str568$Couldn_t_determine_focal_term_fro, filename);
                            streams_high.force_output(stream);
                        }
                    }
                }
                else if (fact_sheets.NIL == cycl_grammar.cycl_denotational_term_p(v_term)) {
                    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                    if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                        PrintLow.format(stream, (SubLObject)fact_sheets.$str569$Can_t_update_fact_sheet_for__S___, v_term);
                        streams_high.force_output(stream);
                    }
                }
                else if (!verbosity.isKeyword()) {
                    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                    if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                        PrintLow.format(stream, (SubLObject)fact_sheets.$str570$Can_t_update_fact_sheet_for__S___, v_term, filename);
                        streams_high.force_output(stream);
                    }
                }
                else if (fact_sheets.NIL == hlmt.hlmtP(domain_mt)) {
                    if (fact_sheets.NIL != verbose_loggingP) {
                        final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                            PrintLow.format(stream, (SubLObject)fact_sheets.$str571$Can_t_update_fact_sheet_for__S___, domain_mt);
                            streams_high.force_output(stream);
                        }
                    }
                }
                else if (fact_sheets.NIL == hlmt.hlmtP(language_mt)) {
                    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                    if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                        PrintLow.format(stream, (SubLObject)fact_sheets.$str572$Can_t_update_fact_sheet_for__S___, v_term, language_mt);
                        streams_high.force_output(stream);
                    }
                }
                else if (fact_sheets.NIL != stale_by_fiatP || fact_sheets.NIL != fact_sheet_file_staleP(filename, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
                    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                    if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                        PrintLow.format(stream, (SubLObject)fact_sheets.$str573$Updating_stale_fact_sheet_for__S_, new SubLObject[] { v_term, verbosity, domain_mt, language_mt });
                        streams_high.force_output(stream);
                    }
                    update_fact_sheet_for_term(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                    fact_sheet_logs.add_fact_sheet_info_to_hourly_stats(v_term);
                    fact_sheet_logs.maybe_log_fact_sheet_hourly_report();
                    result = (SubLObject)fact_sheets.$kw574$UPDATED;
                }
            }
            finally {
                thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_2, thread);
                fact_sheets.$fact_sheet_focal_term$.rebind(_prev_bind_0, thread);
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 177836L)
    public static SubLObject do_forts_for_fact_sheet_update(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list575);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject fort = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list575);
        fort = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym576$WITH_ALL_MTS, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$sym577$DO_ALL_FORT_INSTANCES, reader.bq_cons(fort, (SubLObject)fact_sheets.$list578), (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym45$PWHEN, (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$sym251$TERM_OK_FOR_FACT_SHEET_P, fort, (SubLObject)fact_sheets.$list579), ConsesLow.append(body, (SubLObject)fact_sheets.NIL))));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list575);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 178225L)
    public static SubLObject write_term_ids_to_update(final SubLObject parent_directory, SubLObject batch_size) {
        if (batch_size == fact_sheets.UNPROVIDED) {
            batch_size = (SubLObject)fact_sheets.$int580$50;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject directory = Sequences.cconcatenate(parent_directory, (SubLObject)fact_sheets.$str581$term_ids_to_update_);
        SubLObject done_count = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject file_number = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject ids = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == Filesys.directory_p(directory)) {
            file_utilities.make_directory_recursive(directory, (SubLObject)fact_sheets.NIL, (SubLObject)((fact_sheets.NIL != chmod_safe_to_useP()) ? fact_sheets.$str509$775 : fact_sheets.NIL));
        }
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)fact_sheets.$sym582$RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind(fact_sheets.$const583$EverythingPSC, thread);
            final SubLObject node_var = fact_sheets.$const584$TerroristAttack;
            final SubLObject _prev_bind_0_$303 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
            final SubLObject _prev_bind_1_$304 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
            try {
                sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa), thread);
                sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                try {
                    SubLObject node_var_$305 = node_var;
                    final SubLObject deck_type = (SubLObject)fact_sheets.$kw420$STACK;
                    final SubLObject recur_deck = deck.create_deck(deck_type);
                    final SubLObject _prev_bind_0_$304 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        try {
                            final SubLObject tv_var = (SubLObject)fact_sheets.NIL;
                            final SubLObject _prev_bind_0_$305 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$305 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_tv$.bind((fact_sheets.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((fact_sheets.NIL != tv_var) ? fact_sheets.$sym422$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                                if (fact_sheets.NIL != tv_var && fact_sheets.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && fact_sheets.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                    final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                    if (pcase_var.eql((SubLObject)fact_sheets.$kw423$ERROR)) {
                                        sbhl_paranoia.sbhl_error((SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                    }
                                    else if (pcase_var.eql((SubLObject)fact_sheets.$kw426$CERROR)) {
                                        sbhl_paranoia.sbhl_cerror((SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.$str427$continue_anyway, (SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                    }
                                    else if (pcase_var.eql((SubLObject)fact_sheets.$kw428$WARN)) {
                                        Errors.warn((SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P);
                                    }
                                    else {
                                        Errors.warn((SubLObject)fact_sheets.$str429$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                        Errors.cerror((SubLObject)fact_sheets.$str427$continue_anyway, (SubLObject)fact_sheets.$str424$_A_is_not_a__A, tv_var, (SubLObject)fact_sheets.$sym425$SBHL_TRUE_TV_P);
                                    }
                                }
                                final SubLObject _prev_bind_0_$306 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$306 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)), thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa))), thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa))), thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)fact_sheets.NIL, thread);
                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)), thread);
                                    if (fact_sheets.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || fact_sheets.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED))) {
                                        final SubLObject _prev_bind_0_$307 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$307 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$313 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa))), thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)fact_sheets.NIL, thread);
                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$305, (SubLObject)fact_sheets.UNPROVIDED);
                                            while (fact_sheets.NIL != node_var_$305) {
                                                final SubLObject tt_node_var = node_var_$305;
                                                SubLObject cdolist_list_var;
                                                final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa));
                                                SubLObject module_var = (SubLObject)fact_sheets.NIL;
                                                module_var = cdolist_list_var.first();
                                                while (fact_sheets.NIL != cdolist_list_var) {
                                                    final SubLObject _prev_bind_0_$308 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$308 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((fact_sheets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(fact_sheets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                        final SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                        if (fact_sheets.NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                            final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED));
                                                            if (fact_sheets.NIL != d_link) {
                                                                final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED));
                                                                if (fact_sheets.NIL != mt_links) {
                                                                    SubLObject iteration_state;
                                                                    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                        final SubLObject tv_links = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (fact_sheets.NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                            final SubLObject _prev_bind_0_$309 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                                SubLObject iteration_state_$317;
                                                                                for (iteration_state_$317 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$317); iteration_state_$317 = dictionary_contents.do_dictionary_contents_next(iteration_state_$317)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$317);
                                                                                    final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (fact_sheets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                        final SubLObject _prev_bind_0_$310 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                            final SubLObject sol = link_nodes;
                                                                                            if (fact_sheets.NIL != set.set_p(sol)) {
                                                                                                final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                SubLObject basis_object;
                                                                                                SubLObject state;
                                                                                                SubLObject fort;
                                                                                                SubLObject filename;
                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)fact_sheets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                    fort = set_contents.do_set_contents_next(basis_object, state);
                                                                                                    if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state, fort) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(fort, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(fort, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        if (fact_sheets.NIL != forts.fort_p(fort) && fact_sheets.NIL != term_ok_for_fact_sheet_p(fort, (SubLObject)fact_sheets.NIL)) {
                                                                                                            ids = (SubLObject)ConsesLow.cons(fact_sheet_term_id(fort, (SubLObject)fact_sheets.T), ids);
                                                                                                            done_count = Numbers.add(done_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                                            if (Numbers.mod(done_count, batch_size).isZero()) {
                                                                                                                filename = fact_sheet_term_id_filename(directory, file_number);
                                                                                                                cfasl_utilities.cfasl_save(ids, filename);
                                                                                                                ids = (SubLObject)fact_sheets.NIL;
                                                                                                                file_number = Numbers.add(file_number, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else if (sol.isList()) {
                                                                                                SubLObject csome_list_var = sol;
                                                                                                SubLObject fort2 = (SubLObject)fact_sheets.NIL;
                                                                                                fort2 = csome_list_var.first();
                                                                                                while (fact_sheets.NIL != csome_list_var) {
                                                                                                    if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(fort2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(fort2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                        if (fact_sheets.NIL != forts.fort_p(fort2) && fact_sheets.NIL != term_ok_for_fact_sheet_p(fort2, (SubLObject)fact_sheets.NIL)) {
                                                                                                            ids = (SubLObject)ConsesLow.cons(fact_sheet_term_id(fort2, (SubLObject)fact_sheets.T), ids);
                                                                                                            done_count = Numbers.add(done_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                                            if (Numbers.mod(done_count, batch_size).isZero()) {
                                                                                                                final SubLObject filename2 = fact_sheet_term_id_filename(directory, file_number);
                                                                                                                cfasl_utilities.cfasl_save(ids, filename2);
                                                                                                                ids = (SubLObject)fact_sheets.NIL;
                                                                                                                file_number = Numbers.add(file_number, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    csome_list_var = csome_list_var.rest();
                                                                                                    fort2 = csome_list_var.first();
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                            }
                                                                                        }
                                                                                        finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$310, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$317);
                                                                            }
                                                                            finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$309, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                }
                                                            }
                                                            else {
                                                                sbhl_paranoia.sbhl_error((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)fact_sheets.$str434$attempting_to_bind_direction_link, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                                            }
                                                            if (fact_sheets.NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED))) {
                                                                SubLObject csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                SubLObject instance_tuple = (SubLObject)fact_sheets.NIL;
                                                                instance_tuple = csome_list_var2.first();
                                                                while (fact_sheets.NIL != csome_list_var2) {
                                                                    SubLObject current;
                                                                    final SubLObject datum = current = instance_tuple;
                                                                    SubLObject link_node = (SubLObject)fact_sheets.NIL;
                                                                    SubLObject mt2 = (SubLObject)fact_sheets.NIL;
                                                                    SubLObject tv2 = (SubLObject)fact_sheets.NIL;
                                                                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list547);
                                                                    link_node = current.first();
                                                                    current = current.rest();
                                                                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list547);
                                                                    mt2 = current.first();
                                                                    current = current.rest();
                                                                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list547);
                                                                    tv2 = current.first();
                                                                    current = current.rest();
                                                                    if (fact_sheets.NIL == current) {
                                                                        if (fact_sheets.NIL != mt_relevance_macros.relevant_mtP(mt2)) {
                                                                            final SubLObject _prev_bind_0_$311 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt2, thread);
                                                                                if (fact_sheets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                    final SubLObject _prev_bind_0_$312 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                        final SubLObject sol;
                                                                                        final SubLObject link_nodes2 = sol = (SubLObject)ConsesLow.list(link_node);
                                                                                        if (fact_sheets.NIL != set.set_p(sol)) {
                                                                                            final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                            SubLObject basis_object;
                                                                                            SubLObject state;
                                                                                            SubLObject fort;
                                                                                            SubLObject filename;
                                                                                            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)fact_sheets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                fort = set_contents.do_set_contents_next(basis_object, state);
                                                                                                if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state, fort) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(fort, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(fort, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                    if (fact_sheets.NIL != forts.fort_p(fort) && fact_sheets.NIL != term_ok_for_fact_sheet_p(fort, (SubLObject)fact_sheets.NIL)) {
                                                                                                        ids = (SubLObject)ConsesLow.cons(fact_sheet_term_id(fort, (SubLObject)fact_sheets.T), ids);
                                                                                                        done_count = Numbers.add(done_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                                        if (Numbers.mod(done_count, batch_size).isZero()) {
                                                                                                            filename = fact_sheet_term_id_filename(directory, file_number);
                                                                                                            cfasl_utilities.cfasl_save(ids, filename);
                                                                                                            ids = (SubLObject)fact_sheets.NIL;
                                                                                                            file_number = Numbers.add(file_number, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        else if (sol.isList()) {
                                                                                            SubLObject csome_list_var_$321 = sol;
                                                                                            SubLObject fort2 = (SubLObject)fact_sheets.NIL;
                                                                                            fort2 = csome_list_var_$321.first();
                                                                                            while (fact_sheets.NIL != csome_list_var_$321) {
                                                                                                if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(fort2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(fort2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                    if (fact_sheets.NIL != forts.fort_p(fort2) && fact_sheets.NIL != term_ok_for_fact_sheet_p(fort2, (SubLObject)fact_sheets.NIL)) {
                                                                                                        ids = (SubLObject)ConsesLow.cons(fact_sheet_term_id(fort2, (SubLObject)fact_sheets.T), ids);
                                                                                                        done_count = Numbers.add(done_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                                        if (Numbers.mod(done_count, batch_size).isZero()) {
                                                                                                            final SubLObject filename2 = fact_sheet_term_id_filename(directory, file_number);
                                                                                                            cfasl_utilities.cfasl_save(ids, filename2);
                                                                                                            ids = (SubLObject)fact_sheets.NIL;
                                                                                                            file_number = Numbers.add(file_number, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                csome_list_var_$321 = csome_list_var_$321.rest();
                                                                                                fort2 = csome_list_var_$321.first();
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                        }
                                                                                    }
                                                                                    finally {
                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$312, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                            finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$311, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    else {
                                                                        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list547);
                                                                    }
                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                    instance_tuple = csome_list_var2.first();
                                                                }
                                                            }
                                                        }
                                                        else if (fact_sheets.NIL != obsolete.cnat_p(node, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                            SubLObject cdolist_list_var_$322;
                                                            final SubLObject new_list = cdolist_list_var_$322 = ((fact_sheets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED)));
                                                            SubLObject generating_fn = (SubLObject)fact_sheets.NIL;
                                                            generating_fn = cdolist_list_var_$322.first();
                                                            while (fact_sheets.NIL != cdolist_list_var_$322) {
                                                                final SubLObject _prev_bind_0_$313 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                try {
                                                                    sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                    final SubLObject sol2;
                                                                    final SubLObject link_nodes3 = sol2 = Functions.funcall(generating_fn, node);
                                                                    if (fact_sheets.NIL != set.set_p(sol2)) {
                                                                        final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                        SubLObject basis_object2;
                                                                        SubLObject state2;
                                                                        SubLObject fort3;
                                                                        SubLObject filename3;
                                                                        for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)fact_sheets.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                            fort3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                            if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state2, fort3) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(fort3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(fort3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                if (fact_sheets.NIL != forts.fort_p(fort3) && fact_sheets.NIL != term_ok_for_fact_sheet_p(fort3, (SubLObject)fact_sheets.NIL)) {
                                                                                    ids = (SubLObject)ConsesLow.cons(fact_sheet_term_id(fort3, (SubLObject)fact_sheets.T), ids);
                                                                                    done_count = Numbers.add(done_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                    if (Numbers.mod(done_count, batch_size).isZero()) {
                                                                                        filename3 = fact_sheet_term_id_filename(directory, file_number);
                                                                                        cfasl_utilities.cfasl_save(ids, filename3);
                                                                                        ids = (SubLObject)fact_sheets.NIL;
                                                                                        file_number = Numbers.add(file_number, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else if (sol2.isList()) {
                                                                        SubLObject csome_list_var3 = sol2;
                                                                        SubLObject fort4 = (SubLObject)fact_sheets.NIL;
                                                                        fort4 = csome_list_var3.first();
                                                                        while (fact_sheets.NIL != csome_list_var3) {
                                                                            if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(fort4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(fort4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                if (fact_sheets.NIL != forts.fort_p(fort4) && fact_sheets.NIL != term_ok_for_fact_sheet_p(fort4, (SubLObject)fact_sheets.NIL)) {
                                                                                    ids = (SubLObject)ConsesLow.cons(fact_sheet_term_id(fort4, (SubLObject)fact_sheets.T), ids);
                                                                                    done_count = Numbers.add(done_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                    if (Numbers.mod(done_count, batch_size).isZero()) {
                                                                                        final SubLObject filename4 = fact_sheet_term_id_filename(directory, file_number);
                                                                                        cfasl_utilities.cfasl_save(ids, filename4);
                                                                                        ids = (SubLObject)fact_sheets.NIL;
                                                                                        file_number = Numbers.add(file_number, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                    }
                                                                                }
                                                                            }
                                                                            csome_list_var3 = csome_list_var3.rest();
                                                                            fort4 = csome_list_var3.first();
                                                                        }
                                                                    }
                                                                    else {
                                                                        Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                    }
                                                                }
                                                                finally {
                                                                    sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$313, thread);
                                                                }
                                                                cdolist_list_var_$322 = cdolist_list_var_$322.rest();
                                                                generating_fn = cdolist_list_var_$322.first();
                                                            }
                                                        }
                                                    }
                                                    finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$308, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$308, thread);
                                                    }
                                                    cdolist_list_var = cdolist_list_var.rest();
                                                    module_var = cdolist_list_var.first();
                                                }
                                                SubLObject cdolist_list_var2;
                                                final SubLObject accessible_modules2 = cdolist_list_var2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(fact_sheets.$const407$isa)));
                                                SubLObject module_var2 = (SubLObject)fact_sheets.NIL;
                                                module_var2 = cdolist_list_var2.first();
                                                while (fact_sheets.NIL != cdolist_list_var2) {
                                                    final SubLObject _prev_bind_0_$314 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$309 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    try {
                                                        sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((fact_sheets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(fact_sheets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                        final SubLObject node2 = function_terms.naut_to_nart(node_var_$305);
                                                        if (fact_sheets.NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                            final SubLObject d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED));
                                                            if (fact_sheets.NIL != d_link2) {
                                                                final SubLObject mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED));
                                                                if (fact_sheets.NIL != mt_links2) {
                                                                    SubLObject iteration_state2;
                                                                    for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                        thread.resetMultipleValues();
                                                                        final SubLObject mt3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                        final SubLObject tv_links2 = thread.secondMultipleValue();
                                                                        thread.resetMultipleValues();
                                                                        if (fact_sheets.NIL != mt_relevance_macros.relevant_mtP(mt3)) {
                                                                            final SubLObject _prev_bind_0_$315 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_link_vars.$sbhl_link_mt$.bind(mt3, thread);
                                                                                SubLObject iteration_state_$318;
                                                                                for (iteration_state_$318 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$318); iteration_state_$318 = dictionary_contents.do_dictionary_contents_next(iteration_state_$318)) {
                                                                                    thread.resetMultipleValues();
                                                                                    final SubLObject tv2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$318);
                                                                                    final SubLObject link_nodes4 = thread.secondMultipleValue();
                                                                                    thread.resetMultipleValues();
                                                                                    if (fact_sheets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                        final SubLObject _prev_bind_0_$316 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                            final SubLObject sol3 = link_nodes4;
                                                                                            if (fact_sheets.NIL != set.set_p(sol3)) {
                                                                                                final SubLObject set_contents_var3 = set.do_set_internal(sol3);
                                                                                                SubLObject basis_object3;
                                                                                                SubLObject state3;
                                                                                                SubLObject node_vars_link_node;
                                                                                                for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = (SubLObject)fact_sheets.NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                    node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                    if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                                        deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else if (sol3.isList()) {
                                                                                                SubLObject csome_list_var4 = sol3;
                                                                                                SubLObject node_vars_link_node2 = (SubLObject)fact_sheets.NIL;
                                                                                                node_vars_link_node2 = csome_list_var4.first();
                                                                                                while (fact_sheets.NIL != csome_list_var4) {
                                                                                                    if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                                        deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                    }
                                                                                                    csome_list_var4 = csome_list_var4.rest();
                                                                                                    node_vars_link_node2 = csome_list_var4.first();
                                                                                                }
                                                                                            }
                                                                                            else {
                                                                                                Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                            }
                                                                                        }
                                                                                        finally {
                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$316, thread);
                                                                                        }
                                                                                    }
                                                                                }
                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state_$318);
                                                                            }
                                                                            finally {
                                                                                sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$315, thread);
                                                                            }
                                                                        }
                                                                    }
                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                }
                                                            }
                                                            else {
                                                                sbhl_paranoia.sbhl_error((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)fact_sheets.$str434$attempting_to_bind_direction_link, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                                            }
                                                        }
                                                        else if (fact_sheets.NIL != obsolete.cnat_p(node2, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                            SubLObject cdolist_list_var_$323;
                                                            final SubLObject new_list2 = cdolist_list_var_$323 = ((fact_sheets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED)));
                                                            SubLObject generating_fn2 = (SubLObject)fact_sheets.NIL;
                                                            generating_fn2 = cdolist_list_var_$323.first();
                                                            while (fact_sheets.NIL != cdolist_list_var_$323) {
                                                                final SubLObject _prev_bind_0_$317 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                try {
                                                                    sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                    final SubLObject sol4;
                                                                    final SubLObject link_nodes5 = sol4 = Functions.funcall(generating_fn2, node2);
                                                                    if (fact_sheets.NIL != set.set_p(sol4)) {
                                                                        final SubLObject set_contents_var4 = set.do_set_internal(sol4);
                                                                        SubLObject basis_object4;
                                                                        SubLObject state4;
                                                                        SubLObject node_vars_link_node3;
                                                                        for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = (SubLObject)fact_sheets.NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                            node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                            if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3) && fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                deck.deck_push(node_vars_link_node3, recur_deck);
                                                                            }
                                                                        }
                                                                    }
                                                                    else if (sol4.isList()) {
                                                                        SubLObject csome_list_var5 = sol4;
                                                                        SubLObject node_vars_link_node4 = (SubLObject)fact_sheets.NIL;
                                                                        node_vars_link_node4 = csome_list_var5.first();
                                                                        while (fact_sheets.NIL != csome_list_var5) {
                                                                            if (fact_sheets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, (SubLObject)fact_sheets.UNPROVIDED);
                                                                                deck.deck_push(node_vars_link_node4, recur_deck);
                                                                            }
                                                                            csome_list_var5 = csome_list_var5.rest();
                                                                            node_vars_link_node4 = csome_list_var5.first();
                                                                        }
                                                                    }
                                                                    else {
                                                                        Errors.error((SubLObject)fact_sheets.$str433$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                    }
                                                                }
                                                                finally {
                                                                    sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$317, thread);
                                                                }
                                                                cdolist_list_var_$323 = cdolist_list_var_$323.rest();
                                                                generating_fn2 = cdolist_list_var_$323.first();
                                                            }
                                                        }
                                                    }
                                                    finally {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$309, thread);
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$314, thread);
                                                    }
                                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                                    module_var2 = cdolist_list_var2.first();
                                                }
                                                node_var_$305 = deck.deck_pop(recur_deck);
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$313, thread);
                                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$307, thread);
                                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$307, thread);
                                        }
                                    }
                                    else {
                                        sbhl_paranoia.sbhl_warn((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.$str435$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)fact_sheets.UNPROVIDED)), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                    }
                                }
                                finally {
                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$306, thread);
                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$306, thread);
                                }
                            }
                            finally {
                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$305, thread);
                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$305, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$318 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$318, thread);
                            }
                        }
                    }
                    finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$304, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$319 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$319, thread);
                    }
                }
            }
            finally {
                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1_$304, thread);
                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$303, thread);
            }
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        if (fact_sheets.NIL != ids) {
            final SubLObject filename5 = fact_sheet_term_id_filename(directory, file_number);
            cfasl_utilities.cfasl_save(ids, filename5);
            ids = (SubLObject)fact_sheets.NIL;
        }
        return file_number;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 179022L)
    public static SubLObject write_term_ids_to_update_for_fs_type_public_pages(final SubLObject fs_type, SubLObject batch_size, SubLObject parent_directory) {
        if (batch_size == fact_sheets.UNPROVIDED) {
            batch_size = (SubLObject)fact_sheets.$int356$500;
        }
        if (parent_directory == fact_sheets.UNPROVIDED) {
            parent_directory = Sequences.cconcatenate(string_utilities.bunge(fact_sheet_data_path(), (SubLObject)Characters.CHAR_slash), (SubLObject)fact_sheets.$str585$_term_ids_to_update_);
        }
        final SubLObject directory = Sequences.cconcatenate(parent_directory, new SubLObject[] { get_fs_collection_name(fs_type), fact_sheets.$str500$_ });
        final SubLObject term_set = terms_for_public_fact_sheets(fs_type);
        return write_term_ids_to_update_for_term_set(term_set, batch_size, directory);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 179541L)
    public static SubLObject write_term_ids_to_update_for_fs_type_public_pages_term_set(final SubLObject fs_type, final SubLObject term_set, SubLObject batch_size, SubLObject parent_directory) {
        if (batch_size == fact_sheets.UNPROVIDED) {
            batch_size = (SubLObject)fact_sheets.$int356$500;
        }
        if (parent_directory == fact_sheets.UNPROVIDED) {
            parent_directory = Sequences.cconcatenate(string_utilities.bunge(fact_sheet_data_path(), (SubLObject)Characters.CHAR_slash), (SubLObject)fact_sheets.$str585$_term_ids_to_update_);
        }
        final SubLObject directory = Sequences.cconcatenate(parent_directory, new SubLObject[] { get_fs_collection_name(fs_type), fact_sheets.$str500$_ });
        return write_term_ids_to_update_for_term_set(term_set, batch_size, directory);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 180026L)
    public static SubLObject write_term_ids_to_update_for_term_set(final SubLObject term_set, SubLObject batch_size, SubLObject directory) {
        if (batch_size == fact_sheets.UNPROVIDED) {
            batch_size = (SubLObject)fact_sheets.$int580$50;
        }
        if (directory == fact_sheets.UNPROVIDED) {
            directory = Sequences.cconcatenate(string_utilities.bunge(fact_sheet_data_path(), (SubLObject)Characters.CHAR_slash), (SubLObject)fact_sheets.$str585$_term_ids_to_update_);
        }
        SubLObject done_count = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject file_number = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject ids = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == Filesys.directory_p(directory)) {
            file_utilities.make_directory_recursive(directory, (SubLObject)fact_sheets.NIL, (SubLObject)((fact_sheets.NIL != chmod_safe_to_useP()) ? fact_sheets.$str509$775 : fact_sheets.NIL));
        }
        final SubLObject set_contents_var = set.do_set_internal(term_set);
        SubLObject basis_object;
        SubLObject state;
        SubLObject fort;
        SubLObject filename;
        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)fact_sheets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
            fort = set_contents.do_set_contents_next(basis_object, state);
            if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state, fort)) {
                ids = (SubLObject)ConsesLow.cons(fact_sheet_term_id(fort, (SubLObject)fact_sheets.T), ids);
                done_count = Numbers.add(done_count, (SubLObject)fact_sheets.ONE_INTEGER);
                if (Numbers.mod(done_count, batch_size).isZero()) {
                    filename = fact_sheet_term_id_filename(directory, file_number);
                    cfasl_utilities.cfasl_save(ids, filename);
                    ids = (SubLObject)fact_sheets.NIL;
                    file_number = Numbers.add(file_number, (SubLObject)fact_sheets.ONE_INTEGER);
                }
            }
        }
        if (fact_sheets.NIL != ids) {
            final SubLObject filename2 = fact_sheet_term_id_filename(directory, file_number);
            cfasl_utilities.cfasl_save(ids, filename2);
            ids = (SubLObject)fact_sheets.NIL;
        }
        return Values.values(file_number, directory);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 180849L)
    public static SubLObject convert_term_suids_to_fact_sheet_term_ids(final SubLObject term_suids, final SubLObject term_type) {
        SubLObject term_ids = (SubLObject)fact_sheets.NIL;
        SubLObject method = (SubLObject)fact_sheets.NIL;
        if (term_type.eql((SubLObject)fact_sheets.$kw586$CONSTANT)) {
            method = (SubLObject)fact_sheets.$sym587$FIND_CONSTANT_BY_INTERNAL_ID;
        }
        else if (term_type.eql((SubLObject)fact_sheets.$kw588$NART)) {
            method = (SubLObject)fact_sheets.$sym589$FIND_NART_BY_ID;
        }
        else {
            Errors.error((SubLObject)fact_sheets.$str590$Invalid_term_type_specification__, term_type);
        }
        final SubLObject raw_terms = Mapping.mapcar(method, term_suids);
        final SubLObject clean_terms = list_utilities.remove_if_not((SubLObject)fact_sheets.$sym252$FORT_P, raw_terms, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        term_ids = Mapping.mapcar((SubLObject)fact_sheets.$sym136$FACT_SHEET_TERM_ID, clean_terms);
        return term_ids;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 181652L)
    public static SubLObject convert_term_suid_range_to_fact_sheet_term_ids(final SubLObject first_term_suid, final SubLObject num_of_terms, final SubLObject term_type) {
        return convert_term_suids_to_fact_sheet_term_ids(list_utilities.new_num_list(num_of_terms, first_term_suid), term_type);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 182042L)
    public static SubLObject update_fact_sheets_with_suids(final SubLObject term_suids, final SubLObject term_type, SubLObject write_date_threshold, SubLObject id_set_identifier) {
        if (write_date_threshold == fact_sheets.UNPROVIDED) {
            write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        if (id_set_identifier == fact_sheets.UNPROVIDED) {
            id_set_identifier = (SubLObject)fact_sheets.$str591$a_specific_ID_set;
        }
        final SubLObject term_ids = convert_term_suids_to_fact_sheet_term_ids(term_suids, term_type);
        return update_fact_sheets_with_ids(term_ids, write_date_threshold, id_set_identifier);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 182857L)
    public static SubLObject update_fact_sheets_with_ids(final SubLObject term_ids, SubLObject write_date_threshold, SubLObject id_set_identifier) {
        if (write_date_threshold == fact_sheets.UNPROVIDED) {
            write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        if (id_set_identifier == fact_sheets.UNPROVIDED) {
            id_set_identifier = (SubLObject)fact_sheets.$str591$a_specific_ID_set;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject message = Sequences.cconcatenate((SubLObject)fact_sheets.$str592$Updating_fact_sheets_from_, format_nil.format_nil_a_no_copy(id_set_identifier));
        final SubLObject _prev_bind_0 = utilities_macros.$progress_note$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
        try {
            utilities_macros.$progress_note$.bind((SubLObject)((fact_sheets.NIL != message) ? message : fact_sheets.$str499$cdolist), thread);
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_total$.bind(Sequences.length(term_ids), thread);
            utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
            try {
                utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                SubLObject csome_list_var = term_ids;
                SubLObject term_id = (SubLObject)fact_sheets.NIL;
                term_id = csome_list_var.first();
                while (fact_sheets.NIL != csome_list_var) {
                    final SubLObject fact_sheet_file = Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ONE_INTEGER), directory_and_filename_for_fact_sheet_from_id(term_id, (SubLObject)fact_sheets.$kw35$NORMAL, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
                    final SubLObject v_term = fact_sheet_term_id(term_id, (SubLObject)fact_sheets.UNPROVIDED);
                    if (fact_sheets.NIL != file_utilities.file_existsP(fact_sheet_file)) {
                        final SubLObject file_write_date = Filesys.file_write_date(fact_sheet_file);
                        if (file_write_date.numG(write_date_threshold)) {
                            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                                PrintLow.format(stream, (SubLObject)fact_sheets.$str593$Skipping__S__which_was_updated_on, v_term, numeric_date_utilities.get_universal_date(file_write_date, (SubLObject)fact_sheets.UNPROVIDED));
                                streams_high.force_output(stream);
                            }
                        }
                        else {
                            update_fact_sheet_file_if_stale(fact_sheet_file, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.T);
                            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                                PrintLow.format(stream, (SubLObject)fact_sheets.$str594$Writing_fact_sheet_data_for__S_to, v_term, fact_sheet_file);
                                streams_high.force_output(stream);
                            }
                        }
                    }
                    else {
                        SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream2 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream2))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream2);
                            PrintLow.format(stream2, (SubLObject)fact_sheets.$str595$Couldn_t_find_fact_sheet_file_for, fact_sheet_term_from_id(term_id, (SubLObject)fact_sheets.UNPROVIDED));
                            streams_high.force_output(stream2);
                        }
                        update_fact_sheet_file_if_stale(fact_sheet_file, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.T);
                        stream2 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream2 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream2))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream2);
                            PrintLow.format(stream2, (SubLObject)fact_sheets.$str594$Writing_fact_sheet_data_for__S_to, v_term, fact_sheet_file);
                            streams_high.force_output(stream2);
                        }
                    }
                    utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                    utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                    csome_list_var = csome_list_var.rest();
                    term_id = csome_list_var.first();
                }
            }
            finally {
                final SubLObject _prev_bind_0_$333 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    utilities_macros.noting_percent_progress_postamble();
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$333, thread);
                }
            }
        }
        finally {
            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_note$.rebind(_prev_bind_0, thread);
        }
        return term_ids;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 184581L)
    public static SubLObject fact_sheet_term_id_filename(final SubLObject directory, final SubLObject file_number) {
        return Sequences.cconcatenate(directory, new SubLObject[] { fact_sheets.$str596$term_ids_, PrintLow.format((SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$str597$_3__0D, file_number), fact_sheets.$str567$_cfasl });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 184740L)
    public static SubLObject update_fact_sheets_from_id_file(final SubLObject file_number, SubLObject write_date_threshold, SubLObject parent_directory) {
        if (write_date_threshold == fact_sheets.UNPROVIDED) {
            write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        if (parent_directory == fact_sheets.UNPROVIDED) {
            parent_directory = Sequences.cconcatenate(string_utilities.bunge(fact_sheet_data_path(), (SubLObject)Characters.CHAR_slash), (SubLObject)fact_sheets.$str500$_);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject already_loggingP = Types.stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
        SubLObject directory = (SubLObject)fact_sheets.NIL;
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject use_new_setupP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == already_loggingP) {
            thread.resetMultipleValues();
            final SubLObject directory_$334 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
            final SubLObject filename_$335 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            directory = directory_$334;
            filename = filename_$335;
            use_new_setupP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != Filesys.directory_p(directory) && filename.isString());
        }
        if (fact_sheets.NIL != use_new_setupP) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_file$.bind((fact_sheets.NIL != use_new_setupP) ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_0_$336 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$336, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
                }
                final SubLObject _prev_bind_0_$337 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
                try {
                    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
                    final SubLObject _prev_bind_0_$338 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
                    try {
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind((SubLObject)fact_sheets.NIL, thread);
                        fact_sheet_logs.$hourly_fact_sheet_stats$.bind(Vectors.make_vector((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER), thread);
                        fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject stream_$339 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$339 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$339.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$339))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$339);
                            PrintLow.format(stream_$339, (SubLObject)fact_sheets.$str598$Updating_fact_sheets_file___D_of_, file_number, parent_directory);
                            streams_high.force_output(stream_$339);
                        }
                        final SubLObject directory_$335 = Sequences.cconcatenate(parent_directory, (SubLObject)fact_sheets.$str581$term_ids_to_update_);
                        final SubLObject filename_$336 = fact_sheet_term_id_filename(directory_$335, file_number);
                        if (fact_sheets.NIL != file_utilities.file_existsP(filename_$336)) {
                            final SubLObject term_ids = cfasl_utilities.cfasl_load(filename_$336);
                            update_fact_sheets_with_ids(term_ids, write_date_threshold, filename_$336);
                        }
                        else {
                            final SubLObject stream_$340 = fact_sheet_logs.fact_sheet_log_stream();
                            if ((fact_sheets.T == stream_$340 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$340.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$340))) {
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$340);
                                PrintLow.format(stream_$340, (SubLObject)fact_sheets.$str599$Couldn_t_find_id_file__S, filename_$336);
                                streams_high.force_output(stream_$340);
                            }
                        }
                    }
                    finally {
                        fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$338, thread);
                    }
                    if (fact_sheets.NIL != use_new_setupP) {
                        final SubLObject stream_$341 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$341 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$341.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$341))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$341);
                            PrintLow.format(stream_$341, (SubLObject)fact_sheets.$str548$Closing_log_);
                            streams_high.force_output(stream_$341);
                        }
                        fact_sheet_logs.note_fact_sheet_log_file_closed((SubLObject)fact_sheets.UNPROVIDED);
                    }
                }
                finally {
                    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$337, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$339 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$339, thread);
                }
            }
        }
        finally {
            fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
        }
        return file_number;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 185575L)
    public static SubLObject remaining_fact_sheets_to_update(SubLObject verbosities, SubLObject target_statuses, SubLObject domain_mt, SubLObject language_mt) {
        if (verbosities == fact_sheets.UNPROVIDED) {
            verbosities = (SubLObject)fact_sheets.$list530;
        }
        if (target_statuses == fact_sheets.UNPROVIDED) {
            target_statuses = (SubLObject)fact_sheets.$list531;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject list_var = target_statuses;
        assert fact_sheets.NIL != list_utilities.non_dotted_list_p(list_var) : list_var;
        SubLObject cdolist_list_var = list_var;
        SubLObject elem = (SubLObject)fact_sheets.NIL;
        elem = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            assert fact_sheets.NIL != fact_sheet_status_p(elem) : elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        }
        final SubLObject missing_fact_sheets = dictionary.new_dictionary((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_stream$.bind(StreamsLow.$null_output$.getDynamicValue(thread), thread);
            final SubLObject message = (SubLObject)fact_sheets.$str602$Scanning_for_fact_sheets_requirin;
            final SubLObject total = forts.fort_count();
            SubLObject sofar = (SubLObject)fact_sheets.ZERO_INTEGER;
            final SubLObject _prev_bind_0_$345 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
            try {
                utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                try {
                    utilities_macros.noting_percent_progress_preamble(message);
                    SubLObject cdolist_list_var2 = forts.do_forts_tables();
                    SubLObject table_var = (SubLObject)fact_sheets.NIL;
                    table_var = cdolist_list_var2.first();
                    while (fact_sheets.NIL != cdolist_list_var2) {
                        final SubLObject idx = table_var;
                        if (fact_sheets.NIL == id_index.id_index_objects_empty_p(idx, (SubLObject)fact_sheets.$kw603$SKIP)) {
                            final SubLObject idx_$346 = idx;
                            if (fact_sheets.NIL == id_index.id_index_dense_objects_empty_p(idx_$346, (SubLObject)fact_sheets.$kw603$SKIP)) {
                                final SubLObject vector_var = id_index.id_index_dense_objects(idx_$346);
                                final SubLObject backwardP_var = (SubLObject)fact_sheets.NIL;
                                SubLObject length;
                                SubLObject v_iteration;
                                SubLObject id;
                                SubLObject fort;
                                SubLObject cdolist_list_var_$347;
                                SubLObject verbosity;
                                SubLObject status;
                                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)fact_sheets.NIL, v_iteration = (SubLObject)fact_sheets.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)fact_sheets.ONE_INTEGER)) {
                                    id = ((fact_sheets.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)fact_sheets.ONE_INTEGER) : v_iteration);
                                    fort = Vectors.aref(vector_var, id);
                                    if (fact_sheets.NIL == id_index.id_index_tombstone_p(fort) || fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) {
                                        if (fact_sheets.NIL != id_index.id_index_tombstone_p(fort)) {
                                            fort = (SubLObject)fact_sheets.$kw603$SKIP;
                                        }
                                        sofar = Numbers.add(sofar, (SubLObject)fact_sheets.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                        cdolist_list_var_$347 = verbosities;
                                        verbosity = (SubLObject)fact_sheets.NIL;
                                        verbosity = cdolist_list_var_$347.first();
                                        while (fact_sheets.NIL != cdolist_list_var_$347) {
                                            if (fact_sheets.NIL != term_ok_for_fact_sheet_p(fort, Equality.eq(verbosity, (SubLObject)fact_sheets.$kw97$MINI))) {
                                                status = fact_sheet_status(fort, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                                                if (fact_sheets.NIL != subl_promotions.memberP(status, target_statuses, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                    map_utilities.map_increment(missing_fact_sheets, verbosity, (SubLObject)fact_sheets.UNPROVIDED);
                                                }
                                            }
                                            cdolist_list_var_$347 = cdolist_list_var_$347.rest();
                                            verbosity = cdolist_list_var_$347.first();
                                        }
                                    }
                                }
                            }
                            final SubLObject idx_$347 = idx;
                            if (fact_sheets.NIL == id_index.id_index_sparse_objects_empty_p(idx_$347) || fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) {
                                final SubLObject sparse = id_index.id_index_sparse_objects(idx_$347);
                                SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$347);
                                final SubLObject end_id = id_index.id_index_next_id(idx_$347);
                                final SubLObject v_default = (SubLObject)((fact_sheets.NIL != id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) ? fact_sheets.NIL : fact_sheets.$kw603$SKIP);
                                while (id2.numL(end_id)) {
                                    final SubLObject fort2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                    if (fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP) || fact_sheets.NIL == id_index.id_index_tombstone_p(fort2)) {
                                        sofar = Numbers.add(sofar, (SubLObject)fact_sheets.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                        SubLObject cdolist_list_var_$348 = verbosities;
                                        SubLObject verbosity2 = (SubLObject)fact_sheets.NIL;
                                        verbosity2 = cdolist_list_var_$348.first();
                                        while (fact_sheets.NIL != cdolist_list_var_$348) {
                                            if (fact_sheets.NIL != term_ok_for_fact_sheet_p(fort2, Equality.eq(verbosity2, (SubLObject)fact_sheets.$kw97$MINI))) {
                                                final SubLObject status2 = fact_sheet_status(fort2, verbosity2, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                                                if (fact_sheets.NIL != subl_promotions.memberP(status2, target_statuses, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                    map_utilities.map_increment(missing_fact_sheets, verbosity2, (SubLObject)fact_sheets.UNPROVIDED);
                                                }
                                            }
                                            cdolist_list_var_$348 = cdolist_list_var_$348.rest();
                                            verbosity2 = cdolist_list_var_$348.first();
                                        }
                                    }
                                    id2 = Numbers.add(id2, (SubLObject)fact_sheets.ONE_INTEGER);
                                }
                            }
                        }
                        cdolist_list_var2 = cdolist_list_var2.rest();
                        table_var = cdolist_list_var2.first();
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$346 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        utilities_macros.noting_percent_progress_postamble();
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$346, thread);
                    }
                }
            }
            finally {
                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$345, thread);
            }
        }
        finally {
            fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0, thread);
        }
        return missing_fact_sheets;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 186672L)
    public static SubLObject gather_all_fact_sheet_filenames(final SubLObject accumulator, SubLObject verbosities, SubLObject domain_mt, SubLObject language_mt) {
        if (verbosities == fact_sheets.UNPROVIDED) {
            verbosities = (SubLObject)fact_sheets.$list530;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_stream$.bind(StreamsLow.$null_output$.getDynamicValue(thread), thread);
            final SubLObject message = (SubLObject)fact_sheets.$str604$Determining_for_all_fact_sheet_na;
            final SubLObject total = forts.fort_count();
            SubLObject sofar = (SubLObject)fact_sheets.ZERO_INTEGER;
            final SubLObject _prev_bind_0_$351 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
            try {
                utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                try {
                    utilities_macros.noting_percent_progress_preamble(message);
                    SubLObject cdolist_list_var = forts.do_forts_tables();
                    SubLObject table_var = (SubLObject)fact_sheets.NIL;
                    table_var = cdolist_list_var.first();
                    while (fact_sheets.NIL != cdolist_list_var) {
                        final SubLObject idx = table_var;
                        if (fact_sheets.NIL == id_index.id_index_objects_empty_p(idx, (SubLObject)fact_sheets.$kw603$SKIP)) {
                            final SubLObject idx_$352 = idx;
                            if (fact_sheets.NIL == id_index.id_index_dense_objects_empty_p(idx_$352, (SubLObject)fact_sheets.$kw603$SKIP)) {
                                final SubLObject vector_var = id_index.id_index_dense_objects(idx_$352);
                                final SubLObject backwardP_var = (SubLObject)fact_sheets.NIL;
                                SubLObject length;
                                SubLObject v_iteration;
                                SubLObject id;
                                SubLObject fort;
                                SubLObject cdolist_list_var_$353;
                                SubLObject verbosity;
                                SubLObject directory;
                                SubLObject path;
                                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)fact_sheets.NIL, v_iteration = (SubLObject)fact_sheets.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)fact_sheets.ONE_INTEGER)) {
                                    id = ((fact_sheets.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)fact_sheets.ONE_INTEGER) : v_iteration);
                                    fort = Vectors.aref(vector_var, id);
                                    if (fact_sheets.NIL == id_index.id_index_tombstone_p(fort) || fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) {
                                        if (fact_sheets.NIL != id_index.id_index_tombstone_p(fort)) {
                                            fort = (SubLObject)fact_sheets.$kw603$SKIP;
                                        }
                                        sofar = Numbers.add(sofar, (SubLObject)fact_sheets.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                        cdolist_list_var_$353 = verbosities;
                                        verbosity = (SubLObject)fact_sheets.NIL;
                                        verbosity = cdolist_list_var_$353.first();
                                        while (fact_sheets.NIL != cdolist_list_var_$353) {
                                            if (fact_sheets.NIL != term_ok_for_fact_sheet_p(fort, Equality.eq(verbosity, (SubLObject)fact_sheets.$kw97$MINI))) {
                                                thread.resetMultipleValues();
                                                directory = directory_and_filename_for_fact_sheet(fort, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                                                path = thread.secondMultipleValue();
                                                thread.resetMultipleValues();
                                                accumulation.accumulation_add(accumulator, path);
                                            }
                                            cdolist_list_var_$353 = cdolist_list_var_$353.rest();
                                            verbosity = cdolist_list_var_$353.first();
                                        }
                                    }
                                }
                            }
                            final SubLObject idx_$353 = idx;
                            if (fact_sheets.NIL == id_index.id_index_sparse_objects_empty_p(idx_$353) || fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) {
                                final SubLObject sparse = id_index.id_index_sparse_objects(idx_$353);
                                SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$353);
                                final SubLObject end_id = id_index.id_index_next_id(idx_$353);
                                final SubLObject v_default = (SubLObject)((fact_sheets.NIL != id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) ? fact_sheets.NIL : fact_sheets.$kw603$SKIP);
                                while (id2.numL(end_id)) {
                                    final SubLObject fort2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                    if (fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP) || fact_sheets.NIL == id_index.id_index_tombstone_p(fort2)) {
                                        sofar = Numbers.add(sofar, (SubLObject)fact_sheets.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                        SubLObject cdolist_list_var_$354 = verbosities;
                                        SubLObject verbosity2 = (SubLObject)fact_sheets.NIL;
                                        verbosity2 = cdolist_list_var_$354.first();
                                        while (fact_sheets.NIL != cdolist_list_var_$354) {
                                            if (fact_sheets.NIL != term_ok_for_fact_sheet_p(fort2, Equality.eq(verbosity2, (SubLObject)fact_sheets.$kw97$MINI))) {
                                                thread.resetMultipleValues();
                                                final SubLObject directory2 = directory_and_filename_for_fact_sheet(fort2, verbosity2, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                                                final SubLObject path2 = thread.secondMultipleValue();
                                                thread.resetMultipleValues();
                                                accumulation.accumulation_add(accumulator, path2);
                                            }
                                            cdolist_list_var_$354 = cdolist_list_var_$354.rest();
                                            verbosity2 = cdolist_list_var_$354.first();
                                        }
                                    }
                                    id2 = Numbers.add(id2, (SubLObject)fact_sheets.ONE_INTEGER);
                                }
                            }
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        table_var = cdolist_list_var.first();
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$352 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        utilities_macros.noting_percent_progress_postamble();
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$352, thread);
                    }
                }
            }
            finally {
                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$351, thread);
            }
        }
        finally {
            fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0, thread);
        }
        return accumulator;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 187629L)
    public static SubLObject update_all_fact_sheets(SubLObject number_of_workers, SubLObject this_worker_number, SubLObject verbosities, SubLObject target_statuses, SubLObject domain_mt, SubLObject language_mt) {
        if (number_of_workers == fact_sheets.UNPROVIDED) {
            number_of_workers = (SubLObject)fact_sheets.ONE_INTEGER;
        }
        if (this_worker_number == fact_sheets.UNPROVIDED) {
            this_worker_number = (SubLObject)fact_sheets.ZERO_INTEGER;
        }
        if (verbosities == fact_sheets.UNPROVIDED) {
            verbosities = (SubLObject)fact_sheets.$list530;
        }
        if (target_statuses == fact_sheets.UNPROVIDED) {
            target_statuses = (SubLObject)fact_sheets.$list531;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != subl_promotions.positive_integer_p(number_of_workers) : number_of_workers;
        assert fact_sheets.NIL != subl_promotions.non_negative_integer_p(this_worker_number) : this_worker_number;
        final SubLObject list_var = target_statuses;
        assert fact_sheets.NIL != list_utilities.non_dotted_list_p(list_var) : list_var;
        SubLObject cdolist_list_var = list_var;
        SubLObject elem = (SubLObject)fact_sheets.NIL;
        elem = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            assert fact_sheets.NIL != fact_sheet_status_p(elem) : elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        }
        if (this_worker_number.numG(number_of_workers)) {
            Errors.error((SubLObject)fact_sheets.$str606$THIS_WORKER_NUMBER___a__must_be_l, this_worker_number, number_of_workers);
        }
        SubLObject stopP = (SubLObject)fact_sheets.NIL;
        SubLObject error_count = (SubLObject)fact_sheets.ZERO_INTEGER;
        final SubLObject already_loggingP = Types.stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
        SubLObject directory = (SubLObject)fact_sheets.NIL;
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject use_new_setupP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == already_loggingP) {
            thread.resetMultipleValues();
            final SubLObject directory_$357 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
            final SubLObject filename_$358 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            directory = directory_$357;
            filename = filename_$358;
            use_new_setupP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != Filesys.directory_p(directory) && filename.isString());
        }
        if (fact_sheets.NIL != use_new_setupP) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_file$.bind((fact_sheets.NIL != use_new_setupP) ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_0_$359 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$359, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
                }
                final SubLObject _prev_bind_0_$360 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
                try {
                    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
                    final SubLObject _prev_bind_0_$361 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
                    try {
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind((SubLObject)fact_sheets.NIL, thread);
                        fact_sheet_logs.$hourly_fact_sheet_stats$.bind(Vectors.make_vector((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER), thread);
                        fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                        start_new_fact_sheet_log_file_watcher((SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject stream_$362 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$362 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$362.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$362))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$362);
                            PrintLow.format(stream_$362, (SubLObject)fact_sheets.$str607$Starting_fact_sheet_update_sessio, new SubLObject[] { this_worker_number, number_of_workers, verbosities, target_statuses, domain_mt, language_mt });
                            streams_high.force_output(stream_$362);
                        }
                        SubLObject fort_num = (SubLObject)fact_sheets.ZERO_INTEGER;
                        final SubLObject message = (SubLObject)fact_sheets.$str608$Iterating_over_all_FORTs_to_updat;
                        final SubLObject total = forts.fort_count();
                        SubLObject sofar = (SubLObject)fact_sheets.ZERO_INTEGER;
                        final SubLObject _prev_bind_0_$362 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$364 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                        try {
                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                            try {
                                utilities_macros.noting_percent_progress_preamble(message);
                                SubLObject rest;
                                SubLObject idx;
                                SubLObject table_var;
                                SubLObject idx_$365;
                                SubLObject vector_var;
                                SubLObject backwardP_var;
                                SubLObject length;
                                SubLObject current;
                                SubLObject datum;
                                SubLObject start;
                                SubLObject end;
                                SubLObject delta;
                                SubLObject end_var;
                                SubLObject id;
                                SubLObject fort;
                                SubLObject cdolist_list_var2;
                                SubLObject verbosity;
                                SubLObject status;
                                SubLObject _prev_bind_0_$363;
                                SubLObject error_message;
                                SubLObject stream_$363;
                                SubLObject _prev_bind_0_$364;
                                SubLObject stream_$364;
                                SubLObject stream_$365;
                                SubLObject idx_$366;
                                SubLObject sparse;
                                SubLObject id2;
                                SubLObject end_id;
                                SubLObject v_default;
                                SubLObject fort2;
                                SubLObject cdolist_list_var3;
                                SubLObject verbosity2;
                                SubLObject status2;
                                SubLObject _prev_bind_0_$365;
                                SubLObject error_message2;
                                SubLObject stream_$366;
                                SubLObject _prev_bind_0_$366;
                                SubLObject stream_$367;
                                SubLObject stream_$368;
                                for (rest = (SubLObject)fact_sheets.NIL, rest = forts.do_forts_tables(); fact_sheets.NIL == stopP && fact_sheets.NIL != rest; rest = rest.rest()) {
                                    table_var = (idx = rest.first());
                                    if (fact_sheets.NIL == id_index.id_index_objects_empty_p(idx, (SubLObject)fact_sheets.$kw603$SKIP)) {
                                        idx_$365 = idx;
                                        if (fact_sheets.NIL == id_index.id_index_dense_objects_empty_p(idx_$365, (SubLObject)fact_sheets.$kw603$SKIP)) {
                                            vector_var = id_index.id_index_dense_objects(idx_$365);
                                            backwardP_var = (SubLObject)fact_sheets.NIL;
                                            length = Sequences.length(vector_var);
                                            datum = (current = (SubLObject)((fact_sheets.NIL != backwardP_var) ? ConsesLow.list(Numbers.subtract(length, (SubLObject)fact_sheets.ONE_INTEGER), (SubLObject)fact_sheets.MINUS_ONE_INTEGER, (SubLObject)fact_sheets.MINUS_ONE_INTEGER) : ConsesLow.list((SubLObject)fact_sheets.ZERO_INTEGER, length, (SubLObject)fact_sheets.ONE_INTEGER)));
                                            start = (SubLObject)fact_sheets.NIL;
                                            end = (SubLObject)fact_sheets.NIL;
                                            delta = (SubLObject)fact_sheets.NIL;
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list609);
                                            start = current.first();
                                            current = current.rest();
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list609);
                                            end = current.first();
                                            current = current.rest();
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list609);
                                            delta = current.first();
                                            current = current.rest();
                                            if (fact_sheets.NIL == current) {
                                                if (fact_sheets.NIL == stopP) {
                                                    for (end_var = end, id = (SubLObject)fact_sheets.NIL, id = start; fact_sheets.NIL == stopP && fact_sheets.NIL == subl_macros.do_numbers_endtest(id, delta, end_var); id = Numbers.add(id, delta)) {
                                                        fort = Vectors.aref(vector_var, id);
                                                        if (fact_sheets.NIL == id_index.id_index_tombstone_p(fort) || fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) {
                                                            if (fact_sheets.NIL != id_index.id_index_tombstone_p(fort)) {
                                                                fort = (SubLObject)fact_sheets.$kw603$SKIP;
                                                            }
                                                            sofar = Numbers.add(sofar, (SubLObject)fact_sheets.ONE_INTEGER);
                                                            utilities_macros.note_percent_progress(sofar, total);
                                                            if (this_worker_number.eql(Numbers.mod(fort_num, number_of_workers))) {
                                                                cdolist_list_var2 = verbosities;
                                                                verbosity = (SubLObject)fact_sheets.NIL;
                                                                verbosity = cdolist_list_var2.first();
                                                                while (fact_sheets.NIL != cdolist_list_var2) {
                                                                    if (fact_sheets.NIL != term_ok_for_fact_sheet_p(fort, Equality.eq(verbosity, (SubLObject)fact_sheets.$kw97$MINI))) {
                                                                        status = fact_sheet_status(fort, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                                                                        _prev_bind_0_$363 = fact_sheets.$fact_sheet_verbosity$.currentBinding(thread);
                                                                        try {
                                                                            fact_sheets.$fact_sheet_verbosity$.bind(verbosity, thread);
                                                                            error_message = (SubLObject)fact_sheets.NIL;
                                                                            if (fact_sheets.NIL != subl_promotions.memberP(status, target_statuses, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                                stream_$363 = fact_sheet_logs.fact_sheet_log_stream();
                                                                                if ((fact_sheets.T == stream_$363 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$363.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$363))) {
                                                                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$363);
                                                                                    PrintLow.format(stream_$363, (SubLObject)fact_sheets.$str610$Starting__S_update_on__S__Status_, new SubLObject[] { verbosity, fort, status });
                                                                                    streams_high.force_output(stream_$363);
                                                                                }
                                                                                if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                                                                                    try {
                                                                                        thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                                                                        _prev_bind_0_$364 = Errors.$error_handler$.currentBinding(thread);
                                                                                        try {
                                                                                            Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                                                                                            try {
                                                                                                update_fact_sheet_for_term_with_logging(fort, verbosity, domain_mt, language_mt);
                                                                                            }
                                                                                            catch (Throwable catch_var) {
                                                                                                Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                                                                                            }
                                                                                        }
                                                                                        finally {
                                                                                            Errors.$error_handler$.rebind(_prev_bind_0_$364, thread);
                                                                                        }
                                                                                    }
                                                                                    catch (Throwable ccatch_env_var) {
                                                                                        error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                                                                    }
                                                                                    finally {
                                                                                        thread.throwStack.pop();
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    update_fact_sheet_for_term_with_logging(fort, verbosity, domain_mt, language_mt);
                                                                                }
                                                                                if (error_message.isString()) {
                                                                                    stream_$364 = fact_sheet_logs.fact_sheet_log_stream();
                                                                                    if ((fact_sheets.T == stream_$364 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$364.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$364))) {
                                                                                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$364);
                                                                                        PrintLow.format(stream_$364, (SubLObject)fact_sheets.$str611$Fact_Sheet_Updater_error_on__S___, fort, error_message);
                                                                                        streams_high.force_output(stream_$364);
                                                                                    }
                                                                                    error_message = (SubLObject)fact_sheets.NIL;
                                                                                    error_count = Numbers.add(error_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                                    if (error_count.numG((SubLObject)fact_sheets.TEN_INTEGER)) {
                                                                                        stream_$365 = fact_sheet_logs.fact_sheet_log_stream();
                                                                                        if ((fact_sheets.T == stream_$365 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$365.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$365))) {
                                                                                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$365);
                                                                                            PrintLow.format(stream_$365, (SubLObject)fact_sheets.$str612$Halting_Fact_Sheet_Update_after__, error_count);
                                                                                            streams_high.force_output(stream_$365);
                                                                                        }
                                                                                        stopP = (SubLObject)fact_sheets.T;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        finally {
                                                                            fact_sheets.$fact_sheet_verbosity$.rebind(_prev_bind_0_$363, thread);
                                                                        }
                                                                    }
                                                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                                                    verbosity = cdolist_list_var2.first();
                                                                }
                                                                if (fact_sheets.NIL != fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                                                                    stopP = (SubLObject)fact_sheets.T;
                                                                }
                                                            }
                                                            fort_num = Numbers.add(fort_num, (SubLObject)fact_sheets.ONE_INTEGER);
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list609);
                                            }
                                        }
                                        idx_$366 = idx;
                                        if (fact_sheets.NIL == id_index.id_index_sparse_objects_empty_p(idx_$366) || fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) {
                                            sparse = id_index.id_index_sparse_objects(idx_$366);
                                            id2 = id_index.id_index_sparse_id_threshold(idx_$366);
                                            end_id = id_index.id_index_next_id(idx_$366);
                                            v_default = (SubLObject)((fact_sheets.NIL != id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) ? fact_sheets.NIL : fact_sheets.$kw603$SKIP);
                                            while (id2.numL(end_id) && fact_sheets.NIL == stopP) {
                                                fort2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                                if (fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP) || fact_sheets.NIL == id_index.id_index_tombstone_p(fort2)) {
                                                    sofar = Numbers.add(sofar, (SubLObject)fact_sheets.ONE_INTEGER);
                                                    utilities_macros.note_percent_progress(sofar, total);
                                                    if (this_worker_number.eql(Numbers.mod(fort_num, number_of_workers))) {
                                                        cdolist_list_var3 = verbosities;
                                                        verbosity2 = (SubLObject)fact_sheets.NIL;
                                                        verbosity2 = cdolist_list_var3.first();
                                                        while (fact_sheets.NIL != cdolist_list_var3) {
                                                            if (fact_sheets.NIL != term_ok_for_fact_sheet_p(fort2, Equality.eq(verbosity2, (SubLObject)fact_sheets.$kw97$MINI))) {
                                                                status2 = fact_sheet_status(fort2, verbosity2, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                                                                _prev_bind_0_$365 = fact_sheets.$fact_sheet_verbosity$.currentBinding(thread);
                                                                try {
                                                                    fact_sheets.$fact_sheet_verbosity$.bind(verbosity2, thread);
                                                                    error_message2 = (SubLObject)fact_sheets.NIL;
                                                                    if (fact_sheets.NIL != subl_promotions.memberP(status2, target_statuses, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
                                                                        stream_$366 = fact_sheet_logs.fact_sheet_log_stream();
                                                                        if ((fact_sheets.T == stream_$366 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$366.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$366))) {
                                                                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$366);
                                                                            PrintLow.format(stream_$366, (SubLObject)fact_sheets.$str610$Starting__S_update_on__S__Status_, new SubLObject[] { verbosity2, fort2, status2 });
                                                                            streams_high.force_output(stream_$366);
                                                                        }
                                                                        if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                                                                            try {
                                                                                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                                                                _prev_bind_0_$366 = Errors.$error_handler$.currentBinding(thread);
                                                                                try {
                                                                                    Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                                                                                    try {
                                                                                        update_fact_sheet_for_term_with_logging(fort2, verbosity2, domain_mt, language_mt);
                                                                                    }
                                                                                    catch (Throwable catch_var2) {
                                                                                        Errors.handleThrowable(catch_var2, (SubLObject)fact_sheets.NIL);
                                                                                    }
                                                                                }
                                                                                finally {
                                                                                    Errors.$error_handler$.rebind(_prev_bind_0_$366, thread);
                                                                                }
                                                                            }
                                                                            catch (Throwable ccatch_env_var2) {
                                                                                error_message2 = Errors.handleThrowable(ccatch_env_var2, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                                                            }
                                                                            finally {
                                                                                thread.throwStack.pop();
                                                                            }
                                                                        }
                                                                        else {
                                                                            update_fact_sheet_for_term_with_logging(fort2, verbosity2, domain_mt, language_mt);
                                                                        }
                                                                        if (error_message2.isString()) {
                                                                            stream_$367 = fact_sheet_logs.fact_sheet_log_stream();
                                                                            if ((fact_sheets.T == stream_$367 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$367.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$367))) {
                                                                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$367);
                                                                                PrintLow.format(stream_$367, (SubLObject)fact_sheets.$str611$Fact_Sheet_Updater_error_on__S___, fort2, error_message2);
                                                                                streams_high.force_output(stream_$367);
                                                                            }
                                                                            error_message2 = (SubLObject)fact_sheets.NIL;
                                                                            error_count = Numbers.add(error_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                                                            if (error_count.numG((SubLObject)fact_sheets.TEN_INTEGER)) {
                                                                                stream_$368 = fact_sheet_logs.fact_sheet_log_stream();
                                                                                if ((fact_sheets.T == stream_$368 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$368.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$368))) {
                                                                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$368);
                                                                                    PrintLow.format(stream_$368, (SubLObject)fact_sheets.$str612$Halting_Fact_Sheet_Update_after__, error_count);
                                                                                    streams_high.force_output(stream_$368);
                                                                                }
                                                                                stopP = (SubLObject)fact_sheets.T;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                finally {
                                                                    fact_sheets.$fact_sheet_verbosity$.rebind(_prev_bind_0_$365, thread);
                                                                }
                                                            }
                                                            cdolist_list_var3 = cdolist_list_var3.rest();
                                                            verbosity2 = cdolist_list_var3.first();
                                                        }
                                                        if (fact_sheets.NIL != fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                                                            stopP = (SubLObject)fact_sheets.T;
                                                        }
                                                    }
                                                    fort_num = Numbers.add(fort_num, (SubLObject)fact_sheets.ONE_INTEGER);
                                                }
                                                id2 = Numbers.add(id2, (SubLObject)fact_sheets.ONE_INTEGER);
                                            }
                                        }
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$367 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    utilities_macros.noting_percent_progress_postamble();
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$367, thread);
                                }
                            }
                        }
                        finally {
                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$364, thread);
                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$362, thread);
                        }
                        final SubLObject stream_$369 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$369 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$369.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$369))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$369);
                            PrintLow.format(stream_$369, (SubLObject)fact_sheets.$str613$Finished_fact_sheet_update_sessio);
                            streams_high.force_output(stream_$369);
                        }
                    }
                    finally {
                        fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$361, thread);
                    }
                    if (fact_sheets.NIL != use_new_setupP) {
                        final SubLObject stream_$370 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$370 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$370.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$370))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$370);
                            PrintLow.format(stream_$370, (SubLObject)fact_sheets.$str548$Closing_log_);
                            streams_high.force_output(stream_$370);
                        }
                        fact_sheet_logs.note_fact_sheet_log_file_closed((SubLObject)fact_sheets.UNPROVIDED);
                    }
                }
                finally {
                    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$360, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$368 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$368, thread);
                }
            }
        }
        finally {
            fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 190329L)
    public static SubLObject update_fact_sheets(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject stop_after, SubLObject new_days) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (stop_after == fact_sheets.UNPROVIDED) {
            stop_after = (SubLObject)fact_sheets.NIL;
        }
        if (new_days == fact_sheets.UNPROVIDED) {
            new_days = fsut_prioritizer_default_new_days();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject done_count = (SubLObject)fact_sheets.ZERO_INTEGER;
        final SubLObject prioritizer = find_or_create_fact_sheet_update_term_prioritizer(verbosity, domain_mt, language_mt, new_days);
        SubLObject stopP = (SubLObject)fact_sheets.NIL;
        SubLObject error_count = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject error_message = (SubLObject)fact_sheets.NIL;
        final SubLObject already_loggingP = Types.stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
        SubLObject directory = (SubLObject)fact_sheets.NIL;
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject use_new_setupP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == already_loggingP) {
            thread.resetMultipleValues();
            final SubLObject directory_$381 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
            final SubLObject filename_$382 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            directory = directory_$381;
            filename = filename_$382;
            use_new_setupP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != Filesys.directory_p(directory) && filename.isString());
        }
        if (fact_sheets.NIL != use_new_setupP) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_file$.bind((fact_sheets.NIL != use_new_setupP) ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_0_$383 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$383, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
                }
                final SubLObject _prev_bind_0_$384 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
                try {
                    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
                    final SubLObject _prev_bind_0_$385 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
                    try {
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind((SubLObject)fact_sheets.NIL, thread);
                        fact_sheet_logs.$hourly_fact_sheet_stats$.bind(Vectors.make_vector((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER), thread);
                        fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                        start_new_fact_sheet_log_file_watcher((SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject stream_$386 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$386 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$386.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$386))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$386);
                            PrintLow.format(stream_$386, (SubLObject)fact_sheets.$str614$Starting_fact_sheet_update_sessio, new SubLObject[] { verbosity, domain_mt, language_mt, stop_after });
                            streams_high.force_output(stream_$386);
                        }
                        while (fact_sheets.NIL == stopP) {
                            if (fact_sheets.NIL != fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                                try {
                                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                    final SubLObject _prev_bind_0_$386 = Errors.$error_handler$.currentBinding(thread);
                                    try {
                                        Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                                        try {
                                            thread.resetMultipleValues();
                                            final SubLObject done_count_$388 = update_fact_sheets_internal(prioritizer, stop_after, done_count, (SubLObject)fact_sheets.UNPROVIDED);
                                            final SubLObject stopP_$389 = thread.secondMultipleValue();
                                            thread.resetMultipleValues();
                                            done_count = done_count_$388;
                                            stopP = stopP_$389;
                                        }
                                        catch (Throwable catch_var) {
                                            Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                                        }
                                    }
                                    finally {
                                        Errors.$error_handler$.rebind(_prev_bind_0_$386, thread);
                                    }
                                }
                                catch (Throwable ccatch_env_var) {
                                    error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                }
                                finally {
                                    thread.throwStack.pop();
                                }
                            }
                            else {
                                thread.resetMultipleValues();
                                final SubLObject done_count_$389 = update_fact_sheets_internal(prioritizer, stop_after, done_count, (SubLObject)fact_sheets.UNPROVIDED);
                                final SubLObject stopP_$390 = thread.secondMultipleValue();
                                thread.resetMultipleValues();
                                done_count = done_count_$389;
                                stopP = stopP_$390;
                            }
                            if (error_message.isString()) {
                                Errors.warn(Sequences.cconcatenate((SubLObject)fact_sheets.$str615$Fact_Sheet_Updater_error__, error_message));
                                error_message = (SubLObject)fact_sheets.NIL;
                                error_count = Numbers.add(error_count, (SubLObject)fact_sheets.ONE_INTEGER);
                                if (!error_count.numG((SubLObject)fact_sheets.TEN_INTEGER)) {
                                    continue;
                                }
                                final SubLObject stream_$387 = fact_sheet_logs.fact_sheet_log_stream();
                                if ((fact_sheets.T == stream_$387 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$387.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$387))) {
                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$387);
                                    PrintLow.format(stream_$387, (SubLObject)fact_sheets.$str612$Halting_Fact_Sheet_Update_after__, error_count);
                                    streams_high.force_output(stream_$387);
                                }
                                stopP = (SubLObject)fact_sheets.T;
                            }
                        }
                        final SubLObject stream_$388 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$388 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$388.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$388))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$388);
                            PrintLow.format(stream_$388, (SubLObject)fact_sheets.$str613$Finished_fact_sheet_update_sessio);
                            streams_high.force_output(stream_$388);
                        }
                    }
                    finally {
                        fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$385, thread);
                    }
                    if (fact_sheets.NIL != use_new_setupP) {
                        final SubLObject stream_$389 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$389 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$389.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$389))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$389);
                            PrintLow.format(stream_$389, (SubLObject)fact_sheets.$str548$Closing_log_);
                            streams_high.force_output(stream_$389);
                        }
                        fact_sheet_logs.note_fact_sheet_log_file_closed((SubLObject)fact_sheets.UNPROVIDED);
                    }
                }
                finally {
                    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$384, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$387 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$387, thread);
                }
            }
        }
        finally {
            fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
        }
        stop_fsut_prioritizer(prioritizer);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 191722L)
    public static SubLObject sleep_until_time_within_next_day(final SubLObject second, final SubLObject minute, final SubLObject hour) {
        final SubLObject time_now = Time.get_universal_time();
        final SubLObject wake_time = numeric_date_utilities.get_universal_time_within_next_day(second, minute, hour);
        final SubLObject sleep_time = number_utilities.f_1X(Numbers.subtract(wake_time, time_now));
        Threads.sleep(sleep_time);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 192097L)
    public static SubLObject time_of_day_has_arrivedP(final SubLObject second, final SubLObject minute, final SubLObject hour) {
        return Time.time_has_arrivedP(numeric_date_utilities.get_universal_time_today(second, minute, hour));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 192235L)
    public static SubLObject image_seems_idleP(SubLObject reverify_times, SubLObject except_for) {
        if (reverify_times == fact_sheets.UNPROVIDED) {
            reverify_times = (SubLObject)fact_sheets.ZERO_INTEGER;
        }
        if (except_for == fact_sheets.UNPROVIDED) {
            except_for = (SubLObject)fact_sheets.NIL;
        }
        SubLObject busyP;
        for (busyP = (SubLObject)fact_sheets.NIL; fact_sheets.NIL == busyP && fact_sheets.NIL != subl_promotions.non_negative_integer_p(reverify_times); busyP = image_find_busy_thread(except_for), reverify_times = Numbers.subtract(reverify_times, (SubLObject)fact_sheets.ONE_INTEGER)) {}
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == busyP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 192715L)
    public static SubLObject image_find_busy_thread(SubLObject except_for) {
        if (except_for == fact_sheets.UNPROVIDED) {
            except_for = (SubLObject)fact_sheets.NIL;
        }
        SubLObject busy_thread = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == busy_thread) {
            SubLObject csome_list_var = Threads.all_processes();
            SubLObject thread = (SubLObject)fact_sheets.NIL;
            thread = csome_list_var.first();
            while (fact_sheets.NIL == busy_thread && fact_sheets.NIL != csome_list_var) {
                if (!thread.eql(Threads.current_process()) && fact_sheets.NIL == conses_high.member(thread, except_for, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) && !fact_sheets.$str616$Background.equalp(Threads.process_name(thread)) && fact_sheets.$str617$Run.equalp(Threads.process_whostate(thread))) {
                    busy_thread = thread;
                }
                csome_list_var = csome_list_var.rest();
                thread = csome_list_var.first();
            }
        }
        return busy_thread;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 193202L)
    public static SubLObject maybe_start_new_fact_sheet_updater_default_screensaver_for_user(SubLObject user_string) {
        if (user_string == fact_sheets.UNPROVIDED) {
            user_string = Environment.get_user_name((SubLObject)fact_sheets.UNPROVIDED);
        }
        if (fact_sheets.NIL != control_vars.kb_loaded() && fact_sheets.NIL != list_utilities.alist_has_keyP(fact_sheets.$fact_sheet_screensaver_users$.getGlobalValue(), user_string, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP))) {
            return start_new_fact_sheet_updater_default_screensaver(user_string);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 193558L)
    public static SubLObject start_new_fact_sheet_updater_default_screensaver(SubLObject user_string) {
        if (user_string == fact_sheets.UNPROVIDED) {
            user_string = (SubLObject)fact_sheets.NIL;
        }
        return (fact_sheets.NIL != user_string) ? start_new_fact_sheet_updater_screensaver(default_fact_sheet_updater_screensaver_verbosity_for_user(user_string), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED) : start_new_fact_sheet_updater_screensaver((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 193845L)
    public static SubLObject default_fact_sheet_updater_screensaver_verbosity_for_user(final SubLObject user_string) {
        return list_utilities.alist_lookup(fact_sheets.$fact_sheet_screensaver_users$.getGlobalValue(), user_string, Symbols.symbol_function((SubLObject)fact_sheets.EQUALP), (SubLObject)fact_sheets.$kw35$NORMAL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 194068L)
    public static SubLObject register_fact_sheet_screensaver(final SubLObject screensaver) {
        fact_sheets.$fact_sheet_screensavers$.setGlobalValue((SubLObject)ConsesLow.cons(screensaver, fact_sheets.$fact_sheet_screensavers$.getGlobalValue()));
        return fact_sheets.$fact_sheet_screensavers$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 194213L)
    public static SubLObject deregister_fact_sheet_screensaver(final SubLObject screensaver) {
        fact_sheets.$fact_sheet_screensavers$.setGlobalValue(Sequences.delete(screensaver, fact_sheets.$fact_sheet_screensavers$.getGlobalValue(), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
        return fact_sheets.$fact_sheet_screensavers$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 194395L)
    public static SubLObject start_new_fact_sheet_updater_screensaver(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject start_hour, SubLObject end_hour) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (start_hour == fact_sheets.UNPROVIDED) {
            start_hour = (SubLObject)fact_sheets.ONE_INTEGER;
        }
        if (end_hour == fact_sheets.UNPROVIDED) {
            end_hour = (SubLObject)fact_sheets.FIVE_INTEGER;
        }
        allow_fact_sheet_screensavers();
        final SubLObject screensaver = process_utilities.make_cyc_server_process_with_args((SubLObject)fact_sheets.$str620$Fact_Sheet_Screensaver, (SubLObject)fact_sheets.$sym621$UPDATE_FACT_SHEET_SCREENSAVER, (SubLObject)ConsesLow.list(verbosity, domain_mt, language_mt, start_hour, end_hour));
        register_fact_sheet_screensaver(screensaver);
        return screensaver;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 194973L)
    public static SubLObject stop_all_fact_sheet_screensavers() {
        fact_sheets.$fact_sheet_screensavers_should_sleepP$.setGlobalValue((SubLObject)fact_sheets.T);
        return fact_sheets.$fact_sheet_screensavers_should_sleepP$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 195341L)
    public static SubLObject restart_all_fact_sheet_screensavers() {
        fact_sheets.$fact_sheet_screensavers_should_sleepP$.setGlobalValue((SubLObject)fact_sheets.NIL);
        return fact_sheets.$fact_sheet_screensavers_should_sleepP$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 195556L)
    public static SubLObject allow_fact_sheet_screensavers() {
        fact_sheets.$fact_sheet_screensavers_should_dieP$.setGlobalValue((SubLObject)fact_sheets.NIL);
        return fact_sheets.$fact_sheet_screensavers_should_dieP$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 195704L)
    public static SubLObject kill_all_fact_sheet_screensavers(SubLObject nowP) {
        if (nowP == fact_sheets.UNPROVIDED) {
            nowP = (SubLObject)fact_sheets.NIL;
        }
        if (fact_sheets.NIL != nowP) {
            while (fact_sheets.NIL != fact_sheets.$fact_sheet_screensavers$.getGlobalValue()) {
                final SubLObject screensaver = fact_sheets.$fact_sheet_screensavers$.getGlobalValue().first();
                if (fact_sheets.NIL != Threads.valid_process_p(screensaver)) {
                    Threads.kill_process(screensaver);
                }
                fact_sheets.$fact_sheet_screensavers$.setGlobalValue(fact_sheets.$fact_sheet_screensavers$.getGlobalValue().rest());
            }
        }
        else {
            fact_sheets.$fact_sheet_screensavers_should_dieP$.setGlobalValue((SubLObject)fact_sheets.T);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 196232L)
    public static SubLObject update_fact_sheet_screensaver(final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject start_hour, final SubLObject end_hour) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject already_loggingP = Types.stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
        SubLObject directory = (SubLObject)fact_sheets.NIL;
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject use_new_setupP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == already_loggingP) {
            thread.resetMultipleValues();
            final SubLObject directory_$396 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
            final SubLObject filename_$397 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            directory = directory_$396;
            filename = filename_$397;
            use_new_setupP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != Filesys.directory_p(directory) && filename.isString());
        }
        if (fact_sheets.NIL != use_new_setupP) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_file$.bind((fact_sheets.NIL != use_new_setupP) ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_0_$398 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$398, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
                }
                final SubLObject _prev_bind_0_$399 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
                try {
                    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
                    final SubLObject _prev_bind_0_$400 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
                    try {
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind((SubLObject)fact_sheets.NIL, thread);
                        fact_sheet_logs.$hourly_fact_sheet_stats$.bind(Vectors.make_vector((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER), thread);
                        fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject stream_$401 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$401 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$401.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$401))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$401);
                            PrintLow.format(stream_$401, (SubLObject)fact_sheets.$str622$Starting_fact_sheet_update_screen, new SubLObject[] { verbosity, domain_mt, language_mt, start_hour, (fact_sheets.NIL != end_hour) ? Sequences.cconcatenate(format_nil.format_nil_s_no_copy(end_hour), (SubLObject)fact_sheets.$str623$_00) : fact_sheets.$str624$midnight });
                            streams_high.force_output(stream_$401);
                        }
                        while (fact_sheets.NIL == fact_sheets.$fact_sheet_screensavers_should_dieP$.getGlobalValue()) {
                            final SubLObject start_has_arrivedP = time_of_day_has_arrivedP((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, start_hour);
                            final SubLObject end_has_arrivedP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != end_hour && fact_sheets.NIL != time_of_day_has_arrivedP((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, end_hour));
                            final SubLObject work_past_midnightP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != end_hour && end_hour.numL(start_hour));
                            final SubLObject prioritizer = find_fsut_prioritizer(verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                            final SubLObject prioritizer_thread = (SubLObject)((fact_sheets.NIL != prioritizer) ? fsut_prioritizer_thread(prioritizer) : fact_sheets.NIL);
                            if (fact_sheets.NIL == start_has_arrivedP && (fact_sheets.NIL == work_past_midnightP || fact_sheets.NIL != end_has_arrivedP)) {
                                final SubLObject stream_$402 = fact_sheet_logs.fact_sheet_log_stream();
                                if ((fact_sheets.T == stream_$402 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$402.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$402))) {
                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$402);
                                    PrintLow.format(stream_$402, (SubLObject)fact_sheets.$str625$Start_time_hasn_t_arrived__Sleepi, start_hour);
                                    streams_high.force_output(stream_$402);
                                }
                                sleep_until_time_within_next_day((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, start_hour);
                                fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                            }
                            else if (fact_sheets.NIL != end_has_arrivedP && (fact_sheets.NIL == work_past_midnightP || fact_sheets.NIL == start_has_arrivedP)) {
                                fact_sheet_logs.log_fact_sheet_hourly_report();
                                final SubLObject stream_$403 = fact_sheet_logs.fact_sheet_log_stream();
                                if ((fact_sheets.T == stream_$403 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$403.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$403))) {
                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$403);
                                    PrintLow.format(stream_$403, (SubLObject)fact_sheets.$str626$End_time_of__S_00_has_passed__Sle, end_hour, start_hour);
                                    streams_high.force_output(stream_$403);
                                }
                                stop_all_fsut_prioritizers();
                                sleep_until_time_within_next_day((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, start_hour);
                                fact_sheets.$fact_sheet_screensavers_should_sleepP$.setGlobalValue((SubLObject)fact_sheets.NIL);
                                fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                            }
                            else if (fact_sheets.NIL != fact_sheets.$fact_sheet_screensavers_should_sleepP$.getGlobalValue()) {
                                final SubLObject seconds = (SubLObject)fact_sheets.$int536$60;
                                final SubLObject stream_$404 = fact_sheet_logs.fact_sheet_log_stream();
                                if ((fact_sheets.T == stream_$404 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$404.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$404))) {
                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$404);
                                    PrintLow.format(stream_$404, (SubLObject)fact_sheets.$str627$Been_told_to_sleep__Sleeping_for_, seconds);
                                    streams_high.force_output(stream_$404);
                                }
                                stop_all_fsut_prioritizers();
                                Threads.sleep(seconds);
                                fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                            }
                            else if (fact_sheets.NIL == image_seems_idleP((SubLObject)fact_sheets.EIGHT_INTEGER, (SubLObject)((fact_sheets.NIL != prioritizer_thread) ? ConsesLow.list(prioritizer_thread) : fact_sheets.NIL))) {
                                final SubLObject seconds = (SubLObject)fact_sheets.$int536$60;
                                final SubLObject stream_$405 = fact_sheet_logs.fact_sheet_log_stream();
                                if ((fact_sheets.T == stream_$405 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$405.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$405))) {
                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$405);
                                    PrintLow.format(stream_$405, (SubLObject)fact_sheets.$str628$Image_appears_to_be_busy__Sleepin, seconds);
                                    streams_high.force_output(stream_$405);
                                }
                                if (fact_sheets.NIL != prioritizer) {
                                    stop_fsut_prioritizer(prioritizer);
                                }
                                Threads.sleep(seconds);
                            }
                            else {
                                final SubLObject prioritizer_$406 = find_or_create_fact_sheet_update_term_prioritizer(verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                                renice_fsut_prioritizer(prioritizer_$406, (SubLObject)fact_sheets.UNPROVIDED);
                                update_fact_sheets_internal(prioritizer_$406, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, end_hour);
                            }
                        }
                        final SubLObject stream_$406 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$406 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$406.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$406))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$406);
                            PrintLow.format(stream_$406, (SubLObject)fact_sheets.$str629$Fact_Sheet_Screensavers_have_been);
                            streams_high.force_output(stream_$406);
                        }
                        fact_sheet_logs.log_fact_sheet_hourly_report();
                        deregister_fact_sheet_screensaver(Threads.current_process());
                    }
                    finally {
                        fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$400, thread);
                    }
                    if (fact_sheets.NIL != use_new_setupP) {
                        final SubLObject stream_$407 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$407 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$407.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$407))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$407);
                            PrintLow.format(stream_$407, (SubLObject)fact_sheets.$str548$Closing_log_);
                            streams_high.force_output(stream_$407);
                        }
                        fact_sheet_logs.note_fact_sheet_log_file_closed((SubLObject)fact_sheets.UNPROVIDED);
                    }
                }
                finally {
                    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$399, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$401 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$401, thread);
                }
            }
        }
        finally {
            fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 199049L)
    public static SubLObject update_fact_sheets_internal(final SubLObject prioritizer, final SubLObject stop_after, SubLObject done_count, SubLObject end_hour) {
        if (end_hour == fact_sheets.UNPROVIDED) {
            end_hour = (SubLObject)fact_sheets.NIL;
        }
        SubLObject fort = (SubLObject)fact_sheets.NIL;
        SubLObject stopP = (SubLObject)fact_sheets.NIL;
        final SubLObject verbosity = fsut_prioritizer_verbosity(prioritizer);
        final SubLObject domain_mt = fsut_prioritizer_domain_mt(prioritizer);
        final SubLObject language_mt = fsut_prioritizer_language_mt(prioritizer);
        while (fact_sheets.NIL == fort && fact_sheets.NIL == stopP) {
            fort = fsut_prioritizer_next_term(prioritizer, end_hour);
            if (fact_sheets.NIL == fort) {
                stopP = (SubLObject)fact_sheets.T;
            }
        }
        if (fact_sheets.NIL != fort) {
            update_fact_sheet_for_term_with_logging(fort, verbosity, domain_mt, language_mt);
            if (fact_sheets.NIL != subl_promotions.positive_integer_p(stop_after)) {
                done_count = Numbers.add(done_count, (SubLObject)fact_sheets.ONE_INTEGER);
                if (done_count.numGE(stop_after)) {
                    stopP = (SubLObject)fact_sheets.T;
                }
            }
            if (fact_sheets.NIL != fact_sheets.$stop_fact_sheet_update_after_current_termP$.getGlobalValue()) {
                stopP = (SubLObject)fact_sheets.T;
            }
            fort = (SubLObject)fact_sheets.NIL;
        }
        return Values.values(done_count, stopP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 199882L)
    public static SubLObject update_fact_sheet_for_term_with_logging(final SubLObject fort, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
        if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
            PrintLow.format(stream, (SubLObject)fact_sheets.$str630$Updating__S, fort);
            streams_high.force_output(stream);
        }
        SubLObject error_message = (SubLObject)fact_sheets.NIL;
        SubLObject time = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = Errors.$continue_cerrorP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_error.$pph_error_handling_onP$.currentBinding(thread);
        try {
            Errors.$continue_cerrorP$.bind((SubLObject)fact_sheets.NIL, thread);
            pph_error.$pph_error_handling_onP$.bind((SubLObject)fact_sheets.T, thread);
            if (fact_sheets.NIL != pph_error.pph_break_on_errorP()) {
                final SubLObject time_var = Time.get_internal_real_time();
                update_fact_sheet_for_term(fort, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
                final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream2 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream2))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream2);
                    PrintLow.format(stream2, (SubLObject)fact_sheets.$str631$Finished_fact_sheet_for__S_in__5F, fort, time);
                    streams_high.force_output(stream2);
                }
                fact_sheet_logs.add_fact_sheet_info_to_hourly_stats(fort);
            }
            else {
                try {
                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                    final SubLObject _prev_bind_0_$410 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                        try {
                            final SubLObject time_var2 = Time.get_internal_real_time();
                            update_fact_sheet_for_term(fort, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                            time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var2), time_high.$internal_time_units_per_second$.getGlobalValue());
                            final SubLObject stream2 = fact_sheet_logs.fact_sheet_log_stream();
                            if ((fact_sheets.T == stream2 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream2.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream2))) {
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream2);
                                PrintLow.format(stream2, (SubLObject)fact_sheets.$str631$Finished_fact_sheet_for__S_in__5F, fort, time);
                                streams_high.force_output(stream2);
                            }
                            fact_sheet_logs.add_fact_sheet_info_to_hourly_stats(fort);
                        }
                        catch (Throwable catch_var) {
                            Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_0_$410, thread);
                    }
                }
                catch (Throwable ccatch_env_var) {
                    error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                }
                finally {
                    thread.throwStack.pop();
                }
                if (error_message.isString() && fact_sheets.NIL == pph_error.suppress_pph_warningsP()) {
                    Errors.warn(Sequences.cconcatenate(pph_error_message_truncator.truncate_pph_error_message(error_message), (SubLObject)fact_sheets.$str270$___Top_level_CycL___S), pph_vars.pph_top_level_cycl());
                }
            }
        }
        finally {
            pph_error.$pph_error_handling_onP$.rebind(_prev_bind_2, thread);
            Errors.$continue_cerrorP$.rebind(_prev_bind_0, thread);
        }
        if (fact_sheets.NIL != error_message) {
            final SubLObject stream3 = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream3 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream3.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream3))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream3);
                PrintLow.format(stream3, error_message);
                streams_high.force_output(stream3);
            }
        }
        fact_sheet_logs.maybe_log_fact_sheet_hourly_report();
        return fort;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 200435L)
    public static SubLObject possibly_update_fact_sheet_for_term(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
        SubLObject updatedP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != term_ok_for_fact_sheet_p(v_term, Equality.eq(verbosity, (SubLObject)fact_sheets.$kw97$MINI)) && (fact_sheets.NIL == fact_sheet_up_to_dateP(v_term, verbosity, domain_mt, language_mt) || fact_sheets.NIL != fact_sheet_too_shortP(v_term, verbosity, domain_mt, language_mt))) {
            update_fact_sheet_for_term(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            updatedP = (SubLObject)fact_sheets.T;
        }
        return updatedP;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 200978L)
    public static SubLObject fact_sheet_query_soft_timeout_time_reachedP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject timeout_time = fact_sheets.$fact_sheet_query_soft_timeout_time$.getDynamicValue(thread);
        return (SubLObject)((fact_sheets.NIL != timeout_time) ? Numbers.numGE(Time.get_universal_time(), timeout_time) : fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 201175L)
    public static SubLObject fact_sheet_query_soft_timeout_time_left() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject timeout_time = fact_sheets.$fact_sheet_query_soft_timeout_time$.getDynamicValue(thread);
        return (SubLObject)((fact_sheets.NIL != timeout_time) ? Numbers.subtract(timeout_time, Time.get_universal_time()) : fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 201367L)
    public static SubLObject compute_fact_sheet_query_soft_timeout_time(final SubLObject max_time) {
        return (SubLObject)((fact_sheets.NIL != max_time) ? Numbers.add(Time.get_universal_time(), Numbers.integerDivide(max_time, (SubLObject)fact_sheets.TWO_INTEGER)) : fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 201576L)
    public static SubLObject fact_sheet_paraphrase_soft_timeout_time_reachedP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject timeout_time = fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$.getDynamicValue(thread);
        return (SubLObject)((fact_sheets.NIL != timeout_time) ? Numbers.numGE(Time.get_universal_time(), timeout_time) : fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 201783L)
    public static SubLObject fact_sheet_paraphrase_soft_timeout_time_left() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject timeout_time = fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$.getDynamicValue(thread);
        return (SubLObject)((fact_sheets.NIL != timeout_time) ? Numbers.subtract(timeout_time, Time.get_universal_time()) : fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 201985L)
    public static SubLObject compute_fact_sheet_paraphrase_soft_timeout_time(final SubLObject max_time) {
        return (SubLObject)((fact_sheets.NIL != max_time) ? Numbers.add(Time.get_universal_time(), max_time) : fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 202120L)
    public static SubLObject update_fact_sheet_for_term(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject max_time, SubLObject make_upP) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (max_time == fact_sheets.UNPROVIDED) {
            max_time = (SubLObject)fact_sheets.NIL;
        }
        if (make_upP == fact_sheets.UNPROVIDED) {
            make_upP = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != fact_sheet_verbosity_p(verbosity) : verbosity;
        if (domain_mt == fact_sheets.$kw70$DEFAULT) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.$kw70$DEFAULT) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        SubLObject error_message = (SubLObject)fact_sheets.NIL;
        Label_0389: {
            if (fact_sheets.NIL == make_upP) {
                if (fact_sheets.NIL == fact_sheets.$catch_fact_sheet_errorsP$.getDynamicValue(thread)) {
                    if (verbosity.eql((SubLObject)fact_sheets.$kw97$MINI)) {
                        update_mini_fact_sheet_for_term(v_term, domain_mt, language_mt);
                        break Label_0389;
                    }
                    update_fact_sheet_data_for_term(v_term, (SubLObject)((verbosity == fact_sheets.$kw67$PUBLIC) ? fact_sheets.$kw35$NORMAL : verbosity), domain_mt, language_mt, max_time, make_upP);
                    break Label_0389;
                }
            }
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)fact_sheets.$sym201$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        if (verbosity.eql((SubLObject)fact_sheets.$kw97$MINI)) {
                            update_mini_fact_sheet_for_term(v_term, domain_mt, language_mt);
                        }
                        else {
                            update_fact_sheet_data_for_term(v_term, (SubLObject)((verbosity == fact_sheets.$kw67$PUBLIC) ? fact_sheets.$kw35$NORMAL : verbosity), domain_mt, language_mt, max_time, make_upP);
                        }
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)fact_sheets.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
        }
        if (error_message.isString()) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str632$Caught_error_while_updating__S_fa, new SubLObject[] { verbosity, v_term, error_message });
                streams_high.force_output(stream);
            }
            remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 203232L)
    public static SubLObject update_mini_fact_sheet_for_term(final SubLObject v_term, SubLObject domain_mt, SubLObject language_mt) {
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (domain_mt == fact_sheets.$kw70$DEFAULT) {
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.$kw70$DEFAULT) {
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        note_fact_sheet_under_construction(v_term, (SubLObject)fact_sheets.$kw97$MINI, domain_mt, language_mt);
        SubLObject current;
        final SubLObject datum = current = get_mini_fact_sheet_for_term_in_html(v_term, domain_mt, language_mt);
        SubLObject html = (SubLObject)fact_sheets.NIL;
        SubLObject formatting_guidelines = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list633);
        html = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list633);
        formatting_guidelines = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            write_fact_sheet_html_and_formatting_guidelines(v_term, (SubLObject)fact_sheets.$kw97$MINI, domain_mt, language_mt, html, formatting_guidelines);
            note_fact_sheet_construction_done(v_term, (SubLObject)fact_sheets.$kw97$MINI, domain_mt, language_mt);
            return html;
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list633);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 203950L)
    public static SubLObject update_fact_sheet_data_for_term(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject max_time, final SubLObject make_upP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject fact_sheet_data = (SubLObject)fact_sheets.NIL;
        SubLObject stats = (SubLObject)fact_sheets.NIL;
        SubLObject footnotes = (SubLObject)fact_sheets.NIL;
        SubLObject formatting_guidelines = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = fact_sheets.$fact_sheet_query_soft_timeout_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$.currentBinding(thread);
        try {
            fact_sheets.$fact_sheet_query_soft_timeout_time$.bind(compute_fact_sheet_query_soft_timeout_time(max_time), thread);
            fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$.bind((SubLObject)((fact_sheets.NIL != max_time) ? Numbers.add(max_time, Time.get_universal_time()) : fact_sheets.NIL), thread);
            final SubLObject old_info = precached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.NIL);
            final SubLObject max_make_up_time = (SubLObject)fact_sheets.$int634$1800;
            SubLObject data_generation_completedP = (SubLObject)fact_sheets.NIL;
            SubLObject inference_error = (SubLObject)fact_sheets.NIL;
            try {
                note_fact_sheet_under_construction(v_term, verbosity, domain_mt, language_mt);
                clear_all_fact_sheet_caches();
                try {
                    thread.throwStack.push(fact_sheets.$kw395$FACT_SHEET_INFERENCE_ERROR);
                    final SubLObject datum_evaluated_var = generate_fact_sheet_data(v_term, verbosity, domain_mt, language_mt);
                    fact_sheet_data = datum_evaluated_var.first();
                    stats = conses_high.cadr(datum_evaluated_var);
                    footnotes = conses_high.cddr(datum_evaluated_var).first();
                    formatting_guidelines = conses_high.cadr(conses_high.cddr(datum_evaluated_var));
                }
                catch (Throwable ccatch_env_var) {
                    inference_error = Errors.handleThrowable(ccatch_env_var, (SubLObject)fact_sheets.$kw395$FACT_SHEET_INFERENCE_ERROR);
                }
                finally {
                    thread.throwStack.pop();
                }
                if (fact_sheets.NIL == inference_error) {
                    data_generation_completedP = (SubLObject)fact_sheets.T;
                }
            }
            finally {
                final SubLObject _prev_bind_0_$411 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (fact_sheets.NIL != inference_error) {
                        final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                            PrintLow.format(stream, (SubLObject)fact_sheets.$str635$Encountered_inference_error_while, v_term, inference_error);
                            streams_high.force_output(stream);
                        }
                    }
                    if (fact_sheets.NIL != data_generation_completedP) {
                        if (!verbosity.eql((SubLObject)fact_sheets.$kw67$PUBLIC)) {
                            write_fact_sheet_data_and_formatting_guidelines(v_term, verbosity, domain_mt, language_mt, fact_sheet_data, stats, footnotes, formatting_guidelines);
                        }
                        note_fact_sheet_construction_done(v_term, verbosity, domain_mt, language_mt);
                        remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.$str491$html);
                        if (fact_sheets.NIL != max_time && fact_sheets.NIL == inference_error && fact_sheets.NIL != fact_sheet_paraphrase_soft_timeout_time_reachedP() && fact_sheets.NIL == make_upP) {
                            launch_make_up_fact_sheet_updater_for_term(v_term, verbosity, domain_mt, language_mt, max_make_up_time, max_time);
                        }
                    }
                    else if (fact_sheets.NIL != old_info) {
                        SubLObject current;
                        final SubLObject datum = current = old_info;
                        SubLObject old_data = (SubLObject)fact_sheets.NIL;
                        SubLObject old_stats = (SubLObject)fact_sheets.NIL;
                        SubLObject old_footnotes = (SubLObject)fact_sheets.NIL;
                        SubLObject old_formatting_guidelines = (SubLObject)fact_sheets.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list636);
                        old_data = current.first();
                        current = current.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list636);
                        old_stats = current.first();
                        current = current.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list636);
                        old_footnotes = current.first();
                        current = current.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list636);
                        old_formatting_guidelines = current.first();
                        current = current.rest();
                        if (fact_sheets.NIL == current) {
                            if (fact_sheets.NIL != list_utilities.non_empty_list_p(old_data)) {
                                write_fact_sheet_data_and_formatting_guidelines(v_term, verbosity, domain_mt, language_mt, old_data, old_stats, old_footnotes, old_formatting_guidelines);
                            }
                            else {
                                remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                            }
                        }
                        else {
                            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list636);
                        }
                        if (fact_sheets.NIL == make_upP && fact_sheets.NIL == inference_error) {
                            launch_make_up_fact_sheet_updater_for_term(v_term, verbosity, domain_mt, language_mt, max_make_up_time, max_time);
                        }
                    }
                    else {
                        remove_any_cached_fact_sheet_data(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
                        if (fact_sheets.NIL == make_upP) {
                            launch_make_up_fact_sheet_updater_for_term(v_term, verbosity, domain_mt, language_mt, max_make_up_time, max_time);
                        }
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$411, thread);
                }
            }
        }
        finally {
            fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$.rebind(_prev_bind_2, thread);
            fact_sheets.$fact_sheet_query_soft_timeout_time$.rebind(_prev_bind_0, thread);
        }
        return Values.values(fact_sheet_data, stats, footnotes, formatting_guidelines);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 206687L)
    public static SubLObject launch_make_up_fact_sheet_updater_for_term(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject max_time, SubLObject old_max_time) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (max_time == fact_sheets.UNPROVIDED) {
            max_time = (SubLObject)fact_sheets.NIL;
        }
        if (old_max_time == fact_sheets.UNPROVIDED) {
            old_max_time = (SubLObject)fact_sheets.NIL;
        }
        final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
        if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
            PrintLow.format(stream, (SubLObject)fact_sheets.$str637$Launching_make_up_updater_for__S_, v_term, (SubLObject)((fact_sheets.NIL != old_max_time) ? Sequences.cconcatenate((SubLObject)fact_sheets.$str638$_Timed_out_after_, new SubLObject[] { format_nil.format_nil_s_no_copy(old_max_time), fact_sheets.$str639$_seconds__ }) : fact_sheets.$str640$_Didn_t_time_out__Probably_ran_in));
            streams_high.force_output(stream);
        }
        return process_utilities.make_cyc_server_process_with_args((SubLObject)fact_sheets.$str641$Fact_Sheet_Post_Timeout_Updater, Symbols.symbol_function((SubLObject)fact_sheets.$sym642$UPDATE_FACT_SHEET_FOR_TERM), (SubLObject)ConsesLow.list(v_term, verbosity, domain_mt, language_mt, max_time, (SubLObject)fact_sheets.T));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 207310L)
    public static SubLObject fact_sheet_too_shortP(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
        final SubLObject cached = cached_fact_sheet_data_for_term(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.NIL);
        return list_utilities.empty_list_p(cached.first());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 207532L)
    public static SubLObject fact_sheet_up_to_dateP(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (fact_sheets.NIL != term_ok_for_fact_sheet_p(v_term, (SubLObject)fact_sheets.UNPROVIDED)) {
            thread.resetMultipleValues();
            final SubLObject directory = directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject cached_filename = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (fact_sheets.NIL != file_utilities.file_existsP(cached_filename)) {
                SubLObject current;
                final SubLObject datum = current = cached_fact_sheet_save_date_and_second(cached_filename);
                SubLObject date = (SubLObject)fact_sheets.NIL;
                SubLObject second = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list643);
                date = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list643);
                second = current.first();
                current = current.rest();
                if (fact_sheets.NIL == current) {
                    if (fact_sheets.NIL == fact_sheet_term_modified_sinceP(v_term, date, second) && fact_sheets.NIL == fact_sheet_generator_modified_sinceP(date, second)) {
                        return (SubLObject)fact_sheets.T;
                    }
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list643);
                }
            }
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 208100L)
    public static SubLObject cached_fact_sheet_save_date_and_second(final SubLObject filename) {
        if (fact_sheets.NIL != file_utilities.file_existsP(filename)) {
            final SubLObject universal_time = Filesys.file_write_date(filename);
            final SubLObject date = numeric_date_utilities.get_universal_date(universal_time, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject second = numeric_date_utilities.get_universal_second(universal_time);
            return (SubLObject)ConsesLow.list(date, second);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 208400L)
    public static SubLObject fact_sheet_generator_modified_sinceP(final SubLObject date, final SubLObject second) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = (SubLObject)fact_sheets.NIL;
        SubLObject current;
        final SubLObject datum = current = fact_sheets.$fact_sheet_generator_update_date_and_second$.getDynamicValue(thread);
        SubLObject modified_date = (SubLObject)fact_sheets.NIL;
        SubLObject modified_second = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list644);
        modified_date = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list644);
        modified_second = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            if (fact_sheets.NIL != modified_date) {
                if (!modified_date.numL(date)) {
                    if (modified_date.numG(date)) {
                        ans = (SubLObject)fact_sheets.T;
                    }
                    else {
                        ans = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != modified_second && modified_second.numG(second));
                    }
                }
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list644);
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 208891L)
    public static SubLObject fact_sheet_term_modified_sinceP(final SubLObject v_term, final SubLObject date, final SubLObject second) {
        assert fact_sheets.NIL != term_ok_for_fact_sheet_p(v_term, (SubLObject)fact_sheets.UNPROVIDED) : v_term;
        SubLObject ans = (SubLObject)fact_sheets.NIL;
        final SubLObject pred_var = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(v_term, (SubLObject)fact_sheets.NIL, pred_var)) {
            final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(v_term, (SubLObject)fact_sheets.NIL, pred_var);
            SubLObject done_var = ans;
            final SubLObject token_var = (SubLObject)fact_sheets.NIL;
            while (fact_sheets.NIL == done_var) {
                final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                final SubLObject valid = (SubLObject)SubLObjectFactory.makeBoolean(!token_var.eql(final_index_spec));
                if (fact_sheets.NIL != valid) {
                    SubLObject final_index_iterator = (SubLObject)fact_sheets.NIL;
                    try {
                        final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, (SubLObject)fact_sheets.$kw441$GAF, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
                        SubLObject done_var_$412 = ans;
                        final SubLObject token_var_$413 = (SubLObject)fact_sheets.NIL;
                        while (fact_sheets.NIL == done_var_$412) {
                            final SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$413);
                            final SubLObject valid_$414 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$413.eql(gaf));
                            if (fact_sheets.NIL != valid_$414) {
                                final SubLObject modified_date = assertions_high.asserted_when(gaf);
                                if (fact_sheets.NIL != modified_date) {
                                    if (!modified_date.numL(date)) {
                                        if (modified_date.numG(date)) {
                                            ans = (SubLObject)fact_sheets.T;
                                        }
                                        else {
                                            final SubLObject modified_second = assertions_high.asserted_second(gaf);
                                            ans = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != modified_second && modified_second.numG(second));
                                        }
                                    }
                                }
                                if (fact_sheets.NIL != ans && fact_sheets.NIL != fort_types_interface.collection_p(v_term)) {
                                    final SubLObject formula = assertions_high.gaf_formula(gaf);
                                    if (fact_sheets.NIL != formula_pattern_match.formula_matches_pattern(formula, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$list645, (SubLObject)fact_sheets.$kw646$ANYTHING, v_term)) || fact_sheets.NIL != formula_pattern_match.formula_matches_pattern(formula, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$list647, (SubLObject)fact_sheets.$kw646$ANYTHING, (SubLObject)fact_sheets.$kw646$ANYTHING, v_term)) || fact_sheets.NIL != formula_pattern_match.formula_matches_pattern(formula, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$list648, (SubLObject)fact_sheets.$kw646$ANYTHING, v_term)) || fact_sheets.NIL != formula_pattern_match.formula_matches_pattern(formula, (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$list649, (SubLObject)fact_sheets.$kw646$ANYTHING, v_term))) {
                                        ans = (SubLObject)fact_sheets.NIL;
                                    }
                                }
                                if (fact_sheets.NIL != ans) {
                                    final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                                    if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                                        PrintLow.format(stream, (SubLObject)fact_sheets.$str650$_S_was_modified_on__S____New_GAF_, new SubLObject[] { v_term, modified_date, gaf });
                                        streams_high.force_output(stream);
                                    }
                                }
                            }
                            done_var_$412 = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == valid_$414 || fact_sheets.NIL != ans);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
                        try {
                            Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)fact_sheets.T);
                            final SubLObject _values = Values.getValuesAsVector();
                            if (fact_sheets.NIL != final_index_iterator) {
                                kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                            }
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
                        }
                    }
                }
                done_var = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == valid || fact_sheets.NIL != ans);
            }
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 210122L)
    public static SubLObject fact_sheet_formatting_guidelines_file(final SubLObject filename, SubLObject extension) {
        if (extension == fact_sheets.UNPROVIDED) {
            extension = (SubLObject)fact_sheets.$str491$html;
        }
        return Sequences.cconcatenate(string_utilities.post_remove(string_utilities.post_remove(filename, extension, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$str511$_, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$str651$_formatting_guidelines_cfasl);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 210325L)
    public static SubLObject fact_sheet_file_for_fact_sheet_term(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject directory = directory_and_filename_for_fact_sheet(v_term, (SubLObject)fact_sheets.$kw35$NORMAL, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.$str503$cfasl);
        final SubLObject filename = thread.secondMultipleValue();
        thread.resetMultipleValues();
        return filename;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 210561L)
    public static SubLObject directory_and_filename_for_fact_sheet(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject extension) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (extension == fact_sheets.UNPROVIDED) {
            extension = (SubLObject)(verbosity.eql((SubLObject)fact_sheets.$kw97$MINI) ? fact_sheets.$str491$html : fact_sheets.$str503$cfasl);
        }
        final SubLObject enable_reverse_lookupP = (SubLObject)fact_sheets.T;
        final SubLObject external_id_string = fact_sheet_term_id(v_term, enable_reverse_lookupP);
        return directory_and_filename_for_fact_sheet_from_id(external_id_string, verbosity, domain_mt, language_mt, v_term, extension);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 211034L)
    public static SubLObject directory_and_filename_for_fact_sheet_from_id(final SubLObject term_id, final SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject v_term, SubLObject extension) {
        if (v_term == fact_sheets.UNPROVIDED) {
            v_term = (SubLObject)fact_sheets.NIL;
        }
        if (extension == fact_sheets.UNPROVIDED) {
            extension = (SubLObject)fact_sheets.$str503$cfasl;
        }
        if (domain_mt == fact_sheets.$kw70$DEFAULT) {
            if (fact_sheets.NIL == v_term) {
                v_term = fact_sheet_term_from_id(term_id, (SubLObject)fact_sheets.UNPROVIDED);
            }
            domain_mt = fact_sheet_default_domain_mt_for_term(v_term);
        }
        if (language_mt == fact_sheets.$kw70$DEFAULT) {
            if (fact_sheets.NIL == v_term) {
                v_term = fact_sheet_term_from_id(term_id, (SubLObject)fact_sheets.UNPROVIDED);
            }
            language_mt = fact_sheet_default_language_mt_for_term(v_term);
        }
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(domain_mt) : domain_mt;
        assert fact_sheets.NIL != cycl_grammar.cycl_denotational_term_p(language_mt) : language_mt;
        final SubLObject directory_list = ConsesLow.append(fact_sheet_data_path(), (SubLObject)ConsesLow.list(Strings.string_downcase(print_high.princ_to_string(verbosity), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), fact_sheet_term_id(domain_mt, (SubLObject)fact_sheets.NIL), fact_sheet_term_id(language_mt, (SubLObject)fact_sheets.NIL), fact_sheet_term_id_file_preface(term_id)));
        final SubLObject directory = fact_sheet_directory_from_list(directory_list);
        final SubLObject filename = Sequences.cconcatenate(directory, new SubLObject[] { term_id, fact_sheets.$str511$_, extension });
        return Values.values(directory, filename);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 212070L)
    public static SubLObject fact_sheet_term_id_file_preface(final SubLObject term_id) {
        final SubLObject id_length = Sequences.length(term_id);
        final SubLObject last_3_digits = string_utilities.substring(term_id, Numbers.subtract(id_length, (SubLObject)fact_sheets.THREE_INTEGER), (SubLObject)fact_sheets.UNPROVIDED);
        return last_3_digits;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 212248L)
    public static SubLObject fact_sheet_term_from_filename(final SubLObject filename) {
        return Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ZERO_INTEGER), fact_sheet_data_from_filename(filename));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 212370L)
    public static SubLObject fact_sheet_data_from_filename(final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (fact_sheets.NIL != string_utilities.ends_with(filename, (SubLObject)fact_sheets.$str513$_html, (SubLObject)fact_sheets.UNPROVIDED) || fact_sheets.NIL != string_utilities.ends_with(filename, (SubLObject)fact_sheets.$str567$_cfasl, (SubLObject)fact_sheets.UNPROVIDED)) {
            thread.resetMultipleValues();
            final SubLObject path = file_utilities.deconstruct_path(filename);
            final SubLObject local_filename = thread.secondMultipleValue();
            thread.resetMultipleValues();
            final SubLObject term_id = string_utilities.post_remove(string_utilities.post_remove(local_filename, (SubLObject)fact_sheets.$str513$_html, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$str567$_cfasl, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject v_term = fact_sheet_term_from_id(term_id, (SubLObject)fact_sheets.UNPROVIDED);
            if (fact_sheets.NIL != list_utilities.lengthG(path, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.UNPROVIDED)) {
                thread.resetMultipleValues();
                final SubLObject verbosity = fact_sheet_data_from_path(path);
                final SubLObject domain_mt = thread.secondMultipleValue();
                final SubLObject language_mt = thread.thirdMultipleValue();
                thread.resetMultipleValues();
                return Values.values(v_term, verbosity, domain_mt, language_mt);
            }
        }
        return Values.values((SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 212936L)
    public static SubLObject fact_sheet_data_from_path(SubLObject path) {
        while (fact_sheets.NIL != list_utilities.non_empty_list_p(path) && fact_sheets.NIL == possible_fact_sheet_term_id_p(list_utilities.last_one(path))) {
            path = conses_high.butlast(path, (SubLObject)fact_sheets.UNPROVIDED);
        }
        if (fact_sheets.NIL != list_utilities.lengthG(path, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.UNPROVIDED)) {
            SubLObject current;
            final SubLObject datum = current = conses_high.last(path, (SubLObject)fact_sheets.THREE_INTEGER);
            SubLObject verbosity_string = (SubLObject)fact_sheets.NIL;
            SubLObject domain_mt_id = (SubLObject)fact_sheets.NIL;
            SubLObject language_mt_id = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list652);
            verbosity_string = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list652);
            domain_mt_id = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list652);
            language_mt_id = current.first();
            current = current.rest();
            if (fact_sheets.NIL == current) {
                final SubLObject verbosity = Packages.find_symbol(Strings.string_upcase(verbosity_string, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), Packages.find_package((SubLObject)fact_sheets.$str564$KEYWORD));
                final SubLObject domain_mt = fact_sheet_term_from_id(domain_mt_id, (SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject language_mt = fact_sheet_term_from_id(language_mt_id, (SubLObject)fact_sheets.UNPROVIDED);
                return Values.values(verbosity, domain_mt, language_mt);
            }
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list652);
        }
        return Values.values((SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 213541L)
    public static SubLObject clear_fact_sheet_directory_from_list() {
        final SubLObject cs = fact_sheets.$fact_sheet_directory_from_list_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 213541L)
    public static SubLObject remove_fact_sheet_directory_from_list(SubLObject directory_list) {
        if (directory_list == fact_sheets.UNPROVIDED) {
            directory_list = fact_sheet_data_path();
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_directory_from_list_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(directory_list), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 213541L)
    public static SubLObject fact_sheet_directory_from_list_internal(final SubLObject directory_list) {
        return Sequences.cconcatenate(string_utilities.bunge(directory_list, (SubLObject)Characters.CHAR_slash), (SubLObject)fact_sheets.$str500$_);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 213541L)
    public static SubLObject fact_sheet_directory_from_list(SubLObject directory_list) {
        if (directory_list == fact_sheets.UNPROVIDED) {
            directory_list = fact_sheet_data_path();
        }
        SubLObject caching_state = fact_sheets.$fact_sheet_directory_from_list_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym653$FACT_SHEET_DIRECTORY_FROM_LIST, (SubLObject)fact_sheets.$sym654$_FACT_SHEET_DIRECTORY_FROM_LIST_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, directory_list, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_directory_from_list_internal(directory_list)));
            memoization_state.caching_state_put(caching_state, directory_list, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fact_sheet_update_term_prioritizer_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        pprint_fsut_prioritizer(v_object, stream, (SubLObject)fact_sheets.ZERO_INTEGER);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fact_sheet_update_term_prioritizer_p(final SubLObject v_object) {
        return (SubLObject)((v_object.getClass() == $fact_sheet_update_term_prioritizer_native.class) ? fact_sheets.T : fact_sheets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fsut_prioritizer_stale_terms(final SubLObject v_object) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.getField2();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fsut_prioritizer_missing_terms(final SubLObject v_object) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.getField3();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fsut_prioritizer_up_to_date_terms(final SubLObject v_object) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.getField4();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fsut_prioritizer_thread(final SubLObject v_object) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.getField5();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fsut_prioritizer_should_sleepP(final SubLObject v_object) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.getField6();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fsut_prioritizer_verbosity(final SubLObject v_object) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.getField7();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fsut_prioritizer_domain_mt(final SubLObject v_object) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.getField8();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fsut_prioritizer_language_mt(final SubLObject v_object) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.getField9();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fsut_prioritizer_nice_level(final SubLObject v_object) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.getField10();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject fsut_prioritizer_new_days(final SubLObject v_object) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.getField11();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject _csetf_fsut_prioritizer_stale_terms(final SubLObject v_object, final SubLObject value) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.setField2(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject _csetf_fsut_prioritizer_missing_terms(final SubLObject v_object, final SubLObject value) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.setField3(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject _csetf_fsut_prioritizer_up_to_date_terms(final SubLObject v_object, final SubLObject value) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.setField4(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject _csetf_fsut_prioritizer_thread(final SubLObject v_object, final SubLObject value) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.setField5(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject _csetf_fsut_prioritizer_should_sleepP(final SubLObject v_object, final SubLObject value) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.setField6(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject _csetf_fsut_prioritizer_verbosity(final SubLObject v_object, final SubLObject value) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.setField7(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject _csetf_fsut_prioritizer_domain_mt(final SubLObject v_object, final SubLObject value) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.setField8(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject _csetf_fsut_prioritizer_language_mt(final SubLObject v_object, final SubLObject value) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.setField9(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject _csetf_fsut_prioritizer_nice_level(final SubLObject v_object, final SubLObject value) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.setField10(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject _csetf_fsut_prioritizer_new_days(final SubLObject v_object, final SubLObject value) {
        assert fact_sheets.NIL != fact_sheet_update_term_prioritizer_p(v_object) : v_object;
        return v_object.setField11(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject make_fact_sheet_update_term_prioritizer(SubLObject arglist) {
        if (arglist == fact_sheets.UNPROVIDED) {
            arglist = (SubLObject)fact_sheets.NIL;
        }
        final SubLObject v_new = (SubLObject)new $fact_sheet_update_term_prioritizer_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = (SubLObject)fact_sheets.NIL, next = arglist; fact_sheets.NIL != next; next = conses_high.cddr(next)) {
            current_arg = next.first();
            current_value = conses_high.cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql((SubLObject)fact_sheets.$kw684$STALE_TERMS)) {
                _csetf_fsut_prioritizer_stale_terms(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)fact_sheets.$kw685$MISSING_TERMS)) {
                _csetf_fsut_prioritizer_missing_terms(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)fact_sheets.$kw686$UP_TO_DATE_TERMS)) {
                _csetf_fsut_prioritizer_up_to_date_terms(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)fact_sheets.$kw687$THREAD)) {
                _csetf_fsut_prioritizer_thread(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)fact_sheets.$kw688$SHOULD_SLEEP_)) {
                _csetf_fsut_prioritizer_should_sleepP(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)fact_sheets.$kw689$VERBOSITY)) {
                _csetf_fsut_prioritizer_verbosity(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)fact_sheets.$kw690$DOMAIN_MT)) {
                _csetf_fsut_prioritizer_domain_mt(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)fact_sheets.$kw691$LANGUAGE_MT)) {
                _csetf_fsut_prioritizer_language_mt(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)fact_sheets.$kw692$NICE_LEVEL)) {
                _csetf_fsut_prioritizer_nice_level(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)fact_sheets.$kw693$NEW_DAYS)) {
                _csetf_fsut_prioritizer_new_days(v_new, current_value);
            }
            else {
                Errors.error((SubLObject)fact_sheets.$str694$Invalid_slot__S_for_construction_, current_arg);
            }
        }
        return v_new;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject visit_defstruct_fact_sheet_update_term_prioritizer(final SubLObject obj, final SubLObject visitor_fn) {
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw695$BEGIN, (SubLObject)fact_sheets.$sym696$MAKE_FACT_SHEET_UPDATE_TERM_PRIORITIZER, (SubLObject)fact_sheets.TEN_INTEGER);
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw697$SLOT, (SubLObject)fact_sheets.$kw684$STALE_TERMS, fsut_prioritizer_stale_terms(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw697$SLOT, (SubLObject)fact_sheets.$kw685$MISSING_TERMS, fsut_prioritizer_missing_terms(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw697$SLOT, (SubLObject)fact_sheets.$kw686$UP_TO_DATE_TERMS, fsut_prioritizer_up_to_date_terms(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw697$SLOT, (SubLObject)fact_sheets.$kw687$THREAD, fsut_prioritizer_thread(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw697$SLOT, (SubLObject)fact_sheets.$kw688$SHOULD_SLEEP_, fsut_prioritizer_should_sleepP(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw697$SLOT, (SubLObject)fact_sheets.$kw689$VERBOSITY, fsut_prioritizer_verbosity(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw697$SLOT, (SubLObject)fact_sheets.$kw690$DOMAIN_MT, fsut_prioritizer_domain_mt(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw697$SLOT, (SubLObject)fact_sheets.$kw691$LANGUAGE_MT, fsut_prioritizer_language_mt(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw697$SLOT, (SubLObject)fact_sheets.$kw692$NICE_LEVEL, fsut_prioritizer_nice_level(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw697$SLOT, (SubLObject)fact_sheets.$kw693$NEW_DAYS, fsut_prioritizer_new_days(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)fact_sheets.$kw698$END, (SubLObject)fact_sheets.$sym696$MAKE_FACT_SHEET_UPDATE_TERM_PRIORITIZER, (SubLObject)fact_sheets.TEN_INTEGER);
        return obj;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214202L)
    public static SubLObject visit_defstruct_object_fact_sheet_update_term_prioritizer_method(final SubLObject obj, final SubLObject visitor_fn) {
        return visit_defstruct_fact_sheet_update_term_prioritizer(obj, visitor_fn);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214471L)
    public static SubLObject pprint_fsut_prioritizer(final SubLObject fsut_prioritizer, SubLObject stream, SubLObject depth) {
        if (stream == fact_sheets.UNPROVIDED) {
            stream = (SubLObject)fact_sheets.NIL;
        }
        if (depth == fact_sheets.UNPROVIDED) {
            depth = (SubLObject)fact_sheets.NIL;
        }
        PrintLow.format(stream, (SubLObject)fact_sheets.$str700$__PRIORITIZER_stale__S_missing__S, new SubLObject[] { queues.p_queue_size(fsut_prioritizer_stale_terms(fsut_prioritizer)), queues.p_queue_size(fsut_prioritizer_missing_terms(fsut_prioritizer)), queues.p_queue_size(fsut_prioritizer_up_to_date_terms(fsut_prioritizer)) });
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 214942L)
    public static SubLObject register_fsut_prioritizer(final SubLObject prioritizer) {
        final SubLObject key = (SubLObject)ConsesLow.list(fsut_prioritizer_verbosity(prioritizer), fsut_prioritizer_domain_mt(prioritizer), fsut_prioritizer_language_mt(prioritizer), fsut_prioritizer_new_days(prioritizer));
        dictionary.dictionary_enter(fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue(), key, prioritizer);
        return fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 215338L)
    public static SubLObject all_fact_sheet_update_term_prioritizers() {
        return dictionary.dictionary_values(fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 215465L)
    public static SubLObject find_fsut_prioritizer(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject new_days) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (new_days == fact_sheets.UNPROVIDED) {
            new_days = fsut_prioritizer_default_new_days();
        }
        final SubLObject key = (SubLObject)ConsesLow.list(verbosity, domain_mt, language_mt, new_days);
        return dictionary.dictionary_lookup(fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue(), key, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 215809L)
    public static SubLObject find_or_create_fact_sheet_update_term_prioritizer(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject new_days) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (new_days == fact_sheets.UNPROVIDED) {
            new_days = fsut_prioritizer_default_new_days();
        }
        final SubLObject existing = find_fsut_prioritizer(verbosity, domain_mt, language_mt, new_days);
        return (fact_sheets.NIL != existing) ? existing : new_fact_sheet_update_term_prioritizer(verbosity, domain_mt, language_mt, new_days, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 216461L)
    public static SubLObject fsut_prioritizer_max_nice_level() {
        return fact_sheets.$fsut_prioritizer_max_nice_level$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 216634L)
    public static SubLObject fsut_prioritizer_min_nice_level() {
        return fact_sheets.$fsut_prioritizer_min_nice_level$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 216790L)
    public static SubLObject fsut_prioritizer_default_new_days() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return fact_sheets.$fsut_prioritizer_default_new_days$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 216888L)
    public static SubLObject new_fact_sheet_update_term_prioritizer(SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject nice_level, SubLObject new_days) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (nice_level == fact_sheets.UNPROVIDED) {
            nice_level = fact_sheets.$fsut_prioritizer_default_nice_level$.getDynamicValue();
        }
        if (new_days == fact_sheets.UNPROVIDED) {
            new_days = fsut_prioritizer_default_new_days();
        }
        final SubLObject prioritizer = make_fact_sheet_update_term_prioritizer((SubLObject)fact_sheets.UNPROVIDED);
        _csetf_fsut_prioritizer_stale_terms(prioritizer, queues.create_p_queue((SubLObject)fact_sheets.$int703$1000, Symbols.symbol_function((SubLObject)fact_sheets.$sym704$FSUT_PRIORITIZER_QUEUE_RANK_FUNC), Symbols.symbol_function((SubLObject)fact_sheets.$sym705$FSUT_PRIORITIZER_QUEUE_COMP_FUNC)));
        _csetf_fsut_prioritizer_missing_terms(prioritizer, queues.create_p_queue((SubLObject)fact_sheets.$int703$1000, Symbols.symbol_function((SubLObject)fact_sheets.$sym704$FSUT_PRIORITIZER_QUEUE_RANK_FUNC), Symbols.symbol_function((SubLObject)fact_sheets.$sym705$FSUT_PRIORITIZER_QUEUE_COMP_FUNC)));
        _csetf_fsut_prioritizer_up_to_date_terms(prioritizer, queues.create_p_queue((SubLObject)fact_sheets.$int703$1000, Symbols.symbol_function((SubLObject)fact_sheets.$sym704$FSUT_PRIORITIZER_QUEUE_RANK_FUNC), Symbols.symbol_function((SubLObject)fact_sheets.$sym705$FSUT_PRIORITIZER_QUEUE_COMP_FUNC)));
        _csetf_fsut_prioritizer_verbosity(prioritizer, verbosity);
        _csetf_fsut_prioritizer_domain_mt(prioritizer, domain_mt);
        _csetf_fsut_prioritizer_language_mt(prioritizer, language_mt);
        _csetf_fsut_prioritizer_nice_level(prioritizer, nice_level);
        _csetf_fsut_prioritizer_new_days(prioritizer, new_days);
        register_fsut_prioritizer(prioritizer);
        start_fsut_prioritizer(prioritizer);
        return prioritizer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 218125L)
    public static SubLObject fsut_prioritizer_queue_rank_func(final SubLObject item) {
        if (item.isCons()) {
            return item.rest();
        }
        final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
        if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
            PrintLow.format(stream, (SubLObject)fact_sheets.$str706$Non_cons_item_in_prioritizer_queu, item);
            streams_high.force_output(stream);
        }
        return item;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 218337L)
    public static SubLObject fsut_prioritizer_queue_comp_func(final SubLObject priority1, final SubLObject priority2) {
        if (fact_sheets.NIL == subl_promotions.non_negative_integer_p(priority1)) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str707$Non_non_negative_integer_priority, priority1);
                streams_high.force_output(stream);
            }
            return (SubLObject)fact_sheets.NIL;
        }
        if (fact_sheets.NIL == subl_promotions.non_negative_integer_p(priority2)) {
            final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str707$Non_non_negative_integer_priority, priority2);
                streams_high.force_output(stream);
            }
            return (SubLObject)fact_sheets.NIL;
        }
        return Numbers.numG(priority1, priority2);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 218791L)
    public static SubLObject renice_fsut_prioritizer(final SubLObject prioritizer, SubLObject nice_level) {
        if (nice_level == fact_sheets.UNPROVIDED) {
            nice_level = fact_sheets.$fsut_prioritizer_default_nice_level$.getDynamicValue();
        }
        _csetf_fsut_prioritizer_nice_level(prioritizer, nice_level);
        start_fsut_prioritizer(prioritizer);
        return prioritizer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 219041L)
    public static SubLObject start_fsut_prioritizer(final SubLObject prioritizer) {
        SubLObject thread = fsut_prioritizer_thread(prioritizer);
        _csetf_fsut_prioritizer_should_sleepP(prioritizer, (SubLObject)fact_sheets.NIL);
        if (fact_sheets.NIL == Threads.valid_process_p(thread)) {
            thread = process_utilities.make_cyc_server_process_with_args((SubLObject)fact_sheets.$str708$Fact_Sheet_Prioritizer, (SubLObject)fact_sheets.$sym709$FSUT_PRIORITIZER_PLACE_TERMS, (SubLObject)ConsesLow.list(prioritizer));
            _csetf_fsut_prioritizer_thread(prioritizer, thread);
        }
        return thread;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 219477L)
    public static SubLObject stop_all_fsut_prioritizers() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue())); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject key = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject prioritizer = thread.secondMultipleValue();
            thread.resetMultipleValues();
            stop_fsut_prioritizer(prioritizer);
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        return (SubLObject)fact_sheets.$kw710$STOPPED;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 219659L)
    public static SubLObject stop_fsut_prioritizer(final SubLObject prioritizer) {
        _csetf_fsut_prioritizer_should_sleepP(prioritizer, (SubLObject)fact_sheets.T);
        return prioritizer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 219790L)
    public static SubLObject fsut_prioritizer_next_term(final SubLObject prioritizer, SubLObject end_hour) {
        if (end_hour == fact_sheets.UNPROVIDED) {
            end_hour = (SubLObject)fact_sheets.NIL;
        }
        final SubLObject missing_weight = (SubLObject)fact_sheets.$int580$50;
        final SubLObject stale_weight = (SubLObject)fact_sheets.FIVE_INTEGER;
        final SubLObject up_to_date_weight = (SubLObject)fact_sheets.ONE_INTEGER;
        SubLObject v_term = (SubLObject)fact_sheets.NIL;
        SubLObject stopP = (SubLObject)fact_sheets.NIL;
        final SubLObject verbosity = fsut_prioritizer_verbosity(prioritizer);
        final SubLObject domain_mt = fsut_prioritizer_domain_mt(prioritizer);
        final SubLObject language_mt = fsut_prioritizer_language_mt(prioritizer);
        final SubLObject min_terms = (SubLObject)fact_sheets.$int711$100;
        if (fact_sheets.NIL != fsut_prioritizer_empty_p(prioritizer, min_terms)) {
            if (fact_sheets.NIL != fsut_prioritizer_should_sleepP(prioritizer)) {
                start_fsut_prioritizer(prioritizer);
            }
            while (fact_sheets.NIL != fsut_prioritizer_empty_p(prioritizer, min_terms)) {
                Threads.sleep((SubLObject)fact_sheets.ONE_INTEGER);
            }
        }
        while (fact_sheets.NIL == v_term && fact_sheets.NIL == stopP) {
            if (fact_sheets.NIL != end_hour && fact_sheets.NIL != time_of_day_has_arrivedP((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER, end_hour)) {
                stopP = (SubLObject)fact_sheets.T;
            }
            final SubLObject dice_roll = random.random(Numbers.add(missing_weight, stale_weight, up_to_date_weight));
            if (dice_roll.numL(up_to_date_weight) && fact_sheets.NIL == queues.p_queue_empty_p(fsut_prioritizer_up_to_date_terms(prioritizer))) {
                v_term = fsut_prioritizer_next_up_to_date_term(prioritizer);
            }
            else if (dice_roll.numL(Numbers.add(stale_weight, up_to_date_weight)) && fact_sheets.NIL == queues.p_queue_empty_p(fsut_prioritizer_stale_terms(prioritizer))) {
                v_term = fsut_prioritizer_next_stale_term(prioritizer);
            }
            else if (fact_sheets.NIL == queues.p_queue_empty_p(fsut_prioritizer_missing_terms(prioritizer))) {
                v_term = fsut_prioritizer_next_missing_term(prioritizer);
            }
            else if (fact_sheets.NIL == queues.p_queue_empty_p(fsut_prioritizer_stale_terms(prioritizer))) {
                v_term = fsut_prioritizer_next_stale_term(prioritizer);
            }
            else {
                v_term = fsut_prioritizer_next_up_to_date_term(prioritizer);
            }
            if (fact_sheets.NIL == v_term) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str712$Had_trouble_getting_a_term_from__, prioritizer);
                    streams_high.force_output(stream);
                }
                if (fact_sheets.NIL != fsut_prioritizer_should_sleepP(prioritizer)) {
                    start_fsut_prioritizer(prioritizer);
                }
                while (fact_sheets.NIL != fsut_prioritizer_empty_p(prioritizer, min_terms)) {
                    Threads.sleep((SubLObject)fact_sheets.ONE_INTEGER);
                }
            }
            else {
                if (fact_sheets.NIL == fact_sheet_term_update_already_undertakenP(v_term, verbosity, domain_mt, language_mt)) {
                    continue;
                }
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str713$Skipping__S__Update_already_under, v_term);
                    streams_high.force_output(stream);
                }
                v_term = (SubLObject)fact_sheets.NIL;
            }
        }
        return v_term;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 221791L)
    public static SubLObject fsut_prioritizer_empty_p(final SubLObject prioritizer, SubLObject min_terms) {
        if (min_terms == fact_sheets.UNPROVIDED) {
            min_terms = (SubLObject)fact_sheets.ONE_INTEGER;
        }
        return Numbers.numL(Numbers.add(queues.p_queue_size(fsut_prioritizer_stale_terms(prioritizer)), queues.p_queue_size(fsut_prioritizer_up_to_date_terms(prioritizer)), queues.p_queue_size(fsut_prioritizer_missing_terms(prioritizer))), min_terms);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 222094L)
    public static SubLObject fsut_prioritizer_next_stale_term(final SubLObject prioritizer) {
        final SubLObject verbosity = fsut_prioritizer_verbosity(prioritizer);
        final SubLObject domain_mt = fsut_prioritizer_domain_mt(prioritizer);
        final SubLObject language_mt = fsut_prioritizer_language_mt(prioritizer);
        final SubLObject pq = fsut_prioritizer_stale_terms(prioritizer);
        while (fact_sheets.NIL == queues.p_queue_empty_p(pq)) {
            final SubLObject item = queues.p_dequeue(pq, (SubLObject)fact_sheets.UNPROVIDED);
            SubLObject current;
            final SubLObject datum = current = item;
            SubLObject v_term = (SubLObject)fact_sheets.NIL;
            SubLObject priority = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list714);
            v_term = current.first();
            current = (priority = current.rest());
            if (fact_sheet_status(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED) == fact_sheets.$kw715$STALE) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str716$Dequeuing__S__Status__stale__Prio, v_term, priority);
                    streams_high.force_output(stream);
                }
                return v_term;
            }
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 222701L)
    public static SubLObject fsut_prioritizer_next_missing_term(final SubLObject prioritizer) {
        final SubLObject verbosity = fsut_prioritizer_verbosity(prioritizer);
        final SubLObject domain_mt = fsut_prioritizer_domain_mt(prioritizer);
        final SubLObject language_mt = fsut_prioritizer_language_mt(prioritizer);
        final SubLObject pq = fsut_prioritizer_missing_terms(prioritizer);
        while (fact_sheets.NIL == queues.p_queue_empty_p(pq)) {
            final SubLObject item = queues.p_dequeue(pq, (SubLObject)fact_sheets.UNPROVIDED);
            SubLObject current;
            final SubLObject datum = current = item;
            SubLObject v_term = (SubLObject)fact_sheets.NIL;
            SubLObject priority = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list714);
            v_term = current.first();
            current = (priority = current.rest());
            if (fact_sheet_status(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED) == fact_sheets.$kw717$MISSING) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str718$Dequeuing__S__Status__missing__Pr, v_term, priority);
                    streams_high.force_output(stream);
                }
                return v_term;
            }
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 223316L)
    public static SubLObject fsut_prioritizer_next_up_to_date_term(final SubLObject prioritizer) {
        final SubLObject verbosity = fsut_prioritizer_verbosity(prioritizer);
        final SubLObject domain_mt = fsut_prioritizer_domain_mt(prioritizer);
        final SubLObject language_mt = fsut_prioritizer_language_mt(prioritizer);
        final SubLObject pq = fsut_prioritizer_up_to_date_terms(prioritizer);
        while (fact_sheets.NIL == queues.p_queue_empty_p(pq)) {
            final SubLObject item = queues.p_dequeue(pq, (SubLObject)fact_sheets.UNPROVIDED);
            SubLObject current;
            final SubLObject datum = current = item;
            SubLObject v_term = (SubLObject)fact_sheets.NIL;
            SubLObject priority = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list714);
            v_term = current.first();
            current = (priority = current.rest());
            if (fact_sheet_status(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED) == fact_sheets.$kw719$UP_TO_DATE) {
                final SubLObject stream = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream && Threads.current_process().eql(subl_promotions.initial_process())) || (stream.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream);
                    PrintLow.format(stream, (SubLObject)fact_sheets.$str720$Dequeuing__S__Status__up_to_date_, v_term, priority);
                    streams_high.force_output(stream);
                }
                return v_term;
            }
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 223996L)
    public static SubLObject clear_fsut_prioritizer_sleep_interval_from_nice_level() {
        final SubLObject cs = fact_sheets.$fsut_prioritizer_sleep_interval_from_nice_level_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 223996L)
    public static SubLObject remove_fsut_prioritizer_sleep_interval_from_nice_level(final SubLObject nice_level, SubLObject divisor) {
        if (divisor == fact_sheets.UNPROVIDED) {
            divisor = fact_sheets.$fsut_prioritizer_divisor$.getGlobalValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fsut_prioritizer_sleep_interval_from_nice_level_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(nice_level, divisor), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 223996L)
    public static SubLObject fsut_prioritizer_sleep_interval_from_nice_level_internal(final SubLObject nice_level, final SubLObject divisor) {
        return Numbers.divide(Numbers.add((SubLObject)fact_sheets.TWENTY_INTEGER, nice_level), divisor);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 223996L)
    public static SubLObject fsut_prioritizer_sleep_interval_from_nice_level(final SubLObject nice_level, SubLObject divisor) {
        if (divisor == fact_sheets.UNPROVIDED) {
            divisor = fact_sheets.$fsut_prioritizer_divisor$.getGlobalValue();
        }
        SubLObject caching_state = fact_sheets.$fsut_prioritizer_sleep_interval_from_nice_level_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym721$FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL, (SubLObject)fact_sheets.$sym722$_FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQ, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.$int723$40);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(nice_level, divisor);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (nice_level.eql(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && divisor.eql(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fsut_prioritizer_sleep_interval_from_nice_level_internal(nice_level, divisor)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(nice_level, divisor));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 224256L)
    public static SubLObject fsut_prioritizer_place_terms(final SubLObject prioritizer) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$silent_progressP$.bind((SubLObject)fact_sheets.T, thread);
            while (true) {
                final SubLObject message = (SubLObject)fact_sheets.$str724$mapping_Cyc_FORTs;
                final SubLObject total = forts.fort_count();
                SubLObject sofar = (SubLObject)fact_sheets.ZERO_INTEGER;
                final SubLObject _prev_bind_0_$415 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                try {
                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                    try {
                        utilities_macros.noting_percent_progress_preamble(message);
                        SubLObject cdolist_list_var = forts.do_forts_tables();
                        SubLObject table_var = (SubLObject)fact_sheets.NIL;
                        table_var = cdolist_list_var.first();
                        while (fact_sheets.NIL != cdolist_list_var) {
                            final SubLObject idx = table_var;
                            if (fact_sheets.NIL == id_index.id_index_objects_empty_p(idx, (SubLObject)fact_sheets.$kw603$SKIP)) {
                                final SubLObject idx_$416 = idx;
                                if (fact_sheets.NIL == id_index.id_index_dense_objects_empty_p(idx_$416, (SubLObject)fact_sheets.$kw603$SKIP)) {
                                    final SubLObject vector_var = id_index.id_index_dense_objects(idx_$416);
                                    final SubLObject backwardP_var = (SubLObject)fact_sheets.NIL;
                                    SubLObject length;
                                    SubLObject v_iteration;
                                    SubLObject id;
                                    SubLObject v_term;
                                    for (length = Sequences.length(vector_var), v_iteration = (SubLObject)fact_sheets.NIL, v_iteration = (SubLObject)fact_sheets.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)fact_sheets.ONE_INTEGER)) {
                                        id = ((fact_sheets.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)fact_sheets.ONE_INTEGER) : v_iteration);
                                        v_term = Vectors.aref(vector_var, id);
                                        if (fact_sheets.NIL == id_index.id_index_tombstone_p(v_term) || fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) {
                                            if (fact_sheets.NIL != id_index.id_index_tombstone_p(v_term)) {
                                                v_term = (SubLObject)fact_sheets.$kw603$SKIP;
                                            }
                                            sofar = Numbers.add(sofar, (SubLObject)fact_sheets.ONE_INTEGER);
                                            utilities_macros.note_percent_progress(sofar, total);
                                            while (fact_sheets.NIL != fsut_prioritizer_should_sleepP(prioritizer)) {
                                                Threads.sleep((SubLObject)fact_sheets.ONE_INTEGER);
                                            }
                                            if (fact_sheets.NIL != term_ok_for_fact_sheet_p(v_term, Equality.eq(fsut_prioritizer_verbosity(prioritizer), (SubLObject)fact_sheets.$kw97$MINI))) {
                                                fsut_prioritizer_place_term(v_term, prioritizer);
                                                Threads.sleep(fsut_prioritizer_sleep_interval_from_nice_level(fsut_prioritizer_nice_level(prioritizer), (SubLObject)fact_sheets.UNPROVIDED));
                                            }
                                        }
                                    }
                                }
                                final SubLObject idx_$417 = idx;
                                if (fact_sheets.NIL == id_index.id_index_sparse_objects_empty_p(idx_$417) || fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) {
                                    final SubLObject sparse = id_index.id_index_sparse_objects(idx_$417);
                                    SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$417);
                                    final SubLObject end_id = id_index.id_index_next_id(idx_$417);
                                    final SubLObject v_default = (SubLObject)((fact_sheets.NIL != id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) ? fact_sheets.NIL : fact_sheets.$kw603$SKIP);
                                    while (id2.numL(end_id)) {
                                        final SubLObject v_term2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                        if (fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP) || fact_sheets.NIL == id_index.id_index_tombstone_p(v_term2)) {
                                            sofar = Numbers.add(sofar, (SubLObject)fact_sheets.ONE_INTEGER);
                                            utilities_macros.note_percent_progress(sofar, total);
                                            while (fact_sheets.NIL != fsut_prioritizer_should_sleepP(prioritizer)) {
                                                Threads.sleep((SubLObject)fact_sheets.ONE_INTEGER);
                                            }
                                            if (fact_sheets.NIL != term_ok_for_fact_sheet_p(v_term2, Equality.eq(fsut_prioritizer_verbosity(prioritizer), (SubLObject)fact_sheets.$kw97$MINI))) {
                                                fsut_prioritizer_place_term(v_term2, prioritizer);
                                                Threads.sleep(fsut_prioritizer_sleep_interval_from_nice_level(fsut_prioritizer_nice_level(prioritizer), (SubLObject)fact_sheets.UNPROVIDED));
                                            }
                                        }
                                        id2 = Numbers.add(id2, (SubLObject)fact_sheets.ONE_INTEGER);
                                    }
                                }
                            }
                            cdolist_list_var = cdolist_list_var.rest();
                            table_var = cdolist_list_var.first();
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$416 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            utilities_macros.noting_percent_progress_postamble();
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$416, thread);
                        }
                    }
                }
                finally {
                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$415, thread);
                }
            }
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 224733L)
    public static SubLObject fsut_prioritizer_place_term(final SubLObject v_term, final SubLObject prioritizer) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject verbosity = fsut_prioritizer_verbosity(prioritizer);
        final SubLObject domain_mt = fsut_prioritizer_domain_mt(prioritizer);
        final SubLObject language_mt = fsut_prioritizer_language_mt(prioritizer);
        thread.resetMultipleValues();
        final SubLObject status = fact_sheet_status(v_term, verbosity, domain_mt, language_mt, fsut_prioritizer_new_days(prioritizer));
        final SubLObject priority = thread.secondMultipleValue();
        thread.resetMultipleValues();
        final SubLObject pcase_var = status;
        if (pcase_var.eql((SubLObject)fact_sheets.$kw715$STALE)) {
            add_to_prioritizer_queue(v_term, priority, fsut_prioritizer_stale_terms(prioritizer));
        }
        else if (pcase_var.eql((SubLObject)fact_sheets.$kw717$MISSING)) {
            add_to_prioritizer_queue(v_term, priority, fsut_prioritizer_missing_terms(prioritizer));
        }
        else if (pcase_var.eql((SubLObject)fact_sheets.$kw719$UP_TO_DATE)) {
            add_to_prioritizer_queue(v_term, priority, fsut_prioritizer_up_to_date_terms(prioritizer));
        }
        return Values.values(status, priority);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 225485L)
    public static SubLObject add_to_prioritizer_queue(final SubLObject v_term, final SubLObject priority, final SubLObject queue) {
        assert fact_sheets.NIL != subl_promotions.non_negative_integer_p(priority) : priority;
        sanity_check_prioritizer_queue(queue);
        if (fact_sheets.NIL == queues.p_queue_find(v_term, queue, Symbols.symbol_function((SubLObject)fact_sheets.EQL), Symbols.symbol_function((SubLObject)fact_sheets.$sym153$CAR))) {
            queues.p_enqueue((SubLObject)ConsesLow.cons(v_term, priority), queue);
        }
        return queue;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 225745L)
    public static SubLObject sanity_check_prioritizer_queue(final SubLObject queue) {
        SubLObject stack = (SubLObject)fact_sheets.NIL;
        SubLObject subtree = queues.do_priority_queue_elements_btree(queue);
        while (fact_sheets.NIL != subtree) {
            final SubLObject key_var = binary_tree.do_btree_index_key(subtree);
            SubLObject cdolist_list_var;
            final SubLObject collisions_var = cdolist_list_var = binary_tree.do_btree_index_value(subtree);
            SubLObject item = (SubLObject)fact_sheets.NIL;
            item = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                if (!item.isCons()) {
                    Errors.error((SubLObject)fact_sheets.$str725$Non_cons_in_fact_sheet_prioritize, item);
                }
                cdolist_list_var = cdolist_list_var.rest();
                item = cdolist_list_var.first();
            }
            final SubLObject lower = binary_tree.do_btree_lower(subtree);
            final SubLObject higher = binary_tree.do_btree_higher(subtree);
            if (fact_sheets.NIL != lower) {
                if (fact_sheets.NIL != higher) {
                    stack = (SubLObject)ConsesLow.cons(higher, stack);
                }
                subtree = lower;
            }
            else if (fact_sheets.NIL != higher) {
                subtree = higher;
            }
            else {
                subtree = stack.first();
                stack = stack.rest();
            }
        }
        stack = (SubLObject)fact_sheets.NIL;
        return (SubLObject)fact_sheets.$kw726$OK;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 226026L)
    public static SubLObject fact_sheet_status_p(final SubLObject v_object) {
        return subl_promotions.memberP(v_object, fact_sheets.$fact_sheet_statuses$.getGlobalValue(), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 226119L)
    public static SubLObject fact_sheet_status(final SubLObject v_term, SubLObject verbosity, SubLObject domain_mt, SubLObject language_mt, SubLObject new_days) {
        if (verbosity == fact_sheets.UNPROVIDED) {
            verbosity = (SubLObject)fact_sheets.$kw35$NORMAL;
        }
        if (domain_mt == fact_sheets.UNPROVIDED) {
            domain_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (language_mt == fact_sheets.UNPROVIDED) {
            language_mt = (SubLObject)fact_sheets.$kw70$DEFAULT;
        }
        if (new_days == fact_sheets.UNPROVIDED) {
            new_days = fsut_prioritizer_default_new_days();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject status = (SubLObject)fact_sheets.$kw717$MISSING;
        final SubLObject miniP = Equality.eq(verbosity, (SubLObject)fact_sheets.$kw97$MINI);
        SubLObject priority = (SubLObject)fact_sheets.ZERO_INTEGER;
        if (fact_sheets.NIL != kb_indexing_datastructures.indexed_term_p(v_term)) {
            priority = fact_sheet_term_gaf_priority(v_term);
        }
        if (fact_sheets.NIL != term_ok_for_fact_sheet_p(v_term, miniP)) {
            thread.resetMultipleValues();
            final SubLObject directory = directory_and_filename_for_fact_sheet(v_term, verbosity, domain_mt, language_mt, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject cached_filename = thread.secondMultipleValue();
            thread.resetMultipleValues();
            thread.resetMultipleValues();
            final SubLObject status_$419 = fact_sheet_file_status(cached_filename, priority, miniP, v_term, new_days);
            final SubLObject priority_$420 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            status = status_$419;
            priority = priority_$420;
            if (fact_sheets.NIL != isa.isa_in_any_mtP(v_term, fact_sheets.$const584$TerroristAttack)) {
                priority = Numbers.add(priority, (SubLObject)fact_sheets.$int728$25);
            }
            if (status == fact_sheets.$kw717$MISSING) {
                priority = Numbers.add(priority, (SubLObject)fact_sheets.$int580$50);
            }
        }
        return Values.values(status, priority);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 226954L)
    public static SubLObject fact_sheet_file_status(final SubLObject cached_filename, final SubLObject term_priority, final SubLObject miniP, final SubLObject v_term, final SubLObject new_days) {
        SubLObject status = (SubLObject)fact_sheets.$kw717$MISSING;
        SubLObject priority = term_priority;
        if (fact_sheets.NIL != file_utilities.file_existsP(cached_filename) && (fact_sheets.NIL == miniP || fact_sheets.NIL == string_utilities.substringP((SubLObject)fact_sheets.$str729$border_0, string_utilities.read_string_from_file(cached_filename, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED))) {
            SubLObject current;
            final SubLObject datum = current = cached_fact_sheet_save_date_and_second(cached_filename);
            SubLObject date = (SubLObject)fact_sheets.NIL;
            SubLObject second = (SubLObject)fact_sheets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list643);
            date = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list643);
            second = current.first();
            current = current.rest();
            if (fact_sheets.NIL == current) {
                final SubLObject age_in_days = date_utilities.days_between_universal_dates(numeric_date_utilities.today(), date);
                priority = Numbers.add(priority, age_in_days);
                if (fact_sheets.NIL != fact_sheet_file_staleP(cached_filename, v_term, date, second)) {
                    status = (SubLObject)fact_sheets.$kw715$STALE;
                }
                else {
                    status = (SubLObject)fact_sheets.$kw719$UP_TO_DATE;
                    if (age_in_days.numLE(new_days)) {
                        priority = (SubLObject)fact_sheets.ZERO_INTEGER;
                    }
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list643);
            }
        }
        return Values.values(status, priority);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 227683L)
    public static SubLObject fact_sheet_file_staleP(final SubLObject filename, SubLObject v_term, SubLObject save_date, SubLObject save_second) {
        if (v_term == fact_sheets.UNPROVIDED) {
            v_term = (SubLObject)fact_sheets.NIL;
        }
        if (save_date == fact_sheets.UNPROVIDED) {
            save_date = (SubLObject)fact_sheets.NIL;
        }
        if (save_second == fact_sheets.UNPROVIDED) {
            save_second = (SubLObject)fact_sheets.NIL;
        }
        if (fact_sheets.NIL == file_utilities.file_existsP(filename)) {
            return (SubLObject)fact_sheets.NIL;
        }
        if (fact_sheets.NIL == save_date) {
            final SubLObject datum_evaluated_var = cached_fact_sheet_save_date_and_second(filename);
            save_date = datum_evaluated_var.first();
            save_second = conses_high.cadr(datum_evaluated_var);
        }
        if (fact_sheets.NIL != fact_sheet_generator_modified_sinceP(save_date, save_second)) {
            return (SubLObject)fact_sheets.T;
        }
        if (fact_sheets.NIL == v_term) {
            v_term = fact_sheet_term_from_filename(filename);
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != fact_sheet_file_has_invalid_assertionP(filename) || (fact_sheets.NIL != term_ok_for_fact_sheet_p(v_term, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != fact_sheet_term_modified_sinceP(v_term, save_date, save_second)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 228279L)
    public static SubLObject fact_sheet_file_has_invalid_assertionP(final SubLObject filename) {
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != file_utilities.file_existsP(filename) && fact_sheets.NIL != string_utilities.ends_with(filename, (SubLObject)fact_sheets.$str567$_cfasl, (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != list_utilities.tree_find_if((SubLObject)fact_sheets.$sym161$INVALID_ASSERTION_, precached_fact_sheet_data_from_file(filename, (SubLObject)fact_sheets.$kw730$FORBIDDEN, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED).first(), (SubLObject)fact_sheets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 228536L)
    public static SubLObject fact_sheet_term_gaf_priority(final SubLObject v_term) {
        return set.set_size(pred_argnum_combos_for_term(v_term));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 228812L)
    public static SubLObject pred_argnum_combos_for_term_internal(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject seen = set.new_set(Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)fact_sheets.$sym582$RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind(fact_sheets.$const583$EverythingPSC, thread);
            final SubLObject pred_var = (SubLObject)fact_sheets.NIL;
            if (fact_sheets.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(v_term, (SubLObject)fact_sheets.NIL, pred_var)) {
                final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(v_term, (SubLObject)fact_sheets.NIL, pred_var);
                SubLObject done_var = (SubLObject)fact_sheets.NIL;
                final SubLObject token_var = (SubLObject)fact_sheets.NIL;
                while (fact_sheets.NIL == done_var) {
                    final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                    final SubLObject valid = (SubLObject)SubLObjectFactory.makeBoolean(!token_var.eql(final_index_spec));
                    if (fact_sheets.NIL != valid) {
                        SubLObject final_index_iterator = (SubLObject)fact_sheets.NIL;
                        try {
                            final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, (SubLObject)fact_sheets.$kw441$GAF, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL);
                            SubLObject done_var_$421 = (SubLObject)fact_sheets.NIL;
                            final SubLObject token_var_$422 = (SubLObject)fact_sheets.NIL;
                            while (fact_sheets.NIL == done_var_$421) {
                                final SubLObject assertion_var = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$422);
                                final SubLObject valid_$423 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$422.eql(assertion_var));
                                if (fact_sheets.NIL != valid_$423) {
                                    final SubLObject formula = assertions_high.gaf_formula(assertion_var);
                                    set.set_add((SubLObject)ConsesLow.cons(cycl_utilities.formula_arg0(formula), Sequences.position(v_term, cycl_utilities.formula_terms(formula, (SubLObject)fact_sheets.UNPROVIDED), Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)), seen);
                                }
                                done_var_$421 = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == valid_$423);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$424 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (fact_sheets.NIL != final_index_iterator) {
                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$424, thread);
                            }
                        }
                    }
                    done_var = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == valid);
                }
            }
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return seen;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 228812L)
    public static SubLObject pred_argnum_combos_for_term(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == v_memoization_state) {
            return pred_argnum_combos_for_term_internal(v_term);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, (SubLObject)fact_sheets.$sym731$PRED_ARGNUM_COMBOS_FOR_TERM, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), (SubLObject)fact_sheets.$sym731$PRED_ARGNUM_COMBOS_FOR_TERM, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, (SubLObject)fact_sheets.$sym731$PRED_ARGNUM_COMBOS_FOR_TERM, caching_state);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(thread.resetMultipleValues(), (SubLObject)Values.multiple_value_list(pred_argnum_combos_for_term_internal(v_term)));
            memoization_state.caching_state_put(caching_state, v_term, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 229274L)
    public static SubLObject cb_fact_sheet_evaluation(SubLObject args) {
        if (args == fact_sheets.UNPROVIDED) {
            args = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject term_id = html_utilities.html_extract_input((SubLObject)fact_sheets.$str732$term, args);
        final SubLObject v_term = cb_utilities.cb_guess_fort(term_id, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject creation_kb = html_utilities.html_extract_input((SubLObject)fact_sheets.$str733$creation_kb, args);
        final SubLObject creation_system = html_utilities.html_extract_input((SubLObject)fact_sheets.$str734$creation_system, args);
        final SubLObject evaluator_id = html_utilities.html_extract_input((SubLObject)fact_sheets.$str735$evaluator, args);
        final SubLObject title_var = (SubLObject)fact_sheets.$str736$Fact_Sheet_Evaluation;
        final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((fact_sheets.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), thread);
            html_utilities.html_markup((SubLObject)fact_sheets.$str196$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (fact_sheets.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup((SubLObject)fact_sheets.$str197$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject _prev_bind_0_$425 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == fact_sheets.$kw116$UNINITIALIZED) ? ConsesLow.list(fact_sheets.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css((SubLObject)fact_sheets.$kw737$CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (fact_sheets.NIL != title_var) {
                    html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                final SubLObject _prev_bind_0_$426 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind((SubLObject)fact_sheets.T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (fact_sheets.NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)fact_sheets.$str740$yui_skin_sam);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                    final SubLObject _prev_bind_0_$427 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)fact_sheets.$str741$reloadFrameButton);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$428 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)fact_sheets.$str742$button);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)fact_sheets.$str743$reload);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_princ((SubLObject)fact_sheets.$str744$Refresh_Frames);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            if (fact_sheets.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$428, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (fact_sheets.NIL != title_var) {
                            html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_utilities.html_markup((SubLObject)fact_sheets.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_princ(title_var);
                            html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_utilities.html_markup((SubLObject)fact_sheets.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                        html_utilities.html_markup((SubLObject)fact_sheets.THREE_INTEGER);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        cb_utilities.cb_form(v_term, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                        html_utilities.html_markup((SubLObject)fact_sheets.THREE_INTEGER);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)fact_sheets.NIL);
                        html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_form_method$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)fact_sheets.$str745$post);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        if (fact_sheets.NIL != frame_name_var) {
                            html_utilities.html_markup(html_macros.$html_form_target$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_markup(frame_name_var);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                        }
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject _prev_bind_0_$429 = html_macros.$html_safe_print$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                            html_macros.$within_html_form$.bind((SubLObject)fact_sheets.T, thread);
                            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                            html_utilities.html_hidden_input((SubLObject)fact_sheets.$str746$cb_handle_fact_sheet_evaluation, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_hidden_input((SubLObject)fact_sheets.$str732$term, term_id, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_hidden_input((SubLObject)fact_sheets.$str735$evaluator, evaluator_id, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_hidden_input((SubLObject)fact_sheets.$str733$creation_kb, creation_kb, (SubLObject)fact_sheets.UNPROVIDED);
                            html_utilities.html_hidden_input((SubLObject)fact_sheets.$str734$creation_system, creation_system, (SubLObject)fact_sheets.UNPROVIDED);
                            print_one_eval_section((SubLObject)fact_sheets.$kw747$COVERAGE, (SubLObject)fact_sheets.$list748);
                            print_one_eval_section((SubLObject)fact_sheets.$kw749$FILTERING, (SubLObject)fact_sheets.$list750);
                            print_one_eval_section((SubLObject)fact_sheets.$kw751$REDUNDANCY, (SubLObject)fact_sheets.$list752);
                            print_one_eval_section((SubLObject)fact_sheets.$kw753$CLARITY, (SubLObject)fact_sheets.$list754);
                            print_one_eval_section((SubLObject)fact_sheets.$kw755$LINKS, (SubLObject)fact_sheets.$list756);
                            print_one_eval_section((SubLObject)fact_sheets.$kw757$CATEGORIZATION, (SubLObject)fact_sheets.$list758);
                            print_one_eval_section((SubLObject)fact_sheets.$kw759$FLUIDITY, (SubLObject)fact_sheets.$list760);
                            print_one_eval_section((SubLObject)fact_sheets.$kw761$ESTHETIC_VALUE, (SubLObject)fact_sheets.$list762);
                            html_utilities.html_submit_input((SubLObject)fact_sheets.$str763$Submit_Evaluation, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                            html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                        }
                        finally {
                            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                            html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$429, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$427, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
                }
                finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$426, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            }
            finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$425, thread);
            }
            html_utilities.html_source_readability_terpri((SubLObject)fact_sheets.UNPROVIDED);
        }
        finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 231944L)
    public static SubLObject print_one_eval_section(final SubLObject eval_keyword, final SubLObject values_with_strings) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject title = string_utilities.capitalize_smart(Strings.string_downcase(Sequences.cconcatenate(format_nil.format_nil_a_no_copy(eval_keyword), (SubLObject)fact_sheets.$str766$__), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
        final SubLObject select_name = Strings.string_downcase(format_nil.format_nil_a(eval_keyword), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject comment_name = Sequences.cconcatenate(select_name, (SubLObject)fact_sheets.$str767$_comments);
        html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str124$_A, title);
        html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
        html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str768$Score__);
        html_utilities.html_markup(html_macros.$html_select_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_select_name$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        html_utilities.html_markup(select_name);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
            html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
            print_numbered_options((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)fact_sheets.TEN_INTEGER, values_with_strings);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_select_tail$.getGlobalValue());
        html_utilities.html_newline((SubLObject)fact_sheets.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)fact_sheets.$str769$Comments__);
        html_utilities.html_text_input(comment_name, (SubLObject)fact_sheets.$str73$, (SubLObject)fact_sheets.$int770$80);
        html_utilities.html_newline((SubLObject)fact_sheets.TWO_INTEGER);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 232545L)
    public static SubLObject print_numbered_options(final SubLObject start_number, final SubLObject end_number, final SubLObject option_value_alist) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_option_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_option_value$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        html_utilities.html_markup((SubLObject)fact_sheets.MINUS_ONE_INTEGER);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
            html_utilities.html_princ((SubLObject)fact_sheets.$str771$No_Value_Selected);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_option_tail$.getGlobalValue());
        SubLObject option_number;
        SubLObject option_string;
        SubLObject _prev_bind_2;
        for (option_number = (SubLObject)fact_sheets.NIL, option_number = start_number; !option_number.numG(end_number); option_number = Numbers.add((SubLObject)fact_sheets.ONE_INTEGER, option_number)) {
            option_string = list_utilities.alist_lookup(option_value_alist, option_number, (SubLObject)fact_sheets.EQ, option_number);
            html_utilities.html_markup(html_macros.$html_option_head$.getGlobalValue());
            if (fact_sheets.NIL != option_number) {
                html_utilities.html_markup(html_macros.$html_option_value$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
                html_utilities.html_markup(option_number);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            }
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
            _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
                html_utilities.html_princ(option_string);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_utilities.html_markup(html_macros.$html_option_tail$.getGlobalValue());
        }
        return (SubLObject)fact_sheets.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 232981L)
    public static SubLObject cb_handle_fact_sheet_evaluation(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_term = cycl_utilities.hl_to_el(cb_utilities.cb_guess_fort(html_utilities.html_extract_input((SubLObject)fact_sheets.$str732$term, args), (SubLObject)fact_sheets.UNPROVIDED));
        final SubLObject evaluator = cycl_utilities.hl_to_el(cb_utilities.cb_guess_fort(html_utilities.html_extract_input((SubLObject)fact_sheets.$str735$evaluator, args), (SubLObject)fact_sheets.UNPROVIDED));
        final SubLObject vars = (SubLObject)fact_sheets.$list772;
        SubLObject eval_info = (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$kw773$TERM, v_term, (SubLObject)fact_sheets.$kw774$EVALUATOR, evaluator);
        SubLObject cdolist_list_var = vars;
        SubLObject var = (SubLObject)fact_sheets.NIL;
        var = cdolist_list_var.first();
        while (fact_sheets.NIL != cdolist_list_var) {
            final SubLObject value = html_utilities.html_extract_input(var, args);
            if (fact_sheets.NIL != value && fact_sheets.NIL == subl_promotions.memberP(value, (SubLObject)fact_sheets.$list775, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED)) {
                eval_info = conses_high.putf(eval_info, Symbols.make_keyword(Strings.string_upcase(var, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)), value);
            }
            cdolist_list_var = cdolist_list_var.rest();
            var = cdolist_list_var.first();
        }
        eval_info = conses_high.putf(eval_info, (SubLObject)fact_sheets.$kw776$EVAL_SYSTEM, system_info.cyc_revision_string());
        eval_info = conses_high.putf(eval_info, (SubLObject)fact_sheets.$kw777$EVAL_TIME, numeric_date_utilities.timestamp((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            stream = compatibility.open_text(fact_sheets.$fact_sheet_eval_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
            if (!stream.isStream()) {
                Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheets.$fact_sheet_eval_log_file$.getDynamicValue(thread));
            }
            final SubLObject file = stream;
            PrintLow.format(file, (SubLObject)fact_sheets.$str778$_S__, eval_info);
        }
        finally {
            final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
            }
        }
        cb_tools.cb_history((SubLObject)fact_sheets.UNPROVIDED);
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 234007L)
    public static SubLObject absolute_fact_sheet_eval_url(final SubLObject v_term, final SubLObject user, final SubLObject creation_kb, final SubLObject creation_system) {
        return Sequences.cconcatenate(format_nil.format_nil_a_no_copy(http_kernel.http_server_cgi_base_url()), new SubLObject[] { fact_sheets.$str780$cg_cb_fact_sheet_evaluation_term_, format_nil.format_nil_a_no_copy(cb_utilities.cb_term_identifier(v_term)), fact_sheets.$str781$_evaluator_, format_nil.format_nil_a_no_copy(cb_utilities.cb_term_identifier(user)), fact_sheets.$str782$_creation_kb_, format_nil.format_nil_a_no_copy(web_utilities.html_url_encode(creation_kb, (SubLObject)fact_sheets.UNPROVIDED)), fact_sheets.$str783$_creation_system_, format_nil.format_nil_a_no_copy(web_utilities.html_url_encode(creation_system, (SubLObject)fact_sheets.UNPROVIDED)) });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 234385L)
    public static SubLObject html_emit_fact_sheet_evaluation_link(final SubLObject v_term, SubLObject user, SubLObject creation_kb, SubLObject creation_system) {
        if (user == fact_sheets.UNPROVIDED) {
            user = operation_communication.the_cyclist();
        }
        if (creation_kb == fact_sheets.UNPROVIDED) {
            creation_kb = (SubLObject)fact_sheets.NIL;
        }
        if (creation_system == fact_sheets.UNPROVIDED) {
            creation_system = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject url = absolute_fact_sheet_eval_url(v_term, user, creation_kb, creation_system);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        html_utilities.html_markup(url);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_anchor_title$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        html_utilities.html_markup((SubLObject)fact_sheets.$str784$Evaluate_Fact_Sheet);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL != html_macros.$html_blank_target$.getGlobalValue()) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_blank_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)fact_sheets.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)fact_sheets.T, thread);
            html_utilities.html_princ((SubLObject)fact_sheets.$str785$Evaluate_this_Fact_Sheet);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 235006L)
    public static SubLObject allowed_to_update_fact_sheet_with_sentenceP(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, final SubLObject assertion) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)fact_sheets.NIL;
        SubLObject release = (SubLObject)fact_sheets.NIL;
        try {
            release = Locks.seize_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
            if (fact_sheets.NIL != dictionary.dictionary_lookup(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, verbosity, domain_mt, language_mt), (SubLObject)fact_sheets.UNPROVIDED) && fact_sheets.NIL != Threads.valid_process_p(dictionary.dictionary_lookup(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, verbosity, domain_mt, language_mt), (SubLObject)fact_sheets.UNPROVIDED))) {
                result = (SubLObject)fact_sheets.NIL;
            }
            else {
                dictionary.dictionary_enter(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, verbosity, domain_mt, language_mt), Threads.current_process());
                result = (SubLObject)fact_sheets.T;
            }
        }
        finally {
            if (fact_sheets.NIL != release) {
                Locks.release_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 235657L)
    public static SubLObject mark_fact_sheet_term_modifiable(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject result = (SubLObject)fact_sheets.NIL;
        SubLObject release = (SubLObject)fact_sheets.NIL;
        try {
            release = Locks.seize_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
            if (!dictionary.dictionary_lookup(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), v_term, (SubLObject)fact_sheets.UNPROVIDED).equalp(Threads.current_process())) {
                Errors.warn((SubLObject)fact_sheets.$str788$The_process_that_is_marking_the_f, Threads.current_process(), dictionary.dictionary_lookup(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), v_term, (SubLObject)fact_sheets.UNPROVIDED));
            }
            dictionary.dictionary_enter(fact_sheets.$fact_sheet_updating_process_dictionary$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, verbosity, domain_mt, language_mt), (SubLObject)fact_sheets.NIL);
        }
        finally {
            if (fact_sheets.NIL != release) {
                Locks.release_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 236347L)
    public static SubLObject cache_local_fact_sheet_data(final SubLObject data, final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt, SubLObject time) {
        if (time == fact_sheets.UNPROVIDED) {
            time = Time.get_universal_time();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)fact_sheets.NIL;
        SubLObject release = (SubLObject)fact_sheets.NIL;
        try {
            release = Locks.seize_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
            result = dictionary.dictionary_enter(fact_sheets.$fact_sheet_lookaside_cache$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, verbosity, domain_mt, language_mt), (SubLObject)ConsesLow.list(time, data));
        }
        finally {
            if (fact_sheets.NIL != release) {
                Locks.release_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 236692L)
    public static SubLObject get_cached_local_fact_sheet_data(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject time = (SubLObject)fact_sheets.NIL;
        SubLObject data = (SubLObject)fact_sheets.NIL;
        SubLObject release = (SubLObject)fact_sheets.NIL;
        try {
            release = Locks.seize_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
            final SubLObject datum_evaluated_var = dictionary.dictionary_lookup(fact_sheets.$fact_sheet_lookaside_cache$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, verbosity, domain_mt, language_mt), (SubLObject)fact_sheets.UNPROVIDED);
            time = datum_evaluated_var.first();
            data = conses_high.cadr(datum_evaluated_var);
        }
        finally {
            if (fact_sheets.NIL != release) {
                Locks.release_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
            }
        }
        return Values.values(data, time);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 237155L)
    public static SubLObject remove_cached_local_fact_sheet_data(final SubLObject v_term, final SubLObject verbosity, final SubLObject domain_mt, final SubLObject language_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject release = (SubLObject)fact_sheets.NIL;
        try {
            release = Locks.seize_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
            dictionary.dictionary_remove(fact_sheets.$fact_sheet_lookaside_cache$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, verbosity, domain_mt, language_mt));
        }
        finally {
            if (fact_sheets.NIL != release) {
                Locks.release_lock(fact_sheets.$fact_sheet_updating_lock$.getGlobalValue());
            }
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 239844L)
    public static SubLObject public_fact_sheet_ad_html() {
        return fact_sheets.$public_fact_sheet_ad_html$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 239927L)
    public static SubLObject directory_and_filename_for_public_fact_sheet(final SubLObject v_term, final SubLObject fs_type, SubLObject extension) {
        if (extension == fact_sheets.UNPROVIDED) {
            extension = (SubLObject)fact_sheets.$str491$html;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert fact_sheets.NIL != forts.fort_p(v_term) : v_term;
        final SubLObject term_id = fact_sheet_term_id(v_term, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject raw_filename = Sequences.cconcatenate(term_id, new SubLObject[] { fact_sheets.$str511$_, extension });
        final SubLObject parent_directory = get_public_fact_sheet_term_parent_directory_string(v_term, fs_type, raw_filename);
        final SubLObject fs_collection_name = get_fs_collection_name(fs_type);
        final SubLObject directory_list = Sequences.cconcatenate(fact_sheets.$public_fact_sheet_path$.getDynamicValue(thread), (SubLObject)ConsesLow.list(fs_collection_name, parent_directory));
        final SubLObject directory = fact_sheet_directory_from_list(directory_list);
        final SubLObject filename = Sequences.cconcatenate(directory, raw_filename);
        return Values.values(directory, filename);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 240572L)
    public static SubLObject relative_filename_for_public_fact_sheet(final SubLObject v_term, final SubLObject fs_type, SubLObject extension) {
        if (extension == fact_sheets.UNPROVIDED) {
            extension = (SubLObject)fact_sheets.$str491$html;
        }
        final SubLObject term_id = fact_sheet_term_id(v_term, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject raw_filename = Sequences.cconcatenate(term_id, new SubLObject[] { fact_sheets.$str511$_, extension });
        final SubLObject parent_directory = get_public_fact_sheet_term_parent_directory_string(v_term, fs_type, raw_filename);
        final SubLObject directory_list = (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str791$__, parent_directory);
        final SubLObject directory = fact_sheet_directory_from_list(directory_list);
        final SubLObject filename = Sequences.cconcatenate(directory, raw_filename);
        return filename;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 241055L)
    public static SubLObject clear_get_public_fact_sheet_term_parent_directory_string() {
        final SubLObject cs = fact_sheets.$get_public_fact_sheet_term_parent_directory_string_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 241055L)
    public static SubLObject remove_get_public_fact_sheet_term_parent_directory_string(final SubLObject v_term, final SubLObject fs_type, final SubLObject filename) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$get_public_fact_sheet_term_parent_directory_string_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, fs_type, filename), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 241055L)
    public static SubLObject get_public_fact_sheet_term_parent_directory_string_internal(final SubLObject v_term, final SubLObject fs_type, final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject directory_name = (SubLObject)fact_sheets.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(fact_sheets.$const253$InferencePSC);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            final SubLObject generalization_function = (SubLObject)((fact_sheets.NIL != kb_accessors.kb_individual_p(v_term)) ? fact_sheets.$sym793$MIN_ISA_AMONG : fact_sheets.$sym794$MIN_GENLS_AMONG);
            final SubLObject available_types = Sequences.remove(v_term, types_for_public_fact_sheets(fs_type), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject first_pass_types = Functions.funcall(generalization_function, v_term, available_types);
            final SubLObject types = (fact_sheets.NIL != first_pass_types) ? first_pass_types : isa.min_isa_among(v_term, available_types, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            final SubLObject preferred_type = cardinality_estimates.sort_by_generality_estimate(types, (SubLObject)fact_sheets.UNPROVIDED).first();
            final SubLObject best_type = (fact_sheets.NIL != preferred_type) ? preferred_type : v_term;
            final SubLObject generation = pph_main.generate_phrase(best_type, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            directory_name = list_utilities.remove_if_not((SubLObject)fact_sheets.$sym795$FACT_SHEET_FILENAME_CHAR_, string_utilities.string_subst((SubLObject)fact_sheets.$str796$_, (SubLObject)fact_sheets.$str334$_, Strings.string_downcase(generation, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        note_term_to_file_mapping(v_term, fs_type, directory_name, filename);
        return directory_name;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 241055L)
    public static SubLObject get_public_fact_sheet_term_parent_directory_string(final SubLObject v_term, final SubLObject fs_type, final SubLObject filename) {
        SubLObject caching_state = fact_sheets.$get_public_fact_sheet_term_parent_directory_string_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym792$GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING, (SubLObject)fact_sheets.$sym797$_GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING_CACHING_STATE, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.THREE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(v_term, fs_type, filename);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (fs_type.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && filename.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_public_fact_sheet_term_parent_directory_string_internal(v_term, fs_type, filename)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, fs_type, filename));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 241985L)
    public static SubLObject fact_sheet_filename_charP(final SubLObject v_char) {
        return (SubLObject)SubLObjectFactory.makeBoolean(v_char.eql((SubLObject)Characters.CHAR_underbar) || fact_sheets.NIL != Characters.alphanumericp(v_char));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 242090L)
    public static SubLObject note_term_to_file_mapping(final SubLObject v_term, final SubLObject fs_type, final SubLObject directory_name, final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject output_file = Sequences.cconcatenate(fact_sheet_directory_from_list(fact_sheets.$public_fact_sheet_path$.getDynamicValue(thread)), new SubLObject[] { get_fs_collection_name(fs_type), fact_sheets.$str798$_term_mapping_cfasl });
        final SubLObject txt_output_file = Sequences.cconcatenate(fact_sheet_directory_from_list(fact_sheets.$public_fact_sheet_path$.getDynamicValue(thread)), new SubLObject[] { get_fs_collection_name(fs_type), fact_sheets.$str799$_term_mapping_txt });
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                stream = compatibility.open_binary(output_file, (SubLObject)fact_sheets.$kw544$APPEND);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, output_file);
            }
            final SubLObject stream_$430 = stream;
            cfasl.cfasl_output((SubLObject)ConsesLow.list(v_term, directory_name, filename), stream_$430);
        }
        finally {
            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        SubLObject stream_$431 = (SubLObject)fact_sheets.NIL;
        try {
            final SubLObject _prev_bind_3 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                stream_$431 = compatibility.open_text(txt_output_file, (SubLObject)fact_sheets.$kw544$APPEND);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_3, thread);
            }
            if (!stream_$431.isStream()) {
                Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, txt_output_file);
            }
            final SubLObject stream_$432 = stream_$431;
            print_high.prin1((SubLObject)ConsesLow.list(v_term, directory_name, filename), stream_$432);
        }
        finally {
            final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream_$431.isStream()) {
                    streams_high.close(stream_$431, (SubLObject)fact_sheets.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
            }
        }
        return (SubLObject)fact_sheets.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 242753L)
    public static SubLObject clear_terms_for_public_fact_sheets() {
        final SubLObject cs = fact_sheets.$terms_for_public_fact_sheets_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 242753L)
    public static SubLObject remove_terms_for_public_fact_sheets(SubLObject fs_type) {
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$terms_for_public_fact_sheets_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(fs_type), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 242753L)
    public static SubLObject terms_for_public_fact_sheets_internal(final SubLObject fs_type) {
        final SubLObject whitelist = get_fs_whitelist_types(fs_type);
        final SubLObject blacklist = get_fs_blacklist_types(fs_type);
        final SubLObject quoted_blacklist = get_fs_quoted_blacklist_types(fs_type);
        final SubLObject terms = set.new_set((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject mt = get_domain_mt_for_fs_type(fs_type);
        SubLObject store = (SubLObject)fact_sheets.NIL;
        try {
            store = inference_datastructures_problem_store.new_problem_store((SubLObject)fact_sheets.NIL);
            SubLObject cdolist_list_var = whitelist;
            SubLObject type = (SubLObject)fact_sheets.NIL;
            type = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cdolist_list_var_$433 = (SubLObject)fact_sheets.$list807;
                SubLObject pred = (SubLObject)fact_sheets.NIL;
                pred = cdolist_list_var_$433.first();
                while (fact_sheets.NIL != cdolist_list_var_$433) {
                    final SubLObject new_terms = ask_utilities.query_variable((SubLObject)fact_sheets.$sym802$_X, (SubLObject)ConsesLow.list(pred, (SubLObject)fact_sheets.$sym802$_X, type), mt, (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$kw803$ANSWER_LANGUAGE, (SubLObject)fact_sheets.$kw804$HL, (SubLObject)fact_sheets.$kw145$PROBLEM_STORE, store, (SubLObject)fact_sheets.$list805));
                    Errors.warn((SubLObject)fact_sheets.$str806$_S__S___S, pred, type, Sequences.length(new_terms));
                    set_utilities.set_add_all(new_terms, terms);
                    cdolist_list_var_$433 = cdolist_list_var_$433.rest();
                    pred = cdolist_list_var_$433.first();
                }
                cdolist_list_var = cdolist_list_var.rest();
                type = cdolist_list_var.first();
            }
            cdolist_list_var = blacklist;
            SubLObject bad_type = (SubLObject)fact_sheets.NIL;
            bad_type = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                set_utilities.set_remove_all(isa.all_instances(bad_type, mt, (SubLObject)fact_sheets.UNPROVIDED), terms);
                cdolist_list_var = cdolist_list_var.rest();
                bad_type = cdolist_list_var.first();
            }
            cdolist_list_var = quoted_blacklist;
            SubLObject bad_quoted_type = (SubLObject)fact_sheets.NIL;
            bad_quoted_type = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                set_utilities.set_remove_all(isa.all_quoted_instances(bad_quoted_type, mt, (SubLObject)fact_sheets.UNPROVIDED), terms);
                cdolist_list_var = cdolist_list_var.rest();
                bad_quoted_type = cdolist_list_var.first();
            }
        }
        finally {
            final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)fact_sheets.T);
                final SubLObject _values = Values.getValuesAsVector();
                inference_datastructures_problem_store.destroy_problem_store(store);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return terms;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 242753L)
    public static SubLObject terms_for_public_fact_sheets(SubLObject fs_type) {
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        SubLObject caching_state = fact_sheets.$terms_for_public_fact_sheets_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym801$TERMS_FOR_PUBLIC_FACT_SHEETS, (SubLObject)fact_sheets.$sym808$_TERMS_FOR_PUBLIC_FACT_SHEETS_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, fs_type, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(terms_for_public_fact_sheets_internal(fs_type)));
            memoization_state.caching_state_put(caching_state, fs_type, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 243718L)
    public static SubLObject clear_types_for_public_fact_sheets() {
        final SubLObject cs = fact_sheets.$types_for_public_fact_sheets_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 243718L)
    public static SubLObject remove_types_for_public_fact_sheets(SubLObject fs_type) {
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$types_for_public_fact_sheets_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(fs_type), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 243718L)
    public static SubLObject types_for_public_fact_sheets_internal(final SubLObject fs_type) {
        return list_utilities.remove_if_not((SubLObject)fact_sheets.$sym810$COLLECTION_IN_ANY_MT_, set.set_element_list(terms_for_public_fact_sheets(fs_type)), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 243718L)
    public static SubLObject types_for_public_fact_sheets(SubLObject fs_type) {
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        SubLObject caching_state = fact_sheets.$types_for_public_fact_sheets_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym809$TYPES_FOR_PUBLIC_FACT_SHEETS, (SubLObject)fact_sheets.$sym811$_TYPES_FOR_PUBLIC_FACT_SHEETS_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQ, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, fs_type, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(types_for_public_fact_sheets_internal(fs_type)));
            memoization_state.caching_state_put(caching_state, fs_type, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 243933L)
    public static SubLObject clear_fact_sheet_term_strings() {
        final SubLObject cs = fact_sheets.$fact_sheet_term_strings_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 243933L)
    public static SubLObject remove_fact_sheet_term_strings(final SubLObject v_term) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$fact_sheet_term_strings_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 243933L)
    public static SubLObject fact_sheet_term_strings_internal(final SubLObject v_term) {
        return nl_generation_api.cycl_term_to_nl_string_internal(v_term, (SubLObject)fact_sheets.$kw70$DEFAULT);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 243933L)
    public static SubLObject fact_sheet_term_strings(final SubLObject v_term) {
        SubLObject caching_state = fact_sheets.$fact_sheet_term_strings_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym812$FACT_SHEET_TERM_STRINGS, (SubLObject)fact_sheets.$sym813$_FACT_SHEET_TERM_STRINGS_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(fact_sheet_term_strings_internal(v_term)));
            memoization_state.caching_state_put(caching_state, v_term, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 244057L)
    public static SubLObject get_public_fact_sheet_string_mappings(final SubLObject fs_type) {
        return get_public_fact_sheet_string_mappings_int(set.set_element_list(terms_for_public_fact_sheets(fs_type)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 244233L)
    public static SubLObject get_public_fact_sheet_string_mappings_int(final SubLObject terms) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = utilities_macros.$progress_note$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
        try {
            utilities_macros.$progress_note$.bind((SubLObject)fact_sheets.$str814$Getting_English_for_terms, thread);
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_total$.bind(Sequences.length(terms), thread);
            utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
            try {
                utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                SubLObject csome_list_var = terms;
                SubLObject v_term = (SubLObject)fact_sheets.NIL;
                v_term = csome_list_var.first();
                while (fact_sheets.NIL != csome_list_var) {
                    result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(v_term, fact_sheet_term_strings(v_term)), result);
                    utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                    utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                    csome_list_var = csome_list_var.rest();
                    v_term = csome_list_var.first();
                }
            }
            finally {
                final SubLObject _prev_bind_0_$434 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    utilities_macros.noting_percent_progress_postamble();
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$434, thread);
                }
            }
        }
        finally {
            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_note$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 244466L)
    public static SubLObject clear_get_public_fact_sheet_string_url_mappings() {
        final SubLObject cs = fact_sheets.$get_public_fact_sheet_string_url_mappings_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 244466L)
    public static SubLObject remove_get_public_fact_sheet_string_url_mappings(SubLObject terms, SubLObject fs_type) {
        if (terms == fact_sheets.UNPROVIDED) {
            terms = set.set_element_list(terms_for_public_fact_sheets((SubLObject)fact_sheets.UNPROVIDED));
        }
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$get_public_fact_sheet_string_url_mappings_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(terms, fs_type), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 244466L)
    public static SubLObject get_public_fact_sheet_string_url_mappings_internal(final SubLObject terms, final SubLObject fs_type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject result = dictionary.new_dictionary((SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject list_var;
        final SubLObject mappings = list_var = get_public_fact_sheet_string_mappings_int(terms);
        final SubLObject _prev_bind_0 = utilities_macros.$progress_note$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
        try {
            utilities_macros.$progress_note$.bind((SubLObject)fact_sheets.$str816$getting_urls_for_terms, thread);
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
            utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
            try {
                utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                SubLObject csome_list_var = list_var;
                SubLObject mapping = (SubLObject)fact_sheets.NIL;
                mapping = csome_list_var.first();
                while (fact_sheets.NIL != csome_list_var) {
                    SubLObject current;
                    final SubLObject datum = current = mapping;
                    SubLObject v_term = (SubLObject)fact_sheets.NIL;
                    SubLObject strings = (SubLObject)fact_sheets.NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list817);
                    v_term = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list817);
                    strings = current.first();
                    current = current.rest();
                    if (fact_sheets.NIL == current) {
                        final SubLObject url = string_utilities.substring(relative_filename_for_public_fact_sheet(v_term, fs_type, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.THREE_INTEGER, (SubLObject)fact_sheets.UNPROVIDED);
                        SubLObject cdolist_list_var = strings;
                        SubLObject string = (SubLObject)fact_sheets.NIL;
                        string = cdolist_list_var.first();
                        while (fact_sheets.NIL != cdolist_list_var) {
                            dictionary_utilities.dictionary_push(result, Strings.string_downcase(string, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)ConsesLow.list(v_term, url));
                            cdolist_list_var = cdolist_list_var.rest();
                            string = cdolist_list_var.first();
                        }
                    }
                    else {
                        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list817);
                    }
                    utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                    utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                    csome_list_var = csome_list_var.rest();
                    mapping = csome_list_var.first();
                }
            }
            finally {
                final SubLObject _prev_bind_0_$435 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    utilities_macros.noting_percent_progress_postamble();
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$435, thread);
                }
            }
        }
        finally {
            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_note$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 244466L)
    public static SubLObject get_public_fact_sheet_string_url_mappings(SubLObject terms, SubLObject fs_type) {
        if (terms == fact_sheets.UNPROVIDED) {
            terms = set.set_element_list(terms_for_public_fact_sheets((SubLObject)fact_sheets.UNPROVIDED));
        }
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        SubLObject caching_state = fact_sheets.$get_public_fact_sheet_string_url_mappings_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym815$GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS, (SubLObject)fact_sheets.$sym818$_GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(terms, fs_type);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)fact_sheets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)fact_sheets.NIL;
            collision = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (terms.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (fact_sheets.NIL != cached_args && fact_sheets.NIL == cached_args.rest() && fs_type.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_public_fact_sheet_string_url_mappings_internal(terms, fs_type)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(terms, fs_type));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 245270L)
    public static SubLObject dump_fact_sheet_string_url_mappings(SubLObject mappings, SubLObject out_file) {
        if (mappings == fact_sheets.UNPROVIDED) {
            mappings = get_public_fact_sheet_string_url_mappings((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        }
        if (out_file == fact_sheets.UNPROVIDED) {
            out_file = fact_sheets.$incyc_searchdata_xml_file$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                stream = compatibility.open_text(out_file, (SubLObject)fact_sheets.$kw283$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, out_file);
            }
            final SubLObject s = stream;
            final SubLObject _prev_bind_2 = xml_vars.$xml_stream$.currentBinding(thread);
            try {
                xml_vars.$xml_stream$.bind(s, thread);
                try {
                    final SubLObject _prev_bind_0_$436 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                    try {
                        xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                        xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                        xml_utilities.xml_start_tag_internal((SubLObject)fact_sheets.$str819$resultSet, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$kw116$UNINITIALIZED);
                        final SubLObject _prev_bind_0_$437 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                        try {
                            xml_vars.$xml_default_namespace$.bind((SubLObject)fact_sheets.$kw116$UNINITIALIZED, thread);
                            SubLObject so_far = (SubLObject)fact_sheets.ZERO_INTEGER;
                            final SubLObject total = dictionary.dictionary_length(mappings);
                            final SubLObject _prev_bind_0_$438 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$439 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                            final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                            try {
                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                try {
                                    utilities_macros.noting_percent_progress_preamble((SubLObject)fact_sheets.$str820$Writing_out_paths);
                                    SubLObject iteration_state;
                                    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mappings)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                        thread.resetMultipleValues();
                                        final SubLObject string = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                        final SubLObject mapping = thread.secondMultipleValue();
                                        thread.resetMultipleValues();
                                        SubLObject cdolist_list_var = mapping;
                                        SubLObject term_url = (SubLObject)fact_sheets.NIL;
                                        term_url = cdolist_list_var.first();
                                        while (fact_sheets.NIL != cdolist_list_var) {
                                            SubLObject current;
                                            final SubLObject datum = current = term_url;
                                            SubLObject v_term = (SubLObject)fact_sheets.NIL;
                                            SubLObject url = (SubLObject)fact_sheets.NIL;
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list821);
                                            v_term = current.first();
                                            current = current.rest();
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list821);
                                            url = current.first();
                                            current = current.rest();
                                            if (fact_sheets.NIL == current) {
                                                final SubLObject attrs = (SubLObject)ConsesLow.list(new SubLObject[] { fact_sheets.$str822$displayNl, string, fact_sheets.$str823$nl, string, fact_sheets.$str824$factSheetPath, url, fact_sheets.$str119$cycl, v_term, fact_sheets.$str825$cyclId, kb_utilities.compact_hl_external_id_string(v_term) });
                                                final SubLObject _prev_bind_0_$439 = xml_utilities.$xml_indentation_level$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$440 = xml_utilities.$cycml_indent_level$.currentBinding(thread);
                                                try {
                                                    xml_utilities.$xml_indentation_level$.bind(Numbers.add(xml_utilities.$xml_indentation_amount$.getDynamicValue(thread), xml_utilities.$xml_indentation_level$.getDynamicValue(thread)), thread);
                                                    xml_utilities.$cycml_indent_level$.bind(xml_utilities.$xml_indentation_level$.getDynamicValue(thread), thread);
                                                    xml_utilities.xml_start_tag_internal((SubLObject)fact_sheets.$str732$term, attrs, (SubLObject)fact_sheets.T, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.$kw116$UNINITIALIZED);
                                                    final SubLObject _prev_bind_0_$440 = xml_vars.$xml_default_namespace$.currentBinding(thread);
                                                    try {
                                                        xml_vars.$xml_default_namespace$.bind((SubLObject)fact_sheets.$kw116$UNINITIALIZED, thread);
                                                    }
                                                    finally {
                                                        xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$440, thread);
                                                    }
                                                }
                                                finally {
                                                    xml_utilities.$cycml_indent_level$.rebind(_prev_bind_1_$440, thread);
                                                    xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$439, thread);
                                                }
                                            }
                                            else {
                                                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list821);
                                            }
                                            xml_utilities.xml_terpri();
                                            cdolist_list_var = cdolist_list_var.rest();
                                            term_url = cdolist_list_var.first();
                                        }
                                        so_far = Numbers.add(so_far, (SubLObject)fact_sheets.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(so_far, total);
                                    }
                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$441 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        utilities_macros.noting_percent_progress_postamble();
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$441, thread);
                                    }
                                }
                            }
                            finally {
                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$439, thread);
                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$438, thread);
                            }
                        }
                        finally {
                            xml_vars.$xml_default_namespace$.rebind(_prev_bind_0_$437, thread);
                        }
                    }
                    finally {
                        xml_utilities.$cycml_indent_level$.rebind(_prev_bind_3, thread);
                        xml_utilities.$xml_indentation_level$.rebind(_prev_bind_0_$436, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$442 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        xml_utilities.xml_terpri();
                        xml_utilities.xml_end_tag_internal((SubLObject)fact_sheets.$str819$resultSet);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$442, thread);
                    }
                }
            }
            finally {
                xml_vars.$xml_stream$.rebind(_prev_bind_2, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values3 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values3);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return fact_sheets.$incyc_searchdata_xml_file$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 246687L)
    public static SubLObject convert_search_data_to_htaccess_redirects(SubLObject searchdata_file, SubLObject out_file) {
        if (searchdata_file == fact_sheets.UNPROVIDED) {
            searchdata_file = fact_sheets.$incyc_searchdata_xml_file$.getDynamicValue();
        }
        if (out_file == fact_sheets.UNPROVIDED) {
            out_file = fact_sheets.$incyc_searchdata_htaccess_file$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                stream = compatibility.open_text(out_file, (SubLObject)fact_sheets.$kw283$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, out_file);
            }
            final SubLObject s = stream;
            SubLObject stream_$445 = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream_$445 = compatibility.open_text(searchdata_file, (SubLObject)fact_sheets.$kw505$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
                }
                if (!stream_$445.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, searchdata_file);
                }
                final SubLObject infile = stream_$445;
                if (infile.isStream()) {
                    SubLObject line;
                    SubLObject match;
                    SubLObject path;
                    SubLObject id;
                    for (line = (SubLObject)fact_sheets.NIL, line = file_utilities.cdolines_get_next_line(infile); fact_sheets.NIL != line; line = file_utilities.cdolines_get_next_line(infile)) {
                        match = regular_expression_utilities.regexp_capturing_match((SubLObject)fact_sheets.$str831$factSheetPath__________cyclId____, line, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                        path = (SubLObject)((fact_sheets.NIL != match) ? conses_high.second(match) : fact_sheets.NIL);
                        id = (SubLObject)((fact_sheets.NIL != match) ? conses_high.third(match) : fact_sheets.NIL);
                        if (fact_sheets.NIL != path && fact_sheets.NIL != id) {
                            PrintLow.format(s, (SubLObject)fact_sheets.$str832$RewriteCond________1___A___, id);
                            PrintLow.format(s, (SubLObject)fact_sheets.$str833$RewriteRule________scratch_www_in, path);
                        }
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream_$445.isStream()) {
                        streams_high.close(stream_$445, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
            }
        }
        return out_file;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 247297L)
    public static SubLObject convert_search_data_to_sql_file(SubLObject searchdata_file, SubLObject out_file) {
        if (searchdata_file == fact_sheets.UNPROVIDED) {
            searchdata_file = fact_sheets.$incyc_searchdata_xml_file$.getDynamicValue();
        }
        if (out_file == fact_sheets.UNPROVIDED) {
            out_file = fact_sheets.$incyc_searchdata_sql_file$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                stream = compatibility.open_text(out_file, (SubLObject)fact_sheets.$kw283$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, out_file);
            }
            final SubLObject s = stream;
            PrintLow.format(s, (SubLObject)fact_sheets.$str834$_A__, (SubLObject)fact_sheets.$str835$DROP_TABLE_HAS_INCYC_PAGE_);
            PrintLow.format(s, (SubLObject)fact_sheets.$str834$_A__, (SubLObject)fact_sheets.$str836$CREATE_TABLE_HAS_INCYC_PAGE__EXTE);
            SubLObject current_line = (SubLObject)fact_sheets.ZERO_INTEGER;
            SubLObject values = (SubLObject)fact_sheets.NIL;
            SubLObject stream_$446 = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream_$446 = compatibility.open_text(searchdata_file, (SubLObject)fact_sheets.$kw505$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
                }
                if (!stream_$446.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, searchdata_file);
                }
                final SubLObject infile = stream_$446;
                if (infile.isStream()) {
                    SubLObject line;
                    SubLObject match;
                    SubLObject id;
                    SubLObject value_lines;
                    for (line = (SubLObject)fact_sheets.NIL, line = file_utilities.cdolines_get_next_line(infile); fact_sheets.NIL != line; line = file_utilities.cdolines_get_next_line(infile)) {
                        match = regular_expression_utilities.regexp_capturing_match((SubLObject)fact_sheets.$str837$cyclId________, line, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                        id = (SubLObject)((fact_sheets.NIL != match) ? conses_high.second(match) : fact_sheets.NIL);
                        if (fact_sheets.NIL != id) {
                            current_line = Numbers.add(current_line, (SubLObject)fact_sheets.ONE_INTEGER);
                            if (Numbers.mod(current_line, (SubLObject)fact_sheets.$int580$50).eql((SubLObject)fact_sheets.ZERO_INTEGER)) {
                                value_lines = string_utilities.bunge_with_string(values, (SubLObject)fact_sheets.$str838$__);
                                PrintLow.format(s, (SubLObject)fact_sheets.$str839$INSERT_INTO_InCyc_Pages__EXTERNAL, value_lines);
                                values = (SubLObject)fact_sheets.NIL;
                            }
                            else {
                                values = (SubLObject)ConsesLow.cons(Sequences.cconcatenate((SubLObject)fact_sheets.$str840$__, new SubLObject[] { format_nil.format_nil_a_no_copy(id), fact_sheets.$str841$__ }), values);
                            }
                        }
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (stream_$446.isStream()) {
                        streams_high.close(stream_$446, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                }
            }
            if (fact_sheets.NIL != values) {
                final SubLObject value_lines2 = string_utilities.bunge_with_string(values, (SubLObject)fact_sheets.$str838$__);
                PrintLow.format(s, (SubLObject)fact_sheets.$str839$INSERT_INTO_InCyc_Pages__EXTERNAL, value_lines2);
                values = (SubLObject)fact_sheets.NIL;
            }
        }
        finally {
            final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
            }
        }
        return out_file;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 248333L)
    public static SubLObject get_existing_public_fact_sheet_term_pairs(SubLObject directory) {
        if (directory == fact_sheets.UNPROVIDED) {
            directory = fact_sheets.$incyc_factsheet_staging_directory$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject dict = dictionary.new_dictionary(Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED);
        assert fact_sheets.NIL != Filesys.directory_p(directory) : directory;
        SubLObject directory_list_var = (SubLObject)ConsesLow.list(directory);
        SubLObject current_directory_var = (SubLObject)fact_sheets.NIL;
        current_directory_var = directory_list_var.first();
        while (fact_sheets.NIL != directory_list_var) {
            directory_list_var = directory_list_var.rest();
            assert fact_sheets.NIL != Filesys.directory_p(current_directory_var) : current_directory_var;
            SubLObject directory_contents_var = Filesys.directory(current_directory_var, (SubLObject)fact_sheets.T);
            final SubLObject progress_message_var = (SubLObject)(fact_sheets.$str842$Mapping_public_fact_sheet_files__.isString() ? Sequences.cconcatenate((SubLObject)fact_sheets.$str842$Mapping_public_fact_sheet_files__, Sequences.cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { fact_sheets.$str516$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) })) : fact_sheets.NIL);
            final SubLObject _prev_bind_0 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$silent_progressP$.bind((SubLObject)SubLObjectFactory.makeBoolean(!progress_message_var.isString()), thread);
                if (fact_sheets.NIL.isFunctionSpec()) {
                    directory_contents_var = Sort.sort(directory_contents_var, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED);
                }
                final SubLObject list_var = directory_contents_var;
                final SubLObject _prev_bind_0_$447 = utilities_macros.$progress_note$.currentBinding(thread);
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                try {
                    utilities_macros.$progress_note$.bind((SubLObject)((fact_sheets.NIL != progress_message_var) ? progress_message_var : fact_sheets.$str499$cdolist), thread);
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
                    utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                    try {
                        utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                        SubLObject csome_list_var = list_var;
                        SubLObject file = (SubLObject)fact_sheets.NIL;
                        file = csome_list_var.first();
                        while (fact_sheets.NIL != csome_list_var) {
                            if (fact_sheets.NIL != Filesys.directory_p(file)) {
                                directory_list_var = (SubLObject)ConsesLow.cons(file, directory_list_var);
                            }
                            else if (fact_sheets.NIL != string_utilities.ends_with(file, (SubLObject)fact_sheets.$str513$_html, (SubLObject)fact_sheets.UNPROVIDED)) {
                                final SubLObject local_filename = Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ONE_INTEGER), file_utilities.deconstruct_path(file));
                                final SubLObject fact_sheet_term_id = string_utilities.post_remove(local_filename, (SubLObject)fact_sheets.$str513$_html, (SubLObject)fact_sheets.UNPROVIDED);
                                final SubLObject v_term = (SubLObject)((fact_sheets.NIL != possible_fact_sheet_term_id_p(fact_sheet_term_id)) ? fact_sheet_term_from_id(fact_sheet_term_id, (SubLObject)fact_sheets.UNPROVIDED) : fact_sheets.NIL);
                                if (fact_sheets.NIL != v_term) {
                                    dictionary.dictionary_enter(dict, v_term, file);
                                }
                            }
                            utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                            utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                            csome_list_var = csome_list_var.rest();
                            file = csome_list_var.first();
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$448 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            utilities_macros.noting_percent_progress_postamble();
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$448, thread);
                        }
                    }
                }
                finally {
                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    utilities_macros.$progress_note$.rebind(_prev_bind_0_$447, thread);
                }
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_0, thread);
            }
            current_directory_var = directory_list_var.first();
        }
        return dict;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 249099L)
    public static SubLObject get_public_fact_sheet_string_url_mappings_as_json(SubLObject fact_sheets_directory, SubLObject filename, SubLObject fs_type) {
        if (fact_sheets_directory == fact_sheets.UNPROVIDED) {
            fact_sheets_directory = fact_sheets.$incyc_factsheet_staging_directory$.getDynamicValue();
        }
        if (filename == fact_sheets.UNPROVIDED) {
            filename = fact_sheets.$incyc_searchdata_staging_file$.getDynamicValue();
        }
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject terms = set.set_element_list(terms_for_public_fact_sheets(fs_type));
        final SubLObject mappings = get_public_fact_sheet_string_url_mappings(terms, fs_type);
        final SubLObject active_mappings = filter_mappings_for_good_urls(mappings, fact_sheets_directory);
        SubLObject mapping_progress = (SubLObject)fact_sheets.ZERO_INTEGER;
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                stream = compatibility.open_text(filename, (SubLObject)fact_sheets.$kw283$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, filename);
            }
            final SubLObject s = stream;
            print_high.princ((SubLObject)fact_sheets.$str843$var_searchData____, s);
            SubLObject so_far = (SubLObject)fact_sheets.ZERO_INTEGER;
            final SubLObject total = dictionary.dictionary_length(active_mappings);
            final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
            try {
                utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                try {
                    utilities_macros.noting_percent_progress_preamble((SubLObject)fact_sheets.$str844$writing_json);
                    SubLObject iteration_state;
                    for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(active_mappings)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                        thread.resetMultipleValues();
                        final SubLObject string = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                        final SubLObject terms_urls = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        mapping_progress = Numbers.add(mapping_progress, (SubLObject)fact_sheets.ONE_INTEGER);
                        print_one_string_term_url_mapping_as_json(string, terms_urls, s);
                        if (mapping_progress.numL(dictionary.dictionary_length(active_mappings))) {
                            print_high.princ((SubLObject)fact_sheets.$str845$_, s);
                        }
                        so_far = Numbers.add(so_far, (SubLObject)fact_sheets.ONE_INTEGER);
                        utilities_macros.note_percent_progress(so_far, total);
                    }
                    dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                }
                finally {
                    final SubLObject _prev_bind_0_$449 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        utilities_macros.noting_percent_progress_postamble();
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$449, thread);
                    }
                }
            }
            finally {
                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
            }
            print_high.princ((SubLObject)fact_sheets.$str846$_, s);
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return filename;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 249952L)
    public static SubLObject print_one_string_term_url_mapping_as_json(final SubLObject string, final SubLObject terms_urls, final SubLObject stream) {
        final SubLObject clean_string = string_utilities.do_string_substitutions_robust(string, (SubLObject)fact_sheets.$list847, (SubLObject)fact_sheets.UNPROVIDED);
        PrintLow.format(stream, (SubLObject)fact_sheets.$str848$__A_, clean_string);
        print_high.princ((SubLObject)fact_sheets.$str849$___, stream);
        if (fact_sheets.NIL != terms_urls) {
            PrintLow.format(stream, (SubLObject)fact_sheets.$str848$__A_, terms_urls.first());
            SubLObject cdolist_list_var = terms_urls.rest();
            SubLObject term_url = (SubLObject)fact_sheets.NIL;
            term_url = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                print_high.princ((SubLObject)fact_sheets.$str838$__, stream);
                PrintLow.format(stream, (SubLObject)fact_sheets.$str848$__A_, term_url);
                cdolist_list_var = cdolist_list_var.rest();
                term_url = cdolist_list_var.first();
            }
            print_high.princ((SubLObject)fact_sheets.$str850$_, stream);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 250409L)
    public static SubLObject filter_mappings_for_good_urls(final SubLObject mappings, final SubLObject fact_sheets_directory) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject new_mappings = dictionary.new_dictionary((SubLObject)fact_sheets.EQUAL, dictionary.dictionary_length(mappings));
        SubLObject so_far = (SubLObject)fact_sheets.ZERO_INTEGER;
        final SubLObject total = dictionary.dictionary_length(mappings);
        final SubLObject _prev_bind_0 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
        try {
            utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
            try {
                utilities_macros.noting_percent_progress_preamble((SubLObject)fact_sheets.$str851$checking_for_fact_sheets);
                SubLObject iteration_state;
                for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mappings)); fact_sheets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                    thread.resetMultipleValues();
                    final SubLObject string = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                    final SubLObject terms_urls = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    SubLObject cdolist_list_var = terms_urls;
                    SubLObject term_url = (SubLObject)fact_sheets.NIL;
                    term_url = cdolist_list_var.first();
                    while (fact_sheets.NIL != cdolist_list_var) {
                        SubLObject current;
                        final SubLObject datum = current = term_url;
                        SubLObject v_term = (SubLObject)fact_sheets.NIL;
                        SubLObject url = (SubLObject)fact_sheets.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list821);
                        v_term = current.first();
                        current = current.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list821);
                        url = current.first();
                        current = current.rest();
                        if (fact_sheets.NIL == current) {
                            if (fact_sheets.NIL != file_utilities.file_existsP(Sequences.cconcatenate(fact_sheets_directory, url))) {
                                dictionary_utilities.dictionary_push(new_mappings, string, url);
                            }
                        }
                        else {
                            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list821);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        term_url = cdolist_list_var.first();
                    }
                    so_far = Numbers.add(so_far, (SubLObject)fact_sheets.ONE_INTEGER);
                    utilities_macros.note_percent_progress(so_far, total);
                }
                dictionary_contents.do_dictionary_contents_finalize(iteration_state);
            }
            finally {
                final SubLObject _prev_bind_0_$450 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    utilities_macros.noting_percent_progress_postamble();
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$450, thread);
                }
            }
        }
        finally {
            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0, thread);
        }
        return new_mappings;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 250887L)
    public static SubLObject fact_sheet_properties_for_type(final SubLObject type) {
        return conses_high.getf(get_public_fact_sheet_properties(), type, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 250999L)
    public static SubLObject get_fs_collection_name(final SubLObject type) {
        return conses_high.getf(conses_high.getf(get_public_fact_sheet_properties(), type, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$kw852$COLLECTION_NAME, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 251126L)
    public static SubLObject get_fs_whitelist_types(final SubLObject type) {
        return conses_high.getf(conses_high.getf(get_public_fact_sheet_properties(), type, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$kw853$ROOT_TYPES, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 251248L)
    public static SubLObject get_fs_blacklist_types(final SubLObject type) {
        return conses_high.getf(conses_high.getf(get_public_fact_sheet_properties(), type, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$kw854$BLACKLIST_TYPES, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 251375L)
    public static SubLObject get_fs_quoted_blacklist_types(final SubLObject type) {
        return conses_high.getf(conses_high.getf(get_public_fact_sheet_properties(), type, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$kw855$BLACKLIST_QUOTED_TYPES, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 251516L)
    public static SubLObject get_fs_blacklist_sources(final SubLObject type) {
        return conses_high.getf(conses_high.getf(get_public_fact_sheet_properties(), type, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$kw164$BLACKLIST_SOURCES, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 251647L)
    public static SubLObject get_fs_default_starting_points_filename(final SubLObject type) {
        return conses_high.getf(conses_high.getf(get_public_fact_sheet_properties(), type, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$kw856$DEFAULT_STARTING_POINTS_FILENAME, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 251810L)
    public static SubLObject get_domain_mt_for_fs_type(final SubLObject type) {
        final SubLObject stored_mt = conses_high.getf(conses_high.getf(get_public_fact_sheet_properties(), type, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$kw690$DOMAIN_MT, (SubLObject)fact_sheets.UNPROVIDED);
        if (fact_sheets.NIL != stored_mt) {
            return stored_mt;
        }
        return fact_sheet_anytime_mt((SubLObject)ConsesLow.listS(fact_sheets.$const69$MtUnionFn, fact_sheet_default_domain_mt(), (SubLObject)fact_sheets.$list857));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 252092L)
    public static SubLObject category_label_from_properties(final SubLObject pred, final SubLObject v_properties) {
        final SubLObject pred_labels = conses_high.getf(v_properties, (SubLObject)fact_sheets.$kw858$CATEGORY_LABELS, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject new_label = (SubLObject)((fact_sheets.NIL != conses_high.assoc(pred, pred_labels, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) ? conses_high.assoc(pred, pred_labels, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED).rest() : fact_sheets.NIL);
        return new_label;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 252322L)
    public static SubLObject new_category_label(final SubLObject pred, final SubLObject string) {
        return (SubLObject)ConsesLow.list(pred, string);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 252400L)
    public static SubLObject category_label_string(final SubLObject label) {
        return conses_high.second(label);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 252471L)
    public static SubLObject category_label_pred(final SubLObject label) {
        if (!label.isList()) {
            return (SubLObject)fact_sheets.NIL;
        }
        return label.first();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 252579L)
    public static SubLObject category_label_style(final SubLObject label) {
        if (label.isString()) {
            return list_utilities.remove_if_not((SubLObject)fact_sheets.$sym859$ALPHANUMERICP, label, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return list_utilities.remove_if_not((SubLObject)fact_sheets.$sym859$ALPHANUMERICP, string_utilities.to_string(category_label_pred(label)), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 252778L)
    public static SubLObject get_sort_fn_from_properties(final SubLObject props) {
        return conses_high.getf(props, (SubLObject)fact_sheets.$kw860$SORT_FN, (SubLObject)fact_sheets.$sym861$DEFAULT_FACT_SHEET_PARAGRAPH_RETRIEVAL_TIME_SORT_FN);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 252915L)
    public static SubLObject default_fact_sheet_paragraph_retrieval_time_sort_fn(final SubLObject data1, final SubLObject data2) {
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 253034L)
    public static SubLObject incyc_higher_priority_categoryP(final SubLObject data1, final SubLObject data2) {
        final SubLObject pred1 = data1.first();
        final SubLObject pred2 = data2.first();
        if (fact_sheets.NIL != subl_promotions.memberP(pred2, (SubLObject)fact_sheets.$list862, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            return (SubLObject)fact_sheets.T;
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 253372L)
    public static SubLObject get_public_fact_sheet_properties() {
        if (fact_sheets.NIL == fact_sheets.$public_fact_sheet_properties$.getGlobalValue()) {
            fact_sheets.$public_fact_sheet_properties$.setGlobalValue((SubLObject)ConsesLow.list((SubLObject)fact_sheets.$kw800$INCYC, (SubLObject)ConsesLow.listS((SubLObject)fact_sheets.$kw852$COLLECTION_NAME, new SubLObject[] { fact_sheets.$str863$incyc, fact_sheets.$kw475$DISPLAY_TITLE_, fact_sheets.T, fact_sheets.$kw477$SHOW_COPYRIGHT_, fact_sheets.T, fact_sheets.$kw476$PRINT_STATS_, fact_sheets.NIL, fact_sheets.$kw192$SHOW_AD_, fact_sheets.T, fact_sheets.$kw193$SHOW_INFO_LINK_URL, fact_sheets.$str864$______info_html, fact_sheets.$kw191$STYLESHEET, fact_sheets.$str865$______styles_css, fact_sheets.$kw317$BRANDING_INFO, ConsesLow.listS((SubLObject)fact_sheets.$str866$______index_html, (SubLObject)fact_sheets.$str867$______img_inCyc_beta_png, fact_sheets.$fact_sheet_in_cyc_logo$.getGlobalValue(), (SubLObject)fact_sheets.$list868), fact_sheets.$kw162$ALLOWED_TERM_TYPE, fact_sheets.$kw180$NON_PROPRIETARY, fact_sheets.$kw194$SHOW_URI_, fact_sheets.T, fact_sheets.$kw195$SHOW_FOLLOWUP_WIDGET_, fact_sheets.T, fact_sheets.$kw853$ROOT_TYPES, fact_sheets.$list869, fact_sheets.$kw854$BLACKLIST_TYPES, fact_sheets.$list870, fact_sheets.$kw855$BLACKLIST_QUOTED_TYPES, fact_sheets.$list871, fact_sheets.$kw164$BLACKLIST_SOURCES, Sequences.cconcatenate((SubLObject)fact_sheets.$list872, function_terms.narts_of_function(fact_sheets.$const873$HPACMaterialFileFn)), fact_sheets.$list874 }), (SubLObject)fact_sheets.$kw875$AKB, (SubLObject)ConsesLow.list(new SubLObject[] { fact_sheets.$kw852$COLLECTION_NAME, fact_sheets.$str876$analyst_knowledge_base, fact_sheets.$kw475$DISPLAY_TITLE_, fact_sheets.T, fact_sheets.$kw477$SHOW_COPYRIGHT_, fact_sheets.T, fact_sheets.$kw476$PRINT_STATS_, fact_sheets.NIL, fact_sheets.$kw192$SHOW_AD_, fact_sheets.NIL, fact_sheets.$kw193$SHOW_INFO_LINK_URL, fact_sheets.NIL, fact_sheets.$kw191$STYLESHEET, fact_sheets.$str877$___styles_css, fact_sheets.$kw317$BRANDING_INFO, fact_sheets.NIL, fact_sheets.$kw162$ALLOWED_TERM_TYPE, fact_sheets.$kw163$ALL, fact_sheets.$kw195$SHOW_FOLLOWUP_WIDGET_, fact_sheets.T, fact_sheets.$kw853$ROOT_TYPES, fact_sheets.$list878, fact_sheets.$kw854$BLACKLIST_TYPES, fact_sheets.NIL, fact_sheets.$kw855$BLACKLIST_QUOTED_TYPES, fact_sheets.$list879, fact_sheets.$kw856$DEFAULT_STARTING_POINTS_FILENAME, fact_sheets.$str880$data_fact_sheets_public_analyst_k, fact_sheets.$kw690$DOMAIN_MT, fact_sheet_anytime_mt(fact_sheets.$const881$TKBSourceSpindleCollectorMt) })));
        }
        return fact_sheets.$public_fact_sheet_properties$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 255778L)
    public static SubLObject get_public_fact_sheet_for_term(final SubLObject v_term, SubLObject fs_type, SubLObject force_redoP) {
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        if (force_redoP == fact_sheets.UNPROVIDED) {
            force_redoP = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        ensure_public_fact_sheet_for_term(v_term, fs_type, force_redoP);
        thread.resetMultipleValues();
        final SubLObject directory = directory_and_filename_for_public_fact_sheet(v_term, fs_type, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject filename = thread.secondMultipleValue();
        thread.resetMultipleValues();
        return string_utilities.read_string_from_file(filename, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 256114L)
    public static SubLObject start_new_public_fact_sheet_updater(SubLObject fs_type, SubLObject force_redoP) {
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        if (force_redoP == fact_sheets.UNPROVIDED) {
            force_redoP = (SubLObject)fact_sheets.NIL;
        }
        return process_utilities.make_cyc_server_process_with_args(Sequences.cconcatenate((SubLObject)fact_sheets.$str882$Public_Fact_Sheet_Updater_for_, new SubLObject[] { string_utilities.to_string(fs_type), fact_sheets.$str883$_Fact_Sheets }), (SubLObject)fact_sheets.$sym884$ENSURE_ALL_PUBLIC_FACT_SHEETS, (SubLObject)ConsesLow.list(fs_type, force_redoP));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 256402L)
    public static SubLObject ensure_all_public_fact_sheets(SubLObject fs_type, SubLObject force_redoP) {
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        if (force_redoP == fact_sheets.UNPROVIDED) {
            force_redoP = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject set_var = terms_for_public_fact_sheets(fs_type);
        final SubLObject _prev_bind_0 = utilities_macros.$progress_note$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
        try {
            utilities_macros.$progress_note$.bind((SubLObject)fact_sheets.$str885$Ensuring_public_fact_sheets_are_i, thread);
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_total$.bind(set.set_size(set_var), thread);
            utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
            try {
                utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                final SubLObject set_contents_var = set.do_set_internal(set_var);
                SubLObject basis_object;
                SubLObject state;
                SubLObject v_term;
                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)fact_sheets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); fact_sheets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                    v_term = set_contents.do_set_contents_next(basis_object, state);
                    if (fact_sheets.NIL != set_contents.do_set_contents_element_validP(state, v_term)) {
                        ensure_public_fact_sheet_for_term(v_term, fs_type, force_redoP);
                        utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                        utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$451 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    utilities_macros.noting_percent_progress_postamble();
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$451, thread);
                }
            }
        }
        finally {
            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_note$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 256680L)
    public static SubLObject ensure_public_fact_sheet_for_term(final SubLObject v_term, SubLObject fs_type, SubLObject force_redoP) {
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        if (force_redoP == fact_sheets.UNPROVIDED) {
            force_redoP = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject directory = directory_and_filename_for_public_fact_sheet(v_term, fs_type, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject filename = thread.secondMultipleValue();
        thread.resetMultipleValues();
        final SubLObject local_state;
        final SubLObject state = local_state = memoization_state.possibly_new_memoization_state();
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                if (fact_sheets.NIL != force_redoP || fact_sheets.NIL == Filesys.directory_p(directory) || fact_sheets.NIL == file_utilities.file_existsP(filename)) {
                    SubLObject html = (SubLObject)fact_sheets.NIL;
                    SubLObject formatting = (SubLObject)fact_sheets.NIL;
                    final SubLObject _prev_bind_0_$452 = fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = fact_sheets.$use_relative_fact_sheet_image_urlsP$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = fact_sheets.$allow_fact_sheet_evaluationsP$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = fact_sheets.$fact_sheet_use_base_urlP$.currentBinding(thread);
                    try {
                        fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.bind((SubLObject)fact_sheets.T, thread);
                        fact_sheets.$use_relative_fact_sheet_image_urlsP$.bind((SubLObject)fact_sheets.T, thread);
                        fact_sheets.$allow_fact_sheet_evaluationsP$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                        fact_sheets.$fact_sheet_use_base_urlP$.bind((SubLObject)fact_sheets.NIL, thread);
                        final SubLObject datum_evaluated_var = get_fact_sheet_for_term_in_html(v_term, (SubLObject)fact_sheets.$kw67$PUBLIC, (SubLObject)fact_sheets.$kw70$DEFAULT, (SubLObject)fact_sheets.$kw70$DEFAULT, fact_sheet_properties_for_type(fs_type));
                        html = datum_evaluated_var.first();
                        formatting = conses_high.cadr(datum_evaluated_var);
                    }
                    finally {
                        fact_sheets.$fact_sheet_use_base_urlP$.rebind(_prev_bind_4, thread);
                        fact_sheets.$allow_fact_sheet_evaluationsP$.rebind(_prev_bind_3, thread);
                        fact_sheets.$use_relative_fact_sheet_image_urlsP$.rebind(_prev_bind_2, thread);
                        fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.rebind(_prev_bind_0_$452, thread);
                    }
                    html = publicize_fact_sheet_links(html, fs_type);
                    if (fact_sheets.NIL == Filesys.directory_p(directory)) {
                        file_utilities.make_directory_recursive(directory, (SubLObject)fact_sheets.NIL, (SubLObject)((fact_sheets.NIL != chmod_safe_to_useP()) ? fact_sheets.$str509$775 : fact_sheets.NIL));
                    }
                    assert fact_sheets.NIL != Filesys.directory_p(directory) : directory;
                    SubLObject stream = (SubLObject)fact_sheets.NIL;
                    try {
                        final SubLObject _prev_bind_0_$453 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                            stream = compatibility.open_text(filename, (SubLObject)fact_sheets.$kw283$OUTPUT);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$453, thread);
                        }
                        if (!stream.isStream()) {
                            Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, filename);
                        }
                        final SubLObject stream_$454 = stream;
                        streams_high.write_string(html, stream_$454, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    finally {
                        final SubLObject _prev_bind_0_$454 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            if (stream.isStream()) {
                                streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$454, thread);
                        }
                    }
                    if (fact_sheets.NIL != chmod_safe_to_useP()) {
                        file_utilities.chmod(filename, (SubLObject)fact_sheets.$str285$664);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$455 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$455, thread);
                }
            }
        }
        finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
        return filename;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 257948L)
    public static SubLObject publicize_fact_sheet_links(final SubLObject raw_fact_sheet, final SubLObject fs_type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = fact_sheets.$fs_type$.currentBinding(thread);
        try {
            fact_sheets.$fs_type$.bind(fs_type, thread);
            result = replace_fact_sheet_markups_fast(raw_fact_sheet, (SubLObject)fact_sheets.$sym886$PUBLICIZE_FACT_SHEET_LINK, (SubLObject)fact_sheets.UNPROVIDED);
        }
        finally {
            fact_sheets.$fs_type$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 258185L)
    public static SubLObject publicize_fact_sheet_link(final SubLObject v_term, final SubLObject original_open_tag, final SubLObject original_link_tokens, final SubLObject original_close_tag, SubLObject fs_type) {
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = fact_sheets.$fs_type$.getDynamicValue();
        }
        if (v_term == fact_sheets.$kw137$UNKNOWN) {
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str73$, original_link_tokens, (SubLObject)fact_sheets.$str73$);
        }
        if (fact_sheets.NIL != collection_defns.cycl_sentenceP(v_term)) {
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str73$, original_link_tokens, (SubLObject)fact_sheets.$str73$);
        }
        if (fact_sheets.NIL == Sequences.search(fact_sheets.$fact_sheet_bogus_url_prefix$.getGlobalValue(), original_open_tag, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED)) {
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str73$, original_link_tokens, (SubLObject)fact_sheets.$str73$);
        }
        if (fact_sheets.NIL == set.set_memberP(v_term, terms_for_public_fact_sheets(fs_type))) {
            return (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str73$, original_link_tokens, (SubLObject)fact_sheets.$str73$);
        }
        final SubLObject href = relative_filename_for_public_fact_sheet(v_term, fs_type, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject new_open_tag = Sequences.cconcatenate((SubLObject)fact_sheets.$str887$_a_href__, new SubLObject[] { format_nil.format_nil_a_no_copy(href), fact_sheets.$str888$__ });
        return (SubLObject)ConsesLow.list(new_open_tag, original_link_tokens, original_close_tag);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 258940L)
    public static SubLObject update_public_fact_sheets_from_id_file(final SubLObject file_number, SubLObject fs_type, SubLObject write_date_threshold, SubLObject parent_directory) {
        if (fs_type == fact_sheets.UNPROVIDED) {
            fs_type = (SubLObject)fact_sheets.$kw800$INCYC;
        }
        if (write_date_threshold == fact_sheets.UNPROVIDED) {
            write_date_threshold = numeric_date_utilities.universal_time_from_date_and_second(numeric_date_utilities.get_universal_date((SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        if (parent_directory == fact_sheets.UNPROVIDED) {
            parent_directory = Sequences.cconcatenate(string_utilities.bunge(fact_sheet_data_path(), (SubLObject)Characters.CHAR_slash), (SubLObject)fact_sheets.$str585$_term_ids_to_update_);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject already_loggingP = Types.stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
        SubLObject directory = (SubLObject)fact_sheets.NIL;
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject use_new_setupP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == already_loggingP) {
            thread.resetMultipleValues();
            final SubLObject directory_$457 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
            final SubLObject filename_$458 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            directory = directory_$457;
            filename = filename_$458;
            use_new_setupP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != Filesys.directory_p(directory) && filename.isString());
        }
        if (fact_sheets.NIL != use_new_setupP) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_file$.bind((fact_sheets.NIL != use_new_setupP) ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_0_$459 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$459, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
                }
                final SubLObject _prev_bind_0_$460 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
                try {
                    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
                    final SubLObject _prev_bind_0_$461 = fact_sheet_logs.$next_fact_sheet_hourly_report_time$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = fact_sheet_logs.$hourly_fact_sheet_stats$.currentBinding(thread);
                    try {
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.bind((SubLObject)fact_sheets.NIL, thread);
                        fact_sheet_logs.$hourly_fact_sheet_stats$.bind(Vectors.make_vector((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER), thread);
                        fact_sheet_logs.reset_hourly_report_time((SubLObject)fact_sheets.UNPROVIDED);
                        final SubLObject stream_$462 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$462 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$462.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$462))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$462);
                            PrintLow.format(stream_$462, (SubLObject)fact_sheets.$str889$Updating__A_public_fact_sheets_fi, new SubLObject[] { fs_type, file_number, parent_directory });
                            streams_high.force_output(stream_$462);
                        }
                        final SubLObject directory_$458 = Sequences.cconcatenate(parent_directory, new SubLObject[] { get_fs_collection_name(fs_type), fact_sheets.$str500$_ });
                        final SubLObject filename_$459 = fact_sheet_term_id_filename(directory_$458, file_number);
                        if (fact_sheets.NIL != file_utilities.file_existsP(filename_$459)) {
                            final SubLObject list_var;
                            final SubLObject term_ids = list_var = cfasl_utilities.cfasl_load(filename_$459);
                            final SubLObject _prev_bind_0_$462 = utilities_macros.$progress_note$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$466 = utilities_macros.$progress_start_time$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
                            final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                            final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                            final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                            final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                            try {
                                utilities_macros.$progress_note$.bind((SubLObject)((fact_sheets.NIL != Sequences.cconcatenate((SubLObject)fact_sheets.$str551$Updating_, new SubLObject[] { format_nil.format_nil_a_no_copy(fs_type), fact_sheets.$str890$_public_fact_sheets_from_, format_nil.format_nil_a_no_copy(filename_$459), fact_sheets.$str766$__, format_nil.format_nil_a_no_copy(Filesys.probe_file(filename_$459)) })) ? Sequences.cconcatenate((SubLObject)fact_sheets.$str551$Updating_, new SubLObject[] { format_nil.format_nil_a_no_copy(fs_type), fact_sheets.$str890$_public_fact_sheets_from_, format_nil.format_nil_a_no_copy(filename_$459), fact_sheets.$str766$__, format_nil.format_nil_a_no_copy(Filesys.probe_file(filename_$459)) }) : fact_sheets.$str499$cdolist), thread);
                                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                                utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
                                utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                try {
                                    utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                    SubLObject csome_list_var = list_var;
                                    SubLObject term_id = (SubLObject)fact_sheets.NIL;
                                    term_id = csome_list_var.first();
                                    while (fact_sheets.NIL != csome_list_var) {
                                        final SubLObject v_term = fact_sheet_term_from_id(term_id, (SubLObject)fact_sheets.UNPROVIDED);
                                        if (fact_sheets.NIL != v_term) {
                                            final SubLObject fact_sheet_file = Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ONE_INTEGER), directory_and_filename_for_public_fact_sheet(v_term, fs_type, (SubLObject)fact_sheets.UNPROVIDED));
                                            final SubLObject file_write_date = (SubLObject)((fact_sheets.NIL != file_utilities.file_existsP(fact_sheet_file)) ? Filesys.file_write_date(fact_sheet_file) : fact_sheets.ZERO_INTEGER);
                                            if (file_write_date.numG(write_date_threshold)) {
                                                final SubLObject stream_$463 = fact_sheet_logs.fact_sheet_log_stream();
                                                if ((fact_sheets.T == stream_$463 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$463.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$463))) {
                                                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$463);
                                                    PrintLow.format(stream_$463, (SubLObject)fact_sheets.$str593$Skipping__S__which_was_updated_on, v_term, numeric_date_utilities.get_universal_date(file_write_date, (SubLObject)fact_sheets.UNPROVIDED));
                                                    streams_high.force_output(stream_$463);
                                                }
                                            }
                                            else {
                                                ensure_public_fact_sheet_for_term(v_term, fs_type, (SubLObject)fact_sheets.T);
                                            }
                                        }
                                        else {
                                            final SubLObject stream_$464 = fact_sheet_logs.fact_sheet_log_stream();
                                            if ((fact_sheets.T == stream_$464 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$464.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$464))) {
                                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$464);
                                                PrintLow.format(stream_$464, (SubLObject)fact_sheets.$str891$Couldn_t_find_term_for_id___S__, term_id);
                                                streams_high.force_output(stream_$464);
                                            }
                                        }
                                        utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                                        utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                        csome_list_var = csome_list_var.rest();
                                        term_id = csome_list_var.first();
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$463 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        utilities_macros.noting_percent_progress_postamble();
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$463, thread);
                                    }
                                }
                            }
                            finally {
                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                                utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                                utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
                                utilities_macros.$progress_start_time$.rebind(_prev_bind_1_$466, thread);
                                utilities_macros.$progress_note$.rebind(_prev_bind_0_$462, thread);
                            }
                        }
                        else {
                            final SubLObject stream_$465 = fact_sheet_logs.fact_sheet_log_stream();
                            if ((fact_sheets.T == stream_$465 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$465.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$465))) {
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$465);
                                PrintLow.format(stream_$465, (SubLObject)fact_sheets.$str892$Couldn_t_find_datafile___S, filename_$459);
                                streams_high.force_output(stream_$465);
                            }
                        }
                    }
                    finally {
                        fact_sheet_logs.$hourly_fact_sheet_stats$.rebind(_prev_bind_2, thread);
                        fact_sheet_logs.$next_fact_sheet_hourly_report_time$.rebind(_prev_bind_0_$461, thread);
                    }
                    if (fact_sheets.NIL != use_new_setupP) {
                        final SubLObject stream_$466 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$466 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$466.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$466))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$466);
                            PrintLow.format(stream_$466, (SubLObject)fact_sheets.$str548$Closing_log_);
                            streams_high.force_output(stream_$466);
                        }
                        fact_sheet_logs.note_fact_sheet_log_file_closed((SubLObject)fact_sheets.UNPROVIDED);
                    }
                }
                finally {
                    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$460, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$464 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$464, thread);
                }
            }
        }
        finally {
            fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
        }
        return file_number;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 260751L)
    public static SubLObject any_token_containsP(final SubLObject search_string, final SubLObject token_list) {
        SubLObject result = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == result) {
            SubLObject csome_list_var;
            SubLObject token;
            for (csome_list_var = token_list, token = (SubLObject)fact_sheets.NIL, token = csome_list_var.first(); fact_sheets.NIL == result && fact_sheets.NIL != csome_list_var; result = Sequences.search(search_string, token, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), csome_list_var = csome_list_var.rest(), token = csome_list_var.first()) {}
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 260945L)
    public static SubLObject write_public_fact_sheets_starting_points_data(final SubLObject fs_type, SubLObject destination_filename) {
        if (destination_filename == fact_sheets.UNPROVIDED) {
            destination_filename = (SubLObject)fact_sheets.NIL;
        }
        final SubLObject destination = (fact_sheets.NIL != destination_filename) ? destination_filename : get_fs_default_starting_points_filename(fs_type);
        return write_public_fact_sheets_starting_points_data_int(destination, suggested_starting_points_for_public_fact_sheet_browsing(fs_type), fs_type);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 261535L)
    public static SubLObject write_public_fact_sheets_starting_points_data_int(final SubLObject destination_filename, final SubLObject starting_points, final SubLObject fs_type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stream = (SubLObject)fact_sheets.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                stream = compatibility.open_text(destination_filename, (SubLObject)fact_sheets.$kw283$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, destination_filename);
            }
            final SubLObject stream_$473 = stream;
            final SubLObject _prev_bind_2 = utilities_macros.$progress_note$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_total$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_sofar$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
            final SubLObject _prev_bind_9 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
            try {
                utilities_macros.$progress_note$.bind((SubLObject)fact_sheets.$str893$Writing_fact_sheet_starting_point, thread);
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_total$.bind(Sequences.length(starting_points), thread);
                utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                try {
                    utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                    SubLObject csome_list_var = starting_points;
                    SubLObject v_term = (SubLObject)fact_sheets.NIL;
                    v_term = csome_list_var.first();
                    while (fact_sheets.NIL != csome_list_var) {
                        if (fact_sheets.NIL != public_fact_sheet_starting_point_okP(v_term, fs_type)) {
                            thread.resetMultipleValues();
                            final SubLObject directory = directory_and_filename_for_public_fact_sheet(v_term, fs_type, (SubLObject)fact_sheets.UNPROVIDED);
                            final SubLObject filename = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            final SubLObject file_length = file_utilities.get_file_length(filename);
                            final SubLObject href = string_utilities.pre_remove(relative_filename_for_public_fact_sheet(v_term, fs_type, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$str894$___, (SubLObject)fact_sheets.UNPROVIDED);
                            final SubLObject _prev_bind_0_$474 = fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.currentBinding(thread);
                            try {
                                fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.bind((SubLObject)fact_sheets.T, thread);
                                final SubLObject term_paraphrase = fact_sheet_title(v_term);
                                final SubLObject _prev_bind_0_$475 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$476 = mt_relevance_macros.$mt$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)fact_sheets.$sym582$RELEVANT_MT_IS_EVERYTHING, thread);
                                    mt_relevance_macros.$mt$.bind(fact_sheets.$const583$EverythingPSC, thread);
                                    SubLObject cdolist_list_var;
                                    final SubLObject cols = cdolist_list_var = Sequences.remove(v_term, conses_high.union(isa.all_isa(v_term, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), genls.all_genls(v_term, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                                    SubLObject type = (SubLObject)fact_sheets.NIL;
                                    type = cdolist_list_var.first();
                                    while (fact_sheets.NIL != cdolist_list_var) {
                                        if (fact_sheets.NIL != public_fact_sheet_starting_point_okP(type, fs_type)) {
                                            final SubLObject type_href = string_utilities.pre_remove(relative_filename_for_public_fact_sheet(type, fs_type, (SubLObject)fact_sheets.UNPROVIDED), (SubLObject)fact_sheets.$str894$___, (SubLObject)fact_sheets.UNPROVIDED);
                                            final SubLObject _prev_bind_0_$476 = fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.currentBinding(thread);
                                            try {
                                                fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.bind((SubLObject)fact_sheets.T, thread);
                                                final SubLObject type_paraphrase = fact_sheet_title(type);
                                                SubLObject printed_oneP = (SubLObject)fact_sheets.NIL;
                                                SubLObject cdolist_list_var_$478 = (SubLObject)ConsesLow.list(type_paraphrase, term_paraphrase, file_length, type_href, href);
                                                SubLObject datum = (SubLObject)fact_sheets.NIL;
                                                datum = cdolist_list_var_$478.first();
                                                while (fact_sheets.NIL != cdolist_list_var_$478) {
                                                    if (fact_sheets.NIL != printed_oneP) {
                                                        print_high.princ((SubLObject)Characters.CHAR_tab, stream_$473);
                                                    }
                                                    print_high.princ(datum, stream_$473);
                                                    printed_oneP = (SubLObject)fact_sheets.T;
                                                    cdolist_list_var_$478 = cdolist_list_var_$478.rest();
                                                    datum = cdolist_list_var_$478.first();
                                                }
                                                streams_high.terpri(stream_$473);
                                            }
                                            finally {
                                                fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.rebind(_prev_bind_0_$476, thread);
                                            }
                                        }
                                        cdolist_list_var = cdolist_list_var.rest();
                                        type = cdolist_list_var.first();
                                    }
                                }
                                finally {
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_1_$476, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$475, thread);
                                }
                            }
                            finally {
                                fact_sheets.$fact_sheet_term_paraphrase_for_titleP$.rebind(_prev_bind_0_$474, thread);
                            }
                        }
                        utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                        utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                        csome_list_var = csome_list_var.rest();
                        v_term = csome_list_var.first();
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$477 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        utilities_macros.noting_percent_progress_postamble();
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$477, thread);
                    }
                }
            }
            finally {
                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_9, thread);
                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_8, thread);
                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_7, thread);
                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_sofar$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_total$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_note$.rebind(_prev_bind_2, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
            }
        }
        return destination_filename;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 262929L)
    public static SubLObject public_fact_sheet_starting_point_okP(final SubLObject v_term, final SubLObject fs_type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject okP = (SubLObject)fact_sheets.NIL;
        thread.resetMultipleValues();
        final SubLObject directory = directory_and_filename_for_public_fact_sheet(v_term, fs_type, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject filename = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (fact_sheets.NIL != Filesys.directory_p(directory) && fact_sheets.NIL != file_utilities.file_existsP(filename) && file_utilities.get_file_length(filename).numG((SubLObject)fact_sheets.$int895$1500)) {
            okP = (SubLObject)fact_sheets.T;
        }
        return okP;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 263274L)
    public static SubLObject suggested_starting_points_for_public_fact_sheet_browsing(final SubLObject fs_type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject sorted = Sort.sort(set.set_element_list(terms_for_public_fact_sheets(fs_type)), Symbols.symbol_function((SubLObject)fact_sheets.$sym313$_), Symbols.symbol_function((SubLObject)fact_sheets.$sym896$CACHED_NUM_GAF_ARG_INDEX));
        final SubLObject done_types = set.new_set(Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED);
        SubLObject starting_points = (SubLObject)fact_sheets.NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)fact_sheets.$sym582$RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind(fact_sheets.$const583$EverythingPSC, thread);
            SubLObject cdolist_list_var = sorted;
            SubLObject v_term = (SubLObject)fact_sheets.NIL;
            v_term = cdolist_list_var.first();
            while (fact_sheets.NIL != cdolist_list_var) {
                SubLObject newP = (SubLObject)fact_sheets.NIL;
                final SubLObject types = isa.min_isa(v_term, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                if (fact_sheets.NIL == newP) {
                    SubLObject csome_list_var = types;
                    SubLObject type = (SubLObject)fact_sheets.NIL;
                    type = csome_list_var.first();
                    while (fact_sheets.NIL == newP && fact_sheets.NIL != csome_list_var) {
                        if (fact_sheets.NIL == set.set_memberP(type, done_types)) {
                            newP = (SubLObject)fact_sheets.T;
                        }
                        csome_list_var = csome_list_var.rest();
                        type = csome_list_var.first();
                    }
                }
                if (fact_sheets.NIL != newP) {
                    starting_points = (SubLObject)ConsesLow.cons(v_term, starting_points);
                    set_utilities.set_add_all(types, done_types);
                }
                cdolist_list_var = cdolist_list_var.rest();
                v_term = cdolist_list_var.first();
            }
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return Sequences.nreverse(starting_points);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 263844L)
    public static SubLObject clear_cached_num_gaf_arg_index() {
        final SubLObject cs = fact_sheets.$cached_num_gaf_arg_index_caching_state$.getGlobalValue();
        if (fact_sheets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 263844L)
    public static SubLObject remove_cached_num_gaf_arg_index(final SubLObject v_term) {
        return memoization_state.caching_state_remove_function_results_with_args(fact_sheets.$cached_num_gaf_arg_index_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 263844L)
    public static SubLObject cached_num_gaf_arg_index_internal(final SubLObject v_term) {
        return kb_indexing.num_gaf_arg_index(v_term, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 263844L)
    public static SubLObject cached_num_gaf_arg_index(final SubLObject v_term) {
        SubLObject caching_state = fact_sheets.$cached_num_gaf_arg_index_caching_state$.getGlobalValue();
        if (fact_sheets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)fact_sheets.$sym896$CACHED_NUM_GAF_ARG_INDEX, (SubLObject)fact_sheets.$sym897$_CACHED_NUM_GAF_ARG_INDEX_CACHING_STATE_, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.EQL, (SubLObject)fact_sheets.ONE_INTEGER, (SubLObject)fact_sheets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(cached_num_gaf_arg_index_internal(v_term)));
            memoization_state.caching_state_put(caching_state, v_term, results, (SubLObject)fact_sheets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 263935L)
    public static SubLObject dump_fact_sheet_sentences_old(final SubLObject destination_file, SubLObject root, SubLObject max_count) {
        if (root == fact_sheets.UNPROVIDED) {
            root = Sequences.cconcatenate(file_utilities.cyc_home_subdirectory(fact_sheet_data_path()), (SubLObject)fact_sheets.$str898$normal);
        }
        if (max_count == fact_sheets.UNPROVIDED) {
            max_count = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject stopP = (SubLObject)fact_sheets.NIL;
        SubLObject done_count = (SubLObject)fact_sheets.ZERO_INTEGER;
        final SubLObject progress_message = Sequences.cconcatenate((SubLObject)fact_sheets.$str899$Dumping_fact_sheet_sentences_to_, format_nil.format_nil_s_no_copy(destination_file));
        SubLObject current_directory = (SubLObject)fact_sheets.NIL;
        SubLObject current_directory_okP = (SubLObject)fact_sheets.NIL;
        final SubLObject already_loggingP = Types.stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
        SubLObject directory = (SubLObject)fact_sheets.NIL;
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject use_new_setupP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == already_loggingP) {
            thread.resetMultipleValues();
            final SubLObject directory_$480 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
            final SubLObject filename_$481 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            directory = directory_$480;
            filename = filename_$481;
            use_new_setupP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != Filesys.directory_p(directory) && filename.isString());
        }
        if (fact_sheets.NIL != use_new_setupP) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_file$.bind((fact_sheets.NIL != use_new_setupP) ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_0_$482 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$482, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
                }
                final SubLObject _prev_bind_0_$483 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
                try {
                    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
                    SubLObject stream_$484 = (SubLObject)fact_sheets.NIL;
                    try {
                        final SubLObject _prev_bind_0_$484 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                            stream_$484 = compatibility.open_text(destination_file, (SubLObject)fact_sheets.$kw283$OUTPUT);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$484, thread);
                        }
                        if (!stream_$484.isStream()) {
                            Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, destination_file);
                        }
                        final SubLObject stream_$485 = stream_$484;
                        assert fact_sheets.NIL != Filesys.directory_p(root) : root;
                        SubLObject directory_list_var = (SubLObject)ConsesLow.list(root);
                        SubLObject current_directory_var = (SubLObject)fact_sheets.NIL;
                        current_directory_var = directory_list_var.first();
                        while (fact_sheets.NIL != directory_list_var) {
                            directory_list_var = directory_list_var.rest();
                            assert fact_sheets.NIL != Filesys.directory_p(current_directory_var) : current_directory_var;
                            SubLObject directory_contents_var = Filesys.directory(current_directory_var, (SubLObject)fact_sheets.T);
                            final SubLObject progress_message_var = (SubLObject)(progress_message.isString() ? Sequences.cconcatenate(progress_message, Sequences.cconcatenate(format_nil.$format_nil_percent$.getGlobalValue(), new SubLObject[] { fact_sheets.$str516$_Directory__, format_nil.format_nil_s_no_copy(current_directory_var) })) : fact_sheets.NIL);
                            final SubLObject _prev_bind_0_$485 = utilities_macros.$silent_progressP$.currentBinding(thread);
                            try {
                                utilities_macros.$silent_progressP$.bind((SubLObject)SubLObjectFactory.makeBoolean(!progress_message_var.isString()), thread);
                                if (fact_sheets.NIL.isFunctionSpec()) {
                                    directory_contents_var = Sort.sort(directory_contents_var, (SubLObject)fact_sheets.NIL, (SubLObject)fact_sheets.UNPROVIDED);
                                }
                                final SubLObject list_var = directory_contents_var;
                                final SubLObject _prev_bind_0_$486 = utilities_macros.$progress_note$.currentBinding(thread);
                                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                                final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
                                final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
                                final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                try {
                                    utilities_macros.$progress_note$.bind((SubLObject)((fact_sheets.NIL != progress_message_var) ? progress_message_var : fact_sheets.$str499$cdolist), thread);
                                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                                    utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
                                    utilities_macros.$progress_sofar$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                    try {
                                        utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                        SubLObject csome_list_var = list_var;
                                        SubLObject filename_$482 = (SubLObject)fact_sheets.NIL;
                                        filename_$482 = csome_list_var.first();
                                        while (fact_sheets.NIL != csome_list_var) {
                                            if (fact_sheets.NIL != Filesys.directory_p(filename_$482)) {
                                                directory_list_var = (SubLObject)ConsesLow.cons(filename_$482, directory_list_var);
                                            }
                                            else if (fact_sheets.NIL == stopP) {
                                                final SubLObject this_directory = file_utilities.deconstruct_path(filename_$482);
                                                SubLObject v_term = (SubLObject)fact_sheets.NIL;
                                                if (!this_directory.equal(current_directory)) {
                                                    current_directory = this_directory;
                                                    SubLObject okP = (SubLObject)fact_sheets.NIL;
                                                    if (fact_sheets.NIL != possible_fact_sheet_directory_p(current_directory)) {
                                                        thread.resetMultipleValues();
                                                        final SubLObject this_term = fact_sheet_data_from_filename(filename_$482);
                                                        final SubLObject this_verbosity = thread.secondMultipleValue();
                                                        final SubLObject this_domain_mt = thread.thirdMultipleValue();
                                                        final SubLObject this_language_mt = thread.fourthMultipleValue();
                                                        thread.resetMultipleValues();
                                                        v_term = this_term;
                                                        if (fact_sheets.NIL != this_verbosity && fact_sheets.NIL != this_domain_mt && fact_sheets.NIL != this_language_mt) {
                                                            okP = (current_directory_okP = (SubLObject)fact_sheets.T);
                                                        }
                                                    }
                                                }
                                                if (fact_sheets.NIL != current_directory_okP) {
                                                    done_count = dump_fact_sheet_sentences_for_term(v_term, stream_$485, done_count, max_count);
                                                }
                                            }
                                            utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)fact_sheets.ONE_INTEGER), thread);
                                            utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                            csome_list_var = csome_list_var.rest();
                                            filename_$482 = csome_list_var.first();
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$487 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                            final SubLObject _values = Values.getValuesAsVector();
                                            utilities_macros.noting_percent_progress_postamble();
                                            Values.restoreValuesFromVector(_values);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$487, thread);
                                        }
                                    }
                                }
                                finally {
                                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                                    utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                                    utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
                                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                                    utilities_macros.$progress_note$.rebind(_prev_bind_0_$486, thread);
                                }
                            }
                            finally {
                                utilities_macros.$silent_progressP$.rebind(_prev_bind_0_$485, thread);
                            }
                            current_directory_var = directory_list_var.first();
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$488 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (stream_$484.isStream()) {
                                streams_high.close(stream_$484, (SubLObject)fact_sheets.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$488, thread);
                        }
                    }
                    if (fact_sheets.NIL != use_new_setupP) {
                        final SubLObject stream_$486 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$486 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$486.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$486))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$486);
                            PrintLow.format(stream_$486, (SubLObject)fact_sheets.$str548$Closing_log_);
                            streams_high.force_output(stream_$486);
                        }
                        fact_sheet_logs.note_fact_sheet_log_file_closed((SubLObject)fact_sheets.UNPROVIDED);
                    }
                }
                finally {
                    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$483, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$489 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$489, thread);
                }
            }
        }
        finally {
            fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
        }
        return destination_file;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 265313L)
    public static SubLObject dump_fact_sheet_sentences(final SubLObject destination_file, SubLObject max_count) {
        if (max_count == fact_sheets.UNPROVIDED) {
            max_count = (SubLObject)fact_sheets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stopP = (SubLObject)fact_sheets.NIL;
        SubLObject done_count = (SubLObject)fact_sheets.ZERO_INTEGER;
        final SubLObject progress_message = Sequences.cconcatenate((SubLObject)fact_sheets.$str899$Dumping_fact_sheet_sentences_to_, format_nil.format_nil_s_no_copy(destination_file));
        final SubLObject already_loggingP = Types.stringp(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
        SubLObject directory = (SubLObject)fact_sheets.NIL;
        SubLObject filename = (SubLObject)fact_sheets.NIL;
        SubLObject use_new_setupP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == already_loggingP) {
            thread.resetMultipleValues();
            final SubLObject directory_$494 = fact_sheet_logs.open_new_unique_fact_sheet_log_file();
            final SubLObject filename_$495 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            directory = directory_$494;
            filename = filename_$495;
            use_new_setupP = (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL != Filesys.directory_p(directory) && filename.isString());
        }
        if (fact_sheets.NIL != use_new_setupP) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)fact_sheets.$str543$__Logging_Fact_Sheet_generation_t, filename);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = fact_sheet_logs.$fact_sheet_log_file$.currentBinding(thread);
        try {
            fact_sheet_logs.$fact_sheet_log_file$.bind((fact_sheets.NIL != use_new_setupP) ? filename : fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), thread);
            SubLObject stream = (SubLObject)fact_sheets.NIL;
            try {
                final SubLObject _prev_bind_0_$496 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                    stream = compatibility.open_text(fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread), (SubLObject)fact_sheets.$kw544$APPEND);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$496, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, fact_sheet_logs.$fact_sheet_log_file$.getDynamicValue(thread));
                }
                final SubLObject _prev_bind_0_$497 = fact_sheet_logs.$fact_sheet_log_stream$.currentBinding(thread);
                try {
                    fact_sheet_logs.$fact_sheet_log_stream$.bind(stream, thread);
                    SubLObject stream_$498 = (SubLObject)fact_sheets.NIL;
                    try {
                        final SubLObject _prev_bind_0_$498 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)fact_sheets.NIL, thread);
                            stream_$498 = compatibility.open_text(destination_file, (SubLObject)fact_sheets.$kw283$OUTPUT);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$498, thread);
                        }
                        if (!stream_$498.isStream()) {
                            Errors.error((SubLObject)fact_sheets.$str284$Unable_to_open__S, destination_file);
                        }
                        final SubLObject stream_$499 = stream_$498;
                        final SubLObject message = progress_message;
                        final SubLObject total = forts.fort_count();
                        SubLObject sofar = (SubLObject)fact_sheets.ZERO_INTEGER;
                        final SubLObject _prev_bind_0_$499 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                        try {
                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)fact_sheets.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)fact_sheets.NIL, thread);
                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)fact_sheets.T, thread);
                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                            try {
                                utilities_macros.noting_percent_progress_preamble(message);
                                SubLObject rest;
                                SubLObject idx;
                                SubLObject table_var;
                                SubLObject idx_$502;
                                SubLObject vector_var;
                                SubLObject backwardP_var;
                                SubLObject length;
                                SubLObject current;
                                SubLObject datum;
                                SubLObject start;
                                SubLObject end;
                                SubLObject delta;
                                SubLObject end_var;
                                SubLObject id;
                                SubLObject v_term;
                                SubLObject idx_$503;
                                SubLObject sparse;
                                SubLObject id2;
                                SubLObject end_id;
                                SubLObject v_default;
                                SubLObject v_term2;
                                for (rest = (SubLObject)fact_sheets.NIL, rest = forts.do_forts_tables(); fact_sheets.NIL == stopP && fact_sheets.NIL != rest; rest = rest.rest()) {
                                    table_var = (idx = rest.first());
                                    if (fact_sheets.NIL == id_index.id_index_objects_empty_p(idx, (SubLObject)fact_sheets.$kw603$SKIP)) {
                                        idx_$502 = idx;
                                        if (fact_sheets.NIL == id_index.id_index_dense_objects_empty_p(idx_$502, (SubLObject)fact_sheets.$kw603$SKIP)) {
                                            vector_var = id_index.id_index_dense_objects(idx_$502);
                                            backwardP_var = (SubLObject)fact_sheets.NIL;
                                            length = Sequences.length(vector_var);
                                            datum = (current = (SubLObject)((fact_sheets.NIL != backwardP_var) ? ConsesLow.list(Numbers.subtract(length, (SubLObject)fact_sheets.ONE_INTEGER), (SubLObject)fact_sheets.MINUS_ONE_INTEGER, (SubLObject)fact_sheets.MINUS_ONE_INTEGER) : ConsesLow.list((SubLObject)fact_sheets.ZERO_INTEGER, length, (SubLObject)fact_sheets.ONE_INTEGER)));
                                            start = (SubLObject)fact_sheets.NIL;
                                            end = (SubLObject)fact_sheets.NIL;
                                            delta = (SubLObject)fact_sheets.NIL;
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list609);
                                            start = current.first();
                                            current = current.rest();
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list609);
                                            end = current.first();
                                            current = current.rest();
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list609);
                                            delta = current.first();
                                            current = current.rest();
                                            if (fact_sheets.NIL == current) {
                                                if (fact_sheets.NIL == stopP) {
                                                    for (end_var = end, id = (SubLObject)fact_sheets.NIL, id = start; fact_sheets.NIL == stopP && fact_sheets.NIL == subl_macros.do_numbers_endtest(id, delta, end_var); id = Numbers.add(id, delta)) {
                                                        v_term = Vectors.aref(vector_var, id);
                                                        if (fact_sheets.NIL == id_index.id_index_tombstone_p(v_term) || fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) {
                                                            if (fact_sheets.NIL != id_index.id_index_tombstone_p(v_term)) {
                                                                v_term = (SubLObject)fact_sheets.$kw603$SKIP;
                                                            }
                                                            sofar = Numbers.add(sofar, (SubLObject)fact_sheets.ONE_INTEGER);
                                                            utilities_macros.note_percent_progress(sofar, total);
                                                            done_count = dump_fact_sheet_sentences_for_term(v_term, stream_$499, done_count, max_count);
                                                            if (fact_sheets.NIL != max_count && done_count.numGE(max_count)) {
                                                                stopP = (SubLObject)fact_sheets.T;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)fact_sheets.$list609);
                                            }
                                        }
                                        idx_$503 = idx;
                                        if (fact_sheets.NIL == id_index.id_index_sparse_objects_empty_p(idx_$503) || fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) {
                                            sparse = id_index.id_index_sparse_objects(idx_$503);
                                            id2 = id_index.id_index_sparse_id_threshold(idx_$503);
                                            end_id = id_index.id_index_next_id(idx_$503);
                                            v_default = (SubLObject)((fact_sheets.NIL != id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP)) ? fact_sheets.NIL : fact_sheets.$kw603$SKIP);
                                            while (id2.numL(end_id) && fact_sheets.NIL == stopP) {
                                                v_term2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                                if (fact_sheets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)fact_sheets.$kw603$SKIP) || fact_sheets.NIL == id_index.id_index_tombstone_p(v_term2)) {
                                                    sofar = Numbers.add(sofar, (SubLObject)fact_sheets.ONE_INTEGER);
                                                    utilities_macros.note_percent_progress(sofar, total);
                                                    done_count = dump_fact_sheet_sentences_for_term(v_term2, stream_$499, done_count, max_count);
                                                    if (fact_sheets.NIL != max_count && done_count.numGE(max_count)) {
                                                        stopP = (SubLObject)fact_sheets.T;
                                                    }
                                                }
                                                id2 = Numbers.add(id2, (SubLObject)fact_sheets.ONE_INTEGER);
                                            }
                                        }
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$500 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    utilities_macros.noting_percent_progress_postamble();
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$500, thread);
                                }
                            }
                        }
                        finally {
                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$499, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$501 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (stream_$498.isStream()) {
                                streams_high.close(stream_$498, (SubLObject)fact_sheets.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$501, thread);
                        }
                    }
                    if (fact_sheets.NIL != use_new_setupP) {
                        final SubLObject stream_$500 = fact_sheet_logs.fact_sheet_log_stream();
                        if ((fact_sheets.T == stream_$500 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$500.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$500))) {
                            fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$500);
                            PrintLow.format(stream_$500, (SubLObject)fact_sheets.$str548$Closing_log_);
                            streams_high.force_output(stream_$500);
                        }
                        fact_sheet_logs.note_fact_sheet_log_file_closed((SubLObject)fact_sheets.UNPROVIDED);
                    }
                }
                finally {
                    fact_sheet_logs.$fact_sheet_log_stream$.rebind(_prev_bind_0_$497, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$502 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)fact_sheets.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)fact_sheets.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$502, thread);
                }
            }
        }
        finally {
            fact_sheet_logs.$fact_sheet_log_file$.rebind(_prev_bind_0, thread);
        }
        return destination_file;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 265910L)
    public static SubLObject dump_fact_sheet_sentences_for_term(final SubLObject v_term, final SubLObject stream, SubLObject done_count, final SubLObject max_count) {
        final SubLObject filename = Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)fact_sheets.ONE_INTEGER), directory_and_filename_for_fact_sheet(v_term, (SubLObject)fact_sheets.$kw35$NORMAL, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED));
        final SubLObject cached_data = precached_fact_sheet_data_from_file(filename, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
        final SubLObject data = cached_data.first();
        SubLObject stopP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL != cached_data) {
            final SubLObject stream_$508 = fact_sheet_logs.fact_sheet_log_stream();
            if ((fact_sheets.T == stream_$508 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$508.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$508))) {
                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$508);
                PrintLow.format(stream_$508, (SubLObject)fact_sheets.$str900$Data_for__S_has__D_categories_, fact_sheet_data_from_filename(filename), Sequences.length(data));
                streams_high.force_output(stream_$508);
            }
            SubLObject rest;
            SubLObject cons;
            SubLObject current;
            SubLObject datum;
            SubLObject category;
            SubLObject category_data;
            SubLObject stream_$509;
            SubLObject cdolist_list_var;
            SubLObject paragraph_data;
            SubLObject stream_$510;
            SubLObject rest_$511;
            SubLObject cons_$512;
            SubLObject current_$514;
            SubLObject datum_$513;
            SubLObject cycl_sentence;
            SubLObject value;
            SubLObject string;
            SubLObject stream_$511;
            for (rest = (SubLObject)fact_sheets.NIL, rest = data; fact_sheets.NIL == stopP && fact_sheets.NIL != rest; rest = rest.rest()) {
                cons = rest.first();
                datum = (current = cons);
                category = (SubLObject)fact_sheets.NIL;
                category_data = (SubLObject)fact_sheets.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)fact_sheets.$list901);
                category = current.first();
                current = (category_data = current.rest());
                stream_$509 = fact_sheet_logs.fact_sheet_log_stream();
                if ((fact_sheets.T == stream_$509 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$509.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$509))) {
                    fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$509);
                    PrintLow.format(stream_$509, (SubLObject)fact_sheets.$str902$Doing__S___D_paragraphs___D_sente, new SubLObject[] { category, Sequences.length(category_data), Functions.apply(Symbols.symbol_function((SubLObject)fact_sheets.$sym903$_), Mapping.mapcar((SubLObject)fact_sheets.$sym904$LENGTH, category_data)) });
                    streams_high.force_output(stream_$509);
                }
                cdolist_list_var = category_data;
                paragraph_data = (SubLObject)fact_sheets.NIL;
                paragraph_data = cdolist_list_var.first();
                while (fact_sheets.NIL != cdolist_list_var) {
                    stream_$510 = fact_sheet_logs.fact_sheet_log_stream();
                    if ((fact_sheets.T == stream_$510 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$510.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$510))) {
                        fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str98$NOTE, stream_$510);
                        PrintLow.format(stream_$510, (SubLObject)fact_sheets.$str905$This_paragraph_has__D_sentences_, Sequences.length(paragraph_data));
                        streams_high.force_output(stream_$510);
                    }
                    for (rest_$511 = (SubLObject)fact_sheets.NIL, rest_$511 = paragraph_data; fact_sheets.NIL == stopP && fact_sheets.NIL != rest_$511; rest_$511 = rest_$511.rest()) {
                        cons_$512 = rest_$511.first();
                        datum_$513 = (current_$514 = cons_$512);
                        cycl_sentence = (SubLObject)fact_sheets.NIL;
                        value = (SubLObject)fact_sheets.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current_$514, datum_$513, (SubLObject)fact_sheets.$list906);
                        cycl_sentence = current_$514.first();
                        current_$514 = (value = current_$514.rest());
                        if (fact_sheets.NIL != cycl_grammar.cycl_sentence_p(cycl_sentence)) {
                            string = Sequences.remove((SubLObject)Characters.CHAR_newline, PrintLow.write_to_string(cycl_utilities.hl_to_el(cycl_sentence), fact_sheets.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                            streams_high.write_line(string, stream, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
                            streams_high.force_output(stream);
                            done_count = Numbers.add(done_count, (SubLObject)fact_sheets.ONE_INTEGER);
                            if (fact_sheets.NIL != max_count && done_count.numGE(max_count)) {
                                stopP = (SubLObject)fact_sheets.T;
                            }
                        }
                        else {
                            stream_$511 = fact_sheet_logs.fact_sheet_log_stream();
                            if ((fact_sheets.T == stream_$511 && Threads.current_process().eql(subl_promotions.initial_process())) || (stream_$511.isStream() && fact_sheets.NIL != streams_high.output_stream_p(stream_$511))) {
                                fact_sheet_logs.print_fact_sheet_log_header((SubLObject)fact_sheets.$str205$WARN, stream_$511);
                                PrintLow.format(stream_$511, (SubLObject)fact_sheets.$str907$Non_sentence__S_in__S_for__S, new SubLObject[] { cycl_sentence, paragraph_data, v_term });
                                streams_high.force_output(stream_$511);
                            }
                        }
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    paragraph_data = cdolist_list_var.first();
                }
            }
        }
        return done_count;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 267157L)
    public static SubLObject fact_sheets_term_from_string_containsP(final SubLObject string, final SubLObject required_elements) {
        final SubLObject word_cycl_pairs = get_word_denots_for_fact_sheets(string);
        SubLObject failP = (SubLObject)fact_sheets.NIL;
        if (fact_sheets.NIL == failP) {
            SubLObject csome_list_var = required_elements;
            SubLObject element = (SubLObject)fact_sheets.NIL;
            element = csome_list_var.first();
            while (fact_sheets.NIL == failP && fact_sheets.NIL != csome_list_var) {
                if (fact_sheets.NIL == cycls_are_membersP(element, word_cycl_pairs, (SubLObject)fact_sheets.EQUALP)) {
                    Errors.warn((SubLObject)fact_sheets.$str908$missing_from_parse_result___S__, element);
                    failP = (SubLObject)fact_sheets.T;
                }
                csome_list_var = csome_list_var.rest();
                element = csome_list_var.first();
            }
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(fact_sheets.NIL == failP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/fact-sheets.lisp", position = 267157L)
    public static SubLObject cycls_are_membersP(final SubLObject elt, final SubLObject list, final SubLObject equality) {
        SubLObject desired_string = (SubLObject)fact_sheets.NIL;
        SubLObject desired_cycl = (SubLObject)fact_sheets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(elt, elt, (SubLObject)fact_sheets.$list909);
        desired_string = elt.first();
        SubLObject current = elt.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, elt, (SubLObject)fact_sheets.$list909);
        desired_cycl = current.first();
        current = current.rest();
        if (fact_sheets.NIL == current) {
            final SubLObject matching_elt = Sequences.find(desired_string, cycl_utilities.hl_to_el(list), equality, (SubLObject)fact_sheets.$sym140$FIRST, (SubLObject)fact_sheets.UNPROVIDED, (SubLObject)fact_sheets.UNPROVIDED);
            if (fact_sheets.NIL != list_utilities.lengthGE(conses_high.intersection(conses_high.second(matching_elt), desired_cycl, (SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED), Sequences.length(desired_cycl), (SubLObject)fact_sheets.UNPROVIDED)) {
                return (SubLObject)fact_sheets.T;
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(elt, (SubLObject)fact_sheets.$list909);
        }
        return (SubLObject)fact_sheets.NIL;
    }
    
    public static SubLObject declare_fact_sheets_file() {
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.fact_sheets", "allowing_fact_sheet_evalations", "ALLOWING-FACT-SHEET-EVALATIONS");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.fact_sheets", "disallowing_fact_sheet_evalations", "DISALLOWING-FACT-SHEET-EVALATIONS");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "allow_fact_sheet_evaluationsP", "ALLOW-FACT-SHEET-EVALUATIONS?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "allow_fact_sheet_evaluations", "ALLOW-FACT-SHEET-EVALUATIONS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "indexical_fact_sheet_query_mt", "INDEXICAL-FACT-SHEET-QUERY-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "indexical_fact_sheet_table_type", "INDEXICAL-FACT-SHEET-TABLE-TYPE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "indexical_fact_sheet_sentence", "INDEXICAL-FACT-SHEET-SENTENCE", 0, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.fact_sheets", "with_new_fact_sheet_problem_store", "WITH-NEW-FACT-SHEET-PROBLEM-STORE");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.fact_sheets", "within_fact_sheet_paraphrase", "WITHIN-FACT-SHEET-PARAPHRASE");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "within_fact_sheet_paraphraseP", "WITHIN-FACT-SHEET-PARAPHRASE?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "indexical_fact_sheet_topic", "INDEXICAL-FACT-SHEET-TOPIC", 0, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.fact_sheets", "with_fact_sheet_focal_term", "WITH-FACT-SHEET-FOCAL-TERM");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "chmod_safe_to_useP", "CHMOD-SAFE-TO-USE?", 0, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.fact_sheets", "writing_fact_sheet_file", "WRITING-FACT-SHEET-FILE");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.fact_sheets", "writing_fact_sheet_data_file", "WRITING-FACT-SHEET-DATA-FILE");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.fact_sheets", "reading_fact_sheet_data_file", "READING-FACT-SHEET-DATA-FILE");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_default_language_mt", "CLEAR-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_default_language_mt", "REMOVE-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_default_language_mt_internal", "FACT-SHEET-DEFAULT-LANGUAGE-MT-INTERNAL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_default_language_mt", "FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_build_fact_sheet_default_language_mt", "CLEAR-BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_build_fact_sheet_default_language_mt", "REMOVE-BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "build_fact_sheet_default_language_mt_internal", "BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT-INTERNAL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "build_fact_sheet_default_language_mt", "BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_default_language_mt_for_term", "FACT-SHEET-DEFAULT-LANGUAGE-MT-FOR-TERM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_default_domain_mt", "CLEAR-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_default_domain_mt", "REMOVE-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_default_domain_mt_internal", "FACT-SHEET-DEFAULT-DOMAIN-MT-INTERNAL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_default_domain_mt", "FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_build_fact_sheet_default_domain_mt", "CLEAR-BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_build_fact_sheet_default_domain_mt", "REMOVE-BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "build_fact_sheet_default_domain_mt_internal", "BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT-INTERNAL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "build_fact_sheet_default_domain_mt", "BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_default_domain_mt_for_term", "FACT-SHEET-DEFAULT-DOMAIN-MT-FOR-TERM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_linkless_fact_sheet_for_term_in_html", "GET-LINKLESS-FACT-SHEET-FOR-TERM-IN-HTML", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "convert_fact_sheet_sentence_links_to_spans", "CONVERT-FACT-SHEET-SENTENCE-LINKS-TO-SPANS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "convert_fact_sheet_link_to_span", "CONVERT-FACT-SHEET-LINK-TO-SPAN", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_updated_fact_sheet_for_term_and_sentence_in_html", "GET-UPDATED-FACT-SHEET-FOR-TERM-AND-SENTENCE-IN-HTML", 2, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_updated_fact_sheet_for_term_and_sentence_in_markup_internal", "GET-UPDATED-FACT-SHEET-FOR-TERM-AND-SENTENCE-IN-MARKUP-INTERNAL", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fact_sheet_for_term_in_xml_with_only_kb_specified_content", "GET-FACT-SHEET-FOR-TERM-IN-XML-WITH-ONLY-KB-SPECIFIED-CONTENT", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fact_sheet_for_term_in_html", "GET-FACT-SHEET-FOR-TERM-IN-HTML", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fact_sheet_for_term_in_markup_language", "GET-FACT-SHEET-FOR-TERM-IN-MARKUP-LANGUAGE", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fact_sheet_for_term_in_markup_internal", "GET-FACT-SHEET-FOR-TERM-IN-MARKUP-INTERNAL", 5, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_filter_footnotes_for_sources", "FACT-SHEET-FILTER-FOOTNOTES-FOR-SOURCES", 2, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.fact_sheets", "html_fact_sheet_optional_section", "HTML-FACT-SHEET-OPTIONAL-SECTION");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "footnote_text", "FOOTNOTE-TEXT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "footnote_source", "FOOTNOTE-SOURCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "generate_fact_sheet_data", "GENERATE-FACT-SHEET-DATA", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_stats_p", "FACT-SHEET-STATS-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "possibly_fact_sheet_domain_mtP", "POSSIBLY-FACT-SHEET-DOMAIN-MT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "new_fact_sheet_stats", "NEW-FACT-SHEET-STATS", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_texts_from_data", "FACT-SHEET-TEXTS-FROM-DATA", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_prefer_slot_values_for_categoryP", "FACT-SHEET-PREFER-SLOT-VALUES-FOR-CATEGORY?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_markup_tables_from_data", "FACT-SHEET-MARKUP-TABLES-FROM-DATA", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_xml_table_from_data", "FACT-SHEET-XML-TABLE-FROM-DATA", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_table_from_data", "FACT-SHEET-HTML-TABLE-FROM-DATA", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "sort_fact_sheet_table_data", "SORT-FACT-SHEET-TABLE-DATA", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_table_sentence_data_predicate", "FACT-SHEET-TABLE-SENTENCE-DATA-PREDICATE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "find_assertion_for_fact_sheet_sentence", "FIND-ASSERTION-FOR-FACT-SHEET-SENTENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_table_title", "FACT-SHEET-TABLE-TITLE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "output_fact_sheet_table_title_row", "OUTPUT-FACT-SHEET-TABLE-TITLE-ROW", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "output_fact_sheet_table_sentence_link", "OUTPUT-FACT-SHEET-TABLE-SENTENCE-LINK", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_table_header_values", "FACT-SHEET-TABLE-HEADER-VALUES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_table_data_for_value", "FACT-SHEET-TABLE-DATA-FOR-VALUE", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_table_specs", "FACT-SHEET-TABLE-SPECS", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "section_table_specs", "SECTION-TABLE-SPECS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "table_types_from_section_table_specs", "TABLE-TYPES-FROM-SECTION-TABLE-SPECS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "table_data_for_sentence", "TABLE-DATA-FOR-SENTENCE", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "dereference_fact_sheet_indexicals", "DEREFERENCE-FACT-SHEET-INDEXICALS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_anytime_mt", "FACT-SHEET-ANYTIME-MT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "possibly_reserve_sentence_for_tables", "POSSIBLY-RESERVE-SENTENCE-FOR-TABLES", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_conjuncts", "FACT-SHEET-SENTENCE-CONJUNCTS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "valid_sentence_data_for_table_typeP", "VALID-SENTENCE-DATA-FOR-TABLE-TYPE?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_table_type_width_internal", "FACT-SHEET-TABLE-TYPE-WIDTH-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_table_type_width", "FACT-SHEET-TABLE-TYPE-WIDTH", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sort_paragraphs_at_retrieval_time", "FACT-SHEET-SORT-PARAGRAPHS-AT-RETRIEVAL-TIME", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "possibly_convert_summary_sentence_to_cycl", "POSSIBLY-CONVERT-SUMMARY-SENTENCE-TO-CYCL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "new_summary_sentence", "NEW-SUMMARY-SENTENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "summary_sentence_cycl", "SUMMARY-SENTENCE-CYCL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "summary_sentence_plist_cycl", "SUMMARY-SENTENCE-PLIST-CYCL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "summary_sentence_assertions", "SUMMARY-SENTENCE-ASSERTIONS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "summary_sentence_sources", "SUMMARY-SENTENCE-SOURCES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "summary_sentence_plistP", "SUMMARY-SENTENCE-PLIST?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "construct_fact_sheet_paragraph", "CONSTRUCT-FACT-SHEET-PARAGRAPH", 7, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_slot_values", "FACT-SHEET-SLOT-VALUES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_slot_value_string", "FACT-SHEET-SLOT-VALUE-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_summary_sentence_passes_data_gathering_time_filterP", "FACT-SHEET-SUMMARY-SENTENCE-PASSES-DATA-GATHERING-TIME-FILTER?", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_summary_sentence_passes_retrieval_time_filterP", "FACT-SHEET-SUMMARY-SENTENCE-PASSES-RETRIEVAL-TIME-FILTER?", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_blacklisted_sources", "FACT-SHEET-BLACKLISTED-SOURCES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "any_term_in_assertion_list_passes_test", "ANY-TERM-IN-ASSERTION-LIST-PASSES-TEST", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_title", "FACT-SHEET-TITLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "generate_fact_sheet_markup", "GENERATE-FACT-SHEET-MARKUP", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "generate_fact_sheet_xml", "GENERATE-FACT-SHEET-XML", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "generate_fact_sheet_html", "GENERATE-FACT-SHEET-HTML", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "emit_fact_sheet_opencyc_uri", "EMIT-FACT-SHEET-OPENCYC-URI", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fact_sheet_for_term_id_in_html", "GET-FACT-SHEET-FOR-TERM-ID-IN-HTML", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_all_fact_sheet_caches", "CLEAR-ALL-FACT-SHEET-CACHES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_request_denots", "FACT-SHEET-REQUEST-DENOTS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_possible_fact_sheet_terms_mentioned_in_string", "GET-POSSIBLE-FACT-SHEET-TERMS-MENTIONED-IN-STRING", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_word_denots_for_fact_sheets", "GET-WORD-DENOTS-FOR-FACT-SHEETS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "term_ok_for_cae_query_search_term_box_p", "TERM-OK-FOR-CAE-QUERY-SEARCH-TERM-BOX-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_scalar_interval_p", "CLEAR-SCALAR-INTERVAL-P", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_scalar_interval_p", "REMOVE-SCALAR-INTERVAL-P", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "scalar_interval_p_internal", "SCALAR-INTERVAL-P-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "scalar_interval_p", "SCALAR-INTERVAL-P", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "term_ok_for_fact_sheet_p", "TERM-OK-FOR-FACT-SHEET-P", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "mini_fact_sheet_term_types", "MINI-FACT-SHEET-TERM-TYPES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_data_path", "FACT-SHEET-DATA-PATH", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "set_fact_sheet_data_path", "SET-FACT-SHEET-DATA-PATH", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_id", "FACT-SHEET-TERM-ID", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_legacy_id", "FACT-SHEET-TERM-LEGACY-ID", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_term_id_low", "CLEAR-FACT-SHEET-TERM-ID-LOW", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_term_id_low", "REMOVE-FACT-SHEET-TERM-ID-LOW", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_id_low_internal", "FACT-SHEET-TERM-ID-LOW-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_id_low", "FACT-SHEET-TERM-ID-LOW", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "possible_fact_sheet_term_id_p", "POSSIBLE-FACT-SHEET-TERM-ID-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_idP", "FACT-SHEET-TERM-ID?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_from_id", "FACT-SHEET-TERM-FROM-ID", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_warn_unknown_fact_sheet_term_id", "CLEAR-WARN-UNKNOWN-FACT-SHEET-TERM-ID", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_warn_unknown_fact_sheet_term_id", "REMOVE-WARN-UNKNOWN-FACT-SHEET-TERM-ID", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "warn_unknown_fact_sheet_term_id_internal", "WARN-UNKNOWN-FACT-SHEET-TERM-ID-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "warn_unknown_fact_sheet_term_id", "WARN-UNKNOWN-FACT-SHEET-TERM-ID", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_from_span_id", "FACT-SHEET-TERM-FROM-SPAN-ID", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "paraphrase_fact_sheet_sentences", "PARAPHRASE-FACT-SHEET-SENTENCES", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_force_bullets_for_categoryP", "FACT-SHEET-FORCE-BULLETS-FOR-CATEGORY?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_footnotes_for_sources", "FACT-SHEET-FOOTNOTES-FOR-SOURCES", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_footnote_for_source", "FACT-SHEET-FOOTNOTE-FOR-SOURCE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "sort_fact_sheet_texts_by_category", "SORT-FACT-SHEET-TEXTS-BY-CATEGORY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "higher_priority_fact_sheet_categoryP", "HIGHER-PRIORITY-FACT-SHEET-CATEGORY?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "substitute_fact_sheet_labels_for_categories", "SUBSTITUTE-FACT-SHEET-LABELS-FOR-CATEGORIES", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "substitute_fact_sheet_label_for_category", "SUBSTITUTE-FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_sentence_group_summary", "CLEAR-FACT-SHEET-SENTENCE-GROUP-SUMMARY", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_sentence_group_summary", "REMOVE-FACT-SHEET-SENTENCE-GROUP-SUMMARY", 6, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_group_summary_internal", "FACT-SHEET-SENTENCE-GROUP-SUMMARY-INTERNAL", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_group_summary", "FACT-SHEET-SENTENCE-GROUP-SUMMARY", 6, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "simulate_fact_sheet_sentence_paraphrase", "SIMULATE-FACT-SHEET-SENTENCE-PARAPHRASE", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "simulate_fact_sheet_sentences_paraphrase", "SIMULATE-FACT-SHEET-SENTENCES-PARAPHRASE", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_bogus_hyperlink_open_tag_for_term", "FACT-SHEET-BOGUS-HYPERLINK-OPEN-TAG-FOR-TERM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_bogus_hyperlink_open_tag_for_term_id", "FACT-SHEET-BOGUS-HYPERLINK-OPEN-TAG-FOR-TERM-ID", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_bogus_url_for_term", "FACT-SHEET-BOGUS-URL-FOR-TERM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_bogus_url_for_term_id", "FACT-SHEET-BOGUS-URL-FOR-TERM-ID", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "strip_bogus_hyperlinks_for_term_id", "STRIP-BOGUS-HYPERLINKS-FOR-TERM-ID", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_find_marked_up_terms", "FACT-SHEET-HTML-FIND-MARKED-UP-TERMS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_find_marked_up_terms_fast", "FACT-SHEET-HTML-FIND-MARKED-UP-TERMS-FAST", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_term_and_close_tag_from_token", "GET-TERM-AND-CLOSE-TAG-FROM-TOKEN", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_find_matching_close_tag_start", "FACT-SHEET-HTML-FIND-MATCHING-CLOSE-TAG-START", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_inappropriate_for_hyperlinkP", "FACT-SHEET-TERM-INAPPROPRIATE-FOR-HYPERLINK?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "mark_up_fact_sheet_sentenceP", "MARK-UP-FACT-SHEET-SENTENCE?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_possibly_mark_up_sentence_paraphrase", "FACT-SHEET-POSSIBLY-MARK-UP-SENTENCE-PARAPHRASE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_mark_up_sentence_paraphrase", "FACT-SHEET-MARK-UP-SENTENCE-PARAPHRASE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_link", "REMOVE-LINK", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_id_function", "FACT-SHEET-SENTENCE-ID-FUNCTION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "xml_factsheetsP", "XML-FACTSHEETS?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_expand_coordination_sets", "FACT-SHEET-SENTENCE-EXPAND-COORDINATION-SETS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_span_for_term", "FACT-SHEET-SPAN-FOR-TERM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "replace_fact_sheet_markups", "REPLACE-FACT-SHEET-MARKUPS", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "replace_fact_sheet_markups_fast", "REPLACE-FACT-SHEET-MARKUPS-FAST", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_max_sentences_per_pred", "FACT-SHEET-MAX-SENTENCES-PER-PRED", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "display_fact_sheet", "DISPLAY-FACT-SHEET", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "display_fact_sheet_with_internal_styles", "DISPLAY-FACT-SHEET-WITH-INTERNAL-STYLES", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "display_fact_sheet_for_external_styles", "DISPLAY-FACT-SHEET-FOR-EXTERNAL-STYLES", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "display_fact_sheet_xml", "DISPLAY-FACT-SHEET-XML", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "print_fact_sheet_stats", "PRINT-FACT-SHEET-STATS", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_kb_version_string", "FACT-SHEET-KB-VERSION-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_cyc_revision_string", "FACT-SHEET-CYC-REVISION-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_info_string", "FACT-SHEET-INFO-STRING", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_pph_demerit_cutoff", "FACT-SHEET-PPH-DEMERIT-CUTOFF", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_min_paragraph_length", "FACT-SHEET-MIN-PARAGRAPH-LENGTH", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_verbosity_p", "FACT-SHEET-VERBOSITY-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_image_root_placeholder", "FACT-SHEET-IMAGE-ROOT-PLACEHOLDER", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_image_url_for_term", "FACT-SHEET-IMAGE-URL-FOR-TERM", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_base_url_placeholder", "FACT-SHEET-BASE-URL-PLACEHOLDER", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_replace_placeholders", "FACT-SHEET-HTML-REPLACE-PLACEHOLDERS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_contains_replaceable_colorsP", "FACT-SHEET-HTML-CONTAINS-REPLACEABLE-COLORS?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_replace_colors", "FACT-SHEET-HTML-REPLACE-COLORS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_contains_base_url_placeholderP", "FACT-SHEET-HTML-CONTAINS-BASE-URL-PLACEHOLDER?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_replace_base_url_placeholder", "FACT-SHEET-HTML-REPLACE-BASE-URL-PLACEHOLDER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_contains_image_root_placeholderP", "FACT-SHEET-HTML-CONTAINS-IMAGE-ROOT-PLACEHOLDER?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_image_file_root_url", "CLEAR-FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_image_file_root_url", "REMOVE-FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_image_file_root_url_internal", "FACT-SHEET-IMAGE-FILE-ROOT-URL-INTERNAL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_image_file_root_url", "FACT-SHEET-IMAGE-FILE-ROOT-URL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "use_fact_sheet_image_file_root_urlP", "USE-FACT-SHEET-IMAGE-FILE-ROOT-URL?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "relative_fact_sheet_image_url", "RELATIVE-FACT-SHEET-IMAGE-URL", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_html_replace_image_root_placeholder", "FACT-SHEET-HTML-REPLACE-IMAGE-ROOT-PLACEHOLDER", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_image_url_root", "CLEAR-FACT-SHEET-IMAGE-URL-ROOT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_image_url_root", "REMOVE-FACT-SHEET-IMAGE-URL-ROOT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_image_url_root_internal", "FACT-SHEET-IMAGE-URL-ROOT-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_image_url_root", "FACT-SHEET-IMAGE-URL-ROOT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_image_path_okP", "FACT-SHEET-IMAGE-PATH-OK?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_query_sentence", "FACT-SHEET-QUERY-SENTENCE", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_mini_fact_sheet_for_term_in_html", "GET-MINI-FACT-SHEET-FOR-TERM-IN-HTML", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_get_mini_fact_sheet_for_term_cached", "CLEAR-GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_get_mini_fact_sheet_for_term_cached", "REMOVE-GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_mini_fact_sheet_for_term_cached_internal", "GET-MINI-FACT-SHEET-FOR-TERM-CACHED-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_mini_fact_sheet_for_term_cached", "GET-MINI-FACT-SHEET-FOR-TERM-CACHED", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fallback_mini_fact_sheet_for_term_in_html", "FALLBACK-MINI-FACT-SHEET-FOR-TERM-IN-HTML", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_query_properties", "FACT-SHEET-QUERY-PROPERTIES", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "omitted_fact_sheet_sentences", "OMITTED-FACT-SHEET-SENTENCES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentences_for_assertion_and_term", "FACT-SHEET-SENTENCES-FOR-ASSERTION-AND-TERM", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentences_for_term", "FACT-SHEET-SENTENCES-FOR-TERM", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_sentences_for_term_from_kbq", "CLEAR-FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_sentences_for_term_from_kbq", "REMOVE-FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentences_for_term_from_kbq_internal", "FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ-INTERNAL", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentences_for_term_from_kbq", "FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_sentences_for_term_internal", "CLEAR-FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_sentences_for_term_internal", "REMOVE-FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentences_for_term_internal_internal", "FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentences_for_term_internal", "FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_about_topicP", "FACT-SHEET-SENTENCE-ABOUT-TOPIC?", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_sentence_trivially_impliesP", "CLEAR-FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_sentence_trivially_impliesP", "REMOVE-FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_trivially_impliesP_internal", "FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-INTERNAL", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_trivially_impliesP", "FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_highly_prevalent_among_instancesP", "FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_highly_prevalent_among_instancesP_cached", "CLEAR-FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_highly_prevalent_among_instancesP_cached", "REMOVE-FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_highly_prevalent_among_instancesP_cached_internal", "FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_highly_prevalent_among_instancesP_cached", "FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_formula", "FACT-SHEET-SENTENCE-FORMULA", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_trivial_meta_supportP", "FACT-SHEET-TRIVIAL-META-SUPPORT?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "assertion_mt_times_visibleP", "ASSERTION-MT-TIMES-VISIBLE?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_skolem_time_intervalP", "FACT-SHEET-SKOLEM-TIME-INTERVAL?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_skolem_time_interval_more_constrainedP", "FACT-SHEET-SKOLEM-TIME-INTERVAL-MORE-CONSTRAINED?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_skolem_time_interval_subsuming_interval", "FACT-SHEET-SKOLEM-TIME-INTERVAL-SUBSUMING-INTERVAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_args_imply_args_for_pred", "FACT-SHEET-ARGS-IMPLY-ARGS-FOR-PRED", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_transitivity_check", "CLEAR-FACT-SHEET-TRANSITIVITY-CHECK", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_transitivity_check", "REMOVE-FACT-SHEET-TRANSITIVITY-CHECK", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_transitivity_check_internal", "FACT-SHEET-TRANSITIVITY-CHECK-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_transitivity_check", "FACT-SHEET-TRANSITIVITY-CHECK", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "add_thcl_fact_sheet_sentences", "ADD-THCL-FACT-SHEET-SENTENCES", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "thcl_sentences_for_term_fact_sheet", "THCL-SENTENCES-FOR-TERM-FACT-SHEET", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "thcl_preds_for_term_fact_sheet", "THCL-PREDS-FOR-TERM-FACT-SHEET", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_queries_browsableP", "FACT-SHEET-QUERIES-BROWSABLE?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "new_fact_sheet_query_daemon", "NEW-FACT-SHEET-QUERY-DAEMON", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_query_daemon_run", "FACT-SHEET-QUERY-DAEMON-RUN", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "free_fact_sheet_query_spec", "FREE-FACT-SHEET-QUERY-SPEC", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "valid_fact_sheet_query_spec_p", "VALID-FACT-SHEET-QUERY-SPEC-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "new_fact_sheet_query", "NEW-FACT-SHEET-QUERY", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_query", "FACT-SHEET-SENTENCE-QUERY", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_label_for_category", "CLEAR-FACT-SHEET-LABEL-FOR-CATEGORY", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_label_for_category", "REMOVE-FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_label_for_category_internal", "FACT-SHEET-LABEL-FOR-CATEGORY-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_label_for_category", "FACT-SHEET-LABEL-FOR-CATEGORY", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "group_fact_sheet_sentences_alist", "GROUP-FACT-SHEET-SENTENCES-ALIST", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "group_fact_sheet_sentences_for_category", "GROUP-FACT-SHEET-SENTENCES-FOR-CATEGORY", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "sort_fact_sheet_sentences_for_category", "SORT-FACT-SHEET-SENTENCES-FOR-CATEGORY", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_more_recentP", "FACT-SHEET-SENTENCE-MORE-RECENT?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_time_interval", "FACT-SHEET-SENTENCE-TIME-INTERVAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_sentence_time_interval_cached", "CLEAR-FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_sentence_time_interval_cached", "REMOVE-FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_time_interval_cached_internal", "FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_time_interval_cached", "FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_precedence_for_category_internal", "FACT-SHEET-SENTENCE-PRECEDENCE-FOR-CATEGORY-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_precedence_for_category", "FACT-SHEET-SENTENCE-PRECEDENCE-FOR-CATEGORY", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "maximize_fact_sheet_sentence_coherence", "MAXIMIZE-FACT-SHEET-SENTENCE-COHERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "most_coherent_fact_sheet_sentence", "MOST-COHERENT-FACT-SHEET-SENTENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_coherence_to_group", "FACT-SHEET-SENTENCE-COHERENCE-TO-GROUP", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_coherence_internal", "FACT-SHEET-SENTENCE-COHERENCE-INTERNAL", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_coherence", "FACT-SHEET-SENTENCE-COHERENCE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "delete_duplicate_fact_sheet_sentences", "DELETE-DUPLICATE-FACT-SHEET-SENTENCES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentences_equalP", "FACT-SHEET-SENTENCES-EQUAL?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_assertion_time_indices_equalP", "FACT-SHEET-ASSERTION-TIME-INDICES-EQUAL?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_predicate", "FACT-SHEET-SENTENCE-PREDICATE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_mt", "FACT-SHEET-SENTENCE-MT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "pred_counts_for_sentences", "PRED-COUNTS-FOR-SENTENCES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_pred_count_L", "FACT-SHEET-PRED-COUNT-<", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "stable_sort_fact_sheet_sentences", "STABLE-SORT-FACT-SHEET-SENTENCES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "stable_sort_fact_sheet_sentences_for_category", "STABLE-SORT-FACT-SHEET-SENTENCES-FOR-CATEGORY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_predicate_L", "FACT-SHEET-PREDICATE-<", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_references_earlier_dateP", "FACT-SHEET-SENTENCE-REFERENCES-EARLIER-DATE?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_sentence_references_earlier_dateP_internal", "FACT-SHEET-SENTENCE-REFERENCES-EARLIER-DATE?-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "expression_containsP", "EXPRESSION-CONTAINS?", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "possibly_remove_fact_sheet_sections", "POSSIBLY-REMOVE-FACT-SHEET-SECTIONS", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_factsheet_kb_from_html", "GET-FACTSHEET-KB-FROM-HTML", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_factsheet_system_from_html", "GET-FACTSHEET-SYSTEM-FROM-HTML", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_section_start_position", "FACT-SHEET-SECTION-START-POSITION", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_section_end_position", "FACT-SHEET-SECTION-END-POSITION", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_section", "REMOVE-FACT-SHEET-SECTION", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "add_evaluation_link", "ADD-EVALUATION-LINK", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "add_before_fact_sheet_section", "ADD-BEFORE-FACT-SHEET-SECTION", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_optional_section_start_comment", "CLEAR-FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_optional_section_start_comment", "REMOVE-FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_optional_section_start_comment_internal", "FACT-SHEET-OPTIONAL-SECTION-START-COMMENT-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_optional_section_start_comment", "FACT-SHEET-OPTIONAL-SECTION-START-COMMENT", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_optional_section_end_comment", "CLEAR-FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_optional_section_end_comment", "REMOVE-FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_optional_section_end_comment_internal", "FACT-SHEET-OPTIONAL-SECTION-END-COMMENT-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_optional_section_end_comment", "FACT-SHEET-OPTIONAL-SECTION-END-COMMENT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_optional_section_start_string", "FACT-SHEET-OPTIONAL-SECTION-START-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_optional_section_end_string", "FACT-SHEET-OPTIONAL-SECTION-END-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "term_has_precached_fact_sheetP", "TERM-HAS-PRECACHED-FACT-SHEET?", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "precached_fact_sheet_file_for_term_id", "PRECACHED-FACT-SHEET-FILE-FOR-TERM-ID", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "precached_fact_sheet_for_term_in_html", "PRECACHED-FACT-SHEET-FOR-TERM-IN-HTML", 5, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "precached_fact_sheet_for_term_id_in_html", "PRECACHED-FACT-SHEET-FOR-TERM-ID-IN-HTML", 5, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "updated_fact_sheet_data_for_term_and_sentence", "UPDATED-FACT-SHEET-DATA-FOR-TERM-AND-SENTENCE", 2, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheet_data_for_term_and_user_added_sentence", "UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-USER-ADDED-SENTENCE", 2, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheet_data_for_term_and_removed_sentence", "UPDATE-FACT-SHEET-DATA-FOR-TERM-AND-REMOVED-SENTENCE", 2, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "updated_fact_sheet_stats", "UPDATED-FACT-SHEET-STATS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "cached_fact_sheet_data_for_term", "CACHED-FACT-SHEET-DATA-FOR-TERM", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "mts_with_precached_fact_sheet_data_for_term_internal", "MTS-WITH-PRECACHED-FACT-SHEET-DATA-FOR-TERM-INTERNAL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "mts_with_precached_fact_sheet_data_for_term", "MTS-WITH-PRECACHED-FACT-SHEET-DATA-FOR-TERM", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "precached_fact_sheet_data_for_term", "PRECACHED-FACT-SHEET-DATA-FOR-TERM", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "precached_fact_sheet_data_for_term_id", "PRECACHED-FACT-SHEET-DATA-FOR-TERM-ID", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "precached_fact_sheet_data_from_file", "PRECACHED-FACT-SHEET-DATA-FROM-FILE", 1, 7, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "load_fact_sheet_formatting_guidelines", "LOAD-FACT-SHEET-FORMATTING-GUIDELINES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_under_construction_message", "FACT-SHEET-UNDER-CONSTRUCTION-MESSAGE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_under_construction_code", "FACT-SHEET-UNDER-CONSTRUCTION-CODE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_under_construction_xml", "FACT-SHEET-UNDER-CONSTRUCTION-XML", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_under_construction_html", "FACT-SHEET-UNDER-CONSTRUCTION-HTML", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "note_fact_sheet_under_construction", "NOTE-FACT-SHEET-UNDER-CONSTRUCTION", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "note_fact_sheet_construction_done", "NOTE-FACT-SHEET-CONSTRUCTION-DONE", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_under_construction_filename", "FACT-SHEET-UNDER-CONSTRUCTION-FILENAME", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_under_constructionP", "FACT-SHEET-TERM-UNDER-CONSTRUCTION?", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_file_under_constructionP", "FACT-SHEET-FILE-UNDER-CONSTRUCTION?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "html_fact_sheet_file_under_constructionP", "HTML-FACT-SHEET-FILE-UNDER-CONSTRUCTION?", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_update_already_undertakenP", "FACT-SHEET-TERM-UPDATE-ALREADY-UNDERTAKEN?", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "term_fact_sheet_current_on_kb_and_systemP", "TERM-FACT-SHEET-CURRENT-ON-KB-AND-SYSTEM?", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "gather_old_under_construction_fact_sheet_files", "GATHER-OLD-UNDER-CONSTRUCTION-FACT-SHEET-FILES", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_any_cached_fact_sheet_data", "REMOVE-ANY-CACHED-FACT-SHEET-DATA", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "write_fact_sheet_html_and_formatting_guidelines", "WRITE-FACT-SHEET-HTML-AND-FORMATTING-GUIDELINES", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "write_fact_sheet_data_and_formatting_guidelines", "WRITE-FACT-SHEET-DATA-AND-FORMATTING-GUIDELINES", 8, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "stop_fact_sheet_updates_after_current_term", "STOP-FACT-SHEET-UPDATES-AFTER-CURRENT-TERM", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "start_new_fact_sheet_updater", "START-NEW-FACT-SHEET-UPDATER", 0, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "start_new_stale_fact_sheet_updater", "START-NEW-STALE-FACT-SHEET-UPDATER", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "start_new_all_fact_sheet_updater", "START-NEW-ALL-FACT-SHEET-UPDATER", 0, 6, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "start_new_fact_sheet_log_file_watcher", "START-NEW-FACT-SHEET-LOG-FILE-WATCHER", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "watch_fact_sheet_log_file", "WATCH-FACT-SHEET-LOG-FILE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_log_stream_active_p", "FACT-SHEET-LOG-STREAM-ACTIVE-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "halt_fact_sheet_updater_image", "HALT-FACT-SHEET-UPDATER-IMAGE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheets_for_all_fact_sheetable_instances_of_without_good_fact_sheets_generated_since", "UPDATE-FACT-SHEETS-FOR-ALL-FACT-SHEETABLE-INSTANCES-OF-WITHOUT-GOOD-FACT-SHEETS-GENERATED-SINCE", 0, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "launch_fact_sheet_updater_of_fs_type_not_updated_since", "LAUNCH-FACT-SHEET-UPDATER-OF-FS-TYPE-NOT-UPDATED-SINCE", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheets_of_fs_type_not_updated_since", "UPDATE-FACT-SHEETS-OF-FS-TYPE-NOT-UPDATED-SINCE", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "maybe_update_fact_sheet_and_record_stats", "MAYBE-UPDATE-FACT-SHEET-AND-RECORD-STATS", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_all_stale_fact_sheets", "UPDATE-ALL-STALE-FACT-SHEETS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "possible_regular_fact_sheet_directory_p", "POSSIBLE-REGULAR-FACT-SHEET-DIRECTORY-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "possible_fact_sheet_directory_p", "POSSIBLE-FACT-SHEET-DIRECTORY-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_verbosity_from_path", "FACT-SHEET-VERBOSITY-FROM-PATH", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheet_file_if_stale", "UPDATE-FACT-SHEET-FILE-IF-STALE", 1, 2, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.fact_sheets", "do_forts_for_fact_sheet_update", "DO-FORTS-FOR-FACT-SHEET-UPDATE");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "write_term_ids_to_update", "WRITE-TERM-IDS-TO-UPDATE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "write_term_ids_to_update_for_fs_type_public_pages", "WRITE-TERM-IDS-TO-UPDATE-FOR-FS-TYPE-PUBLIC-PAGES", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "write_term_ids_to_update_for_fs_type_public_pages_term_set", "WRITE-TERM-IDS-TO-UPDATE-FOR-FS-TYPE-PUBLIC-PAGES-TERM-SET", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "write_term_ids_to_update_for_term_set", "WRITE-TERM-IDS-TO-UPDATE-FOR-TERM-SET", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "convert_term_suids_to_fact_sheet_term_ids", "CONVERT-TERM-SUIDS-TO-FACT-SHEET-TERM-IDS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "convert_term_suid_range_to_fact_sheet_term_ids", "CONVERT-TERM-SUID-RANGE-TO-FACT-SHEET-TERM-IDS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheets_with_suids", "UPDATE-FACT-SHEETS-WITH-SUIDS", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheets_with_ids", "UPDATE-FACT-SHEETS-WITH-IDS", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_id_filename", "FACT-SHEET-TERM-ID-FILENAME", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheets_from_id_file", "UPDATE-FACT-SHEETS-FROM-ID-FILE", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remaining_fact_sheets_to_update", "REMAINING-FACT-SHEETS-TO-UPDATE", 0, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "gather_all_fact_sheet_filenames", "GATHER-ALL-FACT-SHEET-FILENAMES", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_all_fact_sheets", "UPDATE-ALL-FACT-SHEETS", 0, 6, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheets", "UPDATE-FACT-SHEETS", 0, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "sleep_until_time_within_next_day", "SLEEP-UNTIL-TIME-WITHIN-NEXT-DAY", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "time_of_day_has_arrivedP", "TIME-OF-DAY-HAS-ARRIVED?", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "image_seems_idleP", "IMAGE-SEEMS-IDLE?", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "image_find_busy_thread", "IMAGE-FIND-BUSY-THREAD", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "maybe_start_new_fact_sheet_updater_default_screensaver_for_user", "MAYBE-START-NEW-FACT-SHEET-UPDATER-DEFAULT-SCREENSAVER-FOR-USER", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "start_new_fact_sheet_updater_default_screensaver", "START-NEW-FACT-SHEET-UPDATER-DEFAULT-SCREENSAVER", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "default_fact_sheet_updater_screensaver_verbosity_for_user", "DEFAULT-FACT-SHEET-UPDATER-SCREENSAVER-VERBOSITY-FOR-USER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "register_fact_sheet_screensaver", "REGISTER-FACT-SHEET-SCREENSAVER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "deregister_fact_sheet_screensaver", "DEREGISTER-FACT-SHEET-SCREENSAVER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "start_new_fact_sheet_updater_screensaver", "START-NEW-FACT-SHEET-UPDATER-SCREENSAVER", 0, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "stop_all_fact_sheet_screensavers", "STOP-ALL-FACT-SHEET-SCREENSAVERS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "restart_all_fact_sheet_screensavers", "RESTART-ALL-FACT-SHEET-SCREENSAVERS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "allow_fact_sheet_screensavers", "ALLOW-FACT-SHEET-SCREENSAVERS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "kill_all_fact_sheet_screensavers", "KILL-ALL-FACT-SHEET-SCREENSAVERS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheet_screensaver", "UPDATE-FACT-SHEET-SCREENSAVER", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheets_internal", "UPDATE-FACT-SHEETS-INTERNAL", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheet_for_term_with_logging", "UPDATE-FACT-SHEET-FOR-TERM-WITH-LOGGING", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "possibly_update_fact_sheet_for_term", "POSSIBLY-UPDATE-FACT-SHEET-FOR-TERM", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_query_soft_timeout_time_reachedP", "FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME-REACHED?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_query_soft_timeout_time_left", "FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME-LEFT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "compute_fact_sheet_query_soft_timeout_time", "COMPUTE-FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_paraphrase_soft_timeout_time_reachedP", "FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME-REACHED?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_paraphrase_soft_timeout_time_left", "FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME-LEFT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "compute_fact_sheet_paraphrase_soft_timeout_time", "COMPUTE-FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheet_for_term", "UPDATE-FACT-SHEET-FOR-TERM", 1, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_mini_fact_sheet_for_term", "UPDATE-MINI-FACT-SHEET-FOR-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_fact_sheet_data_for_term", "UPDATE-FACT-SHEET-DATA-FOR-TERM", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "launch_make_up_fact_sheet_updater_for_term", "LAUNCH-MAKE-UP-FACT-SHEET-UPDATER-FOR-TERM", 1, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_too_shortP", "FACT-SHEET-TOO-SHORT?", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_up_to_dateP", "FACT-SHEET-UP-TO-DATE?", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "cached_fact_sheet_save_date_and_second", "CACHED-FACT-SHEET-SAVE-DATE-AND-SECOND", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_generator_modified_sinceP", "FACT-SHEET-GENERATOR-MODIFIED-SINCE?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_modified_sinceP", "FACT-SHEET-TERM-MODIFIED-SINCE?", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_formatting_guidelines_file", "FACT-SHEET-FORMATTING-GUIDELINES-FILE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_file_for_fact_sheet_term", "FACT-SHEET-FILE-FOR-FACT-SHEET-TERM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "directory_and_filename_for_fact_sheet", "DIRECTORY-AND-FILENAME-FOR-FACT-SHEET", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "directory_and_filename_for_fact_sheet_from_id", "DIRECTORY-AND-FILENAME-FOR-FACT-SHEET-FROM-ID", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_id_file_preface", "FACT-SHEET-TERM-ID-FILE-PREFACE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_from_filename", "FACT-SHEET-TERM-FROM-FILENAME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_data_from_filename", "FACT-SHEET-DATA-FROM-FILENAME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_data_from_path", "FACT-SHEET-DATA-FROM-PATH", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_directory_from_list", "CLEAR-FACT-SHEET-DIRECTORY-FROM-LIST", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_directory_from_list", "REMOVE-FACT-SHEET-DIRECTORY-FROM-LIST", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_directory_from_list_internal", "FACT-SHEET-DIRECTORY-FROM-LIST-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_directory_from_list", "FACT-SHEET-DIRECTORY-FROM-LIST", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_update_term_prioritizer_print_function_trampoline", "FACT-SHEET-UPDATE-TERM-PRIORITIZER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_update_term_prioritizer_p", "FACT-SHEET-UPDATE-TERM-PRIORITIZER-P", 1, 0, false);
        new $fact_sheet_update_term_prioritizer_p$UnaryFunction();
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_stale_terms", "FSUT-PRIORITIZER-STALE-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_missing_terms", "FSUT-PRIORITIZER-MISSING-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_up_to_date_terms", "FSUT-PRIORITIZER-UP-TO-DATE-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_thread", "FSUT-PRIORITIZER-THREAD", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_should_sleepP", "FSUT-PRIORITIZER-SHOULD-SLEEP?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_verbosity", "FSUT-PRIORITIZER-VERBOSITY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_domain_mt", "FSUT-PRIORITIZER-DOMAIN-MT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_language_mt", "FSUT-PRIORITIZER-LANGUAGE-MT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_nice_level", "FSUT-PRIORITIZER-NICE-LEVEL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_new_days", "FSUT-PRIORITIZER-NEW-DAYS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "_csetf_fsut_prioritizer_stale_terms", "_CSETF-FSUT-PRIORITIZER-STALE-TERMS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "_csetf_fsut_prioritizer_missing_terms", "_CSETF-FSUT-PRIORITIZER-MISSING-TERMS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "_csetf_fsut_prioritizer_up_to_date_terms", "_CSETF-FSUT-PRIORITIZER-UP-TO-DATE-TERMS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "_csetf_fsut_prioritizer_thread", "_CSETF-FSUT-PRIORITIZER-THREAD", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "_csetf_fsut_prioritizer_should_sleepP", "_CSETF-FSUT-PRIORITIZER-SHOULD-SLEEP?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "_csetf_fsut_prioritizer_verbosity", "_CSETF-FSUT-PRIORITIZER-VERBOSITY", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "_csetf_fsut_prioritizer_domain_mt", "_CSETF-FSUT-PRIORITIZER-DOMAIN-MT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "_csetf_fsut_prioritizer_language_mt", "_CSETF-FSUT-PRIORITIZER-LANGUAGE-MT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "_csetf_fsut_prioritizer_nice_level", "_CSETF-FSUT-PRIORITIZER-NICE-LEVEL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "_csetf_fsut_prioritizer_new_days", "_CSETF-FSUT-PRIORITIZER-NEW-DAYS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "make_fact_sheet_update_term_prioritizer", "MAKE-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "visit_defstruct_fact_sheet_update_term_prioritizer", "VISIT-DEFSTRUCT-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "visit_defstruct_object_fact_sheet_update_term_prioritizer_method", "VISIT-DEFSTRUCT-OBJECT-FACT-SHEET-UPDATE-TERM-PRIORITIZER-METHOD", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "pprint_fsut_prioritizer", "PPRINT-FSUT-PRIORITIZER", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "register_fsut_prioritizer", "REGISTER-FSUT-PRIORITIZER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "all_fact_sheet_update_term_prioritizers", "ALL-FACT-SHEET-UPDATE-TERM-PRIORITIZERS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "find_fsut_prioritizer", "FIND-FSUT-PRIORITIZER", 0, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "find_or_create_fact_sheet_update_term_prioritizer", "FIND-OR-CREATE-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_max_nice_level", "FSUT-PRIORITIZER-MAX-NICE-LEVEL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_min_nice_level", "FSUT-PRIORITIZER-MIN-NICE-LEVEL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_default_new_days", "FSUT-PRIORITIZER-DEFAULT-NEW-DAYS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "new_fact_sheet_update_term_prioritizer", "NEW-FACT-SHEET-UPDATE-TERM-PRIORITIZER", 0, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_queue_rank_func", "FSUT-PRIORITIZER-QUEUE-RANK-FUNC", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_queue_comp_func", "FSUT-PRIORITIZER-QUEUE-COMP-FUNC", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "renice_fsut_prioritizer", "RENICE-FSUT-PRIORITIZER", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "start_fsut_prioritizer", "START-FSUT-PRIORITIZER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "stop_all_fsut_prioritizers", "STOP-ALL-FSUT-PRIORITIZERS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "stop_fsut_prioritizer", "STOP-FSUT-PRIORITIZER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_next_term", "FSUT-PRIORITIZER-NEXT-TERM", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_empty_p", "FSUT-PRIORITIZER-EMPTY-P", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_next_stale_term", "FSUT-PRIORITIZER-NEXT-STALE-TERM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_next_missing_term", "FSUT-PRIORITIZER-NEXT-MISSING-TERM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_next_up_to_date_term", "FSUT-PRIORITIZER-NEXT-UP-TO-DATE-TERM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fsut_prioritizer_sleep_interval_from_nice_level", "CLEAR-FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fsut_prioritizer_sleep_interval_from_nice_level", "REMOVE-FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_sleep_interval_from_nice_level_internal", "FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_sleep_interval_from_nice_level", "FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_place_terms", "FSUT-PRIORITIZER-PLACE-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fsut_prioritizer_place_term", "FSUT-PRIORITIZER-PLACE-TERM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "add_to_prioritizer_queue", "ADD-TO-PRIORITIZER-QUEUE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "sanity_check_prioritizer_queue", "SANITY-CHECK-PRIORITIZER-QUEUE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_status_p", "FACT-SHEET-STATUS-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_status", "FACT-SHEET-STATUS", 1, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_file_status", "FACT-SHEET-FILE-STATUS", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_file_staleP", "FACT-SHEET-FILE-STALE?", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_file_has_invalid_assertionP", "FACT-SHEET-FILE-HAS-INVALID-ASSERTION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_gaf_priority", "FACT-SHEET-TERM-GAF-PRIORITY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "pred_argnum_combos_for_term_internal", "PRED-ARGNUM-COMBOS-FOR-TERM-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "pred_argnum_combos_for_term", "PRED-ARGNUM-COMBOS-FOR-TERM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "cb_fact_sheet_evaluation", "CB-FACT-SHEET-EVALUATION", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "print_one_eval_section", "PRINT-ONE-EVAL-SECTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "print_numbered_options", "PRINT-NUMBERED-OPTIONS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "cb_handle_fact_sheet_evaluation", "CB-HANDLE-FACT-SHEET-EVALUATION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "absolute_fact_sheet_eval_url", "ABSOLUTE-FACT-SHEET-EVAL-URL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "html_emit_fact_sheet_evaluation_link", "HTML-EMIT-FACT-SHEET-EVALUATION-LINK", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "allowed_to_update_fact_sheet_with_sentenceP", "ALLOWED-TO-UPDATE-FACT-SHEET-WITH-SENTENCE?", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "mark_fact_sheet_term_modifiable", "MARK-FACT-SHEET-TERM-MODIFIABLE", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "cache_local_fact_sheet_data", "CACHE-LOCAL-FACT-SHEET-DATA", 5, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_cached_local_fact_sheet_data", "GET-CACHED-LOCAL-FACT-SHEET-DATA", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_cached_local_fact_sheet_data", "REMOVE-CACHED-LOCAL-FACT-SHEET-DATA", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "public_fact_sheet_ad_html", "PUBLIC-FACT-SHEET-AD-HTML", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "directory_and_filename_for_public_fact_sheet", "DIRECTORY-AND-FILENAME-FOR-PUBLIC-FACT-SHEET", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "relative_filename_for_public_fact_sheet", "RELATIVE-FILENAME-FOR-PUBLIC-FACT-SHEET", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_get_public_fact_sheet_term_parent_directory_string", "CLEAR-GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_get_public_fact_sheet_term_parent_directory_string", "REMOVE-GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_public_fact_sheet_term_parent_directory_string_internal", "GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_public_fact_sheet_term_parent_directory_string", "GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_filename_charP", "FACT-SHEET-FILENAME-CHAR?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "note_term_to_file_mapping", "NOTE-TERM-TO-FILE-MAPPING", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_terms_for_public_fact_sheets", "CLEAR-TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_terms_for_public_fact_sheets", "REMOVE-TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "terms_for_public_fact_sheets_internal", "TERMS-FOR-PUBLIC-FACT-SHEETS-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "terms_for_public_fact_sheets", "TERMS-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_types_for_public_fact_sheets", "CLEAR-TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_types_for_public_fact_sheets", "REMOVE-TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "types_for_public_fact_sheets_internal", "TYPES-FOR-PUBLIC-FACT-SHEETS-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "types_for_public_fact_sheets", "TYPES-FOR-PUBLIC-FACT-SHEETS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_fact_sheet_term_strings", "CLEAR-FACT-SHEET-TERM-STRINGS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_fact_sheet_term_strings", "REMOVE-FACT-SHEET-TERM-STRINGS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_strings_internal", "FACT-SHEET-TERM-STRINGS-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_term_strings", "FACT-SHEET-TERM-STRINGS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_public_fact_sheet_string_mappings", "GET-PUBLIC-FACT-SHEET-STRING-MAPPINGS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_public_fact_sheet_string_mappings_int", "GET-PUBLIC-FACT-SHEET-STRING-MAPPINGS-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_get_public_fact_sheet_string_url_mappings", "CLEAR-GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_get_public_fact_sheet_string_url_mappings", "REMOVE-GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_public_fact_sheet_string_url_mappings_internal", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_public_fact_sheet_string_url_mappings", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "dump_fact_sheet_string_url_mappings", "DUMP-FACT-SHEET-STRING-URL-MAPPINGS", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "convert_search_data_to_htaccess_redirects", "CONVERT-SEARCH-DATA-TO-HTACCESS-REDIRECTS", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "convert_search_data_to_sql_file", "CONVERT-SEARCH-DATA-TO-SQL-FILE", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_existing_public_fact_sheet_term_pairs", "GET-EXISTING-PUBLIC-FACT-SHEET-TERM-PAIRS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_public_fact_sheet_string_url_mappings_as_json", "GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-AS-JSON", 0, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "print_one_string_term_url_mapping_as_json", "PRINT-ONE-STRING-TERM-URL-MAPPING-AS-JSON", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "filter_mappings_for_good_urls", "FILTER-MAPPINGS-FOR-GOOD-URLS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheet_properties_for_type", "FACT-SHEET-PROPERTIES-FOR-TYPE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fs_collection_name", "GET-FS-COLLECTION-NAME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fs_whitelist_types", "GET-FS-WHITELIST-TYPES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fs_blacklist_types", "GET-FS-BLACKLIST-TYPES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fs_quoted_blacklist_types", "GET-FS-QUOTED-BLACKLIST-TYPES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fs_blacklist_sources", "GET-FS-BLACKLIST-SOURCES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_fs_default_starting_points_filename", "GET-FS-DEFAULT-STARTING-POINTS-FILENAME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_domain_mt_for_fs_type", "GET-DOMAIN-MT-FOR-FS-TYPE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "category_label_from_properties", "CATEGORY-LABEL-FROM-PROPERTIES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "new_category_label", "NEW-CATEGORY-LABEL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "category_label_string", "CATEGORY-LABEL-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "category_label_pred", "CATEGORY-LABEL-PRED", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "category_label_style", "CATEGORY-LABEL-STYLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_sort_fn_from_properties", "GET-SORT-FN-FROM-PROPERTIES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "default_fact_sheet_paragraph_retrieval_time_sort_fn", "DEFAULT-FACT-SHEET-PARAGRAPH-RETRIEVAL-TIME-SORT-FN", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "incyc_higher_priority_categoryP", "INCYC-HIGHER-PRIORITY-CATEGORY?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_public_fact_sheet_properties", "GET-PUBLIC-FACT-SHEET-PROPERTIES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "get_public_fact_sheet_for_term", "GET-PUBLIC-FACT-SHEET-FOR-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "start_new_public_fact_sheet_updater", "START-NEW-PUBLIC-FACT-SHEET-UPDATER", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "ensure_all_public_fact_sheets", "ENSURE-ALL-PUBLIC-FACT-SHEETS", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "ensure_public_fact_sheet_for_term", "ENSURE-PUBLIC-FACT-SHEET-FOR-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "publicize_fact_sheet_links", "PUBLICIZE-FACT-SHEET-LINKS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "publicize_fact_sheet_link", "PUBLICIZE-FACT-SHEET-LINK", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "update_public_fact_sheets_from_id_file", "UPDATE-PUBLIC-FACT-SHEETS-FROM-ID-FILE", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "any_token_containsP", "ANY-TOKEN-CONTAINS?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "write_public_fact_sheets_starting_points_data", "WRITE-PUBLIC-FACT-SHEETS-STARTING-POINTS-DATA", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "write_public_fact_sheets_starting_points_data_int", "WRITE-PUBLIC-FACT-SHEETS-STARTING-POINTS-DATA-INT", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "public_fact_sheet_starting_point_okP", "PUBLIC-FACT-SHEET-STARTING-POINT-OK?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "suggested_starting_points_for_public_fact_sheet_browsing", "SUGGESTED-STARTING-POINTS-FOR-PUBLIC-FACT-SHEET-BROWSING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "clear_cached_num_gaf_arg_index", "CLEAR-CACHED-NUM-GAF-ARG-INDEX", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "remove_cached_num_gaf_arg_index", "REMOVE-CACHED-NUM-GAF-ARG-INDEX", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "cached_num_gaf_arg_index_internal", "CACHED-NUM-GAF-ARG-INDEX-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "cached_num_gaf_arg_index", "CACHED-NUM-GAF-ARG-INDEX", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "dump_fact_sheet_sentences_old", "DUMP-FACT-SHEET-SENTENCES-OLD", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "dump_fact_sheet_sentences", "DUMP-FACT-SHEET-SENTENCES", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "dump_fact_sheet_sentences_for_term", "DUMP-FACT-SHEET-SENTENCES-FOR-TERM", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "fact_sheets_term_from_string_containsP", "FACT-SHEETS-TERM-FROM-STRING-CONTAINS?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.fact_sheets", "cycls_are_membersP", "CYCLS-ARE-MEMBERS?", 3, 0, false);
        return (SubLObject)fact_sheets.NIL;
    }
    
    public static SubLObject init_fact_sheets_file() {
        fact_sheets.$allow_fact_sheet_evaluationsP$ = SubLFiles.defparameter("*ALLOW-FACT-SHEET-EVALUATIONS?*", red_infrastructure_macros.red_def_helper((SubLObject)(fact_sheets.$list0.isSymbol() ? Symbols.symbol_value((SubLObject)fact_sheets.$list0) : fact_sheets.$list0), (SubLObject)fact_sheets.$sym1$_ALLOW_FACT_SHEET_EVALUATIONS__, (SubLObject)(fact_sheets.ONE_INTEGER.isSymbol() ? Symbols.symbol_value((SubLObject)fact_sheets.ONE_INTEGER) : fact_sheets.ONE_INTEGER), (SubLObject)fact_sheets.$kw2$PARAMETER, (SubLObject)fact_sheets.UNPROVIDED));
        fact_sheets.$fact_sheet_eval_log_file$ = SubLFiles.defparameter("*FACT-SHEET-EVAL-LOG-FILE*", red_infrastructure_macros.red_def_helper((SubLObject)(fact_sheets.$list7.isSymbol() ? Symbols.symbol_value((SubLObject)fact_sheets.$list7) : fact_sheets.$list7), (SubLObject)fact_sheets.$sym8$_FACT_SHEET_EVAL_LOG_FILE_, (SubLObject)(fact_sheets.$str9$_cyc_projects_aquaint_ginko_metri.isSymbol() ? Symbols.symbol_value((SubLObject)fact_sheets.$str9$_cyc_projects_aquaint_ginko_metri) : fact_sheets.$str9$_cyc_projects_aquaint_ginko_metri), (SubLObject)fact_sheets.$kw2$PARAMETER, (SubLObject)fact_sheets.UNPROVIDED));
        fact_sheets.$fact_sheet_query_mt$ = SubLFiles.defparameter("*FACT-SHEET-QUERY-MT*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_table_type$ = SubLFiles.defparameter("*FACT-SHEET-TABLE-TYPE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_sentence$ = SubLFiles.defparameter("*FACT-SHEET-SENTENCE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$within_fact_sheet_paraphraseP$ = SubLFiles.defparameter("*WITHIN-FACT-SHEET-PARAPHRASE?*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_sentence_sorter_pred_counts$ = SubLFiles.defparameter("*FACT-SHEET-SENTENCE-SORTER-PRED-COUNTS*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_focal_term$ = SubLFiles.defparameter("*FACT-SHEET-FOCAL-TERM*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_verbosity$ = SubLFiles.defparameter("*FACT-SHEET-VERBOSITY*", (SubLObject)fact_sheets.$kw35$NORMAL);
        fact_sheets.$suppress_fact_sheet_extra_images$ = SubLFiles.defparameter("*SUPPRESS-FACT-SHEET-EXTRA-IMAGES*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$suppress_fact_sheet_extra_images_css$ = SubLFiles.defparameter("*SUPPRESS-FACT-SHEET-EXTRA-IMAGES-CSS*", (SubLObject)fact_sheets.$str39$_cycdoc_css_cb_fact_sheets_suppre);
        fact_sheets.$chmod_safe_to_useP$ = SubLFiles.defparameter("*CHMOD-SAFE-TO-USE?*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$catch_fact_sheet_errorsP$ = SubLFiles.defparameter("*CATCH-FACT-SHEET-ERRORS?*", (SubLObject)fact_sheets.T);
        fact_sheets.$fact_sheet_default_language_monad_mt$ = SubLFiles.deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MONAD-MT*", fact_sheets.$const55$FactSheetParaphraseMt);
        fact_sheets.$fact_sheet_default_language_mt_time_interval$ = SubLFiles.deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-TIME-INTERVAL*", fact_sheets.$const56$Now);
        fact_sheets.$fact_sheet_default_language_mt_time_parameter$ = SubLFiles.deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-TIME-PARAMETER*", fact_sheets.$const57$Null_TimeParameter);
        fact_sheets.$fact_sheet_default_language_mt_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$build_fact_sheet_default_language_mt_caching_state$ = SubLFiles.deflexical("*BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_default_domain_monad_mt$ = SubLFiles.deflexical("*FACT-SHEET-DEFAULT-DOMAIN-MONAD-MT*", fact_sheets.$const62$FactSheetGenerationMt);
        fact_sheets.$fact_sheet_default_domain_mt_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$build_fact_sheet_default_domain_mt_caching_state$ = SubLFiles.deflexical("*BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_thcl_section_category$ = SubLFiles.deflexical("*FACT-SHEET-THCL-SECTION-CATEGORY*", (SubLObject)fact_sheets.$str81$Miscellaneous);
        fact_sheets.$fact_sheet_table_border_width$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-BORDER-WIDTH*", (SubLObject)fact_sheets.ZERO_INTEGER);
        fact_sheets.$fact_sheet_table_cellpadding$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-CELLPADDING*", (SubLObject)fact_sheets.THREE_INTEGER);
        fact_sheets.$fact_sheet_table_horizontal_alignment$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-HORIZONTAL-ALIGNMENT*", (SubLObject)fact_sheets.$str111$center);
        fact_sheets.$fact_sheet_table_width$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-WIDTH*", (SubLObject)fact_sheets.$str112$50_);
        fact_sheets.$fact_sheet_table_title_bgcolor$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-TITLE-BGCOLOR*", html_macros.$html_color_cyc_logo_violet$.getGlobalValue());
        fact_sheets.$fact_sheet_table_title_font_color$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-TITLE-FONT-COLOR*", html_macros.$html_color_white$.getGlobalValue());
        fact_sheets.$fact_sheet_table_title_horizontal_alignment$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-TITLE-HORIZONTAL-ALIGNMENT*", (SubLObject)fact_sheets.$str111$center);
        fact_sheets.$fact_sheet_table_header_bgcolor$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-HEADER-BGCOLOR*", html_macros.$html_color_cyc_logo_violet$.getGlobalValue());
        fact_sheets.$fact_sheet_table_header_horizontal_alignment$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-HEADER-HORIZONTAL-ALIGNMENT*", (SubLObject)fact_sheets.$str111$center);
        fact_sheets.$fact_sheet_table_header_font_color$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-HEADER-FONT-COLOR*", html_macros.$html_color_white$.getGlobalValue());
        fact_sheets.$fact_sheet_table_data_bgcolor$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-DATA-BGCOLOR*", html_macros.$html_color_white$.getGlobalValue());
        fact_sheets.$fact_sheet_table_data_first_column_horizontal_alignment$ = SubLFiles.deflexical("*FACT-SHEET-TABLE-DATA-FIRST-COLUMN-HORIZONTAL-ALIGNMENT*", (SubLObject)fact_sheets.$str113$right);
        fact_sheets.$fact_sheet_relevant_terms$ = SubLFiles.defparameter("*FACT-SHEET-RELEVANT-TERMS*", (SubLObject)fact_sheets.$list175);
        fact_sheets.$fact_sheet_term_paraphrase_for_titleP$ = SubLFiles.defparameter("*FACT-SHEET-TERM-PARAPHRASE-FOR-TITLE?*", (SubLObject)fact_sheets.T);
        fact_sheets.$fact_sheet_use_base_urlP$ = SubLFiles.defparameter("*FACT-SHEET-USE-BASE-URL?*", (SubLObject)fact_sheets.T);
        fact_sheets.$fact_sheet_followup_loader_root_relative_path$ = SubLFiles.defparameter("*FACT-SHEET-FOLLOWUP-LOADER-ROOT-RELATIVE-PATH*", (SubLObject)fact_sheets.$str190$_Enesta_resources_followupLoader_);
        fact_sheets.$fact_sheet_request_patterns$ = SubLFiles.defconstant("*FACT-SHEET-REQUEST-PATTERNS*", (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.cons(string_utilities.$empty_string$.getGlobalValue(), string_utilities.$empty_string$.getGlobalValue()), ConsesLow.cons((SubLObject)fact_sheets.$str222$what_do_you_know_about_, string_utilities.$empty_string$.getGlobalValue()), ConsesLow.cons((SubLObject)fact_sheets.$str223$tell_me_about_, string_utilities.$empty_string$.getGlobalValue()), ConsesLow.cons((SubLObject)fact_sheets.$str224$facts_about_, string_utilities.$empty_string$.getGlobalValue()), ConsesLow.cons((SubLObject)fact_sheets.$str225$explain_, string_utilities.$empty_string$.getGlobalValue()), ConsesLow.cons((SubLObject)fact_sheets.$str226$fact_sheet_for_, string_utilities.$empty_string$.getGlobalValue()), ConsesLow.cons((SubLObject)fact_sheets.$str227$fact_sheet_about_, string_utilities.$empty_string$.getGlobalValue()), ConsesLow.cons((SubLObject)fact_sheets.$str228$show_, string_utilities.$empty_string$.getGlobalValue()), ConsesLow.cons(string_utilities.$empty_string$.getGlobalValue(), (SubLObject)fact_sheets.$str229$_facts), ConsesLow.cons(string_utilities.$empty_string$.getGlobalValue(), (SubLObject)fact_sheets.$str230$_knowledge), ConsesLow.cons(string_utilities.$empty_string$.getGlobalValue(), (SubLObject)fact_sheets.$str231$_fact_sheet) }));
        fact_sheets.$scalar_interval_p_caching_state$ = SubLFiles.deflexical("*SCALAR-INTERVAL-P-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$mini_fact_sheet_term_types$ = SubLFiles.deflexical("*MINI-FACT-SHEET-TERM-TYPES*", (SubLObject)fact_sheets.$list254);
        fact_sheets.$fact_sheet_data_path$ = SubLFiles.deflexical("*FACT-SHEET-DATA-PATH*", (SubLObject)ConsesLow.list((SubLObject)fact_sheets.$str255$data, (SubLObject)fact_sheets.$str256$fact_sheets));
        fact_sheets.$fact_sheet_id_upper_case_escape_char$ = SubLFiles.deflexical("*FACT-SHEET-ID-UPPER-CASE-ESCAPE-CHAR*", (SubLObject)Characters.CHAR_caret);
        fact_sheets.$fact_sheet_id_legacy_upper_case_escape_char$ = SubLFiles.deflexical("*FACT-SHEET-ID-LEGACY-UPPER-CASE-ESCAPE-CHAR*", (SubLObject)Characters.CHAR_vertical);
        fact_sheets.$use_fact_sheet_legacy_idsP$ = SubLFiles.defparameter("*USE-FACT-SHEET-LEGACY-IDS?*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_term_id_low_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-TERM-ID-LOW-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$warn_unknown_fact_sheet_term_id_caching_state$ = SubLFiles.deflexical("*WARN-UNKNOWN-FACT-SHEET-TERM-ID-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_category_order$ = SubLFiles.deflexical("*FACT-SHEET-CATEGORY-ORDER*", (SubLObject)fact_sheets.$list276);
        fact_sheets.$fact_sheet_sentence_group_summary_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-SENTENCE-GROUP-SUMMARY-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_bogus_url_prefix$ = SubLFiles.deflexical("*FACT-SHEET-BOGUS-URL-PREFIX*", (SubLObject)fact_sheets.$str282$http___fact_sheet);
        fact_sheets.$fact_sheet_outer_table_class$ = SubLFiles.deflexical("*FACT-SHEET-OUTER-TABLE-CLASS*", (SubLObject)fact_sheets.$str323$fs_outer_table);
        fact_sheets.$fact_sheet_main_image$ = SubLFiles.deflexical("*FACT-SHEET-MAIN-IMAGE*", (SubLObject)fact_sheets.$str324$fs_main_image);
        fact_sheets.$fact_sheet_in_cyc_logo$ = SubLFiles.deflexical("*FACT-SHEET-IN-CYC-LOGO*", (SubLObject)fact_sheets.$str325$fs_in_cyc_logo);
        fact_sheets.$fact_sheet_title$ = SubLFiles.deflexical("*FACT-SHEET-TITLE*", (SubLObject)fact_sheets.$str326$fs_title);
        fact_sheets.$fact_sheet_title_div$ = SubLFiles.deflexical("*FACT-SHEET-TITLE-DIV*", (SubLObject)fact_sheets.$str327$fs_title_div);
        fact_sheets.$fact_sheet_category_title$ = SubLFiles.deflexical("*FACT-SHEET-CATEGORY-TITLE*", (SubLObject)fact_sheets.$str328$fs_category);
        fact_sheets.$fact_sheet_fact_class1$ = SubLFiles.deflexical("*FACT-SHEET-FACT-CLASS1*", (SubLObject)fact_sheets.$str329$fs_fact_1);
        fact_sheets.$fact_sheet_fact_class2$ = SubLFiles.deflexical("*FACT-SHEET-FACT-CLASS2*", (SubLObject)fact_sheets.$str330$fs_fact_2);
        fact_sheets.$fact_sheet_footnote_class1$ = SubLFiles.deflexical("*FACT-SHEET-FOOTNOTE-CLASS1*", (SubLObject)fact_sheets.$str331$fs_footnote_1);
        fact_sheets.$fact_sheet_footnote_class2$ = SubLFiles.deflexical("*FACT-SHEET-FOOTNOTE-CLASS2*", (SubLObject)fact_sheets.$str332$fs_footnote_2);
        fact_sheets.$fact_sheet_kb_version_string_introducer$ = SubLFiles.deflexical("*FACT-SHEET-KB-VERSION-STRING-INTRODUCER*", (SubLObject)fact_sheets.$str340$KB__);
        fact_sheets.$fact_sheet_revision_string_introducer$ = SubLFiles.deflexical("*FACT-SHEET-REVISION-STRING-INTRODUCER*", (SubLObject)fact_sheets.$str341$System__);
        fact_sheets.$fact_sheet_demerit_cutoff$ = SubLFiles.deflexical("*FACT-SHEET-DEMERIT-CUTOFF*", (SubLObject)fact_sheets.TWO_INTEGER);
        fact_sheets.$fact_sheet_min_paragraph_length$ = SubLFiles.deflexical("*FACT-SHEET-MIN-PARAGRAPH-LENGTH*", (SubLObject)fact_sheets.FOUR_INTEGER);
        fact_sheets.$fact_sheet_verbosities$ = SubLFiles.deflexical("*FACT-SHEET-VERBOSITIES*", (SubLObject)fact_sheets.$list355);
        fact_sheets.$fact_sheet_image_max_width$ = SubLFiles.deflexical("*FACT-SHEET-IMAGE-MAX-WIDTH*", (SubLObject)fact_sheets.$int356$500);
        fact_sheets.$fact_sheet_image_max_height$ = SubLFiles.deflexical("*FACT-SHEET-IMAGE-MAX-HEIGHT*", (SubLObject)fact_sheets.$int357$200);
        fact_sheets.$fact_sheet_image_root_placeholder$ = SubLFiles.deflexical("*FACT-SHEET-IMAGE-ROOT-PLACEHOLDER*", (SubLObject)fact_sheets.$str358$FACT_SHEET_IMAGE_ROOT_);
        fact_sheets.$fact_sheet_base_url_placeholder$ = SubLFiles.deflexical("*FACT-SHEET-BASE-URL-PLACEHOLDER*", (SubLObject)fact_sheets.$str361$FACT_SHEET_BASE_URL_);
        fact_sheets.$fact_sheet_replacement_color_spec$ = SubLFiles.defparameter("*FACT-SHEET-REPLACEMENT-COLOR-SPEC*", (SubLObject)ConsesLow.list(reader.bq_cons(html_macros.$html_color_cyc_logo_light_violet$.getGlobalValue(), html_macros.$html_color_cyc_logo_light_blue$.getGlobalValue()), reader.bq_cons(html_macros.$html_color_cyc_logo_lighter_violet$.getGlobalValue(), html_macros.$html_color_cyc_logo_lighter_blue$.getGlobalValue())));
        fact_sheets.$fact_sheet_image_file_root_directory$ = SubLFiles.deflexical("*FACT-SHEET-IMAGE-FILE-ROOT-DIRECTORY*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_image_file_root_url_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-IMAGE-FILE-ROOT-URL-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$use_fact_sheet_image_file_root_urlP$ = SubLFiles.defparameter("*USE-FACT-SHEET-IMAGE-FILE-ROOT-URL?*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$use_relative_fact_sheet_image_urlsP$ = SubLFiles.defparameter("*USE-RELATIVE-FACT-SHEET-IMAGE-URLS?*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_image_url_root_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-IMAGE-URL-ROOT-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$get_mini_fact_sheet_for_term_cached_caching_state$ = SubLFiles.deflexical("*GET-MINI-FACT-SHEET-FOR-TERM-CACHED-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$use_fact_sheet_builder_queriesP$ = SubLFiles.defparameter("*USE-FACT-SHEET-BUILDER-QUERIES?*", (SubLObject)fact_sheets.T);
        fact_sheets.$include_miscellaneous_on_fact_sheetsP$ = SubLFiles.defparameter("*INCLUDE-MISCELLANEOUS-ON-FACT-SHEETS?*", (SubLObject)fact_sheets.T);
        fact_sheets.$omitted_fact_sheet_sentences$ = SubLFiles.defparameter("*OMITTED-FACT-SHEET-SENTENCES*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_sentences_for_term_from_kbq_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_sentences_for_term_internal_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_pred_aboutness_map$ = SubLFiles.deflexical("*FACT-SHEET-PRED-ABOUTNESS-MAP*", (SubLObject)fact_sheets.$list400);
        fact_sheets.$fact_sheet_sentence_trivially_impliesP_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_highly_prevalent_among_instancesP_cached_caching_state$ = SubLFiles.deflexical("*FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_transitivity_check_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-TRANSITIVITY-CHECK-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_queries_browsableP$ = SubLFiles.defparameter("*FACT-SHEET-QUERIES-BROWSABLE?*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_query_spec_pool$ = SubLFiles.deflexical("*FACT-SHEET-QUERY-SPEC-POOL*", stacks.create_stack());
        fact_sheets.$fact_sheet_query_polling_interval$ = SubLFiles.deflexical("*FACT-SHEET-QUERY-POLLING-INTERVAL*", (SubLObject)fact_sheets.$float401$0_5);
        fact_sheets.$fact_sheet_label_for_category_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-LABEL-FOR-CATEGORY-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_sentence_time_interval_cached_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_optional_section_start_comment_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-OPTIONAL-SECTION-START-COMMENT-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_optional_section_end_comment_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-OPTIONAL-SECTION-END-COMMENT-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_under_construction_code$ = SubLFiles.deflexical("*FACT-SHEET-UNDER-CONSTRUCTION-CODE*", (SubLObject)fact_sheets.MINUS_ONE_INTEGER);
        fact_sheets.$stop_fact_sheet_update_after_current_termP$ = SubLFiles.deflexical("*STOP-FACT-SHEET-UPDATE-AFTER-CURRENT-TERM?*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_inactivity_image_restart_delay$ = SubLFiles.deflexical("*FACT-SHEET-INACTIVITY-IMAGE-RESTART-DELAY*", Numbers.multiply((SubLObject)fact_sheets.$int536$60, (SubLObject)fact_sheets.$int536$60));
        fact_sheets.$fact_sheet_generator_update_date_and_second$ = SubLFiles.defparameter("*FACT-SHEET-GENERATOR-UPDATE-DATE-AND-SECOND*", (SubLObject)fact_sheets.$list539);
        fact_sheets.$fact_sheet_screensaver_users$ = SubLFiles.deflexical("*FACT-SHEET-SCREENSAVER-USERS*", (SubLObject)fact_sheets.$list618);
        fact_sheets.$fact_sheet_screensavers$ = SubLFiles.deflexical("*FACT-SHEET-SCREENSAVERS*", (SubLObject)((fact_sheets.NIL != Symbols.boundp((SubLObject)fact_sheets.$sym619$_FACT_SHEET_SCREENSAVERS_)) ? fact_sheets.$fact_sheet_screensavers$.getGlobalValue() : fact_sheets.NIL));
        fact_sheets.$fact_sheet_screensavers_should_sleepP$ = SubLFiles.deflexical("*FACT-SHEET-SCREENSAVERS-SHOULD-SLEEP?*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_screensavers_should_dieP$ = SubLFiles.deflexical("*FACT-SHEET-SCREENSAVERS-SHOULD-DIE?*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_query_soft_timeout_time$ = SubLFiles.defparameter("*FACT-SHEET-QUERY-SOFT-TIMEOUT-TIME*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$ = SubLFiles.defparameter("*FACT-SHEET-PARAPHRASE-SOFT-TIMEOUT-TIME*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_directory_from_list_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-DIRECTORY-FROM-LIST-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$dtp_fact_sheet_update_term_prioritizer$ = SubLFiles.defconstant("*DTP-FACT-SHEET-UPDATE-TERM-PRIORITIZER*", (SubLObject)fact_sheets.$sym655$FACT_SHEET_UPDATE_TERM_PRIORITIZER);
        fact_sheets.$fact_sheet_update_term_prioritizers$ = SubLFiles.deflexical("*FACT-SHEET-UPDATE-TERM-PRIORITIZERS*", (fact_sheets.NIL != Symbols.boundp((SubLObject)fact_sheets.$sym701$_FACT_SHEET_UPDATE_TERM_PRIORITIZERS_)) ? fact_sheets.$fact_sheet_update_term_prioritizers$.getGlobalValue() : dictionary.new_dictionary(Symbols.symbol_function((SubLObject)fact_sheets.EQUAL), (SubLObject)fact_sheets.UNPROVIDED));
        fact_sheets.$fsut_prioritizer_default_nice_level$ = SubLFiles.defparameter("*FSUT-PRIORITIZER-DEFAULT-NICE-LEVEL*", (SubLObject)fact_sheets.ZERO_INTEGER);
        fact_sheets.$fsut_prioritizer_max_nice_level$ = SubLFiles.deflexical("*FSUT-PRIORITIZER-MAX-NICE-LEVEL*", (SubLObject)fact_sheets.NINETEEN_INTEGER);
        fact_sheets.$fsut_prioritizer_min_nice_level$ = SubLFiles.deflexical("*FSUT-PRIORITIZER-MIN-NICE-LEVEL*", (SubLObject)fact_sheets.$int702$_20);
        fact_sheets.$fsut_prioritizer_default_new_days$ = SubLFiles.defparameter("*FSUT-PRIORITIZER-DEFAULT-NEW-DAYS*", (SubLObject)fact_sheets.ZERO_INTEGER);
        fact_sheets.$fsut_prioritizer_divisor$ = SubLFiles.deflexical("*FSUT-PRIORITIZER-DIVISOR*", (SubLObject)fact_sheets.$int711$100);
        fact_sheets.$fsut_prioritizer_sleep_interval_from_nice_level_caching_state$ = SubLFiles.deflexical("*FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_statuses$ = SubLFiles.deflexical("*FACT-SHEET-STATUSES*", (SubLObject)fact_sheets.$list727);
        fact_sheets.$fact_sheet_updating_lock$ = SubLFiles.deflexical("*FACT-SHEET-UPDATING-LOCK*", (fact_sheets.NIL != Symbols.boundp((SubLObject)fact_sheets.$sym786$_FACT_SHEET_UPDATING_LOCK_)) ? fact_sheets.$fact_sheet_updating_lock$.getGlobalValue() : Locks.make_lock((SubLObject)fact_sheets.$str787$Fact_Sheet_Data_Update_Lock));
        fact_sheets.$fact_sheet_updating_process_dictionary$ = SubLFiles.defvar("*FACT-SHEET-UPDATING-PROCESS-DICTIONARY*", dictionary.new_dictionary((SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED));
        fact_sheets.$fact_sheet_lookaside_cache$ = SubLFiles.defparameter("*FACT-SHEET-LOOKASIDE-CACHE*", dictionary.new_dictionary((SubLObject)fact_sheets.EQUAL, (SubLObject)fact_sheets.UNPROVIDED));
        fact_sheets.$public_fact_sheet_path$ = SubLFiles.defparameter("*PUBLIC-FACT-SHEET-PATH*", list_utilities.add_to_end((SubLObject)fact_sheets.$str789$public, fact_sheet_data_path()));
        fact_sheets.$public_fact_sheet_ad_html$ = SubLFiles.deflexical("*PUBLIC-FACT-SHEET-AD-HTML*", (SubLObject)fact_sheets.$str790$_script_type__text_javascript____);
        fact_sheets.$get_public_fact_sheet_term_parent_directory_string_caching_state$ = SubLFiles.deflexical("*GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$terms_for_public_fact_sheets_caching_state$ = SubLFiles.deflexical("*TERMS-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$types_for_public_fact_sheets_caching_state$ = SubLFiles.deflexical("*TYPES-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fact_sheet_term_strings_caching_state$ = SubLFiles.deflexical("*FACT-SHEET-TERM-STRINGS-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$get_public_fact_sheet_string_url_mappings_caching_state$ = SubLFiles.deflexical("*GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$incyc_factsheet_staging_directory$ = SubLFiles.defparameter("*INCYC-FACTSHEET-STAGING-DIRECTORY*", (SubLObject)fact_sheets.$str826$_cyc_projects_inCyc_staging_area_);
        fact_sheets.$incyc_searchdata_staging_file$ = SubLFiles.defparameter("*INCYC-SEARCHDATA-STAGING-FILE*", (SubLObject)fact_sheets.$str827$_cyc_projects_inCyc_staging_area_);
        fact_sheets.$incyc_searchdata_xml_file$ = SubLFiles.defparameter("*INCYC-SEARCHDATA-XML-FILE*", (SubLObject)fact_sheets.$str828$_cyc_projects_inCyc_staging_area_);
        fact_sheets.$incyc_searchdata_htaccess_file$ = SubLFiles.defparameter("*INCYC-SEARCHDATA-HTACCESS-FILE*", (SubLObject)fact_sheets.$str829$_cyc_projects_inCyc_staging_area_);
        fact_sheets.$incyc_searchdata_sql_file$ = SubLFiles.defparameter("*INCYC-SEARCHDATA-SQL-FILE*", (SubLObject)fact_sheets.$str830$_cyc_projects_inCyc_staging_area_);
        fact_sheets.$public_fact_sheet_properties$ = SubLFiles.deflexical("*PUBLIC-FACT-SHEET-PROPERTIES*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$fs_type$ = SubLFiles.defparameter("*FS-TYPE*", (SubLObject)fact_sheets.NIL);
        fact_sheets.$cached_num_gaf_arg_index_caching_state$ = SubLFiles.deflexical("*CACHED-NUM-GAF-ARG-INDEX-CACHING-STATE*", (SubLObject)fact_sheets.NIL);
        return (SubLObject)fact_sheets.NIL;
    }
    
    public static SubLObject setup_fact_sheets_file() {
        access_macros.register_external_symbol((SubLObject)fact_sheets.$sym6$ALLOW_FACT_SHEET_EVALUATIONS);
        removal_modules_indexical_referent.register_indexical_referent_expansion(fact_sheets.$const10$FactSheetQueryContextIndexical, (SubLObject)fact_sheets.$sym11$INDEXICAL_FACT_SHEET_QUERY_MT);
        utilities_macros.note_funcall_helper_function((SubLObject)fact_sheets.$sym11$INDEXICAL_FACT_SHEET_QUERY_MT);
        removal_modules_indexical_referent.register_indexical_referent_expansion(fact_sheets.$const12$FactSheetTableTypeIndexical, (SubLObject)fact_sheets.$sym13$INDEXICAL_FACT_SHEET_TABLE_TYPE);
        utilities_macros.note_funcall_helper_function((SubLObject)fact_sheets.$sym13$INDEXICAL_FACT_SHEET_TABLE_TYPE);
        removal_modules_indexical_referent.register_indexical_referent_expansion(fact_sheets.$const14$FactSheetSentenceIndexical, (SubLObject)fact_sheets.$sym15$INDEXICAL_FACT_SHEET_SENTENCE);
        utilities_macros.note_funcall_helper_function((SubLObject)fact_sheets.$sym15$INDEXICAL_FACT_SHEET_SENTENCE);
        removal_modules_indexical_referent.register_indexical_referent_expansion(fact_sheets.$const33$FactSheetTopicIndexical, (SubLObject)fact_sheets.$sym34$INDEXICAL_FACT_SHEET_TOPIC);
        utilities_macros.note_funcall_helper_function((SubLObject)fact_sheets.$sym34$INDEXICAL_FACT_SHEET_TOPIC);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym58$FACT_SHEET_DEFAULT_LANGUAGE_MT);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym60$BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym63$FACT_SHEET_DEFAULT_DOMAIN_MT);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym65$BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT);
        access_macros.register_external_symbol((SubLObject)fact_sheets.$sym82$GET_FACT_SHEET_FOR_TERM_IN_XML_WITH_ONLY_KB_SPECIFIED_CONTENT);
        access_macros.register_external_symbol((SubLObject)fact_sheets.$sym86$GET_FACT_SHEET_FOR_TERM_IN_HTML);
        memoization_state.note_memoized_function((SubLObject)fact_sheets.$sym154$FACT_SHEET_TABLE_TYPE_WIDTH);
        access_macros.register_external_symbol((SubLObject)fact_sheets.$sym219$GET_FACT_SHEET_FOR_TERM_ID_IN_HTML);
        access_macros.register_external_symbol((SubLObject)fact_sheets.$sym220$CLEAR_ALL_FACT_SHEET_CACHES);
        access_macros.register_external_symbol((SubLObject)fact_sheets.$sym237$GET_POSSIBLE_FACT_SHEET_TERMS_MENTIONED_IN_STRING);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym247$SCALAR_INTERVAL_P);
        access_macros.register_external_symbol((SubLObject)fact_sheets.$sym251$TERM_OK_FOR_FACT_SHEET_P);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym258$FACT_SHEET_TERM_ID_LOW);
        access_macros.register_external_symbol((SubLObject)fact_sheets.$sym261$FACT_SHEET_TERM_FROM_ID);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym263$WARN_UNKNOWN_FACT_SHEET_TERM_ID);
        access_macros.register_external_symbol((SubLObject)fact_sheets.$sym266$FACT_SHEET_TERM_FROM_SPAN_ID);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym277$FACT_SHEET_SENTENCE_GROUP_SUMMARY);
        generic_testing.define_test_case_table_int((SubLObject)fact_sheets.$sym297$GET_TERM_AND_CLOSE_TAG_FROM_TOKEN, (SubLObject)ConsesLow.list(new SubLObject[] { fact_sheets.$kw298$TEST, fact_sheets.EQUAL, fact_sheets.$kw299$OWNER, fact_sheets.NIL, fact_sheets.$kw300$CLASSES, fact_sheets.NIL, fact_sheets.$kw301$KB, fact_sheets.$kw302$FULL, fact_sheets.$kw303$WORKING_, fact_sheets.T }), (SubLObject)fact_sheets.$list304);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym363$FACT_SHEET_IMAGE_FILE_ROOT_URL);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym367$FACT_SHEET_IMAGE_URL_ROOT);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym377$GET_MINI_FACT_SHEET_FOR_TERM_CACHED);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym389$FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym394$FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym411$FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym436$FACT_SHEET_TRANSITIVITY_CHECK);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym449$FACT_SHEET_LABEL_FOR_CATEGORY);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym455$FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED);
        memoization_state.note_memoized_function((SubLObject)fact_sheets.$sym457$FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY);
        memoization_state.note_memoized_function((SubLObject)fact_sheets.$sym467$FACT_SHEET_SENTENCE_COHERENCE);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym93$FACT_SHEET_OPTIONAL_SECTION_START_COMMENT);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym95$FACT_SHEET_OPTIONAL_SECTION_END_COMMENT);
        access_macros.register_external_symbol((SubLObject)fact_sheets.$sym486$TERM_HAS_PRECACHED_FACT_SHEET_);
        memoization_state.note_memoized_function((SubLObject)fact_sheets.$sym497$MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM);
        subl_macro_promotions.declare_defglobal((SubLObject)fact_sheets.$sym619$_FACT_SHEET_SCREENSAVERS_);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym653$FACT_SHEET_DIRECTORY_FROM_LIST);
        Structures.register_method(print_high.$print_object_method_table$.getGlobalValue(), fact_sheets.$dtp_fact_sheet_update_term_prioritizer$.getGlobalValue(), Symbols.symbol_function((SubLObject)fact_sheets.$sym662$FACT_SHEET_UPDATE_TERM_PRIORITIZER_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim((SubLObject)fact_sheets.$list663);
        Structures.def_csetf((SubLObject)fact_sheets.$sym664$FSUT_PRIORITIZER_STALE_TERMS, (SubLObject)fact_sheets.$sym665$_CSETF_FSUT_PRIORITIZER_STALE_TERMS);
        Structures.def_csetf((SubLObject)fact_sheets.$sym666$FSUT_PRIORITIZER_MISSING_TERMS, (SubLObject)fact_sheets.$sym667$_CSETF_FSUT_PRIORITIZER_MISSING_TERMS);
        Structures.def_csetf((SubLObject)fact_sheets.$sym668$FSUT_PRIORITIZER_UP_TO_DATE_TERMS, (SubLObject)fact_sheets.$sym669$_CSETF_FSUT_PRIORITIZER_UP_TO_DATE_TERMS);
        Structures.def_csetf((SubLObject)fact_sheets.$sym670$FSUT_PRIORITIZER_THREAD, (SubLObject)fact_sheets.$sym671$_CSETF_FSUT_PRIORITIZER_THREAD);
        Structures.def_csetf((SubLObject)fact_sheets.$sym672$FSUT_PRIORITIZER_SHOULD_SLEEP_, (SubLObject)fact_sheets.$sym673$_CSETF_FSUT_PRIORITIZER_SHOULD_SLEEP_);
        Structures.def_csetf((SubLObject)fact_sheets.$sym674$FSUT_PRIORITIZER_VERBOSITY, (SubLObject)fact_sheets.$sym675$_CSETF_FSUT_PRIORITIZER_VERBOSITY);
        Structures.def_csetf((SubLObject)fact_sheets.$sym676$FSUT_PRIORITIZER_DOMAIN_MT, (SubLObject)fact_sheets.$sym677$_CSETF_FSUT_PRIORITIZER_DOMAIN_MT);
        Structures.def_csetf((SubLObject)fact_sheets.$sym678$FSUT_PRIORITIZER_LANGUAGE_MT, (SubLObject)fact_sheets.$sym679$_CSETF_FSUT_PRIORITIZER_LANGUAGE_MT);
        Structures.def_csetf((SubLObject)fact_sheets.$sym680$FSUT_PRIORITIZER_NICE_LEVEL, (SubLObject)fact_sheets.$sym681$_CSETF_FSUT_PRIORITIZER_NICE_LEVEL);
        Structures.def_csetf((SubLObject)fact_sheets.$sym682$FSUT_PRIORITIZER_NEW_DAYS, (SubLObject)fact_sheets.$sym683$_CSETF_FSUT_PRIORITIZER_NEW_DAYS);
        Equality.identity((SubLObject)fact_sheets.$sym655$FACT_SHEET_UPDATE_TERM_PRIORITIZER);
        Structures.register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), fact_sheets.$dtp_fact_sheet_update_term_prioritizer$.getGlobalValue(), Symbols.symbol_function((SubLObject)fact_sheets.$sym699$VISIT_DEFSTRUCT_OBJECT_FACT_SHEET_UPDATE_TERM_PRIORITIZER_METHOD));
        subl_macro_promotions.declare_defglobal((SubLObject)fact_sheets.$sym701$_FACT_SHEET_UPDATE_TERM_PRIORITIZERS_);
        utilities_macros.note_funcall_helper_function((SubLObject)fact_sheets.$sym704$FSUT_PRIORITIZER_QUEUE_RANK_FUNC);
        utilities_macros.note_funcall_helper_function((SubLObject)fact_sheets.$sym705$FSUT_PRIORITIZER_QUEUE_COMP_FUNC);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym721$FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL);
        memoization_state.note_memoized_function((SubLObject)fact_sheets.$sym731$PRED_ARGNUM_COMBOS_FOR_TERM);
        html_macros.note_cgi_handler_function((SubLObject)fact_sheets.$sym764$CB_FACT_SHEET_EVALUATION, (SubLObject)fact_sheets.$kw765$HTML_HANDLER);
        html_macros.note_cgi_handler_function((SubLObject)fact_sheets.$sym779$CB_HANDLE_FACT_SHEET_EVALUATION, (SubLObject)fact_sheets.$kw765$HTML_HANDLER);
        subl_macro_promotions.declare_defglobal((SubLObject)fact_sheets.$sym786$_FACT_SHEET_UPDATING_LOCK_);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym792$GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym801$TERMS_FOR_PUBLIC_FACT_SHEETS);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym809$TYPES_FOR_PUBLIC_FACT_SHEETS);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym812$FACT_SHEET_TERM_STRINGS);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym815$GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS);
        memoization_state.note_globally_cached_function((SubLObject)fact_sheets.$sym896$CACHED_NUM_GAF_ARG_INDEX);
        generic_testing.define_test_case_table_int((SubLObject)fact_sheets.$sym910$FACT_SHEETS_TERM_FROM_STRING_CONTAINS_, (SubLObject)ConsesLow.list(new SubLObject[] { fact_sheets.$kw298$TEST, fact_sheets.NIL, fact_sheets.$kw299$OWNER, fact_sheets.NIL, fact_sheets.$kw300$CLASSES, fact_sheets.NIL, fact_sheets.$kw301$KB, fact_sheets.$kw302$FULL, fact_sheets.$kw303$WORKING_, fact_sheets.T }), (SubLObject)fact_sheets.$list911);
        return (SubLObject)fact_sheets.NIL;
    }
    
    public void declareFunctions() {
        declare_fact_sheets_file();
    }
    
    public void initializeVariables() {
        init_fact_sheets_file();
    }
    
    public void runTopLevelForms() {
        setup_fact_sheets_file();
    }
    
    static {
        me = (SubLFile)new fact_sheets();
        fact_sheets.$allow_fact_sheet_evaluationsP$ = null;
        fact_sheets.$fact_sheet_eval_log_file$ = null;
        fact_sheets.$fact_sheet_query_mt$ = null;
        fact_sheets.$fact_sheet_table_type$ = null;
        fact_sheets.$fact_sheet_sentence$ = null;
        fact_sheets.$within_fact_sheet_paraphraseP$ = null;
        fact_sheets.$fact_sheet_sentence_sorter_pred_counts$ = null;
        fact_sheets.$fact_sheet_focal_term$ = null;
        fact_sheets.$fact_sheet_verbosity$ = null;
        fact_sheets.$suppress_fact_sheet_extra_images$ = null;
        fact_sheets.$suppress_fact_sheet_extra_images_css$ = null;
        fact_sheets.$chmod_safe_to_useP$ = null;
        fact_sheets.$catch_fact_sheet_errorsP$ = null;
        fact_sheets.$fact_sheet_default_language_monad_mt$ = null;
        fact_sheets.$fact_sheet_default_language_mt_time_interval$ = null;
        fact_sheets.$fact_sheet_default_language_mt_time_parameter$ = null;
        fact_sheets.$fact_sheet_default_language_mt_caching_state$ = null;
        fact_sheets.$build_fact_sheet_default_language_mt_caching_state$ = null;
        fact_sheets.$fact_sheet_default_domain_monad_mt$ = null;
        fact_sheets.$fact_sheet_default_domain_mt_caching_state$ = null;
        fact_sheets.$build_fact_sheet_default_domain_mt_caching_state$ = null;
        fact_sheets.$fact_sheet_thcl_section_category$ = null;
        fact_sheets.$fact_sheet_table_border_width$ = null;
        fact_sheets.$fact_sheet_table_cellpadding$ = null;
        fact_sheets.$fact_sheet_table_horizontal_alignment$ = null;
        fact_sheets.$fact_sheet_table_width$ = null;
        fact_sheets.$fact_sheet_table_title_bgcolor$ = null;
        fact_sheets.$fact_sheet_table_title_font_color$ = null;
        fact_sheets.$fact_sheet_table_title_horizontal_alignment$ = null;
        fact_sheets.$fact_sheet_table_header_bgcolor$ = null;
        fact_sheets.$fact_sheet_table_header_horizontal_alignment$ = null;
        fact_sheets.$fact_sheet_table_header_font_color$ = null;
        fact_sheets.$fact_sheet_table_data_bgcolor$ = null;
        fact_sheets.$fact_sheet_table_data_first_column_horizontal_alignment$ = null;
        fact_sheets.$fact_sheet_relevant_terms$ = null;
        fact_sheets.$fact_sheet_term_paraphrase_for_titleP$ = null;
        fact_sheets.$fact_sheet_use_base_urlP$ = null;
        fact_sheets.$fact_sheet_followup_loader_root_relative_path$ = null;
        fact_sheets.$fact_sheet_request_patterns$ = null;
        fact_sheets.$scalar_interval_p_caching_state$ = null;
        fact_sheets.$mini_fact_sheet_term_types$ = null;
        fact_sheets.$fact_sheet_data_path$ = null;
        fact_sheets.$fact_sheet_id_upper_case_escape_char$ = null;
        fact_sheets.$fact_sheet_id_legacy_upper_case_escape_char$ = null;
        fact_sheets.$use_fact_sheet_legacy_idsP$ = null;
        fact_sheets.$fact_sheet_term_id_low_caching_state$ = null;
        fact_sheets.$warn_unknown_fact_sheet_term_id_caching_state$ = null;
        fact_sheets.$fact_sheet_category_order$ = null;
        fact_sheets.$fact_sheet_sentence_group_summary_caching_state$ = null;
        fact_sheets.$fact_sheet_bogus_url_prefix$ = null;
        fact_sheets.$fact_sheet_outer_table_class$ = null;
        fact_sheets.$fact_sheet_main_image$ = null;
        fact_sheets.$fact_sheet_in_cyc_logo$ = null;
        fact_sheets.$fact_sheet_title$ = null;
        fact_sheets.$fact_sheet_title_div$ = null;
        fact_sheets.$fact_sheet_category_title$ = null;
        fact_sheets.$fact_sheet_fact_class1$ = null;
        fact_sheets.$fact_sheet_fact_class2$ = null;
        fact_sheets.$fact_sheet_footnote_class1$ = null;
        fact_sheets.$fact_sheet_footnote_class2$ = null;
        fact_sheets.$fact_sheet_kb_version_string_introducer$ = null;
        fact_sheets.$fact_sheet_revision_string_introducer$ = null;
        fact_sheets.$fact_sheet_demerit_cutoff$ = null;
        fact_sheets.$fact_sheet_min_paragraph_length$ = null;
        fact_sheets.$fact_sheet_verbosities$ = null;
        fact_sheets.$fact_sheet_image_max_width$ = null;
        fact_sheets.$fact_sheet_image_max_height$ = null;
        fact_sheets.$fact_sheet_image_root_placeholder$ = null;
        fact_sheets.$fact_sheet_base_url_placeholder$ = null;
        fact_sheets.$fact_sheet_replacement_color_spec$ = null;
        fact_sheets.$fact_sheet_image_file_root_directory$ = null;
        fact_sheets.$fact_sheet_image_file_root_url_caching_state$ = null;
        fact_sheets.$use_fact_sheet_image_file_root_urlP$ = null;
        fact_sheets.$use_relative_fact_sheet_image_urlsP$ = null;
        fact_sheets.$fact_sheet_image_url_root_caching_state$ = null;
        fact_sheets.$get_mini_fact_sheet_for_term_cached_caching_state$ = null;
        fact_sheets.$use_fact_sheet_builder_queriesP$ = null;
        fact_sheets.$include_miscellaneous_on_fact_sheetsP$ = null;
        fact_sheets.$omitted_fact_sheet_sentences$ = null;
        fact_sheets.$fact_sheet_sentences_for_term_from_kbq_caching_state$ = null;
        fact_sheets.$fact_sheet_sentences_for_term_internal_caching_state$ = null;
        fact_sheets.$fact_sheet_pred_aboutness_map$ = null;
        fact_sheets.$fact_sheet_sentence_trivially_impliesP_caching_state$ = null;
        fact_sheets.$fact_highly_prevalent_among_instancesP_cached_caching_state$ = null;
        fact_sheets.$fact_sheet_transitivity_check_caching_state$ = null;
        fact_sheets.$fact_sheet_queries_browsableP$ = null;
        fact_sheets.$fact_sheet_query_spec_pool$ = null;
        fact_sheets.$fact_sheet_query_polling_interval$ = null;
        fact_sheets.$fact_sheet_label_for_category_caching_state$ = null;
        fact_sheets.$fact_sheet_sentence_time_interval_cached_caching_state$ = null;
        fact_sheets.$fact_sheet_optional_section_start_comment_caching_state$ = null;
        fact_sheets.$fact_sheet_optional_section_end_comment_caching_state$ = null;
        fact_sheets.$fact_sheet_under_construction_code$ = null;
        fact_sheets.$stop_fact_sheet_update_after_current_termP$ = null;
        fact_sheets.$fact_sheet_inactivity_image_restart_delay$ = null;
        fact_sheets.$fact_sheet_generator_update_date_and_second$ = null;
        fact_sheets.$fact_sheet_screensaver_users$ = null;
        fact_sheets.$fact_sheet_screensavers$ = null;
        fact_sheets.$fact_sheet_screensavers_should_sleepP$ = null;
        fact_sheets.$fact_sheet_screensavers_should_dieP$ = null;
        fact_sheets.$fact_sheet_query_soft_timeout_time$ = null;
        fact_sheets.$fact_sheet_paraphrase_soft_timeout_time$ = null;
        fact_sheets.$fact_sheet_directory_from_list_caching_state$ = null;
        fact_sheets.$dtp_fact_sheet_update_term_prioritizer$ = null;
        fact_sheets.$fact_sheet_update_term_prioritizers$ = null;
        fact_sheets.$fsut_prioritizer_default_nice_level$ = null;
        fact_sheets.$fsut_prioritizer_max_nice_level$ = null;
        fact_sheets.$fsut_prioritizer_min_nice_level$ = null;
        fact_sheets.$fsut_prioritizer_default_new_days$ = null;
        fact_sheets.$fsut_prioritizer_divisor$ = null;
        fact_sheets.$fsut_prioritizer_sleep_interval_from_nice_level_caching_state$ = null;
        fact_sheets.$fact_sheet_statuses$ = null;
        fact_sheets.$fact_sheet_updating_lock$ = null;
        fact_sheets.$fact_sheet_updating_process_dictionary$ = null;
        fact_sheets.$fact_sheet_lookaside_cache$ = null;
        fact_sheets.$public_fact_sheet_path$ = null;
        fact_sheets.$public_fact_sheet_ad_html$ = null;
        fact_sheets.$get_public_fact_sheet_term_parent_directory_string_caching_state$ = null;
        fact_sheets.$terms_for_public_fact_sheets_caching_state$ = null;
        fact_sheets.$types_for_public_fact_sheets_caching_state$ = null;
        fact_sheets.$fact_sheet_term_strings_caching_state$ = null;
        fact_sheets.$get_public_fact_sheet_string_url_mappings_caching_state$ = null;
        fact_sheets.$incyc_factsheet_staging_directory$ = null;
        fact_sheets.$incyc_searchdata_staging_file$ = null;
        fact_sheets.$incyc_searchdata_xml_file$ = null;
        fact_sheets.$incyc_searchdata_htaccess_file$ = null;
        fact_sheets.$incyc_searchdata_sql_file$ = null;
        fact_sheets.$public_fact_sheet_properties$ = null;
        fact_sheets.$fs_type$ = null;
        fact_sheets.$cached_num_gaf_arg_index_caching_state$ = null;
        $list0 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("application.cae.allow-fact-sheet-evaluations?"));
        $sym1$_ALLOW_FACT_SHEET_EVALUATIONS__ = SubLObjectFactory.makeSymbol("*ALLOW-FACT-SHEET-EVALUATIONS?*");
        $kw2$PARAMETER = SubLObjectFactory.makeKeyword("PARAMETER");
        $sym3$CLET = SubLObjectFactory.makeSymbol("CLET");
        $list4 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*ALLOW-FACT-SHEET-EVALUATIONS?*"), (SubLObject)fact_sheets.ONE_INTEGER));
        $list5 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*ALLOW-FACT-SHEET-EVALUATIONS?*"), (SubLObject)fact_sheets.ZERO_INTEGER));
        $sym6$ALLOW_FACT_SHEET_EVALUATIONS = SubLObjectFactory.makeSymbol("ALLOW-FACT-SHEET-EVALUATIONS");
        $list7 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("application.cae.fact-sheet-eval-log-file"));
        $sym8$_FACT_SHEET_EVAL_LOG_FILE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-EVAL-LOG-FILE*");
        $str9$_cyc_projects_aquaint_ginko_metri = SubLObjectFactory.makeString("/cyc/projects/aquaint/ginko/metrics/fact-sheets/factsheet-eval-log.txt");
        $const10$FactSheetQueryContextIndexical = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetQueryContextIndexical"));
        $sym11$INDEXICAL_FACT_SHEET_QUERY_MT = SubLObjectFactory.makeSymbol("INDEXICAL-FACT-SHEET-QUERY-MT");
        $const12$FactSheetTableTypeIndexical = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetTableTypeIndexical"));
        $sym13$INDEXICAL_FACT_SHEET_TABLE_TYPE = SubLObjectFactory.makeSymbol("INDEXICAL-FACT-SHEET-TABLE-TYPE");
        $const14$FactSheetSentenceIndexical = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetSentenceIndexical"));
        $sym15$INDEXICAL_FACT_SHEET_SENTENCE = SubLObjectFactory.makeSymbol("INDEXICAL-FACT-SHEET-SENTENCE");
        $list16 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PROBLEM-STORE-VAR")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym17$CUNWIND_PROTECT = SubLObjectFactory.makeSymbol("CUNWIND-PROTECT");
        $sym18$PROGN = SubLObjectFactory.makeSymbol("PROGN");
        $sym19$CSETQ = SubLObjectFactory.makeSymbol("CSETQ");
        $list20 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("NEW-PROBLEM-STORE")));
        $sym21$PUNLESS = SubLObjectFactory.makeSymbol("PUNLESS");
        $list22 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FACT-SHEET-QUERIES-BROWSABLE?"));
        $sym23$DESTROY_PROBLEM_STORE = SubLObjectFactory.makeSymbol("DESTROY-PROBLEM-STORE");
        $list24 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FOCAL-TERM"), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $list25 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*WITHIN-FACT-SHEET-PARAPHRASE?*"), (SubLObject)fact_sheets.T));
        $sym26$WITH_FACT_SHEET_FOCAL_TERM = SubLObjectFactory.makeSymbol("WITH-FACT-SHEET-FOCAL-TERM");
        $sym27$WITH_PPH_HTML_FUNCTION_AND_TARGET = SubLObjectFactory.makeSymbol("WITH-PPH-HTML-FUNCTION-AND-TARGET");
        $list28 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("FACT-SHEET"), (SubLObject)fact_sheets.NIL);
        $sym29$WITH_PPH_HTML_TERM_ID_FN = SubLObjectFactory.makeSymbol("WITH-PPH-HTML-TERM-ID-FN");
        $list30 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("FACT-SHEET-TERM-ID")));
        $sym31$WITH_PPH_SPEAKER_AND_ADDRESSEE = SubLObjectFactory.makeSymbol("WITH-PPH-SPEAKER-AND-ADDRESSEE");
        $list32 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("UNKNOWN"), (SubLObject)SubLObjectFactory.makeKeyword("UNKNOWN"));
        $const33$FactSheetTopicIndexical = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetTopicIndexical"));
        $sym34$INDEXICAL_FACT_SHEET_TOPIC = SubLObjectFactory.makeSymbol("INDEXICAL-FACT-SHEET-TOPIC");
        $kw35$NORMAL = SubLObjectFactory.makeKeyword("NORMAL");
        $list36 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("TERM")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym37$_FACT_SHEET_FOCAL_TERM_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-FOCAL-TERM*");
        $sym38$POSSIBLY_WITH_THCL_FORT = SubLObjectFactory.makeSymbol("POSSIBLY-WITH-THCL-FORT");
        $str39$_cycdoc_css_cb_fact_sheets_suppre = SubLObjectFactory.makeString("/cycdoc/css/cb-fact-sheets-suppress-images.css");
        $list40 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FILENAME"), (SubLObject)SubLObjectFactory.makeSymbol("STREAM"), (SubLObject)SubLObjectFactory.makeSymbol("ERROR-MESSAGE-VAR")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym41$POSSIBLY_CATCH_ERROR_MESSAGE = SubLObjectFactory.makeSymbol("POSSIBLY-CATCH-ERROR-MESSAGE");
        $list42 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*CATCH-FACT-SHEET-ERRORS?*"));
        $sym43$WITH_TEXT_FILE = SubLObjectFactory.makeSymbol("WITH-TEXT-FILE");
        $list44 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OUTPUT"));
        $sym45$PWHEN = SubLObjectFactory.makeSymbol("PWHEN");
        $sym46$_CHMOD_SAFE_TO_USE__ = SubLObjectFactory.makeSymbol("*CHMOD-SAFE-TO-USE?*");
        $sym47$CHMOD = SubLObjectFactory.makeSymbol("CHMOD");
        $sym48$LOGICAL_PATHNAME_TO_PHYSICAL = SubLObjectFactory.makeSymbol("LOGICAL-PATHNAME-TO-PHYSICAL");
        $list49 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("664"));
        $sym50$WITH_PRIVATE_BINARY_FILE = SubLObjectFactory.makeSymbol("WITH-PRIVATE-BINARY-FILE");
        $sym51$MUST = SubLObjectFactory.makeSymbol("MUST");
        $sym52$STREAMP = SubLObjectFactory.makeSymbol("STREAMP");
        $str53$Cannot_open__A = SubLObjectFactory.makeString("Cannot open ~A");
        $list54 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INPUT"));
        $const55$FactSheetParaphraseMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetParaphraseMt"));
        $const56$Now = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Now"));
        $const57$Null_TimeParameter = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Null-TimeParameter"));
        $sym58$FACT_SHEET_DEFAULT_LANGUAGE_MT = SubLObjectFactory.makeSymbol("FACT-SHEET-DEFAULT-LANGUAGE-MT");
        $sym59$_FACT_SHEET_DEFAULT_LANGUAGE_MT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*");
        $sym60$BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT = SubLObjectFactory.makeSymbol("BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT");
        $sym61$_BUILD_FACT_SHEET_DEFAULT_LANGUAGE_MT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*BUILD-FACT-SHEET-DEFAULT-LANGUAGE-MT-CACHING-STATE*");
        $const62$FactSheetGenerationMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetGenerationMt"));
        $sym63$FACT_SHEET_DEFAULT_DOMAIN_MT = SubLObjectFactory.makeSymbol("FACT-SHEET-DEFAULT-DOMAIN-MT");
        $sym64$_FACT_SHEET_DEFAULT_DOMAIN_MT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*");
        $sym65$BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT = SubLObjectFactory.makeSymbol("BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT");
        $sym66$_BUILD_FACT_SHEET_DEFAULT_DOMAIN_MT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*BUILD-FACT-SHEET-DEFAULT-DOMAIN-MT-CACHING-STATE*");
        $kw67$PUBLIC = SubLObjectFactory.makeKeyword("PUBLIC");
        $const68$FactSheetDomainMtQuery = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetDomainMtQuery"));
        $const69$MtUnionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn"));
        $kw70$DEFAULT = SubLObjectFactory.makeKeyword("DEFAULT");
        $sym71$CONVERT_FACT_SHEET_LINK_TO_SPAN = SubLObjectFactory.makeSymbol("CONVERT-FACT-SHEET-LINK-TO-SPAN");
        $str72$fact_sheet_sentence = SubLObjectFactory.makeString("fact-sheet-sentence");
        $str73$ = SubLObjectFactory.makeString("");
        $str74$_span_id__ = SubLObjectFactory.makeString("<span id='");
        $str75$__class__fact_sheet_sentence__ = SubLObjectFactory.makeString("' class='fact-sheet-sentence'>");
        $str76$__span_ = SubLObjectFactory.makeString("</span>");
        $sym77$CYCL_DENOTATIONAL_TERM_P = SubLObjectFactory.makeSymbol("CYCL-DENOTATIONAL-TERM-P");
        $sym78$FACT_SHEET_VERBOSITY_P = SubLObjectFactory.makeSymbol("FACT-SHEET-VERBOSITY-P");
        $sym79$POSSIBLY_MT_P = SubLObjectFactory.makeSymbol("POSSIBLY-MT-P");
        $list80 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("DATA"), (SubLObject)SubLObjectFactory.makeSymbol("STATS"), (SubLObject)SubLObjectFactory.makeSymbol("FOOTNOTES"), (SubLObject)SubLObjectFactory.makeSymbol("FORMATTING-GUIDELINES"));
        $str81$Miscellaneous = SubLObjectFactory.makeString("Miscellaneous");
        $sym82$GET_FACT_SHEET_FOR_TERM_IN_XML_WITH_ONLY_KB_SPECIFIED_CONTENT = SubLObjectFactory.makeSymbol("GET-FACT-SHEET-FOR-TERM-IN-XML-WITH-ONLY-KB-SPECIFIED-CONTENT");
        $kw83$MARKUP_TYPE = SubLObjectFactory.makeKeyword("MARKUP-TYPE");
        $kw84$XML = SubLObjectFactory.makeKeyword("XML");
        $kw85$SKIP_SECTIONS = SubLObjectFactory.makeKeyword("SKIP-SECTIONS");
        $sym86$GET_FACT_SHEET_FOR_TERM_IN_HTML = SubLObjectFactory.makeSymbol("GET-FACT-SHEET-FOR-TERM-IN-HTML");
        $kw87$HTML = SubLObjectFactory.makeKeyword("HTML");
        $kw88$STYLESHEETS = SubLObjectFactory.makeKeyword("STYLESHEETS");
        $list89 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("DISPLAY-TITLE?"), fact_sheets.NIL, SubLObjectFactory.makeKeyword("PRINT-STATS?"), fact_sheets.T, SubLObjectFactory.makeKeyword("SHOW-COPYRIGHT?"), fact_sheets.NIL, SubLObjectFactory.makeKeyword("MAX-TIME"), fact_sheets.NIL, SubLObjectFactory.makeKeyword("STYLESHEET"), fact_sheets.NIL, SubLObjectFactory.makeKeyword("STYLESHEETS"), fact_sheets.NIL, SubLObjectFactory.makeKeyword("MARKUP-TYPE"), SubLObjectFactory.makeKeyword("HTML"), SubLObjectFactory.makeKeyword("SKIP-SECTIONS"), fact_sheets.NIL, SubLObjectFactory.makeKeyword("SHOW-URI?"), fact_sheets.NIL, SubLObjectFactory.makeKeyword("INCLUDE-SECTIONS"), fact_sheets.NIL });
        $kw90$MAX_TIME = SubLObjectFactory.makeKeyword("MAX-TIME");
        $list91 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("SECTION-KEY")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym92$PRINC = SubLObjectFactory.makeSymbol("PRINC");
        $sym93$FACT_SHEET_OPTIONAL_SECTION_START_COMMENT = SubLObjectFactory.makeSymbol("FACT-SHEET-OPTIONAL-SECTION-START-COMMENT");
        $list94 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*HTML-STREAM*"));
        $sym95$FACT_SHEET_OPTIONAL_SECTION_END_COMMENT = SubLObjectFactory.makeSymbol("FACT-SHEET-OPTIONAL-SECTION-END-COMMENT");
        $sym96$STRINGP = SubLObjectFactory.makeSymbol("STRINGP");
        $kw97$MINI = SubLObjectFactory.makeKeyword("MINI");
        $str98$NOTE = SubLObjectFactory.makeString("NOTE");
        $str99$Gathered__D_group__P_of_sentences = SubLObjectFactory.makeString("Gathered ~D group~:P of sentences for ~S in ~A");
        $list100 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("POSSIBLY-FACT-SHEET-DOMAIN-MT?")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("FACT-SHEET-VERBOSITY-P")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-NUMBER-P")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-NUMBER-P")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGP")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGP")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGP")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGP")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGP")) });
        $list101 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("POSSIBLY-FACT-SHEET-DOMAIN-MT?")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("FACT-SHEET-VERBOSITY-P")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-NUMBER-P")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-NUMBER-P")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGP")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGP")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGP")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGP")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGP")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("CYCL-REPRESENTED-TERM-P")) });
        $sym102$CYCL_REPRESENTED_TERM_P = SubLObjectFactory.makeSymbol("CYCL-REPRESENTED-TERM-P");
        $sym103$HLMT_ = SubLObjectFactory.makeSymbol("HLMT?");
        $sym104$NON_NEGATIVE_INTEGER_P = SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P");
        $sym105$NON_NEGATIVE_NUMBER_P = SubLObjectFactory.makeSymbol("NON-NEGATIVE-NUMBER-P");
        $kw106$INCLUDE_SECTIONS = SubLObjectFactory.makeKeyword("INCLUDE-SECTIONS");
        $list107 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("LABEL"), (SubLObject)SubLObjectFactory.makeSymbol("PARAGRAPH-DATA"));
        $str108$Prefering_slot_value_format_for__ = SubLObjectFactory.makeString("Prefering slot value format for ~S");
        $str109$Disprefering_slot_value_format_fo = SubLObjectFactory.makeString("Disprefering slot value format for ~S");
        $kw110$SLOT_VALUE_PREFERENCE_PATTERN = SubLObjectFactory.makeKeyword("SLOT-VALUE-PREFERENCE-PATTERN");
        $str111$center = SubLObjectFactory.makeString("center");
        $str112$50_ = SubLObjectFactory.makeString("50%");
        $str113$right = SubLObjectFactory.makeString("right");
        $str114$title = SubLObjectFactory.makeString("title");
        $str115$factGroup = SubLObjectFactory.makeString("factGroup");
        $kw116$UNINITIALIZED = SubLObjectFactory.makeKeyword("UNINITIALIZED");
        $list117 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("SENTENCE"), (SubLObject)SubLObjectFactory.makeSymbol("SENTENCE-DATA"));
        $str118$id = SubLObjectFactory.makeString("id");
        $str119$cycl = SubLObjectFactory.makeString("cycl");
        $str120$fact = SubLObjectFactory.makeString("fact");
        $list121 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("COLUMN"), (SubLObject)SubLObjectFactory.makeSymbol("VALUE"));
        $str122$header = SubLObjectFactory.makeString("header");
        $str123$arg = SubLObjectFactory.makeString("arg");
        $str124$_A = SubLObjectFactory.makeString("~A");
        $sym125$_ = SubLObjectFactory.makeSymbol("<");
        $sym126$TERM__ = SubLObjectFactory.makeSymbol("TERM-<");
        $sym127$FACT_SHEET_PRED_COUNT__ = SubLObjectFactory.makeSymbol("FACT-SHEET-PRED-COUNT-<");
        $sym128$FACT_SHEET_TABLE_SENTENCE_DATA_PREDICATE = SubLObjectFactory.makeSymbol("FACT-SHEET-TABLE-SENTENCE-DATA-PREDICATE");
        $const129$titleForTablesOfType = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("titleForTablesOfType"));
        $sym130$SECOND = SubLObjectFactory.makeSymbol("SECOND");
        $sym131$THIRD = SubLObjectFactory.makeSymbol("THIRD");
        $sym132$FOURTH = SubLObjectFactory.makeSymbol("FOURTH");
        $list133 = ConsesLow.list((SubLObject)Characters.CHAR_colon);
        $kw134$TEXT = SubLObjectFactory.makeKeyword("TEXT");
        $kw135$FACT_SHEET = SubLObjectFactory.makeKeyword("FACT-SHEET");
        $sym136$FACT_SHEET_TERM_ID = SubLObjectFactory.makeSymbol("FACT-SHEET-TERM-ID");
        $kw137$UNKNOWN = SubLObjectFactory.makeKeyword("UNKNOWN");
        $const138$FactSheetTableSectionAndHeaderQue = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetTableSectionAndHeaderQuery"));
        $kw139$BROWSABLE_ = SubLObjectFactory.makeKeyword("BROWSABLE?");
        $sym140$FIRST = SubLObjectFactory.makeSymbol("FIRST");
        $const141$FactSheetTableCellValuesQuery = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetTableCellValuesQuery"));
        $kw142$INFERENCE_MODE = SubLObjectFactory.makeKeyword("INFERENCE-MODE");
        $kw143$SHALLOW = SubLObjectFactory.makeKeyword("SHALLOW");
        $kw144$MAX_NUMBER = SubLObjectFactory.makeKeyword("MAX-NUMBER");
        $kw145$PROBLEM_STORE = SubLObjectFactory.makeKeyword("PROBLEM-STORE");
        $kw146$IGNORE = SubLObjectFactory.makeKeyword("IGNORE");
        $const147$indexicalReferent = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("indexicalReferent"));
        $list148 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("CYC-VAR?")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("BIND"), (SubLObject)SubLObjectFactory.makeSymbol("VAR"))));
        $sym149$VAR = SubLObjectFactory.makeSymbol("VAR");
        $list150 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetSentenceIndexical")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetTableTypeIndexical")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetQueryContextIndexical")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetTopicIndexical")));
        $const151$AnytimePSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AnytimePSC"));
        $list152 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("CONJUNCT"), (SubLObject)SubLObjectFactory.makeSymbol("CONJUNCT-DATA"));
        $sym153$CAR = SubLObjectFactory.makeSymbol("CAR");
        $sym154$FACT_SHEET_TABLE_TYPE_WIDTH = SubLObjectFactory.makeSymbol("FACT-SHEET-TABLE-TYPE-WIDTH");
        $const155$tableTypeWidth = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("tableTypeWidth"));
        $kw156$SENTENCE = SubLObjectFactory.makeKeyword("SENTENCE");
        $kw157$ASSERTIONS = SubLObjectFactory.makeKeyword("ASSERTIONS");
        $sym158$ASSERTION_P = SubLObjectFactory.makeSymbol("ASSERTION-P");
        $sym159$SUMMARY_SENTENCE_PLIST_ = SubLObjectFactory.makeSymbol("SUMMARY-SENTENCE-PLIST?");
        $sym160$SUMMARY_SENTENCE_PLIST_CYCL = SubLObjectFactory.makeSymbol("SUMMARY-SENTENCE-PLIST-CYCL");
        $sym161$INVALID_ASSERTION_ = SubLObjectFactory.makeSymbol("INVALID-ASSERTION?");
        $kw162$ALLOWED_TERM_TYPE = SubLObjectFactory.makeKeyword("ALLOWED-TERM-TYPE");
        $kw163$ALL = SubLObjectFactory.makeKeyword("ALL");
        $kw164$BLACKLIST_SOURCES = SubLObjectFactory.makeKeyword("BLACKLIST-SOURCES");
        $list165 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("SUMMARY-SENTENCE"), (SubLObject)SubLObjectFactory.makeSymbol("PARAPHRASE"));
        $sym166$INVALID_FORT_ = SubLObjectFactory.makeSymbol("INVALID-FORT?");
        $sym167$FACT_SHEET_SLOT_VALUE_STRING = SubLObjectFactory.makeSymbol("FACT-SHEET-SLOT-VALUE-STRING");
        $const168$QuantificationalRuleMacroPredicat = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("QuantificationalRuleMacroPredicate-Canonical"));
        $str169$Wrong_number_of_args_in__S = SubLObjectFactory.makeString("Wrong number of args in ~S");
        $str170$Couldn_t_find__S_in__S = SubLObjectFactory.makeString("Couldn't find ~S in ~S");
        $const171$TheCoordinationSet = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheCoordinationSet"));
        $sym172$UNLEXIFIED_ = SubLObjectFactory.makeSymbol("UNLEXIFIED?");
        $sym173$CONSTANT_P = SubLObjectFactory.makeSymbol("CONSTANT-P");
        $const174$BaseKB = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"));
        $list175 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheCoordinationSet")));
        $kw176$PUBLIC_ONLY = SubLObjectFactory.makeKeyword("PUBLIC-ONLY");
        $sym177$NON_PUBLIC_CONSTANT = SubLObjectFactory.makeSymbol("NON-PUBLIC-CONSTANT");
        $sym178$NON_PUBLIC_CONSTANT_ = SubLObjectFactory.makeSymbol("NON-PUBLIC-CONSTANT?");
        $str179$Filtering__S___due_to_non_public_ = SubLObjectFactory.makeString("Filtering ~S~% due to non-public constant: ~S");
        $kw180$NON_PROPRIETARY = SubLObjectFactory.makeKeyword("NON-PROPRIETARY");
        $sym181$PROPRIETARY_CONSTANT_ = SubLObjectFactory.makeSymbol("PROPRIETARY-CONSTANT?");
        $str182$Filtering__S___due_to_proprietary = SubLObjectFactory.makeString("Filtering ~S~% due to proprietary constant: ~S");
        $str183$Filtering__S___due_to_blacklisted = SubLObjectFactory.makeString("Filtering ~S~% due to blacklisted source: ~S");
        $str184$Filtering____S = SubLObjectFactory.makeString("Filtering~% ~S");
        $kw185$NONE = SubLObjectFactory.makeKeyword("NONE");
        $sym186$_EXIT = SubLObjectFactory.makeSymbol("%EXIT");
        $str187$Fact_Sheet_for_ = SubLObjectFactory.makeString("Fact Sheet for ");
        $sym188$FACT_SHEET_STATS_P = SubLObjectFactory.makeSymbol("FACT-SHEET-STATS-P");
        $str189$factSheet = SubLObjectFactory.makeString("factSheet");
        $str190$_Enesta_resources_followupLoader_ = SubLObjectFactory.makeString("/Enesta/resources/followupLoader.js");
        $kw191$STYLESHEET = SubLObjectFactory.makeKeyword("STYLESHEET");
        $kw192$SHOW_AD_ = SubLObjectFactory.makeKeyword("SHOW-AD?");
        $kw193$SHOW_INFO_LINK_URL = SubLObjectFactory.makeKeyword("SHOW-INFO-LINK-URL");
        $kw194$SHOW_URI_ = SubLObjectFactory.makeKeyword("SHOW-URI?");
        $kw195$SHOW_FOLLOWUP_WIDGET_ = SubLObjectFactory.makeKeyword("SHOW-FOLLOWUP-WIDGET?");
        $str196$__DOCTYPE_html_PUBLIC_____W3C__DT = SubLObjectFactory.makeString("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
        $str197$_meta_http_equiv__X_UA_Compatible = SubLObjectFactory.makeString("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" >");
        $str198$stylesheet = SubLObjectFactory.makeString("stylesheet");
        $str199$text_css = SubLObjectFactory.makeString("text/css");
        $str200$_div_class__cycFollowup__termId__ = SubLObjectFactory.makeString("<div class='cycFollowup' termId=~S termString=~S></div>");
        $sym201$CATCH_ERROR_MESSAGE_HANDLER = SubLObjectFactory.makeSymbol("CATCH-ERROR-MESSAGE-HANDLER");
        $kw202$STATS = SubLObjectFactory.makeKeyword("STATS");
        $kw203$COPYRIGHT = SubLObjectFactory.makeKeyword("COPYRIGHT");
        $str204$_script_src___A__type__text_javas = SubLObjectFactory.makeString("<script src='~A' type='text/javascript'></script>");
        $str205$WARN = SubLObjectFactory.makeString("WARN");
        $str206$Unable_to_print_fact_sheet_statis = SubLObjectFactory.makeString("Unable to print fact sheet statistics for ~S");
        $list207 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonSingular-Generic")));
        $str208$A_Semantic_Web_URI_is_a_stable_na = SubLObjectFactory.makeString("A Semantic Web URI is a stable name for a concept that is designed to be understood by semantically-aware applications.  You can rely on this URI to refer to ");
        $str209$__and_you_should_use_it_in_web_pa = SubLObjectFactory.makeString(", and you should use it in web page annotations and in software code to maximize interoperability with other semantic applications.");
        $str210$Technical_Details = SubLObjectFactory.makeString("Technical Details");
        $str211$This_page_was_automatically_creat = SubLObjectFactory.makeString("This page was automatically created by Cyc using ");
        $str212$automated_reasoning_and_natural_l = SubLObjectFactory.makeString("automated reasoning and natural language processing");
        $str213$__ = SubLObjectFactory.makeString(". ");
        $str214$Cyc_first_learned_about__A_on__A_ = SubLObjectFactory.makeString("Cyc first learned about ~A on ~A. ");
        $str215$The_ = SubLObjectFactory.makeString("The ");
        $str216$http___sw_opencyc_org_docs_swuri_ = SubLObjectFactory.makeString("http://sw.opencyc.org/docs/swuri.html");
        $str217$Semantic_Web_URI = SubLObjectFactory.makeString("Semantic Web URI");
        $str218$_for__A_is__ = SubLObjectFactory.makeString(" for ~A is: ");
        $sym219$GET_FACT_SHEET_FOR_TERM_ID_IN_HTML = SubLObjectFactory.makeSymbol("GET-FACT-SHEET-FOR-TERM-ID-IN-HTML");
        $sym220$CLEAR_ALL_FACT_SHEET_CACHES = SubLObjectFactory.makeSymbol("CLEAR-ALL-FACT-SHEET-CACHES");
        $kw221$CLEARED = SubLObjectFactory.makeKeyword("CLEARED");
        $str222$what_do_you_know_about_ = SubLObjectFactory.makeString("what do you know about ");
        $str223$tell_me_about_ = SubLObjectFactory.makeString("tell me about ");
        $str224$facts_about_ = SubLObjectFactory.makeString("facts about ");
        $str225$explain_ = SubLObjectFactory.makeString("explain ");
        $str226$fact_sheet_for_ = SubLObjectFactory.makeString("fact sheet for ");
        $str227$fact_sheet_about_ = SubLObjectFactory.makeString("fact sheet about ");
        $str228$show_ = SubLObjectFactory.makeString("show ");
        $str229$_facts = SubLObjectFactory.makeString(" facts");
        $str230$_knowledge = SubLObjectFactory.makeString(" knowledge");
        $str231$_fact_sheet = SubLObjectFactory.makeString(" fact sheet");
        $list232 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CommonEnglishMisspellingsMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AllEnglishValidatedLexicalMicrotheoryPSC")));
        $list233 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("PATTERN-START"), (SubLObject)SubLObjectFactory.makeSymbol("PATTERN-END"));
        $list234 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ABBREVS"), (SubLObject)SubLObjectFactory.makeKeyword("ACRONYMS"));
        $kw235$DENOT = SubLObjectFactory.makeKeyword("DENOT");
        $kw236$NEVER = SubLObjectFactory.makeKeyword("NEVER");
        $sym237$GET_POSSIBLE_FACT_SHEET_TERMS_MENTIONED_IN_STRING = SubLObjectFactory.makeSymbol("GET-POSSIBLE-FACT-SHEET-TERMS-MENTIONED-IN-STRING");
        $sym238$TERM_OK_FOR_CAE_QUERY_SEARCH_TERM_BOX_P = SubLObjectFactory.makeSymbol("TERM-OK-FOR-CAE-QUERY-SEARCH-TERM-BOX-P");
        $list239 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("STRIPPED-STRING-DENOTS"), (SubLObject)SubLObjectFactory.makeSymbol("STRIPPED-STRING"));
        $list240 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PHRASE-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("DENOTS"));
        $sym241$ADD_LEARNER = SubLObjectFactory.makeSymbol("ADD-LEARNER");
        $sym242$SCALAR_INTERVAL_LEARN = SubLObjectFactory.makeSymbol("SCALAR-INTERVAL-LEARN");
        $sym243$RKF_STANDARD_STRING_WORDIFY = SubLObjectFactory.makeSymbol("RKF-STANDARD-STRING-WORDIFY");
        $kw244$LEXICON = SubLObjectFactory.makeKeyword("LEXICON");
        $kw245$OUTPUT_SPEC = SubLObjectFactory.makeKeyword("OUTPUT-SPEC");
        $list246 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CYCL"), (SubLObject)SubLObjectFactory.makeKeyword("T"), (SubLObject)SubLObjectFactory.makeKeyword("INFLECTIONS"), (SubLObject)fact_sheets.T);
        $sym247$SCALAR_INTERVAL_P = SubLObjectFactory.makeSymbol("SCALAR-INTERVAL-P");
        $const248$ScalarInterval = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ScalarInterval"));
        $sym249$_SCALAR_INTERVAL_P_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*SCALAR-INTERVAL-P-CACHING-STATE*");
        $int250$4096 = SubLObjectFactory.makeInteger(4096);
        $sym251$TERM_OK_FOR_FACT_SHEET_P = SubLObjectFactory.makeSymbol("TERM-OK-FOR-FACT-SHEET-P");
        $sym252$FORT_P = SubLObjectFactory.makeSymbol("FORT-P");
        $const253$InferencePSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InferencePSC"));
        $list254 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Event")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Terrorist")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerroristGroup")));
        $str255$data = SubLObjectFactory.makeString("data");
        $str256$fact_sheets = SubLObjectFactory.makeString("fact-sheets");
        $str257$_S_does_not_specify_an_existing_d = SubLObjectFactory.makeString("~S does not specify an existing directory relative to the cyc home.");
        $sym258$FACT_SHEET_TERM_ID_LOW = SubLObjectFactory.makeSymbol("FACT-SHEET-TERM-ID-LOW");
        $sym259$_FACT_SHEET_TERM_ID_LOW_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-TERM-ID-LOW-CACHING-STATE*");
        $int260$1024 = SubLObjectFactory.makeInteger(1024);
        $sym261$FACT_SHEET_TERM_FROM_ID = SubLObjectFactory.makeSymbol("FACT-SHEET-TERM-FROM-ID");
        $sym262$POSSIBLE_FACT_SHEET_TERM_ID_P = SubLObjectFactory.makeSymbol("POSSIBLE-FACT-SHEET-TERM-ID-P");
        $sym263$WARN_UNKNOWN_FACT_SHEET_TERM_ID = SubLObjectFactory.makeSymbol("WARN-UNKNOWN-FACT-SHEET-TERM-ID");
        $str264$Couldn_t_identify_term_from_fact_ = SubLObjectFactory.makeString("Couldn't identify term from fact-sheet ID ~S");
        $sym265$_WARN_UNKNOWN_FACT_SHEET_TERM_ID_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*WARN-UNKNOWN-FACT-SHEET-TERM-ID-CACHING-STATE*");
        $sym266$FACT_SHEET_TERM_FROM_SPAN_ID = SubLObjectFactory.makeSymbol("FACT-SHEET-TERM-FROM-SPAN-ID");
        $str267$Error_getting_fact_sheet_term_fro = SubLObjectFactory.makeString("Error getting fact-sheet term from span ID ~S: ~A");
        $list268 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("PRED"), (SubLObject)SubLObjectFactory.makeSymbol("SENTENCE-GROUPS"));
        $str269$Using_PPH_timeout_of__S_seconds_ = SubLObjectFactory.makeString("Using PPH timeout of ~S seconds.");
        $str270$___Top_level_CycL___S = SubLObjectFactory.makeString("~% Top-level CycL: ~S");
        $kw271$NEW = SubLObjectFactory.makeKeyword("NEW");
        $str272$Error_generating_paraphrases___A = SubLObjectFactory.makeString("Error generating paraphrases: ~A");
        $str273$Generated__D_paragraph__P_contain = SubLObjectFactory.makeString("Generated ~D paragraph~:P containing ~D sentence~:P for ~S in ~A.");
        $kw274$SUPERSCRIPTS = SubLObjectFactory.makeKeyword("SUPERSCRIPTS");
        $sym275$HIGHER_PRIORITY_FACT_SHEET_CATEGORY_ = SubLObjectFactory.makeSymbol("HIGHER-PRIORITY-FACT-SHEET-CATEGORY?");
        $list276 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("placeBasicDataSentence")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("agentBioDataSentence")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("agentDocumentationDataSentence")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("collectionDefinitionalDataSentence")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("collectionDocumentationDataSentence")));
        $sym277$FACT_SHEET_SENTENCE_GROUP_SUMMARY = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCE-GROUP-SUMMARY");
        $str278$Failed_to_paraphrase__D_sentence_ = SubLObjectFactory.makeString("Failed to paraphrase ~D sentence~:P for ~S:~% ~S");
        $sym279$_FACT_SHEET_SENTENCE_GROUP_SUMMARY_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-SENTENCE-GROUP-SUMMARY-CACHING-STATE*");
        $str280$_a_href_ = SubLObjectFactory.makeString("<a href=");
        $str281$_ = SubLObjectFactory.makeString(">");
        $str282$http___fact_sheet = SubLObjectFactory.makeString("http://fact-sheet");
        $kw283$OUTPUT = SubLObjectFactory.makeKeyword("OUTPUT");
        $str284$Unable_to_open__S = SubLObjectFactory.makeString("Unable to open ~S");
        $str285$664 = SubLObjectFactory.makeString("664");
        $list286 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("<a href=\"http://fact-sheet"), (SubLObject)SubLObjectFactory.makeString("<a href=\"http://assertion-edit"), (SubLObject)SubLObjectFactory.makeString("<span id=\""), (SubLObject)SubLObjectFactory.makeString("<a href=\"cg?FACT-SHEET&"));
        $list287 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FACT-SHEET-TERM-FROM-ID"), (SubLObject)SubLObjectFactory.makeSymbol("FIND-OBJECT-BY-HL-EXTERNAL-ID-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("FIND-OBJECT-BY-COMPACT-HL-INTERNAL-ID-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("FACT-SHEET-TERM-FROM-ID"));
        $str288$_a = SubLObjectFactory.makeString("<a");
        $str289$_span = SubLObjectFactory.makeString("<span");
        $list290 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("TERM"), (SubLObject)SubLObjectFactory.makeSymbol("CLOSE-TAG"));
        $str291$__a = SubLObjectFactory.makeString("</a");
        $str292$__span = SubLObjectFactory.makeString("</span");
        $list293 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("START-TOKEN"), (SubLObject)SubLObjectFactory.makeSymbol("START-TOKEN-INDEX"), (SubLObject)SubLObjectFactory.makeSymbol("TERM"), (SubLObject)SubLObjectFactory.makeSymbol("CLOSE-TAG"));
        $kw294$DONT_REPLACE = SubLObjectFactory.makeKeyword("DONT-REPLACE");
        $str295$close_tag__S_and_current_tag__S_d = SubLObjectFactory.makeString("close tag ~S and current tag ~S don't match");
        $str296$__ = SubLObjectFactory.makeString("</");
        $sym297$GET_TERM_AND_CLOSE_TAG_FROM_TOKEN = SubLObjectFactory.makeSymbol("GET-TERM-AND-CLOSE-TAG-FROM-TOKEN");
        $kw298$TEST = SubLObjectFactory.makeKeyword("TEST");
        $kw299$OWNER = SubLObjectFactory.makeKeyword("OWNER");
        $kw300$CLASSES = SubLObjectFactory.makeKeyword("CLASSES");
        $kw301$KB = SubLObjectFactory.makeKeyword("KB");
        $kw302$FULL = SubLObjectFactory.makeKeyword("FULL");
        $kw303$WORKING_ = SubLObjectFactory.makeKeyword("WORKING?");
        $list304 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("<a href=\"http://fact-sheet|mx4rw|q|b|s0|zwp|eb|gdrc|n5|y29yc|a")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("UnitedStatesPresident")), (SubLObject)SubLObjectFactory.makeString("</a>"))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("<a href=\"http://fact-sheet^mx4rw^q^b^s0^zwp^eb^gdrc^n5^y29yc^a")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("UnitedStatesPresident")), (SubLObject)SubLObjectFactory.makeString("</a>"))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("<span class=\"fs-category\">")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("DONT-REPLACE"), (SubLObject)SubLObjectFactory.makeString("</span>"))));
        $str305$sentence = SubLObjectFactory.makeString("sentence");
        $sym306$REMOVE_LINK = SubLObjectFactory.makeSymbol("REMOVE-LINK");
        $sym307$COMPACT_HL_EXTERNAL_ID_STRING = SubLObjectFactory.makeSymbol("COMPACT-HL-EXTERNAL-ID-STRING");
        $sym308$COMPACT_HL_INTERNAL_ID_STRING = SubLObjectFactory.makeSymbol("COMPACT-HL-INTERNAL-ID-STRING");
        $sym309$LAST_ONE = SubLObjectFactory.makeSymbol("LAST-ONE");
        $str310$fact_sheet_term = SubLObjectFactory.makeString("fact-sheet-term");
        $list311 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("START-POSITION"), (SubLObject)SubLObjectFactory.makeSymbol("END-POSITION"), (SubLObject)SubLObjectFactory.makeSymbol("TERM"), (SubLObject)SubLObjectFactory.makeSymbol("LINK-TEXT"), (SubLObject)SubLObjectFactory.makeSymbol("LINKED-TEXT"));
        $list312 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("AMOUNT"), (SubLObject)SubLObjectFactory.makeSymbol("OLD"), (SubLObject)SubLObjectFactory.makeSymbol("NEW"));
        $sym313$_ = SubLObjectFactory.makeSymbol(">");
        $list314 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("ORIGINAL-OPEN-TAG"), (SubLObject)SubLObjectFactory.makeSymbol("OPEN-TAG-POSITION"), (SubLObject)SubLObjectFactory.makeSymbol("ORIGINAL-LINK-TOKENS"), (SubLObject)SubLObjectFactory.makeSymbol("ORIGINAL-CLOSE-TAG"), (SubLObject)SubLObjectFactory.makeSymbol("CLOSE-TAG-POSITION"), (SubLObject)SubLObjectFactory.makeSymbol("TERM"));
        $list315 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("OPEN-TAG"), (SubLObject)SubLObjectFactory.makeSymbol("LINK-TEXT"), (SubLObject)SubLObjectFactory.makeSymbol("CLOSE-TAG"));
        $kw316$TERSE = SubLObjectFactory.makeKeyword("TERSE");
        $kw317$BRANDING_INFO = SubLObjectFactory.makeKeyword("BRANDING-INFO");
        $kw318$CENTER = SubLObjectFactory.makeKeyword("CENTER");
        $kw319$TITLE = SubLObjectFactory.makeKeyword("TITLE");
        $str320$image = SubLObjectFactory.makeString("image");
        $list321 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("CATEGORY"), (SubLObject)SubLObjectFactory.makeSymbol("PARAGRAPH-TEXTS"));
        $str322$white = SubLObjectFactory.makeString("white");
        $str323$fs_outer_table = SubLObjectFactory.makeString("fs-outer-table");
        $str324$fs_main_image = SubLObjectFactory.makeString("fs-main-image");
        $str325$fs_in_cyc_logo = SubLObjectFactory.makeString("fs-in-cyc-logo");
        $str326$fs_title = SubLObjectFactory.makeString("fs-title");
        $str327$fs_title_div = SubLObjectFactory.makeString("fs-title-div");
        $str328$fs_category = SubLObjectFactory.makeString("fs-category");
        $str329$fs_fact_1 = SubLObjectFactory.makeString("fs-fact-1");
        $str330$fs_fact_2 = SubLObjectFactory.makeString("fs-fact-2");
        $str331$fs_footnote_1 = SubLObjectFactory.makeString("fs-footnote-1");
        $str332$fs_footnote_2 = SubLObjectFactory.makeString("fs-footnote-2");
        $list333 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("URL"), (SubLObject)SubLObjectFactory.makeSymbol("LOGO-URL"), (SubLObject)SubLObjectFactory.makeSymbol("BRAND-CLASS"), (SubLObject)SubLObjectFactory.makeSymbol("ALT-TEXT"));
        $str334$_ = SubLObjectFactory.makeString(" ");
        $str335$Header = SubLObjectFactory.makeString("Header");
        $str336$url = SubLObjectFactory.makeString("url");
        $str337$category = SubLObjectFactory.makeString("category");
        $str338$factSheetSection = SubLObjectFactory.makeString("factSheetSection");
        $str339$footnotes = SubLObjectFactory.makeString("footnotes");
        $str340$KB__ = SubLObjectFactory.makeString("KB: ");
        $str341$System__ = SubLObjectFactory.makeString("System: ");
        $list342 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeSymbol("DOMAIN-MT"), SubLObjectFactory.makeSymbol("VERBOSITY"), SubLObjectFactory.makeSymbol("SENTENCE-COUNT"), SubLObjectFactory.makeSymbol("SECTION-COUNT"), SubLObjectFactory.makeSymbol("INFO-GATHERING-TIME"), SubLObjectFactory.makeSymbol("PPH-TIME"), SubLObjectFactory.makeSymbol("SECONDSTRING"), SubLObjectFactory.makeSymbol("DATESTRING"), SubLObjectFactory.makeSymbol("IMAGE-ID"), SubLObjectFactory.makeSymbol("KB-VERSION"), SubLObjectFactory.makeSymbol("CYC-REVISION"), SubLObjectFactory.makeSymbol("&OPTIONAL"), SubLObjectFactory.makeSymbol("TERM") });
        $str343$Domain_mt___A = SubLObjectFactory.makeString("Domain mt: ~A");
        $str344$Verbosity___A = SubLObjectFactory.makeString("Verbosity: ~A");
        $str345$Sentence_Count___S = SubLObjectFactory.makeString("Sentence Count: ~S");
        $str346$Section_Count___S = SubLObjectFactory.makeString("Section Count: ~S");
        $str347$Information_Gathering_Time___a = SubLObjectFactory.makeString("Information Gathering Time: ~a");
        $str348$Paraphrase_Time___a = SubLObjectFactory.makeString("Paraphrase Time: ~a");
        $str349$Customization_and_Display_Time___ = SubLObjectFactory.makeString("Customization and Display Time: ~a");
        $str350$_A_at__A_on__A = SubLObjectFactory.makeString("~A at ~A on ~A");
        $str351$Started = SubLObjectFactory.makeString("Started");
        $str352$Created = SubLObjectFactory.makeString("Created");
        $str353$Image_ID___A = SubLObjectFactory.makeString("Image ID: ~A");
        $str354$_A_A__A_A_ = SubLObjectFactory.makeString("~A~A ~A~A ");
        $list355 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TERSE"), (SubLObject)SubLObjectFactory.makeKeyword("NORMAL"), (SubLObject)SubLObjectFactory.makeKeyword("VERBOSE"), (SubLObject)SubLObjectFactory.makeKeyword("MINI"), (SubLObject)SubLObjectFactory.makeKeyword("PUBLIC"));
        $int356$500 = SubLObjectFactory.makeInteger(500);
        $int357$200 = SubLObjectFactory.makeInteger(200);
        $str358$FACT_SHEET_IMAGE_ROOT_ = SubLObjectFactory.makeString("FACT-SHEET-IMAGE-ROOT/");
        $const359$salientTermImagePathname = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("salientTermImagePathname"));
        $kw360$TRUE = SubLObjectFactory.makeKeyword("TRUE");
        $str361$FACT_SHEET_BASE_URL_ = SubLObjectFactory.makeString("FACT-SHEET-BASE-URL/");
        $list362 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("ORIGINAL"), (SubLObject)SubLObjectFactory.makeSymbol("REPLACEMENT"));
        $sym363$FACT_SHEET_IMAGE_FILE_ROOT_URL = SubLObjectFactory.makeSymbol("FACT-SHEET-IMAGE-FILE-ROOT-URL");
        $str364$file___ = SubLObjectFactory.makeString("file://");
        $sym365$_FACT_SHEET_IMAGE_FILE_ROOT_URL_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-IMAGE-FILE-ROOT-URL-CACHING-STATE*");
        $str366$___img_ = SubLObjectFactory.makeString("../img/");
        $sym367$FACT_SHEET_IMAGE_URL_ROOT = SubLObjectFactory.makeSymbol("FACT-SHEET-IMAGE-URL-ROOT");
        $sym368$_URL = SubLObjectFactory.makeSymbol("?URL");
        $list369 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("salientTermsImageRoot")), (SubLObject)SubLObjectFactory.makeSymbol("?URL"));
        $sym370$_FACT_SHEET_IMAGE_URL_ROOT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-IMAGE-URL-ROOT-CACHING-STATE*");
        $const371$FactSheetSentenceQuery = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FactSheetSentenceQuery"));
        $const372$equalSymbols = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("equalSymbols"));
        $sym373$_SENTENCE = SubLObjectFactory.makeSymbol("?SENTENCE");
        $const374$MiniFactSheetSentenceQuery = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MiniFactSheetSentenceQuery"));
        $const375$TerrorismParaphraseMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerrorismParaphraseMt"));
        $list376 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("HTML"), (SubLObject)SubLObjectFactory.makeSymbol("FORMATTING-DIRECTIVES"));
        $sym377$GET_MINI_FACT_SHEET_FOR_TERM_CACHED = SubLObjectFactory.makeSymbol("GET-MINI-FACT-SHEET-FOR-TERM-CACHED");
        $str378$Query_got_mini_fact_sheet_of_leng = SubLObjectFactory.makeString("Query got mini fact sheet of length ~S for ~S");
        $str379$Query_failed_to_get_mini_fact_she = SubLObjectFactory.makeString("Query failed to get mini fact sheet for ~S");
        $sym380$_GET_MINI_FACT_SHEET_FOR_TERM_CACHED_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-MINI-FACT-SHEET-FOR-TERM-CACHED-CACHING-STATE*");
        $kw381$VERBOSE = SubLObjectFactory.makeKeyword("VERBOSE");
        $str382$Using_soft_query_timeout_of__S_se = SubLObjectFactory.makeString("Using soft query timeout of ~S seconds.");
        $kw383$PROBABLY_APPROXIMATELY_DONE = SubLObjectFactory.makeKeyword("PROBABLY-APPROXIMATELY-DONE");
        $float384$0_99 = (SubLFloat)SubLObjectFactory.makeDouble(0.99);
        $const385$GetFactSheetBuilderQueriesForTopi = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GetFactSheetBuilderQueriesForTopic"));
        $kw386$RETURN = SubLObjectFactory.makeKeyword("RETURN");
        $list387 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEMPLATE"), (SubLObject)SubLObjectFactory.makeSymbol("?KBQ"));
        $str388$FactSheetBuilderQuery = SubLObjectFactory.makeString("FactSheetBuilderQuery");
        $sym389$FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ");
        $str390$Caught_error_while_running__S_for = SubLObjectFactory.makeString("Caught error while running ~S for ~S:~% ~A");
        $str391$_S____yielded__D_paragraph__P_in_ = SubLObjectFactory.makeString("~S:~% yielded ~D paragraph~:P in ~A for ~S");
        $sym392$_FACT_SHEET_SENTENCES_FOR_TERM_FROM_KBQ_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-SENTENCES-FOR-TERM-FROM-KBQ-CACHING-STATE*");
        $int393$128 = SubLObjectFactory.makeInteger(128);
        $sym394$FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL");
        $kw395$FACT_SHEET_INFERENCE_ERROR = SubLObjectFactory.makeKeyword("FACT-SHEET-INFERENCE-ERROR");
        $list396 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("PRED"), (SubLObject)SubLObjectFactory.makeSymbol("SUMMARY-SENTENCE"));
        $list397 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("PRED"), (SubLObject)SubLObjectFactory.makeSymbol("SUMMARY-SENTENCES"));
        $sym398$FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES_ = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?");
        $sym399$_FACT_SHEET_SENTENCES_FOR_TERM_INTERNAL_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-SENTENCES-FOR-TERM-INTERNAL-CACHING-STATE*");
        $list400 = ConsesLow.list(new SubLObject[] { ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)fact_sheets.ONE_INTEGER), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("internationalOrganizationMemberCountries")), (SubLObject)fact_sheets.TWO_INTEGER), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceAll")), (SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)fact_sheets.THREE_INTEGER), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExistsAndOnly")), (SubLObject)fact_sheets.TWO_INTEGER), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExistsCount")), (SubLObject)fact_sheets.TWO_INTEGER), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExists")), (SubLObject)fact_sheets.TWO_INTEGER), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExistsMany")), (SubLObject)fact_sheets.TWO_INTEGER), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExistsMax")), (SubLObject)fact_sheets.TWO_INTEGER), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExistsMin")), (SubLObject)fact_sheets.TWO_INTEGER), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExistsRange")), (SubLObject)fact_sheets.TWO_INTEGER) });
        $float401$0_5 = (SubLFloat)SubLObjectFactory.makeDouble(0.5);
        $list402 = (SubLList)ConsesLow.cons(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExistsCount")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"));
        $const403$relationInstanceExists = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExists"));
        $str404$_S___implies__S = SubLObjectFactory.makeString("~S~% implies ~S");
        $list405 = (SubLList)ConsesLow.cons(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExists")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"));
        $str406$_S___is_a_trivial_meta_support_of = SubLObjectFactory.makeString("~S~% is a trivial meta support of ~S");
        $const407$isa = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa"));
        $str408$_S___is_highly_prevalent_among_in = SubLObjectFactory.makeString("~S~% is highly prevalent among instances of ~S");
        $sym409$_FACT_SHEET_SENTENCE_TRIVIALLY_IMPLIES__CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-SENTENCE-TRIVIALLY-IMPLIES?-CACHING-STATE*");
        $kw410$REPLACEME = SubLObjectFactory.makeKeyword("REPLACEME");
        $sym411$FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED = SubLObjectFactory.makeSymbol("FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED");
        $float412$0_9 = (SubLFloat)SubLObjectFactory.makeDouble(0.9);
        $sym413$_FACT_HIGHLY_PREVALENT_AMONG_INSTANCES__CACHED_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-HIGHLY-PREVALENT-AMONG-INSTANCES?-CACHED-CACHING-STATE*");
        $int414$256 = SubLObjectFactory.makeInteger(256);
        $sym415$RULE_ASSERTION_ = SubLObjectFactory.makeSymbol("RULE-ASSERTION?");
        $list416 = (SubLList)ConsesLow.cons(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SomeTimeInIntervalFn")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"));
        $const417$temporallySubsumes = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("temporallySubsumes"));
        $const418$Always_TimeInterval = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Always-TimeInterval"));
        $kw419$DEPTH = SubLObjectFactory.makeKeyword("DEPTH");
        $kw420$STACK = SubLObjectFactory.makeKeyword("STACK");
        $kw421$QUEUE = SubLObjectFactory.makeKeyword("QUEUE");
        $sym422$RELEVANT_SBHL_TV_IS_GENERAL_TV = SubLObjectFactory.makeSymbol("RELEVANT-SBHL-TV-IS-GENERAL-TV");
        $kw423$ERROR = SubLObjectFactory.makeKeyword("ERROR");
        $str424$_A_is_not_a__A = SubLObjectFactory.makeString("~A is not a ~A");
        $sym425$SBHL_TRUE_TV_P = SubLObjectFactory.makeSymbol("SBHL-TRUE-TV-P");
        $kw426$CERROR = SubLObjectFactory.makeKeyword("CERROR");
        $str427$continue_anyway = SubLObjectFactory.makeString("continue anyway");
        $kw428$WARN = SubLObjectFactory.makeKeyword("WARN");
        $str429$_A_is_not_a_valid__sbhl_type_erro = SubLObjectFactory.makeString("~A is not a valid *sbhl-type-error-action* value");
        $const430$genlPreds = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genlPreds"));
        $const431$transitiveViaArgInverse = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("transitiveViaArgInverse"));
        $const432$transitiveViaArg = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("transitiveViaArg"));
        $str433$_A_is_neither_SET_P_nor_LISTP_ = SubLObjectFactory.makeString("~A is neither SET-P nor LISTP.");
        $str434$attempting_to_bind_direction_link = SubLObjectFactory.makeString("attempting to bind direction link variable, to NIL. macro body not executed.");
        $str435$Node__a_does_not_pass_sbhl_type_t = SubLObjectFactory.makeString("Node ~a does not pass sbhl-type-test ~a~%");
        $sym436$FACT_SHEET_TRANSITIVITY_CHECK = SubLObjectFactory.makeSymbol("FACT-SHEET-TRANSITIVITY-CHECK");
        $sym437$_FACT_SHEET_TRANSITIVITY_CHECK_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-TRANSITIVITY-CHECK-CACHING-STATE*");
        $list438 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeUninternedSymbol("KEY"), (SubLObject)SubLObjectFactory.makeSymbol("PRED-SENTENCES"));
        $str439$Added__D_THCL_sentence__P_in__5F_ = SubLObjectFactory.makeString("Added ~D THCL sentence~:P in ~5F seconds.");
        $list440 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("PRED"), (SubLObject)SubLObjectFactory.makeSymbol("ARGNUM"));
        $kw441$GAF = SubLObjectFactory.makeKeyword("GAF");
        $str442$Fact_Sheet_Query_Daemon = SubLObjectFactory.makeString("Fact Sheet Query Daemon");
        $sym443$FACT_SHEET_QUERY_DAEMON_RUN = SubLObjectFactory.makeSymbol("FACT-SHEET-QUERY-DAEMON-RUN");
        $str444$Fact_Sheet_Query_Daemon_caught_er = SubLObjectFactory.makeString("Fact Sheet Query Daemon caught error while working on~% (~S ~S ~S ~S):~% ~S");
        $kw445$TIMED_OUT = SubLObjectFactory.makeKeyword("TIMED-OUT");
        $int446$300 = SubLObjectFactory.makeInteger(300);
        $str447$Hit_soft_timeout_of__S_seconds_af = SubLObjectFactory.makeString("Hit soft timeout of ~S seconds after getting ~S query results for ~S");
        $str448$Hit_hard_timeout_of__S_seconds_af = SubLObjectFactory.makeString("Hit hard timeout of ~S seconds after getting ~S query-results for ~S");
        $sym449$FACT_SHEET_LABEL_FOR_CATEGORY = SubLObjectFactory.makeSymbol("FACT-SHEET-LABEL-FOR-CATEGORY");
        $const450$termSummaryPredicateLabel = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("termSummaryPredicateLabel"));
        $sym451$_FACT_SHEET_LABEL_FOR_CATEGORY_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-LABEL-FOR-CATEGORY-CACHING-STATE*");
        $list452 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("CATEGORY"), (SubLObject)SubLObjectFactory.makeSymbol("SENTENCES"));
        $list453 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeUninternedSymbol("KEY"), (SubLObject)SubLObjectFactory.makeSymbol("SENTENCES"));
        $sym454$FACT_SHEET_SENTENCE_MORE_RECENT_ = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCE-MORE-RECENT?");
        $sym455$FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED");
        $sym456$_FACT_SHEET_SENTENCE_TIME_INTERVAL_CACHED_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-SENTENCE-TIME-INTERVAL-CACHED-CACHING-STATE*");
        $sym457$FACT_SHEET_SENTENCE_PRECEDENCE_FOR_CATEGORY = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCE-PRECEDENCE-FOR-CATEGORY");
        $const458$agentBioDataSentence = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("agentBioDataSentence"));
        $const459$ethnicity = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ethnicity"));
        $const460$birthPlace = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("birthPlace"));
        $const461$birthDate = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("birthDate"));
        $const462$placeOfDeath = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("placeOfDeath"));
        $const463$dateOfDeath = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("dateOfDeath"));
        $list464 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("FIRST-SENTENCE"), (SubLObject)SubLObjectFactory.makeSymbol("REMAINING"));
        $sym465$FACT_SHEET_SENTENCES_EQUAL_ = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCES-EQUAL?");
        $str466$_S___has_coherence__S_to____S = SubLObjectFactory.makeString("~S~% has coherence ~S to~% ~S");
        $sym467$FACT_SHEET_SENTENCE_COHERENCE = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCE-COHERENCE");
        $list468 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("PRED"), (SubLObject)SubLObjectFactory.makeSymbol("SENTENCES"));
        $sym469$FACT_SHEET_SENTENCE_PREDICATE = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCE-PREDICATE");
        $sym470$FACT_SHEET_SENTENCE_REFERENCES_EARLIER_DATE_ = SubLObjectFactory.makeSymbol("FACT-SHEET-SENTENCE-REFERENCES-EARLIER-DATE?");
        $str471$Earlierness_problem_____S____S = SubLObjectFactory.makeString("Earlierness problem:~% ~S~% ~S");
        $sym472$DATE_P = SubLObjectFactory.makeSymbol("DATE-P");
        $sym473$EXPRESSION_CONTAINS_ = SubLObjectFactory.makeSymbol("EXPRESSION-CONTAINS?");
        $sym474$DATE_ = SubLObjectFactory.makeSymbol("DATE<");
        $kw475$DISPLAY_TITLE_ = SubLObjectFactory.makeKeyword("DISPLAY-TITLE?");
        $kw476$PRINT_STATS_ = SubLObjectFactory.makeKeyword("PRINT-STATS?");
        $kw477$SHOW_COPYRIGHT_ = SubLObjectFactory.makeKeyword("SHOW-COPYRIGHT?");
        $str478$KB____0123456789_____ = SubLObjectFactory.makeString("KB: ([0123456789.]*) ");
        $str479$System____0123456789_____ = SubLObjectFactory.makeString("System: ([0123456789.]*) ");
        $str480$_span_class__copyright__ = SubLObjectFactory.makeString("<span class=\"copyright\">");
        $str481$Copyright = SubLObjectFactory.makeString("Copyright");
        $sym482$_FACT_SHEET_OPTIONAL_SECTION_START_COMMENT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-OPTIONAL-SECTION-START-COMMENT-CACHING-STATE*");
        $sym483$_FACT_SHEET_OPTIONAL_SECTION_END_COMMENT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-OPTIONAL-SECTION-END-COMMENT-CACHING-STATE*");
        $str484$Start_Fact_Sheet_Section_ = SubLObjectFactory.makeString("Start Fact Sheet Section ");
        $str485$End_Fact_Sheet_Section_ = SubLObjectFactory.makeString("End Fact Sheet Section ");
        $sym486$TERM_HAS_PRECACHED_FACT_SHEET_ = SubLObjectFactory.makeSymbol("TERM-HAS-PRECACHED-FACT-SHEET?");
        $kw487$ANY = SubLObjectFactory.makeKeyword("ANY");
        $list488 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("DOMAIN-MT"), (SubLObject)SubLObjectFactory.makeSymbol("LANGUAGE-MTS"));
        $list489 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("KNOWN-DOMAIN-MT"), (SubLObject)SubLObjectFactory.makeSymbol("LANGUAGE-MTS"));
        $list490 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("cfasl"), (SubLObject)SubLObjectFactory.makeString("html"));
        $str491$html = SubLObjectFactory.makeString("html");
        $kw492$IGNORE_ERRORS_TARGET = SubLObjectFactory.makeKeyword("IGNORE-ERRORS-TARGET");
        $sym493$IGNORE_ERRORS_HANDLER = SubLObjectFactory.makeSymbol("IGNORE-ERRORS-HANDLER", "SUBLISP");
        $kw494$FELL_BACK_ON_DEFAULT_ = SubLObjectFactory.makeKeyword("FELL-BACK-ON-DEFAULT?");
        $str495$Recently_Added = SubLObjectFactory.makeString("Recently Added");
        $list496 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeSymbol("DOMAIN-MT"), SubLObjectFactory.makeSymbol("VERBOSITY"), SubLObjectFactory.makeSymbol("SENTENCE-COUNT"), SubLObjectFactory.makeSymbol("SECTION-COUNT"), SubLObjectFactory.makeSymbol("INFO-GATHERING-TIME"), SubLObjectFactory.makeSymbol("PPH-TIME"), SubLObjectFactory.makeSymbol("SECOND-STRING"), SubLObjectFactory.makeSymbol("DATE-STRING"), SubLObjectFactory.makeSymbol("CYC-IMAGE-ID"), SubLObjectFactory.makeSymbol("KB-VERSION-STRING"), SubLObjectFactory.makeSymbol("CYC-REVISION-STRING"), SubLObjectFactory.makeSymbol("&OPTIONAL"), SubLObjectFactory.makeSymbol("TERM") });
        $sym497$MTS_WITH_PRECACHED_FACT_SHEET_DATA_FOR_TERM = SubLObjectFactory.makeSymbol("MTS-WITH-PRECACHED-FACT-SHEET-DATA-FOR-TERM");
        $sym498$DIRECTORY_P = SubLObjectFactory.makeSymbol("DIRECTORY-P");
        $str499$cdolist = SubLObjectFactory.makeString("cdolist");
        $str500$_ = SubLObjectFactory.makeString("/");
        $list501 = ConsesLow.list((SubLObject)Characters.CHAR_slash);
        $kw502$ALLOWED = SubLObjectFactory.makeKeyword("ALLOWED");
        $str503$cfasl = SubLObjectFactory.makeString("cfasl");
        $kw504$CURRENT = SubLObjectFactory.makeKeyword("CURRENT");
        $kw505$INPUT = SubLObjectFactory.makeKeyword("INPUT");
        $str506$Error_loading_data_for__S___A = SubLObjectFactory.makeString("Error loading data for ~S: ~A");
        $str507$This_fact_sheet_for_ = SubLObjectFactory.makeString("This fact sheet for ");
        $str508$_is_under_construction__Come_back = SubLObjectFactory.makeString(" is under construction. Come back soon.");
        $str509$775 = SubLObjectFactory.makeString("775");
        $str510$Couldn_t_create_directory_for_fac = SubLObjectFactory.makeString("Couldn't create directory for fact sheet for ~S~% directory: ~S");
        $str511$_ = SubLObjectFactory.makeString(".");
        $str512$_under_construction_ = SubLObjectFactory.makeString("-under-construction.");
        $str513$_html = SubLObjectFactory.makeString(".html");
        $str514$under_construction__Come_back_soo = SubLObjectFactory.makeString("under construction. Come back soon.");
        $str515$Gathering_old_under_construction_ = SubLObjectFactory.makeString("Gathering old under-construction fact-sheets...");
        $str516$_Directory__ = SubLObjectFactory.makeString(" Directory: ");
        $str517$_under_construction_cfasl = SubLObjectFactory.makeString("-under-construction.cfasl");
        $kw518$DELETED = SubLObjectFactory.makeKeyword("DELETED");
        $str519$_S_is_not_a_valid_extension__Must = SubLObjectFactory.makeString("~S is not a valid extension. Must be one of ~S");
        $str520$Couldn_t_create_directory_for_fac = SubLObjectFactory.makeString("Couldn't create directory for fact sheet for ~S~% directory: ~A");
        $str521$Couldn_t_write_fact_sheet_for__S_ = SubLObjectFactory.makeString("Couldn't write fact sheet for ~S on try ~A. Got error message: ~S");
        $str522$Couldn_t_write_fact_sheet_for__S_ = SubLObjectFactory.makeString("Couldn't write fact sheet for ~S on final try. Got error message: ~S");
        $str523$Couldn_t_write_fact_sheet_formatt = SubLObjectFactory.makeString("Couldn't write fact sheet formatting guidelines for ~S Got error message: ~S");
        $str524$Couldn_t_create_directory_for_fac = SubLObjectFactory.makeString("Couldn't create directory for fact sheet data for ~S~% directory: ~A");
        $str525$Couldn_t_write_fact_sheet_data_fo = SubLObjectFactory.makeString("Couldn't write fact sheet data for ~S Got error message: ~S");
        $str526$Fact_Sheet_Updater = SubLObjectFactory.makeString("Fact Sheet Updater");
        $sym527$UPDATE_FACT_SHEETS = SubLObjectFactory.makeSymbol("UPDATE-FACT-SHEETS");
        $str528$Stale_Fact_Sheet_Updater = SubLObjectFactory.makeString("Stale Fact Sheet Updater");
        $sym529$UPDATE_ALL_STALE_FACT_SHEETS = SubLObjectFactory.makeSymbol("UPDATE-ALL-STALE-FACT-SHEETS");
        $list530 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MINI"), (SubLObject)SubLObjectFactory.makeKeyword("NORMAL"));
        $list531 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MISSING"), (SubLObject)SubLObjectFactory.makeKeyword("STALE"));
        $str532$All_Fact_Sheet_Updater = SubLObjectFactory.makeString("All Fact Sheet Updater");
        $sym533$UPDATE_ALL_FACT_SHEETS = SubLObjectFactory.makeSymbol("UPDATE-ALL-FACT-SHEETS");
        $str534$Fact_Sheet_Log_File_Watcher = SubLObjectFactory.makeString("Fact Sheet Log File Watcher");
        $sym535$WATCH_FACT_SHEET_LOG_FILE = SubLObjectFactory.makeSymbol("WATCH-FACT-SHEET-LOG-FILE");
        $int536$60 = SubLObjectFactory.makeInteger(60);
        $str537$No_progress_after_at_least__A_try = SubLObjectFactory.makeString("No progress after at least ~A trying to update~% ~S");
        $str538$Halting_fact_sheet_updating___S = SubLObjectFactory.makeString("Halting fact-sheet updating: ~S");
        $list539 = ConsesLow.list((SubLObject)SubLObjectFactory.makeInteger(20120630), (SubLObject)fact_sheets.ZERO_INTEGER);
        $const540$Individual = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Individual"));
        $sym541$COLLECTION_P = SubLObjectFactory.makeSymbol("COLLECTION-P");
        $sym542$INTEGERP = SubLObjectFactory.makeSymbol("INTEGERP");
        $str543$__Logging_Fact_Sheet_generation_t = SubLObjectFactory.makeString("~&Logging Fact-Sheet generation to file:~% ~S~%");
        $kw544$APPEND = SubLObjectFactory.makeKeyword("APPEND");
        $str545$Updating_fact_sheets_for_all_fact = SubLObjectFactory.makeString("Updating fact sheets for all fact-sheetable instances of ~S that don't have fact sheets generated since ~S~%  verbosity: ~S~%  domain mt: ~S~%  language mt: ~S");
        $kw546$BREADTH = SubLObjectFactory.makeKeyword("BREADTH");
        $list547 = ConsesLow.list((SubLObject)SubLObjectFactory.makeUninternedSymbol("LINK-NODE"), (SubLObject)SubLObjectFactory.makeUninternedSymbol("MT"), (SubLObject)SubLObjectFactory.makeUninternedSymbol("TV"));
        $str548$Closing_log_ = SubLObjectFactory.makeString("Closing log.");
        $str549$Fact_Sheet_updater_for_Public_Fac = SubLObjectFactory.makeString("Fact Sheet updater for Public Fact Sheet Data");
        $sym550$UPDATE_FACT_SHEETS_OF_FS_TYPE_NOT_UPDATED_SINCE = SubLObjectFactory.makeSymbol("UPDATE-FACT-SHEETS-OF-FS-TYPE-NOT-UPDATED-SINCE");
        $str551$Updating_ = SubLObjectFactory.makeString("Updating ");
        $str552$_fact_sheets = SubLObjectFactory.makeString(" fact sheets");
        $str553$Updating_fact_sheets_for_public_t = SubLObjectFactory.makeString("Updating fact sheets for public-type ~S that haven't been generated since ~S~%  verbosity: ~S~%  domain mt: ~S~% language mt: ~S");
        $str554$Updating_stale_fact_sheets___ = SubLObjectFactory.makeString("Updating stale fact sheets...");
        $str555$Updating_all_stale_fact_sheets_fr = SubLObjectFactory.makeString("Updating all stale fact sheets from ~S");
        $str556$Now_doing__S__S__S = SubLObjectFactory.makeString("Now doing ~S ~S ~S");
        $str557$Stale_Fact_Sheet_Updater_error_on = SubLObjectFactory.makeString("Stale Fact-Sheet Updater error on ~S: ~A");
        $str558$Abandoning_after__D_errors_ = SubLObjectFactory.makeString("Abandoning after ~D errors.");
        $str559$Instructed_to_stop_updates_after_ = SubLObjectFactory.makeString("Instructed to stop updates after current term.");
        $str560$Finished_stale_fact_sheet_update_ = SubLObjectFactory.makeString("Finished stale fact-sheet update sweep.");
        $str561$Sleeping_until_8_00_tonight__Zzz_ = SubLObjectFactory.makeString("Sleeping until 8:00 tonight. Zzz...");
        $str562$Checking_for_fact_sheets_that_hav = SubLObjectFactory.makeString("Checking for fact sheets that have become stale...");
        $kw563$DONE = SubLObjectFactory.makeKeyword("DONE");
        $str564$KEYWORD = SubLObjectFactory.makeString("KEYWORD");
        $kw565$NOT_UPDATED = SubLObjectFactory.makeKeyword("NOT-UPDATED");
        $str566$under_construction = SubLObjectFactory.makeString("under-construction");
        $str567$_cfasl = SubLObjectFactory.makeString(".cfasl");
        $str568$Couldn_t_determine_focal_term_fro = SubLObjectFactory.makeString("Couldn't determine focal term from filename:~% ~S");
        $str569$Can_t_update_fact_sheet_for__S___ = SubLObjectFactory.makeString("Can't update fact sheet for ~S -- not a CYCL-DENOTATIONAL-TERM-P.");
        $str570$Can_t_update_fact_sheet_for__S___ = SubLObjectFactory.makeString("Can't update fact sheet for ~S -- couldn't determine verbosity from ~S");
        $str571$Can_t_update_fact_sheet_for__S___ = SubLObjectFactory.makeString("Can't update fact sheet for ~S -- Domain mt ~S fails HLMT?");
        $str572$Can_t_update_fact_sheet_for__S___ = SubLObjectFactory.makeString("Can't update fact sheet for ~S -- Language mt ~S fails HLMT?");
        $str573$Updating_stale_fact_sheet_for__S_ = SubLObjectFactory.makeString("Updating stale fact sheet for ~S ~S ~S ~S");
        $kw574$UPDATED = SubLObjectFactory.makeKeyword("UPDATED");
        $list575 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FORT")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym576$WITH_ALL_MTS = SubLObjectFactory.makeSymbol("WITH-ALL-MTS");
        $sym577$DO_ALL_FORT_INSTANCES = SubLObjectFactory.makeSymbol("DO-ALL-FORT-INSTANCES");
        $list578 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerroristAttack")));
        $list579 = ConsesLow.list((SubLObject)fact_sheets.NIL);
        $int580$50 = SubLObjectFactory.makeInteger(50);
        $str581$term_ids_to_update_ = SubLObjectFactory.makeString("term-ids-to-update/");
        $sym582$RELEVANT_MT_IS_EVERYTHING = SubLObjectFactory.makeSymbol("RELEVANT-MT-IS-EVERYTHING");
        $const583$EverythingPSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC"));
        $const584$TerroristAttack = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerroristAttack"));
        $str585$_term_ids_to_update_ = SubLObjectFactory.makeString("/term-ids-to-update/");
        $kw586$CONSTANT = SubLObjectFactory.makeKeyword("CONSTANT");
        $sym587$FIND_CONSTANT_BY_INTERNAL_ID = SubLObjectFactory.makeSymbol("FIND-CONSTANT-BY-INTERNAL-ID");
        $kw588$NART = SubLObjectFactory.makeKeyword("NART");
        $sym589$FIND_NART_BY_ID = SubLObjectFactory.makeSymbol("FIND-NART-BY-ID");
        $str590$Invalid_term_type_specification__ = SubLObjectFactory.makeString("Invalid term-type specification ~A.~%");
        $str591$a_specific_ID_set = SubLObjectFactory.makeString("a specific ID set");
        $str592$Updating_fact_sheets_from_ = SubLObjectFactory.makeString("Updating fact sheets from ");
        $str593$Skipping__S__which_was_updated_on = SubLObjectFactory.makeString("Skipping ~S, which was updated on ~S");
        $str594$Writing_fact_sheet_data_for__S_to = SubLObjectFactory.makeString("Writing fact-sheet-data for ~S to ~S");
        $str595$Couldn_t_find_fact_sheet_file_for = SubLObjectFactory.makeString("Couldn't find fact-sheet file for ~S");
        $str596$term_ids_ = SubLObjectFactory.makeString("term-ids-");
        $str597$_3__0D = SubLObjectFactory.makeString("~3,'0D");
        $str598$Updating_fact_sheets_file___D_of_ = SubLObjectFactory.makeString("Updating fact sheets file #~D of ~S");
        $str599$Couldn_t_find_id_file__S = SubLObjectFactory.makeString("Couldn't find id-file ~S");
        $sym600$NON_DOTTED_LIST_P = SubLObjectFactory.makeSymbol("NON-DOTTED-LIST-P");
        $sym601$FACT_SHEET_STATUS_P = SubLObjectFactory.makeSymbol("FACT-SHEET-STATUS-P");
        $str602$Scanning_for_fact_sheets_requirin = SubLObjectFactory.makeString("Scanning for fact sheets requiring update ....");
        $kw603$SKIP = SubLObjectFactory.makeKeyword("SKIP");
        $str604$Determining_for_all_fact_sheet_na = SubLObjectFactory.makeString("Determining for all fact sheet names for this KB ....");
        $sym605$POSITIVE_INTEGER_P = SubLObjectFactory.makeSymbol("POSITIVE-INTEGER-P");
        $str606$THIS_WORKER_NUMBER___a__must_be_l = SubLObjectFactory.makeString("THIS-WORKER-NUMBER (~a) must be less than NUMBER-OF-WORKERS (~a)");
        $str607$Starting_fact_sheet_update_sessio = SubLObjectFactory.makeString("Starting fact-sheet update session (worker #~S of ~S).~% Verbosities: ~S Target-Statuses: ~S Domain-mt: ~S Language-mt: ~S");
        $str608$Iterating_over_all_FORTs_to_updat = SubLObjectFactory.makeString("Iterating over all FORTs to update fact sheets as necessary...");
        $list609 = ConsesLow.list((SubLObject)SubLObjectFactory.makeUninternedSymbol("START"), (SubLObject)SubLObjectFactory.makeUninternedSymbol("END"), (SubLObject)SubLObjectFactory.makeUninternedSymbol("DELTA"));
        $str610$Starting__S_update_on__S__Status_ = SubLObjectFactory.makeString("Starting ~S update on ~S. Status: ~S");
        $str611$Fact_Sheet_Updater_error_on__S___ = SubLObjectFactory.makeString("Fact-Sheet Updater error on ~S: ~A");
        $str612$Halting_Fact_Sheet_Update_after__ = SubLObjectFactory.makeString("Halting Fact-Sheet Update after ~S errors");
        $str613$Finished_fact_sheet_update_sessio = SubLObjectFactory.makeString("Finished fact-sheet update session.");
        $str614$Starting_fact_sheet_update_sessio = SubLObjectFactory.makeString("Starting fact-sheet update session.~% Verbosity: ~S Domain-mt: ~S Language-mt: ~S Stop-after: ~S");
        $str615$Fact_Sheet_Updater_error__ = SubLObjectFactory.makeString("Fact-Sheet Updater error: ");
        $str616$Background = SubLObjectFactory.makeString("Background");
        $str617$Run = SubLObjectFactory.makeString("Run");
        $list618 = ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeString("daves"), (SubLObject)SubLObjectFactory.makeKeyword("NORMAL")), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeString("baxter"), (SubLObject)SubLObjectFactory.makeKeyword("NORMAL")));
        $sym619$_FACT_SHEET_SCREENSAVERS_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-SCREENSAVERS*");
        $str620$Fact_Sheet_Screensaver = SubLObjectFactory.makeString("Fact Sheet Screensaver");
        $sym621$UPDATE_FACT_SHEET_SCREENSAVER = SubLObjectFactory.makeSymbol("UPDATE-FACT-SHEET-SCREENSAVER");
        $str622$Starting_fact_sheet_update_screen = SubLObjectFactory.makeString("Starting fact-sheet update screensaver~% Verbosity: ~S Domain-mt: ~S Language-mt: ~S Start-hour: ~S:00 End-hour: ~A");
        $str623$_00 = SubLObjectFactory.makeString(":00");
        $str624$midnight = SubLObjectFactory.makeString("midnight");
        $str625$Start_time_hasn_t_arrived__Sleepi = SubLObjectFactory.makeString("Start time hasn't arrived. Sleeping until ~S:00.~%Zzzz.");
        $str626$End_time_of__S_00_has_passed__Sle = SubLObjectFactory.makeString("End time of ~S:00 has passed. Sleeping until ~S:00.~%Zzzz.");
        $str627$Been_told_to_sleep__Sleeping_for_ = SubLObjectFactory.makeString("Been told to sleep. Sleeping for ~S seconds.~%Zzzz.");
        $str628$Image_appears_to_be_busy__Sleepin = SubLObjectFactory.makeString("Image appears to be busy. Sleeping for ~S seconds.~%Zzzz.");
        $str629$Fact_Sheet_Screensavers_have_been = SubLObjectFactory.makeString("Fact Sheet Screensavers have been instructed to die.");
        $str630$Updating__S = SubLObjectFactory.makeString("Updating ~S");
        $str631$Finished_fact_sheet_for__S_in__5F = SubLObjectFactory.makeString("Finished fact sheet for ~S in ~5F seconds.");
        $str632$Caught_error_while_updating__S_fa = SubLObjectFactory.makeString("Caught error while updating ~S fact sheet for ~S:~% ~A");
        $list633 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("HTML"), (SubLObject)SubLObjectFactory.makeSymbol("FORMATTING-GUIDELINES"));
        $int634$1800 = SubLObjectFactory.makeInteger(1800);
        $str635$Encountered_inference_error_while = SubLObjectFactory.makeString("Encountered inference error while updating ~S:~% ~S");
        $list636 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("OLD-DATA"), (SubLObject)SubLObjectFactory.makeSymbol("OLD-STATS"), (SubLObject)SubLObjectFactory.makeSymbol("OLD-FOOTNOTES"), (SubLObject)SubLObjectFactory.makeSymbol("OLD-FORMATTING-GUIDELINES"));
        $str637$Launching_make_up_updater_for__S_ = SubLObjectFactory.makeString("Launching make-up updater for ~S. ~A");
        $str638$_Timed_out_after_ = SubLObjectFactory.makeString("(Timed out after ");
        $str639$_seconds__ = SubLObjectFactory.makeString(" seconds.)");
        $str640$_Didn_t_time_out__Probably_ran_in = SubLObjectFactory.makeString("(Didn't time out. Probably ran into an error.)");
        $str641$Fact_Sheet_Post_Timeout_Updater = SubLObjectFactory.makeString("Fact Sheet Post-Timeout Updater");
        $sym642$UPDATE_FACT_SHEET_FOR_TERM = SubLObjectFactory.makeSymbol("UPDATE-FACT-SHEET-FOR-TERM");
        $list643 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("DATE"), (SubLObject)SubLObjectFactory.makeSymbol("SECOND"));
        $list644 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("MODIFIED-DATE"), (SubLObject)SubLObjectFactory.makeSymbol("MODIFIED-SECOND"));
        $list645 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("ARG-ISA-BINARY-PRED?")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("ARG-GENL-BINARY-PRED?")));
        $kw646$ANYTHING = SubLObjectFactory.makeKeyword("ANYTHING");
        $list647 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("ARG-ISA-TERNARY-PRED?")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("ARG-GENL-TERNARY-PRED?")));
        $list648 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("resultIsa")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("resultGenl")));
        $list649 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genls")));
        $str650$_S_was_modified_on__S____New_GAF_ = SubLObjectFactory.makeString("~S was modified on ~S.~% New GAF: ~S");
        $str651$_formatting_guidelines_cfasl = SubLObjectFactory.makeString("-formatting-guidelines.cfasl");
        $list652 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("VERBOSITY-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("DOMAIN-MT-ID"), (SubLObject)SubLObjectFactory.makeSymbol("LANGUAGE-MT-ID"));
        $sym653$FACT_SHEET_DIRECTORY_FROM_LIST = SubLObjectFactory.makeSymbol("FACT-SHEET-DIRECTORY-FROM-LIST");
        $sym654$_FACT_SHEET_DIRECTORY_FROM_LIST_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-DIRECTORY-FROM-LIST-CACHING-STATE*");
        $sym655$FACT_SHEET_UPDATE_TERM_PRIORITIZER = SubLObjectFactory.makeSymbol("FACT-SHEET-UPDATE-TERM-PRIORITIZER");
        $sym656$FACT_SHEET_UPDATE_TERM_PRIORITIZER_P = SubLObjectFactory.makeSymbol("FACT-SHEET-UPDATE-TERM-PRIORITIZER-P");
        $list657 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeSymbol("STALE-TERMS"), SubLObjectFactory.makeSymbol("MISSING-TERMS"), SubLObjectFactory.makeSymbol("UP-TO-DATE-TERMS"), SubLObjectFactory.makeSymbol("THREAD"), SubLObjectFactory.makeSymbol("SHOULD-SLEEP?"), SubLObjectFactory.makeSymbol("VERBOSITY"), SubLObjectFactory.makeSymbol("DOMAIN-MT"), SubLObjectFactory.makeSymbol("LANGUAGE-MT"), SubLObjectFactory.makeSymbol("NICE-LEVEL"), SubLObjectFactory.makeSymbol("NEW-DAYS") });
        $list658 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("STALE-TERMS"), SubLObjectFactory.makeKeyword("MISSING-TERMS"), SubLObjectFactory.makeKeyword("UP-TO-DATE-TERMS"), SubLObjectFactory.makeKeyword("THREAD"), SubLObjectFactory.makeKeyword("SHOULD-SLEEP?"), SubLObjectFactory.makeKeyword("VERBOSITY"), SubLObjectFactory.makeKeyword("DOMAIN-MT"), SubLObjectFactory.makeKeyword("LANGUAGE-MT"), SubLObjectFactory.makeKeyword("NICE-LEVEL"), SubLObjectFactory.makeKeyword("NEW-DAYS") });
        $list659 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-STALE-TERMS"), SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-MISSING-TERMS"), SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-UP-TO-DATE-TERMS"), SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-THREAD"), SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-SHOULD-SLEEP?"), SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-VERBOSITY"), SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-DOMAIN-MT"), SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-LANGUAGE-MT"), SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-NICE-LEVEL"), SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-NEW-DAYS") });
        $list660 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-STALE-TERMS"), SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-MISSING-TERMS"), SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-UP-TO-DATE-TERMS"), SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-THREAD"), SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-SHOULD-SLEEP?"), SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-VERBOSITY"), SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-DOMAIN-MT"), SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-LANGUAGE-MT"), SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-NICE-LEVEL"), SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-NEW-DAYS") });
        $sym661$PPRINT_FSUT_PRIORITIZER = SubLObjectFactory.makeSymbol("PPRINT-FSUT-PRIORITIZER");
        $sym662$FACT_SHEET_UPDATE_TERM_PRIORITIZER_PRINT_FUNCTION_TRAMPOLINE = SubLObjectFactory.makeSymbol("FACT-SHEET-UPDATE-TERM-PRIORITIZER-PRINT-FUNCTION-TRAMPOLINE");
        $list663 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("OPTIMIZE-FUNCALL"), (SubLObject)SubLObjectFactory.makeSymbol("FACT-SHEET-UPDATE-TERM-PRIORITIZER-P"));
        $sym664$FSUT_PRIORITIZER_STALE_TERMS = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-STALE-TERMS");
        $sym665$_CSETF_FSUT_PRIORITIZER_STALE_TERMS = SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-STALE-TERMS");
        $sym666$FSUT_PRIORITIZER_MISSING_TERMS = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-MISSING-TERMS");
        $sym667$_CSETF_FSUT_PRIORITIZER_MISSING_TERMS = SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-MISSING-TERMS");
        $sym668$FSUT_PRIORITIZER_UP_TO_DATE_TERMS = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-UP-TO-DATE-TERMS");
        $sym669$_CSETF_FSUT_PRIORITIZER_UP_TO_DATE_TERMS = SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-UP-TO-DATE-TERMS");
        $sym670$FSUT_PRIORITIZER_THREAD = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-THREAD");
        $sym671$_CSETF_FSUT_PRIORITIZER_THREAD = SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-THREAD");
        $sym672$FSUT_PRIORITIZER_SHOULD_SLEEP_ = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-SHOULD-SLEEP?");
        $sym673$_CSETF_FSUT_PRIORITIZER_SHOULD_SLEEP_ = SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-SHOULD-SLEEP?");
        $sym674$FSUT_PRIORITIZER_VERBOSITY = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-VERBOSITY");
        $sym675$_CSETF_FSUT_PRIORITIZER_VERBOSITY = SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-VERBOSITY");
        $sym676$FSUT_PRIORITIZER_DOMAIN_MT = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-DOMAIN-MT");
        $sym677$_CSETF_FSUT_PRIORITIZER_DOMAIN_MT = SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-DOMAIN-MT");
        $sym678$FSUT_PRIORITIZER_LANGUAGE_MT = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-LANGUAGE-MT");
        $sym679$_CSETF_FSUT_PRIORITIZER_LANGUAGE_MT = SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-LANGUAGE-MT");
        $sym680$FSUT_PRIORITIZER_NICE_LEVEL = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-NICE-LEVEL");
        $sym681$_CSETF_FSUT_PRIORITIZER_NICE_LEVEL = SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-NICE-LEVEL");
        $sym682$FSUT_PRIORITIZER_NEW_DAYS = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-NEW-DAYS");
        $sym683$_CSETF_FSUT_PRIORITIZER_NEW_DAYS = SubLObjectFactory.makeSymbol("_CSETF-FSUT-PRIORITIZER-NEW-DAYS");
        $kw684$STALE_TERMS = SubLObjectFactory.makeKeyword("STALE-TERMS");
        $kw685$MISSING_TERMS = SubLObjectFactory.makeKeyword("MISSING-TERMS");
        $kw686$UP_TO_DATE_TERMS = SubLObjectFactory.makeKeyword("UP-TO-DATE-TERMS");
        $kw687$THREAD = SubLObjectFactory.makeKeyword("THREAD");
        $kw688$SHOULD_SLEEP_ = SubLObjectFactory.makeKeyword("SHOULD-SLEEP?");
        $kw689$VERBOSITY = SubLObjectFactory.makeKeyword("VERBOSITY");
        $kw690$DOMAIN_MT = SubLObjectFactory.makeKeyword("DOMAIN-MT");
        $kw691$LANGUAGE_MT = SubLObjectFactory.makeKeyword("LANGUAGE-MT");
        $kw692$NICE_LEVEL = SubLObjectFactory.makeKeyword("NICE-LEVEL");
        $kw693$NEW_DAYS = SubLObjectFactory.makeKeyword("NEW-DAYS");
        $str694$Invalid_slot__S_for_construction_ = SubLObjectFactory.makeString("Invalid slot ~S for construction function");
        $kw695$BEGIN = SubLObjectFactory.makeKeyword("BEGIN");
        $sym696$MAKE_FACT_SHEET_UPDATE_TERM_PRIORITIZER = SubLObjectFactory.makeSymbol("MAKE-FACT-SHEET-UPDATE-TERM-PRIORITIZER");
        $kw697$SLOT = SubLObjectFactory.makeKeyword("SLOT");
        $kw698$END = SubLObjectFactory.makeKeyword("END");
        $sym699$VISIT_DEFSTRUCT_OBJECT_FACT_SHEET_UPDATE_TERM_PRIORITIZER_METHOD = SubLObjectFactory.makeSymbol("VISIT-DEFSTRUCT-OBJECT-FACT-SHEET-UPDATE-TERM-PRIORITIZER-METHOD");
        $str700$__PRIORITIZER_stale__S_missing__S = SubLObjectFactory.makeString("#<PRIORITIZER stale=~S missing=~S up-to-date=~S>");
        $sym701$_FACT_SHEET_UPDATE_TERM_PRIORITIZERS_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-UPDATE-TERM-PRIORITIZERS*");
        $int702$_20 = SubLObjectFactory.makeInteger(-20);
        $int703$1000 = SubLObjectFactory.makeInteger(1000);
        $sym704$FSUT_PRIORITIZER_QUEUE_RANK_FUNC = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-QUEUE-RANK-FUNC");
        $sym705$FSUT_PRIORITIZER_QUEUE_COMP_FUNC = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-QUEUE-COMP-FUNC");
        $str706$Non_cons_item_in_prioritizer_queu = SubLObjectFactory.makeString("Non-cons item in prioritizer queue: ~S");
        $str707$Non_non_negative_integer_priority = SubLObjectFactory.makeString("Non-non-negative-integer priority in prioritizer queue: ~S");
        $str708$Fact_Sheet_Prioritizer = SubLObjectFactory.makeString("Fact Sheet Prioritizer");
        $sym709$FSUT_PRIORITIZER_PLACE_TERMS = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-PLACE-TERMS");
        $kw710$STOPPED = SubLObjectFactory.makeKeyword("STOPPED");
        $int711$100 = SubLObjectFactory.makeInteger(100);
        $str712$Had_trouble_getting_a_term_from__ = SubLObjectFactory.makeString("Had trouble getting a term from ~S");
        $str713$Skipping__S__Update_already_under = SubLObjectFactory.makeString("Skipping ~S: Update already undertaken.");
        $list714 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("TERM"), (SubLObject)SubLObjectFactory.makeSymbol("PRIORITY"));
        $kw715$STALE = SubLObjectFactory.makeKeyword("STALE");
        $str716$Dequeuing__S__Status__stale__Prio = SubLObjectFactory.makeString("Dequeuing ~S. Status: stale. Priority: ~S");
        $kw717$MISSING = SubLObjectFactory.makeKeyword("MISSING");
        $str718$Dequeuing__S__Status__missing__Pr = SubLObjectFactory.makeString("Dequeuing ~S. Status: missing. Priority: ~S");
        $kw719$UP_TO_DATE = SubLObjectFactory.makeKeyword("UP-TO-DATE");
        $str720$Dequeuing__S__Status__up_to_date_ = SubLObjectFactory.makeString("Dequeuing ~S. Status: up-to-date. Priority: ~S");
        $sym721$FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL = SubLObjectFactory.makeSymbol("FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL");
        $sym722$_FSUT_PRIORITIZER_SLEEP_INTERVAL_FROM_NICE_LEVEL_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FSUT-PRIORITIZER-SLEEP-INTERVAL-FROM-NICE-LEVEL-CACHING-STATE*");
        $int723$40 = SubLObjectFactory.makeInteger(40);
        $str724$mapping_Cyc_FORTs = SubLObjectFactory.makeString("mapping Cyc FORTs");
        $str725$Non_cons_in_fact_sheet_prioritize = SubLObjectFactory.makeString("Non-cons in fact sheet prioritizer queue: ~S");
        $kw726$OK = SubLObjectFactory.makeKeyword("OK");
        $list727 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MISSING"), (SubLObject)SubLObjectFactory.makeKeyword("STALE"), (SubLObject)SubLObjectFactory.makeKeyword("UP-TO-DATE"));
        $int728$25 = SubLObjectFactory.makeInteger(25);
        $str729$border_0 = SubLObjectFactory.makeString("border=0");
        $kw730$FORBIDDEN = SubLObjectFactory.makeKeyword("FORBIDDEN");
        $sym731$PRED_ARGNUM_COMBOS_FOR_TERM = SubLObjectFactory.makeSymbol("PRED-ARGNUM-COMBOS-FOR-TERM");
        $str732$term = SubLObjectFactory.makeString("term");
        $str733$creation_kb = SubLObjectFactory.makeString("creation-kb");
        $str734$creation_system = SubLObjectFactory.makeString("creation-system");
        $str735$evaluator = SubLObjectFactory.makeString("evaluator");
        $str736$Fact_Sheet_Evaluation = SubLObjectFactory.makeString("Fact Sheet Evaluation");
        $kw737$CB_CYC = SubLObjectFactory.makeKeyword("CB-CYC");
        $kw738$SAM_AUTOCOMPLETE_CSS = SubLObjectFactory.makeKeyword("SAM-AUTOCOMPLETE-CSS");
        $kw739$SHA1 = SubLObjectFactory.makeKeyword("SHA1");
        $str740$yui_skin_sam = SubLObjectFactory.makeString("yui-skin-sam");
        $str741$reloadFrameButton = SubLObjectFactory.makeString("reloadFrameButton");
        $str742$button = SubLObjectFactory.makeString("button");
        $str743$reload = SubLObjectFactory.makeString("reload");
        $str744$Refresh_Frames = SubLObjectFactory.makeString("Refresh Frames");
        $str745$post = SubLObjectFactory.makeString("post");
        $str746$cb_handle_fact_sheet_evaluation = SubLObjectFactory.makeString("cb-handle-fact-sheet-evaluation");
        $kw747$COVERAGE = SubLObjectFactory.makeKeyword("COVERAGE");
        $list748 = ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)SubLObjectFactory.makeString("0 -- No facts visible")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)SubLObjectFactory.makeString("5 -- Half of the facts I'd expect to see are here")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.TEN_INTEGER, (SubLObject)SubLObjectFactory.makeString("10 -- all relevant facts from KB are present in the Fact Sheet")));
        $kw749$FILTERING = SubLObjectFactory.makeKeyword("FILTERING");
        $list750 = ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)SubLObjectFactory.makeString("0 -- none of the facts on this fact sheet should be here")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)SubLObjectFactory.makeString("5 -- Half of the facts are inappropriate for this fact sheet")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.TEN_INTEGER, (SubLObject)SubLObjectFactory.makeString("10 -- Nothing that should be removed")));
        $kw751$REDUNDANCY = SubLObjectFactory.makeKeyword("REDUNDANCY");
        $list752 = ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)SubLObjectFactory.makeString("0 -- Every fact I see involves redundancy")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)SubLObjectFactory.makeString("5 -- Half of the facts on the sheet involve redundancy")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.TEN_INTEGER, (SubLObject)SubLObjectFactory.makeString("10 -- There are no bothersome redundant facts")));
        $kw753$CLARITY = SubLObjectFactory.makeKeyword("CLARITY");
        $list754 = ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)SubLObjectFactory.makeString("0 -- I couldn't understand a single one of the facts")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.TWO_INTEGER, (SubLObject)SubLObjectFactory.makeString("2 -- Some understandable, but much incomprehensible")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)SubLObjectFactory.makeString("5 -- It took me a while to figure what it was saying")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.EIGHT_INTEGER, (SubLObject)SubLObjectFactory.makeString("8 -- Awkward, but fairly easy to understand")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.TEN_INTEGER, (SubLObject)SubLObjectFactory.makeString("10 -- all facts were presented perfectly clearly")));
        $kw755$LINKS = SubLObjectFactory.makeKeyword("LINKS");
        $list756 = ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)SubLObjectFactory.makeString("0 -- I couldn't get to any other Fact Sheets from this one")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.TEN_INTEGER, (SubLObject)SubLObjectFactory.makeString("10 -- All other relevant fact sheets reachable from here")));
        $kw757$CATEGORIZATION = SubLObjectFactory.makeKeyword("CATEGORIZATION");
        $list758 = ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)SubLObjectFactory.makeString("0 -- Not a single fact was in the right section")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)SubLObjectFactory.makeString("5 -- Half the facts were in appropriate sections")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.TEN_INTEGER, (SubLObject)SubLObjectFactory.makeString("10 -- All facts were in appropriate sections")));
        $kw759$FLUIDITY = SubLObjectFactory.makeKeyword("FLUIDITY");
        $list760 = ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)SubLObjectFactory.makeString("0 -- No useful pattern for how anything was ordered or presented")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.FIVE_INTEGER, (SubLObject)SubLObjectFactory.makeString("5 -- Facts were mostly in the right order, but some jarring")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.TEN_INTEGER, (SubLObject)SubLObjectFactory.makeString("10 -- Looks like a good writer wrote each section")));
        $kw761$ESTHETIC_VALUE = SubLObjectFactory.makeKeyword("ESTHETIC-VALUE");
        $list762 = ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)fact_sheets.ZERO_INTEGER, (SubLObject)SubLObjectFactory.makeString("0 -- I've never seen anything uglier")), (SubLObject)ConsesLow.cons((SubLObject)fact_sheets.TEN_INTEGER, (SubLObject)SubLObjectFactory.makeString("10 -- I can't imagine how these could ever look better")));
        $str763$Submit_Evaluation = SubLObjectFactory.makeString("Submit Evaluation");
        $sym764$CB_FACT_SHEET_EVALUATION = SubLObjectFactory.makeSymbol("CB-FACT-SHEET-EVALUATION");
        $kw765$HTML_HANDLER = SubLObjectFactory.makeKeyword("HTML-HANDLER");
        $str766$__ = SubLObjectFactory.makeString(": ");
        $str767$_comments = SubLObjectFactory.makeString("-comments");
        $str768$Score__ = SubLObjectFactory.makeString("Score: ");
        $str769$Comments__ = SubLObjectFactory.makeString("Comments: ");
        $int770$80 = SubLObjectFactory.makeInteger(80);
        $str771$No_Value_Selected = SubLObjectFactory.makeString("No Value Selected");
        $list772 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("filtering"), SubLObjectFactory.makeString("filtering-comments"), SubLObjectFactory.makeString("coverage"), SubLObjectFactory.makeString("coverage-comments"), SubLObjectFactory.makeString("linking"), SubLObjectFactory.makeString("linking-comments"), SubLObjectFactory.makeString("clarity"), SubLObjectFactory.makeString("clarity-comments"), SubLObjectFactory.makeString("categorization"), SubLObjectFactory.makeString("categorization-comments"), SubLObjectFactory.makeString("esthetic-value"), SubLObjectFactory.makeString("esthetic-value-comments"), SubLObjectFactory.makeString("fluidity"), SubLObjectFactory.makeString("fluidity-comments"), SubLObjectFactory.makeString("creation-kb"), SubLObjectFactory.makeString("creation-system") });
        $kw773$TERM = SubLObjectFactory.makeKeyword("TERM");
        $kw774$EVALUATOR = SubLObjectFactory.makeKeyword("EVALUATOR");
        $list775 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("-1"), (SubLObject)SubLObjectFactory.makeString(""));
        $kw776$EVAL_SYSTEM = SubLObjectFactory.makeKeyword("EVAL-SYSTEM");
        $kw777$EVAL_TIME = SubLObjectFactory.makeKeyword("EVAL-TIME");
        $str778$_S__ = SubLObjectFactory.makeString("~S~%");
        $sym779$CB_HANDLE_FACT_SHEET_EVALUATION = SubLObjectFactory.makeSymbol("CB-HANDLE-FACT-SHEET-EVALUATION");
        $str780$cg_cb_fact_sheet_evaluation_term_ = SubLObjectFactory.makeString("cg?cb-fact-sheet-evaluation&term=");
        $str781$_evaluator_ = SubLObjectFactory.makeString("&evaluator=");
        $str782$_creation_kb_ = SubLObjectFactory.makeString("&creation-kb=");
        $str783$_creation_system_ = SubLObjectFactory.makeString("&creation-system=");
        $str784$Evaluate_Fact_Sheet = SubLObjectFactory.makeString("Evaluate Fact Sheet");
        $str785$Evaluate_this_Fact_Sheet = SubLObjectFactory.makeString("Evaluate this Fact Sheet");
        $sym786$_FACT_SHEET_UPDATING_LOCK_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-UPDATING-LOCK*");
        $str787$Fact_Sheet_Data_Update_Lock = SubLObjectFactory.makeString("Fact Sheet Data Update Lock");
        $str788$The_process_that_is_marking_the_f = SubLObjectFactory.makeString("The process that is marking the factsheet as modifiable (~A) is not the process currently modifying the fact sheet (~A)");
        $str789$public = SubLObjectFactory.makeString("public");
        $str790$_script_type__text_javascript____ = SubLObjectFactory.makeString("<script type=\"text/javascript\"><!--\ngoogle_ad_client = \"pub-0348708830263077\";\ngoogle_alternate_color = \"6728B2\";\ngoogle_ad_width = 728;\ngoogle_ad_height = 90;\ngoogle_ad_format = \"728x90_as\";\ngoogle_ad_type = \"text_image\";\ngoogle_ad_channel = \"\";\ngoogle_color_border = \"341473\";\ngoogle_color_bg = \"E6F0FF\";\ngoogle_color_link = \"0000FF\";\ngoogle_color_text = \"000000\";\ngoogle_color_url = \"008000\";\ngoogle_ui_features = \"rc:6\";\n//-->\n</script>\n<script type=\"text/javascript\"\n src=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\">\n</script>");
        $str791$__ = SubLObjectFactory.makeString("..");
        $sym792$GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING = SubLObjectFactory.makeSymbol("GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING");
        $sym793$MIN_ISA_AMONG = SubLObjectFactory.makeSymbol("MIN-ISA-AMONG");
        $sym794$MIN_GENLS_AMONG = SubLObjectFactory.makeSymbol("MIN-GENLS-AMONG");
        $sym795$FACT_SHEET_FILENAME_CHAR_ = SubLObjectFactory.makeSymbol("FACT-SHEET-FILENAME-CHAR?");
        $str796$_ = SubLObjectFactory.makeString("_");
        $sym797$_GET_PUBLIC_FACT_SHEET_TERM_PARENT_DIRECTORY_STRING_CACHING_STATE = SubLObjectFactory.makeSymbol("*GET-PUBLIC-FACT-SHEET-TERM-PARENT-DIRECTORY-STRING-CACHING-STATE*");
        $str798$_term_mapping_cfasl = SubLObjectFactory.makeString("-term-mapping.cfasl");
        $str799$_term_mapping_txt = SubLObjectFactory.makeString("-term-mapping.txt");
        $kw800$INCYC = SubLObjectFactory.makeKeyword("INCYC");
        $sym801$TERMS_FOR_PUBLIC_FACT_SHEETS = SubLObjectFactory.makeSymbol("TERMS-FOR-PUBLIC-FACT-SHEETS");
        $sym802$_X = SubLObjectFactory.makeSymbol("?X");
        $kw803$ANSWER_LANGUAGE = SubLObjectFactory.makeKeyword("ANSWER-LANGUAGE");
        $kw804$HL = SubLObjectFactory.makeKeyword("HL");
        $list805 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INFERENCE-MODE"), (SubLObject)SubLObjectFactory.makeKeyword("MINIMAL"), (SubLObject)SubLObjectFactory.makeKeyword("BROWSABLE?"), (SubLObject)SubLObjectFactory.makeSymbol("*FACT-SHEET-QUERIES-BROWSABLE?*"));
        $str806$_S__S___S = SubLObjectFactory.makeString("~S ~S: ~S");
        $list807 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genls")));
        $sym808$_TERMS_FOR_PUBLIC_FACT_SHEETS_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TERMS-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*");
        $sym809$TYPES_FOR_PUBLIC_FACT_SHEETS = SubLObjectFactory.makeSymbol("TYPES-FOR-PUBLIC-FACT-SHEETS");
        $sym810$COLLECTION_IN_ANY_MT_ = SubLObjectFactory.makeSymbol("COLLECTION-IN-ANY-MT?");
        $sym811$_TYPES_FOR_PUBLIC_FACT_SHEETS_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*TYPES-FOR-PUBLIC-FACT-SHEETS-CACHING-STATE*");
        $sym812$FACT_SHEET_TERM_STRINGS = SubLObjectFactory.makeSymbol("FACT-SHEET-TERM-STRINGS");
        $sym813$_FACT_SHEET_TERM_STRINGS_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*FACT-SHEET-TERM-STRINGS-CACHING-STATE*");
        $str814$Getting_English_for_terms = SubLObjectFactory.makeString("Getting English for terms");
        $sym815$GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS = SubLObjectFactory.makeSymbol("GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS");
        $str816$getting_urls_for_terms = SubLObjectFactory.makeString("getting urls for terms");
        $list817 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("TERM"), (SubLObject)SubLObjectFactory.makeSymbol("STRINGS"));
        $sym818$_GET_PUBLIC_FACT_SHEET_STRING_URL_MAPPINGS_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-PUBLIC-FACT-SHEET-STRING-URL-MAPPINGS-CACHING-STATE*");
        $str819$resultSet = SubLObjectFactory.makeString("resultSet");
        $str820$Writing_out_paths = SubLObjectFactory.makeString("Writing out paths");
        $list821 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("TERM"), (SubLObject)SubLObjectFactory.makeSymbol("URL"));
        $str822$displayNl = SubLObjectFactory.makeString("displayNl");
        $str823$nl = SubLObjectFactory.makeString("nl");
        $str824$factSheetPath = SubLObjectFactory.makeString("factSheetPath");
        $str825$cyclId = SubLObjectFactory.makeString("cyclId");
        $str826$_cyc_projects_inCyc_staging_area_ = SubLObjectFactory.makeString("/cyc/projects/inCyc/staging-area/inCyc/concepts/");
        $str827$_cyc_projects_inCyc_staging_area_ = SubLObjectFactory.makeString("/cyc/projects/inCyc/staging-area/inCyc/js/searchdata.js");
        $str828$_cyc_projects_inCyc_staging_area_ = SubLObjectFactory.makeString("/cyc/projects/inCyc/staging-area/inCyc/searchdata.xml");
        $str829$_cyc_projects_inCyc_staging_area_ = SubLObjectFactory.makeString("/cyc/projects/inCyc/staging-area/inCyc/searchdata.htaccess");
        $str830$_cyc_projects_inCyc_staging_area_ = SubLObjectFactory.makeString("/cyc/projects/inCyc/staging-area/inCyc/searchdata.sql");
        $str831$factSheetPath__________cyclId____ = SubLObjectFactory.makeString("factSheetPath=\"(.*?)\".*cyclId=\"(.*?)\"");
        $str832$RewriteCond________1___A___ = SubLObjectFactory.makeString("RewriteCond       $1 ^~A$~%");
        $str833$RewriteRule________scratch_www_in = SubLObjectFactory.makeString("RewriteRule ^(.+) /scratch/www/incyc/concepts/~A  [L]~%~%");
        $str834$_A__ = SubLObjectFactory.makeString("~A~%");
        $str835$DROP_TABLE_HAS_INCYC_PAGE_ = SubLObjectFactory.makeString("DROP TABLE HAS_INCYC_PAGE;");
        $str836$CREATE_TABLE_HAS_INCYC_PAGE__EXTE = SubLObjectFactory.makeString("CREATE TABLE HAS_INCYC_PAGE (EXTERNAL_ID varchar(2048) NOT NULL PRIMARY KEY);");
        $str837$cyclId________ = SubLObjectFactory.makeString("cyclId=\"(.*?)\"");
        $str838$__ = SubLObjectFactory.makeString(", ");
        $str839$INSERT_INTO_InCyc_Pages__EXTERNAL = SubLObjectFactory.makeString("INSERT INTO InCyc_Pages (EXTERNAL_ID) VALUES ~A;~%");
        $str840$__ = SubLObjectFactory.makeString("('");
        $str841$__ = SubLObjectFactory.makeString("')");
        $str842$Mapping_public_fact_sheet_files__ = SubLObjectFactory.makeString("Mapping public fact-sheet files...");
        $str843$var_searchData____ = SubLObjectFactory.makeString("var searchData = {");
        $str844$writing_json = SubLObjectFactory.makeString("writing json");
        $str845$_ = SubLObjectFactory.makeString(",");
        $str846$_ = SubLObjectFactory.makeString("}");
        $list847 = ConsesLow.list((SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeString("'"), (SubLObject)SubLObjectFactory.makeString("\\'")), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeString(","), (SubLObject)SubLObjectFactory.makeString("\\,")));
        $str848$__A_ = SubLObjectFactory.makeString("'~A'");
        $str849$___ = SubLObjectFactory.makeString(": [");
        $str850$_ = SubLObjectFactory.makeString("]");
        $str851$checking_for_fact_sheets = SubLObjectFactory.makeString("checking for fact-sheets");
        $kw852$COLLECTION_NAME = SubLObjectFactory.makeKeyword("COLLECTION-NAME");
        $kw853$ROOT_TYPES = SubLObjectFactory.makeKeyword("ROOT-TYPES");
        $kw854$BLACKLIST_TYPES = SubLObjectFactory.makeKeyword("BLACKLIST-TYPES");
        $kw855$BLACKLIST_QUOTED_TYPES = SubLObjectFactory.makeKeyword("BLACKLIST-QUOTED-TYPES");
        $kw856$DEFAULT_STARTING_POINTS_FILENAME = SubLObjectFactory.makeKeyword("DEFAULT-STARTING-POINTS-FILENAME");
        $list857 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("WorldGeographyDualistMt")));
        $kw858$CATEGORY_LABELS = SubLObjectFactory.makeKeyword("CATEGORY-LABELS");
        $sym859$ALPHANUMERICP = SubLObjectFactory.makeSymbol("ALPHANUMERICP");
        $kw860$SORT_FN = SubLObjectFactory.makeKeyword("SORT-FN");
        $sym861$DEFAULT_FACT_SHEET_PARAGRAPH_RETRIEVAL_TIME_SORT_FN = SubLObjectFactory.makeSymbol("DEFAULT-FACT-SHEET-PARAGRAPH-RETRIEVAL-TIME-SORT-FN");
        $list862 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("agentDocumentationDataSentence")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("collectionDocumentationDataSentence")));
        $str863$incyc = SubLObjectFactory.makeString("incyc");
        $str864$______info_html = SubLObjectFactory.makeString("../../info.html");
        $str865$______styles_css = SubLObjectFactory.makeString("../../styles.css");
        $str866$______index_html = SubLObjectFactory.makeString("../../index.html");
        $str867$______img_inCyc_beta_png = SubLObjectFactory.makeString("../../img/inCyc_beta.png");
        $list868 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("inCyc(beta)"));
        $list869 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FamousHuman")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GeopoliticalEntity")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EcologicalRegion")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("LandTopographicalFeature")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TouristAttraction")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InternationalOrganizationOfCountries")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ChemicalSubstanceType")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PhysiologicalConditionType")));
        $list870 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Terrorist")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PornStar")));
        $list871 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("OpenCycExcludedTerm")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CCFConstant")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("IndeterminateTerm")));
        $list872 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TOMES")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BACWORTHsEncyclopedia")));
        $const873$HPACMaterialFileFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HPACMaterialFileFn"));
        $list874 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("DEFAULT-STARTING-POINTS-FILENAME"), (SubLObject)SubLObjectFactory.makeString("data/fact-sheets/public/incyc/starting-points.tsv"), (SubLObject)SubLObjectFactory.makeKeyword("CATEGORY-LABELS"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.cons(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("collectionDocumentationDataSentence")), (SubLObject)SubLObjectFactory.makeString("Manually Written Notes")), (SubLObject)ConsesLow.cons(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("agentDocumentationDataSentence")), (SubLObject)SubLObjectFactory.makeString("Manually Written Notes"))), (SubLObject)SubLObjectFactory.makeKeyword("SORT-FN"), (SubLObject)SubLObjectFactory.makeSymbol("INCYC-HIGHER-PRIORITY-CATEGORY?"));
        $kw875$AKB = SubLObjectFactory.makeKeyword("AKB");
        $str876$analyst_knowledge_base = SubLObjectFactory.makeString("analyst-knowledge-base");
        $str877$___styles_css = SubLObjectFactory.makeString("../styles.css");
        $list878 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Terrorist")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerroristGroup")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerroristAct")));
        $list879 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CCFConstant")));
        $str880$data_fact_sheets_public_analyst_k = SubLObjectFactory.makeString("data/fact-sheets/public/analyst-knowledge-base/starting-points.tsv");
        $const881$TKBSourceSpindleCollectorMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt"));
        $str882$Public_Fact_Sheet_Updater_for_ = SubLObjectFactory.makeString("Public Fact Sheet Updater for ");
        $str883$_Fact_Sheets = SubLObjectFactory.makeString(" Fact Sheets");
        $sym884$ENSURE_ALL_PUBLIC_FACT_SHEETS = SubLObjectFactory.makeSymbol("ENSURE-ALL-PUBLIC-FACT-SHEETS");
        $str885$Ensuring_public_fact_sheets_are_i = SubLObjectFactory.makeString("Ensuring public fact sheets are in place...");
        $sym886$PUBLICIZE_FACT_SHEET_LINK = SubLObjectFactory.makeSymbol("PUBLICIZE-FACT-SHEET-LINK");
        $str887$_a_href__ = SubLObjectFactory.makeString("<a href=\"");
        $str888$__ = SubLObjectFactory.makeString("\">");
        $str889$Updating__A_public_fact_sheets_fi = SubLObjectFactory.makeString("Updating ~A public fact sheets file #~D of ~S");
        $str890$_public_fact_sheets_from_ = SubLObjectFactory.makeString(" public fact sheets from ");
        $str891$Couldn_t_find_term_for_id___S__ = SubLObjectFactory.makeString("Couldn't find term for id: ~S~%");
        $str892$Couldn_t_find_datafile___S = SubLObjectFactory.makeString("Couldn't find datafile: ~S");
        $str893$Writing_fact_sheet_starting_point = SubLObjectFactory.makeString("Writing fact-sheet starting-point data...");
        $str894$___ = SubLObjectFactory.makeString("../");
        $int895$1500 = SubLObjectFactory.makeInteger(1500);
        $sym896$CACHED_NUM_GAF_ARG_INDEX = SubLObjectFactory.makeSymbol("CACHED-NUM-GAF-ARG-INDEX");
        $sym897$_CACHED_NUM_GAF_ARG_INDEX_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*CACHED-NUM-GAF-ARG-INDEX-CACHING-STATE*");
        $str898$normal = SubLObjectFactory.makeString("normal");
        $str899$Dumping_fact_sheet_sentences_to_ = SubLObjectFactory.makeString("Dumping fact-sheet sentences to ");
        $str900$Data_for__S_has__D_categories_ = SubLObjectFactory.makeString("Data for ~S has ~D categories.");
        $list901 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("CATEGORY"), (SubLObject)SubLObjectFactory.makeSymbol("CATEGORY-DATA"));
        $str902$Doing__S___D_paragraphs___D_sente = SubLObjectFactory.makeString("Doing ~S: ~D paragraphs, ~D sentences");
        $sym903$_ = SubLObjectFactory.makeSymbol("+");
        $sym904$LENGTH = SubLObjectFactory.makeSymbol("LENGTH");
        $str905$This_paragraph_has__D_sentences_ = SubLObjectFactory.makeString("This paragraph has ~D sentences.");
        $list906 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("CYCL-SENTENCE"), (SubLObject)SubLObjectFactory.makeUninternedSymbol("VALUE"));
        $str907$Non_sentence__S_in__S_for__S = SubLObjectFactory.makeString("Non-sentence ~S in ~S for ~S");
        $str908$missing_from_parse_result___S__ = SubLObjectFactory.makeString("missing from parse result: ~S~%");
        $list909 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("DESIRED-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("DESIRED-CYCL"));
        $sym910$FACT_SHEETS_TERM_FROM_STRING_CONTAINS_ = SubLObjectFactory.makeSymbol("FACT-SHEETS-TERM-FROM-STRING-CONTAINS?");
        $list911 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Where is Osama bin Laden?"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Osama bin Laden"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("OsamaBinLaden")))))), (SubLObject)fact_sheets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Israel"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Israel"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Israel")))))), (SubLObject)fact_sheets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("In which cities have Hezbollah and Hamas carried out attacks?"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Hezbollah"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("LebaneseHizballah")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Hamas"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerroristOrganization-Hamas")))))), (SubLObject)fact_sheets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("When was George Bush elected in the United States?"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("George Bush"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GeorgeHWBush")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GeorgeWBush")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("the United States"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("UnitedStatesOfAmerica")))))), (SubLObject)fact_sheets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("22 mmhg"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("22 mmhg"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MM-Hg")), (SubLObject)SubLObjectFactory.makeInteger(22)))))), (SubLObject)fact_sheets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("22 millimeters of mercury"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("22 millimeters of mercury"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MM-Hg")), (SubLObject)SubLObjectFactory.makeInteger(22)))))), (SubLObject)fact_sheets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString(".22 millimeters of mercury"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString(".22 millimeters of mercury"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MM-Hg")), (SubLObject)SubLObjectFactory.makeDouble(0.22)))))), (SubLObject)fact_sheets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString(".3 cm"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString(".3 cm"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Centi")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Meter"))), (SubLObject)SubLObjectFactory.makeDouble(0.3)))))), (SubLObject)fact_sheets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("0.3 cm"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("0.3 cm"), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Centi")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Meter"))), (SubLObject)SubLObjectFactory.makeDouble(0.3)))))), (SubLObject)fact_sheets.T) });
    }
    
    public static final class $fact_sheet_update_term_prioritizer_native extends SubLStructNative
    {
        public SubLObject $stale_terms;
        public SubLObject $missing_terms;
        public SubLObject $up_to_date_terms;
        public SubLObject $thread;
        public SubLObject $should_sleepP;
        public SubLObject $verbosity;
        public SubLObject $domain_mt;
        public SubLObject $language_mt;
        public SubLObject $nice_level;
        public SubLObject $new_days;
        private static final SubLStructDeclNative structDecl;
        
        public $fact_sheet_update_term_prioritizer_native() {
            this.$stale_terms = (SubLObject)CommonSymbols.NIL;
            this.$missing_terms = (SubLObject)CommonSymbols.NIL;
            this.$up_to_date_terms = (SubLObject)CommonSymbols.NIL;
            this.$thread = (SubLObject)CommonSymbols.NIL;
            this.$should_sleepP = (SubLObject)CommonSymbols.NIL;
            this.$verbosity = (SubLObject)CommonSymbols.NIL;
            this.$domain_mt = (SubLObject)CommonSymbols.NIL;
            this.$language_mt = (SubLObject)CommonSymbols.NIL;
            this.$nice_level = (SubLObject)CommonSymbols.NIL;
            this.$new_days = (SubLObject)CommonSymbols.NIL;
        }
        
        public SubLStructDecl getStructDecl() {
            return (SubLStructDecl)$fact_sheet_update_term_prioritizer_native.structDecl;
        }
        
        public SubLObject getField2() {
            return this.$stale_terms;
        }
        
        public SubLObject getField3() {
            return this.$missing_terms;
        }
        
        public SubLObject getField4() {
            return this.$up_to_date_terms;
        }
        
        public SubLObject getField5() {
            return this.$thread;
        }
        
        public SubLObject getField6() {
            return this.$should_sleepP;
        }
        
        public SubLObject getField7() {
            return this.$verbosity;
        }
        
        public SubLObject getField8() {
            return this.$domain_mt;
        }
        
        public SubLObject getField9() {
            return this.$language_mt;
        }
        
        public SubLObject getField10() {
            return this.$nice_level;
        }
        
        public SubLObject getField11() {
            return this.$new_days;
        }
        
        public SubLObject setField2(final SubLObject value) {
            return this.$stale_terms = value;
        }
        
        public SubLObject setField3(final SubLObject value) {
            return this.$missing_terms = value;
        }
        
        public SubLObject setField4(final SubLObject value) {
            return this.$up_to_date_terms = value;
        }
        
        public SubLObject setField5(final SubLObject value) {
            return this.$thread = value;
        }
        
        public SubLObject setField6(final SubLObject value) {
            return this.$should_sleepP = value;
        }
        
        public SubLObject setField7(final SubLObject value) {
            return this.$verbosity = value;
        }
        
        public SubLObject setField8(final SubLObject value) {
            return this.$domain_mt = value;
        }
        
        public SubLObject setField9(final SubLObject value) {
            return this.$language_mt = value;
        }
        
        public SubLObject setField10(final SubLObject value) {
            return this.$nice_level = value;
        }
        
        public SubLObject setField11(final SubLObject value) {
            return this.$new_days = value;
        }
        
        static {
            structDecl = Structures.makeStructDeclNative((Class)$fact_sheet_update_term_prioritizer_native.class, fact_sheets.$sym655$FACT_SHEET_UPDATE_TERM_PRIORITIZER, fact_sheets.$sym656$FACT_SHEET_UPDATE_TERM_PRIORITIZER_P, fact_sheets.$list657, fact_sheets.$list658, new String[] { "$stale_terms", "$missing_terms", "$up_to_date_terms", "$thread", "$should_sleepP", "$verbosity", "$domain_mt", "$language_mt", "$nice_level", "$new_days" }, fact_sheets.$list659, fact_sheets.$list660, fact_sheets.$sym661$PPRINT_FSUT_PRIORITIZER);
        }
    }
    
    public static final class $fact_sheet_update_term_prioritizer_p$UnaryFunction extends UnaryFunction
    {
        public $fact_sheet_update_term_prioritizer_p$UnaryFunction() {
            super(SubLTranslatedFile.extractFunctionNamed("FACT-SHEET-UPDATE-TERM-PRIORITIZER-P"));
        }
        
        public SubLObject processItem(final SubLObject arg1) {
            return fact_sheets.fact_sheet_update_term_prioritizer_p(arg1);
        }
    }
}

/*

	Total time: 16327 ms
	 synthetic 
*/