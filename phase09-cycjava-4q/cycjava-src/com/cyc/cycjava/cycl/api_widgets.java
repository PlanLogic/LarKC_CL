package com.cyc.cycjava.cycl;

import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDecl;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.CommonSymbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDeclNative;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLStructNative;
import com.cyc.cycjava.cycl.cyc_testing.generic_testing;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.visitation;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLSpecialOperatorDeclarations;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high;
import com.cyc.tool.subl.util.SubLFiles;
import java.util.Map;
import java.util.Iterator;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Environment;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time;
import com.cyc.cycjava.cycl.inference.harness.inference_parameters;
import com.cyc.cycjava.cycl.inference.kb_query;
import com.cyc.cycjava.cycl.inference.harness.forward;
import java.util.ArrayList;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic;
import com.cyc.cycjava.cycl.inference.harness.inference_kernel;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_methods;
import com.cyc.cycjava.cycl.sbhl.sbhl_links;
import com.cyc.cycjava.cycl.sbhl.sbhl_graphs;
import com.cyc.cycjava.cycl.sbhl.sbhl_macros;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_paranoia;
import com.cyc.cycjava.cycl.sbhl.sbhl_search_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_vars;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Guids;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads;
import com.cyc.cycjava.cycl.inference.ask_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Eval;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.compatibility;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public final class api_widgets extends SubLTranslatedFile
{
    public static final SubLFile me;
    public static final String myName = "com.cyc.cycjava.cycl.api_widgets";
    public static final String myFingerPrint = "e880f956455fecea3332fe3c1dbcc37eb54ecb12b378d0c14f7132a19b11921e";
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 789L)
    public static SubLSymbol $dtp_foo$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 812L)
    public static SubLSymbol $a_foo$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 1237L)
    private static SubLSymbol $api_widget_session_resource_lock$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 1414L)
    private static SubLSymbol $api_widget_session_resource_map$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 4895L)
    private static SubLSymbol $api_widgets_get_collection_instances_arg_cooccurrence$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 5038L)
    private static SubLSymbol $get_collection_instances_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 9088L)
    private static SubLSymbol $ws_instance_dict$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 11717L)
    private static SubLSymbol $get_ws_instance_iterator_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 12295L)
    private static SubLSymbol $ws_spec_dict$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15116L)
    private static SubLSymbol $get_ws_spec_iterator_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15788L)
    private static SubLSymbol $get_isas_for_ws_int_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 17552L)
    private static SubLSymbol $get_genls_for_ws_int_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 23333L)
    private static SubLSymbol $default_nl_preds_for_type_list_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 23660L)
    private static SubLSymbol $get_instances_as_renderings_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 26168L)
    public static SubLSymbol $sparql_endpoint_browser_format_string$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 28282L)
    public static SubLSymbol $mini_fact_sheet_to_fact_sheet_link_text$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 35532L)
    private static SubLSymbol $get_example_instances_as_renderings_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 36132L)
    private static SubLSymbol $get_salient_exemplars_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 43442L)
    private static SubLSymbol $get_reformulation_specification_from_kb_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 43964L)
    public static SubLSymbol $fet_evaluation_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 56666L)
    public static SubLSymbol $future_assertion_message_string$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 56763L)
    private static SubLSymbol $future_assertion_counter$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 57757L)
    private static SubLSymbol $microtheory_indexical_referent_current_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 57847L)
    private static SubLSymbol $microtheory_mentioning_constructs$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 61870L)
    private static SubLSymbol $parse_sentence_context$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 61985L)
    private static SubLSymbol $parse_arg_pos$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 62028L)
    private static SubLSymbol $parse_constraining_collection$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 62087L)
    private static SubLSymbol $parse_domain_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 62132L)
    private static SubLSymbol $parse_filter_fn$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 62544L)
    private static SubLSymbol $api_widgets_strip_nl_tagsP$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 65572L)
    public static SubLSymbol $api_widget_return_new_cycls_separatelyP$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 79513L)
    private static SubLSymbol $get_extended_cycls_for_string_timeout$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 79661L)
    private static SubLSymbol $get_coerced_cycls_timeout$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 79780L)
    private static SubLSymbol $nl_coercion_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 79851L)
    public static SubLSymbol $trace_get_cycls_for_string_escalatingP$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 87855L)
    private static SubLSymbol $get_extended_cycls_for_string_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 88340L)
    private static SubLSymbol $get_coerced_cycls_for_term_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 90296L)
    private static SubLSymbol $constrained_cycls_from_generation_cardinality_cutoff$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 91518L)
    private static SubLSymbol $constrained_cycls_for_regular_expression_cardinality_cutoff$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 107070L)
    public static SubLSymbol $template_topic_match_missing_term_variable$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 109744L)
    private static SubLSymbol $use_topic_defining_mt_when_passed_everything_pscP$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 109949L)
    private static SubLSymbol $everything_psc_dwimmed_awayP$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 137020L)
    private static SubLSymbol $get_possible_renderers_for_followup_int_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 146048L)
    private static SubLSymbol $fet_categorized_source_pred$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 146964L)
    private static SubLSymbol $fet_categorized_sources$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 147175L)
    private static SubLSymbol $fet_empty_source_dictionary$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 156897L)
    private static SubLSymbol $collection_creation_template_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 166850L)
    private static SubLSymbol $term_qua_inference_answer_pattern$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 167815L)
    private static SubLSymbol $owl_exportable_definitional_terms$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 170445L)
    private static SubLSymbol $owl_exportable_definitional_term_set$;
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 170624L)
    public static SubLSymbol $allow_expanded_rules_as_owl_export_candidatesP$;
    private static final SubLSymbol $sym0$FOO;
    private static final SubLSymbol $sym1$FOO_P;
    private static final SubLList $list2;
    private static final SubLList $list3;
    private static final SubLList $list4;
    private static final SubLList $list5;
    private static final SubLSymbol $sym6$DEFAULT_STRUCT_PRINT_FUNCTION;
    private static final SubLSymbol $sym7$FOO_PRINT_FUNCTION_TRAMPOLINE;
    private static final SubLList $list8;
    private static final SubLSymbol $sym9$FOO_BAR;
    private static final SubLSymbol $sym10$_CSETF_FOO_BAR;
    private static final SubLSymbol $kw11$BAR;
    private static final SubLString $str12$Invalid_slot__S_for_construction_;
    private static final SubLSymbol $kw13$BEGIN;
    private static final SubLSymbol $sym14$MAKE_FOO;
    private static final SubLSymbol $kw15$SLOT;
    private static final SubLSymbol $kw16$END;
    private static final SubLSymbol $sym17$VISIT_DEFSTRUCT_OBJECT_FOO_METHOD;
    private static final SubLSymbol $sym18$GET_CYC_ID_FOR_WEB_ID;
    private static final SubLSymbol $sym19$STRINGP;
    private static final SubLSymbol $sym20$RELEVANT_MT_IS_ANY_MT;
    private static final SubLObject $const21$InferencePSC;
    private static final SubLObject $const22$Cyclist;
    private static final SubLString $str23$__A__is_not_a_known___Cyclist___;
    private static final SubLString $str24$Api_Widget_Session_Resource_Lock;
    private static final SubLSymbol $sym25$_API_WIDGET_SESSION_RESOURCE_MAP_;
    private static final SubLSymbol $sym26$REGISTER_API_SESSION_CLEANUP_FORM;
    private static final SubLSymbol $kw27$CLEARED;
    private static final SubLSymbol $sym28$CATCH_ERROR_MESSAGE_HANDLER;
    private static final SubLString $str29$Clean_up_form__A_for_session__A_e;
    private static final SubLSymbol $sym30$DECLARE_SESSION_SYMBOL;
    private static final SubLSymbol $sym31$PROGN;
    private static final SubLSymbol $sym32$MAKUNBOUND;
    private static final SubLSymbol $sym33$FIND_SYMBOL;
    private static final SubLSymbol $sym34$UNINTERN;
    private static final SubLSymbol $sym35$GET_COLLECTION_INSTANCES;
    private static final SubLSymbol $sym36$RELEVANT_MT_IS_EQ;
    private static final SubLSymbol $sym37$_GET_COLLECTION_INSTANCES_CACHING_STATE_;
    private static final SubLInteger $int38$256;
    private static final SubLList $list39;
    private static final SubLSymbol $sym40$COMPACT_HL_EXTERNAL_ID_STRING;
    private static final SubLSymbol $sym41$FIND_FOR_WS;
    private static final SubLString $str42$externalId;
    private static final SubLString $str43$cycl;
    private static final SubLString $str44$_;
    private static final SubLList $list45;
    private static final SubLSymbol $sym46$GET_INSTANCES_FOR_WS;
    private static final SubLObject $const47$EverythingPSC;
    private static final SubLInteger $int48$250;
    private static final SubLSymbol $kw49$INCOMPLETE;
    private static final SubLSymbol $sym50$_X;
    private static final SubLObject $const51$assertedSentence;
    private static final SubLObject $const52$isa;
    private static final SubLSymbol $kw53$MAX_NUMBER;
    private static final SubLList $list54;
    private static final SubLSymbol $sym55$GET_WS_INSTANCE_ITERATOR;
    private static final SubLSymbol $sym56$_GET_WS_INSTANCE_ITERATOR_CACHING_STATE_;
    private static final SubLSymbol $sym57$GET_SPECS_FOR_WS;
    private static final SubLObject $const58$genls;
    private static final SubLSymbol $kw59$EMPTY_RESULT;
    private static final SubLSymbol $sym60$GET_WS_SPEC_ITERATOR;
    private static final SubLSymbol $sym61$_GET_WS_SPEC_ITERATOR_CACHING_STATE_;
    private static final SubLSymbol $sym62$GET_ISAS_FOR_WS;
    private static final SubLSymbol $sym63$GET_ISAS_FOR_WS_INT;
    private static final SubLList $list64;
    private static final SubLSymbol $sym65$_GET_ISAS_FOR_WS_INT_CACHING_STATE_;
    private static final SubLSymbol $sym66$CLEAR_GET_ISAS_FOR_WS_INT;
    private static final SubLSymbol $sym67$LISTP;
    private static final SubLSymbol $sym68$APPEND;
    private static final SubLSymbol $sym69$ALL_GENLS_IN_MT;
    private static final SubLSymbol $sym70$GET_GENLS_FOR_WS;
    private static final SubLSymbol $sym71$GET_GENLS_FOR_WS_INT;
    private static final SubLSymbol $sym72$_GET_GENLS_FOR_WS_INT_CACHING_STATE_;
    private static final SubLSymbol $sym73$CLEAR_GET_GENLS_FOR_WS_INT;
    private static final SubLSymbol $sym74$GET_INSTANCES_IN_NL;
    private static final SubLSymbol $sym75$COLLECTION_P;
    private static final SubLSymbol $sym76$POSSIBLY_MT_P;
    private static final SubLSymbol $kw77$NEW;
    private static final SubLSymbol $sym78$STRING_LESSP;
    private static final SubLSymbol $sym79$FIRST;
    private static final SubLSymbol $kw80$ALL_INSTANTIATIONS;
    private static final SubLSymbol $kw81$NONE;
    private static final SubLSymbol $sym82$SET_OR_COLLECTION_;
    private static final SubLSymbol $sym83$GET_INSTANCES_AS_RENDERINGS_NEW;
    private static final SubLSymbol $kw84$ANY_MT;
    private static final SubLSymbol $kw85$DEFAULT;
    private static final SubLSymbol $kw86$LOCAL_CHANGE;
    private static final SubLSymbol $kw87$UPWARD_CLOSURE;
    private static final SubLSymbol $kw88$DOWNWARD_CLOSURE;
    private static final SubLSymbol $sym89$RELEVANT_MT_IS_SPEC_MT;
    private static final SubLSymbol $sym90$DEFAULT_NL_PREDS_FOR_TYPE_LIST;
    private static final SubLSymbol $sym91$_DEFAULT_NL_PREDS_FOR_TYPE_LIST_CACHING_STATE_;
    private static final SubLSymbol $sym92$GET_INSTANCES_AS_RENDERINGS;
    private static final SubLSymbol $sym93$PPH_LIST_ITEM_COMPARATOR;
    private static final SubLSymbol $sym94$_GET_INSTANCES_AS_RENDERINGS_CACHING_STATE_;
    private static final SubLSymbol $sym95$GET_TERM_LIST_AS_RENDERINGS;
    private static final SubLObject $const96$nonPlural_Generic;
    private static final SubLSymbol $sym97$GET_TERM_LIST_AS_RENDERINGS_WITH_FACT_SHEETS;
    private static final SubLSymbol $kw98$MINI;
    private static final SubLList $list99;
    private static final SubLList $list100;
    private static final SubLString $str101$http____A__D_browse_uri__A_action;
    private static final SubLSymbol $sym102$GET_EXTERNAL_TERM_BROWSER_URL;
    private static final SubLSymbol $sym103$_MT;
    private static final SubLSymbol $sym104$_SERVER;
    private static final SubLSymbol $sym105$_PORT;
    private static final SubLObject $const106$and;
    private static final SubLObject $const107$mappingMt;
    private static final SubLObject $const108$ist;
    private static final SubLObject $const109$serverOfSKS;
    private static final SubLList $list110;
    private static final SubLObject $const111$portNumberForSKS;
    private static final SubLObject $const112$BaseKB;
    private static final SubLList $list113;
    private static final SubLList $list114;
    private static final SubLSymbol $sym115$GET_TERM_LIST_AS_RENDERINGS_WITH_FACT_SHEETS_STRIPPED;
    private static final SubLString $str116$_Fact_Sheet_;
    private static final SubLList $list117;
    private static final SubLSymbol $sym118$CONVERT_TERM_LIST_TO_RENDERINGS_FOR_JAVA;
    private static final SubLSymbol $sym119$CONVERT_TERM_LIST_TO_RENDERINGS_FOR_JAVA_INT;
    private static final SubLSymbol $sym120$NULL;
    private static final SubLSymbol $kw121$REQUIRED;
    private static final SubLSymbol $kw122$PREFERRED;
    private static final SubLSymbol $kw123$HTML;
    private static final SubLSymbol $sym124$SALIENT_INSTANTIATION_EXEMPLARS;
    private static final SubLSymbol $sym125$_;
    private static final SubLSymbol $sym126$NUM_INDEX;
    private static final SubLSymbol $sym127$GET_EXAMPLE_INSTANCES_AS_RENDERINGS_NEW;
    private static final SubLSymbol $sym128$GET_EXAMPLE_INSTANCES_AS_RENDERINGS;
    private static final SubLSymbol $sym129$_GET_EXAMPLE_INSTANCES_AS_RENDERINGS_CACHING_STATE_;
    private static final SubLSymbol $sym130$GET_SALIENT_EXEMPLARS;
    private static final SubLSymbol $sym131$_GET_SALIENT_EXEMPLARS_CACHING_STATE_;
    private static final SubLSymbol $sym132$GET_COLLECTION_EXTENT_ESTIMATES;
    private static final SubLSymbol $sym133$RELEVANT_MT_IS_GENL_MT;
    private static final SubLInteger $int134$500;
    private static final SubLObject $const135$Set_Mathematical;
    private static final SubLSymbol $sym136$GET_COLLECTION_EXTENT_ESTIMATES_NEW;
    private static final SubLSymbol $sym137$CREATE_NEW_INSTANCE_FROM_TEMPLATE;
    private static final SubLString $str138$;
    private static final SubLSymbol $sym139$KILL_CONSTANT;
    private static final SubLSymbol $sym140$KILL_FORT;
    private static final SubLSymbol $sym141$FORT_P;
    private static final SubLList $list142;
    private static final SubLSymbol $sym143$_WHAT;
    private static final SubLList $list144;
    private static final SubLSymbol $sym145$GET_REFORMULATION_SPECIFICATION_FROM_KB;
    private static final SubLSymbol $sym146$_GET_REFORMULATION_SPECIFICATION_FROM_KB_CACHING_STATE_;
    private static final SubLSymbol $sym147$REFORMULATE_UNKNOWN_FET_TERM;
    private static final SubLObject $const148$FET_UnknownTermReformulation;
    private static final SubLObject $const149$FETReformulatorRulesMt;
    private static final SubLObject $const150$TKBEvaluatedSentencesMt;
    private static final SubLSymbol $sym151$MAKE_FET_EVALUATION_ASSERTION;
    private static final SubLSymbol $sym152$CYCL_SENTENCE_P;
    private static final SubLSymbol $sym153$FORT_OR_NAUT_P;
    private static final SubLSymbol $sym154$PREDICATE_;
    private static final SubLString $str155$EvaluationOfAssertionByOnFn;
    private static final SubLString $str156$Couldn_t_find_constant___Evaluati;
    private static final SubLObject $const157$evaluationOutputSentences;
    private static final SubLString $str158$Couldn_t_remove_all_pre_existing_;
    private static final SubLString $str159$Evaluation;
    private static final SubLList $list160;
    private static final SubLString $str161$FET;
    private static final SubLSymbol $sym162$_EVALUATION;
    private static final SubLList $list163;
    private static final SubLList $list164;
    private static final SubLList $list165;
    private static final SubLSymbol $sym166$ADD_OR_EDIT_ASSERTION_VERBOSE;
    private static final SubLSymbol $sym167$ADD_OR_EDIT_ASSERTION;
    private static final SubLSymbol $sym168$EL_FORMULA_P;
    private static final SubLSymbol $sym169$CYCL_FORMULA_P;
    private static final SubLString $str170$OLD____NEW__nothing_to_be_done_;
    private static final SubLObject $const171$futureAssertion;
    private static final SubLSymbol $sym172$VALID_ASSERTION_;
    private static final SubLString $str173$Assertion_deemed_invalid_;
    private static final SubLString $str174$No_such_sentence_to_unassert_;
    private static final SubLString $str175$Couldn_t_kill_narts__;
    private static final SubLSymbol $sym176$SKOLEM_NART_;
    private static final SubLString $str177$Future_assertion_only_possibility;
    private static final SubLSymbol $sym178$_FUTURE_ASSERTION_COUNTER_;
    private static final SubLString $str179$unknown_reason;
    private static final SubLString $str180$__D__replace__S_with__S__Reason__;
    private static final SubLString $str181$__D___S_failed__Reason___A_;
    private static final SubLList $list182;
    private static final SubLList $list183;
    private static final SubLSymbol $kw184$IGNORE_ERRORS_TARGET;
    private static final SubLSymbol $sym185$IGNORE_ERRORS_HANDLER;
    private static final SubLSymbol $sym186$CAE_APPLICABLE_TEMPLATE_TOPICS_FOR_TERM;
    private static final SubLString $str187$54e34312_5181_11d7_87a9_0002b3620;
    private static final SubLObject $const188$CAEUsableFETTemplateTopic;
    private static final SubLSymbol $sym189$GET_CAE_TEMPLATE_TOPICS;
    private static final SubLObject $const190$titleForFormulaTemplateType_Strin;
    private static final SubLString $str191$_S;
    private static final SubLSymbol $sym192$STRING_;
    private static final SubLList $list193;
    private static final SubLSymbol $sym194$GATHER_TEMPORAL_CONCEPTS_FOR_CAE;
    private static final SubLSymbol $sym195$CHLMT_P;
    private static final SubLList $list196;
    private static final SubLObject $const197$TemporallyExtendedThing;
    private static final SubLSymbol $sym198$GET_SHARED_COMMENTS;
    private static final SubLSymbol $sym199$RELEVANT_MT_IS_EVERYTHING;
    private static final SubLObject $const200$sharedNotes;
    private static final SubLObject $const201$comment;
    private static final SubLList $list202;
    private static final SubLSymbol $sym203$CLET;
    private static final SubLSymbol $sym204$_PARSE_SENTENCE_CONTEXT_;
    private static final SubLSymbol $sym205$_PARSE_ARG_POS_;
    private static final SubLSymbol $sym206$_PARSE_CONSTRAINING_COLLECTION_;
    private static final SubLSymbol $sym207$_PARSE_DOMAIN_MT_;
    private static final SubLSymbol $sym208$_PARSE_FILTER_FN_;
    private static final SubLObject $const209$MtUnionFn;
    private static final SubLObject $const210$EnglishMt;
    private static final SubLObject $const211$TKBSourceSpindleCollectorMt;
    private static final SubLList $list212;
    private static final SubLObject $const213$SpecsFn;
    private static final SubLString $str214$__;
    private static final SubLSymbol $sym215$RKF_FILTER_IRRELEVANT_TERMS;
    private static final SubLSymbol $sym216$_API_WIDGET_RETURN_NEW_CYCLS_SEPARATELY__;
    private static final SubLSymbol $sym217$GET_CONSTRAINED_CYCL_FOR_STRING;
    private static final SubLSymbol $sym218$ISA_COLLECTION_;
    private static final SubLSymbol $sym219$FILTER_CONSTRAINED_CYCLS;
    private static final SubLSymbol $sym220$CYCL_EXPRESSION_P;
    private static final SubLString $str221$Got_invalid_denotation_s__for__S_;
    private static final SubLSymbol $sym222$STUB_TERM_WITH_NAME_AND_TYPE_P;
    private static final SubLSymbol $kw223$TRANSFORMATION_LIMIT_EXCEEDED;
    private static final SubLSymbol $sym224$INDEXICAL_REFERENT_TERM_P;
    private static final SubLSymbol $sym225$CYC_INDEXICAL_REFERENT;
    private static final SubLSymbol $sym226$CONVERT_STRING_CONSTRAINT_TUPLE_TO_DENOTATION;
    private static final SubLObject $const227$CharacterString;
    private static final SubLObject $const228$Predicate;
    private static final SubLObject $const229$PredicateNamedFn;
    private static final SubLObject $const230$ProperSubcollectionNamedFn_Ternar;
    private static final SubLObject $const231$InstanceNamedFn_Ternary;
    private static final SubLList $list232;
    private static final SubLObject $const233$EnglishTypeCoercionDataMt;
    private static final SubLSymbol $sym234$GET_CYCLS_FOR_STRING_ESCALATING;
    private static final SubLSymbol $kw235$TRUE;
    private static final SubLSymbol $kw236$CASE_INSENSITIVE;
    private static final SubLSymbol $kw237$FALSE;
    private static final SubLSymbol $kw238$REGULAR_EXPRESSIONS;
    private static final SubLString $str239$________regular_expressions__A__;
    private static final SubLSymbol $kw240$ON;
    private static final SubLSymbol $kw241$OFF;
    private static final SubLList $list242;
    private static final SubLString $str243$_________typed_denots_of_string__;
    private static final SubLSymbol $kw244$DENOT;
    private static final SubLList $list245;
    private static final SubLString $str246$__________typed_denots_of_string_;
    private static final SubLString $str247$___________parse_dates_and_number;
    private static final SubLString $str248$____________parse_noun_compound_w;
    private static final SubLString $str249$_____________parse_noun_compound_;
    private static final SubLString $str250$_____________get_constrained_exte;
    private static final SubLObject $const251$EnglishSenseExtensionDataMt;
    private static final SubLString $str252$______________get_coerced_cycls_f;
    private static final SubLString $str253$_______________get_coerced_cycls_;
    private static final SubLString $str254$_______________get_constrained_cy;
    private static final SubLString $str255$_______________get_constrained_cy;
    private static final SubLSymbol $sym256$PARSING_REWRITE_OF_;
    private static final SubLSymbol $sym257$GET_EXTENDED_CYCLS_FOR_STRING;
    private static final SubLSymbol $kw258$REF;
    private static final SubLObject $const259$senseExtensionForNameString;
    private static final SubLSymbol $kw260$MAX_TIME;
    private static final SubLList $list261;
    private static final SubLSymbol $sym262$_GET_EXTENDED_CYCLS_FOR_STRING_CACHING_STATE_;
    private static final SubLInteger $int263$300;
    private static final SubLInteger $int264$100;
    private static final SubLSymbol $sym265$GET_COERCED_CYCLS_FOR_TERM;
    private static final SubLObject $const266$typeCoerceableToType;
    private static final SubLList $list267;
    private static final SubLSymbol $sym268$_GET_COERCED_CYCLS_FOR_TERM_CACHING_STATE_;
    private static final SubLObject $const269$SententialConstituent;
    private static final SubLObject $const270$nounStrings;
    private static final SubLSymbol $kw271$BREADTH;
    private static final SubLSymbol $kw272$QUEUE;
    private static final SubLSymbol $kw273$STACK;
    private static final SubLSymbol $sym274$RELEVANT_SBHL_TV_IS_GENERAL_TV;
    private static final SubLSymbol $kw275$ERROR;
    private static final SubLString $str276$_A_is_not_a__A;
    private static final SubLSymbol $sym277$SBHL_TRUE_TV_P;
    private static final SubLSymbol $kw278$CERROR;
    private static final SubLString $str279$continue_anyway;
    private static final SubLSymbol $kw280$WARN;
    private static final SubLString $str281$_A_is_not_a_valid__sbhl_type_erro;
    private static final SubLString $str282$_A_is_neither_SET_P_nor_LISTP_;
    private static final SubLString $str283$attempting_to_bind_direction_link;
    private static final SubLList $list284;
    private static final SubLString $str285$Node__a_does_not_pass_sbhl_type_t;
    private static final SubLInteger $int286$5000000;
    private static final SubLSymbol $sym287$GET_CONSTRAINED_CYCLS_FOR_REGULAR_EXPRESSION;
    private static final SubLList $list288;
    private static final SubLString $str289$Error__A___A__compiling_regular_e;
    private static final SubLSymbol $sym290$_NAME;
    private static final SubLObject $const291$termStrings;
    private static final SubLSymbol $kw292$PROBLEM_STORE;
    private static final SubLSymbol $kw293$ANSWER_LANGUAGE;
    private static final SubLSymbol $kw294$HL;
    private static final SubLList $list295;
    private static final SubLObject $const296$knownSentence;
    private static final SubLObject $const297$unknownSentence;
    private static final SubLObject $const298$regexStringMatch_CaseInsensitive;
    private static final SubLObject $const299$regexStringMatch;
    private static final SubLSymbol $sym300$FILTER_PHRASE_TERM_LIST_BY_CONSTRAINT_LIST;
    private static final SubLList $list301;
    private static final SubLSymbol $sym302$FILTER_CYCL_TERM_BY_CONSTRAINT_LIST;
    private static final SubLObject $const303$TheSet;
    private static final SubLSymbol $sym304$AUTO_COMPLETE_CONSTRAINED;
    private static final SubLSymbol $sym305$AUTO_COMPLETE_TERM_QUICK;
    private static final SubLSymbol $sym306$INTEGERP;
    private static final SubLObject $const307$plural;
    private static final SubLObject $const308$gerund_Plural;
    private static final SubLSymbol $sym309$AUTO_COMPLETE_CONSTRAINED_NEW;
    private static final SubLObject $const310$singular;
    private static final SubLSymbol $sym311$GET_STRING_FROM_JAVALIST_GROUP;
    private static final SubLSymbol $sym312$FIND_TEMPLATE_TOPIC_MATCHES_FOR_CONSTRAINT;
    private static final SubLSymbol $sym313$POSSIBLY_HLMT_P;
    private static final SubLSymbol $sym314$PROPERTY_LIST_P;
    private static final SubLList $list315;
    private static final SubLSymbol $sym316$GET_TEMPLATE_TOPIC_ASSERTIONS_FOR_MATCH_IN_XML;
    private static final SubLSymbol $sym317$FORMULA_TEMPLATE_TOPIC_TYPE_;
    private static final SubLString $str318$knownAssertionsForTemplateTopic;
    private static final SubLString $str319$http___www_opencyc_org_xml_knownA;
    private static final SubLSymbol $sym320$SET_P;
    private static final SubLSymbol $sym321$FORMULA_TEMPLATE_LOAD_TEMPLATE_GRAPH_MEMOIZED;
    private static final SubLSymbol $sym322$ASSERT_CANDIDATE_REPLACEMENTS_FOR_POSITION;
    private static final SubLObject $const323$QueryLibrary_QuerySavingTemplate;
    private static final SubLObject $const324$candidateReplacementForPosition;
    private static final SubLSymbol $sym325$CREATE_MINIMAL_FORMULA_TEMPLATE_WITH_QUERY;
    private static final SubLObject $const326$formulaTemplateGloss;
    private static final SubLObject $const327$microtheoryParameterValueInSpecif;
    private static final SubLObject $const328$folderContainsResource;
    private static final SubLString $str329$All_KB_Operations_completed_succe;
    private static final SubLSymbol $sym330$CREATE_MINIMAL_FORMULA_TEMPLATE_WITH_QUERY_INCLUDE_INFERENCE;
    private static final SubLSymbol $sym331$ASSERT_UPDATED_INFERENCE_PARAMETERS_FOR_QUERY;
    private static final SubLObject $const332$QueryLibraryQueryCreationTemplate;
    private static final SubLObject $const333$creationTemplateAllowableRules;
    private static final SubLSymbol $sym334$COMBINE_QUERY_PROPERTIES;
    private static final SubLSymbol $sym335$EDIT_QUERY_GLOSS;
    private static final SubLObject $const336$TimePoint;
    private static final SubLObject $const337$MtSpace;
    private static final SubLObject $const338$MtTimeWithGranularityDimFn;
    private static final SubLObject $const339$IntervalStartedByFn;
    private static final SubLString $str340$Failed_to_temporally_qualify__S__;
    private static final SubLString $str341$Failed_to_assert_new_gloss__A__A_;
    private static final SubLString $str342$Gloss_edit_completed_successfully;
    private static final SubLObject $const343$IntervalEndedByFn_Inclusive;
    private static final SubLObject $const344$TimeIntervalInclusiveFn;
    private static final SubLObject $const345$Now;
    private static final SubLList $list346;
    private static final SubLSymbol $sym347$CREATE_NEW_FORMULA_TEMPLATE_WITH_QUERY;
    private static final SubLString $str348$ClonedQuery;
    private static final SubLList $list349;
    private static final SubLObject $const350$UniversalVocabularyMt;
    private static final SubLObject $const351$quotedIsa;
    private static final SubLObject $const352$TestQueryFn;
    private static final SubLList $list353;
    private static final SubLObject $const354$TemplateFromTestQueryFn;
    private static final SubLList $list355;
    private static final SubLSymbol $sym356$MAKE_MULTIPLE_ASSERTIONS_TO_MT;
    private static final SubLSymbol $sym357$API_WIDGETS_ASSERT_WFF_NOW;
    private static final SubLSymbol $sym358$KE_ASSERT_NOW;
    private static final SubLString $str359$Error_asserting_sentence___A__Got;
    private static final SubLString $str360$Got_bad_CycL_sentence___A__becaus;
    private static final SubLSymbol $kw361$STRENGTH;
    private static final SubLSymbol $kw362$DIRECTION;
    private static final SubLSymbol $sym363$_EXIT;
    private static final SubLSymbol $sym364$MAKE_MULTIPLE_ASSERTIONS_TO_MT_WITH_CREATION_TEMPLATE;
    private static final SubLSymbol $sym365$MAIL_TO_USER;
    private static final SubLString $str366$Unable_to_find_address_for__A;
    private static final SubLSymbol $sym367$MAIL_TO_USER_WITH_CONTENT_TYPE;
    private static final SubLSymbol $sym368$CYCLIST_DEFINED_INSTANCES_OF_COL;
    private static final SubLInteger $int369$75;
    private static final SubLSymbol $sym370$CYCLIST_DEFINED_SPECS_OF_COL;
    private static final SubLSymbol $sym371$GET_TEMPLATE_TOPIC_IN_XML;
    private static final SubLObject $const372$definingMt;
    private static final SubLString $str373$templateTopic;
    private static final SubLString $str374$http___www_opencyc_org_xml_templa;
    private static final SubLSymbol $sym375$GET_FORMULA_TEMPLATE_IN_XML;
    private static final SubLString $str376$formulaTemplate;
    private static final SubLObject $const377$softwareParameterValueInSpecifica;
    private static final SubLObject $const378$KEInteractionResourceTestMt;
    private static final SubLSymbol $sym379$GET_CYCL_QUERY_IN_XML_FROM_DEFAULT_MT;
    private static final SubLSymbol $sym380$GET_CYCL_QUERY_IN_XML;
    private static final SubLString $str381$cyclQuery;
    private static final SubLString $str382$http___www_opencyc_org_xml_cyclQu;
    private static final SubLSymbol $sym383$GET_FORMULA_TEMPLATE_FOR_FACT_OR_QUERY_IN_XML_FROM_DEFAULT_MT;
    private static final SubLSymbol $sym384$GET_FORMULA_TEMPLATE_FOR_FACT_OR_QUERY_IN_XML;
    private static final SubLSymbol $sym385$PROCESS_FEEDBACK;
    private static final SubLObject $const386$createABugzillaBugReport;
    private static final SubLString $str387$_response_for_query__;
    private static final SubLString $str388$Query__;
    private static final SubLString $str389$Query_Formula__;
    private static final SubLString $str390$Bindings__;
    private static final SubLString $str391$User_Comments__;
    private static final SubLString $str392$Java_Log__;
    private static final SubLString $str393$___;
    private static final SubLString $str394$__;
    private static final SubLObject $const395$bugzillaProductForProject;
    private static final SubLObject $const396$CycorpInternalBugzillaBugReport;
    private static final SubLSymbol $sym397$GET_POSSIBLE_RENDERERS_FOR_FOLLOWUP;
    private static final SubLSymbol $kw398$INTERROGATIVE;
    private static final SubLSymbol $sym399$GET_POSSIBLE_RENDERERS_FOR_FOLLOWUP_INT;
    private static final SubLList $list400;
    private static final SubLSymbol $sym401$_GET_POSSIBLE_RENDERERS_FOR_FOLLOWUP_INT_CACHING_STATE_;
    private static final SubLSymbol $sym402$UNIQUIFY_VARIABLES_ACROSS_TWO_SENTENCES;
    private static final SubLSymbol $sym403$CHANGE_VARIABLE_NAMES;
    private static final SubLSymbol $sym404$GENERALITY_SORT_LAMBDA;
    private static final SubLSymbol $sym405$GET_POSSIBLE_MERGED_QUERIES;
    private static final SubLSymbol $sym406$GET_POSSIBLE_MERGED_QUERIES_WRT_VAR;
    private static final SubLSymbol $sym407$GET_SOURCE_CONCEPTUAL_WORKS_FOR_PROJECT;
    private static final SubLList $list408;
    private static final SubLSymbol $kw409$PARAPHRASED_CW_TYPE;
    private static final SubLSymbol $kw410$ANYTHING;
    private static final SubLSymbol $sym411$PARAPHRASED_SOURCE_SOURCE;
    private static final SubLString $str412$sourceOfTypeForProject;
    private static final SubLList $list413;
    private static final SubLSymbol $sym414$ADD_SOURCE_OF_TYPE_FOR_PROJECT;
    private static final SubLSymbol $sym415$REMOVE_SOURCE_OF_TYPE_FOR_PROJECT;
    private static final SubLSymbol $sym416$_FET_CATEGORIZED_SOURCES_;
    private static final SubLSymbol $kw417$UNINITIALIZED;
    private static final SubLSymbol $kw418$NOT_FOUND;
    private static final SubLString $str419$Initializing_Fact_Entry_Tool_sour;
    private static final SubLObject $const420$Project;
    private static final SubLSymbol $kw421$GAF;
    private static final SubLList $list422;
    private static final SubLSymbol $sym423$_CW;
    private static final SubLSymbol $sym424$_CW_TYPE;
    private static final SubLObject $const425$projectSource_FactEntry;
    private static final SubLList $list426;
    private static final SubLList $list427;
    private static final SubLList $list428;
    private static final SubLSymbol $sym429$GET_LISP_IMPLEMENTATION_TYPE;
    private static final SubLSymbol $sym430$GET_LISP_IMPLEMENTATION_VERSION;
    private static final SubLSymbol $sym431$RECONSIDER_TEMPLATE_FORMULA_USING_TMS;
    private static final SubLString $str432$_ASSERTION_SENTENCE_908234;
    private static final SubLObject $const433$assertionSentence;
    private static final SubLSymbol $sym434$RTV_WIZARD_DEFAULT_PREDICATES;
    private static final SubLSymbol $sym435$_Y;
    private static final SubLList $list436;
    private static final SubLList $list437;
    private static final SubLSymbol $sym438$COLLECTION_CREATION_TEMPLATE;
    private static final SubLString $str439$8665a79e_80ca_11db_8000_0020ed7aa;
    private static final SubLSymbol $sym440$_COLLECTION_CREATION_TEMPLATE_CACHING_STATE_;
    private static final SubLSymbol $sym441$CREATE_COLLECTION_FROM_SET;
    private static final SubLList $list442;
    private static final SubLObject $const443$nameString;
    private static final SubLSymbol $sym444$CREATE_COLLECTION_FROM_ENUMERATED_TERMS;
    private static final SubLString $str445$UserCreatedCollection;
    private static final SubLSymbol $kw446$COMPUTE;
    private static final SubLSymbol $sym447$VALID_TERM_FOR_ENUMERATED_COLLECTION_;
    private static final SubLObject $const448$completelyAssertedCollection;
    private static final SubLSymbol $sym449$ADD_TO_COLLECTION_FROM_ENUMERATED_TERMS;
    private static final SubLSymbol $sym450$VALID_TERM_QUA_INFERENCE_BINDING_P;
    private static final SubLSymbol $sym451$RESOLVE_TERM_QUA_INFERENCE_BINDING;
    private static final SubLSymbol $sym452$INDEXED_TERM_P;
    private static final SubLList $list453;
    private static final SubLList $list454;
    private static final SubLSymbol $sym455$FIND_EXTERNAL_AIS_TERMS_IN_INFERENCE;
    private static final SubLSymbol $sym456$NON_NEGATIVE_INTEGER_P;
    private static final SubLSymbol $kw457$SKIP;
    private static final SubLList $list458;
    private static final SubLSymbol $sym459$FIND_EXTERNAL_AIS_TERMS;
    private static final SubLObject $const460$synonymousExternalConcept;
    private static final SubLList $list461;
    private static final SubLList $list462;
    private static final SubLSymbol $sym463$VARIABLE_ISA_CONSTRAINTS_MEMOIZED;
    private static final SubLSymbol $sym464$FORMULA_VARIABLE_ARG_CONSTRAINT_TABLE;
    private static final SubLList $list465;
    private static final SubLSymbol $sym466$COL;
    private static final SubLSymbol $sym467$VAR;
    private static final SubLList $list468;
    private static final SubLList $list469;
    private static final SubLSymbol $sym470$NEW_CYC_QUERIES;
    private static final SubLList $list471;
    private static final SubLSymbol $sym472$GATHER_FILTERED_EL_RULE_ASSERTIONS_FOR_TERM;
    private static final SubLSymbol $sym473$CONSP;
    private static final SubLSymbol $sym474$GATHER_SET_FILTERED_EL_RULE_ASSERTIONS_FOR_TERM;
    private static final SubLList $list475;
    private static final SubLSymbol $sym476$ASSERTION_P;
    private static final SubLObject $const477$abnormal;
    private static final SubLObject $const478$implies;
    private static final SubLString $str479$invalid_rule_antecedant__A;
    private static final SubLString $str480$invalid_rule_consequent__A;
    private static final SubLObject $const481$relationInstanceExists;
    private static final SubLSymbol $sym482$CONSTANTIFY_EXISTENTIALS_AND_OPEN_VARS;
    private static final SubLSymbol $sym483$EL_EXISTENTIAL_P;
    private static final SubLSymbol $sym484$FORMULA_ARG2;
    private static final SubLSymbol $kw485$ASCENDING;
    private static final SubLString $str486$_spec;
    private static final SubLSymbol $sym487$GUID_STRING_P;
    private static final SubLSymbol $sym488$DUMMIFY_GUID_STRING;
    private static final SubLSymbol $kw489$GUID_STRING;
    private static final SubLSymbol $sym490$TEST_TEMPLATE_TOPIC_MATCH_FINDER;
    private static final SubLSymbol $kw491$TEST;
    private static final SubLSymbol $kw492$OWNER;
    private static final SubLSymbol $kw493$CLASSES;
    private static final SubLSymbol $kw494$KB;
    private static final SubLSymbol $kw495$FULL;
    private static final SubLSymbol $kw496$WORKING_;
    private static final SubLList $list497;
    private static final SubLString $str498$Missing_binding__S;
    private static final SubLString $str499$Regression_on_bug__S;
    private static final SubLSymbol $sym500$TEST_TERM_FILTERING_PASSES_FILTER;
    private static final SubLList $list501;
    private static final SubLSymbol $kw502$X;
    private static final SubLSymbol $sym503$TEST_CONSTRAINED_CYCL_FILTER;
    private static final SubLList $list504;
    private static final SubLList $list505;
    private static final SubLSymbol $sym506$CONSTRAINED_CYCL_FILTER;
    private static final SubLSymbol $sym507$TEST_BUG_PARSES;
    private static final SubLObject $list508;
    private static final SubLSymbol $sym509$CONSTRAINED_PARSE_EQUAL_;
    private static final SubLSymbol $sym510$PARSE_CYCL_FROM_CONSTRAINED_PARSE_RESULT;
    private static final SubLSymbol $sym511$BUG_PARSE_COUNT;
    private static final SubLList $list512;
    private static final SubLInteger $int513$350000;
    private static final SubLSymbol $sym514$WS_INSTANCE_SUBSET_TEST;
    private static final SubLList $list515;
    private static final SubLSymbol $sym516$SIZE_BETWEEN;
    private static final SubLList $list517;
    private static final SubLList $list518;
    private static final SubLList $list519;
    static  boolean assertionsDisabledSynth = true;
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 789L)
    public static SubLObject foo_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        compatibility.default_struct_print_function(v_object, stream, (SubLObject)api_widgets.ZERO_INTEGER);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 789L)
    public static SubLObject foo_p(final SubLObject v_object) {
        return (SubLObject)((v_object.getClass() == $foo_native.class) ? api_widgets.T : api_widgets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 789L)
    public static SubLObject foo_bar(final SubLObject v_object) {
        assert api_widgets.NIL != foo_p(v_object) : v_object;
        return v_object.getField2();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 789L)
    public static SubLObject _csetf_foo_bar(final SubLObject v_object, final SubLObject value) {
        assert api_widgets.NIL != foo_p(v_object) : v_object;
        return v_object.setField2(value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 789L)
    public static SubLObject make_foo(SubLObject arglist) {
        if (arglist == api_widgets.UNPROVIDED) {
            arglist = (SubLObject)api_widgets.NIL;
        }
        final SubLObject v_new = (SubLObject)new $foo_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = (SubLObject)api_widgets.NIL, next = arglist; api_widgets.NIL != next; next = conses_high.cddr(next)) {
            current_arg = next.first();
            current_value = conses_high.cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql((SubLObject)api_widgets.$kw11$BAR)) {
                _csetf_foo_bar(v_new, current_value);
            }
            else {
                Errors.error((SubLObject)api_widgets.$str12$Invalid_slot__S_for_construction_, current_arg);
            }
        }
        return v_new;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 789L)
    public static SubLObject visit_defstruct_foo(final SubLObject obj, final SubLObject visitor_fn) {
        Functions.funcall(visitor_fn, obj, (SubLObject)api_widgets.$kw13$BEGIN, (SubLObject)api_widgets.$sym14$MAKE_FOO, (SubLObject)api_widgets.ONE_INTEGER);
        Functions.funcall(visitor_fn, obj, (SubLObject)api_widgets.$kw15$SLOT, (SubLObject)api_widgets.$kw11$BAR, foo_bar(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)api_widgets.$kw16$END, (SubLObject)api_widgets.$sym14$MAKE_FOO, (SubLObject)api_widgets.ONE_INTEGER);
        return obj;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 789L)
    public static SubLObject visit_defstruct_object_foo_method(final SubLObject obj, final SubLObject visitor_fn) {
        return visit_defstruct_foo(obj, visitor_fn);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 846L)
    public static SubLObject foo_test(final SubLObject obj) {
        enforceType(obj, api_widgets.$sym1$FOO_P);
        return foo_bar(obj);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 915L)
    public static SubLObject get_cyc_id_for_web_id(final SubLObject web_id) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != Types.stringp(web_id) : web_id;
        final SubLObject result = cycl_utilities.find_denotational_term(web_id);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym20$RELEVANT_MT_IS_ANY_MT, thread);
            mt_relevance_macros.$mt$.bind(api_widgets.$const21$InferencePSC, thread);
            if (api_widgets.NIL == isa.isaP(result, api_widgets.$const22$Cyclist, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) {
                Errors.error((SubLObject)api_widgets.$str23$__A__is_not_a_known___Cyclist___, web_id);
            }
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 1557L)
    public static SubLObject register_api_session_cleanup_form(final SubLObject cleanup_form, SubLObject client) {
        if (client == api_widgets.UNPROVIDED) {
            client = task_processor.get_current_task_processor_client();
        }
        SubLObject release = (SubLObject)api_widgets.NIL;
        try {
            release = Locks.seize_lock(api_widgets.$api_widget_session_resource_lock$.getGlobalValue());
            dictionary_utilities.dictionary_push(api_widgets.$api_widget_session_resource_map$.getGlobalValue(), client, cleanup_form);
        }
        finally {
            if (api_widgets.NIL != release) {
                Locks.release_lock(api_widgets.$api_widget_session_resource_lock$.getGlobalValue());
            }
        }
        return client;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 2151L)
    public static SubLObject release_widget_resources_for_client(final SubLObject uuid_string) {
        run_api_session_cleanup_forms(uuid_string);
        return document_search.release_cluster_resources_for_client(uuid_string);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 2498L)
    public static SubLObject reset_api_widget_sessions_resources() {
        SubLObject release = (SubLObject)api_widgets.NIL;
        try {
            release = Locks.seize_lock(api_widgets.$api_widget_session_resource_lock$.getGlobalValue());
            dictionary.clear_dictionary(api_widgets.$api_widget_session_resource_map$.getGlobalValue());
        }
        finally {
            if (api_widgets.NIL != release) {
                Locks.release_lock(api_widgets.$api_widget_session_resource_lock$.getGlobalValue());
            }
        }
        return (SubLObject)api_widgets.$kw27$CLEARED;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 2783L)
    public static SubLObject run_api_session_cleanup_forms(final SubLObject uuid_string) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject forms = (SubLObject)api_widgets.NIL;
        SubLObject release = (SubLObject)api_widgets.NIL;
        try {
            release = Locks.seize_lock(api_widgets.$api_widget_session_resource_lock$.getGlobalValue());
            forms = dictionary.dictionary_lookup(api_widgets.$api_widget_session_resource_map$.getGlobalValue(), uuid_string, (SubLObject)api_widgets.UNPROVIDED);
            dictionary.dictionary_remove(api_widgets.$api_widget_session_resource_map$.getGlobalValue(), uuid_string);
        }
        finally {
            if (api_widgets.NIL != release) {
                Locks.release_lock(api_widgets.$api_widget_session_resource_lock$.getGlobalValue());
            }
        }
        SubLObject cdolist_list_var = Sequences.nreverse(forms);
        SubLObject form = (SubLObject)api_widgets.NIL;
        form = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject error_message = (SubLObject)api_widgets.NIL;
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)api_widgets.$sym28$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        evaluate_api_cleanup_form(form);
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)api_widgets.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
            if (error_message.isString()) {
                Errors.warn((SubLObject)api_widgets.$str29$Clean_up_form__A_for_session__A_e, form, uuid_string, error_message);
            }
            cdolist_list_var = cdolist_list_var.rest();
            form = cdolist_list_var.first();
        }
        return uuid_string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 3479L)
    public static SubLObject evaluate_api_cleanup_form(final SubLObject form) {
        return Eval.eval(form);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 3602L)
    public static SubLObject declare_session_symbol(final SubLObject prefix, SubLObject client) {
        if (client == api_widgets.UNPROVIDED) {
            client = task_processor.get_current_task_processor_client();
        }
        enforceType(prefix, api_widgets.$sym19$STRINGP);
        enforceType(client, api_widgets.$sym19$STRINGP);
        final SubLObject variable = Symbols.gentemp(prefix);
        register_session_symbol_cleanup_form(variable, client);
        return variable;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 4418L)
    public static SubLObject register_session_symbol_cleanup_form(final SubLObject variable, final SubLObject client) {
        final SubLObject name = Symbols.symbol_name(variable);
        return register_api_session_cleanup_form((SubLObject)ConsesLow.list((SubLObject)api_widgets.$sym31$PROGN, (SubLObject)ConsesLow.list((SubLObject)api_widgets.$sym32$MAKUNBOUND, (SubLObject)ConsesLow.list((SubLObject)api_widgets.$sym33$FIND_SYMBOL, name)), (SubLObject)ConsesLow.list((SubLObject)api_widgets.$sym34$UNINTERN, (SubLObject)ConsesLow.list((SubLObject)api_widgets.$sym33$FIND_SYMBOL, name))), client);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 5038L)
    public static SubLObject clear_get_collection_instances() {
        final SubLObject cs = api_widgets.$get_collection_instances_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 5038L)
    public static SubLObject remove_get_collection_instances(final SubLObject collection, final SubLObject mt, SubLObject mt_exclusiveP) {
        if (mt_exclusiveP == api_widgets.UNPROVIDED) {
            mt_exclusiveP = (SubLObject)api_widgets.NIL;
        }
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_collection_instances_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(collection, mt, mt_exclusiveP), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 5038L)
    public static SubLObject get_collection_instances_internal(final SubLObject collection, final SubLObject mt, final SubLObject mt_exclusiveP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        note_collection_mt_cooccurrence(collection, mt);
        SubLObject results = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != mt_exclusiveP) {
            final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
            try {
                mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym36$RELEVANT_MT_IS_EQ, thread);
                mt_relevance_macros.$mt$.bind(mt, thread);
                results = rkf_ontology_utilities.rkf_all_instantiations(collection, (SubLObject)api_widgets.UNPROVIDED);
            }
            finally {
                mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
            }
        }
        else {
            results = rkf_ontology_utilities.rkf_all_instantiations(collection, mt);
        }
        return results;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 5038L)
    public static SubLObject get_collection_instances(final SubLObject collection, final SubLObject mt, SubLObject mt_exclusiveP) {
        if (mt_exclusiveP == api_widgets.UNPROVIDED) {
            mt_exclusiveP = (SubLObject)api_widgets.NIL;
        }
        SubLObject caching_state = api_widgets.$get_collection_instances_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym35$GET_COLLECTION_INSTANCES, (SubLObject)api_widgets.$sym37$_GET_COLLECTION_INSTANCES_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.THREE_INTEGER, (SubLObject)api_widgets.$int38$256);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(collection, mt, mt_exclusiveP);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (collection.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && mt_exclusiveP.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_collection_instances_internal(collection, mt, mt_exclusiveP)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(collection, mt, mt_exclusiveP));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 5403L)
    public static SubLObject note_collection_mt_cooccurrence(final SubLObject collection, final SubLObject mt) {
        dictionary_utilities.dictionary_pushnew(api_widgets.$api_widgets_get_collection_instances_arg_cooccurrence$.getGlobalValue(), collection, mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 5581L)
    public static SubLObject clear_collection_instances_cache_by_cooccurrence(final SubLObject collection) {
        final SubLObject partner_mts = dictionary.dictionary_lookup(api_widgets.$api_widgets_get_collection_instances_arg_cooccurrence$.getGlobalValue(), collection, (SubLObject)api_widgets.UNPROVIDED);
        dictionary.dictionary_remove(api_widgets.$api_widgets_get_collection_instances_arg_cooccurrence$.getGlobalValue(), collection);
        SubLObject cdolist_list_var = partner_mts;
        SubLObject mt = (SubLObject)api_widgets.NIL;
        mt = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            remove_get_collection_instances(collection, mt, (SubLObject)api_widgets.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            mt = cdolist_list_var.first();
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 6008L)
    public static SubLObject recheck_collection_instances_cooccurence_cache(final SubLObject changed_collection, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stales = (SubLObject)api_widgets.NIL;
        final SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
        try {
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, (SubLObject)api_widgets.FIVE_INTEGER), thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind((SubLObject)api_widgets.T, thread);
            SubLObject iteration_state;
            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(api_widgets.$api_widgets_get_collection_instances_arg_cooccurrence$.getGlobalValue())); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                thread.resetMultipleValues();
                final SubLObject collection = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                final SubLObject mts = thread.secondMultipleValue();
                thread.resetMultipleValues();
                if (api_widgets.NIL != isa.isaP(collection, changed_collection, mt, (SubLObject)api_widgets.UNPROVIDED)) {
                    stales = (SubLObject)ConsesLow.cons(collection, stales);
                }
            }
            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        }
        finally {
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_2, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0, thread);
        }
        SubLObject cdolist_list_var = stales;
        SubLObject stale_collection = (SubLObject)api_widgets.NIL;
        stale_collection = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            clear_collection_instances_cache_by_cooccurrence(stale_collection);
            cdolist_list_var = cdolist_list_var.rest();
            stale_collection = cdolist_list_var.first();
        }
        return changed_collection;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 6590L)
    public static SubLObject reset_collection_instances_caching() {
        dictionary.clear_dictionary(api_widgets.$api_widgets_get_collection_instances_arg_cooccurrence$.getGlobalValue());
        clear_get_collection_instances();
        return (SubLObject)api_widgets.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 6772L)
    public static SubLObject process_taxonimic_function_results(final SubLObject results, final SubLObject max, final SubLObject starting_from, final SubLObject return_external_ids) {
        final SubLObject result_count = Sequences.length(results);
        SubLObject processed_results = conses_high.copy_list(results);
        SubLObject has_more_results = (SubLObject)api_widgets.NIL;
        if (starting_from.numGE(result_count)) {
            return (SubLObject)api_widgets.$list39;
        }
        if (Numbers.add(starting_from, max, (SubLObject)api_widgets.ONE_INTEGER).numE(result_count)) {
            has_more_results = (SubLObject)api_widgets.T;
            processed_results = conses_high.last(processed_results, Numbers.add((SubLObject)api_widgets.ONE_INTEGER, max));
            final SubLObject temp_cons = conses_high.last(processed_results, (SubLObject)api_widgets.TWO_INTEGER);
            ConsesLow.rplacd(temp_cons, (SubLObject)api_widgets.NIL);
        }
        else {
            processed_results = conses_high.last(processed_results, max);
        }
        if (api_widgets.NIL != return_external_ids) {
            processed_results = Mapping.mapcar(Symbols.symbol_function((SubLObject)api_widgets.$sym40$COMPACT_HL_EXTERNAL_ID_STRING), processed_results);
        }
        return (SubLObject)ConsesLow.list(processed_results, has_more_results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 7580L)
    public static SubLObject process_taxonimic_function_results_new(SubLObject results, final SubLObject max, final SubLObject starting_from, final SubLObject return_external_ids) {
        final SubLObject result_count = Sequences.length(results);
        SubLObject has_more_results = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != list_utilities.lengthE(results, (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.UNPROVIDED)) {
            return (SubLObject)api_widgets.$list39;
        }
        if (result_count.numG(max)) {
            has_more_results = (SubLObject)api_widgets.T;
            results = conses_high.butlast(results, (SubLObject)api_widgets.UNPROVIDED);
        }
        if (api_widgets.NIL != return_external_ids) {
            results = Mapping.mapcar(Symbols.symbol_function((SubLObject)api_widgets.$sym40$COMPACT_HL_EXTERNAL_ID_STRING), results);
        }
        return (SubLObject)ConsesLow.list(results, has_more_results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 8091L)
    public static SubLObject find_for_ws(final SubLObject search_string, final SubLObject search_type, final SubLObject ignore_caseP) {
        if (search_type.equal((SubLObject)api_widgets.$str42$externalId)) {
            return (SubLObject)ConsesLow.list(kb_utilities.find_object_by_compact_hl_external_id_string(search_string));
        }
        if (search_type.equal((SubLObject)api_widgets.$str43$cycl) && api_widgets.NIL != string_utilities.starts_with(search_string, (SubLObject)api_widgets.$str44$_)) {
            return cb_frames.nat_via_open_paren_spec(search_string);
        }
        if (search_type.equal((SubLObject)api_widgets.$str43$cycl)) {
            final SubLObject constants = constant_completion_high.constant_complete(unicode_nauts.convert_unicode_nauts_to_utf8_strings(search_string), Types.sublisp_null(ignore_caseP), (SubLObject)api_widgets.T, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            if (api_widgets.NIL != list_utilities.singletonP(constants)) {
                return Values.values(constants, (SubLObject)api_widgets.NIL);
            }
            return (SubLObject)api_widgets.NIL;
        }
        else {
            if (api_widgets.NIL != subl_promotions.memberP(search_type, (SubLObject)api_widgets.$list45, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.UNPROVIDED)) {
                return lexicon_accessors.denots_of_string(search_string, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            }
            return (SubLObject)api_widgets.NIL;
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 8745L)
    public static SubLObject get_instances_for_ws(final SubLObject v_term, SubLObject mt, SubLObject asserted_only, SubLObject max, SubLObject starting_from, SubLObject return_external_ids) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const47$EverythingPSC;
        }
        if (asserted_only == api_widgets.UNPROVIDED) {
            asserted_only = (SubLObject)api_widgets.T;
        }
        if (max == api_widgets.UNPROVIDED) {
            max = (SubLObject)api_widgets.$int48$250;
        }
        if (starting_from == api_widgets.UNPROVIDED) {
            starting_from = (SubLObject)api_widgets.ZERO_INTEGER;
        }
        if (return_external_ids == api_widgets.UNPROVIDED) {
            return_external_ids = (SubLObject)api_widgets.NIL;
        }
        final SubLObject results = get_instances_for_ws_int(v_term, mt, Numbers.add(max, (SubLObject)api_widgets.ONE_INTEGER), starting_from, asserted_only);
        return process_taxonimic_function_results_new(results, max, starting_from, return_external_ids);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 9281L)
    public static SubLObject get_instances_for_ws_int(final SubLObject v_term, final SubLObject mt, final SubLObject max, final SubLObject starting_from, final SubLObject asserted_only) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject known_values = get_ws_instance_cache(v_term, mt, asserted_only, max, starting_from);
        if (known_values.first() != api_widgets.$kw49$INCOMPLETE) {
            return known_values;
        }
        if (api_widgets.NIL != asserted_only) {
            set_ws_instance_cache(ask_utilities.query_variable((SubLObject)api_widgets.$sym50$_X, (SubLObject)ConsesLow.list(api_widgets.$const51$assertedSentence, (SubLObject)ConsesLow.list(api_widgets.$const52$isa, (SubLObject)api_widgets.$sym50$_X, v_term)), mt, (SubLObject)ConsesLow.listS((SubLObject)api_widgets.$kw53$MAX_NUMBER, Numbers.add(starting_from, max, (SubLObject)api_widgets.ONE_INTEGER), (SubLObject)api_widgets.$list54)), v_term, mt, asserted_only);
        }
        else {
            final SubLObject current_size = conses_high.second(known_values);
            final SubLObject iter = get_ws_instance_iterator(v_term, mt, asserted_only);
            final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
            final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                SubLObject cdotimes_end_var;
                SubLObject n;
                SubLObject next_instance;
                for (cdotimes_end_var = Numbers.subtract(Numbers.add(max, starting_from), current_size), n = (SubLObject)api_widgets.NIL, n = (SubLObject)api_widgets.ZERO_INTEGER; n.numL(cdotimes_end_var); n = Numbers.add(n, (SubLObject)api_widgets.ONE_INTEGER)) {
                    if (api_widgets.NIL == iteration.iteration_done(iter)) {
                        next_instance = iteration.iteration_next(iter);
                        if (api_widgets.NIL != next_instance) {
                            add_to_ws_instance_cache(next_instance, v_term, mt, asserted_only);
                        }
                    }
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
        }
        return get_ws_instance_cache(v_term, mt, asserted_only, max, starting_from);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 10478L)
    public static SubLObject get_ws_instance_cache(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only, final SubLObject max, final SubLObject starting_from) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject known_instances = dictionary.dictionary_lookup(api_widgets.$ws_instance_dict$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, mt, asserted_only), (SubLObject)api_widgets.UNPROVIDED);
        if (api_widgets.NIL != list_utilities.lengthGE(known_instances, Numbers.add(max, starting_from), (SubLObject)api_widgets.UNPROVIDED) || api_widgets.NIL != ws_instance_iterator_doneP(v_term, mt, asserted_only) || (api_widgets.NIL != list_utilities.lengthG(known_instances, (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.UNPROVIDED) && api_widgets.NIL != asserted_only)) {
            final SubLObject end = Numbers.min(Numbers.add(max, starting_from), Sequences.length(known_instances));
            return conses_high.copy_list(Sequences.subseq(known_instances, starting_from, end));
        }
        return (SubLObject)ConsesLow.list((SubLObject)api_widgets.$kw49$INCOMPLETE, Sequences.length(known_instances));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 11030L)
    public static SubLObject add_to_ws_instance_cache(final SubLObject new_instance, final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject known_instances = dictionary.dictionary_lookup(api_widgets.$ws_instance_dict$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, mt, asserted_only), (SubLObject)api_widgets.UNPROVIDED);
        dictionary.dictionary_enter(api_widgets.$ws_instance_dict$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, mt, asserted_only), list_utilities.snoc(new_instance, known_instances));
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 11326L)
    public static SubLObject set_ws_instance_cache(final SubLObject value, final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        dictionary.dictionary_enter(api_widgets.$ws_instance_dict$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, mt, asserted_only), value);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 11487L)
    public static SubLObject ws_instance_iterator_doneP(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)api_widgets.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            result = iteration.iteration_done(get_ws_instance_iterator(v_term, mt, asserted_only));
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 11717L)
    public static SubLObject clear_get_ws_instance_iterator() {
        final SubLObject cs = api_widgets.$get_ws_instance_iterator_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 11717L)
    public static SubLObject remove_get_ws_instance_iterator(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only) {
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_ws_instance_iterator_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, mt, asserted_only), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 11717L)
    public static SubLObject get_ws_instance_iterator_internal(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject iter = (SubLObject)api_widgets.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            iter = kb_iterators.new_instances_iterator(v_term);
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return iter;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 11717L)
    public static SubLObject get_ws_instance_iterator(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only) {
        SubLObject caching_state = api_widgets.$get_ws_instance_iterator_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym55$GET_WS_INSTANCE_ITERATOR, (SubLObject)api_widgets.$sym56$_GET_WS_INSTANCE_ITERATOR_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.THREE_INTEGER, (SubLObject)api_widgets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(v_term, mt, asserted_only);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && asserted_only.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_ws_instance_iterator_internal(v_term, mt, asserted_only)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, mt, asserted_only));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 11921L)
    public static SubLObject get_specs_for_ws(final SubLObject v_term, SubLObject mt, SubLObject asserted_only, SubLObject max, SubLObject starting_from, SubLObject return_external_ids, SubLObject minimize) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const47$EverythingPSC;
        }
        if (asserted_only == api_widgets.UNPROVIDED) {
            asserted_only = (SubLObject)api_widgets.T;
        }
        if (max == api_widgets.UNPROVIDED) {
            max = (SubLObject)api_widgets.$int48$250;
        }
        if (starting_from == api_widgets.UNPROVIDED) {
            starting_from = (SubLObject)api_widgets.ZERO_INTEGER;
        }
        if (return_external_ids == api_widgets.UNPROVIDED) {
            return_external_ids = (SubLObject)api_widgets.NIL;
        }
        if (minimize == api_widgets.UNPROVIDED) {
            minimize = (SubLObject)api_widgets.NIL;
        }
        final SubLObject results = get_specs_for_ws_int(v_term, mt, Numbers.add(max, (SubLObject)api_widgets.ONE_INTEGER), starting_from, asserted_only, minimize);
        return process_taxonimic_function_results_new(results, max, starting_from, return_external_ids);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 12498L)
    public static SubLObject get_specs_for_ws_int(final SubLObject v_term, final SubLObject mt, final SubLObject max, final SubLObject starting_from, final SubLObject asserted_only, final SubLObject minimize) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject known_values = get_ws_spec_cache(v_term, mt, asserted_only, max, starting_from, minimize);
        if (known_values.first() != api_widgets.$kw49$INCOMPLETE) {
            return known_values;
        }
        if (api_widgets.NIL != asserted_only || api_widgets.NIL != minimize) {
            SubLObject base_results = ask_utilities.query_variable((SubLObject)api_widgets.$sym50$_X, (SubLObject)ConsesLow.list(api_widgets.$const51$assertedSentence, (SubLObject)ConsesLow.list(api_widgets.$const58$genls, (SubLObject)api_widgets.$sym50$_X, v_term)), mt, (SubLObject)ConsesLow.listS((SubLObject)api_widgets.$kw53$MAX_NUMBER, Numbers.add(starting_from, max, (SubLObject)api_widgets.ONE_INTEGER), (SubLObject)api_widgets.$list54));
            if (api_widgets.NIL != minimize) {
                base_results = genls.max_cols(base_results, mt, (SubLObject)api_widgets.UNPROVIDED);
            }
            set_ws_spec_cache(base_results, v_term, mt, asserted_only, minimize);
        }
        else {
            final SubLObject current_size = conses_high.second(known_values);
            final SubLObject iter = get_ws_spec_iterator(v_term, mt);
            final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
            final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                SubLObject cdotimes_end_var;
                SubLObject n;
                SubLObject next_spec;
                for (cdotimes_end_var = Numbers.subtract(Numbers.add(max, starting_from), current_size), n = (SubLObject)api_widgets.NIL, n = (SubLObject)api_widgets.ZERO_INTEGER; n.numL(cdotimes_end_var); n = Numbers.add(n, (SubLObject)api_widgets.ONE_INTEGER)) {
                    if (api_widgets.NIL == iteration.iteration_done(iter)) {
                        next_spec = iteration.iteration_next(iter);
                        if (api_widgets.NIL != next_spec) {
                            add_to_ws_spec_cache(next_spec, v_term, mt, asserted_only, minimize);
                        }
                    }
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
        }
        return get_ws_spec_cache(v_term, mt, asserted_only, max, starting_from, minimize);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 13823L)
    public static SubLObject get_ws_spec_cache(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only, final SubLObject max, final SubLObject starting_from, final SubLObject minimize) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject known_specs = dictionary.dictionary_lookup(api_widgets.$ws_spec_dict$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, mt, asserted_only, minimize), (SubLObject)api_widgets.$kw59$EMPTY_RESULT);
        if (known_specs.isList() && ((api_widgets.NIL != list_utilities.lengthG(known_specs, (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.UNPROVIDED) && api_widgets.NIL != asserted_only) || api_widgets.NIL != list_utilities.lengthGE(known_specs, Numbers.add(max, starting_from), (SubLObject)api_widgets.UNPROVIDED) || api_widgets.NIL != ws_spec_iterator_doneP(v_term, mt) || api_widgets.NIL == known_specs)) {
            final SubLObject end = Numbers.min(Numbers.add(max, starting_from), Sequences.length(known_specs));
            return conses_high.copy_list(Sequences.subseq(known_specs, starting_from, end));
        }
        return (SubLObject)ConsesLow.list((SubLObject)api_widgets.$kw49$INCOMPLETE, (SubLObject)((known_specs == api_widgets.$kw59$EMPTY_RESULT) ? api_widgets.ZERO_INTEGER : Sequences.length(known_specs)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 14456L)
    public static SubLObject add_to_ws_spec_cache(final SubLObject new_spec, final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only, final SubLObject minimize) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject known_specs = dictionary.dictionary_lookup(api_widgets.$ws_spec_dict$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, mt, asserted_only, minimize), (SubLObject)api_widgets.UNPROVIDED);
        dictionary.dictionary_enter(api_widgets.$ws_spec_dict$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, mt, asserted_only, minimize), list_utilities.snoc(new_spec, known_specs));
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 14751L)
    public static SubLObject set_ws_spec_cache(final SubLObject value, final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only, final SubLObject minimize) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        dictionary.dictionary_enter(api_widgets.$ws_spec_dict$.getDynamicValue(thread), (SubLObject)ConsesLow.list(v_term, mt, asserted_only, minimize), value);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 14922L)
    public static SubLObject ws_spec_iterator_doneP(final SubLObject v_term, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)api_widgets.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            result = iteration.iteration_done(get_ws_spec_iterator(v_term, mt));
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15116L)
    public static SubLObject clear_get_ws_spec_iterator() {
        final SubLObject cs = api_widgets.$get_ws_spec_iterator_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15116L)
    public static SubLObject remove_get_ws_spec_iterator(final SubLObject v_term, final SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_ws_spec_iterator_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, mt), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15116L)
    public static SubLObject get_ws_spec_iterator_internal(final SubLObject v_term, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject iter = (SubLObject)api_widgets.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            iter = kb_iterators.new_specs_iterator(v_term);
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return iter;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15116L)
    public static SubLObject get_ws_spec_iterator(final SubLObject v_term, final SubLObject mt) {
        SubLObject caching_state = api_widgets.$get_ws_spec_iterator_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym60$GET_WS_SPEC_ITERATOR, (SubLObject)api_widgets.$sym61$_GET_WS_SPEC_ITERATOR_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(v_term, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_ws_spec_iterator_internal(v_term, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15298L)
    public static SubLObject get_isas_for_ws(final SubLObject v_term, SubLObject mt, SubLObject asserted_only, SubLObject max, SubLObject starting_from, SubLObject return_external_ids, SubLObject minimize) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const47$EverythingPSC;
        }
        if (asserted_only == api_widgets.UNPROVIDED) {
            asserted_only = (SubLObject)api_widgets.T;
        }
        if (max == api_widgets.UNPROVIDED) {
            max = (SubLObject)api_widgets.$int48$250;
        }
        if (starting_from == api_widgets.UNPROVIDED) {
            starting_from = (SubLObject)api_widgets.ZERO_INTEGER;
        }
        if (return_external_ids == api_widgets.UNPROVIDED) {
            return_external_ids = (SubLObject)api_widgets.NIL;
        }
        if (minimize == api_widgets.UNPROVIDED) {
            minimize = (SubLObject)api_widgets.NIL;
        }
        final SubLObject results = get_isas_for_ws_int(v_term, mt, asserted_only, minimize);
        return process_taxonimic_function_results(results, max, starting_from, return_external_ids);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15788L)
    public static SubLObject clear_get_isas_for_ws_int() {
        final SubLObject cs = api_widgets.$get_isas_for_ws_int_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15788L)
    public static SubLObject remove_get_isas_for_ws_int(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only, final SubLObject minimize) {
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_isas_for_ws_int_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, mt, asserted_only, minimize), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15788L)
    public static SubLObject get_isas_for_ws_int_internal(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only, final SubLObject minimize) {
        SubLObject results = (SubLObject)api_widgets.NIL;
        if (v_term.isNumber()) {
            results = all_genls_of_any(at_defns.collections_admitting_term_via_defns(v_term), (SubLObject)api_widgets.T, mt);
        }
        else if (api_widgets.NIL != asserted_only) {
            results = ask_utilities.query_template((SubLObject)api_widgets.$sym50$_X, (SubLObject)ConsesLow.list(api_widgets.$const51$assertedSentence, (SubLObject)ConsesLow.listS(api_widgets.$const52$isa, v_term, (SubLObject)api_widgets.$list64)), mt, (SubLObject)api_widgets.$list54);
        }
        else {
            results = ask_utilities.query_template((SubLObject)api_widgets.$sym50$_X, (SubLObject)ConsesLow.listS(api_widgets.$const52$isa, v_term, (SubLObject)api_widgets.$list64), mt, (SubLObject)api_widgets.$list54);
        }
        if (api_widgets.NIL != minimize) {
            results = genls.min_cols(results, mt, (SubLObject)api_widgets.UNPROVIDED);
        }
        return results;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 15788L)
    public static SubLObject get_isas_for_ws_int(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only, final SubLObject minimize) {
        SubLObject caching_state = api_widgets.$get_isas_for_ws_int_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym63$GET_ISAS_FOR_WS_INT, (SubLObject)api_widgets.$sym65$_GET_ISAS_FOR_WS_INT_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.FOUR_INTEGER, (SubLObject)api_widgets.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)api_widgets.$sym66$CLEAR_GET_ISAS_FOR_WS_INT);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_4(v_term, mt, asserted_only, minimize);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (asserted_only.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && minimize.equal(cached_args.first())) {
                                return memoization_state.caching_results(results2);
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_isas_for_ws_int_internal(v_term, mt, asserted_only, minimize)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, mt, asserted_only, minimize));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 16391L)
    public static SubLObject all_genls_of_any(final SubLObject specs, SubLObject delete_duplicatesP, SubLObject mt) {
        if (delete_duplicatesP == api_widgets.UNPROVIDED) {
            delete_duplicatesP = (SubLObject)api_widgets.T;
        }
        if (mt == api_widgets.UNPROVIDED) {
            mt = mt_relevance_macros.$mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != Types.listp(specs) : specs;
        SubLObject result = (SubLObject)api_widgets.NIL;
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            result = Functions.apply(Symbols.symbol_function((SubLObject)api_widgets.$sym68$APPEND), Mapping.mapcar(Symbols.symbol_function((SubLObject)api_widgets.$sym69$ALL_GENLS_IN_MT), specs));
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return (api_widgets.NIL != delete_duplicatesP) ? list_utilities.fast_delete_duplicates(result, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED) : result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 17065L)
    public static SubLObject get_genls_for_ws(final SubLObject v_term, SubLObject mt, SubLObject asserted_only, SubLObject max, SubLObject starting_from, SubLObject return_external_ids, SubLObject minimize) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const47$EverythingPSC;
        }
        if (asserted_only == api_widgets.UNPROVIDED) {
            asserted_only = (SubLObject)api_widgets.T;
        }
        if (max == api_widgets.UNPROVIDED) {
            max = (SubLObject)api_widgets.$int48$250;
        }
        if (starting_from == api_widgets.UNPROVIDED) {
            starting_from = (SubLObject)api_widgets.ZERO_INTEGER;
        }
        if (return_external_ids == api_widgets.UNPROVIDED) {
            return_external_ids = (SubLObject)api_widgets.NIL;
        }
        if (minimize == api_widgets.UNPROVIDED) {
            minimize = (SubLObject)api_widgets.NIL;
        }
        final SubLObject results = get_genls_for_ws_int(v_term, mt, asserted_only, minimize);
        return process_taxonimic_function_results(results, max, starting_from, return_external_ids);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 17552L)
    public static SubLObject clear_get_genls_for_ws_int() {
        final SubLObject cs = api_widgets.$get_genls_for_ws_int_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 17552L)
    public static SubLObject remove_get_genls_for_ws_int(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only, final SubLObject minimize) {
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_genls_for_ws_int_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, mt, asserted_only, minimize), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 17552L)
    public static SubLObject get_genls_for_ws_int_internal(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only, final SubLObject minimize) {
        SubLObject results = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != asserted_only || api_widgets.NIL != minimize) {
            results = ask_utilities.query_template((SubLObject)api_widgets.$sym50$_X, (SubLObject)ConsesLow.list(api_widgets.$const51$assertedSentence, (SubLObject)ConsesLow.listS(api_widgets.$const58$genls, v_term, (SubLObject)api_widgets.$list64)), mt, (SubLObject)api_widgets.$list54);
        }
        else {
            results = ask_utilities.query_template((SubLObject)api_widgets.$sym50$_X, (SubLObject)ConsesLow.listS(api_widgets.$const58$genls, v_term, (SubLObject)api_widgets.$list64), mt, (SubLObject)api_widgets.$list54);
        }
        if (api_widgets.NIL != minimize) {
            results = genls.min_cols(results, mt, (SubLObject)api_widgets.UNPROVIDED);
        }
        return results;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 17552L)
    public static SubLObject get_genls_for_ws_int(final SubLObject v_term, final SubLObject mt, final SubLObject asserted_only, final SubLObject minimize) {
        SubLObject caching_state = api_widgets.$get_genls_for_ws_int_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym71$GET_GENLS_FOR_WS_INT, (SubLObject)api_widgets.$sym72$_GET_GENLS_FOR_WS_INT_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.FOUR_INTEGER, (SubLObject)api_widgets.ZERO_INTEGER);
            memoization_state.register_hl_store_cache_clear_callback((SubLObject)api_widgets.$sym73$CLEAR_GET_GENLS_FOR_WS_INT);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_4(v_term, mt, asserted_only, minimize);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (asserted_only.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && minimize.equal(cached_args.first())) {
                                return memoization_state.caching_results(results2);
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_genls_for_ws_int_internal(v_term, mt, asserted_only, minimize)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, mt, asserted_only, minimize));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 18061L)
    public static SubLObject get_instances_in_nl(final SubLObject collection, SubLObject mt, SubLObject generation_mt) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != fort_types_interface.collection_p(collection) : collection;
        assert api_widgets.NIL != hlmt.possibly_mt_p(mt) : mt;
        assert api_widgets.NIL != hlmt.possibly_mt_p(generation_mt) : generation_mt;
        mt = hlmt_czer.coerce_to_hlmt(mt);
        generation_mt = hlmt_czer.coerce_to_hlmt(generation_mt);
        SubLObject result = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = get_collection_instances(collection, mt, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject instance = (SubLObject)api_widgets.NIL;
        instance = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
            try {
                pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)api_widgets.NIL, thread);
                thread.resetMultipleValues();
                final SubLObject _prev_bind_0_$1 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                try {
                    pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                    final SubLObject reuseP = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    try {
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$2 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                            final SubLObject new_or_reused = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            final SubLObject _prev_bind_0_$3 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                            try {
                                pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                final SubLObject _prev_bind_0_$4 = memoization_state.$memoization_state$.currentBinding(thread);
                                try {
                                    memoization_state.$memoization_state$.bind(local_state, thread);
                                    final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                    try {
                                        final SubLObject phrase = rkf_concept_communicator.rkf_term_phrase(instance, generation_mt, mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                        if (phrase.isString()) {
                                            result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(phrase, instance), result);
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                            final SubLObject _values = Values.getValuesAsVector();
                                            memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                            Values.restoreValuesFromVector(_values);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$5, thread);
                                        }
                                    }
                                }
                                finally {
                                    memoization_state.$memoization_state$.rebind(_prev_bind_0_$4, thread);
                                }
                            }
                            finally {
                                pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$3, thread);
                            }
                            if (new_or_reused == api_widgets.$kw77$NEW && api_widgets.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                                memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$2, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (api_widgets.NIL == reuseP) {
                                pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$6, thread);
                        }
                    }
                }
                finally {
                    pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$1, thread);
                }
            }
            finally {
                pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
            }
            cdolist_list_var = cdolist_list_var.rest();
            instance = cdolist_list_var.first();
        }
        return Sort.sort(result, Symbols.symbol_function((SubLObject)api_widgets.$sym78$STRING_LESSP), Symbols.symbol_function((SubLObject)api_widgets.$sym79$FIRST));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 18793L)
    public static SubLObject pph_list_item_comparator(final SubLObject item_a, final SubLObject item_b) {
        return Functions.funcall(Symbols.symbol_function((SubLObject)api_widgets.$sym78$STRING_LESSP), item_a.first().first(), item_b.first().first());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 18931L)
    public static SubLObject get_instances_as_renderings_int(final SubLObject collection, SubLObject should_sort, SubLObject instantiation_type, SubLObject force, SubLObject domain_mt, SubLObject generation_mt, SubLObject nl_preds) {
        if (should_sort == api_widgets.UNPROVIDED) {
            should_sort = (SubLObject)api_widgets.T;
        }
        if (instantiation_type == api_widgets.UNPROVIDED) {
            instantiation_type = (SubLObject)api_widgets.$kw80$ALL_INSTANTIATIONS;
        }
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw81$NONE;
        }
        if (domain_mt == api_widgets.UNPROVIDED) {
            domain_mt = pph_vars.$pph_domain_mt$.getDynamicValue();
        }
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = default_nl_preds_for_type_list(collection, generation_mt);
        }
        assert api_widgets.NIL != kb_accessors.set_or_collectionP(collection) : collection;
        final SubLObject v_instances = (instantiation_type == api_widgets.$kw80$ALL_INSTANTIATIONS) ? rkf_ontology_utilities.rkf_all_instantiations(collection, (SubLObject)api_widgets.UNPROVIDED) : rkf_ontology_utilities.rkf_instantiations(collection, (SubLObject)api_widgets.UNPROVIDED);
        final SubLObject result = convert_term_list_to_renderings_for_java(v_instances, domain_mt, force, nl_preds, generation_mt, should_sort, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 20509L)
    public static SubLObject get_instances_as_renderings_new(final SubLObject collection, SubLObject mt, SubLObject instantiation_type, SubLObject mt_direction_type, SubLObject should_sortP, SubLObject force, SubLObject generation_mt, SubLObject nl_preds) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const21$InferencePSC;
        }
        if (instantiation_type == api_widgets.UNPROVIDED) {
            instantiation_type = (SubLObject)api_widgets.$kw80$ALL_INSTANTIATIONS;
        }
        if (mt_direction_type == api_widgets.UNPROVIDED) {
            mt_direction_type = (SubLObject)api_widgets.$kw84$ANY_MT;
        }
        if (should_sortP == api_widgets.UNPROVIDED) {
            should_sortP = (SubLObject)api_widgets.T;
        }
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw81$NONE;
        }
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = (SubLObject)api_widgets.$kw85$DEFAULT;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (api_widgets.NIL == kb_accessors.set_or_collectionP(collection)) {
            return (SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.MINUS_ONE_INTEGER);
        }
        if (api_widgets.NIL != mt) {
            mt = hlmt_czer.coerce_to_hlmt(mt);
        }
        if (api_widgets.$kw85$DEFAULT == nl_preds) {
            nl_preds = default_nl_preds_for_type_list(collection, generation_mt);
        }
        SubLObject result = (SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.MINUS_ONE_INTEGER);
        final SubLObject _prev_bind_0 = pph_vars.$pph_language_mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$pph_domain_mt$.currentBinding(thread);
        try {
            pph_vars.$pph_language_mt$.bind((api_widgets.NIL != generation_mt) ? pph_utilities.pph_canonicalize_hlmt(generation_mt) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
            pph_vars.$pph_domain_mt$.bind((api_widgets.NIL != mt) ? pph_utilities.pph_canonicalize_hlmt(mt) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
            if (mt_direction_type == api_widgets.$kw84$ANY_MT) {
                final SubLObject _prev_bind_0_$7 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_1_$8 = mt_relevance_macros.$mt$.currentBinding(thread);
                try {
                    mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym20$RELEVANT_MT_IS_ANY_MT, thread);
                    mt_relevance_macros.$mt$.bind(api_widgets.$const21$InferencePSC, thread);
                    result = get_instances_as_renderings_int(collection, should_sortP, instantiation_type, force, mt, generation_mt, nl_preds);
                }
                finally {
                    mt_relevance_macros.$mt$.rebind(_prev_bind_1_$8, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$7, thread);
                }
            }
            else if (mt_direction_type == api_widgets.$kw86$LOCAL_CHANGE) {
                final SubLObject _prev_bind_0_$8 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_1_$9 = mt_relevance_macros.$mt$.currentBinding(thread);
                try {
                    mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym36$RELEVANT_MT_IS_EQ, thread);
                    mt_relevance_macros.$mt$.bind(mt, thread);
                    result = get_instances_as_renderings_int(collection, should_sortP, instantiation_type, force, mt, generation_mt, nl_preds);
                }
                finally {
                    mt_relevance_macros.$mt$.rebind(_prev_bind_1_$9, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$8, thread);
                }
            }
            else if (mt_direction_type == api_widgets.$kw87$UPWARD_CLOSURE) {
                final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
                final SubLObject _prev_bind_0_$9 = mt_relevance_macros.$mt$.currentBinding(thread);
                final SubLObject _prev_bind_1_$10 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                try {
                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                    result = get_instances_as_renderings_int(collection, should_sortP, instantiation_type, force, mt, generation_mt, nl_preds);
                }
                finally {
                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$10, thread);
                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$9, thread);
                }
            }
            else if (mt_direction_type == api_widgets.$kw88$DOWNWARD_CLOSURE) {
                final SubLObject _prev_bind_0_$10 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_1_$11 = mt_relevance_macros.$mt$.currentBinding(thread);
                try {
                    mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym89$RELEVANT_MT_IS_SPEC_MT, thread);
                    mt_relevance_macros.$mt$.bind(mt, thread);
                    result = get_instances_as_renderings_int(collection, should_sortP, instantiation_type, force, mt, generation_mt, nl_preds);
                }
                finally {
                    mt_relevance_macros.$mt$.rebind(_prev_bind_1_$11, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$10, thread);
                }
            }
        }
        finally {
            pph_vars.$pph_domain_mt$.rebind(_prev_bind_2, thread);
            pph_vars.$pph_language_mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 23333L)
    public static SubLObject clear_default_nl_preds_for_type_list() {
        final SubLObject cs = api_widgets.$default_nl_preds_for_type_list_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 23333L)
    public static SubLObject remove_default_nl_preds_for_type_list(final SubLObject collection, SubLObject language_mt) {
        if (language_mt == api_widgets.UNPROVIDED) {
            language_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$default_nl_preds_for_type_list_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(collection, language_mt), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 23333L)
    public static SubLObject default_nl_preds_for_type_list_internal(final SubLObject collection, final SubLObject language_mt) {
        return pph_utilities.pph_default_nl_preds_for_type_list(collection, language_mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 23333L)
    public static SubLObject default_nl_preds_for_type_list(final SubLObject collection, SubLObject language_mt) {
        if (language_mt == api_widgets.UNPROVIDED) {
            language_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        SubLObject caching_state = api_widgets.$default_nl_preds_for_type_list_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym90$DEFAULT_NL_PREDS_FOR_TYPE_LIST, (SubLObject)api_widgets.$sym91$_DEFAULT_NL_PREDS_FOR_TYPE_LIST_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(collection, language_mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (collection.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && language_mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(default_nl_preds_for_type_list_internal(collection, language_mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(collection, language_mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 23660L)
    public static SubLObject clear_get_instances_as_renderings() {
        final SubLObject cs = api_widgets.$get_instances_as_renderings_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 23660L)
    public static SubLObject remove_get_instances_as_renderings(final SubLObject collection, final SubLObject mt, final SubLObject force, SubLObject generation_mt, SubLObject nl_preds, SubLObject mt_exclusiveP) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = default_nl_preds_for_type_list(collection, generation_mt);
        }
        if (mt_exclusiveP == api_widgets.UNPROVIDED) {
            mt_exclusiveP = (SubLObject)api_widgets.NIL;
        }
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_instances_as_renderings_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(collection, mt, force, generation_mt, nl_preds, mt_exclusiveP), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 23660L)
    public static SubLObject get_instances_as_renderings_internal(final SubLObject collection, SubLObject mt, final SubLObject force, final SubLObject generation_mt, final SubLObject nl_preds, final SubLObject mt_exclusiveP) {
        mt = hlmt_czer.coerce_to_hlmt(mt);
        assert api_widgets.NIL != kb_accessors.set_or_collectionP(collection) : collection;
        final SubLObject result = convert_term_list_to_renderings_for_java(get_collection_instances(collection, mt, mt_exclusiveP), mt, force, nl_preds, generation_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        return Sort.sort(result, Symbols.symbol_function((SubLObject)api_widgets.$sym93$PPH_LIST_ITEM_COMPARATOR), (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 23660L)
    public static SubLObject get_instances_as_renderings(final SubLObject collection, final SubLObject mt, final SubLObject force, SubLObject generation_mt, SubLObject nl_preds, SubLObject mt_exclusiveP) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = default_nl_preds_for_type_list(collection, generation_mt);
        }
        if (mt_exclusiveP == api_widgets.UNPROVIDED) {
            mt_exclusiveP = (SubLObject)api_widgets.NIL;
        }
        SubLObject caching_state = api_widgets.$get_instances_as_renderings_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym92$GET_INSTANCES_AS_RENDERINGS, (SubLObject)api_widgets.$sym94$_GET_INSTANCES_AS_RENDERINGS_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.SIX_INTEGER, (SubLObject)api_widgets.$int38$256);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_6(collection, mt, force, generation_mt, nl_preds, mt_exclusiveP);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (collection.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (force.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (generation_mt.equal(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (nl_preds.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && mt_exclusiveP.equal(cached_args.first())) {
                                        return memoization_state.caching_results(results2);
                                    }
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_instances_as_renderings_internal(collection, mt, force, generation_mt, nl_preds, mt_exclusiveP)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(collection, mt, force, generation_mt, nl_preds, mt_exclusiveP));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 24194L)
    public static SubLObject get_term_list_as_renderings(SubLObject cycl_term_list, SubLObject mt, final SubLObject force, SubLObject generation_mt, SubLObject should_sortP, SubLObject nl_preds, SubLObject filter_irrelevant_termsP, SubLObject disambiguateP) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (should_sortP == api_widgets.UNPROVIDED) {
            should_sortP = (SubLObject)api_widgets.T;
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = (SubLObject)ConsesLow.list(api_widgets.$const96$nonPlural_Generic);
        }
        if (filter_irrelevant_termsP == api_widgets.UNPROVIDED) {
            filter_irrelevant_termsP = (SubLObject)api_widgets.NIL;
        }
        if (disambiguateP == api_widgets.UNPROVIDED) {
            disambiguateP = (SubLObject)api_widgets.T;
        }
        mt = hlmt_czer.coerce_to_hlmt(mt);
        generation_mt = hlmt_czer.coerce_to_hlmt(generation_mt);
        if (api_widgets.NIL != filter_irrelevant_termsP) {
            cycl_term_list = rkf_relevance_utilities.rkf_filter_irrelevant_terms(cycl_term_list, mt);
        }
        final SubLObject result = convert_term_list_to_renderings_for_java(cycl_term_list, mt, force, nl_preds, generation_mt, should_sortP, disambiguateP, (SubLObject)api_widgets.UNPROVIDED);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 24978L)
    public static SubLObject get_term_list_as_renderings_with_fact_sheets(SubLObject cycl_term_list, SubLObject mt, final SubLObject force, SubLObject generation_mt, SubLObject should_sortP, SubLObject nl_preds, SubLObject filter_irrelevant_termsP) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (should_sortP == api_widgets.UNPROVIDED) {
            should_sortP = (SubLObject)api_widgets.T;
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = (SubLObject)ConsesLow.list(api_widgets.$const96$nonPlural_Generic);
        }
        if (filter_irrelevant_termsP == api_widgets.UNPROVIDED) {
            filter_irrelevant_termsP = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        mt = hlmt_czer.coerce_to_hlmt(mt);
        generation_mt = hlmt_czer.coerce_to_hlmt(generation_mt);
        if (api_widgets.NIL != filter_irrelevant_termsP) {
            cycl_term_list = rkf_relevance_utilities.rkf_filter_irrelevant_terms(cycl_term_list, mt);
        }
        final SubLObject fact_sheet_table = Hashtables.make_hash_table((SubLObject)api_widgets.TEN_INTEGER, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        final SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
        try {
            pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)api_widgets.NIL, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$15 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
            try {
                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                final SubLObject reuseP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    thread.resetMultipleValues();
                    final SubLObject _prev_bind_0_$16 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                    try {
                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                        final SubLObject new_or_reused = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$17 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                            final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                            final SubLObject _prev_bind_0_$18 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                try {
                                    final SubLObject _prev_bind_0_$19 = pph_vars.$pph_language_mt$.currentBinding(thread);
                                    final SubLObject _prev_bind_2 = pph_vars.$pph_domain_mt$.currentBinding(thread);
                                    try {
                                        pph_vars.$pph_language_mt$.bind((api_widgets.NIL != generation_mt) ? pph_utilities.pph_canonicalize_hlmt(generation_mt) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
                                        pph_vars.$pph_domain_mt$.bind((api_widgets.NIL != mt) ? pph_utilities.pph_canonicalize_hlmt(mt) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
                                        SubLObject cdolist_list_var = cycl_term_list;
                                        SubLObject v_term = (SubLObject)api_widgets.NIL;
                                        v_term = cdolist_list_var.first();
                                        while (api_widgets.NIL != cdolist_list_var) {
                                            final SubLObject _prev_bind_0_$20 = thcl.$thcl_forts_by_fiat$.currentBinding(thread);
                                            try {
                                                thcl.$thcl_forts_by_fiat$.bind((SubLObject)ConsesLow.cons(v_term, thcl.$thcl_forts_by_fiat$.getDynamicValue(thread)), thread);
                                                Hashtables.sethash(v_term, fact_sheet_table, fact_sheets.get_fact_sheet_for_term_in_html(v_term, (SubLObject)api_widgets.$kw98$MINI, mt, generation_mt, (SubLObject)api_widgets.$list99).first());
                                            }
                                            finally {
                                                thcl.$thcl_forts_by_fiat$.rebind(_prev_bind_0_$20, thread);
                                            }
                                            cdolist_list_var = cdolist_list_var.rest();
                                            v_term = cdolist_list_var.first();
                                        }
                                    }
                                    finally {
                                        pph_vars.$pph_domain_mt$.rebind(_prev_bind_2, thread);
                                        pph_vars.$pph_language_mt$.rebind(_prev_bind_0_$19, thread);
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$21 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$21, thread);
                                    }
                                }
                            }
                            finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0_$18, thread);
                            }
                        }
                        finally {
                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$17, thread);
                        }
                        if (new_or_reused == api_widgets.$kw77$NEW && api_widgets.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                            memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                        }
                    }
                    finally {
                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$16, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$22 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (api_widgets.NIL == reuseP) {
                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$22, thread);
                    }
                }
            }
            finally {
                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$15, thread);
            }
        }
        finally {
            pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
        }
        final SubLObject renderings_lists = convert_term_list_to_renderings_for_java(cycl_term_list, mt, force, nl_preds, generation_mt, should_sortP, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject result = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var2 = renderings_lists;
        SubLObject renderings_list = (SubLObject)api_widgets.NIL;
        renderings_list = cdolist_list_var2.first();
        while (api_widgets.NIL != cdolist_list_var2) {
            SubLObject current;
            final SubLObject datum = current = renderings_list;
            SubLObject rendering = (SubLObject)api_widgets.NIL;
            SubLObject v_term2 = (SubLObject)api_widgets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list100);
            rendering = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list100);
            v_term2 = current.first();
            current = current.rest();
            if (api_widgets.NIL == current) {
                result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(rendering, v_term2, Hashtables.gethash(v_term2, fact_sheet_table, (SubLObject)api_widgets.UNPROVIDED)), result);
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list100);
            }
            cdolist_list_var2 = cdolist_list_var2.rest();
            renderings_list = cdolist_list_var2.first();
        }
        result = Sequences.nreverse(result);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 26271L)
    public static SubLObject get_external_term_browser_url(final SubLObject knowledge_source, final SubLObject term_identifier) {
        final SubLObject mt_var = (SubLObject)api_widgets.$sym103$_MT;
        final SubLObject server_var = (SubLObject)api_widgets.$sym104$_SERVER;
        final SubLObject port_var = (SubLObject)api_widgets.$sym105$_PORT;
        final SubLObject sentence = (SubLObject)ConsesLow.list(api_widgets.$const106$and, (SubLObject)ConsesLow.list(api_widgets.$const107$mappingMt, knowledge_source, mt_var), (SubLObject)ConsesLow.list(api_widgets.$const108$ist, mt_var, (SubLObject)ConsesLow.list(api_widgets.$const109$serverOfSKS, knowledge_source, server_var)), (SubLObject)ConsesLow.list(api_widgets.$const108$ist, mt_var, (SubLObject)ConsesLow.listS(api_widgets.$const52$isa, knowledge_source, (SubLObject)api_widgets.$list110)), (SubLObject)ConsesLow.list(api_widgets.$const108$ist, mt_var, (SubLObject)ConsesLow.list(api_widgets.$const111$portNumberForSKS, knowledge_source, port_var)));
        final SubLObject results = ask_utilities.query_template((SubLObject)ConsesLow.list(server_var, port_var), sentence, api_widgets.$const112$BaseKB, (SubLObject)api_widgets.$list113);
        if (api_widgets.NIL != results) {
            SubLObject current;
            final SubLObject datum = current = results.first();
            SubLObject hostname = (SubLObject)api_widgets.NIL;
            SubLObject port = (SubLObject)api_widgets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list114);
            hostname = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list114);
            port = current.first();
            current = current.rest();
            if (api_widgets.NIL == current) {
                return PrintLow.format((SubLObject)api_widgets.NIL, api_widgets.$sparql_endpoint_browser_format_string$.getGlobalValue(), new SubLObject[] { hostname, port, web_utilities.html_url_encode(term_identifier, (SubLObject)api_widgets.UNPROVIDED) });
            }
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list114);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 27055L)
    public static SubLObject get_term_list_as_renderings_with_fact_sheets_stripped(SubLObject cycl_term_list, SubLObject mt, final SubLObject force, SubLObject generation_mt, SubLObject should_sortP, SubLObject nl_preds, SubLObject filter_irrelevant_termsP) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (should_sortP == api_widgets.UNPROVIDED) {
            should_sortP = (SubLObject)api_widgets.T;
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = (SubLObject)ConsesLow.list(api_widgets.$const96$nonPlural_Generic);
        }
        if (filter_irrelevant_termsP == api_widgets.UNPROVIDED) {
            filter_irrelevant_termsP = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        mt = hlmt_czer.coerce_to_hlmt(mt);
        generation_mt = hlmt_czer.coerce_to_hlmt(generation_mt);
        if (api_widgets.NIL != filter_irrelevant_termsP) {
            cycl_term_list = rkf_relevance_utilities.rkf_filter_irrelevant_terms(cycl_term_list, mt);
        }
        final SubLObject fact_sheet_table = Hashtables.make_hash_table((SubLObject)api_widgets.TEN_INTEGER, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        final SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
        try {
            pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)api_widgets.NIL, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$23 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
            try {
                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                final SubLObject reuseP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    thread.resetMultipleValues();
                    final SubLObject _prev_bind_0_$24 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                    try {
                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                        final SubLObject new_or_reused = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$25 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                            final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                            final SubLObject _prev_bind_0_$26 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                try {
                                    final SubLObject _prev_bind_0_$27 = pph_vars.$pph_language_mt$.currentBinding(thread);
                                    final SubLObject _prev_bind_2 = pph_vars.$pph_domain_mt$.currentBinding(thread);
                                    try {
                                        pph_vars.$pph_language_mt$.bind((api_widgets.NIL != generation_mt) ? pph_utilities.pph_canonicalize_hlmt(generation_mt) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
                                        pph_vars.$pph_domain_mt$.bind((api_widgets.NIL != mt) ? pph_utilities.pph_canonicalize_hlmt(mt) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
                                        SubLObject cdolist_list_var = cycl_term_list;
                                        SubLObject v_term = (SubLObject)api_widgets.NIL;
                                        v_term = cdolist_list_var.first();
                                        while (api_widgets.NIL != cdolist_list_var) {
                                            Hashtables.sethash(v_term, fact_sheet_table, convert_mini_html_to_text(fact_sheets.get_fact_sheet_for_term_in_html(v_term, (SubLObject)api_widgets.$kw98$MINI, mt, generation_mt, (SubLObject)api_widgets.$list99).first()));
                                            cdolist_list_var = cdolist_list_var.rest();
                                            v_term = cdolist_list_var.first();
                                        }
                                    }
                                    finally {
                                        pph_vars.$pph_domain_mt$.rebind(_prev_bind_2, thread);
                                        pph_vars.$pph_language_mt$.rebind(_prev_bind_0_$27, thread);
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$28 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$28, thread);
                                    }
                                }
                            }
                            finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0_$26, thread);
                            }
                        }
                        finally {
                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$25, thread);
                        }
                        if (new_or_reused == api_widgets.$kw77$NEW && api_widgets.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                            memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                        }
                    }
                    finally {
                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$24, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$29 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (api_widgets.NIL == reuseP) {
                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$29, thread);
                    }
                }
            }
            finally {
                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$23, thread);
            }
        }
        finally {
            pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
        }
        final SubLObject renderings_lists = convert_term_list_to_renderings_for_java(cycl_term_list, mt, force, nl_preds, generation_mt, should_sortP, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject result = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var2 = renderings_lists;
        SubLObject renderings_list = (SubLObject)api_widgets.NIL;
        renderings_list = cdolist_list_var2.first();
        while (api_widgets.NIL != cdolist_list_var2) {
            SubLObject current;
            final SubLObject datum = current = renderings_list;
            SubLObject rendering = (SubLObject)api_widgets.NIL;
            SubLObject v_term2 = (SubLObject)api_widgets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list100);
            rendering = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list100);
            v_term2 = current.first();
            current = current.rest();
            if (api_widgets.NIL == current) {
                result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(rendering, v_term2, Hashtables.gethash(v_term2, fact_sheet_table, (SubLObject)api_widgets.UNPROVIDED)), result);
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list100);
            }
            cdolist_list_var2 = cdolist_list_var2.rest();
            renderings_list = cdolist_list_var2.first();
        }
        result = Sequences.nreverse(result);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 28444L)
    public static SubLObject convert_mini_html_to_text(final SubLObject mini_html_string) {
        SubLObject lines = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = string_utilities.string_tokenize(html_utilities.remove_html_tags(mini_html_string, (SubLObject)api_widgets.UNPROVIDED), (SubLObject)api_widgets.$list117, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject l = (SubLObject)api_widgets.NIL;
        l = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject trimmed_line = string_utilities.trim_whitespace(l);
            if (api_widgets.NIL != string_utilities.non_empty_string_p(trimmed_line) && !trimmed_line.equal(api_widgets.$mini_fact_sheet_to_fact_sheet_link_text$.getGlobalValue())) {
                lines = (SubLObject)ConsesLow.cons(trimmed_line, lines);
            }
            cdolist_list_var = cdolist_list_var.rest();
            l = cdolist_list_var.first();
        }
        return string_utilities.bunge(Sequences.nreverse(lines), (SubLObject)Characters.CHAR_semicolon);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 29000L)
    public static SubLObject convert_term_list_to_renderings_for_java(final SubLObject term_list, SubLObject domain_mt, SubLObject force, SubLObject nl_preds, SubLObject generation_mt, SubLObject should_sortP, SubLObject disambiguateP, SubLObject fastP) {
        if (domain_mt == api_widgets.UNPROVIDED) {
            domain_mt = pph_vars.$pph_domain_mt$.getDynamicValue();
        }
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw81$NONE;
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = (SubLObject)ConsesLow.list(api_widgets.$const96$nonPlural_Generic);
        }
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (should_sortP == api_widgets.UNPROVIDED) {
            should_sortP = (SubLObject)api_widgets.T;
        }
        if (disambiguateP == api_widgets.UNPROVIDED) {
            disambiguateP = (SubLObject)api_widgets.T;
        }
        if (fastP == api_widgets.UNPROVIDED) {
            fastP = (SubLObject)api_widgets.T;
        }
        return convert_term_list_to_renderings_for_java_int(term_list, domain_mt, force, nl_preds, generation_mt, should_sortP, disambiguateP, fastP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 29470L)
    public static SubLObject convert_term_list_to_renderings_for_java_int_internal(SubLObject term_list, final SubLObject domain_mt, final SubLObject force, final SubLObject nl_preds, final SubLObject generation_mt, final SubLObject should_sortP, SubLObject disambiguateP, SubLObject fastP) {
        if (disambiguateP == api_widgets.UNPROVIDED) {
            disambiguateP = (SubLObject)api_widgets.T;
        }
        if (fastP == api_widgets.UNPROVIDED) {
            fastP = (SubLObject)api_widgets.T;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        term_list = Sequences.delete_if(Symbols.symbol_function((SubLObject)api_widgets.$sym120$NULL), conses_high.copy_list(term_list), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject result_nl = (SubLObject)api_widgets.NIL;
        SubLObject result = (SubLObject)api_widgets.NIL;
        final SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
        try {
            pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)api_widgets.NIL, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$30 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
            try {
                pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                final SubLObject reuseP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    thread.resetMultipleValues();
                    final SubLObject _prev_bind_0_$31 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                    try {
                        pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                        final SubLObject new_or_reused = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$32 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                            final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                            final SubLObject _prev_bind_0_$33 = memoization_state.$memoization_state$.currentBinding(thread);
                            try {
                                memoization_state.$memoization_state$.bind(local_state, thread);
                                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                try {
                                    final SubLObject _prev_bind_0_$34 = pph_vars.$pph_language_mt$.currentBinding(thread);
                                    final SubLObject _prev_bind_2 = pph_vars.$pph_domain_mt$.currentBinding(thread);
                                    final SubLObject _prev_bind_3 = pph_vars.$pph_track_discourse_referentsP$.currentBinding(thread);
                                    try {
                                        pph_vars.$pph_language_mt$.bind((api_widgets.NIL != generation_mt) ? pph_utilities.pph_canonicalize_hlmt(generation_mt) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
                                        pph_vars.$pph_domain_mt$.bind((api_widgets.NIL != domain_mt) ? pph_utilities.pph_canonicalize_hlmt(domain_mt) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
                                        pph_vars.$pph_track_discourse_referentsP$.bind((SubLObject)api_widgets.NIL, thread);
                                        if (api_widgets.NIL != disambiguateP) {
                                            result_nl = pph_main.generate_disambiguation_phrases_for_java(term_list, force, nl_preds, generation_mt, domain_mt, (SubLObject)api_widgets.NIL, (SubLObject)((api_widgets.NIL != fastP) ? api_widgets.$kw121$REQUIRED : api_widgets.$kw122$PREFERRED));
                                        }
                                        else {
                                            SubLObject cdolist_list_var = Sequences.reverse(term_list);
                                            SubLObject v_term = (SubLObject)api_widgets.NIL;
                                            v_term = cdolist_list_var.first();
                                            while (api_widgets.NIL != cdolist_list_var) {
                                                result_nl = (SubLObject)ConsesLow.cons(pph_main.generate_phrase_for_java(v_term, nl_preds, force, generation_mt, domain_mt, (SubLObject)api_widgets.$kw123$HTML), result_nl);
                                                cdolist_list_var = cdolist_list_var.rest();
                                                v_term = cdolist_list_var.first();
                                            }
                                        }
                                    }
                                    finally {
                                        pph_vars.$pph_track_discourse_referentsP$.rebind(_prev_bind_3, thread);
                                        pph_vars.$pph_domain_mt$.rebind(_prev_bind_2, thread);
                                        pph_vars.$pph_language_mt$.rebind(_prev_bind_0_$34, thread);
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$35 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$35, thread);
                                    }
                                }
                            }
                            finally {
                                memoization_state.$memoization_state$.rebind(_prev_bind_0_$33, thread);
                            }
                        }
                        finally {
                            pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$32, thread);
                        }
                        if (new_or_reused == api_widgets.$kw77$NEW && api_widgets.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                            memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                        }
                    }
                    finally {
                        pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$31, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$36 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (api_widgets.NIL == reuseP) {
                            pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$36, thread);
                    }
                }
            }
            finally {
                pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$30, thread);
            }
        }
        finally {
            pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
        }
        if (api_widgets.NIL != should_sortP) {
            thread.resetMultipleValues();
            final SubLObject sorted_nl = pph_main.alphabetize_pph_javalists(result_nl, term_list, (SubLObject)api_widgets.NIL);
            final SubLObject sorted_terms = thread.secondMultipleValue();
            thread.resetMultipleValues();
            result_nl = sorted_nl;
            term_list = sorted_terms;
        }
        SubLObject v_term2 = (SubLObject)api_widgets.NIL;
        SubLObject v_term_$37 = (SubLObject)api_widgets.NIL;
        SubLObject pph_javalist = (SubLObject)api_widgets.NIL;
        SubLObject pph_javalist_$38 = (SubLObject)api_widgets.NIL;
        v_term2 = term_list;
        v_term_$37 = v_term2.first();
        pph_javalist = result_nl;
        pph_javalist_$38 = pph_javalist.first();
        while (api_widgets.NIL != pph_javalist || api_widgets.NIL != v_term2) {
            if (api_widgets.NIL != pph_javalist_$38) {
                final SubLObject use_javalistsP = (SubLObject)api_widgets.T;
                final SubLObject nl = (api_widgets.NIL != use_javalistsP) ? pph_javalist_$38 : pph_utilities.pph_javalist_string(pph_javalist_$38);
                result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(nl, v_term_$37), result);
            }
            v_term2 = v_term2.rest();
            v_term_$37 = v_term2.first();
            pph_javalist = pph_javalist.rest();
            pph_javalist_$38 = pph_javalist.first();
        }
        return Sequences.nreverse(result);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 29470L)
    public static SubLObject convert_term_list_to_renderings_for_java_int(final SubLObject term_list, final SubLObject domain_mt, final SubLObject force, final SubLObject nl_preds, final SubLObject generation_mt, final SubLObject should_sortP, SubLObject disambiguateP, SubLObject fastP) {
        if (disambiguateP == api_widgets.UNPROVIDED) {
            disambiguateP = (SubLObject)api_widgets.T;
        }
        if (fastP == api_widgets.UNPROVIDED) {
            fastP = (SubLObject)api_widgets.T;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL == v_memoization_state) {
            return convert_term_list_to_renderings_for_java_int_internal(term_list, domain_mt, force, nl_preds, generation_mt, should_sortP, disambiguateP, fastP);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, (SubLObject)api_widgets.$sym119$CONVERT_TERM_LIST_TO_RENDERINGS_FOR_JAVA_INT, (SubLObject)api_widgets.UNPROVIDED);
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), (SubLObject)api_widgets.$sym119$CONVERT_TERM_LIST_TO_RENDERINGS_FOR_JAVA_INT, (SubLObject)api_widgets.EIGHT_INTEGER, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, (SubLObject)api_widgets.$sym119$CONVERT_TERM_LIST_TO_RENDERINGS_FOR_JAVA_INT, caching_state);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_8(term_list, domain_mt, force, nl_preds, generation_mt, should_sortP, disambiguateP, fastP);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (term_list.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (domain_mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (force.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (nl_preds.equal(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (generation_mt.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (should_sortP.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (disambiguateP.equal(cached_args.first())) {
                                            cached_args = cached_args.rest();
                                            if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && fastP.equal(cached_args.first())) {
                                                return memoization_state.caching_results(results2);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(thread.resetMultipleValues(), (SubLObject)Values.multiple_value_list(convert_term_list_to_renderings_for_java_int_internal(term_list, domain_mt, force, nl_preds, generation_mt, should_sortP, disambiguateP, fastP)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(term_list, domain_mt, force, nl_preds, generation_mt, should_sortP, disambiguateP, fastP));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 30806L)
    public static SubLObject salient_instantiation_exemplars(final SubLObject collection, final SubLObject max_count, SubLObject instantiation_type) {
        if (instantiation_type == api_widgets.UNPROVIDED) {
            instantiation_type = (SubLObject)api_widgets.$kw80$ALL_INSTANTIATIONS;
        }
        final SubLObject v_instances = (instantiation_type == api_widgets.$kw80$ALL_INSTANTIATIONS) ? rkf_ontology_utilities.rkf_all_instantiations(collection, (SubLObject)api_widgets.NIL) : rkf_ontology_utilities.rkf_instantiations(collection, (SubLObject)api_widgets.NIL);
        final SubLObject attack_order = Sort.sort(v_instances, Symbols.symbol_function((SubLObject)api_widgets.$sym125$_), Symbols.symbol_function((SubLObject)api_widgets.$sym126$NUM_INDEX));
        return list_utilities.first_n(max_count, attack_order);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 31380L)
    public static SubLObject get_example_instances_as_renderings_int(final SubLObject collection, final SubLObject max_count, final SubLObject should_sortP, final SubLObject instantiation_type, final SubLObject force, final SubLObject domain_mt, final SubLObject generation_mt, final SubLObject nl_preds) {
        assert api_widgets.NIL != kb_accessors.set_or_collectionP(collection) : collection;
        final SubLObject v_instances = salient_instantiation_exemplars(collection, max_count, instantiation_type);
        final SubLObject result = convert_term_list_to_renderings_for_java(v_instances, domain_mt, force, nl_preds, generation_mt, should_sortP, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 32992L)
    public static SubLObject get_example_instances_as_renderings_new(final SubLObject collection, final SubLObject count, SubLObject mt, SubLObject instantiation_type, SubLObject mt_direction_type, SubLObject should_sortP, SubLObject force, SubLObject generation_mt, SubLObject nl_preds) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const21$InferencePSC;
        }
        if (instantiation_type == api_widgets.UNPROVIDED) {
            instantiation_type = (SubLObject)api_widgets.$kw80$ALL_INSTANTIATIONS;
        }
        if (mt_direction_type == api_widgets.UNPROVIDED) {
            mt_direction_type = (SubLObject)api_widgets.$kw84$ANY_MT;
        }
        if (should_sortP == api_widgets.UNPROVIDED) {
            should_sortP = (SubLObject)api_widgets.T;
        }
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw81$NONE;
        }
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = default_nl_preds_for_type_list(collection, generation_mt);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (api_widgets.NIL == kb_accessors.set_or_collectionP(collection)) {
            return (SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.MINUS_ONE_INTEGER);
        }
        if (api_widgets.NIL != mt) {
            mt = hlmt_czer.coerce_to_hlmt(mt);
        }
        if (api_widgets.NIL != generation_mt) {
            generation_mt = hlmt_czer.coerce_to_hlmt(generation_mt);
        }
        SubLObject result = (SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.MINUS_ONE_INTEGER);
        final SubLObject _prev_bind_0 = pph_vars.$pph_language_mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = pph_vars.$pph_domain_mt$.currentBinding(thread);
        try {
            pph_vars.$pph_language_mt$.bind((api_widgets.NIL != generation_mt) ? pph_utilities.pph_canonicalize_hlmt(generation_mt) : pph_vars.$pph_language_mt$.getDynamicValue(thread), thread);
            pph_vars.$pph_domain_mt$.bind((api_widgets.NIL != mt) ? pph_utilities.pph_canonicalize_hlmt(mt) : pph_vars.$pph_domain_mt$.getDynamicValue(thread), thread);
            if (mt_direction_type == api_widgets.$kw84$ANY_MT) {
                final SubLObject _prev_bind_0_$39 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_1_$40 = mt_relevance_macros.$mt$.currentBinding(thread);
                try {
                    mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym20$RELEVANT_MT_IS_ANY_MT, thread);
                    mt_relevance_macros.$mt$.bind(api_widgets.$const21$InferencePSC, thread);
                    result = get_example_instances_as_renderings_int(collection, count, should_sortP, instantiation_type, force, mt, generation_mt, nl_preds);
                }
                finally {
                    mt_relevance_macros.$mt$.rebind(_prev_bind_1_$40, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$39, thread);
                }
            }
            else if (mt_direction_type == api_widgets.$kw86$LOCAL_CHANGE) {
                final SubLObject _prev_bind_0_$40 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_1_$41 = mt_relevance_macros.$mt$.currentBinding(thread);
                try {
                    mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym36$RELEVANT_MT_IS_EQ, thread);
                    mt_relevance_macros.$mt$.bind(mt, thread);
                    result = get_example_instances_as_renderings_int(collection, count, should_sortP, instantiation_type, force, mt, generation_mt, nl_preds);
                }
                finally {
                    mt_relevance_macros.$mt$.rebind(_prev_bind_1_$41, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$40, thread);
                }
            }
            else if (mt_direction_type == api_widgets.$kw87$UPWARD_CLOSURE) {
                final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
                final SubLObject _prev_bind_0_$41 = mt_relevance_macros.$mt$.currentBinding(thread);
                final SubLObject _prev_bind_1_$42 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                try {
                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                    result = get_example_instances_as_renderings_int(collection, count, should_sortP, instantiation_type, force, mt, generation_mt, nl_preds);
                }
                finally {
                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$42, thread);
                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$41, thread);
                }
            }
            else if (mt_direction_type == api_widgets.$kw88$DOWNWARD_CLOSURE) {
                final SubLObject _prev_bind_0_$42 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_1_$43 = mt_relevance_macros.$mt$.currentBinding(thread);
                try {
                    mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym89$RELEVANT_MT_IS_SPEC_MT, thread);
                    mt_relevance_macros.$mt$.bind(mt, thread);
                    result = get_example_instances_as_renderings_int(collection, count, should_sortP, instantiation_type, force, mt, generation_mt, nl_preds);
                }
                finally {
                    mt_relevance_macros.$mt$.rebind(_prev_bind_1_$43, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$42, thread);
                }
            }
        }
        finally {
            pph_vars.$pph_domain_mt$.rebind(_prev_bind_2, thread);
            pph_vars.$pph_language_mt$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 35532L)
    public static SubLObject clear_get_example_instances_as_renderings() {
        final SubLObject cs = api_widgets.$get_example_instances_as_renderings_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 35532L)
    public static SubLObject remove_get_example_instances_as_renderings(final SubLObject collection, final SubLObject mt, final SubLObject force, final SubLObject count, SubLObject generation_mt, SubLObject nl_preds) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = default_nl_preds_for_type_list(collection, generation_mt);
        }
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_example_instances_as_renderings_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(collection, mt, force, count, generation_mt, nl_preds), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 35532L)
    public static SubLObject get_example_instances_as_renderings_internal(final SubLObject collection, SubLObject mt, final SubLObject force, final SubLObject count, SubLObject generation_mt, final SubLObject nl_preds) {
        assert api_widgets.NIL != kb_accessors.set_or_collectionP(collection) : collection;
        mt = hlmt_czer.coerce_to_hlmt(mt);
        generation_mt = hlmt_czer.coerce_to_hlmt(generation_mt);
        final SubLObject result = convert_term_list_to_renderings_for_java(get_salient_exemplars(collection, mt, count), mt, force, nl_preds, generation_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        return Sort.sort(result, Symbols.symbol_function((SubLObject)api_widgets.$sym93$PPH_LIST_ITEM_COMPARATOR), (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 35532L)
    public static SubLObject get_example_instances_as_renderings(final SubLObject collection, final SubLObject mt, final SubLObject force, final SubLObject count, SubLObject generation_mt, SubLObject nl_preds) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = default_nl_preds_for_type_list(collection, generation_mt);
        }
        SubLObject caching_state = api_widgets.$get_example_instances_as_renderings_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym128$GET_EXAMPLE_INSTANCES_AS_RENDERINGS, (SubLObject)api_widgets.$sym129$_GET_EXAMPLE_INSTANCES_AS_RENDERINGS_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.SIX_INTEGER, (SubLObject)api_widgets.$int38$256);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_6(collection, mt, force, count, generation_mt, nl_preds);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (collection.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (force.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (count.equal(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (generation_mt.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && nl_preds.equal(cached_args.first())) {
                                        return memoization_state.caching_results(results2);
                                    }
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_example_instances_as_renderings_internal(collection, mt, force, count, generation_mt, nl_preds)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(collection, mt, force, count, generation_mt, nl_preds));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 36132L)
    public static SubLObject clear_get_salient_exemplars() {
        final SubLObject cs = api_widgets.$get_salient_exemplars_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 36132L)
    public static SubLObject remove_get_salient_exemplars(final SubLObject collection, final SubLObject mt, final SubLObject count) {
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_salient_exemplars_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(collection, mt, count), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 36132L)
    public static SubLObject get_salient_exemplars_internal(final SubLObject collection, final SubLObject mt, final SubLObject count) {
        return rkf_ontology_utilities.rkf_salient_instantiation_exemplars(collection, mt, count, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 36132L)
    public static SubLObject get_salient_exemplars(final SubLObject collection, final SubLObject mt, final SubLObject count) {
        SubLObject caching_state = api_widgets.$get_salient_exemplars_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym130$GET_SALIENT_EXEMPLARS, (SubLObject)api_widgets.$sym131$_GET_SALIENT_EXEMPLARS_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.THREE_INTEGER, (SubLObject)api_widgets.$int38$256);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(collection, mt, count);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (collection.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && count.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_salient_exemplars_internal(collection, mt, count)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(collection, mt, count));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 36292L)
    public static SubLObject get_collection_extent_estimates(final SubLObject collection, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (api_widgets.NIL == forts.fort_p(collection)) {
            return (SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.ZERO_INTEGER);
        }
        final SubLObject completely_knownP = kb_accessors.completely_enumerable_collectionP(collection, mt);
        final SubLObject estimate = cardinality_estimates.instance_cardinality(collection);
        SubLObject result = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != completely_knownP || estimate.isZero()) {
            result = (SubLObject)ConsesLow.list((SubLObject)api_widgets.T, Sequences.length(get_collection_instances(collection, mt, (SubLObject)api_widgets.UNPROVIDED)));
        }
        else {
            final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
            try {
                mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym133$RELEVANT_MT_IS_GENL_MT, thread);
                mt_relevance_macros.$mt$.bind(mt, thread);
                result = (SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, estimate);
            }
            finally {
                mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 36805L)
    public static SubLObject naut_isas_completely_enumerable(final SubLObject naut, SubLObject mt) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject any_not_enumerable = (SubLObject)api_widgets.NIL;
        SubLObject isas = (SubLObject)api_widgets.NIL;
        final SubLObject mt_var = mt;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            SubLObject cdolist_list_var;
            isas = (cdolist_list_var = isa.naut_isa(naut, (SubLObject)api_widgets.UNPROVIDED));
            SubLObject cur_isa = (SubLObject)api_widgets.NIL;
            cur_isa = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                if (api_widgets.NIL == kb_accessors.completely_enumerable_collectionP(cur_isa, (SubLObject)api_widgets.UNPROVIDED)) {
                    any_not_enumerable = (SubLObject)api_widgets.T;
                }
                cdolist_list_var = cdolist_list_var.rest();
                cur_isa = cdolist_list_var.first();
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == any_not_enumerable);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 37179L)
    public static SubLObject naut_isas_estimated_instances(final SubLObject naut, SubLObject mt) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject count = (SubLObject)api_widgets.ZERO_INTEGER;
        SubLObject isas = (SubLObject)api_widgets.NIL;
        final SubLObject mt_var = mt;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            SubLObject cdolist_list_var;
            isas = (cdolist_list_var = isa.naut_isa(naut, (SubLObject)api_widgets.UNPROVIDED));
            SubLObject cur_isa = (SubLObject)api_widgets.NIL;
            cur_isa = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                count = Numbers.add(count, cardinality_estimates.instance_cardinality(cur_isa));
                cdolist_list_var = cdolist_list_var.rest();
                cur_isa = cdolist_list_var.first();
            }
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return count;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 37462L)
    public static SubLObject get_detailed_instance_estimates(final SubLObject collection, final SubLObject instantiation_type, final SubLObject count, SubLObject max_to_get_precisely) {
        if (max_to_get_precisely == api_widgets.UNPROVIDED) {
            max_to_get_precisely = (SubLObject)api_widgets.$int134$500;
        }
        if (count.numG(max_to_get_precisely)) {
            return count;
        }
        return Sequences.length((instantiation_type == api_widgets.$kw80$ALL_INSTANTIATIONS) ? rkf_ontology_utilities.rkf_all_instantiations(collection, (SubLObject)api_widgets.UNPROVIDED) : rkf_ontology_utilities.rkf_instantiations(collection, (SubLObject)api_widgets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 37833L)
    public static SubLObject get_collection_extent_estimates_int(final SubLObject collection, final SubLObject instantiation_type, SubLObject max_to_get_precisely) {
        if (max_to_get_precisely == api_widgets.UNPROVIDED) {
            max_to_get_precisely = (SubLObject)api_widgets.$int134$500;
        }
        if (api_widgets.NIL != isa.isaP(collection, api_widgets.$const135$Set_Mathematical, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) {
            final SubLObject completely_knownP = (SubLObject)api_widgets.NIL;
            final SubLObject estimate = Sequences.length((instantiation_type == api_widgets.$kw80$ALL_INSTANTIATIONS) ? rkf_ontology_utilities.rkf_all_instantiations(collection, (SubLObject)api_widgets.UNPROVIDED) : rkf_ontology_utilities.rkf_instantiations(collection, (SubLObject)api_widgets.UNPROVIDED));
            return (SubLObject)ConsesLow.list(completely_knownP, estimate);
        }
        if (api_widgets.NIL != el_utilities.possibly_naut_p(collection)) {
            final SubLObject completely_knownP = naut_isas_completely_enumerable(collection, (SubLObject)api_widgets.UNPROVIDED);
            SubLObject estimate = naut_isas_estimated_instances(collection, (SubLObject)api_widgets.UNPROVIDED);
            estimate = get_detailed_instance_estimates(collection, instantiation_type, estimate, max_to_get_precisely);
            return (SubLObject)ConsesLow.list(completely_knownP, estimate);
        }
        final SubLObject completely_knownP = kb_accessors.completely_enumerable_collectionP(collection, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject estimate = cardinality_estimates.instance_cardinality(collection);
        SubLObject result = (SubLObject)api_widgets.NIL;
        estimate = get_detailed_instance_estimates(collection, instantiation_type, estimate, max_to_get_precisely);
        result = (SubLObject)ConsesLow.list(completely_knownP, estimate);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 39467L)
    public static SubLObject get_collection_extent_estimates_new(final SubLObject collection, SubLObject mt, final SubLObject instantiation_type, final SubLObject mt_direction_type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (api_widgets.NIL == kb_accessors.set_or_collectionP(collection)) {
            return (SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.MINUS_ONE_INTEGER);
        }
        if (api_widgets.NIL != mt) {
            mt = hlmt_czer.coerce_to_hlmt(mt);
        }
        SubLObject result = (SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.MINUS_ONE_INTEGER);
        if (mt_direction_type == api_widgets.$kw84$ANY_MT) {
            final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
            try {
                mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym20$RELEVANT_MT_IS_ANY_MT, thread);
                mt_relevance_macros.$mt$.bind(api_widgets.$const21$InferencePSC, thread);
                result = get_collection_extent_estimates_int(collection, instantiation_type, (SubLObject)api_widgets.UNPROVIDED);
            }
            finally {
                mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
            }
        }
        else if (mt_direction_type == api_widgets.$kw86$LOCAL_CHANGE) {
            final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
            try {
                mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym36$RELEVANT_MT_IS_EQ, thread);
                mt_relevance_macros.$mt$.bind(mt, thread);
                result = get_collection_extent_estimates_int(collection, instantiation_type, (SubLObject)api_widgets.UNPROVIDED);
            }
            finally {
                mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
            }
        }
        else if (mt_direction_type == api_widgets.$kw87$UPWARD_CLOSURE) {
            final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(mt);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_4 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_5 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                result = get_collection_extent_estimates_int(collection, instantiation_type, (SubLObject)api_widgets.UNPROVIDED);
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_5, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_4, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_3, thread);
            }
        }
        else if (mt_direction_type == api_widgets.$kw88$DOWNWARD_CLOSURE) {
            final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
            try {
                mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym89$RELEVANT_MT_IS_SPEC_MT, thread);
                mt_relevance_macros.$mt$.bind(mt, thread);
                result = get_collection_extent_estimates_int(collection, instantiation_type, (SubLObject)api_widgets.UNPROVIDED);
            }
            finally {
                mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 41182L)
    public static SubLObject create_new_instance_from_template(final SubLObject name, final SubLObject assert_elmt, final SubLObject template_id, SubLObject template_elmt, SubLObject prefix, SubLObject html_state) {
        if (template_elmt == api_widgets.UNPROVIDED) {
            template_elmt = api_widgets.$const21$InferencePSC;
        }
        if (prefix == api_widgets.UNPROVIDED) {
            prefix = (SubLObject)api_widgets.$str138$;
        }
        if (html_state == api_widgets.UNPROVIDED) {
            html_state = (SubLObject)api_widgets.NIL;
        }
        assert api_widgets.NIL != Types.stringp(prefix) : prefix;
        assert api_widgets.NIL != Types.stringp(name) : name;
        assert api_widgets.NIL != hlmt.possibly_mt_p(assert_elmt) : assert_elmt;
        assert api_widgets.NIL != hlmt.possibly_mt_p(template_elmt) : template_elmt;
        final SubLObject isas = formula_template_utilities.template_type_for_focal_term_types(template_id, template_elmt);
        final SubLObject v_genls = formula_template_utilities.template_topic_genls(template_id, template_elmt);
        return rkf_term_utilities.create_new_constant(name, isas, v_genls, assert_elmt, prefix, html_state, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 42088L)
    public static SubLObject kill_constant(final SubLObject constant) {
        return kill_fort(constant);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 42161L)
    public static SubLObject kill_fort(final SubLObject fort) {
        assert api_widgets.NIL != forts.fort_p(fort) : fort;
        SubLObject col_mt_combos = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var;
        final SubLObject isa_assertions = cdolist_list_var = get_all_isa_assertions_for_fort(fort);
        SubLObject isa_assertion = (SubLObject)api_widgets.NIL;
        isa_assertion = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject formula = uncanonicalizer.assertion_el_formula(isa_assertion);
            final SubLObject predicate = cycl_utilities.formula_arg0(formula);
            final SubLObject collection = cycl_utilities.formula_arg2(formula, (SubLObject)api_widgets.UNPROVIDED);
            final SubLObject mt = assertions_high.assertion_mt(isa_assertion);
            if (predicate.eql(api_widgets.$const52$isa)) {
                col_mt_combos = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.cons(collection, mt), col_mt_combos);
            }
            cdolist_list_var = cdolist_list_var.rest();
            isa_assertion = cdolist_list_var.first();
        }
        rkf_term_utilities.rkf_kill(fort);
        SubLObject cdolist_list_var2 = col_mt_combos;
        SubLObject col_mt_combo = (SubLObject)api_widgets.NIL;
        col_mt_combo = cdolist_list_var2.first();
        while (api_widgets.NIL != cdolist_list_var2) {
            SubLObject current;
            final SubLObject datum = current = col_mt_combo;
            SubLObject collection2 = (SubLObject)api_widgets.NIL;
            SubLObject mt2 = (SubLObject)api_widgets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list142);
            collection2 = current.first();
            current = (mt2 = current.rest());
            recheck_collection_instances_cooccurence_cache(collection2, mt2);
            cdolist_list_var2 = cdolist_list_var2.rest();
            col_mt_combo = cdolist_list_var2.first();
        }
        return (SubLObject)api_widgets.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 42949L)
    public static SubLObject get_all_isa_assertions_for_fort(final SubLObject fort) {
        final SubLObject variable = (SubLObject)api_widgets.$sym143$_WHAT;
        final SubLObject binding_sets = rkf_query_utilities.rkf_query((SubLObject)ConsesLow.list(api_widgets.$const51$assertedSentence, (SubLObject)ConsesLow.list(api_widgets.$const52$isa, fort, variable)), api_widgets.$const21$InferencePSC, (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject assertions = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = binding_sets;
        SubLObject binding_set = (SubLObject)api_widgets.NIL;
        binding_set = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = binding_set;
            SubLObject v_bindings = (SubLObject)api_widgets.NIL;
            SubLObject assertion_list = (SubLObject)api_widgets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list144);
            v_bindings = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list144);
            assertion_list = current.first();
            current = current.rest();
            if (api_widgets.NIL == current) {
                SubLObject cdolist_list_var_$47 = assertion_list;
                SubLObject assertion = (SubLObject)api_widgets.NIL;
                assertion = cdolist_list_var_$47.first();
                while (api_widgets.NIL != cdolist_list_var_$47) {
                    assertions = (SubLObject)ConsesLow.cons(assertion, assertions);
                    cdolist_list_var_$47 = cdolist_list_var_$47.rest();
                    assertion = cdolist_list_var_$47.first();
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list144);
            }
            cdolist_list_var = cdolist_list_var.rest();
            binding_set = cdolist_list_var.first();
        }
        return assertions;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 43442L)
    public static SubLObject clear_get_reformulation_specification_from_kb() {
        final SubLObject cs = api_widgets.$get_reformulation_specification_from_kb_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 43442L)
    public static SubLObject remove_get_reformulation_specification_from_kb(final SubLObject refspec_id, final SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_reformulation_specification_from_kb_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(refspec_id, mt), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 43442L)
    public static SubLObject get_reformulation_specification_from_kb_internal(final SubLObject refspec_id, final SubLObject mt) {
        return reformulation_specification.load_reformulation_specification_from_kb(refspec_id, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 43442L)
    public static SubLObject get_reformulation_specification_from_kb(final SubLObject refspec_id, final SubLObject mt) {
        SubLObject caching_state = api_widgets.$get_reformulation_specification_from_kb_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym145$GET_REFORMULATION_SPECIFICATION_FROM_KB, (SubLObject)api_widgets.$sym146$_GET_REFORMULATION_SPECIFICATION_FROM_KB_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.ZERO_INTEGER);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(refspec_id, mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (refspec_id.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && mt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_reformulation_specification_from_kb_internal(refspec_id, mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(refspec_id, mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 43668L)
    public static SubLObject reformulate_unknown_fet_term(final SubLObject v_term, final SubLObject domain_mt, SubLObject refspec_id, SubLObject refspec_mt) {
        if (refspec_id == api_widgets.UNPROVIDED) {
            refspec_id = api_widgets.$const148$FET_UnknownTermReformulation;
        }
        if (refspec_mt == api_widgets.UNPROVIDED) {
            refspec_mt = api_widgets.$const149$FETReformulatorRulesMt;
        }
        final SubLObject settings = get_reformulation_specification_from_kb(refspec_id, refspec_mt);
        return reformulator_hub.reformulate_cycl(v_term, domain_mt, settings);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 44106L)
    public static SubLObject make_fet_evaluation_assertion(SubLObject assertion_sentence, SubLObject assertion_elmt, SubLObject primary_term, final SubLObject new_evaluation_pred, SubLObject refspec_id, SubLObject refspec_mt, SubLObject evaluation_mt) {
        if (refspec_id == api_widgets.UNPROVIDED) {
            refspec_id = (SubLObject)api_widgets.NIL;
        }
        if (refspec_mt == api_widgets.UNPROVIDED) {
            refspec_mt = (SubLObject)api_widgets.NIL;
        }
        if (evaluation_mt == api_widgets.UNPROVIDED) {
            evaluation_mt = api_widgets.$fet_evaluation_mt$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != cycl_grammar.cycl_sentence_p(assertion_sentence) : assertion_sentence;
        assert api_widgets.NIL != hlmt.possibly_mt_p(assertion_elmt) : assertion_elmt;
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(primary_term) : primary_term;
        if (api_widgets.NIL != new_evaluation_pred && !api_widgets.assertionsDisabledSynth && api_widgets.NIL == fort_types_interface.predicateP(new_evaluation_pred)) {
            throw new AssertionError(new_evaluation_pred);
        }
        if (api_widgets.NIL == constants_high.find_constant((SubLObject)api_widgets.$str155$EvaluationOfAssertionByOnFn)) {
            return Values.values((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.$str156$Couldn_t_find_constant___Evaluati);
        }
        primary_term = czer_main.coerce_to_fort(primary_term);
        assertion_elmt = cycl_utilities.hl_to_el(assertion_elmt);
        if (api_widgets.NIL != contains_mt_indexical_referencesP(assertion_sentence)) {
            assertion_sentence = resolve_mt_indexical_references(assertion_sentence, assertion_elmt);
        }
        thread.resetMultipleValues();
        final SubLObject query_sentence = formula_templates.get_assertion_finding_query_sentence(assertion_sentence, (SubLObject)api_widgets.NIL);
        final SubLObject original_query = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (api_widgets.NIL != query_sentence) {
            final SubLObject max_number = (SubLObject)api_widgets.ONE_INTEGER;
            final SubLObject reassemble_polycanonicalized_assertionsP = (SubLObject)api_widgets.NIL;
            final SubLObject assertion_hlmt = hlmt_czer.coerce_to_hlmt(assertion_elmt);
            final SubLObject check_reformulationsP = list_utilities.sublisp_boolean(refspec_id);
            final SubLObject assertion = formula_templates.get_assertions_for_fet_sentence(query_sentence, primary_term, assertion_hlmt, max_number, original_query, (SubLObject)api_widgets.NIL, reassemble_polycanonicalized_assertionsP, check_reformulationsP).first();
            if (api_widgets.NIL != assertion) {
                assertion_sentence = uncanonicalizer.assertion_el_formula(assertion);
                assertion_elmt = uncanonicalizer.assertion_elmt(assertion);
            }
        }
        final SubLObject evaluation_target;
        final SubLObject ist_form = evaluation_target = el_utilities.make_ist_sentence(assertion_elmt, assertion_sentence);
        final SubLObject evaluator = operation_communication.the_cyclist();
        final SubLObject pre_existing_evaluations = existing_fet_evaluations_of_by(evaluation_target, evaluator);
        final SubLObject evaluation = (SubLObject)((api_widgets.NIL != new_evaluation_pred) ? make_fet_evaluation_of_by(evaluation_target, evaluator, evaluation_mt) : api_widgets.NIL);
        final SubLObject sentence_to_assert = (SubLObject)((api_widgets.NIL != evaluation) ? el_utilities.make_binary_formula(api_widgets.$const157$evaluationOutputSentences, evaluation, el_utilities.make_unary_formula(new_evaluation_pred, assertion_sentence)) : api_widgets.NIL);
        SubLObject successP = (SubLObject)api_widgets.NIL;
        SubLObject error_message = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != sentence_to_assert) {
            thread.resetMultipleValues();
            final SubLObject successP_$48 = add_or_edit_assertion_internal(sentence_to_assert, primary_term, evaluation_mt, (SubLObject)api_widgets.NIL, refspec_id, refspec_mt, (SubLObject)api_widgets.NIL);
            final SubLObject error_message_$49 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            successP = successP_$48;
            error_message = error_message_$49;
        }
        else {
            successP = (SubLObject)api_widgets.T;
        }
        if (api_widgets.NIL != successP) {
            if (api_widgets.NIL == error_message) {
                SubLObject csome_list_var = pre_existing_evaluations;
                SubLObject pre_existing = (SubLObject)api_widgets.NIL;
                pre_existing = csome_list_var.first();
                while (api_widgets.NIL == error_message && api_widgets.NIL != csome_list_var) {
                    try {
                        thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                        final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                        try {
                            Errors.$error_handler$.bind((SubLObject)api_widgets.$sym28$CATCH_ERROR_MESSAGE_HANDLER, thread);
                            try {
                                rkf_term_utilities.rkf_kill(pre_existing);
                            }
                            catch (Throwable catch_var) {
                                Errors.handleThrowable(catch_var, (SubLObject)api_widgets.NIL);
                            }
                        }
                        finally {
                            Errors.$error_handler$.rebind(_prev_bind_0, thread);
                        }
                    }
                    catch (Throwable ccatch_env_var) {
                        error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                    }
                    finally {
                        thread.throwStack.pop();
                    }
                    csome_list_var = csome_list_var.rest();
                    pre_existing = csome_list_var.first();
                }
            }
            if (api_widgets.NIL != error_message && api_widgets.NIL != pre_existing_evaluations) {
                error_message = Sequences.cconcatenate((SubLObject)api_widgets.$str158$Couldn_t_remove_all_pre_existing_, error_message);
                successP = (SubLObject)api_widgets.NIL;
            }
        }
        return Values.values(successP, error_message);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 47416L)
    public static SubLObject make_fet_evaluation_of_by(final SubLObject evaluation_target, final SubLObject evaluator, SubLObject evaluation_mt) {
        if (evaluation_mt == api_widgets.UNPROVIDED) {
            evaluation_mt = api_widgets.$fet_evaluation_mt$.getDynamicValue();
        }
        final SubLObject timestamp = date_utilities.indexical_seconds_since_1970();
        final SubLObject pred = formula_templates.quaternary_fet_evaluation_pred();
        final SubLObject evaluation = rkf_term_utilities.create_new_constant((SubLObject)api_widgets.$str159$Evaluation, (SubLObject)api_widgets.$list160, (SubLObject)api_widgets.NIL, evaluation_mt, (SubLObject)api_widgets.$str161$FET, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        if (api_widgets.NIL != pred) {
            rkf_assertion_utilities.rkf_assert_now(el_utilities.make_quaternary_formula(pred, evaluation, evaluation_target, evaluator, timestamp), evaluation_mt);
        }
        return evaluation;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 47943L)
    public static SubLObject existing_fet_evaluations_of_by(final SubLObject evaluation_target, final SubLObject evaluator) {
        final SubLObject pred = formula_templates.quaternary_fet_evaluation_pred();
        return (SubLObject)((api_widgets.NIL != pred) ? ask_utilities.query_variable((SubLObject)api_widgets.$sym162$_EVALUATION, (SubLObject)ConsesLow.listS(pred, (SubLObject)api_widgets.$sym162$_EVALUATION, evaluation_target, evaluator, (SubLObject)api_widgets.$list163), api_widgets.$const21$InferencePSC, (SubLObject)api_widgets.$list164) : api_widgets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 48244L)
    public static SubLObject existing_fet_evaluations_of(final SubLObject evaluation_target) {
        final SubLObject pred = formula_templates.quaternary_fet_evaluation_pred();
        return (SubLObject)((api_widgets.NIL != pred) ? ask_utilities.query_variable((SubLObject)api_widgets.$sym162$_EVALUATION, (SubLObject)ConsesLow.listS(pred, (SubLObject)api_widgets.$sym162$_EVALUATION, evaluation_target, (SubLObject)api_widgets.$list165), api_widgets.$const21$InferencePSC, (SubLObject)api_widgets.$list164) : api_widgets.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 48533L)
    public static SubLObject add_or_edit_assertion_verbose(final SubLObject new_sentence, final SubLObject primary_term, final SubLObject elmt, final SubLObject old_sentence, SubLObject refspec_id, SubLObject refspec_mt) {
        if (refspec_id == api_widgets.UNPROVIDED) {
            refspec_id = (SubLObject)api_widgets.NIL;
        }
        if (refspec_mt == api_widgets.UNPROVIDED) {
            refspec_mt = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(primary_term) : primary_term;
        assert api_widgets.NIL != hlmt.possibly_mt_p(elmt) : elmt;
        thread.resetMultipleValues();
        final SubLObject successP = add_or_edit_assertion_internal(new_sentence, primary_term, elmt, old_sentence, refspec_id, refspec_mt, (SubLObject)api_widgets.T);
        final SubLObject reason = thread.secondMultipleValue();
        thread.resetMultipleValues();
        return (SubLObject)ConsesLow.list(successP, reason);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 49075L)
    public static SubLObject add_or_edit_assertion(final SubLObject new_sentence, final SubLObject primary_term, final SubLObject elmt, final SubLObject old_sentence, SubLObject refspec_id, SubLObject refspec_mt) {
        if (refspec_id == api_widgets.UNPROVIDED) {
            refspec_id = (SubLObject)api_widgets.NIL;
        }
        if (refspec_mt == api_widgets.UNPROVIDED) {
            refspec_mt = (SubLObject)api_widgets.NIL;
        }
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(primary_term) : primary_term;
        assert api_widgets.NIL != hlmt.possibly_mt_p(elmt) : elmt;
        return add_or_edit_assertion_internal(new_sentence, primary_term, elmt, old_sentence, refspec_id, refspec_mt, (SubLObject)api_widgets.T);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 49566L)
    public static SubLObject add_or_edit_assertion_internal(SubLObject new_sentence, SubLObject primary_term, SubLObject elmt, SubLObject old_sentence, SubLObject refspec_id, SubLObject refspec_mt, final SubLObject elify_sentencesP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        primary_term = czer_main.coerce_to_fort(primary_term);
        elmt = hlmt_czer.coerce_to_hlmt(elmt);
        if (api_widgets.NIL != new_sentence && api_widgets.NIL != elify_sentencesP) {
            new_sentence = cycl_utilities.hl_to_el(new_sentence);
            if (api_widgets.NIL != elify_sentencesP) {
                assert api_widgets.NIL != el_utilities.el_formula_p(new_sentence) : new_sentence;
            }
            else {
                assert api_widgets.NIL != cycl_grammar.cycl_formula_p(new_sentence) : new_sentence;
            }
        }
        if (api_widgets.NIL != old_sentence && api_widgets.NIL != elify_sentencesP) {
            old_sentence = cycl_utilities.hl_to_el(old_sentence);
            if (api_widgets.NIL != elify_sentencesP) {
                assert api_widgets.NIL != el_utilities.el_formula_p(old_sentence) : old_sentence;
            }
            else {
                assert api_widgets.NIL != cycl_grammar.cycl_formula_p(old_sentence) : old_sentence;
            }
        }
        if (api_widgets.NIL != refspec_id) {
            refspec_id = czer_main.coerce_to_fort(refspec_id);
        }
        if (api_widgets.NIL != refspec_mt) {
            refspec_mt = hlmt_czer.coerce_to_hlmt(refspec_mt);
        }
        else {
            refspec_mt = elmt;
        }
        if (new_sentence.equal(old_sentence)) {
            return Values.values((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str170$OLD____NEW__nothing_to_be_done_);
        }
        final SubLObject original_new_sentence = el_utilities.copy_expression(new_sentence);
        final SubLObject original_old_sentence = el_utilities.copy_expression(old_sentence);
        final SubLObject original_elmt = elmt;
        SubLObject reformulation_happenedP = (SubLObject)api_widgets.NIL;
        SubLObject result = (SubLObject)api_widgets.NIL;
        SubLObject problems = (SubLObject)api_widgets.NIL;
        thread.resetMultipleValues();
        final SubLObject old_sentence_$50 = reformulate_edit_sentences(old_sentence, new_sentence, elmt, refspec_id, refspec_mt);
        final SubLObject new_sentence_$51 = thread.secondMultipleValue();
        final SubLObject reformulation_happenedP_$52 = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        old_sentence = old_sentence_$50;
        new_sentence = new_sentence_$51;
        reformulation_happenedP = reformulation_happenedP_$52;
        if (api_widgets.NIL != original_old_sentence) {
            final SubLObject check_reformulationsP = list_utilities.sublisp_boolean(refspec_id);
            thread.resetMultipleValues();
            final SubLObject result_$53 = unassert_fet_sentence(original_old_sentence, primary_term, elmt, check_reformulationsP);
            final SubLObject problems_$54 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            result = result_$53;
            problems = problems_$54;
        }
        if (api_widgets.NIL != new_sentence) {
            if (api_widgets.NIL != el_utilities.el_formula_with_operator_p(new_sentence, api_widgets.$const108$ist)) {
                final SubLObject datum_evaluated_var = cycl_utilities.formula_args(new_sentence, (SubLObject)api_widgets.UNPROVIDED);
                elmt = datum_evaluated_var.first();
                new_sentence = conses_high.cadr(datum_evaluated_var);
            }
            thread.resetMultipleValues();
            final SubLObject successP = rkf_assertion_utilities.rkf_assert_with_implicature(new_sentence, elmt, (SubLObject)api_widgets.UNPROVIDED);
            final SubLObject reason = thread.secondMultipleValue();
            thread.resetMultipleValues();
            result = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL != successP && (api_widgets.NIL == original_old_sentence || api_widgets.NIL != result));
            problems = (reason.isString() ? (problems.isString() ? Sequences.cconcatenate(problems, new SubLObject[] { Characters.CHAR_newline, reason }) : reason) : problems);
        }
        if (api_widgets.NIL != new_sentence && api_widgets.NIL == result) {
            final SubLObject old_sentence_givenP = list_utilities.sublisp_boolean(original_old_sentence);
            final SubLObject string_form = build_string_form_for_future_assertion(new_sentence, old_sentence, old_sentence_givenP, problems);
            final SubLObject formula = (api_widgets.NIL != old_sentence_givenP) ? new_sentence : problems;
            result = rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(api_widgets.$const171$futureAssertion, primary_term, string_form, formula), elmt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            problems = api_widgets.$future_assertion_message_string$.getGlobalValue();
        }
        else if (api_widgets.NIL != reformulation_happenedP) {
            note_reformulation_happened((SubLObject)ConsesLow.list(api_widgets.$const108$ist, elmt, new_sentence), primary_term, original_new_sentence, refspec_id, original_elmt);
        }
        return Values.values(result, problems);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 52737L)
    public static SubLObject unassert_fet_sentence(final SubLObject original_old_sentence, final SubLObject primary_term, final SubLObject elmt, final SubLObject check_reformulationsP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)api_widgets.NIL;
        SubLObject problems = (SubLObject)api_widgets.NIL;
        thread.resetMultipleValues();
        final SubLObject query_sentence = formula_templates.get_assertion_finding_query_sentence(original_old_sentence, (SubLObject)api_widgets.NIL);
        final SubLObject original_query = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (api_widgets.NIL != query_sentence) {
            final SubLObject max_number = (SubLObject)api_widgets.NIL;
            final SubLObject reassemble_polycanonicalized_assertionsP = (SubLObject)api_widgets.NIL;
            final SubLObject assertions = formula_templates.get_assertions_for_fet_sentence(query_sentence, primary_term, elmt, max_number, original_query, (SubLObject)api_widgets.NIL, reassemble_polycanonicalized_assertionsP, check_reformulationsP);
            final SubLObject skolem_narts = skolem_narts_from_assertions(assertions);
            if (api_widgets.NIL != list_utilities.find_if_not((SubLObject)api_widgets.$sym172$VALID_ASSERTION_, assertions, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) {
                result = (SubLObject)api_widgets.NIL;
                problems = (SubLObject)api_widgets.$str173$Assertion_deemed_invalid_;
            }
            else if (api_widgets.NIL == assertions) {
                result = (SubLObject)api_widgets.NIL;
                problems = (SubLObject)api_widgets.$str174$No_such_sentence_to_unassert_;
            }
            else if (api_widgets.NIL != skolem_narts) {
                SubLObject cdolist_list_var = assertions;
                SubLObject assertion = (SubLObject)api_widgets.NIL;
                assertion = cdolist_list_var.first();
                while (api_widgets.NIL != cdolist_list_var) {
                    SubLObject cdolist_list_var_$55 = existing_fet_evaluations_of(assertion);
                    SubLObject evaluation = (SubLObject)api_widgets.NIL;
                    evaluation = cdolist_list_var_$55.first();
                    while (api_widgets.NIL != cdolist_list_var_$55) {
                        if (api_widgets.NIL != forts.fort_p(evaluation)) {
                            rkf_term_utilities.rkf_kill(evaluation);
                        }
                        cdolist_list_var_$55 = cdolist_list_var_$55.rest();
                        evaluation = cdolist_list_var_$55.first();
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    assertion = cdolist_list_var.first();
                }
                SubLObject killed_em_all_so_farP = (SubLObject)api_widgets.T;
                final SubLObject narts_that_wont_die = (SubLObject)api_widgets.NIL;
                SubLObject cdolist_list_var2 = skolem_narts;
                SubLObject skolem_nart = (SubLObject)api_widgets.NIL;
                skolem_nart = cdolist_list_var2.first();
                while (api_widgets.NIL != cdolist_list_var2) {
                    if (api_widgets.NIL != nart_handles.valid_nartP(skolem_nart, (SubLObject)api_widgets.UNPROVIDED)) {
                        final SubLObject killed_this_oneP = rkf_term_utilities.rkf_kill_now(skolem_nart);
                        if (api_widgets.NIL == killed_this_oneP) {
                            killed_em_all_so_farP = (SubLObject)api_widgets.NIL;
                            skolem_nart = narts_that_wont_die;
                        }
                    }
                    cdolist_list_var2 = cdolist_list_var2.rest();
                    skolem_nart = cdolist_list_var2.first();
                }
                result = killed_em_all_so_farP;
                problems = (SubLObject)((api_widgets.NIL != narts_that_wont_die) ? Sequences.cconcatenate((SubLObject)api_widgets.$str175$Couldn_t_kill_narts__, format_nil.format_nil_s_no_copy(narts_that_wont_die)) : api_widgets.NIL);
            }
            else {
                SubLObject cdolist_list_var = assertions;
                SubLObject assertion = (SubLObject)api_widgets.NIL;
                assertion = cdolist_list_var.first();
                while (api_widgets.NIL != cdolist_list_var) {
                    if (api_widgets.NIL != hlmt.equal_mt_monads_p(elmt, assertions_high.assertion_mt(assertion))) {
                        SubLObject cdolist_list_var_$56 = existing_fet_evaluations_of(assertion);
                        SubLObject evaluation = (SubLObject)api_widgets.NIL;
                        evaluation = cdolist_list_var_$56.first();
                        while (api_widgets.NIL != cdolist_list_var_$56) {
                            if (api_widgets.NIL != forts.fort_p(evaluation)) {
                                rkf_term_utilities.rkf_kill(evaluation);
                            }
                            cdolist_list_var_$56 = cdolist_list_var_$56.rest();
                            evaluation = cdolist_list_var_$56.first();
                        }
                        rkf_assertion_utilities.rkf_unassert(assertion, (SubLObject)api_widgets.UNPROVIDED);
                        result = (SubLObject)api_widgets.T;
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    assertion = cdolist_list_var.first();
                }
            }
        }
        return Values.values(result, problems);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 55082L)
    public static SubLObject skolem_narts_from_assertions(final SubLObject assertions) {
        SubLObject ans = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = assertions;
        SubLObject assertion = (SubLObject)api_widgets.NIL;
        assertion = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            if (api_widgets.NIL != assertion_handles.valid_assertionP(assertion, (SubLObject)api_widgets.T)) {
                SubLObject cdolist_list_var_$57 = cycl_utilities.expression_gather(assertion, (SubLObject)api_widgets.$sym176$SKOLEM_NART_, (SubLObject)api_widgets.T, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                SubLObject skolem_nart = (SubLObject)api_widgets.NIL;
                skolem_nart = cdolist_list_var_$57.first();
                while (api_widgets.NIL != cdolist_list_var_$57) {
                    final SubLObject item_var = skolem_nart;
                    if (api_widgets.NIL == conses_high.member(item_var, ans, Symbols.symbol_function((SubLObject)api_widgets.EQL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                        ans = (SubLObject)ConsesLow.cons(item_var, ans);
                    }
                    cdolist_list_var_$57 = cdolist_list_var_$57.rest();
                    skolem_nart = cdolist_list_var_$57.first();
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            assertion = cdolist_list_var.first();
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 55359L)
    public static SubLObject reformulate_edit_sentences(SubLObject old_sentence, SubLObject new_sentence, final SubLObject elmt, final SubLObject refspec_id, final SubLObject refspec_mt) {
        SubLObject reformulation_happenedP = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != contains_mt_indexical_referencesP(new_sentence) || api_widgets.NIL != contains_mt_indexical_referencesP(old_sentence)) {
            new_sentence = resolve_mt_indexical_references(new_sentence, elmt);
            old_sentence = resolve_mt_indexical_references(old_sentence, elmt);
        }
        if (api_widgets.NIL != refspec_id) {
            final SubLObject settings = get_reformulation_specification_from_kb(refspec_id, refspec_mt);
            if (api_widgets.NIL != new_sentence) {
                final SubLObject reformulated_new_sentence = reformulator_hub.reformulate_cycl(new_sentence, elmt, settings);
                if (!reformulated_new_sentence.equal(new_sentence)) {
                    reformulation_happenedP = (SubLObject)api_widgets.T;
                    new_sentence = reformulated_new_sentence;
                }
            }
            if (api_widgets.NIL != old_sentence) {
                final SubLObject reformulated_old_sentence = reformulator_hub.reformulate_cycl(old_sentence, elmt, settings);
                if (!reformulated_old_sentence.equal(old_sentence)) {
                    old_sentence = reformulated_old_sentence;
                }
            }
        }
        return Values.values(old_sentence, new_sentence, reformulation_happenedP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 56845L)
    public static SubLObject build_string_form_for_future_assertion(final SubLObject sentence, final SubLObject old_sentence, final SubLObject editP, SubLObject reason) {
        if (reason == api_widgets.UNPROVIDED) {
            reason = (SubLObject)api_widgets.$str179$unknown_reason;
        }
        final SubLObject next_id = integer_sequence_generator.integer_sequence_generator_next(api_widgets.$future_assertion_counter$.getGlobalValue());
        if (api_widgets.NIL != editP) {
            return PrintLow.format((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.$str180$__D__replace__S_with__S__Reason__, new SubLObject[] { next_id, old_sentence, sentence, reason });
        }
        return PrintLow.format((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.$str181$__D___S_failed__Reason___A_, new SubLObject[] { next_id, sentence, reason });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 57318L)
    public static SubLObject note_reformulation_happened(final SubLObject formula, final SubLObject v_term, final SubLObject original, final SubLObject refspec_id, final SubLObject elmt) {
        return rkf_assertion_utilities.rkf_assert_now(constrained_term_finder.generate_note_reformulation_formula(formula, v_term, original, refspec_id), elmt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 57546L)
    public static SubLObject remove_note_of_reformulation_happened(final SubLObject formula, final SubLObject v_term, final SubLObject original, final SubLObject refspec_id, final SubLObject elmt) {
        return rkf_assertion_utilities.rkf_unassert(constrained_term_finder.generate_note_reformulation_formula(formula, v_term, original, refspec_id), elmt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 57932L)
    public static SubLObject contains_mt_indexical_referencesP(final SubLObject formula) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject predicate = cycl_utilities.formula_arg0(formula);
        SubLObject result = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != subl_promotions.memberP(predicate, api_widgets.$microtheory_mentioning_constructs$.getGlobalValue(), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) {
            SubLObject ignore_errors_tag = (SubLObject)api_widgets.NIL;
            try {
                thread.throwStack.push(api_widgets.$kw184$IGNORE_ERRORS_TARGET);
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)api_widgets.$sym185$IGNORE_ERRORS_HANDLER), thread);
                    try {
                        result = list_utilities.sublisp_boolean(cycl_utilities.expression_find(api_widgets.$microtheory_indexical_referent_current_mt$.getGlobalValue(), cycl_utilities.formula_arg1(formula, (SubLObject)api_widgets.UNPROVIDED), (SubLObject)api_widgets.T, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED));
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)api_widgets.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)api_widgets.$kw184$IGNORE_ERRORS_TARGET);
            }
            finally {
                thread.throwStack.pop();
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 58293L)
    public static SubLObject resolve_mt_indexical_references(final SubLObject formula, final SubLObject mt) {
        return list_utilities.tree_substitute(formula, api_widgets.$microtheory_indexical_referent_current_mt$.getGlobalValue(), mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 58502L)
    public static SubLObject cae_applicable_template_topics_for_term(final SubLObject v_term, SubLObject mt, SubLObject filter_mt) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const21$InferencePSC;
        }
        if (filter_mt == api_widgets.UNPROVIDED) {
            filter_mt = constants_high.find_constant_by_guid_string((SubLObject)api_widgets.$str187$54e34312_5181_11d7_87a9_0002b3620);
        }
        final SubLObject unfiltered_results = formula_template_utilities.applicable_template_topics_for_term(v_term, mt);
        SubLObject results = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = unfiltered_results;
        SubLObject result = (SubLObject)api_widgets.NIL;
        result = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            if (api_widgets.NIL != isa.isaP(result.first(), api_widgets.$const188$CAEUsableFETTemplateTopic, filter_mt, (SubLObject)api_widgets.UNPROVIDED)) {
                results = (SubLObject)ConsesLow.cons(result, results);
            }
            cdolist_list_var = cdolist_list_var.rest();
            result = cdolist_list_var.first();
        }
        return results;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 58932L)
    public static SubLObject get_cae_template_topics(SubLObject template_mt, SubLObject title_mt) {
        if (template_mt == api_widgets.UNPROVIDED) {
            template_mt = constants_high.find_constant_by_guid_string((SubLObject)api_widgets.$str187$54e34312_5181_11d7_87a9_0002b3620);
        }
        if (title_mt == api_widgets.UNPROVIDED) {
            title_mt = api_widgets.$const21$InferencePSC;
        }
        SubLObject results = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var;
        final SubLObject templates = cdolist_list_var = query_library_utils.cae_fact_editor_focal_types((SubLObject)api_widgets.UNPROVIDED);
        SubLObject template = (SubLObject)api_widgets.NIL;
        template = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject query = (SubLObject)ConsesLow.listS(api_widgets.$const190$titleForFormulaTemplateType_Strin, template, (SubLObject)api_widgets.$list64);
            final SubLObject strings = ask_utilities.query_variable((SubLObject)api_widgets.$sym50$_X, query, title_mt, (SubLObject)api_widgets.UNPROVIDED);
            final SubLObject string = (api_widgets.NIL != strings) ? strings.first() : PrintLow.format((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.$str191$_S, template);
            final SubLObject result = (SubLObject)ConsesLow.cons(template, string);
            results = (SubLObject)ConsesLow.cons(result, results);
            cdolist_list_var = cdolist_list_var.rest();
            template = cdolist_list_var.first();
        }
        results = (cdolist_list_var = list_utilities.sort_alist_by_values(results, Symbols.symbol_function((SubLObject)api_widgets.$sym192$STRING_)));
        SubLObject cons = (SubLObject)api_widgets.NIL;
        cons = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject template2 = (SubLObject)api_widgets.NIL;
            SubLObject string2 = (SubLObject)api_widgets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list193);
            template2 = current.first();
            current = (string2 = current.rest());
            list_utilities.alist_enter(results, template2, (SubLObject)ConsesLow.list(string2), (SubLObject)api_widgets.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        return results;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 59977L)
    public static SubLObject gather_temporal_concepts_for_cae(final SubLObject query, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != cycl_grammar.cycl_sentence_p(query) : query;
        assert api_widgets.NIL != hlmt.chlmt_p(mt) : mt;
        SubLObject result = (SubLObject)api_widgets.NIL;
        final SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
        try {
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, (SubLObject)api_widgets.SIX_INTEGER), thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind((SubLObject)api_widgets.T, thread);
            result = gather_temporal_concept_variables_for_cae(query, mt);
        }
        finally {
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_2, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 60402L)
    public static SubLObject gather_temporal_concept_variables_for_cae(final SubLObject query, final SubLObject mt) {
        SubLObject result = (SubLObject)api_widgets.NIL;
        final SubLObject stack = stacks.create_stack();
        SubLObject lit = (SubLObject)api_widgets.NIL;
        stacks.stack_push(query, stack);
        while (api_widgets.NIL == stacks.stack_empty_p(stack)) {
            final SubLObject entry = stacks.stack_pop(stack);
            if (api_widgets.NIL != el_utilities.literalP(entry)) {
                for (lit = entry; api_widgets.NIL != variable_unification.el_negation_or_unknown_sentence_p(lit); lit = cycl_utilities.formula_arg1(lit, (SubLObject)api_widgets.UNPROVIDED)) {}
                SubLObject cdolist_list_var;
                final SubLObject isa_constraint_alist = cdolist_list_var = at_utilities.formula_variable_isa_constraint_alist(lit, mt);
                SubLObject cons = (SubLObject)api_widgets.NIL;
                cons = cdolist_list_var.first();
                while (api_widgets.NIL != cdolist_list_var) {
                    SubLObject current;
                    final SubLObject datum = current = cons;
                    SubLObject var = (SubLObject)api_widgets.NIL;
                    SubLObject cols = (SubLObject)api_widgets.NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list196);
                    var = current.first();
                    current = current.rest();
                    SubLObject cdolist_list_var_$58;
                    cols = (cdolist_list_var_$58 = current);
                    SubLObject col = (SubLObject)api_widgets.NIL;
                    col = cdolist_list_var_$58.first();
                    while (api_widgets.NIL != cdolist_list_var_$58) {
                        if (api_widgets.NIL != cae_temporal_concept_collectionP(col, mt)) {
                            final SubLObject item_var = var;
                            if (api_widgets.NIL == conses_high.member(item_var, result, Symbols.symbol_function((SubLObject)api_widgets.EQL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                result = (SubLObject)ConsesLow.cons(item_var, result);
                            }
                        }
                        cdolist_list_var_$58 = cdolist_list_var_$58.rest();
                        col = cdolist_list_var_$58.first();
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    cons = cdolist_list_var.first();
                }
            }
            SubLObject cdolist_list_var2 = cycl_utilities.formula_args(entry, (SubLObject)api_widgets.UNPROVIDED);
            SubLObject arg = (SubLObject)api_widgets.NIL;
            arg = cdolist_list_var2.first();
            while (api_widgets.NIL != cdolist_list_var2) {
                stacks.stack_push(arg, stack);
                cdolist_list_var2 = cdolist_list_var2.rest();
                arg = cdolist_list_var2.first();
            }
        }
        return Sequences.nreverse(result);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 60888L)
    public static SubLObject cae_temporal_concept_collectionP(final SubLObject col, final SubLObject mt) {
        return genls.genlsP(col, api_widgets.$const197$TemporallyExtendedThing, mt, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 61071L)
    public static SubLObject get_shared_comments(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject documentation_assertions = (SubLObject)api_widgets.NIL;
        SubLObject result = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL == forts.fort_p(v_term)) {
            return (SubLObject)api_widgets.NIL;
        }
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym199$RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind(api_widgets.$const47$EverythingPSC, thread);
            documentation_assertions = kb_mapping.gather_gaf_arg_index(v_term, (SubLObject)api_widgets.ONE_INTEGER, api_widgets.$const200$sharedNotes, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        if (api_widgets.NIL != documentation_assertions) {
            final SubLObject cdolist_list_var = documentation_assertions;
            SubLObject documentation_assertion = (SubLObject)api_widgets.NIL;
            documentation_assertion = cdolist_list_var.first();
            if (api_widgets.NIL != cdolist_list_var) {
                final SubLObject note_fort = assertions_high.gaf_arg2(documentation_assertion);
                SubLObject shared_comments = (SubLObject)api_widgets.NIL;
                SubLObject cdolist_list_var_$59;
                shared_comments = (cdolist_list_var_$59 = kb_mapping.gather_gaf_arg_index(note_fort, (SubLObject)api_widgets.ONE_INTEGER, api_widgets.$const201$comment, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED));
                SubLObject shared_comment = (SubLObject)api_widgets.NIL;
                shared_comment = cdolist_list_var_$59.first();
                while (api_widgets.NIL != cdolist_list_var_$59) {
                    result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(note_fort, assertions_high.gaf_arg2(shared_comment)), result);
                    cdolist_list_var_$59 = cdolist_list_var_$59.rest();
                    shared_comment = cdolist_list_var_$59.first();
                }
                return result;
            }
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 62177L)
    public static SubLObject with_parsing_constraints(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list202);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject sentence = (SubLObject)api_widgets.NIL;
        SubLObject arg_pos = (SubLObject)api_widgets.NIL;
        SubLObject constraining_collection = (SubLObject)api_widgets.NIL;
        SubLObject domain_mt = (SubLObject)api_widgets.NIL;
        SubLObject filter_fn = (SubLObject)api_widgets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list202);
        sentence = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list202);
        arg_pos = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list202);
        constraining_collection = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list202);
        domain_mt = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list202);
        filter_fn = current.first();
        current = current.rest();
        if (api_widgets.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.listS((SubLObject)api_widgets.$sym203$CLET, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)api_widgets.$sym204$_PARSE_SENTENCE_CONTEXT_, sentence), (SubLObject)ConsesLow.list((SubLObject)api_widgets.$sym205$_PARSE_ARG_POS_, arg_pos), (SubLObject)ConsesLow.list((SubLObject)api_widgets.$sym206$_PARSE_CONSTRAINING_COLLECTION_, constraining_collection), (SubLObject)ConsesLow.list((SubLObject)api_widgets.$sym207$_PARSE_DOMAIN_MT_, domain_mt), (SubLObject)ConsesLow.list((SubLObject)api_widgets.$sym208$_PARSE_FILTER_FN_, filter_fn)), ConsesLow.append(body, (SubLObject)api_widgets.NIL));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list202);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 62598L)
    public static SubLObject get_constrained_cycl_terms(final SubLObject string, final SubLObject constraint, SubLObject domain_mt, SubLObject generation_mt, SubLObject parsing_mt, SubLObject quietly_create_unknown_instances, SubLObject force_creation_of_unknown_instances, SubLObject possibly_strip_extraneous_punctuationP, SubLObject force, SubLObject nl_preds, SubLObject sentence, SubLObject arg_pos, SubLObject string_match_options, SubLObject instance_limit) {
        if (domain_mt == api_widgets.UNPROVIDED) {
            domain_mt = (SubLObject)ConsesLow.list(api_widgets.$const209$MtUnionFn, api_widgets.$const210$EnglishMt, api_widgets.$const211$TKBSourceSpindleCollectorMt);
        }
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (parsing_mt == api_widgets.UNPROVIDED) {
            parsing_mt = api_widgets.$const210$EnglishMt;
        }
        if (quietly_create_unknown_instances == api_widgets.UNPROVIDED) {
            quietly_create_unknown_instances = (SubLObject)api_widgets.NIL;
        }
        if (force_creation_of_unknown_instances == api_widgets.UNPROVIDED) {
            force_creation_of_unknown_instances = (SubLObject)api_widgets.NIL;
        }
        if (possibly_strip_extraneous_punctuationP == api_widgets.UNPROVIDED) {
            possibly_strip_extraneous_punctuationP = (SubLObject)api_widgets.T;
        }
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw81$NONE;
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = (SubLObject)ConsesLow.list(api_widgets.$const96$nonPlural_Generic);
        }
        if (sentence == api_widgets.UNPROVIDED) {
            sentence = (SubLObject)api_widgets.NIL;
        }
        if (arg_pos == api_widgets.UNPROVIDED) {
            arg_pos = (SubLObject)api_widgets.NIL;
        }
        if (string_match_options == api_widgets.UNPROVIDED) {
            string_match_options = (SubLObject)api_widgets.$list212;
        }
        if (instance_limit == api_widgets.UNPROVIDED) {
            instance_limit = (SubLObject)api_widgets.TEN_INTEGER;
        }
        SubLObject result_list = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = get_constrained_cycl_for_string_int(string, (SubLObject)ConsesLow.list(api_widgets.$const213$SpecsFn, constraint), domain_mt, generation_mt, parsing_mt, quietly_create_unknown_instances, force_creation_of_unknown_instances, possibly_strip_extraneous_punctuationP, force, nl_preds, sentence, arg_pos, string_match_options, instance_limit);
        SubLObject result = (SubLObject)api_widgets.NIL;
        result = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            result_list = (SubLObject)ConsesLow.cons(conses_high.last(result, (SubLObject)api_widgets.UNPROVIDED).first(), result_list);
            cdolist_list_var = cdolist_list_var.rest();
            result = cdolist_list_var.first();
        }
        return result_list;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 63872L)
    public static SubLObject smart_convert_string_constraint_tuple_to_denotation(final SubLObject string, final SubLObject constraining_collection, final SubLObject sentence, final SubLObject arg_pos, final SubLObject domain_mt, SubLObject allow_trivial_constraint_matchingP) {
        if (allow_trivial_constraint_matchingP == api_widgets.UNPROVIDED) {
            allow_trivial_constraint_matchingP = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject denotation_list = (SubLObject)api_widgets.NIL;
        if (string.isString()) {
            final SubLObject head_string = string_utilities.number_of_commas(string).isPositive() ? Strings.string_right_trim((SubLObject)api_widgets.$str214$__, string_utilities.post_remove(string, string_utilities.comma_sub_string(string), (SubLObject)api_widgets.UNPROVIDED)) : string;
            final SubLObject head_word = string_utilities_lexical.find_head_noun_of_string(head_string);
            final SubLObject head_word_sense_list = (SubLObject)(head_word.isString() ? get_constrained_cycl_terms(head_word, constraining_collection, domain_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED) : api_widgets.NIL);
            if (api_widgets.NIL != head_word_sense_list) {
                SubLObject cdolist_list_var = head_word_sense_list;
                SubLObject sense = (SubLObject)api_widgets.NIL;
                sense = cdolist_list_var.first();
                while (api_widgets.NIL != cdolist_list_var) {
                    if (api_widgets.NIL != fort_types_interface.isa_collectionP(sense, (SubLObject)api_widgets.UNPROVIDED) && (api_widgets.NIL != allow_trivial_constraint_matchingP || !sense.equal(constraining_collection))) {
                        denotation_list = (SubLObject)ConsesLow.cons(convert_string_constraint_tuple_to_denotation(string, sense), denotation_list);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    sense = cdolist_list_var.first();
                }
            }
            denotation_list = (SubLObject)ConsesLow.cons(convert_string_constraint_tuple_to_denotation(string, constraining_collection), denotation_list);
        }
        final SubLObject _prev_bind_0 = api_widgets.$parse_filter_fn$.currentBinding(thread);
        try {
            api_widgets.$parse_filter_fn$.bind((SubLObject)api_widgets.$sym215$RKF_FILTER_IRRELEVANT_TERMS, thread);
            denotation_list = constrained_cycl_filter(denotation_list, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        }
        finally {
            api_widgets.$parse_filter_fn$.rebind(_prev_bind_0, thread);
        }
        return denotation_list;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 65906L)
    public static SubLObject get_constrained_cycl_for_string(final SubLObject str, final SubLObject constraining_collection, final SubLObject domain_mt, SubLObject generation_mt, SubLObject parsing_mt, SubLObject quietly_create_unknown_instances, SubLObject force_creation_of_unknown_instances, SubLObject possibly_strip_extraneous_punctuationP, SubLObject force, SubLObject nl_preds, SubLObject sentence, SubLObject arg_pos, SubLObject string_match_options, SubLObject instance_limit) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (parsing_mt == api_widgets.UNPROVIDED) {
            parsing_mt = api_widgets.$const210$EnglishMt;
        }
        if (quietly_create_unknown_instances == api_widgets.UNPROVIDED) {
            quietly_create_unknown_instances = (SubLObject)api_widgets.T;
        }
        if (force_creation_of_unknown_instances == api_widgets.UNPROVIDED) {
            force_creation_of_unknown_instances = (SubLObject)api_widgets.NIL;
        }
        if (possibly_strip_extraneous_punctuationP == api_widgets.UNPROVIDED) {
            possibly_strip_extraneous_punctuationP = (SubLObject)api_widgets.T;
        }
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw81$NONE;
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = (SubLObject)ConsesLow.list(api_widgets.$const96$nonPlural_Generic);
        }
        if (sentence == api_widgets.UNPROVIDED) {
            sentence = (SubLObject)api_widgets.NIL;
        }
        if (arg_pos == api_widgets.UNPROVIDED) {
            arg_pos = (SubLObject)api_widgets.NIL;
        }
        if (string_match_options == api_widgets.UNPROVIDED) {
            string_match_options = (SubLObject)api_widgets.$list212;
        }
        if (instance_limit == api_widgets.UNPROVIDED) {
            instance_limit = (SubLObject)api_widgets.TEN_INTEGER;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject existing = get_constrained_cycl_for_string_int(str, constraining_collection, domain_mt, generation_mt, parsing_mt, quietly_create_unknown_instances, force_creation_of_unknown_instances, possibly_strip_extraneous_punctuationP, force, nl_preds, sentence, arg_pos, string_match_options, instance_limit);
        SubLObject v_new = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (api_widgets.NIL != api_widgets.$api_widget_return_new_cycls_separatelyP$.getDynamicValue(thread)) {
            existing = (SubLObject)ConsesLow.list(existing, v_new);
            v_new = (SubLObject)api_widgets.NIL;
        }
        else {
            existing = Sequences.cconcatenate(existing, v_new);
            v_new = (SubLObject)api_widgets.NIL;
        }
        return existing;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 67458L)
    public static SubLObject get_constrained_cycl_for_string_single_answer(final SubLObject str, final SubLObject constraining_collection, final SubLObject domain_mt, SubLObject generation_mt, SubLObject parsing_mt, SubLObject quietly_create_unknown_instances, SubLObject force_creation_of_unknown_instances, SubLObject possibly_strip_extraneous_punctuationP, SubLObject force, SubLObject nl_preds, SubLObject sentence, SubLObject arg_pos, SubLObject string_match_options, SubLObject instance_limit) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (parsing_mt == api_widgets.UNPROVIDED) {
            parsing_mt = api_widgets.$const210$EnglishMt;
        }
        if (quietly_create_unknown_instances == api_widgets.UNPROVIDED) {
            quietly_create_unknown_instances = (SubLObject)api_widgets.T;
        }
        if (force_creation_of_unknown_instances == api_widgets.UNPROVIDED) {
            force_creation_of_unknown_instances = (SubLObject)api_widgets.NIL;
        }
        if (possibly_strip_extraneous_punctuationP == api_widgets.UNPROVIDED) {
            possibly_strip_extraneous_punctuationP = (SubLObject)api_widgets.T;
        }
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw81$NONE;
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = (SubLObject)ConsesLow.list(api_widgets.$const96$nonPlural_Generic);
        }
        if (sentence == api_widgets.UNPROVIDED) {
            sentence = (SubLObject)api_widgets.NIL;
        }
        if (arg_pos == api_widgets.UNPROVIDED) {
            arg_pos = (SubLObject)api_widgets.NIL;
        }
        if (string_match_options == api_widgets.UNPROVIDED) {
            string_match_options = (SubLObject)api_widgets.$list212;
        }
        if (instance_limit == api_widgets.UNPROVIDED) {
            instance_limit = (SubLObject)api_widgets.TEN_INTEGER;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject existing = get_constrained_cycl_for_string_int(str, constraining_collection, domain_mt, generation_mt, parsing_mt, quietly_create_unknown_instances, force_creation_of_unknown_instances, possibly_strip_extraneous_punctuationP, force, nl_preds, sentence, arg_pos, string_match_options, instance_limit);
        final SubLObject v_new = thread.secondMultipleValue();
        thread.resetMultipleValues();
        existing = Sequences.cconcatenate(existing, v_new);
        return existing;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 68715L)
    public static SubLObject get_constrained_cycl_for_string_int(final SubLObject str, SubLObject constraining_collection, SubLObject domain_mt, SubLObject generation_mt, SubLObject parsing_mt, SubLObject quietly_create_unknown_instances, SubLObject force_creation_of_unknown_instances, SubLObject possibly_strip_extraneous_punctuationP, SubLObject force, SubLObject nl_preds, SubLObject sentence, SubLObject arg_pos, SubLObject string_match_options, SubLObject instance_limit) {
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (parsing_mt == api_widgets.UNPROVIDED) {
            parsing_mt = api_widgets.$const210$EnglishMt;
        }
        if (quietly_create_unknown_instances == api_widgets.UNPROVIDED) {
            quietly_create_unknown_instances = (SubLObject)api_widgets.T;
        }
        if (force_creation_of_unknown_instances == api_widgets.UNPROVIDED) {
            force_creation_of_unknown_instances = (SubLObject)api_widgets.NIL;
        }
        if (possibly_strip_extraneous_punctuationP == api_widgets.UNPROVIDED) {
            possibly_strip_extraneous_punctuationP = (SubLObject)api_widgets.T;
        }
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw81$NONE;
        }
        if (nl_preds == api_widgets.UNPROVIDED) {
            nl_preds = (SubLObject)ConsesLow.list(api_widgets.$const96$nonPlural_Generic);
        }
        if (sentence == api_widgets.UNPROVIDED) {
            sentence = (SubLObject)api_widgets.NIL;
        }
        if (arg_pos == api_widgets.UNPROVIDED) {
            arg_pos = (SubLObject)api_widgets.NIL;
        }
        if (string_match_options == api_widgets.UNPROVIDED) {
            string_match_options = (SubLObject)api_widgets.$list212;
        }
        if (instance_limit == api_widgets.UNPROVIDED) {
            instance_limit = (SubLObject)api_widgets.TEN_INTEGER;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        constraining_collection = czer_main.canonicalize_term(constraining_collection, (SubLObject)api_widgets.UNPROVIDED);
        assert api_widgets.NIL != fort_types_interface.isa_collectionP(constraining_collection, (SubLObject)api_widgets.UNPROVIDED) : constraining_collection;
        domain_mt = hlmt_czer.coerce_to_hlmt(domain_mt);
        SubLObject new_terms = (SubLObject)api_widgets.NIL;
        final SubLObject string_as_cycl = read_cycl_from_string(string_utilities.cyclify_string(str));
        SubLObject result = (SubLObject)((api_widgets.NIL != string_as_cycl) ? ConsesLow.list(string_as_cycl) : api_widgets.NIL);
        final SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
        try {
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, (SubLObject)api_widgets.SIX_INTEGER), thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind((SubLObject)api_widgets.T, thread);
            final SubLObject local_state;
            final SubLObject state = local_state = memoization_state.possibly_new_memoization_state();
            final SubLObject _prev_bind_0_$60 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    final SubLObject _prev_bind_0_$61 = api_widgets.$parse_sentence_context$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$62 = api_widgets.$parse_arg_pos$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$63 = api_widgets.$parse_constraining_collection$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = api_widgets.$parse_domain_mt$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = api_widgets.$parse_filter_fn$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = mt_relevance_macros.$mt$.currentBinding(thread);
                    try {
                        api_widgets.$parse_sentence_context$.bind(sentence, thread);
                        api_widgets.$parse_arg_pos$.bind(arg_pos, thread);
                        api_widgets.$parse_constraining_collection$.bind(constraining_collection, thread);
                        api_widgets.$parse_domain_mt$.bind(domain_mt, thread);
                        api_widgets.$parse_filter_fn$.bind((SubLObject)api_widgets.$sym219$FILTER_CONSTRAINED_CYCLS, thread);
                        mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym199$RELEVANT_MT_IS_EVERYTHING, thread);
                        mt_relevance_macros.$mt$.bind(api_widgets.$const47$EverythingPSC, thread);
                        result = constrained_cycl_filter(result, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                        if (api_widgets.NIL != string_specP(constraining_collection)) {
                            result = (SubLObject)ConsesLow.list(str);
                        }
                        else if (api_widgets.NIL == string_utilities.string_contains_constant_reader_prefix_p(str) || api_widgets.NIL == result) {
                            result = Sequences.cconcatenate(result, get_cycls_for_string_escalating(str, constraining_collection, (SubLObject)api_widgets.NIL, domain_mt, parsing_mt, string_match_options, (SubLObject)api_widgets.$sym219$FILTER_CONSTRAINED_CYCLS, instance_limit));
                            if (api_widgets.NIL != possibly_strip_extraneous_punctuationP && api_widgets.NIL == result && api_widgets.NIL != str && !str.equal(string_utilities.$empty_string$.getGlobalValue()) && api_widgets.NIL != string_utilities.ends_with_punctuation_p(str)) {
                                result = get_cycls_for_string_escalating(string_utilities.string_butlast(str), constraining_collection, (SubLObject)api_widgets.NIL, domain_mt, parsing_mt, string_match_options, (SubLObject)api_widgets.$sym219$FILTER_CONSTRAINED_CYCLS, instance_limit);
                            }
                            final SubLObject _prev_bind_0_$62 = parsing_vars.$evaluate_nl_reformulator_resultsP$.currentBinding(thread);
                            try {
                                parsing_vars.$evaluate_nl_reformulator_resultsP$.bind((SubLObject)api_widgets.NIL, thread);
                                result = nl_reformulator.nl_reformulate_cycls(result);
                            }
                            finally {
                                parsing_vars.$evaluate_nl_reformulator_resultsP$.rebind(_prev_bind_0_$62, thread);
                            }
                            result = parsing_utilities.possibly_strip_nl_tags_from_list(result, api_widgets.$api_widgets_strip_nl_tagsP$.getGlobalValue());
                            if (api_widgets.NIL == result) {
                                result = partial_matches_for_string(str, constraining_collection, domain_mt, parsing_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                            }
                            if (api_widgets.NIL != force_creation_of_unknown_instances || (api_widgets.NIL != quietly_create_unknown_instances && result.equal((SubLObject)api_widgets.NIL))) {
                                new_terms = smart_convert_string_constraint_tuple_to_denotation(str, constraining_collection, sentence, arg_pos, domain_mt, (SubLObject)api_widgets.UNPROVIDED);
                            }
                        }
                    }
                    finally {
                        mt_relevance_macros.$mt$.rebind(_prev_bind_7, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_6, thread);
                        api_widgets.$parse_filter_fn$.rebind(_prev_bind_5, thread);
                        api_widgets.$parse_domain_mt$.rebind(_prev_bind_4, thread);
                        api_widgets.$parse_constraining_collection$.rebind(_prev_bind_2_$63, thread);
                        api_widgets.$parse_arg_pos$.rebind(_prev_bind_1_$62, thread);
                        api_widgets.$parse_sentence_context$.rebind(_prev_bind_0_$61, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$63 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$63, thread);
                    }
                }
            }
            finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0_$60, thread);
            }
        }
        finally {
            sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_2, thread);
            sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0, thread);
        }
        result = Sequences.remove_duplicates(dereference_indexicals_in_constrained_cycls(result), Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        thread.resetMultipleValues();
        final SubLObject valid_results = list_utilities.partition_list(result, Symbols.symbol_function((SubLObject)api_widgets.$sym220$CYCL_EXPRESSION_P));
        final SubLObject invalid_results = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (api_widgets.NIL == list_utilities.empty_list_p(invalid_results)) {
            Errors.warn((SubLObject)api_widgets.$str221$Got_invalid_denotation_s__for__S_, str, invalid_results);
            result = valid_results;
        }
        result = convert_term_list_to_renderings_for_java(result, domain_mt, force, nl_preds, generation_mt, (SubLObject)api_widgets.T, (SubLObject)api_widgets.T, (SubLObject)api_widgets.NIL);
        new_terms = convert_term_list_to_renderings_for_java(new_terms, domain_mt, force, nl_preds, generation_mt, (SubLObject)api_widgets.T, (SubLObject)api_widgets.T, (SubLObject)api_widgets.NIL);
        result = Sort.sort(result, Symbols.symbol_function((SubLObject)api_widgets.$sym93$PPH_LIST_ITEM_COMPARATOR), (SubLObject)api_widgets.UNPROVIDED);
        return Values.values(result, new_terms);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 75004L)
    public static SubLObject constrained_cycl_filter(SubLObject result, SubLObject sentence, SubLObject arg_pos, SubLObject constraining_collection, SubLObject domain_mt, SubLObject filter_fn) {
        if (sentence == api_widgets.UNPROVIDED) {
            sentence = api_widgets.$parse_sentence_context$.getDynamicValue();
        }
        if (arg_pos == api_widgets.UNPROVIDED) {
            arg_pos = api_widgets.$parse_arg_pos$.getDynamicValue();
        }
        if (constraining_collection == api_widgets.UNPROVIDED) {
            constraining_collection = api_widgets.$parse_constraining_collection$.getDynamicValue();
        }
        if (domain_mt == api_widgets.UNPROVIDED) {
            domain_mt = api_widgets.$parse_domain_mt$.getDynamicValue();
        }
        if (filter_fn == api_widgets.UNPROVIDED) {
            filter_fn = api_widgets.$parse_filter_fn$.getDynamicValue();
        }
        if (api_widgets.NIL != filter_fn && api_widgets.NIL != domain_mt) {
            result = apply_constrained_cycls_filter_fn(filter_fn, result, domain_mt);
        }
        return constrained_cycl_filter_int(result, sentence, arg_pos, constraining_collection, domain_mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 75515L)
    public static SubLObject constrained_cycl_filter_int(SubLObject result, final SubLObject sentence, final SubLObject arg_pos, final SubLObject constraining_collection, final SubLObject domain_mt) {
        if (api_widgets.NIL != constraining_collection && api_widgets.NIL != domain_mt) {
            result = constraint_filters.filter_terms_by_constraining_collection(constraining_collection, domain_mt, result);
        }
        if (api_widgets.NIL != sentence && api_widgets.NIL != arg_pos && api_widgets.NIL != domain_mt) {
            result = constraint_filters.filter_terms_for_arg_constraints_at_argpos(arg_pos, sentence, domain_mt, result, (SubLObject)api_widgets.NIL);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 75935L)
    public static SubLObject read_cycl_from_string(final SubLObject str) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject cycl = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != string_utilities.string_contains_constant_reader_prefix_p(str)) {
            thread.resetMultipleValues();
            final SubLObject result = reader.read_from_string_ignoring_errors(str, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            final SubLObject maybe_end_pos = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (maybe_end_pos.isInteger() && api_widgets.NIL != list_utilities.lengthE(str, maybe_end_pos, (SubLObject)api_widgets.UNPROVIDED)) {
                final SubLObject _prev_bind_0 = cycl_grammar.$grammar_permits_symbol_as_terminalP$.currentBinding(thread);
                try {
                    cycl_grammar.$grammar_permits_symbol_as_terminalP$.bind((SubLObject)api_widgets.NIL, thread);
                    if (api_widgets.NIL != cycl_grammar.cycl_term_p(result)) {
                        cycl = result;
                    }
                }
                finally {
                    cycl_grammar.$grammar_permits_symbol_as_terminalP$.rebind(_prev_bind_0, thread);
                }
            }
        }
        return cycl;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 76356L)
    public static SubLObject filter_constrained_cycls(SubLObject ans, final SubLObject domain_mt) {
        ans = Sequences.remove_if((SubLObject)api_widgets.$sym222$STUB_TERM_WITH_NAME_AND_TYPE_P, ans, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        ans = rkf_relevance_utilities.rkf_filter_irrelevant_terms(ans, domain_mt);
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 76629L)
    public static SubLObject dereference_indexicals_in_constrained_cycls(final SubLObject cycls) {
        SubLObject ans = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = cycls;
        SubLObject cycl = (SubLObject)api_widgets.NIL;
        cycl = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            ans = (SubLObject)ConsesLow.cons(dereference_indexicals_in_constrained_cycl(cycl), ans);
            cdolist_list_var = cdolist_list_var.rest();
            cycl = cdolist_list_var.first();
        }
        return Sequences.nreverse(ans);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 76907L)
    public static SubLObject dereference_indexicals_in_constrained_cycl(final SubLObject cycl) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = (SubLObject)api_widgets.NIL;
        SubLObject error = (SubLObject)api_widgets.NIL;
        try {
            thread.throwStack.push(api_widgets.$kw223$TRANSFORMATION_LIMIT_EXCEEDED);
            ans = cycl_utilities.expression_transform(cycl, (SubLObject)api_widgets.$sym224$INDEXICAL_REFERENT_TERM_P, (SubLObject)api_widgets.$sym225$CYC_INDEXICAL_REFERENT, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        }
        catch (Throwable ccatch_env_var) {
            error = Errors.handleThrowable(ccatch_env_var, (SubLObject)api_widgets.$kw223$TRANSFORMATION_LIMIT_EXCEEDED);
        }
        finally {
            thread.throwStack.pop();
        }
        if (api_widgets.NIL != error) {
            ans = cycl;
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 77276L)
    public static SubLObject partial_matches_for_string(final SubLObject string, final SubLObject constraining_collection, final SubLObject domain_mt, final SubLObject parsing_mt, SubLObject permissiveP, SubLObject test) {
        if (permissiveP == api_widgets.UNPROVIDED) {
            permissiveP = (SubLObject)api_widgets.T;
        }
        if (test == api_widgets.UNPROVIDED) {
            test = (SubLObject)api_widgets.EQUALP;
        }
        final SubLObject initial_matches = lexicon_accessors.denots_of_partial_string(string, parsing_mt, permissiveP, test);
        final SubLObject relevant_matches = rkf_relevance_utilities.rkf_filter_irrelevant_terms(initial_matches, domain_mt);
        return constraint_filters.filter_terms_by_constraining_collection(constraining_collection, domain_mt, relevant_matches);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 78168L)
    public static SubLObject convert_string_constraint_tuple_to_denotation(final SubLObject string, final SubLObject constraining_collection) {
        if (api_widgets.NIL != genls.genl_in_any_mtP(constraining_collection, api_widgets.$const227$CharacterString)) {
            return string;
        }
        if (api_widgets.NIL != genls.genl_in_any_mtP(constraining_collection, api_widgets.$const228$Predicate)) {
            return (SubLObject)ConsesLow.list(api_widgets.$const229$PredicateNamedFn, string, constraining_collection);
        }
        if (api_widgets.NIL != cycl_utilities.naut_with_functor_p(constraining_collection, api_widgets.$const213$SpecsFn)) {
            return (SubLObject)ConsesLow.list(api_widgets.$const230$ProperSubcollectionNamedFn_Ternar, string, cycl_utilities.formula_arg1(constraining_collection, (SubLObject)api_widgets.UNPROVIDED), Guids.guid_to_string(Guids.new_guid()));
        }
        return (SubLObject)ConsesLow.list(api_widgets.$const231$InstanceNamedFn_Ternary, string, constraining_collection, Guids.guid_to_string(Guids.new_guid()));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 79072L)
    public static SubLObject stub_term_with_name_and_type_p(final SubLObject v_object) {
        return (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL != el_utilities.possibly_naut_p(v_object) && api_widgets.NIL != formula_pattern_match.formula_matches_pattern(v_object, (SubLObject)api_widgets.$list232));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 79394L)
    public static SubLObject string_specP(final SubLObject obj) {
        return (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL != kb_indexing_datastructures.indexed_term_p(obj) && api_widgets.NIL != genls.genl_in_any_mtP(obj, api_widgets.$const227$CharacterString));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 80025L)
    public static SubLObject get_cycls_for_string_escalating(final SubLObject string, final SubLObject good_col, SubLObject bad_col, SubLObject domain_mt, SubLObject parsing_mt, SubLObject string_match_options, SubLObject filter_fn, SubLObject instance_limit) {
        if (bad_col == api_widgets.UNPROVIDED) {
            bad_col = (SubLObject)api_widgets.NIL;
        }
        if (domain_mt == api_widgets.UNPROVIDED) {
            domain_mt = (SubLObject)api_widgets.NIL;
        }
        if (parsing_mt == api_widgets.UNPROVIDED) {
            parsing_mt = (SubLObject)api_widgets.NIL;
        }
        if (string_match_options == api_widgets.UNPROVIDED) {
            string_match_options = (SubLObject)api_widgets.$list212;
        }
        if (filter_fn == api_widgets.UNPROVIDED) {
            filter_fn = (SubLObject)api_widgets.$sym219$FILTER_CONSTRAINED_CYCLS;
        }
        if (instance_limit == api_widgets.UNPROVIDED) {
            instance_limit = (SubLObject)api_widgets.TEN_INTEGER;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject case_insensitiveP = Equality.eq((SubLObject)api_widgets.$kw235$TRUE, conses_high.getf(string_match_options, (SubLObject)api_widgets.$kw236$CASE_INSENSITIVE, (SubLObject)api_widgets.$kw237$FALSE));
        final SubLObject regular_expressionsP = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.$kw235$TRUE == conses_high.getf(string_match_options, (SubLObject)api_widgets.$kw238$REGULAR_EXPRESSIONS, (SubLObject)api_widgets.$kw237$FALSE) && api_widgets.NIL != regular_expressions.is_regular_expressions_support_availableP());
        final SubLObject regular_expression_stringP = regular_expression_utilities.regular_expression_string_p(string);
        SubLObject ans = (SubLObject)api_widgets.NIL;
        final SubLObject _prev_bind_0 = parsing_vars.$npp_use_nl_tagsP$.currentBinding(thread);
        try {
            parsing_vars.$npp_use_nl_tagsP$.bind((SubLObject)api_widgets.NIL, thread);
            if (api_widgets.NIL != regular_expressionsP && api_widgets.NIL != regular_expression_stringP) {
                if (api_widgets.NIL != api_widgets.$trace_get_cycls_for_string_escalatingP$.getGlobalValue()) {
                    PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str239$________regular_expressions__A__, string);
                    streams_high.force_output((SubLObject)api_widgets.T);
                }
                ans = Sequences.remove_duplicates(Mapping.mapcar(Symbols.symbol_function((SubLObject)api_widgets.$sym79$FIRST), get_constrained_cycls_for_regular_expression(string, good_col, bad_col, domain_mt, parsing_mt, case_insensitiveP)), Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                ans = constrained_cycl_filter(ans, api_widgets.$parse_sentence_context$.getDynamicValue(thread), api_widgets.$parse_arg_pos$.getDynamicValue(thread), api_widgets.$parse_constraining_collection$.getDynamicValue(thread), domain_mt, filter_fn);
            }
            if (api_widgets.NIL == ans) {
                final SubLObject _prev_bind_0_$66 = lexicon_macros.$nl_trie_accessor_default_case_sensitivity$.currentBinding(thread);
                try {
                    lexicon_macros.$nl_trie_accessor_default_case_sensitivity$.bind((SubLObject)((api_widgets.NIL == case_insensitiveP) ? api_widgets.$kw240$ON : api_widgets.$kw241$OFF), thread);
                    SubLObject abbrev_types = (SubLObject)api_widgets.$list242;
                    if (api_widgets.NIL != api_widgets.$trace_get_cycls_for_string_escalatingP$.getGlobalValue()) {
                        PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str243$_________typed_denots_of_string__, string, good_col);
                        streams_high.force_output((SubLObject)api_widgets.T);
                    }
                    ans = lexicon_accessors.typed_denots_of_string(string, good_col, abbrev_types, (SubLObject)api_widgets.$kw244$DENOT, (SubLObject)api_widgets.T, (SubLObject)api_widgets.NIL, parsing_mt, domain_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                    ans = constrained_cycl_filter(ans, api_widgets.$parse_sentence_context$.getDynamicValue(thread), api_widgets.$parse_arg_pos$.getDynamicValue(thread), api_widgets.$parse_constraining_collection$.getDynamicValue(thread), domain_mt, filter_fn);
                    if (api_widgets.NIL == ans) {
                        abbrev_types = (SubLObject)api_widgets.$list245;
                        if (api_widgets.NIL != api_widgets.$trace_get_cycls_for_string_escalatingP$.getGlobalValue()) {
                            PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str246$__________typed_denots_of_string_, string);
                            streams_high.force_output((SubLObject)api_widgets.T);
                        }
                        ans = lexicon_accessors.typed_denots_of_string(string, good_col, abbrev_types, (SubLObject)api_widgets.$kw244$DENOT, (SubLObject)api_widgets.T, (SubLObject)api_widgets.NIL, parsing_mt, domain_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                        ans = constrained_cycl_filter(ans, api_widgets.$parse_sentence_context$.getDynamicValue(thread), api_widgets.$parse_arg_pos$.getDynamicValue(thread), api_widgets.$parse_constraining_collection$.getDynamicValue(thread), domain_mt, filter_fn);
                    }
                    final SubLObject good_cols = (SubLObject)((api_widgets.NIL != good_col) ? ConsesLow.list(good_col) : api_widgets.NIL);
                    final SubLObject bad_cols = (SubLObject)((api_widgets.NIL != bad_col) ? ConsesLow.list(bad_col) : api_widgets.NIL);
                    if (api_widgets.NIL == ans) {
                        if (api_widgets.NIL != api_widgets.$trace_get_cycls_for_string_escalatingP$.getGlobalValue()) {
                            PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str247$___________parse_dates_and_number, string);
                            streams_high.force_output((SubLObject)api_widgets.T);
                        }
                        ans = parsing_utilities.parse_dates_and_numbers(string, good_cols, bad_cols, domain_mt, parsing_mt);
                        ans = constrained_cycl_filter(ans, api_widgets.$parse_sentence_context$.getDynamicValue(thread), api_widgets.$parse_arg_pos$.getDynamicValue(thread), api_widgets.$parse_constraining_collection$.getDynamicValue(thread), domain_mt, filter_fn);
                    }
                    if (api_widgets.NIL == ans) {
                        final SubLObject _prev_bind_0_$67 = parsing_vars.$parsing_domain_mt$.currentBinding(thread);
                        try {
                            parsing_vars.$parsing_domain_mt$.bind(domain_mt, thread);
                            if (api_widgets.NIL != api_widgets.$trace_get_cycls_for_string_escalatingP$.getGlobalValue()) {
                                PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str248$____________parse_noun_compound_w, string);
                                PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str249$_____________parse_noun_compound_, new SubLObject[] { string, good_cols, bad_cols, api_widgets.NIL, instance_limit });
                                streams_high.force_output((SubLObject)api_widgets.T);
                            }
                            ans = Sequences.remove_duplicates(parsing_utilities.parse_noun_compound_with_types(string, good_cols, bad_cols, (SubLObject)api_widgets.NIL, instance_limit, (SubLObject)api_widgets.UNPROVIDED), (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                        }
                        finally {
                            parsing_vars.$parsing_domain_mt$.rebind(_prev_bind_0_$67, thread);
                        }
                    }
                    if (api_widgets.NIL == ans) {
                        if (api_widgets.NIL != api_widgets.$trace_get_cycls_for_string_escalatingP$.getGlobalValue()) {
                            PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str250$_____________get_constrained_exte, string);
                            streams_high.force_output((SubLObject)api_widgets.T);
                        }
                        ans = get_constrained_extended_cycls_for_string(string, good_col, api_widgets.$const251$EnglishSenseExtensionDataMt, api_widgets.$get_extended_cycls_for_string_timeout$.getDynamicValue(thread), (SubLObject)api_widgets.UNPROVIDED);
                        ans = constrained_cycl_filter(ans, api_widgets.$parse_sentence_context$.getDynamicValue(thread), api_widgets.$parse_arg_pos$.getDynamicValue(thread), api_widgets.$parse_constraining_collection$.getDynamicValue(thread), domain_mt, filter_fn);
                    }
                    if (api_widgets.NIL == ans && api_widgets.NIL == kb_accessors.kb_first_order_collection_p(good_col)) {
                        if (api_widgets.NIL != api_widgets.$trace_get_cycls_for_string_escalatingP$.getGlobalValue()) {
                            PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str252$______________get_coerced_cycls_f, string);
                            PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str253$_______________get_coerced_cycls_, new SubLObject[] { string, good_col, api_widgets.$nl_coercion_mt$.getDynamicValue(thread), api_widgets.$get_coerced_cycls_timeout$.getDynamicValue(thread) });
                            streams_high.force_output((SubLObject)api_widgets.T);
                        }
                        ans = get_coerced_cycls_for_string(string, good_col, api_widgets.$nl_coercion_mt$.getDynamicValue(thread), api_widgets.$get_coerced_cycls_timeout$.getDynamicValue(thread), (SubLObject)api_widgets.UNPROVIDED);
                    }
                }
                finally {
                    lexicon_macros.$nl_trie_accessor_default_case_sensitivity$.rebind(_prev_bind_0_$66, thread);
                }
                if (api_widgets.NIL == ans) {
                    if (api_widgets.NIL == regular_expression_stringP) {
                        if (api_widgets.NIL != regular_expressionsP) {
                            if (api_widgets.NIL != api_widgets.$trace_get_cycls_for_string_escalatingP$.getGlobalValue()) {
                                PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str254$_______________get_constrained_cy, string);
                                streams_high.force_output((SubLObject)api_widgets.T);
                            }
                            ans = Sequences.remove_duplicates(Mapping.mapcar(Symbols.symbol_function((SubLObject)api_widgets.$sym79$FIRST), get_constrained_cycls_for_regular_expression(string, good_col, bad_col, domain_mt, parsing_mt, case_insensitiveP)), Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                            constrained_cycl_filter(ans, api_widgets.$parse_sentence_context$.getDynamicValue(thread), api_widgets.$parse_arg_pos$.getDynamicValue(thread), api_widgets.$parse_constraining_collection$.getDynamicValue(thread), domain_mt, filter_fn);
                        }
                        else {
                            if (api_widgets.NIL != api_widgets.$trace_get_cycls_for_string_escalatingP$.getGlobalValue()) {
                                PrintLow.format((SubLObject)api_widgets.T, (SubLObject)api_widgets.$str255$_______________get_constrained_cy, string);
                                streams_high.force_output((SubLObject)api_widgets.T);
                            }
                            ans = Sequences.remove_duplicates(get_constrained_cycls_from_generation(string, good_col, bad_col, domain_mt, parsing_mt, case_insensitiveP), Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                            constrained_cycl_filter(ans, api_widgets.$parse_sentence_context$.getDynamicValue(thread), api_widgets.$parse_arg_pos$.getDynamicValue(thread), api_widgets.$parse_constraining_collection$.getDynamicValue(thread), domain_mt, filter_fn);
                        }
                    }
                }
            }
        }
        finally {
            parsing_vars.$npp_use_nl_tagsP$.rebind(_prev_bind_0, thread);
        }
        return list_utilities.remove_subsumed_items(ans, (SubLObject)api_widgets.$sym256$PARSING_REWRITE_OF_, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 87855L)
    public static SubLObject clear_get_extended_cycls_for_string() {
        final SubLObject cs = api_widgets.$get_extended_cycls_for_string_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 87855L)
    public static SubLObject remove_get_extended_cycls_for_string(final SubLObject string, SubLObject mt, SubLObject time) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const251$EnglishSenseExtensionDataMt;
        }
        if (time == api_widgets.UNPROVIDED) {
            time = api_widgets.$get_extended_cycls_for_string_timeout$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_extended_cycls_for_string_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(string, mt, time), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 87855L)
    public static SubLObject get_extended_cycls_for_string_internal(final SubLObject string, final SubLObject mt, final SubLObject time) {
        return ask_utilities.query_variable((SubLObject)api_widgets.$kw258$REF, (SubLObject)ConsesLow.list(api_widgets.$const259$senseExtensionForNameString, (SubLObject)api_widgets.$kw258$REF, string), mt, (SubLObject)ConsesLow.listS((SubLObject)api_widgets.$kw260$MAX_TIME, time, (SubLObject)api_widgets.$list261));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 87855L)
    public static SubLObject get_extended_cycls_for_string(final SubLObject string, SubLObject mt, SubLObject time) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const251$EnglishSenseExtensionDataMt;
        }
        if (time == api_widgets.UNPROVIDED) {
            time = api_widgets.$get_extended_cycls_for_string_timeout$.getDynamicValue();
        }
        SubLObject caching_state = api_widgets.$get_extended_cycls_for_string_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym257$GET_EXTENDED_CYCLS_FOR_STRING, (SubLObject)api_widgets.$sym262$_GET_EXTENDED_CYCLS_FOR_STRING_CACHING_STATE_, (SubLObject)api_widgets.$int263$300, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.THREE_INTEGER, (SubLObject)api_widgets.$int264$100);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(string, mt, time);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (string.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && time.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_extended_cycls_for_string_internal(string, mt, time)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(string, mt, time));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 88340L)
    public static SubLObject clear_get_coerced_cycls_for_term() {
        final SubLObject cs = api_widgets.$get_coerced_cycls_for_term_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 88340L)
    public static SubLObject remove_get_coerced_cycls_for_term(final SubLObject v_term, SubLObject mt, SubLObject time) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$nl_coercion_mt$.getDynamicValue();
        }
        if (time == api_widgets.UNPROVIDED) {
            time = api_widgets.$get_coerced_cycls_timeout$.getDynamicValue();
        }
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_coerced_cycls_for_term_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(v_term, mt, time), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 88340L)
    public static SubLObject get_coerced_cycls_for_term_internal(final SubLObject v_term, final SubLObject mt, final SubLObject time) {
        return ask_utilities.query_variable((SubLObject)api_widgets.$kw258$REF, (SubLObject)ConsesLow.listS(api_widgets.$const266$typeCoerceableToType, v_term, (SubLObject)api_widgets.$list267), mt, (SubLObject)ConsesLow.listS((SubLObject)api_widgets.$kw260$MAX_TIME, time, (SubLObject)api_widgets.$list261));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 88340L)
    public static SubLObject get_coerced_cycls_for_term(final SubLObject v_term, SubLObject mt, SubLObject time) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$nl_coercion_mt$.getDynamicValue();
        }
        if (time == api_widgets.UNPROVIDED) {
            time = api_widgets.$get_coerced_cycls_timeout$.getDynamicValue();
        }
        SubLObject caching_state = api_widgets.$get_coerced_cycls_for_term_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym265$GET_COERCED_CYCLS_FOR_TERM, (SubLObject)api_widgets.$sym268$_GET_COERCED_CYCLS_FOR_TERM_CACHING_STATE_, (SubLObject)api_widgets.$int263$300, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.THREE_INTEGER, (SubLObject)api_widgets.$int264$100);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(v_term, mt, time);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (v_term.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && time.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_coerced_cycls_for_term_internal(v_term, mt, time)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(v_term, mt, time));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 88791L)
    public static SubLObject get_constrained_extended_cycls_for_string(final SubLObject string, final SubLObject constraint, SubLObject mt, SubLObject time, SubLObject semantic_mt) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const251$EnglishSenseExtensionDataMt;
        }
        if (time == api_widgets.UNPROVIDED) {
            time = api_widgets.$get_extended_cycls_for_string_timeout$.getDynamicValue();
        }
        if (semantic_mt == api_widgets.UNPROVIDED) {
            semantic_mt = api_widgets.$const21$InferencePSC;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result_list = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var;
        final SubLObject denot_list = cdolist_list_var = get_extended_cycls_for_string(string, mt, time);
        SubLObject denot = (SubLObject)api_widgets.NIL;
        denot = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(semantic_mt);
            final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                if (api_widgets.NIL != lexicon_accessors.denot_has_typeP(denot, constraint, (SubLObject)api_widgets.UNPROVIDED)) {
                    result_list = (SubLObject)ConsesLow.cons(denot, result_list);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
            cdolist_list_var = cdolist_list_var.rest();
            denot = cdolist_list_var.first();
        }
        return result_list;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 89411L)
    public static SubLObject get_coerced_cycls_for_string(final SubLObject string, final SubLObject constraint, SubLObject mt, SubLObject time, SubLObject semantic_mt) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$nl_coercion_mt$.getDynamicValue();
        }
        if (time == api_widgets.UNPROVIDED) {
            time = api_widgets.$get_coerced_cycls_timeout$.getDynamicValue();
        }
        if (semantic_mt == api_widgets.UNPROVIDED) {
            semantic_mt = api_widgets.$const21$InferencePSC;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject denot_list = (SubLObject)api_widgets.NIL;
        SubLObject result_list = (SubLObject)api_widgets.NIL;
        final SubLObject _prev_bind_0 = parsing_vars.$npp_use_nl_tagsP$.currentBinding(thread);
        try {
            parsing_vars.$npp_use_nl_tagsP$.bind((SubLObject)api_widgets.NIL, thread);
            denot_list = psp_main.ps_get_cycls_for_phrase(string, api_widgets.$const269$SententialConstituent, api_widgets.$const270$nounStrings, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        }
        finally {
            parsing_vars.$npp_use_nl_tagsP$.rebind(_prev_bind_0, thread);
        }
        SubLObject cdolist_list_var = denot_list;
        SubLObject denot = (SubLObject)api_widgets.NIL;
        denot = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject coerced_list = get_coerced_cycls_for_term(denot, mt, time);
            result_list = ConsesLow.append(constraint_filters.filter_terms_by_constraining_collection(constraint, mt_relevance_macros.$mt$.getDynamicValue(thread), coerced_list), result_list);
            cdolist_list_var = cdolist_list_var.rest();
            denot = cdolist_list_var.first();
        }
        return Sequences.nreverse(result_list);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 90173L)
    public static SubLObject apply_constrained_cycls_filter_fn(final SubLObject filter_fn, final SubLObject ans, final SubLObject domain_mt) {
        return Functions.funcall(filter_fn, ans, domain_mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 90377L)
    public static SubLObject get_constrained_cycls_from_generation(final SubLObject string, final SubLObject good_col, SubLObject bad_col, SubLObject domain_mt, SubLObject parsing_mt, SubLObject case_insensitiveP) {
        if (bad_col == api_widgets.UNPROVIDED) {
            bad_col = (SubLObject)api_widgets.NIL;
        }
        if (domain_mt == api_widgets.UNPROVIDED) {
            domain_mt = (SubLObject)api_widgets.NIL;
        }
        if (parsing_mt == api_widgets.UNPROVIDED) {
            parsing_mt = lexicon_vars.$lexicon_lookup_mt$.getDynamicValue();
        }
        if (case_insensitiveP == api_widgets.UNPROVIDED) {
            case_insensitiveP = (SubLObject)api_widgets.T;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = (SubLObject)api_widgets.NIL;
        final SubLObject cardinality_cutoff = api_widgets.$constrained_cycls_from_generation_cardinality_cutoff$.getGlobalValue();
        if (api_widgets.NIL != forts.fort_p(good_col) && cardinality_estimates.instance_cardinality(good_col).numLE(cardinality_cutoff)) {
            if (api_widgets.NIL == cycl_grammar.cycl_denotational_term_p(bad_col)) {
                bad_col = (SubLObject)api_widgets.NIL;
            }
            final SubLObject mt_var = domain_mt;
            final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            final SubLObject _prev_bind_4 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)api_widgets.NIL, thread);
                thread.resetMultipleValues();
                final SubLObject _prev_bind_0_$68 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                try {
                    pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                    final SubLObject reuseP = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    try {
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$69 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                            final SubLObject new_or_reused = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            final SubLObject _prev_bind_0_$70 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                            try {
                                pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                final SubLObject _prev_bind_0_$71 = memoization_state.$memoization_state$.currentBinding(thread);
                                try {
                                    memoization_state.$memoization_state$.bind(local_state, thread);
                                    final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                    try {
                                        final SubLObject _prev_bind_0_$72 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$73 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                        try {
                                            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa), thread);
                                            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                            try {
                                                SubLObject node_var_$74 = good_col;
                                                final SubLObject deck_type = (SubLObject)api_widgets.$kw273$STACK;
                                                final SubLObject recur_deck = deck.create_deck(deck_type);
                                                final SubLObject _prev_bind_0_$73 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                try {
                                                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                    try {
                                                        final SubLObject tv_var = (SubLObject)api_widgets.NIL;
                                                        final SubLObject _prev_bind_0_$74 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                        final SubLObject _prev_bind_1_$74 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_tv$.bind((api_widgets.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((api_widgets.NIL != tv_var) ? api_widgets.$sym274$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                                                            if (api_widgets.NIL != tv_var && api_widgets.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && api_widgets.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                if (pcase_var.eql((SubLObject)api_widgets.$kw275$ERROR)) {
                                                                    sbhl_paranoia.sbhl_error((SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                }
                                                                else if (pcase_var.eql((SubLObject)api_widgets.$kw278$CERROR)) {
                                                                    sbhl_paranoia.sbhl_cerror((SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.$str279$continue_anyway, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                }
                                                                else if (pcase_var.eql((SubLObject)api_widgets.$kw280$WARN)) {
                                                                    Errors.warn((SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P);
                                                                }
                                                                else {
                                                                    Errors.warn((SubLObject)api_widgets.$str281$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                    Errors.cerror((SubLObject)api_widgets.$str279$continue_anyway, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P);
                                                                }
                                                            }
                                                            final SubLObject _prev_bind_0_$75 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                            final SubLObject _prev_bind_1_$75 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                            final SubLObject _prev_bind_2_$80 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                            final SubLObject _prev_bind_3_$81 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                            final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), thread);
                                                                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa))), thread);
                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa))), thread);
                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)api_widgets.NIL, thread);
                                                                sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), thread);
                                                                if (api_widgets.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || api_widgets.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(good_col, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) {
                                                                    final SubLObject _prev_bind_0_$76 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                    final SubLObject _prev_bind_1_$76 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                    final SubLObject _prev_bind_2_$81 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa))), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)api_widgets.NIL, thread);
                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$74, (SubLObject)api_widgets.UNPROVIDED);
                                                                        while (api_widgets.NIL != node_var_$74) {
                                                                            final SubLObject tt_node_var = node_var_$74;
                                                                            SubLObject cdolist_list_var;
                                                                            final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa));
                                                                            SubLObject module_var = (SubLObject)api_widgets.NIL;
                                                                            module_var = cdolist_list_var.first();
                                                                            while (api_widgets.NIL != cdolist_list_var) {
                                                                                final SubLObject _prev_bind_0_$77 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                final SubLObject _prev_bind_1_$77 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((api_widgets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(api_widgets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                                                    final SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                    if (api_widgets.NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                        final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                                        if (api_widgets.NIL != d_link) {
                                                                                            final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                                            if (api_widgets.NIL != mt_links) {
                                                                                                SubLObject iteration_state;
                                                                                                for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                                                    thread.resetMultipleValues();
                                                                                                    final SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                    final SubLObject tv_links = thread.secondMultipleValue();
                                                                                                    thread.resetMultipleValues();
                                                                                                    if (api_widgets.NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                                                        final SubLObject _prev_bind_0_$78 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                                                            SubLObject iteration_state_$88;
                                                                                                            for (iteration_state_$88 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$88); iteration_state_$88 = dictionary_contents.do_dictionary_contents_next(iteration_state_$88)) {
                                                                                                                thread.resetMultipleValues();
                                                                                                                final SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$88);
                                                                                                                final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                thread.resetMultipleValues();
                                                                                                                if (api_widgets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                                                    final SubLObject _prev_bind_0_$79 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                    try {
                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                                                        final SubLObject sol = link_nodes;
                                                                                                                        if (api_widgets.NIL != set.set_p(sol)) {
                                                                                                                            final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                                            SubLObject basis_object;
                                                                                                                            SubLObject state;
                                                                                                                            SubLObject instance;
                                                                                                                            SubLObject _prev_bind_0_$80;
                                                                                                                            SubLObject match;
                                                                                                                            SubLObject csome_list_var;
                                                                                                                            SubLObject phrase;
                                                                                                                            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)api_widgets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                                                instance = set_contents.do_set_contents_next(basis_object, state);
                                                                                                                                if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state, instance) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(instance, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                    if (api_widgets.NIL != forts.fort_p(instance) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                                        _prev_bind_0_$80 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                                            match = (SubLObject)api_widgets.NIL;
                                                                                                                                            if (api_widgets.NIL == match) {
                                                                                                                                                csome_list_var = pph_methods_lexicon.all_phrases_for_term(instance, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                                phrase = (SubLObject)api_widgets.NIL;
                                                                                                                                                phrase = csome_list_var.first();
                                                                                                                                                while (api_widgets.NIL == match && api_widgets.NIL != csome_list_var) {
                                                                                                                                                    if (api_widgets.NIL != ((api_widgets.NIL != case_insensitiveP) ? Equality.equalp(phrase, string) : Equality.equal(phrase, string))) {
                                                                                                                                                        match = instance;
                                                                                                                                                        if (api_widgets.NIL != match) {
                                                                                                                                                            ans = (SubLObject)ConsesLow.cons(match, ans);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    csome_list_var = csome_list_var.rest();
                                                                                                                                                    phrase = csome_list_var.first();
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        finally {
                                                                                                                                            lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$80, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else if (sol.isList()) {
                                                                                                                            SubLObject csome_list_var2 = sol;
                                                                                                                            SubLObject instance2 = (SubLObject)api_widgets.NIL;
                                                                                                                            instance2 = csome_list_var2.first();
                                                                                                                            while (api_widgets.NIL != csome_list_var2) {
                                                                                                                                if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(instance2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                    if (api_widgets.NIL != forts.fort_p(instance2) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance2, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                                        final SubLObject _prev_bind_0_$81 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                                        try {
                                                                                                                                            lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                                            SubLObject match2 = (SubLObject)api_widgets.NIL;
                                                                                                                                            if (api_widgets.NIL == match2) {
                                                                                                                                                SubLObject csome_list_var_$92 = pph_methods_lexicon.all_phrases_for_term(instance2, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                                SubLObject phrase2 = (SubLObject)api_widgets.NIL;
                                                                                                                                                phrase2 = csome_list_var_$92.first();
                                                                                                                                                while (api_widgets.NIL == match2 && api_widgets.NIL != csome_list_var_$92) {
                                                                                                                                                    if (api_widgets.NIL != ((api_widgets.NIL != case_insensitiveP) ? Equality.equalp(phrase2, string) : Equality.equal(phrase2, string))) {
                                                                                                                                                        match2 = instance2;
                                                                                                                                                        if (api_widgets.NIL != match2) {
                                                                                                                                                            ans = (SubLObject)ConsesLow.cons(match2, ans);
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    csome_list_var_$92 = csome_list_var_$92.rest();
                                                                                                                                                    phrase2 = csome_list_var_$92.first();
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        finally {
                                                                                                                                            lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$81, thread);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                csome_list_var2 = csome_list_var2.rest();
                                                                                                                                instance2 = csome_list_var2.first();
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                                        }
                                                                                                                    }
                                                                                                                    finally {
                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$79, thread);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state_$88);
                                                                                                        }
                                                                                                        finally {
                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$78, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            sbhl_paranoia.sbhl_error((SubLObject)api_widgets.FIVE_INTEGER, (SubLObject)api_widgets.$str283$attempting_to_bind_direction_link, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                        }
                                                                                        if (api_widgets.NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) {
                                                                                            SubLObject csome_list_var3 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                            SubLObject instance_tuple = (SubLObject)api_widgets.NIL;
                                                                                            instance_tuple = csome_list_var3.first();
                                                                                            while (api_widgets.NIL != csome_list_var3) {
                                                                                                SubLObject current;
                                                                                                final SubLObject datum = current = instance_tuple;
                                                                                                SubLObject link_node = (SubLObject)api_widgets.NIL;
                                                                                                SubLObject mt2 = (SubLObject)api_widgets.NIL;
                                                                                                SubLObject tv2 = (SubLObject)api_widgets.NIL;
                                                                                                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list284);
                                                                                                link_node = current.first();
                                                                                                current = current.rest();
                                                                                                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list284);
                                                                                                mt2 = current.first();
                                                                                                current = current.rest();
                                                                                                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list284);
                                                                                                tv2 = current.first();
                                                                                                current = current.rest();
                                                                                                if (api_widgets.NIL == current) {
                                                                                                    if (api_widgets.NIL != mt_relevance_macros.relevant_mtP(mt2)) {
                                                                                                        final SubLObject _prev_bind_0_$82 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt2, thread);
                                                                                                            if (api_widgets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                                                final SubLObject _prev_bind_0_$83 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                                                    final SubLObject sol;
                                                                                                                    final SubLObject link_nodes2 = sol = (SubLObject)ConsesLow.list(link_node);
                                                                                                                    if (api_widgets.NIL != set.set_p(sol)) {
                                                                                                                        final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                                        SubLObject basis_object;
                                                                                                                        SubLObject state;
                                                                                                                        SubLObject instance;
                                                                                                                        SubLObject match;
                                                                                                                        SubLObject phrase;
                                                                                                                        SubLObject _prev_bind_0_$84;
                                                                                                                        SubLObject csome_list_var_$93;
                                                                                                                        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)api_widgets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                                            instance = set_contents.do_set_contents_next(basis_object, state);
                                                                                                                            if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state, instance) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(instance, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                if (api_widgets.NIL != forts.fort_p(instance) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                                    _prev_bind_0_$84 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                                    try {
                                                                                                                                        lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                                        match = (SubLObject)api_widgets.NIL;
                                                                                                                                        if (api_widgets.NIL == match) {
                                                                                                                                            csome_list_var_$93 = pph_methods_lexicon.all_phrases_for_term(instance, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                            phrase = (SubLObject)api_widgets.NIL;
                                                                                                                                            phrase = csome_list_var_$93.first();
                                                                                                                                            while (api_widgets.NIL == match && api_widgets.NIL != csome_list_var_$93) {
                                                                                                                                                if (api_widgets.NIL != ((api_widgets.NIL != case_insensitiveP) ? Equality.equalp(phrase, string) : Equality.equal(phrase, string))) {
                                                                                                                                                    match = instance;
                                                                                                                                                    if (api_widgets.NIL != match) {
                                                                                                                                                        ans = (SubLObject)ConsesLow.cons(match, ans);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                csome_list_var_$93 = csome_list_var_$93.rest();
                                                                                                                                                phrase = csome_list_var_$93.first();
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    finally {
                                                                                                                                        lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$84, thread);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else if (sol.isList()) {
                                                                                                                        SubLObject csome_list_var_$94 = sol;
                                                                                                                        SubLObject instance2 = (SubLObject)api_widgets.NIL;
                                                                                                                        instance2 = csome_list_var_$94.first();
                                                                                                                        while (api_widgets.NIL != csome_list_var_$94) {
                                                                                                                            if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(instance2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                if (api_widgets.NIL != forts.fort_p(instance2) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance2, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                                    final SubLObject _prev_bind_0_$85 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                                    try {
                                                                                                                                        lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                                        SubLObject match2 = (SubLObject)api_widgets.NIL;
                                                                                                                                        if (api_widgets.NIL == match2) {
                                                                                                                                            SubLObject csome_list_var_$95 = pph_methods_lexicon.all_phrases_for_term(instance2, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                            SubLObject phrase2 = (SubLObject)api_widgets.NIL;
                                                                                                                                            phrase2 = csome_list_var_$95.first();
                                                                                                                                            while (api_widgets.NIL == match2 && api_widgets.NIL != csome_list_var_$95) {
                                                                                                                                                if (api_widgets.NIL != ((api_widgets.NIL != case_insensitiveP) ? Equality.equalp(phrase2, string) : Equality.equal(phrase2, string))) {
                                                                                                                                                    match2 = instance2;
                                                                                                                                                    if (api_widgets.NIL != match2) {
                                                                                                                                                        ans = (SubLObject)ConsesLow.cons(match2, ans);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                csome_list_var_$95 = csome_list_var_$95.rest();
                                                                                                                                                phrase2 = csome_list_var_$95.first();
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    finally {
                                                                                                                                        lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$85, thread);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            csome_list_var_$94 = csome_list_var_$94.rest();
                                                                                                                            instance2 = csome_list_var_$94.first();
                                                                                                                        }
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                                    }
                                                                                                                }
                                                                                                                finally {
                                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$83, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        finally {
                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$82, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list284);
                                                                                                }
                                                                                                csome_list_var3 = csome_list_var3.rest();
                                                                                                instance_tuple = csome_list_var3.first();
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else if (api_widgets.NIL != obsolete.cnat_p(node, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                        SubLObject cdolist_list_var_$100;
                                                                                        final SubLObject new_list = cdolist_list_var_$100 = ((api_widgets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)));
                                                                                        SubLObject generating_fn = (SubLObject)api_widgets.NIL;
                                                                                        generating_fn = cdolist_list_var_$100.first();
                                                                                        while (api_widgets.NIL != cdolist_list_var_$100) {
                                                                                            final SubLObject _prev_bind_0_$86 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                final SubLObject sol2;
                                                                                                final SubLObject link_nodes3 = sol2 = Functions.funcall(generating_fn, node);
                                                                                                if (api_widgets.NIL != set.set_p(sol2)) {
                                                                                                    final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                                                    SubLObject basis_object2;
                                                                                                    SubLObject state2;
                                                                                                    SubLObject instance3;
                                                                                                    SubLObject _prev_bind_0_$87;
                                                                                                    SubLObject match3;
                                                                                                    SubLObject csome_list_var4;
                                                                                                    SubLObject phrase3;
                                                                                                    for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)api_widgets.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                                        instance3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                                        if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state2, instance3) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(instance3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            if (api_widgets.NIL != forts.fort_p(instance3) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance3, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                _prev_bind_0_$87 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                    match3 = (SubLObject)api_widgets.NIL;
                                                                                                                    if (api_widgets.NIL == match3) {
                                                                                                                        csome_list_var4 = pph_methods_lexicon.all_phrases_for_term(instance3, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                        phrase3 = (SubLObject)api_widgets.NIL;
                                                                                                                        phrase3 = csome_list_var4.first();
                                                                                                                        while (api_widgets.NIL == match3 && api_widgets.NIL != csome_list_var4) {
                                                                                                                            if (api_widgets.NIL != ((api_widgets.NIL != case_insensitiveP) ? Equality.equalp(phrase3, string) : Equality.equal(phrase3, string))) {
                                                                                                                                match3 = instance3;
                                                                                                                                if (api_widgets.NIL != match3) {
                                                                                                                                    ans = (SubLObject)ConsesLow.cons(match3, ans);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            csome_list_var4 = csome_list_var4.rest();
                                                                                                                            phrase3 = csome_list_var4.first();
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                finally {
                                                                                                                    lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$87, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else if (sol2.isList()) {
                                                                                                    SubLObject csome_list_var5 = sol2;
                                                                                                    SubLObject instance4 = (SubLObject)api_widgets.NIL;
                                                                                                    instance4 = csome_list_var5.first();
                                                                                                    while (api_widgets.NIL != csome_list_var5) {
                                                                                                        if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(instance4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            if (api_widgets.NIL != forts.fort_p(instance4) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance4, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                final SubLObject _prev_bind_0_$88 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                    SubLObject match4 = (SubLObject)api_widgets.NIL;
                                                                                                                    if (api_widgets.NIL == match4) {
                                                                                                                        SubLObject csome_list_var_$96 = pph_methods_lexicon.all_phrases_for_term(instance4, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                        SubLObject phrase4 = (SubLObject)api_widgets.NIL;
                                                                                                                        phrase4 = csome_list_var_$96.first();
                                                                                                                        while (api_widgets.NIL == match4 && api_widgets.NIL != csome_list_var_$96) {
                                                                                                                            if (api_widgets.NIL != ((api_widgets.NIL != case_insensitiveP) ? Equality.equalp(phrase4, string) : Equality.equal(phrase4, string))) {
                                                                                                                                match4 = instance4;
                                                                                                                                if (api_widgets.NIL != match4) {
                                                                                                                                    ans = (SubLObject)ConsesLow.cons(match4, ans);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            csome_list_var_$96 = csome_list_var_$96.rest();
                                                                                                                            phrase4 = csome_list_var_$96.first();
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                finally {
                                                                                                                    lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$88, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        csome_list_var5 = csome_list_var5.rest();
                                                                                                        instance4 = csome_list_var5.first();
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                                                }
                                                                                            }
                                                                                            finally {
                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$86, thread);
                                                                                            }
                                                                                            cdolist_list_var_$100 = cdolist_list_var_$100.rest();
                                                                                            generating_fn = cdolist_list_var_$100.first();
                                                                                        }
                                                                                    }
                                                                                }
                                                                                finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$77, thread);
                                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$77, thread);
                                                                                }
                                                                                cdolist_list_var = cdolist_list_var.rest();
                                                                                module_var = cdolist_list_var.first();
                                                                            }
                                                                            SubLObject cdolist_list_var2;
                                                                            final SubLObject accessible_modules2 = cdolist_list_var2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)));
                                                                            SubLObject module_var2 = (SubLObject)api_widgets.NIL;
                                                                            module_var2 = cdolist_list_var2.first();
                                                                            while (api_widgets.NIL != cdolist_list_var2) {
                                                                                final SubLObject _prev_bind_0_$89 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                final SubLObject _prev_bind_1_$78 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((api_widgets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(api_widgets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                                                    final SubLObject node2 = function_terms.naut_to_nart(node_var_$74);
                                                                                    if (api_widgets.NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                                                        final SubLObject d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                                        if (api_widgets.NIL != d_link2) {
                                                                                            final SubLObject mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                                            if (api_widgets.NIL != mt_links2) {
                                                                                                SubLObject iteration_state2;
                                                                                                for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                                                    thread.resetMultipleValues();
                                                                                                    final SubLObject mt3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                                                    final SubLObject tv_links2 = thread.secondMultipleValue();
                                                                                                    thread.resetMultipleValues();
                                                                                                    if (api_widgets.NIL != mt_relevance_macros.relevant_mtP(mt3)) {
                                                                                                        final SubLObject _prev_bind_0_$90 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                        try {
                                                                                                            sbhl_link_vars.$sbhl_link_mt$.bind(mt3, thread);
                                                                                                            SubLObject iteration_state_$89;
                                                                                                            for (iteration_state_$89 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$89); iteration_state_$89 = dictionary_contents.do_dictionary_contents_next(iteration_state_$89)) {
                                                                                                                thread.resetMultipleValues();
                                                                                                                final SubLObject tv2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$89);
                                                                                                                final SubLObject link_nodes4 = thread.secondMultipleValue();
                                                                                                                thread.resetMultipleValues();
                                                                                                                if (api_widgets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                                                    final SubLObject _prev_bind_0_$91 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                    try {
                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                                                        final SubLObject sol3 = link_nodes4;
                                                                                                                        if (api_widgets.NIL != set.set_p(sol3)) {
                                                                                                                            final SubLObject set_contents_var3 = set.do_set_internal(sol3);
                                                                                                                            SubLObject basis_object3;
                                                                                                                            SubLObject state3;
                                                                                                                            SubLObject node_vars_link_node;
                                                                                                                            for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = (SubLObject)api_widgets.NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                                                node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                                                if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                    deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else if (sol3.isList()) {
                                                                                                                            SubLObject csome_list_var6 = sol3;
                                                                                                                            SubLObject node_vars_link_node2 = (SubLObject)api_widgets.NIL;
                                                                                                                            node_vars_link_node2 = csome_list_var6.first();
                                                                                                                            while (api_widgets.NIL != csome_list_var6) {
                                                                                                                                if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                    deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                                                }
                                                                                                                                csome_list_var6 = csome_list_var6.rest();
                                                                                                                                node_vars_link_node2 = csome_list_var6.first();
                                                                                                                            }
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                                        }
                                                                                                                    }
                                                                                                                    finally {
                                                                                                                        sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$91, thread);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state_$89);
                                                                                                        }
                                                                                                        finally {
                                                                                                            sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$90, thread);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                                            }
                                                                                        }
                                                                                        else {
                                                                                            sbhl_paranoia.sbhl_error((SubLObject)api_widgets.FIVE_INTEGER, (SubLObject)api_widgets.$str283$attempting_to_bind_direction_link, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                        }
                                                                                    }
                                                                                    else if (api_widgets.NIL != obsolete.cnat_p(node2, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                        SubLObject cdolist_list_var_$101;
                                                                                        final SubLObject new_list2 = cdolist_list_var_$101 = ((api_widgets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)));
                                                                                        SubLObject generating_fn2 = (SubLObject)api_widgets.NIL;
                                                                                        generating_fn2 = cdolist_list_var_$101.first();
                                                                                        while (api_widgets.NIL != cdolist_list_var_$101) {
                                                                                            final SubLObject _prev_bind_0_$92 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                                                final SubLObject sol4;
                                                                                                final SubLObject link_nodes5 = sol4 = Functions.funcall(generating_fn2, node2);
                                                                                                if (api_widgets.NIL != set.set_p(sol4)) {
                                                                                                    final SubLObject set_contents_var4 = set.do_set_internal(sol4);
                                                                                                    SubLObject basis_object4;
                                                                                                    SubLObject state4;
                                                                                                    SubLObject node_vars_link_node3;
                                                                                                    for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = (SubLObject)api_widgets.NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                                        node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                                        if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else if (sol4.isList()) {
                                                                                                    SubLObject csome_list_var7 = sol4;
                                                                                                    SubLObject node_vars_link_node4 = (SubLObject)api_widgets.NIL;
                                                                                                    node_vars_link_node4 = csome_list_var7.first();
                                                                                                    while (api_widgets.NIL != csome_list_var7) {
                                                                                                        if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                            deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                                        }
                                                                                                        csome_list_var7 = csome_list_var7.rest();
                                                                                                        node_vars_link_node4 = csome_list_var7.first();
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                                                }
                                                                                            }
                                                                                            finally {
                                                                                                sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$92, thread);
                                                                                            }
                                                                                            cdolist_list_var_$101 = cdolist_list_var_$101.rest();
                                                                                            generating_fn2 = cdolist_list_var_$101.first();
                                                                                        }
                                                                                    }
                                                                                }
                                                                                finally {
                                                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$78, thread);
                                                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$89, thread);
                                                                                }
                                                                                cdolist_list_var2 = cdolist_list_var2.rest();
                                                                                module_var2 = cdolist_list_var2.first();
                                                                            }
                                                                            node_var_$74 = deck.deck_pop(recur_deck);
                                                                        }
                                                                    }
                                                                    finally {
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$81, thread);
                                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$76, thread);
                                                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$76, thread);
                                                                    }
                                                                }
                                                                else {
                                                                    sbhl_paranoia.sbhl_warn((SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.$str285$Node__a_does_not_pass_sbhl_type_t, good_col, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                }
                                                            }
                                                            finally {
                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3_$81, thread);
                                                                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$80, thread);
                                                                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$75, thread);
                                                                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$75, thread);
                                                            }
                                                        }
                                                        finally {
                                                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$74, thread);
                                                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$74, thread);
                                                        }
                                                    }
                                                    finally {
                                                        final SubLObject _prev_bind_0_$93 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                        try {
                                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                            final SubLObject _values = Values.getValuesAsVector();
                                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                            Values.restoreValuesFromVector(_values);
                                                        }
                                                        finally {
                                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$93, thread);
                                                        }
                                                    }
                                                }
                                                finally {
                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$73, thread);
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$94 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                    final SubLObject _values2 = Values.getValuesAsVector();
                                                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                    Values.restoreValuesFromVector(_values2);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$94, thread);
                                                }
                                            }
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1_$73, thread);
                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$72, thread);
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$95 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                            final SubLObject _values3 = Values.getValuesAsVector();
                                            memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                            Values.restoreValuesFromVector(_values3);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$95, thread);
                                        }
                                    }
                                }
                                finally {
                                    memoization_state.$memoization_state$.rebind(_prev_bind_0_$71, thread);
                                }
                            }
                            finally {
                                pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$70, thread);
                            }
                            if (new_or_reused == api_widgets.$kw77$NEW && api_widgets.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                                memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$69, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$96 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                            final SubLObject _values4 = Values.getValuesAsVector();
                            if (api_widgets.NIL == reuseP) {
                                pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                            }
                            Values.restoreValuesFromVector(_values4);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$96, thread);
                        }
                    }
                }
                finally {
                    pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$68, thread);
                }
            }
            finally {
                pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_4, thread);
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 91610L)
    public static SubLObject get_constrained_cycls_for_regular_expression(final SubLObject regular_expression, final SubLObject good_col, SubLObject bad_col, SubLObject domain_mt, SubLObject parsing_mt, SubLObject case_insensitiveP) {
        if (bad_col == api_widgets.UNPROVIDED) {
            bad_col = (SubLObject)api_widgets.NIL;
        }
        if (domain_mt == api_widgets.UNPROVIDED) {
            domain_mt = (SubLObject)api_widgets.NIL;
        }
        if (parsing_mt == api_widgets.UNPROVIDED) {
            parsing_mt = lexicon_vars.$lexicon_lookup_mt$.getDynamicValue();
        }
        if (case_insensitiveP == api_widgets.UNPROVIDED) {
            case_insensitiveP = (SubLObject)api_widgets.T;
        }
        SubLObject ans = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != regular_expressions.is_regular_expressions_support_availableP()) {
            ans = get_constrained_cycls_for_regular_expression_low(regular_expression, good_col, bad_col, domain_mt, parsing_mt, case_insensitiveP);
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 92379L)
    public static SubLObject get_constrained_cycls_for_regular_expression_low(final SubLObject regular_expression, final SubLObject good_col, SubLObject bad_col, final SubLObject domain_mt, final SubLObject parsing_mt, final SubLObject case_insensitiveP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = (SubLObject)api_widgets.NIL;
        final SubLObject cardinality_cutoff = api_widgets.$constrained_cycls_for_regular_expression_cardinality_cutoff$.getGlobalValue();
        if (api_widgets.NIL != forts.fort_p(good_col) && cardinality_estimates.instance_cardinality(good_col).numLE(cardinality_cutoff)) {
            if (api_widgets.NIL == cycl_grammar.cycl_denotational_term_p(bad_col)) {
                bad_col = (SubLObject)api_widgets.NIL;
            }
            final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(domain_mt), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(domain_mt), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(domain_mt), thread);
                final SubLObject compile_options = (SubLObject)((api_widgets.NIL != case_insensitiveP) ? api_widgets.$list288 : api_widgets.NIL);
                thread.resetMultipleValues();
                final SubLObject pattern = regular_expressions.compile_regular_expression(regular_expression, compile_options);
                final SubLObject error_code = thread.secondMultipleValue();
                final SubLObject error_offset = thread.thirdMultipleValue();
                final SubLObject error_msg = thread.fourthMultipleValue();
                thread.resetMultipleValues();
                try {
                    if (api_widgets.NIL == regular_expressions.regex_pattern_p(pattern)) {
                        Errors.error((SubLObject)api_widgets.$str289$Error__A___A__compiling_regular_e, new SubLObject[] { error_code, error_msg, regular_expression, error_offset });
                    }
                    final SubLObject _prev_bind_0_$116 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
                    try {
                        pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)api_widgets.NIL, thread);
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$117 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                        try {
                            pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                            final SubLObject reuseP = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            try {
                                thread.resetMultipleValues();
                                final SubLObject _prev_bind_0_$118 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                                try {
                                    pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                                    final SubLObject new_or_reused = thread.secondMultipleValue();
                                    thread.resetMultipleValues();
                                    final SubLObject _prev_bind_0_$119 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                                    try {
                                        pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                        final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                        final SubLObject _prev_bind_0_$120 = memoization_state.$memoization_state$.currentBinding(thread);
                                        try {
                                            memoization_state.$memoization_state$.bind(local_state, thread);
                                            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                            try {
                                                final SubLObject _prev_bind_0_$121 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$122 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                try {
                                                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa), thread);
                                                    sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                    try {
                                                        SubLObject node_var_$123 = good_col;
                                                        final SubLObject deck_type = (SubLObject)api_widgets.$kw273$STACK;
                                                        final SubLObject recur_deck = deck.create_deck(deck_type);
                                                        final SubLObject _prev_bind_0_$122 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                        try {
                                                            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                            try {
                                                                final SubLObject tv_var = (SubLObject)api_widgets.NIL;
                                                                final SubLObject _prev_bind_0_$123 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                                                final SubLObject _prev_bind_1_$123 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                                                try {
                                                                    sbhl_search_vars.$sbhl_tv$.bind((api_widgets.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((api_widgets.NIL != tv_var) ? api_widgets.$sym274$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                                                                    if (api_widgets.NIL != tv_var && api_widgets.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && api_widgets.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                                                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                                                        if (pcase_var.eql((SubLObject)api_widgets.$kw275$ERROR)) {
                                                                            sbhl_paranoia.sbhl_error((SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                        }
                                                                        else if (pcase_var.eql((SubLObject)api_widgets.$kw278$CERROR)) {
                                                                            sbhl_paranoia.sbhl_cerror((SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.$str279$continue_anyway, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                        }
                                                                        else if (pcase_var.eql((SubLObject)api_widgets.$kw280$WARN)) {
                                                                            Errors.warn((SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P);
                                                                        }
                                                                        else {
                                                                            Errors.warn((SubLObject)api_widgets.$str281$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                                            Errors.cerror((SubLObject)api_widgets.$str279$continue_anyway, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P);
                                                                        }
                                                                    }
                                                                    final SubLObject _prev_bind_0_$124 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                                    final SubLObject _prev_bind_1_$124 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                                    final SubLObject _prev_bind_2_$129 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                                    final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                    final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                    try {
                                                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa))), thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa))), thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)api_widgets.NIL, thread);
                                                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), thread);
                                                                        if (api_widgets.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || api_widgets.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(good_col, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) {
                                                                            final SubLObject _prev_bind_0_$125 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                                            final SubLObject _prev_bind_1_$125 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                            final SubLObject _prev_bind_2_$130 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                            try {
                                                                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa))), thread);
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)api_widgets.NIL, thread);
                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$123, (SubLObject)api_widgets.UNPROVIDED);
                                                                                while (api_widgets.NIL != node_var_$123) {
                                                                                    final SubLObject tt_node_var = node_var_$123;
                                                                                    SubLObject cdolist_list_var;
                                                                                    final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa));
                                                                                    SubLObject module_var = (SubLObject)api_widgets.NIL;
                                                                                    module_var = cdolist_list_var.first();
                                                                                    while (api_widgets.NIL != cdolist_list_var) {
                                                                                        final SubLObject _prev_bind_0_$126 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                        final SubLObject _prev_bind_1_$126 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((api_widgets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(api_widgets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                                                            final SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                                            if (api_widgets.NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                                                final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                                                if (api_widgets.NIL != d_link) {
                                                                                                    final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                                                    if (api_widgets.NIL != mt_links) {
                                                                                                        SubLObject iteration_state;
                                                                                                        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                                                            thread.resetMultipleValues();
                                                                                                            final SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                                            final SubLObject tv_links = thread.secondMultipleValue();
                                                                                                            thread.resetMultipleValues();
                                                                                                            if (api_widgets.NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                                                                final SubLObject _prev_bind_0_$127 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                                                                    SubLObject iteration_state_$136;
                                                                                                                    for (iteration_state_$136 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$136); iteration_state_$136 = dictionary_contents.do_dictionary_contents_next(iteration_state_$136)) {
                                                                                                                        thread.resetMultipleValues();
                                                                                                                        final SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$136);
                                                                                                                        final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                                                        thread.resetMultipleValues();
                                                                                                                        if (api_widgets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                                                            final SubLObject _prev_bind_0_$128 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                                                                final SubLObject sol = link_nodes;
                                                                                                                                if (api_widgets.NIL != set.set_p(sol)) {
                                                                                                                                    final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                                                    SubLObject basis_object;
                                                                                                                                    SubLObject state;
                                                                                                                                    SubLObject instance;
                                                                                                                                    SubLObject _prev_bind_0_$129;
                                                                                                                                    SubLObject match;
                                                                                                                                    SubLObject csome_list_var;
                                                                                                                                    SubLObject phrase;
                                                                                                                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)api_widgets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                                                        instance = set_contents.do_set_contents_next(basis_object, state);
                                                                                                                                        if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state, instance) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(instance, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                            if (api_widgets.NIL != forts.fort_p(instance) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                                                _prev_bind_0_$129 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                                                try {
                                                                                                                                                    lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                                                    match = (SubLObject)api_widgets.NIL;
                                                                                                                                                    if (api_widgets.NIL == match) {
                                                                                                                                                        csome_list_var = pph_methods_lexicon.all_phrases_for_term(instance, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                                        phrase = (SubLObject)api_widgets.NIL;
                                                                                                                                                        phrase = csome_list_var.first();
                                                                                                                                                        while (api_widgets.NIL == match && api_widgets.NIL != csome_list_var) {
                                                                                                                                                            if (api_widgets.NIL != regular_expression_utilities.find_all_matches_for_pattern(pattern, phrase, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                                                                match = (SubLObject)ConsesLow.list(instance, phrase);
                                                                                                                                                            }
                                                                                                                                                            csome_list_var = csome_list_var.rest();
                                                                                                                                                            phrase = csome_list_var.first();
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    if (api_widgets.NIL != match) {
                                                                                                                                                        ans = (SubLObject)ConsesLow.cons(match, ans);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                finally {
                                                                                                                                                    lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$129, thread);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else if (sol.isList()) {
                                                                                                                                    SubLObject csome_list_var2 = sol;
                                                                                                                                    SubLObject instance2 = (SubLObject)api_widgets.NIL;
                                                                                                                                    instance2 = csome_list_var2.first();
                                                                                                                                    while (api_widgets.NIL != csome_list_var2) {
                                                                                                                                        if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(instance2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                            if (api_widgets.NIL != forts.fort_p(instance2) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance2, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                                                final SubLObject _prev_bind_0_$130 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                                                try {
                                                                                                                                                    lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                                                    SubLObject match2 = (SubLObject)api_widgets.NIL;
                                                                                                                                                    if (api_widgets.NIL == match2) {
                                                                                                                                                        SubLObject csome_list_var_$140 = pph_methods_lexicon.all_phrases_for_term(instance2, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                                        SubLObject phrase2 = (SubLObject)api_widgets.NIL;
                                                                                                                                                        phrase2 = csome_list_var_$140.first();
                                                                                                                                                        while (api_widgets.NIL == match2 && api_widgets.NIL != csome_list_var_$140) {
                                                                                                                                                            if (api_widgets.NIL != regular_expression_utilities.find_all_matches_for_pattern(pattern, phrase2, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                                                                match2 = (SubLObject)ConsesLow.list(instance2, phrase2);
                                                                                                                                                            }
                                                                                                                                                            csome_list_var_$140 = csome_list_var_$140.rest();
                                                                                                                                                            phrase2 = csome_list_var_$140.first();
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    if (api_widgets.NIL != match2) {
                                                                                                                                                        ans = (SubLObject)ConsesLow.cons(match2, ans);
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                finally {
                                                                                                                                                    lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$130, thread);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        csome_list_var2 = csome_list_var2.rest();
                                                                                                                                        instance2 = csome_list_var2.first();
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$128, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$136);
                                                                                                                }
                                                                                                                finally {
                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$127, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    sbhl_paranoia.sbhl_error((SubLObject)api_widgets.FIVE_INTEGER, (SubLObject)api_widgets.$str283$attempting_to_bind_direction_link, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                }
                                                                                                if (api_widgets.NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                    SubLObject csome_list_var3 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                                                    SubLObject instance_tuple = (SubLObject)api_widgets.NIL;
                                                                                                    instance_tuple = csome_list_var3.first();
                                                                                                    while (api_widgets.NIL != csome_list_var3) {
                                                                                                        SubLObject current;
                                                                                                        final SubLObject datum = current = instance_tuple;
                                                                                                        SubLObject link_node = (SubLObject)api_widgets.NIL;
                                                                                                        SubLObject mt2 = (SubLObject)api_widgets.NIL;
                                                                                                        SubLObject tv2 = (SubLObject)api_widgets.NIL;
                                                                                                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list284);
                                                                                                        link_node = current.first();
                                                                                                        current = current.rest();
                                                                                                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list284);
                                                                                                        mt2 = current.first();
                                                                                                        current = current.rest();
                                                                                                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list284);
                                                                                                        tv2 = current.first();
                                                                                                        current = current.rest();
                                                                                                        if (api_widgets.NIL == current) {
                                                                                                            if (api_widgets.NIL != mt_relevance_macros.relevant_mtP(mt2)) {
                                                                                                                final SubLObject _prev_bind_0_$131 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt2, thread);
                                                                                                                    if (api_widgets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                                                        final SubLObject _prev_bind_0_$132 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                        try {
                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                                                            final SubLObject sol;
                                                                                                                            final SubLObject link_nodes2 = sol = (SubLObject)ConsesLow.list(link_node);
                                                                                                                            if (api_widgets.NIL != set.set_p(sol)) {
                                                                                                                                final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                                                SubLObject basis_object;
                                                                                                                                SubLObject state;
                                                                                                                                SubLObject instance;
                                                                                                                                SubLObject match;
                                                                                                                                SubLObject phrase;
                                                                                                                                SubLObject _prev_bind_0_$133;
                                                                                                                                SubLObject csome_list_var_$141;
                                                                                                                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)api_widgets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                                                    instance = set_contents.do_set_contents_next(basis_object, state);
                                                                                                                                    if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state, instance) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(instance, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                        if (api_widgets.NIL != forts.fort_p(instance) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                                            _prev_bind_0_$133 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                                            try {
                                                                                                                                                lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                                                match = (SubLObject)api_widgets.NIL;
                                                                                                                                                if (api_widgets.NIL == match) {
                                                                                                                                                    csome_list_var_$141 = pph_methods_lexicon.all_phrases_for_term(instance, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                                    phrase = (SubLObject)api_widgets.NIL;
                                                                                                                                                    phrase = csome_list_var_$141.first();
                                                                                                                                                    while (api_widgets.NIL == match && api_widgets.NIL != csome_list_var_$141) {
                                                                                                                                                        if (api_widgets.NIL != regular_expression_utilities.find_all_matches_for_pattern(pattern, phrase, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                                                            match = (SubLObject)ConsesLow.list(instance, phrase);
                                                                                                                                                        }
                                                                                                                                                        csome_list_var_$141 = csome_list_var_$141.rest();
                                                                                                                                                        phrase = csome_list_var_$141.first();
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                if (api_widgets.NIL != match) {
                                                                                                                                                    ans = (SubLObject)ConsesLow.cons(match, ans);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            finally {
                                                                                                                                                lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$133, thread);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else if (sol.isList()) {
                                                                                                                                SubLObject csome_list_var_$142 = sol;
                                                                                                                                SubLObject instance2 = (SubLObject)api_widgets.NIL;
                                                                                                                                instance2 = csome_list_var_$142.first();
                                                                                                                                while (api_widgets.NIL != csome_list_var_$142) {
                                                                                                                                    if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(instance2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                                        if (api_widgets.NIL != forts.fort_p(instance2) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance2, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                                            final SubLObject _prev_bind_0_$134 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                                            try {
                                                                                                                                                lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                                                SubLObject match2 = (SubLObject)api_widgets.NIL;
                                                                                                                                                if (api_widgets.NIL == match2) {
                                                                                                                                                    SubLObject csome_list_var_$143 = pph_methods_lexicon.all_phrases_for_term(instance2, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                                    SubLObject phrase2 = (SubLObject)api_widgets.NIL;
                                                                                                                                                    phrase2 = csome_list_var_$143.first();
                                                                                                                                                    while (api_widgets.NIL == match2 && api_widgets.NIL != csome_list_var_$143) {
                                                                                                                                                        if (api_widgets.NIL != regular_expression_utilities.find_all_matches_for_pattern(pattern, phrase2, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                                                            match2 = (SubLObject)ConsesLow.list(instance2, phrase2);
                                                                                                                                                        }
                                                                                                                                                        csome_list_var_$143 = csome_list_var_$143.rest();
                                                                                                                                                        phrase2 = csome_list_var_$143.first();
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                if (api_widgets.NIL != match2) {
                                                                                                                                                    ans = (SubLObject)ConsesLow.cons(match2, ans);
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            finally {
                                                                                                                                                lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$134, thread);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    csome_list_var_$142 = csome_list_var_$142.rest();
                                                                                                                                    instance2 = csome_list_var_$142.first();
                                                                                                                                }
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                                            }
                                                                                                                        }
                                                                                                                        finally {
                                                                                                                            sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$132, thread);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                finally {
                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$131, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list284);
                                                                                                        }
                                                                                                        csome_list_var3 = csome_list_var3.rest();
                                                                                                        instance_tuple = csome_list_var3.first();
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else if (api_widgets.NIL != obsolete.cnat_p(node, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                SubLObject cdolist_list_var_$148;
                                                                                                final SubLObject new_list = cdolist_list_var_$148 = ((api_widgets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)));
                                                                                                SubLObject generating_fn = (SubLObject)api_widgets.NIL;
                                                                                                generating_fn = cdolist_list_var_$148.first();
                                                                                                while (api_widgets.NIL != cdolist_list_var_$148) {
                                                                                                    final SubLObject _prev_bind_0_$135 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                    try {
                                                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                                                        final SubLObject sol2;
                                                                                                        final SubLObject link_nodes3 = sol2 = Functions.funcall(generating_fn, node);
                                                                                                        if (api_widgets.NIL != set.set_p(sol2)) {
                                                                                                            final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                                                            SubLObject basis_object2;
                                                                                                            SubLObject state2;
                                                                                                            SubLObject instance3;
                                                                                                            SubLObject _prev_bind_0_$136;
                                                                                                            SubLObject match3;
                                                                                                            SubLObject csome_list_var4;
                                                                                                            SubLObject phrase3;
                                                                                                            for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)api_widgets.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                                                instance3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                                                if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state2, instance3) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(instance3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                    if (api_widgets.NIL != forts.fort_p(instance3) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance3, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                        _prev_bind_0_$136 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                        try {
                                                                                                                            lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                            match3 = (SubLObject)api_widgets.NIL;
                                                                                                                            if (api_widgets.NIL == match3) {
                                                                                                                                csome_list_var4 = pph_methods_lexicon.all_phrases_for_term(instance3, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                phrase3 = (SubLObject)api_widgets.NIL;
                                                                                                                                phrase3 = csome_list_var4.first();
                                                                                                                                while (api_widgets.NIL == match3 && api_widgets.NIL != csome_list_var4) {
                                                                                                                                    if (api_widgets.NIL != regular_expression_utilities.find_all_matches_for_pattern(pattern, phrase3, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                                        match3 = (SubLObject)ConsesLow.list(instance3, phrase3);
                                                                                                                                    }
                                                                                                                                    csome_list_var4 = csome_list_var4.rest();
                                                                                                                                    phrase3 = csome_list_var4.first();
                                                                                                                                }
                                                                                                                            }
                                                                                                                            if (api_widgets.NIL != match3) {
                                                                                                                                ans = (SubLObject)ConsesLow.cons(match3, ans);
                                                                                                                            }
                                                                                                                        }
                                                                                                                        finally {
                                                                                                                            lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$136, thread);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else if (sol2.isList()) {
                                                                                                            SubLObject csome_list_var5 = sol2;
                                                                                                            SubLObject instance4 = (SubLObject)api_widgets.NIL;
                                                                                                            instance4 = csome_list_var5.first();
                                                                                                            while (api_widgets.NIL != csome_list_var5) {
                                                                                                                if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(instance4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(instance4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                    if (api_widgets.NIL != forts.fort_p(instance4) && (api_widgets.NIL == bad_col || api_widgets.NIL == lexicon_accessors.denot_has_typeP(instance4, bad_col, (SubLObject)api_widgets.UNPROVIDED))) {
                                                                                                                        final SubLObject _prev_bind_0_$137 = lexicon_vars.$lexicon_lookup_mt$.currentBinding(thread);
                                                                                                                        try {
                                                                                                                            lexicon_vars.$lexicon_lookup_mt$.bind(parsing_mt, thread);
                                                                                                                            SubLObject match4 = (SubLObject)api_widgets.NIL;
                                                                                                                            if (api_widgets.NIL == match4) {
                                                                                                                                SubLObject csome_list_var_$144 = pph_methods_lexicon.all_phrases_for_term(instance4, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                SubLObject phrase4 = (SubLObject)api_widgets.NIL;
                                                                                                                                phrase4 = csome_list_var_$144.first();
                                                                                                                                while (api_widgets.NIL == match4 && api_widgets.NIL != csome_list_var_$144) {
                                                                                                                                    if (api_widgets.NIL != regular_expression_utilities.find_all_matches_for_pattern(pattern, phrase4, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                                        match4 = (SubLObject)ConsesLow.list(instance4, phrase4);
                                                                                                                                    }
                                                                                                                                    csome_list_var_$144 = csome_list_var_$144.rest();
                                                                                                                                    phrase4 = csome_list_var_$144.first();
                                                                                                                                }
                                                                                                                            }
                                                                                                                            if (api_widgets.NIL != match4) {
                                                                                                                                ans = (SubLObject)ConsesLow.cons(match4, ans);
                                                                                                                            }
                                                                                                                        }
                                                                                                                        finally {
                                                                                                                            lexicon_vars.$lexicon_lookup_mt$.rebind(_prev_bind_0_$137, thread);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                csome_list_var5 = csome_list_var5.rest();
                                                                                                                instance4 = csome_list_var5.first();
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                                                        }
                                                                                                    }
                                                                                                    finally {
                                                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$135, thread);
                                                                                                    }
                                                                                                    cdolist_list_var_$148 = cdolist_list_var_$148.rest();
                                                                                                    generating_fn = cdolist_list_var_$148.first();
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        finally {
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$126, thread);
                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$126, thread);
                                                                                        }
                                                                                        cdolist_list_var = cdolist_list_var.rest();
                                                                                        module_var = cdolist_list_var.first();
                                                                                    }
                                                                                    SubLObject cdolist_list_var2;
                                                                                    final SubLObject accessible_modules2 = cdolist_list_var2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)));
                                                                                    SubLObject module_var2 = (SubLObject)api_widgets.NIL;
                                                                                    module_var2 = cdolist_list_var2.first();
                                                                                    while (api_widgets.NIL != cdolist_list_var2) {
                                                                                        final SubLObject _prev_bind_0_$138 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                                                        final SubLObject _prev_bind_1_$127 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                                                        try {
                                                                                            sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((api_widgets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(api_widgets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                                                            final SubLObject node2 = function_terms.naut_to_nart(node_var_$123);
                                                                                            if (api_widgets.NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                                                                final SubLObject d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                                                if (api_widgets.NIL != d_link2) {
                                                                                                    final SubLObject mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                                                    if (api_widgets.NIL != mt_links2) {
                                                                                                        SubLObject iteration_state2;
                                                                                                        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                                                            thread.resetMultipleValues();
                                                                                                            final SubLObject mt3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                                                            final SubLObject tv_links2 = thread.secondMultipleValue();
                                                                                                            thread.resetMultipleValues();
                                                                                                            if (api_widgets.NIL != mt_relevance_macros.relevant_mtP(mt3)) {
                                                                                                                final SubLObject _prev_bind_0_$139 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                                                try {
                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.bind(mt3, thread);
                                                                                                                    SubLObject iteration_state_$137;
                                                                                                                    for (iteration_state_$137 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$137); iteration_state_$137 = dictionary_contents.do_dictionary_contents_next(iteration_state_$137)) {
                                                                                                                        thread.resetMultipleValues();
                                                                                                                        final SubLObject tv2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$137);
                                                                                                                        final SubLObject link_nodes4 = thread.secondMultipleValue();
                                                                                                                        thread.resetMultipleValues();
                                                                                                                        if (api_widgets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                                                            final SubLObject _prev_bind_0_$140 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                                            try {
                                                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                                                                final SubLObject sol3 = link_nodes4;
                                                                                                                                if (api_widgets.NIL != set.set_p(sol3)) {
                                                                                                                                    final SubLObject set_contents_var3 = set.do_set_internal(sol3);
                                                                                                                                    SubLObject basis_object3;
                                                                                                                                    SubLObject state3;
                                                                                                                                    SubLObject node_vars_link_node;
                                                                                                                                    for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = (SubLObject)api_widgets.NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                                                        node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                                                        if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                            deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else if (sol3.isList()) {
                                                                                                                                    SubLObject csome_list_var6 = sol3;
                                                                                                                                    SubLObject node_vars_link_node2 = (SubLObject)api_widgets.NIL;
                                                                                                                                    node_vars_link_node2 = csome_list_var6.first();
                                                                                                                                    while (api_widgets.NIL != csome_list_var6) {
                                                                                                                                        if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                                            deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                                                        }
                                                                                                                                        csome_list_var6 = csome_list_var6.rest();
                                                                                                                                        node_vars_link_node2 = csome_list_var6.first();
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                else {
                                                                                                                                    Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            finally {
                                                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$140, thread);
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$137);
                                                                                                                }
                                                                                                                finally {
                                                                                                                    sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$139, thread);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    sbhl_paranoia.sbhl_error((SubLObject)api_widgets.FIVE_INTEGER, (SubLObject)api_widgets.$str283$attempting_to_bind_direction_link, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                }
                                                                                            }
                                                                                            else if (api_widgets.NIL != obsolete.cnat_p(node2, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                SubLObject cdolist_list_var_$149;
                                                                                                final SubLObject new_list2 = cdolist_list_var_$149 = ((api_widgets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)));
                                                                                                SubLObject generating_fn2 = (SubLObject)api_widgets.NIL;
                                                                                                generating_fn2 = cdolist_list_var_$149.first();
                                                                                                while (api_widgets.NIL != cdolist_list_var_$149) {
                                                                                                    final SubLObject _prev_bind_0_$141 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                                                    try {
                                                                                                        sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                                                        final SubLObject sol4;
                                                                                                        final SubLObject link_nodes5 = sol4 = Functions.funcall(generating_fn2, node2);
                                                                                                        if (api_widgets.NIL != set.set_p(sol4)) {
                                                                                                            final SubLObject set_contents_var4 = set.do_set_internal(sol4);
                                                                                                            SubLObject basis_object4;
                                                                                                            SubLObject state4;
                                                                                                            SubLObject node_vars_link_node3;
                                                                                                            for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = (SubLObject)api_widgets.NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                                                node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                                                if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                    deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        else if (sol4.isList()) {
                                                                                                            SubLObject csome_list_var7 = sol4;
                                                                                                            SubLObject node_vars_link_node4 = (SubLObject)api_widgets.NIL;
                                                                                                            node_vars_link_node4 = csome_list_var7.first();
                                                                                                            while (api_widgets.NIL != csome_list_var7) {
                                                                                                                if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                    deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                                                }
                                                                                                                csome_list_var7 = csome_list_var7.rest();
                                                                                                                node_vars_link_node4 = csome_list_var7.first();
                                                                                                            }
                                                                                                        }
                                                                                                        else {
                                                                                                            Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                                                        }
                                                                                                    }
                                                                                                    finally {
                                                                                                        sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$141, thread);
                                                                                                    }
                                                                                                    cdolist_list_var_$149 = cdolist_list_var_$149.rest();
                                                                                                    generating_fn2 = cdolist_list_var_$149.first();
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        finally {
                                                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$127, thread);
                                                                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$138, thread);
                                                                                        }
                                                                                        cdolist_list_var2 = cdolist_list_var2.rest();
                                                                                        module_var2 = cdolist_list_var2.first();
                                                                                    }
                                                                                    node_var_$123 = deck.deck_pop(recur_deck);
                                                                                }
                                                                            }
                                                                            finally {
                                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$130, thread);
                                                                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$125, thread);
                                                                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$125, thread);
                                                                            }
                                                                        }
                                                                        else {
                                                                            sbhl_paranoia.sbhl_warn((SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.$str285$Node__a_does_not_pass_sbhl_type_t, good_col, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                        }
                                                                    }
                                                                    finally {
                                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$129, thread);
                                                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$124, thread);
                                                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$124, thread);
                                                                    }
                                                                }
                                                                finally {
                                                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$123, thread);
                                                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$123, thread);
                                                                }
                                                            }
                                                            finally {
                                                                final SubLObject _prev_bind_0_$142 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                                try {
                                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                                    final SubLObject _values = Values.getValuesAsVector();
                                                                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                    Values.restoreValuesFromVector(_values);
                                                                }
                                                                finally {
                                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$142, thread);
                                                                }
                                                            }
                                                        }
                                                        finally {
                                                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$122, thread);
                                                        }
                                                    }
                                                    finally {
                                                        final SubLObject _prev_bind_0_$143 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                        try {
                                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                            final SubLObject _values2 = Values.getValuesAsVector();
                                                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                            Values.restoreValuesFromVector(_values2);
                                                        }
                                                        finally {
                                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$143, thread);
                                                        }
                                                    }
                                                }
                                                finally {
                                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1_$122, thread);
                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$121, thread);
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$144 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                    final SubLObject _values3 = Values.getValuesAsVector();
                                                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                                    Values.restoreValuesFromVector(_values3);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$144, thread);
                                                }
                                            }
                                        }
                                        finally {
                                            memoization_state.$memoization_state$.rebind(_prev_bind_0_$120, thread);
                                        }
                                    }
                                    finally {
                                        pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$119, thread);
                                    }
                                    if (new_or_reused == api_widgets.$kw77$NEW && api_widgets.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                                        memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                                    }
                                }
                                finally {
                                    pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$118, thread);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$145 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                    final SubLObject _values4 = Values.getValuesAsVector();
                                    if (api_widgets.NIL == reuseP) {
                                        pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                                    }
                                    Values.restoreValuesFromVector(_values4);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$145, thread);
                                }
                            }
                        }
                        finally {
                            pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$117, thread);
                        }
                    }
                    finally {
                        pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0_$116, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$146 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                        final SubLObject _values5 = Values.getValuesAsVector();
                        if (api_widgets.NIL != regular_expressions.regex_pattern_p(pattern)) {
                            regular_expressions.discard_regular_expression_pattern(pattern);
                        }
                        Values.restoreValuesFromVector(_values5);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$146, thread);
                    }
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 93592L)
    public static SubLObject get_constrained_cycls_for_regular_expression_via_inference(final SubLObject regular_expression, final SubLObject good_col, final SubLObject bad_col, final SubLObject domain_mt, final SubLObject parsing_mt, SubLObject case_insensitiveP) {
        if (case_insensitiveP == api_widgets.UNPROVIDED) {
            case_insensitiveP = (SubLObject)api_widgets.T;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject var = (SubLObject)api_widgets.$sym50$_X;
        final SubLObject name_var = (SubLObject)api_widgets.$sym290$_NAME;
        final SubLObject semantic_constraints = get_cycls_for_regex_semantic_constraints(var, good_col, bad_col);
        final SubLObject regex_constraint = get_cycls_for_regex_regex_constraint(name_var, regular_expression, case_insensitiveP);
        final SubLObject lexical_constraint = (SubLObject)ConsesLow.list(api_widgets.$const291$termStrings, var, name_var);
        SubLObject ans = (SubLObject)api_widgets.NIL;
        SubLObject problem_store = (SubLObject)api_widgets.NIL;
        try {
            problem_store = inference_datastructures_problem_store.new_problem_store((SubLObject)api_widgets.NIL);
            final SubLObject _prev_bind_0 = pph_macros.$free_pph_problem_store_pointers$.currentBinding(thread);
            try {
                pph_macros.$free_pph_problem_store_pointers$.bind((SubLObject)api_widgets.NIL, thread);
                thread.resetMultipleValues();
                final SubLObject _prev_bind_0_$165 = pph_macros.$pph_problem_store_pointer$.currentBinding(thread);
                try {
                    pph_macros.$pph_problem_store_pointer$.bind(pph_macros.find_or_create_pph_problem_store_pointer(), thread);
                    final SubLObject reuseP = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    try {
                        thread.resetMultipleValues();
                        final SubLObject _prev_bind_0_$166 = pph_macros.$pph_memoization_state$.currentBinding(thread);
                        try {
                            pph_macros.$pph_memoization_state$.bind(pph_macros.find_or_create_pph_memoization_state(), thread);
                            final SubLObject new_or_reused = thread.secondMultipleValue();
                            thread.resetMultipleValues();
                            final SubLObject _prev_bind_0_$167 = pph_macros.$pph_external_memoization_state$.currentBinding(thread);
                            try {
                                pph_macros.$pph_external_memoization_state$.bind(pph_macros.find_or_create_pph_external_memoization_state(), thread);
                                final SubLObject local_state = pph_macros.$pph_memoization_state$.getDynamicValue(thread);
                                final SubLObject _prev_bind_0_$168 = memoization_state.$memoization_state$.currentBinding(thread);
                                try {
                                    memoization_state.$memoization_state$.bind(local_state, thread);
                                    final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                                    try {
                                        final SubLObject initial_query_sentence = (SubLObject)ConsesLow.listS(api_widgets.$const106$and, lexical_constraint, regex_constraint, semantic_constraints);
                                        SubLObject cdolist_list_var;
                                        final SubLObject candidates_and_names = cdolist_list_var = ask_utilities.query_template((SubLObject)ConsesLow.list(var, name_var), initial_query_sentence, api_widgets.$const21$InferencePSC, (SubLObject)ConsesLow.list((SubLObject)api_widgets.$kw292$PROBLEM_STORE, problem_store, (SubLObject)api_widgets.$kw293$ANSWER_LANGUAGE, (SubLObject)api_widgets.$kw294$HL));
                                        SubLObject pair = (SubLObject)api_widgets.NIL;
                                        pair = cdolist_list_var.first();
                                        while (api_widgets.NIL != cdolist_list_var) {
                                            SubLObject current;
                                            final SubLObject datum = current = pair;
                                            SubLObject candidate = (SubLObject)api_widgets.NIL;
                                            SubLObject name = (SubLObject)api_widgets.NIL;
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list295);
                                            candidate = current.first();
                                            current = current.rest();
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list295);
                                            name = current.first();
                                            current = current.rest();
                                            if (api_widgets.NIL == current) {
                                                final SubLObject filtering_query_sentence = cycl_utilities.expression_subst(candidate, var, cycl_utilities.expression_subst(name, name_var, (SubLObject)ConsesLow.listS(api_widgets.$const106$and, (SubLObject)ConsesLow.list(api_widgets.$const108$ist, parsing_mt, lexical_constraint), semantic_constraints), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                if (api_widgets.NIL != cyc_kernel.closed_query_success_result_p(inference_kernel.new_cyc_query(filtering_query_sentence, domain_mt, (SubLObject)ConsesLow.list((SubLObject)api_widgets.$kw292$PROBLEM_STORE, problem_store)))) {
                                                    final SubLObject item_var = pair;
                                                    if (api_widgets.NIL == conses_high.member(item_var, ans, Symbols.symbol_function((SubLObject)api_widgets.EQL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                                        ans = (SubLObject)ConsesLow.cons(item_var, ans);
                                                    }
                                                }
                                            }
                                            else {
                                                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list295);
                                            }
                                            cdolist_list_var = cdolist_list_var.rest();
                                            pair = cdolist_list_var.first();
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$169 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                            final SubLObject _values = Values.getValuesAsVector();
                                            memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                            Values.restoreValuesFromVector(_values);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$169, thread);
                                        }
                                    }
                                }
                                finally {
                                    memoization_state.$memoization_state$.rebind(_prev_bind_0_$168, thread);
                                }
                            }
                            finally {
                                pph_macros.$pph_external_memoization_state$.rebind(_prev_bind_0_$167, thread);
                            }
                            if (new_or_reused == api_widgets.$kw77$NEW && api_widgets.NIL != memoization_state.memoization_state_p(pph_macros.$pph_memoization_state$.getDynamicValue(thread))) {
                                memoization_state.clear_all_memoization(pph_macros.$pph_memoization_state$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            pph_macros.$pph_memoization_state$.rebind(_prev_bind_0_$166, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$170 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (api_widgets.NIL == reuseP) {
                                pph_macros.free_pph_problem_store_pointer(pph_macros.$pph_problem_store_pointer$.getDynamicValue(thread));
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$170, thread);
                        }
                    }
                }
                finally {
                    pph_macros.$pph_problem_store_pointer$.rebind(_prev_bind_0_$165, thread);
                }
            }
            finally {
                pph_macros.$free_pph_problem_store_pointers$.rebind(_prev_bind_0, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                final SubLObject _values3 = Values.getValuesAsVector();
                inference_datastructures_problem_store.destroy_problem_store(problem_store);
                Values.restoreValuesFromVector(_values3);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 95199L)
    public static SubLObject get_cycls_for_regex_semantic_constraints(final SubLObject var, final SubLObject good_col, final SubLObject bad_col) {
        SubLObject semantic_constraints = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != cycl_grammar.cycl_denotational_term_p(good_col)) {
            semantic_constraints = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(api_widgets.$const296$knownSentence, (SubLObject)ConsesLow.list(api_widgets.$const52$isa, var, good_col)), semantic_constraints);
        }
        if (api_widgets.NIL != cycl_grammar.cycl_denotational_term_p(bad_col)) {
            semantic_constraints = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(api_widgets.$const297$unknownSentence, (SubLObject)ConsesLow.list(api_widgets.$const52$isa, var, bad_col)), semantic_constraints);
        }
        return semantic_constraints;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 95599L)
    public static SubLObject get_cycls_for_regex_regex_constraint(final SubLObject name_var, final SubLObject regular_expression, final SubLObject case_insensitiveP) {
        final SubLObject regex_pred = (api_widgets.NIL != case_insensitiveP) ? api_widgets.$const298$regexStringMatch_CaseInsensitive : api_widgets.$const299$regexStringMatch;
        return (SubLObject)ConsesLow.list(regex_pred, regular_expression, name_var);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 95869L)
    public static SubLObject filter_phrase_term_list_by_constraint_list(final SubLObject phrase_term_list, final SubLObject constraints, SubLObject domain_mt) {
        domain_mt = hlmt_czer.coerce_to_hlmt(domain_mt);
        SubLObject result = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = phrase_term_list;
        SubLObject phrase_term_pair = (SubLObject)api_widgets.NIL;
        phrase_term_pair = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = phrase_term_pair;
            SubLObject phrase = (SubLObject)api_widgets.NIL;
            SubLObject term_denoted = (SubLObject)api_widgets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list301);
            phrase = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list301);
            term_denoted = current.first();
            current = current.rest();
            if (api_widgets.NIL == current) {
                term_denoted = czer_main.coerce_to_fort(term_denoted);
                if (api_widgets.NIL != filter_cycl_term_by_constraint_list(term_denoted, constraints, domain_mt)) {
                    result = (SubLObject)ConsesLow.cons(phrase_term_pair, result);
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list301);
            }
            cdolist_list_var = cdolist_list_var.rest();
            phrase_term_pair = cdolist_list_var.first();
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 96396L)
    public static SubLObject filter_cycl_term_by_constraint_list(SubLObject v_term, final SubLObject constraints, SubLObject domain_mt) {
        v_term = czer_main.coerce_to_fort(v_term);
        domain_mt = hlmt_czer.coerce_to_hlmt(domain_mt);
        SubLObject query_formula = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = constraints;
        SubLObject constraint = (SubLObject)api_widgets.NIL;
        constraint = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            if (api_widgets.NIL != cycl_utilities.naut_with_functor_p(constraint, api_widgets.$const303$TheSet)) {
                final SubLObject variable = cycl_utilities.formula_arg1(constraint, (SubLObject)api_widgets.UNPROVIDED);
                final SubLObject set_description = cycl_utilities.formula_arg2(constraint, (SubLObject)api_widgets.UNPROVIDED);
                query_formula = (SubLObject)ConsesLow.cons(conses_high.subst(v_term, variable, set_description, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED), query_formula);
            }
            cdolist_list_var = cdolist_list_var.rest();
            constraint = cdolist_list_var.first();
        }
        return rkf_query_utilities.rkf_known((SubLObject)ConsesLow.cons(api_widgets.$const106$and, query_formula), domain_mt, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 97113L)
    public static SubLObject auto_complete_constrained(final SubLObject prefix, final SubLObject constraining_collection, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != Types.stringp(prefix) : prefix;
        assert api_widgets.NIL != fort_types_interface.isa_collectionP(constraining_collection, (SubLObject)api_widgets.UNPROVIDED) : constraining_collection;
        SubLObject list_of_javalists = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = nl_trie_completion.nl_trie_completions(prefix, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject string = (SubLObject)api_widgets.NIL;
        string = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject javalists = (SubLObject)api_widgets.NIL;
            SubLObject cdolist_list_var_$171 = nl_trie.nl_trie_search(string, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            SubLObject nl_trie_entry = (SubLObject)api_widgets.NIL;
            nl_trie_entry = cdolist_list_var_$171.first();
            while (api_widgets.NIL != cdolist_list_var_$171) {
                thread.resetMultipleValues();
                final SubLObject temp_javalists = nl_trie.nl_trie_entry_to_javalists(nl_trie_entry);
                final SubLObject denotations = thread.secondMultipleValue();
                thread.resetMultipleValues();
                SubLObject javalist = (SubLObject)api_widgets.NIL;
                SubLObject javalist_$172 = (SubLObject)api_widgets.NIL;
                SubLObject denot = (SubLObject)api_widgets.NIL;
                SubLObject denot_$173 = (SubLObject)api_widgets.NIL;
                javalist = temp_javalists;
                javalist_$172 = javalist.first();
                denot = denotations;
                denot_$173 = denot.first();
                while (api_widgets.NIL != denot || api_widgets.NIL != javalist) {
                    if (api_widgets.NIL != isa.isaP(denot_$173, constraining_collection, domain_mt, (SubLObject)api_widgets.UNPROVIDED)) {
                        final SubLObject item_var = javalist_$172;
                        if (api_widgets.NIL == conses_high.member(item_var, javalists, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                            javalists = (SubLObject)ConsesLow.cons(item_var, javalists);
                        }
                    }
                    javalist = javalist.rest();
                    javalist_$172 = javalist.first();
                    denot = denot.rest();
                    denot_$173 = denot.first();
                }
                cdolist_list_var_$171 = cdolist_list_var_$171.rest();
                nl_trie_entry = cdolist_list_var_$171.first();
            }
            if (api_widgets.NIL == list_utilities.empty_list_p(javalists)) {
                final SubLObject item_var2 = javalists;
                if (api_widgets.NIL == conses_high.member(item_var2, list_of_javalists, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                    list_of_javalists = (SubLObject)ConsesLow.cons(item_var2, list_of_javalists);
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            string = cdolist_list_var.first();
        }
        return list_of_javalists;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 98046L)
    public static SubLObject auto_complete_term_quick(final SubLObject prefix, final SubLObject max_num) {
        assert api_widgets.NIL != Types.stringp(prefix) : prefix;
        assert api_widgets.NIL != Types.integerp(max_num) : max_num;
        SubLObject result_nl_trie_entries = (SubLObject)api_widgets.NIL;
        final SubLObject result_map = dictionary.new_dictionary((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject doneP = (SubLObject)api_widgets.NIL;
        SubLObject max_limitP = (SubLObject)api_widgets.NIL;
        SubLObject entry_to_push = (SubLObject)api_widgets.NIL;
        SubLObject rest;
        SubLObject string;
        SubLObject rest_$174;
        SubLObject nl_trie_entry;
        SubLObject pref_denots;
        SubLObject item_var;
        SubLObject cdolist_list_var;
        SubLObject denot;
        for (rest = (SubLObject)api_widgets.NIL, rest = Sort.sort(nl_trie_completion.nl_trie_completions(prefix, (SubLObject)api_widgets.UNPROVIDED), Symbols.symbol_function((SubLObject)api_widgets.$sym78$STRING_LESSP), (SubLObject)api_widgets.UNPROVIDED); api_widgets.NIL == max_limitP && api_widgets.NIL != rest; rest = rest.rest()) {
            string = rest.first();
            for (doneP = (SubLObject)api_widgets.NIL, rest_$174 = (SubLObject)api_widgets.NIL, rest_$174 = nl_trie.nl_trie_search(string, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED); api_widgets.NIL == doneP && api_widgets.NIL != rest_$174; rest_$174 = rest_$174.rest()) {
                nl_trie_entry = rest_$174.first();
                pref_denots = nl_trie.nl_trie_entry_preferred_denots(nl_trie_entry);
                if (api_widgets.NIL != list_utilities.non_empty_list_p(pref_denots)) {
                    entry_to_push = nl_trie_entry;
                    doneP = (SubLObject)api_widgets.T;
                }
                else if (api_widgets.NIL != list_utilities.non_empty_list_p(nl_trie.nl_trie_entry_denots(nl_trie_entry))) {
                    entry_to_push = nl_trie_entry;
                }
            }
            item_var = entry_to_push;
            if (api_widgets.NIL == conses_high.member(item_var, result_nl_trie_entries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                result_nl_trie_entries = (SubLObject)ConsesLow.cons(item_var, result_nl_trie_entries);
            }
            cdolist_list_var = nl_trie.nl_trie_entry_denots(entry_to_push);
            denot = (SubLObject)api_widgets.NIL;
            denot = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                if (api_widgets.NIL != dictionary_utilities.dictionary_has_keyP(result_map, denot)) {
                    if (api_widgets.NIL != doneP) {
                        dictionary_utilities.dictionary_pop(result_map, denot);
                        dictionary_utilities.dictionary_push(result_map, denot, nl_trie.nl_trie_entry_string(entry_to_push));
                    }
                }
                else {
                    dictionary_utilities.dictionary_push(result_map, denot, nl_trie.nl_trie_entry_string(entry_to_push));
                }
                cdolist_list_var = cdolist_list_var.rest();
                denot = cdolist_list_var.first();
            }
            if (dictionary.dictionary_length(result_map).numG(max_num)) {
                max_limitP = (SubLObject)api_widgets.T;
            }
        }
        SubLObject cdolist_list_var2 = result_nl_trie_entries;
        SubLObject each_nl_trie_entry = (SubLObject)api_widgets.NIL;
        each_nl_trie_entry = cdolist_list_var2.first();
        while (api_widgets.NIL != cdolist_list_var2) {
            final SubLObject entry_pos_preds = nl_trie.nl_trie_entry_pos_preds(each_nl_trie_entry);
            final SubLObject entry_denots = nl_trie.nl_trie_entry_denots(each_nl_trie_entry);
            final SubLObject maybe_remove = nl_trie.nl_trie_entry_string(each_nl_trie_entry);
            final SubLObject curr_denot = entry_denots.first();
            if (api_widgets.NIL != subl_promotions.memberP(api_widgets.$const307$plural, entry_pos_preds, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED) || api_widgets.NIL != subl_promotions.memberP(api_widgets.$const308$gerund_Plural, entry_pos_preds, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED) || api_widgets.NIL != rkf_relevance_utilities.rkf_irrelevant_term(curr_denot, api_widgets.$const112$BaseKB)) {
                final SubLObject rem_string = dictionary.dictionary_lookup_without_values(result_map, curr_denot, (SubLObject)api_widgets.UNPROVIDED);
                if (rem_string.first().isString() && rem_string.first().equal(maybe_remove)) {
                    dictionary_utilities.dictionary_pop(result_map, curr_denot);
                }
            }
            cdolist_list_var2 = cdolist_list_var2.rest();
            each_nl_trie_entry = cdolist_list_var2.first();
        }
        return Sort.sort(Mapping.mapcar(Symbols.symbol_function((SubLObject)api_widgets.$sym79$FIRST), dictionary.dictionary_values(result_map)), Symbols.symbol_function((SubLObject)api_widgets.$sym78$STRING_LESSP), (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 100087L)
    public static SubLObject auto_complete_constrained_new(final SubLObject prefix, final SubLObject constraining_collection, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != Types.stringp(prefix) : prefix;
        assert api_widgets.NIL != fort_types_interface.isa_collectionP(constraining_collection, (SubLObject)api_widgets.UNPROVIDED) : constraining_collection;
        final SubLObject denot_strings_map = dictionary.new_dictionary((SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.ZERO_INTEGER);
        final SubLObject word_unit_pos_map = dictionary.new_dictionary((SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.ZERO_INTEGER);
        SubLObject cdolist_list_var = nl_trie_completion.nl_trie_completions(prefix, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject string = (SubLObject)api_widgets.NIL;
        string = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$175 = nl_trie.nl_trie_search(string, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            SubLObject nl_trie_entry = (SubLObject)api_widgets.NIL;
            nl_trie_entry = cdolist_list_var_$175.first();
            while (api_widgets.NIL != cdolist_list_var_$175) {
                SubLObject cdolist_list_var_$176 = nl_trie.nl_trie_entry_denots(nl_trie_entry);
                SubLObject denot = (SubLObject)api_widgets.NIL;
                denot = cdolist_list_var_$176.first();
                while (api_widgets.NIL != cdolist_list_var_$176) {
                    if (api_widgets.NIL != isa.isaP(denot, constraining_collection, domain_mt, (SubLObject)api_widgets.UNPROVIDED)) {
                        dictionary_utilities.dictionary_push(denot_strings_map, denot, nl_trie_entry);
                        if (api_widgets.NIL != nl_trie.nl_trie_word_p(nl_trie_entry, (SubLObject)api_widgets.UNPROVIDED)) {
                            final SubLObject curr_word_unit = nl_trie.nl_trie_word_word_unit(nl_trie_entry, (SubLObject)api_widgets.UNPROVIDED);
                            dictionary_utilities.dictionary_append(word_unit_pos_map, curr_word_unit, nl_trie.nl_trie_word_pos_preds(nl_trie_entry));
                        }
                    }
                    cdolist_list_var_$176 = cdolist_list_var_$176.rest();
                    denot = cdolist_list_var_$176.first();
                }
                cdolist_list_var_$175 = cdolist_list_var_$175.rest();
                nl_trie_entry = cdolist_list_var_$175.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            string = cdolist_list_var.first();
        }
        SubLObject list_of_javalists = (SubLObject)api_widgets.NIL;
        SubLObject discarded_list_of_javalists = (SubLObject)api_widgets.NIL;
        SubLObject useful_entries = (SubLObject)api_widgets.NIL;
        SubLObject discarded_nl_trie_entries = (SubLObject)api_widgets.NIL;
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(denot_strings_map)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject key_denot = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject value_nl_trie_entries = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject doneP;
            SubLObject rest;
            SubLObject single_nl_trie_entry;
            SubLObject preferred_denots;
            SubLObject item_var;
            for (doneP = (SubLObject)api_widgets.NIL, rest = (SubLObject)api_widgets.NIL, rest = value_nl_trie_entries; api_widgets.NIL == doneP && api_widgets.NIL != rest; rest = rest.rest()) {
                single_nl_trie_entry = rest.first();
                preferred_denots = nl_trie.nl_trie_entry_preferred_denots(single_nl_trie_entry);
                if (api_widgets.NIL != subl_promotions.memberP(key_denot, preferred_denots, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED)) {
                    item_var = single_nl_trie_entry;
                    if (api_widgets.NIL == conses_high.member(item_var, useful_entries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                        useful_entries = (SubLObject)ConsesLow.cons(item_var, useful_entries);
                    }
                    doneP = (SubLObject)api_widgets.T;
                }
            }
            if (api_widgets.NIL == doneP) {
                if (api_widgets.NIL != list_utilities.singletonP(value_nl_trie_entries)) {
                    final SubLObject item_var2 = value_nl_trie_entries.first();
                    if (api_widgets.NIL == conses_high.member(item_var2, useful_entries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                        useful_entries = (SubLObject)ConsesLow.cons(item_var2, useful_entries);
                    }
                }
                else {
                    SubLObject stored_nl_tries = (SubLObject)api_widgets.NIL;
                    SubLObject cdolist_list_var2 = value_nl_trie_entries;
                    SubLObject sec_pass_nl_trie_entry = (SubLObject)api_widgets.NIL;
                    sec_pass_nl_trie_entry = cdolist_list_var2.first();
                    while (api_widgets.NIL != cdolist_list_var2) {
                        if (api_widgets.NIL != nl_trie.nl_trie_word_p(sec_pass_nl_trie_entry, (SubLObject)api_widgets.UNPROVIDED)) {
                            final SubLObject curr_entry_pos_preds = nl_trie.nl_trie_word_pos_preds(sec_pass_nl_trie_entry);
                            final SubLObject curr_entry_word_unit = nl_trie.nl_trie_word_word_unit(sec_pass_nl_trie_entry, (SubLObject)api_widgets.UNPROVIDED);
                            final SubLObject pos_of_this_word_unit = dictionary.dictionary_lookup_without_values(word_unit_pos_map, curr_entry_word_unit, (SubLObject)api_widgets.UNPROVIDED);
                            if (api_widgets.NIL != subl_promotions.memberP(api_widgets.$const310$singular, pos_of_this_word_unit, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED) && api_widgets.NIL != subl_promotions.memberP(api_widgets.$const307$plural, pos_of_this_word_unit, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED)) {
                                if (api_widgets.NIL != subl_promotions.memberP(api_widgets.$const310$singular, curr_entry_pos_preds, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED)) {
                                    if (api_widgets.NIL != list_utilities.empty_list_p(stored_nl_tries)) {
                                        SubLObject item_var3 = sec_pass_nl_trie_entry;
                                        if (api_widgets.NIL == conses_high.member(item_var3, useful_entries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                            useful_entries = (SubLObject)ConsesLow.cons(item_var3, useful_entries);
                                        }
                                        item_var3 = sec_pass_nl_trie_entry;
                                        if (api_widgets.NIL == conses_high.member(item_var3, stored_nl_tries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                            stored_nl_tries = (SubLObject)ConsesLow.cons(item_var3, stored_nl_tries);
                                        }
                                    }
                                    if (api_widgets.NIL == list_utilities.empty_list_p(stored_nl_tries)) {
                                        SubLObject item_var3 = sec_pass_nl_trie_entry;
                                        if (api_widgets.NIL == conses_high.member(item_var3, discarded_nl_trie_entries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                            discarded_nl_trie_entries = (SubLObject)ConsesLow.cons(item_var3, discarded_nl_trie_entries);
                                        }
                                        item_var3 = sec_pass_nl_trie_entry;
                                        if (api_widgets.NIL == conses_high.member(item_var3, stored_nl_tries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                            stored_nl_tries = (SubLObject)ConsesLow.cons(item_var3, stored_nl_tries);
                                        }
                                    }
                                }
                                if (api_widgets.NIL == subl_promotions.memberP(api_widgets.$const307$plural, curr_entry_pos_preds, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED) && api_widgets.NIL != list_utilities.empty_list_p(stored_nl_tries)) {
                                    SubLObject item_var3 = sec_pass_nl_trie_entry;
                                    if (api_widgets.NIL == conses_high.member(item_var3, useful_entries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                        useful_entries = (SubLObject)ConsesLow.cons(item_var3, useful_entries);
                                    }
                                    item_var3 = sec_pass_nl_trie_entry;
                                    if (api_widgets.NIL == conses_high.member(item_var3, stored_nl_tries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                        stored_nl_tries = (SubLObject)ConsesLow.cons(item_var3, stored_nl_tries);
                                    }
                                }
                            }
                            else {
                                if (api_widgets.NIL != list_utilities.empty_list_p(stored_nl_tries)) {
                                    final SubLObject item_var3 = sec_pass_nl_trie_entry;
                                    if (api_widgets.NIL == conses_high.member(item_var3, useful_entries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                        useful_entries = (SubLObject)ConsesLow.cons(item_var3, useful_entries);
                                    }
                                }
                                if (api_widgets.NIL == list_utilities.empty_list_p(stored_nl_tries)) {
                                    final SubLObject item_var3 = sec_pass_nl_trie_entry;
                                    if (api_widgets.NIL == conses_high.member(item_var3, discarded_nl_trie_entries, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                        discarded_nl_trie_entries = (SubLObject)ConsesLow.cons(item_var3, discarded_nl_trie_entries);
                                    }
                                }
                            }
                        }
                        cdolist_list_var2 = cdolist_list_var2.rest();
                        sec_pass_nl_trie_entry = cdolist_list_var2.first();
                    }
                }
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        final SubLObject string_nl_trie_entrymap = dictionary.new_dictionary((SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.ZERO_INTEGER);
        final SubLObject discarded_string_nl_trie_map = dictionary.new_dictionary((SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.ZERO_INTEGER);
        SubLObject cdolist_list_var3 = useful_entries;
        SubLObject each_entry = (SubLObject)api_widgets.NIL;
        each_entry = cdolist_list_var3.first();
        while (api_widgets.NIL != cdolist_list_var3) {
            final SubLObject string_key = nl_trie.nl_trie_entry_string(each_entry);
            dictionary_utilities.dictionary_push(string_nl_trie_entrymap, string_key, each_entry);
            cdolist_list_var3 = cdolist_list_var3.rest();
            each_entry = cdolist_list_var3.first();
        }
        cdolist_list_var3 = discarded_nl_trie_entries;
        SubLObject each_discarded_entry = (SubLObject)api_widgets.NIL;
        each_discarded_entry = cdolist_list_var3.first();
        while (api_widgets.NIL != cdolist_list_var3) {
            final SubLObject discarded_string_key = nl_trie.nl_trie_entry_string(each_discarded_entry);
            dictionary_utilities.dictionary_push(discarded_string_nl_trie_map, discarded_string_key, each_discarded_entry);
            cdolist_list_var3 = cdolist_list_var3.rest();
            each_discarded_entry = cdolist_list_var3.first();
        }
        SubLObject iteration_state2;
        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(string_nl_trie_entrymap)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
            thread.resetMultipleValues();
            final SubLObject curr_string = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
            final SubLObject nl_trie_entry_list = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject javalists = (SubLObject)api_widgets.NIL;
            SubLObject cdolist_list_var2 = nl_trie_entry_list;
            SubLObject curr_str_nl_trie_entry = (SubLObject)api_widgets.NIL;
            curr_str_nl_trie_entry = cdolist_list_var2.first();
            while (api_widgets.NIL != cdolist_list_var2) {
                thread.resetMultipleValues();
                final SubLObject temp_javalist = nl_trie.nl_trie_entry_to_javalists(curr_str_nl_trie_entry);
                final SubLObject denotations = thread.secondMultipleValue();
                thread.resetMultipleValues();
                SubLObject cdolist_list_var_$177 = temp_javalist;
                SubLObject curr_javalist_item = (SubLObject)api_widgets.NIL;
                curr_javalist_item = cdolist_list_var_$177.first();
                while (api_widgets.NIL != cdolist_list_var_$177) {
                    javalists = (SubLObject)ConsesLow.cons(curr_javalist_item, javalists);
                    cdolist_list_var_$177 = cdolist_list_var_$177.rest();
                    curr_javalist_item = cdolist_list_var_$177.first();
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                curr_str_nl_trie_entry = cdolist_list_var2.first();
            }
            final SubLObject item_var4 = javalists;
            if (api_widgets.NIL == conses_high.member(item_var4, list_of_javalists, (SubLObject)api_widgets.EQUAL, Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                list_of_javalists = (SubLObject)ConsesLow.cons(item_var4, list_of_javalists);
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
        for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(discarded_string_nl_trie_map)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
            thread.resetMultipleValues();
            final SubLObject curr_discarded_string = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
            final SubLObject discarded_nl_trie_entry_list = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject discarded_javalists = (SubLObject)api_widgets.NIL;
            SubLObject cdolist_list_var2 = discarded_nl_trie_entry_list;
            SubLObject curr_discarded_str_nl_trie_entry = (SubLObject)api_widgets.NIL;
            curr_discarded_str_nl_trie_entry = cdolist_list_var2.first();
            while (api_widgets.NIL != cdolist_list_var2) {
                thread.resetMultipleValues();
                final SubLObject temp_discarded_javalist = nl_trie.nl_trie_entry_to_javalists(curr_discarded_str_nl_trie_entry);
                final SubLObject denotations = thread.secondMultipleValue();
                thread.resetMultipleValues();
                SubLObject cdolist_list_var_$178 = temp_discarded_javalist;
                SubLObject temp_discarded_javalist_item = (SubLObject)api_widgets.NIL;
                temp_discarded_javalist_item = cdolist_list_var_$178.first();
                while (api_widgets.NIL != cdolist_list_var_$178) {
                    discarded_javalists = (SubLObject)ConsesLow.cons(temp_discarded_javalist_item, discarded_javalists);
                    cdolist_list_var_$178 = cdolist_list_var_$178.rest();
                    temp_discarded_javalist_item = cdolist_list_var_$178.first();
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                curr_discarded_str_nl_trie_entry = cdolist_list_var2.first();
            }
            final SubLObject item_var4 = discarded_javalists;
            if (api_widgets.NIL == conses_high.member(item_var4, discarded_list_of_javalists, (SubLObject)api_widgets.EQUAL, Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                discarded_list_of_javalists = (SubLObject)ConsesLow.cons(item_var4, discarded_list_of_javalists);
            }
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
        final SubLObject sorted_list_of_javalists = Sort.sort(list_of_javalists, Symbols.symbol_function((SubLObject)api_widgets.$sym78$STRING_LESSP), Symbols.symbol_function((SubLObject)api_widgets.$sym311$GET_STRING_FROM_JAVALIST_GROUP));
        final SubLObject sorted_discarded_list_of_javalists = Sort.sort(discarded_list_of_javalists, Symbols.symbol_function((SubLObject)api_widgets.$sym78$STRING_LESSP), Symbols.symbol_function((SubLObject)api_widgets.$sym311$GET_STRING_FROM_JAVALIST_GROUP));
        final SubLObject final_list = (SubLObject)ConsesLow.list(sorted_list_of_javalists, sorted_discarded_list_of_javalists);
        return final_list;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 106727L)
    public static SubLObject get_string_from_javalist_group(final SubLObject list_of_javalists) {
        final SubLObject javalist = conses_high.caar(list_of_javalists);
        final SubLObject string = nl_trie.javalist_string(javalist);
        return string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 107207L)
    public static SubLObject find_template_topic_matches_for_constraint(SubLObject topic, SubLObject template_elmt, SubLObject assertions_elmt, final SubLObject constraints, SubLObject string_match_options) {
        if (string_match_options == api_widgets.UNPROVIDED) {
            string_match_options = (SubLObject)api_widgets.$list212;
        }
        assert api_widgets.NIL != hlmt.possibly_hlmt_p(template_elmt) : template_elmt;
        assert api_widgets.NIL != hlmt.possibly_hlmt_p(assertions_elmt) : assertions_elmt;
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(topic) : topic;
        assert api_widgets.NIL != Types.listp(constraints) : constraints;
        assert api_widgets.NIL != list_utilities.property_list_p(string_match_options) : string_match_options;
        template_elmt = hlmt_czer.coerce_to_hlmt(template_elmt);
        assertions_elmt = hlmt_czer.coerce_to_hlmt(assertions_elmt);
        topic = czer_main.coerce_to_fort(topic);
        SubLObject non_reformulatable_constraints = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = formula_template_utilities.template_type_for_focal_term_types(topic, template_elmt);
        SubLObject instance = (SubLObject)api_widgets.NIL;
        instance = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            non_reformulatable_constraints = (SubLObject)ConsesLow.cons(el_utilities.make_binary_formula(api_widgets.$const52$isa, api_widgets.$template_topic_match_missing_term_variable$.getGlobalValue(), instance), non_reformulatable_constraints);
            cdolist_list_var = cdolist_list_var.rest();
            instance = cdolist_list_var.first();
        }
        cdolist_list_var = formula_template_utilities.template_topic_genls(topic, template_elmt);
        SubLObject col = (SubLObject)api_widgets.NIL;
        col = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            non_reformulatable_constraints = (SubLObject)ConsesLow.cons(el_utilities.make_binary_formula(api_widgets.$const58$genls, api_widgets.$template_topic_match_missing_term_variable$.getGlobalValue(), col), non_reformulatable_constraints);
            cdolist_list_var = cdolist_list_var.rest();
            col = cdolist_list_var.first();
        }
        final SubLObject query_mt = assertions_elmt;
        SubLObject results = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var2;
        final SubLObject candidates = cdolist_list_var2 = constrained_term_finder.find_terms_matching_constraints(api_widgets.$template_topic_match_missing_term_variable$.getGlobalValue(), constraints, query_mt, string_match_options, non_reformulatable_constraints);
        SubLObject instance2 = (SubLObject)api_widgets.NIL;
        instance2 = cdolist_list_var2.first();
        while (api_widgets.NIL != cdolist_list_var2) {
            if (api_widgets.NIL == rkf_relevance_utilities.rkf_irrelevant_term(instance2, assertions_elmt)) {
                final SubLObject item_var = instance2;
                if (api_widgets.NIL == conses_high.member(item_var, results, Symbols.symbol_function((SubLObject)api_widgets.EQL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                    results = (SubLObject)ConsesLow.cons(item_var, results);
                }
            }
            cdolist_list_var2 = cdolist_list_var2.rest();
            instance2 = cdolist_list_var2.first();
        }
        return results;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 109526L)
    public static SubLObject unparsable_instance_expression_p(final SubLObject v_object) {
        return cycl_utilities.naut_with_any_of_functors_p(v_object, (SubLObject)api_widgets.$list315);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 109820L)
    public static SubLObject use_topic_defining_mt_when_passed_everything_pscP() {
        return api_widgets.$use_topic_defining_mt_when_passed_everything_pscP$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 110007L)
    public static SubLObject everything_psc_dwimmed_awayP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return api_widgets.$everything_psc_dwimmed_awayP$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 110097L)
    public static SubLObject get_template_topic_assertions_for_match_in_xml(SubLObject topic, SubLObject template_elmt, SubLObject assertions_elmt, SubLObject match, SubLObject html_state) {
        if (html_state == api_widgets.UNPROVIDED) {
            html_state = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(topic) : topic;
        assert api_widgets.NIL != hlmt.possibly_mt_p(template_elmt) : template_elmt;
        assert api_widgets.NIL != hlmt.possibly_mt_p(assertions_elmt) : assertions_elmt;
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(match) : match;
        topic = czer_main.coerce_to_fort(topic);
        assert api_widgets.NIL != formula_template_utilities.formula_template_topic_typeP(topic) : topic;
        match = czer_main.coerce_to_fort(match);
        SubLObject everything_psc_dwimmed_awayP = (SubLObject)api_widgets.NIL;
        SubLObject template_topic = (SubLObject)api_widgets.NIL;
        SubLObject result_set = (SubLObject)api_widgets.NIL;
        SubLObject xml_string = (SubLObject)api_widgets.NIL;
        SubLObject non_editables = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != use_topic_defining_mt_when_passed_everything_pscP() && api_widgets.NIL != forts.fort_p(topic) && api_widgets.$const47$EverythingPSC.eql(template_elmt)) {
            final SubLObject topic_defining_mt = kb_accessors.defining_mt(topic);
            if (api_widgets.NIL != topic_defining_mt) {
                template_elmt = topic_defining_mt;
                everything_psc_dwimmed_awayP = (SubLObject)api_widgets.T;
            }
        }
        template_elmt = hlmt_czer.coerce_to_hlmt(template_elmt);
        assertions_elmt = hlmt_czer.coerce_to_hlmt(assertions_elmt);
        final SubLObject _prev_bind_0 = api_widgets.$everything_psc_dwimmed_awayP$.currentBinding(thread);
        try {
            api_widgets.$everything_psc_dwimmed_awayP$.bind(everything_psc_dwimmed_awayP, thread);
            thread.resetMultipleValues();
            final SubLObject _prev_bind_0_$179 = formula_template_vars.$template_topic_problem_store$.currentBinding(thread);
            try {
                formula_template_vars.$template_topic_problem_store$.bind(formula_template_vars.find_or_create_template_topic_problem_store(), thread);
                final SubLObject reusedP = thread.secondMultipleValue();
                thread.resetMultipleValues();
                try {
                    final SubLObject _prev_bind_0_$180 = formula_template_vars.$default_assertion_template_elmt$.currentBinding(thread);
                    try {
                        formula_template_vars.$default_assertion_template_elmt$.bind(assertions_elmt, thread);
                        final SubLObject local_state = formula_template_vars.get_template_topic_memoization_state();
                        final SubLObject _prev_bind_0_$181 = memoization_state.$memoization_state$.currentBinding(thread);
                        try {
                            memoization_state.$memoization_state$.bind(local_state, thread);
                            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                            try {
                                template_topic = formula_template_load_template_graph_memoized(topic, template_elmt);
                            }
                            finally {
                                final SubLObject _prev_bind_0_$182 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$182, thread);
                                }
                            }
                        }
                        finally {
                            memoization_state.$memoization_state$.rebind(_prev_bind_0_$181, thread);
                        }
                        thread.resetMultipleValues();
                        final SubLObject result_set_$183 = formula_templates.get_editable_and_non_editable_assertions_for_template_topic_instance(match, template_topic, template_elmt);
                        final SubLObject non_editables_$184 = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        result_set = result_set_$183;
                        non_editables = non_editables_$184;
                    }
                    finally {
                        formula_template_vars.$default_assertion_template_elmt$.rebind(_prev_bind_0_$180, thread);
                    }
                    SubLObject stream = (SubLObject)api_widgets.NIL;
                    try {
                        stream = streams_high.make_private_string_output_stream();
                        final SubLObject _prev_bind_0_$183 = xml_vars.$xml_stream$.currentBinding(thread);
                        try {
                            xml_vars.$xml_stream$.bind(stream, thread);
                            xml_utilities.generate_valid_xml_header(stream);
                            xml_utilities.generate_xml_header_entry_for_dtd((SubLObject)api_widgets.$str318$knownAssertionsForTemplateTopic, (SubLObject)api_widgets.$str319$http___www_opencyc_org_xml_knownA, stream);
                            xml_utilities.xml_terpri();
                            final SubLObject _prev_bind_0_$184 = formula_templates.$non_editable_assertions_for_template_topic_instance$.currentBinding(thread);
                            try {
                                formula_templates.$non_editable_assertions_for_template_topic_instance$.bind(non_editables, thread);
                                assert api_widgets.NIL != set.set_p(non_editables) : non_editables;
                                formula_templates.xml_serialize_assertions_for_template_topic_instance(match, template_topic, template_elmt, assertions_elmt, result_set, (SubLObject)api_widgets.UNPROVIDED);
                            }
                            finally {
                                formula_templates.$non_editable_assertions_for_template_topic_instance$.rebind(_prev_bind_0_$184, thread);
                            }
                        }
                        finally {
                            xml_vars.$xml_stream$.rebind(_prev_bind_0_$183, thread);
                        }
                        xml_string = streams_high.get_output_stream_string(stream);
                    }
                    finally {
                        final SubLObject _prev_bind_0_$185 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            streams_high.close(stream, (SubLObject)api_widgets.UNPROVIDED);
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$185, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$186 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (api_widgets.NIL == reusedP && api_widgets.NIL == formula_template_vars.template_topic_problem_store_has_browsable_inferenceP()) {
                            formula_template_vars.destroy_template_topic_problem_store((SubLObject)api_widgets.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$186, thread);
                    }
                }
            }
            finally {
                formula_template_vars.$template_topic_problem_store$.rebind(_prev_bind_0_$179, thread);
            }
        }
        finally {
            api_widgets.$everything_psc_dwimmed_awayP$.rebind(_prev_bind_0, thread);
        }
        if (api_widgets.NIL != html_state) {
            final SubLObject state_var = html_kernel.html_machine_state(html_state);
            final SubLObject lock_var = html_kernel.html_machine_state_lock(state_var);
            SubLObject v_variables = (SubLObject)api_widgets.NIL;
            SubLObject values = (SubLObject)api_widgets.NIL;
            SubLObject release = (SubLObject)api_widgets.NIL;
            try {
                release = Locks.seize_lock(lock_var);
                v_variables = html_kernel.html_machine_state_variables(state_var);
                values = html_kernel.html_machine_state_values(state_var);
            }
            finally {
                if (api_widgets.NIL != release) {
                    Locks.release_lock(lock_var);
                }
            }
            final SubLObject cprogv_var = v_variables;
            final ArrayList old_values = Dynamic.extract_dynamic_values(cprogv_var);
            try {
                Dynamic.bind_dynamic_vars(cprogv_var, values);
                if (api_widgets.NIL != Eval.constantp(match, (SubLObject)api_widgets.UNPROVIDED)) {
                    cb_tools.cb_add_to_constant_history(match);
                }
                else {
                    cb_tools.cb_add_to_nat_history(match);
                }
                html_kernel.snapshot_html_state(state_var);
            }
            finally {
                Dynamic.rebind_dynamic_vars(cprogv_var, old_values);
            }
        }
        return xml_string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 112484L)
    public static SubLObject formula_template_load_template_graph_memoized_internal(final SubLObject topic, final SubLObject elmt) {
        return formula_templates.formula_template_load_template_graph(topic, elmt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 112484L)
    public static SubLObject formula_template_load_template_graph_memoized(final SubLObject topic, final SubLObject elmt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL == v_memoization_state) {
            return formula_template_load_template_graph_memoized_internal(topic, elmt);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, (SubLObject)api_widgets.$sym321$FORMULA_TEMPLATE_LOAD_TEMPLATE_GRAPH_MEMOIZED, (SubLObject)api_widgets.UNPROVIDED);
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), (SubLObject)api_widgets.$sym321$FORMULA_TEMPLATE_LOAD_TEMPLATE_GRAPH_MEMOIZED, (SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, (SubLObject)api_widgets.$sym321$FORMULA_TEMPLATE_LOAD_TEMPLATE_GRAPH_MEMOIZED, caching_state);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_2(topic, elmt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (topic.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && elmt.equal(cached_args.first())) {
                        return memoization_state.caching_results(results2);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(thread.resetMultipleValues(), (SubLObject)Values.multiple_value_list(formula_template_load_template_graph_memoized_internal(topic, elmt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(topic, elmt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 112638L)
    public static SubLObject assert_candidate_replacements_for_position(final SubLObject ftemplate_id, final SubLObject formula_arg_pos, final SubLObject set_or_collection, final SubLObject assert_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject successP = (SubLObject)api_widgets.NIL;
        SubLObject message = (SubLObject)api_widgets.NIL;
        final SubLObject _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
        try {
            kb_control_vars.$forward_inference_allowed_rules$.bind(forward.creation_template_allowable_rules(api_widgets.$const323$QueryLibrary_QuerySavingTemplate), thread);
            thread.resetMultipleValues();
            final SubLObject succP = rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(api_widgets.$const324$candidateReplacementForPosition, ftemplate_id, formula_arg_pos, set_or_collection), assert_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            final SubLObject mess = thread.secondMultipleValue();
            thread.resetMultipleValues();
            successP = succP;
            message = mess;
        }
        finally {
            kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
        }
        return Values.values(successP, message);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 113138L)
    public static SubLObject create_minimal_formula_template_with_query(final SubLObject ftemplate_id, final SubLObject cycl_query_id, final SubLObject ql_id, final SubLObject sentence, SubLObject assert_mt, SubLObject inference_mt, final SubLObject gloss) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(ftemplate_id) : ftemplate_id;
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(cycl_query_id) : cycl_query_id;
        if (api_widgets.NIL != ql_id && !api_widgets.assertionsDisabledSynth && api_widgets.NIL == cycl_utilities.fort_or_naut_p(ql_id)) {
            throw new AssertionError(ql_id);
        }
        assert api_widgets.NIL != el_utilities.el_formula_p(sentence) : sentence;
        assert api_widgets.NIL != hlmt.possibly_hlmt_p(assert_mt) : assert_mt;
        assert api_widgets.NIL != hlmt.possibly_hlmt_p(inference_mt) : inference_mt;
        assert api_widgets.NIL != Types.stringp(gloss) : gloss;
        assert_mt = hlmt_czer.coerce_to_hlmt(assert_mt);
        inference_mt = hlmt_czer.coerce_to_hlmt(inference_mt);
        SubLObject conjuncts = (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(api_widgets.$const326$formulaTemplateGloss, ftemplate_id, gloss), kb_query.kbq_assertible_query_spec_sentence(sentence, cycl_query_id), (SubLObject)ConsesLow.list(api_widgets.$const327$microtheoryParameterValueInSpecif, inference_mt, cycl_query_id), (SubLObject)ConsesLow.list(api_widgets.$const201$comment, cycl_query_id, gloss));
        SubLObject successP = (SubLObject)api_widgets.NIL;
        SubLObject message = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != ql_id) {
            conjuncts = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(api_widgets.$const328$folderContainsResource, ql_id, ftemplate_id), conjuncts);
        }
        conjuncts = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(api_widgets.$const327$microtheoryParameterValueInSpecif, inference_mt, cycl_query_id), conjuncts);
        final SubLObject _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
        try {
            kb_control_vars.$forward_inference_allowed_rules$.bind(forward.creation_template_allowable_rules(api_widgets.$const323$QueryLibrary_QuerySavingTemplate), thread);
            thread.resetMultipleValues();
            final SubLObject successP_$189 = rkf_assertion_utilities.rkf_assert_now(simplifier.conjoin(conjuncts, (SubLObject)api_widgets.UNPROVIDED), assert_mt);
            final SubLObject message_$190 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            successP = successP_$189;
            message = message_$190;
        }
        finally {
            kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
        }
        return Values.values(successP, (SubLObject)((api_widgets.NIL != successP) ? api_widgets.$str329$All_KB_Operations_completed_succe : message));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 114509L)
    public static SubLObject create_minimal_formula_template_with_query_include_inference(final SubLObject ftemplate_id, final SubLObject cycl_query_id, final SubLObject ql_id, final SubLObject sentence, final SubLObject assert_mt, final SubLObject inference_mt, final SubLObject gloss, final SubLObject v_inference_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject successP = (SubLObject)api_widgets.NIL;
        SubLObject message = (SubLObject)api_widgets.NIL;
        SubLObject _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
        try {
            kb_control_vars.$forward_inference_allowed_rules$.bind(forward.creation_template_allowable_rules(api_widgets.$const323$QueryLibrary_QuerySavingTemplate), thread);
            thread.resetMultipleValues();
            final SubLObject successP_$191 = create_minimal_formula_template_with_query(ftemplate_id, cycl_query_id, ql_id, sentence, assert_mt, inference_mt, gloss);
            final SubLObject message_$192 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            successP = successP_$191;
            message = message_$192;
        }
        finally {
            kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
        }
        if (api_widgets.NIL != successP) {
            _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
            try {
                kb_control_vars.$forward_inference_allowed_rules$.bind(forward.creation_template_allowable_rules(api_widgets.$const323$QueryLibrary_QuerySavingTemplate), thread);
                kb_query.kbq_assert_query_spec_inference_parameters(cycl_query_id, v_inference_parameters, assert_mt);
            }
            finally {
                kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
            }
        }
        return Values.values(successP, message);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 115372L)
    public static SubLObject assert_updated_inference_parameters_for_query(final SubLObject cycl_query_id, final SubLObject v_inference_parameters, final SubLObject inference_mt) {
        kb_query.kbq_assert_query_spec_inference_parameters(cycl_query_id, v_inference_parameters, inference_mt);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 115597L)
    public static SubLObject get_forward_rules_for_query(final SubLObject query) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject assertions = (SubLObject)api_widgets.NIL;
        SubLObject term_list = (SubLObject)api_widgets.NIL;
        SubLObject v_term = (SubLObject)api_widgets.NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym199$RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind(api_widgets.$const47$EverythingPSC, thread);
            if (query.isList()) {
                SubLObject cdolist_list_var = query;
                SubLObject each_part = (SubLObject)api_widgets.NIL;
                each_part = cdolist_list_var.first();
                while (api_widgets.NIL != cdolist_list_var) {
                    if (each_part.isList() && api_widgets.NIL != narts_high.find_nart(each_part)) {
                        final SubLObject item_var = each_part;
                        if (api_widgets.NIL == conses_high.member(item_var, term_list, Symbols.symbol_function((SubLObject)api_widgets.EQL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                            term_list = (SubLObject)ConsesLow.cons(item_var, term_list);
                        }
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    each_part = cdolist_list_var.first();
                }
                if (api_widgets.NIL == conses_high.member(query, term_list, Symbols.symbol_function((SubLObject)api_widgets.EQL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                    term_list = (SubLObject)ConsesLow.cons(query, term_list);
                }
            }
            if (!query.isList()) {
                term_list = (SubLObject)ConsesLow.cons(query, term_list);
            }
            SubLObject cdolist_list_var = term_list;
            SubLObject each_nart = (SubLObject)api_widgets.NIL;
            each_nart = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                if (each_nart.isList()) {
                    v_term = narts_high.find_nart(each_nart);
                }
                else {
                    v_term = each_nart;
                }
                if (api_widgets.NIL != kb_mapping_macros.do_term_index_key_validator(v_term, (SubLObject)api_widgets.NIL)) {
                    final SubLObject iterator_var = kb_mapping_macros.new_term_final_index_spec_iterator(v_term, (SubLObject)api_widgets.NIL);
                    SubLObject done_var = (SubLObject)api_widgets.NIL;
                    final SubLObject token_var = (SubLObject)api_widgets.NIL;
                    while (api_widgets.NIL == done_var) {
                        final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                        final SubLObject valid = (SubLObject)SubLObjectFactory.makeBoolean(!token_var.eql(final_index_spec));
                        if (api_widgets.NIL != valid) {
                            SubLObject final_index_iterator = (SubLObject)api_widgets.NIL;
                            try {
                                final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL);
                                SubLObject done_var_$193 = (SubLObject)api_widgets.NIL;
                                final SubLObject token_var_$194 = (SubLObject)api_widgets.NIL;
                                while (api_widgets.NIL == done_var_$193) {
                                    final SubLObject ass = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$194);
                                    final SubLObject valid_$195 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$194.eql(ass));
                                    if (api_widgets.NIL != valid_$195 && api_widgets.NIL != kb_mapping_macros.do_term_index_assertion_match_p(ass, final_index_spec) && api_widgets.NIL != assertions_high.deduced_assertionP(ass)) {
                                        SubLObject cdolist_list_var_$196 = assertions_high.assertion_arguments(ass);
                                        SubLObject argument = (SubLObject)api_widgets.NIL;
                                        argument = cdolist_list_var_$196.first();
                                        while (api_widgets.NIL != cdolist_list_var_$196) {
                                            if (api_widgets.NIL != deduction_handles.deduction_p(argument)) {
                                                SubLObject cdolist_list_var_$197 = deductions_high.deduction_supports(argument);
                                                SubLObject support = (SubLObject)api_widgets.NIL;
                                                support = cdolist_list_var_$197.first();
                                                while (api_widgets.NIL != cdolist_list_var_$197) {
                                                    if (api_widgets.NIL != assertion_handles.assertion_p(support) && api_widgets.NIL == assertions_low.assertion_gaf_p(support)) {
                                                        final SubLObject item_var2 = support;
                                                        if (api_widgets.NIL == conses_high.member(item_var2, assertions, Symbols.symbol_function((SubLObject)api_widgets.EQL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                                            assertions = (SubLObject)ConsesLow.cons(item_var2, assertions);
                                                        }
                                                    }
                                                    cdolist_list_var_$197 = cdolist_list_var_$197.rest();
                                                    support = cdolist_list_var_$197.first();
                                                }
                                            }
                                            cdolist_list_var_$196 = cdolist_list_var_$196.rest();
                                            argument = cdolist_list_var_$196.first();
                                        }
                                    }
                                    done_var_$193 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid_$195);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$198 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    if (api_widgets.NIL != final_index_iterator) {
                                        kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                    }
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$198, thread);
                                }
                            }
                        }
                        done_var = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                each_nart = cdolist_list_var.first();
            }
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return assertions;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 116465L)
    public static SubLObject do_query_template_allowed_rules(final SubLObject query) {
        final SubLObject rules = get_forward_rules_for_query(query);
        assert_creation_template_allowable_rules_for_query(rules, api_widgets.$const323$QueryLibrary_QuerySavingTemplate, api_widgets.$const332$QueryLibraryQueryCreationTemplate);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 116724L)
    public static SubLObject assert_creation_template_allowable_rules_for_query(final SubLObject allowed_rules, final SubLObject creation_template, final SubLObject mt) {
        assert api_widgets.NIL != Types.listp(allowed_rules) : allowed_rules;
        SubLObject creation_template_allowed_rules_list = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = allowed_rules;
        SubLObject rule = (SubLObject)api_widgets.NIL;
        rule = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject rule_mt = assertions_high.assertion_mt(rule);
            final SubLObject rule_sentence = assertions_high.assertion_formula(rule);
            creation_template_allowed_rules_list = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(api_widgets.$const333$creationTemplateAllowableRules, creation_template, (SubLObject)ConsesLow.list(api_widgets.$const108$ist, rule_mt, rule_sentence)), creation_template_allowed_rules_list);
            cdolist_list_var = cdolist_list_var.rest();
            rule = cdolist_list_var.first();
        }
        make_multiple_assertions_to_mt(creation_template_allowed_rules_list, mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 117261L)
    public static SubLObject combine_query_properties(final SubLObject first_query_properties, final SubLObject second_query_properties) {
        final SubLObject combined_query_properties = inference_parameters.inference_merge_query_properties(first_query_properties, second_query_properties);
        return combined_query_properties;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 117672L)
    public static SubLObject edit_query_gloss(final SubLObject ftemplate_id, final SubLObject old_gloss, final SubLObject new_gloss, SubLObject mt) {
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(ftemplate_id) : ftemplate_id;
        assert api_widgets.NIL != Types.stringp(old_gloss) : old_gloss;
        assert api_widgets.NIL != Types.stringp(new_gloss) : new_gloss;
        assert api_widgets.NIL != hlmt.possibly_hlmt_p(mt) : mt;
        mt = hlmt_czer.coerce_to_hlmt(mt);
        final SubLObject old_gloss_cycl = (SubLObject)ConsesLow.list(api_widgets.$const326$formulaTemplateGloss, ftemplate_id, old_gloss);
        final SubLObject new_gloss_cycl = (SubLObject)ConsesLow.list(api_widgets.$const326$formulaTemplateGloss, ftemplate_id, new_gloss);
        final SubLObject monadic_mt = hlmt.hlmt_monad_mt(mt);
        final SubLObject time_parameter = api_widgets.$const336$TimePoint;
        final SubLObject old_gloss_assertions = current_assertions_with_cycl(old_gloss_cycl, monadic_mt, time_parameter);
        final SubLObject new_gloss_starting_time;
        final SubLObject now = new_gloss_starting_time = date_utilities.indexical_now();
        final SubLObject new_gloss_mt = (SubLObject)ConsesLow.list(api_widgets.$const337$MtSpace, monadic_mt, (SubLObject)ConsesLow.list(api_widgets.$const338$MtTimeWithGranularityDimFn, (SubLObject)ConsesLow.list(api_widgets.$const339$IntervalStartedByFn, new_gloss_starting_time), time_parameter));
        SubLObject complete_successP = (SubLObject)api_widgets.T;
        SubLObject messages = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = old_gloss_assertions;
        SubLObject old_gloss_assertion = (SubLObject)api_widgets.NIL;
        old_gloss_assertion = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject this_result = temporally_qualify_assertion_to_end_now(old_gloss_assertion, time_parameter);
            if (api_widgets.NIL == this_result) {
                complete_successP = (SubLObject)api_widgets.NIL;
                messages = (SubLObject)ConsesLow.cons(PrintLow.format((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.$str340$Failed_to_temporally_qualify__S__, old_gloss_assertion), messages);
            }
            cdolist_list_var = cdolist_list_var.rest();
            old_gloss_assertion = cdolist_list_var.first();
        }
        if (api_widgets.NIL == backward.removal_ask(new_gloss_cycl, new_gloss_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED) && api_widgets.NIL == assert_new_query_gloss(new_gloss_cycl, new_gloss_mt)) {
            complete_successP = (SubLObject)api_widgets.NIL;
            messages = (SubLObject)ConsesLow.cons(PrintLow.format((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.$str341$Failed_to_assert_new_gloss__A__A_, new_gloss_cycl, new_gloss_mt), messages);
        }
        final SubLObject subLObject =  complete_successP;
        return Values.values(subLObject, (SubLObject)((api_widgets.NIL != (subLObject)) ? api_widgets.$str342$Gloss_edit_completed_successfully : messages));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 119416L)
    public static SubLObject assert_new_query_gloss(final SubLObject new_gloss_cycl, final SubLObject new_gloss_mt) {
        final SubLObject result = ke.ke_assert_now(new_gloss_cycl, new_gloss_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        mail_about_gloss_edit(new_gloss_cycl, new_gloss_mt, result);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 119631L)
    public static SubLObject mail_about_gloss_edit(final SubLObject new_gloss_cycl, final SubLObject new_gloss_mt, final SubLObject successP) {
        return (SubLObject)api_widgets.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 120144L)
    public static SubLObject temporally_qualify_assertion_to_end_now(final SubLObject assertion, SubLObject time_param) {
        if (time_param == api_widgets.UNPROVIDED) {
            time_param = api_widgets.$const336$TimePoint;
        }
        final SubLObject now = date_utilities.indexical_now();
        final SubLObject cycl = assertions_high.assertion_formula(assertion);
        final SubLObject mt = assertions_high.assertion_mt(assertion);
        final SubLObject monad_mt = hlmt.hlmt_monad_mt(mt);
        final SubLObject starting_time = assertion_starting_time(assertion);
        final SubLObject ending_time = now;
        final SubLObject new_mt = (SubLObject)((api_widgets.NIL != date_utilities.beginning_of_timeP(starting_time)) ? ConsesLow.list(api_widgets.$const337$MtSpace, monad_mt, (SubLObject)ConsesLow.list(api_widgets.$const338$MtTimeWithGranularityDimFn, (SubLObject)ConsesLow.list(api_widgets.$const343$IntervalEndedByFn_Inclusive, ending_time), time_param)) : ConsesLow.list(api_widgets.$const337$MtSpace, monad_mt, (SubLObject)ConsesLow.list(api_widgets.$const338$MtTimeWithGranularityDimFn, (SubLObject)ConsesLow.list(api_widgets.$const344$TimeIntervalInclusiveFn, starting_time, ending_time), time_param)));
        return ke.ke_edit_assertion(assertion, cycl, new_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 120860L)
    public static SubLObject current_assertions_with_cycl(final SubLObject cycl, final SubLObject monad_mt, SubLObject time_parameter) {
        if (time_parameter == api_widgets.UNPROVIDED) {
            time_parameter = api_widgets.$const336$TimePoint;
        }
        final SubLObject answers = ask_utilities.query_justified(cycl, (SubLObject)ConsesLow.list(api_widgets.$const337$MtSpace, monad_mt, (SubLObject)ConsesLow.list(api_widgets.$const338$MtTimeWithGranularityDimFn, api_widgets.$const345$Now, time_parameter)), (SubLObject)api_widgets.UNPROVIDED);
        SubLObject qualifying_assertions = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = answers;
        SubLObject v_answer = (SubLObject)api_widgets.NIL;
        v_answer = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = v_answer;
            SubLObject binding = (SubLObject)api_widgets.NIL;
            SubLObject supports = (SubLObject)api_widgets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list346);
            binding = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list346);
            supports = current.first();
            current = current.rest();
            if (api_widgets.NIL == current) {
                SubLObject cdolist_list_var_$199 = supports;
                SubLObject support = (SubLObject)api_widgets.NIL;
                support = cdolist_list_var_$199.first();
                while (api_widgets.NIL != cdolist_list_var_$199) {
                    if (api_widgets.NIL != assertion_handles.assertion_p(support)) {
                        qualifying_assertions = (SubLObject)ConsesLow.cons(support, qualifying_assertions);
                    }
                    cdolist_list_var_$199 = cdolist_list_var_$199.rest();
                    support = cdolist_list_var_$199.first();
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list346);
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_answer = cdolist_list_var.first();
        }
        return qualifying_assertions;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 121407L)
    public static SubLObject assertion_starting_time(final SubLObject v_assert) {
        final SubLObject mt = assertions_high.assertion_mt(v_assert);
        final SubLObject mt_start = mt_starting_time(mt, (SubLObject)api_widgets.UNPROVIDED);
        if (api_widgets.NIL != mt_start) {
            return mt_start;
        }
        final SubLObject assertion_time = assertion_utilities.assertion_universal_time(v_assert);
        if (api_widgets.NIL != numeric_date_utilities.universal_time_p(assertion_time)) {
            return date_utilities.universal_time_to_cycl_date(assertion_time);
        }
        return date_utilities.indexical_now();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 121759L)
    public static SubLObject mt_starting_time(final SubLObject mt, SubLObject v_default) {
        if (v_default == api_widgets.UNPROVIDED) {
            v_default = (SubLObject)api_widgets.NIL;
        }
        final SubLObject mt_time = hlmt.extract_hlmt_temporal_index(mt);
        final SubLObject initial_second = time_interval_utilities.cycl_interval_initial_second(mt_time);
        return (api_widgets.NIL != initial_second) ? initial_second : time_interval_utilities.cycl_interval_initial_second(v_default);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 122157L)
    public static SubLObject create_new_formula_template_with_query() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject successP = (SubLObject)api_widgets.NIL;
        SubLObject message = (SubLObject)api_widgets.NIL;
        SubLObject new_query = (SubLObject)api_widgets.NIL;
        SubLObject _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
        try {
            kb_control_vars.$forward_inference_allowed_rules$.bind(forward.creation_template_allowable_rules(api_widgets.$const323$QueryLibrary_QuerySavingTemplate), thread);
            final SubLObject temp_new_query = new_query = rkf_term_utilities.rkf_create(glf_api_widgets.generic_suggest_new_name_for_component((SubLObject)api_widgets.$str348$ClonedQuery), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            thread.resetMultipleValues();
            final SubLObject succP = rkf_assertion_utilities.rkf_assert_now((SubLObject)ConsesLow.listS(api_widgets.$const52$isa, new_query, (SubLObject)api_widgets.$list349), api_widgets.$const350$UniversalVocabularyMt);
            final SubLObject mess = thread.secondMultipleValue();
            thread.resetMultipleValues();
            successP = succP;
            message = mess;
        }
        finally {
            kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
        }
        if (api_widgets.NIL == successP) {
            return Values.values((SubLObject)api_widgets.NIL, message);
        }
        _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
        try {
            kb_control_vars.$forward_inference_allowed_rules$.bind(forward.creation_template_allowable_rules(api_widgets.$const323$QueryLibrary_QuerySavingTemplate), thread);
            thread.resetMultipleValues();
            final SubLObject succP2 = rkf_assertion_utilities.rkf_assert_now((SubLObject)ConsesLow.listS(api_widgets.$const351$quotedIsa, (SubLObject)ConsesLow.list(api_widgets.$const352$TestQueryFn, new_query), (SubLObject)api_widgets.$list353), api_widgets.$const350$UniversalVocabularyMt);
            final SubLObject mess2 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            successP = succP2;
            message = mess2;
        }
        finally {
            kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
        }
        if (api_widgets.NIL == successP) {
            return Values.values((SubLObject)api_widgets.NIL, message);
        }
        _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
        try {
            kb_control_vars.$forward_inference_allowed_rules$.bind(forward.creation_template_allowable_rules(api_widgets.$const323$QueryLibrary_QuerySavingTemplate), thread);
            thread.resetMultipleValues();
            final SubLObject succP2 = rkf_assertion_utilities.rkf_assert_now((SubLObject)ConsesLow.listS(api_widgets.$const52$isa, (SubLObject)ConsesLow.list(api_widgets.$const354$TemplateFromTestQueryFn, (SubLObject)ConsesLow.list(api_widgets.$const352$TestQueryFn, new_query)), (SubLObject)api_widgets.$list355), api_widgets.$const350$UniversalVocabularyMt);
            final SubLObject mess2 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            successP = succP2;
            message = mess2;
        }
        finally {
            kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
        }
        if (api_widgets.NIL == successP) {
            return Values.values((SubLObject)api_widgets.NIL, message);
        }
        return Values.values((SubLObject)ConsesLow.list(api_widgets.$const354$TemplateFromTestQueryFn, (SubLObject)ConsesLow.list(api_widgets.$const352$TestQueryFn, new_query)), (SubLObject)api_widgets.$str329$All_KB_Operations_completed_succe);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 123683L)
    public static SubLObject make_multiple_assertions_to_mt(final SubLObject sentences, SubLObject mt, SubLObject should_block, SubLObject strength, SubLObject direction, SubLObject assume_wffP) {
        if (should_block == api_widgets.UNPROVIDED) {
            should_block = (SubLObject)api_widgets.NIL;
        }
        if (strength == api_widgets.UNPROVIDED) {
            strength = (SubLObject)api_widgets.$kw85$DEFAULT;
        }
        if (direction == api_widgets.UNPROVIDED) {
            direction = (SubLObject)api_widgets.NIL;
        }
        if (assume_wffP == api_widgets.UNPROVIDED) {
            assume_wffP = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != Types.listp(sentences) : sentences;
        mt = hlmt_czer.coerce_to_hlmt(mt);
        SubLObject cdolist_list_var = sentences;
        SubLObject sentence = (SubLObject)api_widgets.NIL;
        sentence = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            if (api_widgets.NIL != should_block) {
                if (api_widgets.NIL != assume_wffP || api_widgets.NIL != wff.el_wff_assertibleP(sentence, mt, (SubLObject)api_widgets.UNPROVIDED)) {
                    final SubLObject fn = (SubLObject)((api_widgets.NIL != assume_wffP) ? api_widgets.$sym357$API_WIDGETS_ASSERT_WFF_NOW : api_widgets.$sym358$KE_ASSERT_NOW);
                    thread.resetMultipleValues();
                    final SubLObject assertion_result = Functions.funcall(fn, sentence, mt, strength, direction);
                    final SubLObject assertion_error = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    if (api_widgets.NIL != assertion_error) {
                        Errors.error((SubLObject)api_widgets.$str359$Error_asserting_sentence___A__Got, sentence, assertion_error);
                    }
                }
                else {
                    Errors.error((SubLObject)api_widgets.$str360$Got_bad_CycL_sentence___A__becaus, sentence, wff.explanation_of_why_not_wff_assert(sentence, mt, (SubLObject)api_widgets.UNPROVIDED));
                }
            }
            else if (api_widgets.NIL != assume_wffP) {
                final SubLObject _prev_bind_0 = forward.$assume_forward_deduction_is_wfP$.currentBinding(thread);
                try {
                    forward.$assume_forward_deduction_is_wfP$.bind((SubLObject)api_widgets.T, thread);
                    cyc_kernel.cyc_assert_wff(sentence, mt, (SubLObject)ConsesLow.list((SubLObject)api_widgets.$kw361$STRENGTH, strength, (SubLObject)api_widgets.$kw362$DIRECTION, direction));
                }
                finally {
                    forward.$assume_forward_deduction_is_wfP$.rebind(_prev_bind_0, thread);
                }
            }
            else {
                ke.ke_assert(sentence, mt, strength, direction);
            }
            cdolist_list_var = cdolist_list_var.rest();
            sentence = cdolist_list_var.first();
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 125094L)
    public static SubLObject api_widgets_assert_wff_now(final SubLObject sentence, final SubLObject mt, final SubLObject strength, final SubLObject direction) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = forward.$assume_forward_deduction_is_wfP$.currentBinding(thread);
        try {
            forward.$assume_forward_deduction_is_wfP$.bind((SubLObject)api_widgets.T, thread);
            return ke.ke_assert_wff_now(sentence, mt, strength, direction);
        }
        finally {
            forward.$assume_forward_deduction_is_wfP$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 125380L)
    public static SubLObject make_multiple_assertions_to_mt_with_creation_template(final SubLObject sentences, final SubLObject mt, final SubLObject template, SubLObject should_blockP, SubLObject strength, SubLObject direction, SubLObject assume_wffP) {
        if (should_blockP == api_widgets.UNPROVIDED) {
            should_blockP = (SubLObject)api_widgets.NIL;
        }
        if (strength == api_widgets.UNPROVIDED) {
            strength = (SubLObject)api_widgets.$kw85$DEFAULT;
        }
        if (direction == api_widgets.UNPROVIDED) {
            direction = (SubLObject)api_widgets.NIL;
        }
        if (assume_wffP == api_widgets.UNPROVIDED) {
            assume_wffP = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
        try {
            kb_control_vars.$forward_inference_allowed_rules$.bind(forward.creation_template_allowable_rules(template), thread);
            make_multiple_assertions_to_mt(sentences, mt, should_blockP, strength, direction, assume_wffP);
        }
        finally {
            kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 126212L)
    public static SubLObject mail_to_user(final SubLObject user_fort, final SubLObject content, final SubLObject subject) {
        return PrintLow.format((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.$str366$Unable_to_find_address_for__A, user_fort);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 126739L)
    public static SubLObject mail_to_user_with_content_type(final SubLObject user_fort, final SubLObject content, final SubLObject subject, final SubLObject content_type) {
        return PrintLow.format((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.$str366$Unable_to_find_address_for__A, user_fort);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 127265L)
    public static SubLObject cyclist_defined_instances_of_col(final SubLObject col, final SubLObject cyclist, SubLObject mt, SubLObject seed_coltype, SubLObject cutoff) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = (SubLObject)api_widgets.NIL;
        }
        if (seed_coltype == api_widgets.UNPROVIDED) {
            seed_coltype = (SubLObject)api_widgets.NIL;
        }
        if (cutoff == api_widgets.UNPROVIDED) {
            cutoff = (SubLObject)api_widgets.$int369$75;
        }
        assert api_widgets.NIL != Types.integerp(cutoff) : cutoff;
        SubLObject result = isa.all_instances_among(col, cb_utilities.cyclist_recent_terms(cyclist), mt, (SubLObject)api_widgets.UNPROVIDED);
        result = Sequences.nreverse(result);
        if (!Sequences.length(result).numG(cutoff)) {
            result = Sequences.cconcatenate(result, conses_high.set_difference(isa.all_instances_among(col, isa.all_fort_instances(seed_coltype, mt, (SubLObject)api_widgets.UNPROVIDED), mt, (SubLObject)api_widgets.UNPROVIDED), result, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED));
        }
        if (!Sequences.length(result).numG(cutoff)) {
            result = Sequences.cconcatenate(result, conses_high.set_difference(isa.all_fort_instances(col, mt, (SubLObject)api_widgets.UNPROVIDED), result, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED));
        }
        if (Sequences.length(result).numG(cutoff)) {
            result = list_utilities.first_n(cutoff, result);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 128135L)
    public static SubLObject cyclist_defined_specs_of_col(final SubLObject col, final SubLObject cyclist, SubLObject mt, SubLObject seed_coltype, SubLObject cutoff) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = (SubLObject)api_widgets.NIL;
        }
        if (seed_coltype == api_widgets.UNPROVIDED) {
            seed_coltype = (SubLObject)api_widgets.NIL;
        }
        if (cutoff == api_widgets.UNPROVIDED) {
            cutoff = (SubLObject)api_widgets.$int369$75;
        }
        assert api_widgets.NIL != Types.integerp(cutoff) : cutoff;
        SubLObject result = genls.all_specs_among(col, cb_utilities.cyclist_recent_terms(cyclist), mt, (SubLObject)api_widgets.UNPROVIDED);
        result = Sequences.nreverse(result);
        if (!Sequences.length(result).numG(cutoff)) {
            result = Sequences.cconcatenate(result, conses_high.set_difference(genls.all_specs_among(col, isa.all_fort_instances(seed_coltype, mt, (SubLObject)api_widgets.UNPROVIDED), mt, (SubLObject)api_widgets.UNPROVIDED), result, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED));
        }
        if (!Sequences.length(result).numG(cutoff)) {
            result = Sequences.cconcatenate(result, conses_high.set_difference(genls.all_specs(col, mt, (SubLObject)api_widgets.UNPROVIDED), result, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED));
        }
        if (Sequences.length(result).numG(cutoff)) {
            result = list_utilities.first_n(cutoff, result);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 128978L)
    public static SubLObject get_template_topic_in_xml(SubLObject topic, SubLObject mt) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const21$InferencePSC;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(topic) : topic;
        assert api_widgets.NIL != hlmt.possibly_mt_p(mt) : mt;
        topic = czer_main.coerce_to_fort(topic);
        mt = hlmt_czer.coerce_to_hlmt(mt);
        if (mt.eql(api_widgets.$const21$InferencePSC)) {
            final SubLObject defining_mt = kb_mapping_utilities.fpred_value_in_any_mt(topic, api_widgets.$const372$definingMt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            if (api_widgets.NIL != defining_mt) {
                mt = hlmt_czer.coerce_to_hlmt(defining_mt);
            }
        }
        SubLObject template_topic = (SubLObject)api_widgets.NIL;
        SubLObject xml_string = (SubLObject)api_widgets.NIL;
        final SubLObject _prev_bind_0 = formula_template_vars.$default_assertion_template_elmt$.currentBinding(thread);
        try {
            formula_template_vars.$default_assertion_template_elmt$.bind(mt, thread);
            final SubLObject local_state = formula_template_vars.get_template_topic_memoization_state();
            final SubLObject _prev_bind_0_$200 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    template_topic = formula_template_load_template_graph_memoized(topic, mt);
                }
                finally {
                    final SubLObject _prev_bind_0_$201 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$201, thread);
                    }
                }
            }
            finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0_$200, thread);
            }
        }
        finally {
            formula_template_vars.$default_assertion_template_elmt$.rebind(_prev_bind_0, thread);
        }
        SubLObject stream = (SubLObject)api_widgets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_2 = xml_vars.$xml_stream$.currentBinding(thread);
            try {
                xml_vars.$xml_stream$.bind(stream, thread);
                xml_utilities.generate_valid_xml_header(stream);
                xml_utilities.generate_xml_header_entry_for_dtd((SubLObject)api_widgets.$str373$templateTopic, (SubLObject)api_widgets.$str374$http___www_opencyc_org_xml_templa, stream);
                xml_utilities.xml_terpri();
                formula_templates.xml_serialize_template_topic(template_topic, stream);
            }
            finally {
                xml_vars.$xml_stream$.rebind(_prev_bind_2, thread);
            }
            xml_string = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)api_widgets.UNPROVIDED);
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return xml_string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 130120L)
    public static SubLObject get_formula_template_in_xml(SubLObject formula_template_id, SubLObject mt, SubLObject topic_id) {
        if (topic_id == api_widgets.UNPROVIDED) {
            topic_id = (SubLObject)api_widgets.NIL;
        }
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(formula_template_id) : formula_template_id;
        assert api_widgets.NIL != hlmt.possibly_mt_p(mt) : mt;
        formula_template_id = czer_main.coerce_to_fort(formula_template_id);
        mt = hlmt_czer.coerce_to_hlmt(mt);
        assert api_widgets.NIL != forts.fort_p(formula_template_id) : formula_template_id;
        final SubLObject formula_template = get_formula_template_from_id(formula_template_id, mt, topic_id);
        SubLObject xml_string = (SubLObject)api_widgets.NIL;
        SubLObject stream = (SubLObject)api_widgets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            write_formula_template_in_xml(formula_template, stream);
            xml_string = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)api_widgets.T);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)api_widgets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return xml_string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 130759L)
    public static SubLObject get_formula_template_from_id(final SubLObject formula_template_id, final SubLObject mt, SubLObject topic_id) {
        if (topic_id == api_widgets.UNPROVIDED) {
            topic_id = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject formula_template = formula_templates.new_formula_template(formula_template_id, (SubLObject)api_widgets.UNPROVIDED);
        final SubLObject _prev_bind_0 = formula_template_vars.$default_assertion_template_elmt$.currentBinding(thread);
        try {
            formula_template_vars.$default_assertion_template_elmt$.bind(mt, thread);
            formula_templates.formula_template_load_topic_template_details(topic_id, formula_template, mt);
        }
        finally {
            formula_template_vars.$default_assertion_template_elmt$.rebind(_prev_bind_0, thread);
        }
        return formula_template;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 131091L)
    public static SubLObject write_formula_template_in_xml(final SubLObject formula_template, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = xml_vars.$xml_stream$.currentBinding(thread);
        try {
            xml_vars.$xml_stream$.bind(stream, thread);
            xml_utilities.generate_valid_xml_header(stream);
            xml_utilities.generate_xml_header_entry_for_dtd((SubLObject)api_widgets.$str376$formulaTemplate, formula_templates.formula_template_dtd_uri(), stream);
            xml_utilities.xml_terpri();
            formula_templates.xml_serialize_formula_template(formula_template, stream);
        }
        finally {
            xml_vars.$xml_stream$.rebind(_prev_bind_0, thread);
        }
        return stream;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 131428L)
    public static SubLObject suggest_loading_mt_for_cycl_query(final SubLObject cycl_query_id) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject assertions = (SubLObject)api_widgets.NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym199$RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind(api_widgets.$const47$EverythingPSC, thread);
            assertions = kb_mapping.gather_gaf_arg_index(cycl_query_id, (SubLObject)api_widgets.THREE_INTEGER, api_widgets.$const377$softwareParameterValueInSpecifica, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        if (api_widgets.NIL != assertions) {
            return assertions_high.assertion_mt(assertions.first());
        }
        return api_widgets.$const378$KEInteractionResourceTestMt;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 131899L)
    public static SubLObject get_cycl_query_in_xml_from_default_mt(final SubLObject cycl_query_id) {
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(cycl_query_id) : cycl_query_id;
        return get_cycl_query_in_xml(cycl_query_id, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 132145L)
    public static SubLObject get_cycl_query_in_xml(SubLObject cycl_query_id, SubLObject mt) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = (SubLObject)api_widgets.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(cycl_query_id) : cycl_query_id;
        cycl_query_id = czer_main.coerce_to_fort(cycl_query_id);
        SubLObject cycl_query = (SubLObject)api_widgets.NIL;
        SubLObject xml_string = (SubLObject)api_widgets.NIL;
        final SubLObject _prev_bind_0 = formula_template_vars.$formula_template_autoexpand_candidate_replacementsP$.currentBinding(thread);
        try {
            formula_template_vars.$formula_template_autoexpand_candidate_replacementsP$.bind(formula_template_vars.$use_formula_template_candidate_replacements_auto_expand$.getGlobalValue(), thread);
            cycl_query = new_cycl_query_specification.load_new_cycl_query_specification_from_kb(cycl_query_id, (SubLObject)api_widgets.UNPROVIDED);
        }
        finally {
            formula_template_vars.$formula_template_autoexpand_candidate_replacementsP$.rebind(_prev_bind_0, thread);
        }
        SubLObject stream = (SubLObject)api_widgets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_2 = xml_vars.$xml_stream$.currentBinding(thread);
            try {
                xml_vars.$xml_stream$.bind(stream, thread);
                xml_utilities.xml_header((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                if (api_widgets.NIL == misc_utilities.initialized_p(xml_vars.cycl_query_namespace())) {
                    xml_utilities.generate_xml_header_entry_for_dtd((SubLObject)api_widgets.$str381$cyclQuery, (SubLObject)api_widgets.$str382$http___www_opencyc_org_xml_cyclQu, (SubLObject)api_widgets.UNPROVIDED);
                    xml_utilities.xml_terpri();
                }
                new_cycl_query_specification.xml_serialize_new_cycl_query_specification(cycl_query, (SubLObject)api_widgets.UNPROVIDED);
            }
            finally {
                xml_vars.$xml_stream$.rebind(_prev_bind_2, thread);
            }
            xml_string = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)api_widgets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return xml_string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 132970L)
    public static SubLObject get_formula_template_for_fact_or_query_in_xml_from_default_mt(final SubLObject template_id) {
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(template_id) : template_id;
        final SubLObject mt = api_widgets.$const378$KEInteractionResourceTestMt;
        return get_formula_template_for_fact_or_query_in_xml(template_id, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 133429L)
    public static SubLObject get_formula_template_for_fact_or_query_in_xml(SubLObject template_id, SubLObject elmt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != cycl_utilities.fort_or_naut_p(template_id) : template_id;
        assert api_widgets.NIL != hlmt.possibly_mt_p(elmt) : elmt;
        template_id = czer_main.coerce_to_fort(template_id);
        elmt = hlmt_czer.coerce_to_hlmt(elmt);
        SubLObject formula_template = (SubLObject)api_widgets.NIL;
        SubLObject xml_string = (SubLObject)api_widgets.NIL;
        final SubLObject _prev_bind_0 = formula_template_vars.$formula_template_autoexpand_candidate_replacementsP$.currentBinding(thread);
        try {
            formula_template_vars.$formula_template_autoexpand_candidate_replacementsP$.bind(formula_template_vars.$use_formula_template_candidate_replacements_auto_expand$.getGlobalValue(), thread);
            formula_template = formula_templates.load_formula_template_details_from_kb(template_id, elmt);
        }
        finally {
            formula_template_vars.$formula_template_autoexpand_candidate_replacementsP$.rebind(_prev_bind_0, thread);
        }
        SubLObject stream = (SubLObject)api_widgets.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            write_formula_template_in_xml(formula_template, stream);
            xml_string = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)api_widgets.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        return xml_string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 134224L)
    public static SubLObject process_feedback(final SubLObject mt, final SubLObject severity, final SubLObject comment, final SubLObject reason, final SubLObject logblock, final SubLObject component, final SubLObject query, final SubLObject query_formula, final SubLObject query_string, final SubLObject binding_list) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (api_widgets.NIL == fort_types_interface.mtP(mt) || api_widgets.NIL == fi.ke_purpose() || api_widgets.NIL == cycl_grammar.cycl_constant_p(severity) || !comment.isString() || !reason.isString() || api_widgets.NIL == cycl_grammar.cycl_constant_p(component) || !logblock.isString() || api_widgets.NIL == collection_defns.cycl_formulaP(query_formula) || api_widgets.NIL == collection_defns.cycl_formulaP(query) || !query_string.isString() || !binding_list.isList()) {
            return (SubLObject)api_widgets.NIL;
        }
        final SubLObject pred = api_widgets.$const386$createABugzillaBugReport;
        final SubLObject reporter = api_control_vars.$the_cyclist$.getDynamicValue(thread);
        final SubLObject bugz_password = (SubLObject)api_widgets.$str138$;
        final SubLObject product = get_bugzilla_product_from_project(fi.ke_purpose(), mt);
        final SubLObject system_num = system_info.cyc_revision_string();
        final SubLObject kb_num = operation_communication.kb_version_string();
        final SubLObject summary = Sequences.cconcatenate(reason, new SubLObject[] { api_widgets.$str387$_response_for_query__, query_string });
        final SubLObject description = Sequences.cconcatenate((SubLObject)api_widgets.$str388$Query__, new SubLObject[] { string_utilities.to_string(query), string_utilities.$new_line_string$.getGlobalValue(), api_widgets.$str389$Query_Formula__, string_utilities.to_string(query_formula), string_utilities.$new_line_string$.getGlobalValue(), api_widgets.$str390$Bindings__, string_utilities.$new_line_string$.getGlobalValue(), bindinglist_to_string(binding_list), api_widgets.$str391$User_Comments__, comment, string_utilities.$new_line_string$.getGlobalValue(), api_widgets.$str392$Java_Log__, string_utilities.$new_line_string$.getGlobalValue(), logblock });
        fi.fi_assert((SubLObject)ConsesLow.list(new SubLObject[] { pred, reporter, bugz_password, product, component, summary, system_num, kb_num, description, severity }), mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        return (SubLObject)api_widgets.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 136020L)
    public static SubLObject bindinglist_to_string(final SubLObject v_bindings) {
        SubLObject retstring = (SubLObject)api_widgets.$str138$;
        SubLObject cdolist_list_var = v_bindings;
        SubLObject binding = (SubLObject)api_widgets.NIL;
        binding = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            retstring = Sequences.cconcatenate(retstring, new SubLObject[] { api_widgets.$str393$___, binding.first(), api_widgets.$str394$__, conses_high.second(binding), string_utilities.$new_line_string$.getGlobalValue() });
            cdolist_list_var = cdolist_list_var.rest();
            binding = cdolist_list_var.first();
        }
        return retstring;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 136337L)
    public static SubLObject get_bugzilla_product_from_project(final SubLObject project, final SubLObject mt) {
        final SubLObject ans = kb_mapping_utilities.fpred_value_in_relevant_mts(project, api_widgets.$const395$bugzillaProductForProject, mt, (SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.UNPROVIDED);
        if (api_widgets.NIL != ans) {
            return ans;
        }
        return api_widgets.$const396$CycorpInternalBugzillaBugReport;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 136599L)
    public static SubLObject get_possible_renderers_for_followup(final SubLObject orig_sentence, final SubLObject orig_mt, final SubLObject orig_arg_pos, final SubLObject followup_sentence, final SubLObject followup_mt, SubLObject force, SubLObject generation_mt, SubLObject connective) {
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw398$INTERROGATIVE;
        }
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (connective == api_widgets.UNPROVIDED) {
            connective = api_widgets.$const106$and;
        }
        return get_possible_renderers_for_followup_int(orig_sentence, orig_mt, orig_arg_pos, followup_sentence, followup_mt, force, generation_mt, connective);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 137020L)
    public static SubLObject clear_get_possible_renderers_for_followup_int() {
        final SubLObject cs = api_widgets.$get_possible_renderers_for_followup_int_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 137020L)
    public static SubLObject remove_get_possible_renderers_for_followup_int(final SubLObject orig_sentence, final SubLObject orig_mt, final SubLObject orig_arg_pos, final SubLObject followup_sentence, final SubLObject followup_mt, SubLObject force, SubLObject generation_mt, SubLObject connective) {
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw398$INTERROGATIVE;
        }
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (connective == api_widgets.UNPROVIDED) {
            connective = api_widgets.$const106$and;
        }
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$get_possible_renderers_for_followup_int_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(orig_sentence, orig_mt, orig_arg_pos, followup_sentence, followup_mt, force, generation_mt, connective), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 137020L)
    public static SubLObject get_possible_renderers_for_followup_int_internal(final SubLObject orig_sentence, SubLObject orig_mt, final SubLObject orig_arg_pos, final SubLObject followup_sentence, SubLObject followup_mt, final SubLObject force, final SubLObject generation_mt, final SubLObject connective) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject sentence1 = uniquify_variables_across_two_sentences(orig_sentence, followup_sentence);
        final SubLObject sentence2 = thread.secondMultipleValue();
        thread.resetMultipleValues();
        SubLObject var;
        final SubLObject v_term = var = cycl_utilities.formula_arg_position(sentence1, orig_arg_pos, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject temp_followup_sentence = (SubLObject)api_widgets.NIL;
        SubLObject temp_orig_sentence = (SubLObject)api_widgets.NIL;
        SubLObject possible_followup = (SubLObject)api_widgets.NIL;
        SubLObject sentences = (SubLObject)api_widgets.NIL;
        SubLObject v_bindings = (SubLObject)api_widgets.NIL;
        orig_mt = hlmt_czer.coerce_to_hlmt(orig_mt);
        followup_mt = hlmt_czer.coerce_to_hlmt(followup_mt);
        sentences = (SubLObject)ConsesLow.cons(el_utilities.optimize_el_formula_variable_names((SubLObject)ConsesLow.list(connective, sentence1, sentence2), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED), sentences);
        if (api_widgets.NIL == variables.variable_p(v_term)) {
            var = czer_utilities.unique_el_var_wrt_expression(reader.bq_cons(connective, (SubLObject)api_widgets.$list400), (SubLObject)api_widgets.UNPROVIDED);
            temp_orig_sentence = cycl_utilities.formula_subst(var, v_term, sentence1, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        }
        SubLObject cdolist_list_var;
        v_bindings = (cdolist_list_var = query_utilities.get_possible_sentence_combinations_wrt_var(temp_orig_sentence, orig_mt, sentence2, followup_mt, var));
        SubLObject binding = (SubLObject)api_widgets.NIL;
        binding = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            temp_followup_sentence = cycl_utilities.formula_subst(v_term, binding, sentence2, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            possible_followup = (SubLObject)ConsesLow.list(connective, sentence1, temp_followup_sentence);
            sentences = (SubLObject)ConsesLow.cons(el_utilities.optimize_el_formula_variable_names(possible_followup, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED), sentences);
            cdolist_list_var = cdolist_list_var.rest();
            binding = cdolist_list_var.first();
        }
        return get_term_list_as_renderings(sentences, orig_mt, force, generation_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 137020L)
    public static SubLObject get_possible_renderers_for_followup_int(final SubLObject orig_sentence, final SubLObject orig_mt, final SubLObject orig_arg_pos, final SubLObject followup_sentence, final SubLObject followup_mt, SubLObject force, SubLObject generation_mt, SubLObject connective) {
        if (force == api_widgets.UNPROVIDED) {
            force = (SubLObject)api_widgets.$kw398$INTERROGATIVE;
        }
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (connective == api_widgets.UNPROVIDED) {
            connective = api_widgets.$const106$and;
        }
        SubLObject caching_state = api_widgets.$get_possible_renderers_for_followup_int_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym399$GET_POSSIBLE_RENDERERS_FOR_FOLLOWUP_INT, (SubLObject)api_widgets.$sym401$_GET_POSSIBLE_RENDERERS_FOR_FOLLOWUP_INT_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.EIGHT_INTEGER, (SubLObject)api_widgets.$int38$256);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_8(orig_sentence, orig_mt, orig_arg_pos, followup_sentence, followup_mt, force, generation_mt, connective);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (orig_sentence.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (orig_mt.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (orig_arg_pos.equal(cached_args.first())) {
                            cached_args = cached_args.rest();
                            if (followup_sentence.equal(cached_args.first())) {
                                cached_args = cached_args.rest();
                                if (followup_mt.equal(cached_args.first())) {
                                    cached_args = cached_args.rest();
                                    if (force.equal(cached_args.first())) {
                                        cached_args = cached_args.rest();
                                        if (generation_mt.equal(cached_args.first())) {
                                            cached_args = cached_args.rest();
                                            if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && connective.equal(cached_args.first())) {
                                                return memoization_state.caching_results(results2);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(get_possible_renderers_for_followup_int_internal(orig_sentence, orig_mt, orig_arg_pos, followup_sentence, followup_mt, force, generation_mt, connective)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(orig_sentence, orig_mt, orig_arg_pos, followup_sentence, followup_mt, force, generation_mt, connective));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 138674L)
    public static SubLObject uniquify_variables_across_two_sentences(final SubLObject query_one, final SubLObject query_two) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject new_query_one = uniquify_variables_across_two_sentences_int(query_one, query_two);
        final SubLObject new_query_two = thread.secondMultipleValue();
        final SubLObject query_one_subst = thread.thirdMultipleValue();
        final SubLObject query_two_subst = thread.fourthMultipleValue();
        thread.resetMultipleValues();
        return Values.values(new_query_one, new_query_two);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 139008L)
    public static SubLObject uniquify_variables_across_two_sentences_int(final SubLObject query_one, final SubLObject query_two) {
        SubLObject new_query = (SubLObject)ConsesLow.list(api_widgets.$const106$and, query_one, query_two);
        final SubLObject query_one_variables = el_utilities.sentence_variables(query_one, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        final SubLObject query_two_variables = el_utilities.sentence_variables(query_two, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        final SubLObject variables_intersect = conses_high.intersection(query_one_variables, query_two_variables, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject new_query_one = query_one;
        SubLObject new_query_two = query_two;
        final SubLObject query_one_subst = dictionary.new_dictionary((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        final SubLObject query_two_subst = dictionary.new_dictionary((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject unique_var = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = variables_intersect;
        SubLObject variable = (SubLObject)api_widgets.NIL;
        variable = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            unique_var = czer_utilities.unique_el_var_wrt_expression(new_query, variable);
            new_query_one = cycl_utilities.expression_subst(unique_var, variable, new_query_one, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            new_query = (SubLObject)ConsesLow.list(api_widgets.$const106$and, new_query_one, new_query_two);
            dictionary.dictionary_enter(query_one_subst, variable, unique_var);
            cdolist_list_var = cdolist_list_var.rest();
            variable = cdolist_list_var.first();
        }
        cdolist_list_var = variables_intersect;
        variable = (SubLObject)api_widgets.NIL;
        variable = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            unique_var = czer_utilities.unique_el_var_wrt_expression(new_query, variable);
            new_query_two = cycl_utilities.expression_subst(unique_var, variable, new_query_two, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            new_query = (SubLObject)ConsesLow.list(api_widgets.$const106$and, new_query_one, new_query_two);
            dictionary.dictionary_enter(query_two_subst, variable, unique_var);
            cdolist_list_var = cdolist_list_var.rest();
            variable = cdolist_list_var.first();
        }
        return Values.values(new_query_one, new_query_two, query_one_subst, query_two_subst);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 140294L)
    public static SubLObject change_variable_names(final SubLObject sentence, final SubLObject variable_mappings) {
        if (variable_mappings == api_widgets.NIL) {
            return sentence;
        }
        SubLObject new_sentence = sentence;
        SubLObject cdolist_list_var = variable_mappings;
        SubLObject mapping = (SubLObject)api_widgets.NIL;
        mapping = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            new_sentence = cycl_utilities.expression_subst(conses_high.second(mapping), mapping.first(), new_sentence, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            mapping = cdolist_list_var.first();
        }
        return new_sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 140681L)
    public static SubLObject generality_sort_lambda(final SubLObject v_object) {
        if (v_object.isList()) {
            return cardinality_estimates.generality_estimate(v_object.first());
        }
        return cardinality_estimates.generality_estimate(v_object);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 140847L)
    public static SubLObject get_possible_merged_queries(final SubLObject query_one, final SubLObject query_two, final SubLObject el_mt_one, final SubLObject el_mt_two, SubLObject logical_connective) {
        if (logical_connective == api_widgets.UNPROVIDED) {
            logical_connective = api_widgets.$const106$and;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject unique_query_one = uniquify_variables_across_two_sentences(query_one, query_two);
        final SubLObject unique_query_two = thread.secondMultipleValue();
        thread.resetMultipleValues();
        final SubLObject mt_one = hlmt_czer.canonicalize_hlmt(el_mt_one);
        final SubLObject mt_two = hlmt_czer.canonicalize_hlmt(el_mt_two);
        final SubLObject new_mt = hlmt.combine_hlmts(hlmt_czer.canonicalize_hlmt(mt_one), hlmt_czer.canonicalize_hlmt(mt_two));
        final SubLObject variable_mappings = at_utilities.possible_followup_variable_binding_sets(unique_query_one, unique_query_two, new_mt);
        SubLObject result = (SubLObject)ConsesLow.list(new_mt);
        SubLObject new_query_one = (SubLObject)api_widgets.NIL;
        SubLObject new_query_two = (SubLObject)api_widgets.NIL;
        SubLObject new_query = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = variable_mappings;
        SubLObject mapping_set = (SubLObject)api_widgets.NIL;
        mapping_set = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            new_query_one = el_utilities.copy_sentence(unique_query_one);
            new_query_two = el_utilities.copy_sentence(unique_query_two);
            mapping_set = conses_high.second(mapping_set);
            new_query_one = change_variable_names(new_query_one, mapping_set);
            new_query_two = change_variable_names(new_query_two, mapping_set);
            new_query = el_utilities.optimize_el_formula_variable_names((SubLObject)ConsesLow.list(logical_connective, new_query_one, new_query_two), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            result = (SubLObject)ConsesLow.cons(new_query, result);
            cdolist_list_var = cdolist_list_var.rest();
            mapping_set = cdolist_list_var.first();
        }
        return Sequences.nreverse(result);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 142282L)
    public static SubLObject get_possible_merged_queries_wrt_var(final SubLObject query_one, final SubLObject query_two, final SubLObject el_mt_one, final SubLObject el_mt_two, final SubLObject variable, SubLObject logical_connective) {
        if (logical_connective == api_widgets.UNPROVIDED) {
            logical_connective = api_widgets.$const106$and;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject unique_query_one = uniquify_variables_across_two_sentences_int(query_one, query_two);
        final SubLObject unique_query_two = thread.secondMultipleValue();
        final SubLObject query_one_subst = thread.thirdMultipleValue();
        final SubLObject query_two_subst = thread.fourthMultipleValue();
        thread.resetMultipleValues();
        final SubLObject possible_susbt_var = dictionary.dictionary_lookup(query_one_subst, variable, variable);
        final SubLObject mt_one = hlmt_czer.canonicalize_hlmt(el_mt_one);
        final SubLObject mt_two = hlmt_czer.canonicalize_hlmt(el_mt_two);
        final SubLObject new_mt = hlmt.combine_hlmts(mt_one, mt_two);
        final SubLObject replacements = query_utilities.get_possible_sentence_combinations_wrt_var(unique_query_one, mt_one, unique_query_two, mt_two, possible_susbt_var);
        SubLObject result = (SubLObject)ConsesLow.list(new_mt);
        SubLObject cdolist_list_var = replacements;
        SubLObject replacement = (SubLObject)api_widgets.NIL;
        replacement = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject raw_new_query = (SubLObject)ConsesLow.list(logical_connective, unique_query_one, cycl_utilities.expression_subst(possible_susbt_var, replacement, unique_query_two, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED));
            final SubLObject simplified_query = simplifier.simplify_cycl_sentence_syntax(raw_new_query, (SubLObject)api_widgets.UNPROVIDED);
            final SubLObject final_new_query = el_utilities.optimize_el_formula_variable_names(simplified_query, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            result = (SubLObject)ConsesLow.cons(final_new_query, result);
            cdolist_list_var = cdolist_list_var.rest();
            replacement = cdolist_list_var.first();
        }
        return Sequences.delete_duplicates(Sequences.nreverse(result), (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 143519L)
    public static SubLObject get_source_conceptual_works_for_project(final SubLObject project, final SubLObject valid_source_types_collection, SubLObject mt, SubLObject generation_mt, SubLObject sort_function) {
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const21$InferencePSC;
        }
        if (generation_mt == api_widgets.UNPROVIDED) {
            generation_mt = pph_vars.$pph_language_mt$.getDynamicValue();
        }
        if (sort_function == api_widgets.UNPROVIDED) {
            sort_function = Symbols.symbol_function((SubLObject)api_widgets.$sym93$PPH_LIST_ITEM_COMPARATOR);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject results_dictionary = get_categorized_source_cws_for_project(project, valid_source_types_collection, mt);
        SubLObject result = (SubLObject)api_widgets.NIL;
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(results_dictionary)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject cw_type = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            SubLObject cw_list = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cw_type_rendering = (SubLObject)api_widgets.NIL;
            SubLObject cw_list_renderings = (SubLObject)api_widgets.NIL;
            if (api_widgets.NIL != paraphrased_source_list_for_generation_mtP(cw_list, generation_mt)) {
                cw_type_rendering = conses_high.third(cw_list.first());
                cw_list_renderings = cw_list.rest();
            }
            else {
                final SubLObject paraphrased_in_different_mtP = paraphrased_source_listP(cw_list);
                final SubLObject store_paraphrasesP = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == paraphrased_in_different_mtP);
                if (api_widgets.NIL != paraphrased_in_different_mtP) {
                    cw_list = paraphrased_source_list_sources(cw_list);
                }
                final SubLObject _prev_bind_0 = pph_vars.$use_parenthetical_disambiguationsP$.currentBinding(thread);
                try {
                    pph_vars.$use_parenthetical_disambiguationsP$.bind((SubLObject)api_widgets.NIL, thread);
                    cw_type_rendering = (SubLObject)ConsesLow.list(pph_main.generate_phrase_for_java(cw_type, (SubLObject)api_widgets.$kw85$DEFAULT, (SubLObject)api_widgets.$kw81$NONE, generation_mt, mt, (SubLObject)api_widgets.UNPROVIDED), cw_type);
                    cw_list_renderings = get_term_list_as_renderings(Sequences.remove_duplicates(cw_list, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED), mt, (SubLObject)api_widgets.$kw81$NONE, generation_mt, sort_function, (SubLObject)api_widgets.$kw85$DEFAULT, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL);
                }
                finally {
                    pph_vars.$use_parenthetical_disambiguationsP$.rebind(_prev_bind_0, thread);
                }
                if (api_widgets.NIL != store_paraphrasesP) {
                    store_conceptual_work_paraphrases(cw_type, cw_type_rendering, generation_mt, cw_list_renderings, results_dictionary);
                }
            }
            result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(cw_type_rendering, cw_list_renderings), result);
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 145204L)
    public static SubLObject paraphrased_source_listP(final SubLObject cw_list) {
        return pattern_match.tree_matches_pattern(cw_list.first(), (SubLObject)api_widgets.$list408);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 145348L)
    public static SubLObject paraphrased_source_list_for_generation_mtP(final SubLObject cw_list, final SubLObject generation_mt) {
        return pattern_match.tree_matches_pattern(cw_list.first(), (SubLObject)ConsesLow.listS((SubLObject)api_widgets.$kw409$PARAPHRASED_CW_TYPE, generation_mt, (SubLObject)api_widgets.$kw410$ANYTHING));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 145539L)
    public static SubLObject paraphrased_source_list_sources(final SubLObject cw_list) {
        return Mapping.mapcar((SubLObject)api_widgets.$sym411$PARAPHRASED_SOURCE_SOURCE, cw_list.rest());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 145658L)
    public static SubLObject paraphrased_source_source(final SubLObject paraphrased_source) {
        return conses_high.second(paraphrased_source);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 145759L)
    public static SubLObject store_conceptual_work_paraphrases(final SubLObject cw_type, final SubLObject cw_type_rendering, final SubLObject generation_mt, final SubLObject cw_list_renderings, final SubLObject results_dictionary) {
        return dictionary.dictionary_enter(results_dictionary, cw_type, (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list((SubLObject)api_widgets.$kw409$PARAPHRASED_CW_TYPE, generation_mt, cw_type_rendering), cw_list_renderings));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 146104L)
    public static SubLObject fet_categorized_source_pred() {
        SubLObject stored = api_widgets.$fet_categorized_source_pred$.getGlobalValue();
        if (api_widgets.NIL == stored) {
            final SubLObject looked_up = constants_high.find_constant((SubLObject)api_widgets.$str412$sourceOfTypeForProject);
            if (api_widgets.NIL != constant_handles.valid_constantP(looked_up, (SubLObject)api_widgets.UNPROVIDED)) {
                api_widgets.$fet_categorized_source_pred$.setGlobalValue(looked_up);
                stored = api_widgets.$fet_categorized_source_pred$.getGlobalValue();
            }
        }
        return stored;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 146446L)
    public static SubLObject add_source_of_type_for_project(final SubLObject argument, final SubLObject assertion) {
        SubLObject current;
        final SubLObject datum = current = assertions_high.gaf_args(assertion);
        SubLObject source = (SubLObject)api_widgets.NIL;
        SubLObject source_type = (SubLObject)api_widgets.NIL;
        SubLObject type_type = (SubLObject)api_widgets.NIL;
        SubLObject project = (SubLObject)api_widgets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list413);
        source = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list413);
        source_type = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list413);
        type_type = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list413);
        project = current.first();
        current = current.rest();
        if (api_widgets.NIL == current) {
            return add_categorized_fet_source(source, source_type, type_type, project);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list413);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 146701L)
    public static SubLObject remove_source_of_type_for_project(final SubLObject argument, final SubLObject assertion) {
        SubLObject current;
        final SubLObject datum = current = assertions_high.gaf_args(assertion);
        SubLObject source = (SubLObject)api_widgets.NIL;
        SubLObject source_type = (SubLObject)api_widgets.NIL;
        SubLObject type_type = (SubLObject)api_widgets.NIL;
        SubLObject project = (SubLObject)api_widgets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list413);
        source = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list413);
        source_type = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list413);
        type_type = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list413);
        project = current.first();
        current = current.rest();
        if (api_widgets.NIL == current) {
            return remove_categorized_fet_source(source, source_type, type_type, project);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list413);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 147231L)
    public static SubLObject fet_empty_source_dictionary() {
        if (api_widgets.NIL == api_widgets.$fet_empty_source_dictionary$.getGlobalValue()) {
            api_widgets.$fet_empty_source_dictionary$.setGlobalValue(dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQL), (SubLObject)api_widgets.UNPROVIDED));
        }
        return api_widgets.$fet_empty_source_dictionary$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 147428L)
    public static SubLObject clear_source_conceptual_works_for_project() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (api_widgets.NIL != dictionary.dictionary_p(api_widgets.$fet_categorized_sources$.getGlobalValue())) {
            SubLObject iteration_state;
            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(api_widgets.$fet_categorized_sources$.getGlobalValue())); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                thread.resetMultipleValues();
                final SubLObject key = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                final SubLObject type_type_dict = thread.secondMultipleValue();
                thread.resetMultipleValues();
                if (api_widgets.NIL != dictionary.dictionary_p(type_type_dict)) {
                    SubLObject iteration_state_$202;
                    for (iteration_state_$202 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(type_type_dict)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$202); iteration_state_$202 = dictionary_contents.do_dictionary_contents_next(iteration_state_$202)) {
                        thread.resetMultipleValues();
                        final SubLObject key_$203 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$202);
                        final SubLObject source_type_dict = thread.secondMultipleValue();
                        thread.resetMultipleValues();
                        if (api_widgets.NIL != dictionary.dictionary_p(source_type_dict)) {
                            dictionary.clear_dictionary(source_type_dict);
                        }
                    }
                    dictionary_contents.do_dictionary_contents_finalize(iteration_state_$202);
                    dictionary.clear_dictionary(type_type_dict);
                }
            }
            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
            dictionary.clear_dictionary(api_widgets.$fet_categorized_sources$.getGlobalValue());
        }
        api_widgets.$fet_categorized_sources$.setGlobalValue((SubLObject)api_widgets.$kw417$UNINITIALIZED);
        return api_widgets.$fet_categorized_sources$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 147967L)
    public static SubLObject add_categorized_fet_source(SubLObject source, final SubLObject source_type, final SubLObject type_type, final SubLObject project) {
        if (api_widgets.NIL == dictionary.dictionary_p(api_widgets.$fet_categorized_sources$.getGlobalValue())) {
            api_widgets.$fet_categorized_sources$.setGlobalValue(dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQL), (SubLObject)api_widgets.UNPROVIDED));
        }
        final SubLObject type_type_dict = type_type_dict_for_project(project, (SubLObject)api_widgets.T);
        final SubLObject source_type_dict = source_type_dict_for_type_type(type_type, type_type_dict, (SubLObject)api_widgets.T);
        final SubLObject source_list = dictionary.dictionary_lookup(source_type_dict, source_type, (SubLObject)api_widgets.NIL);
        if (api_widgets.NIL == paraphrased_source_listP(source_list)) {
            return dictionary_utilities.dictionary_pushnew(source_type_dict, source_type, source, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        }
        if (api_widgets.NIL != conses_high.member(source, source_list, Symbols.symbol_function((SubLObject)api_widgets.EQL), (SubLObject)api_widgets.$sym411$PARAPHRASED_SOURCE_SOURCE)) {
            return source;
        }
        return dictionary.dictionary_enter(source_type_dict, source_type, (SubLObject)ConsesLow.cons(source, paraphrased_source_list_sources(source_list)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 148746L)
    public static SubLObject remove_categorized_fet_source(SubLObject source, final SubLObject source_type, final SubLObject type_type, final SubLObject project) {
        if (api_widgets.NIL == dictionary.dictionary_p(api_widgets.$fet_categorized_sources$.getGlobalValue())) {
            return (SubLObject)api_widgets.$kw418$NOT_FOUND;
        }
        final SubLObject type_type_dict = type_type_dict_for_project(project, (SubLObject)api_widgets.NIL);
        final SubLObject source_type_dict = source_type_dict_for_type_type(type_type, type_type_dict, (SubLObject)api_widgets.NIL);
        if (api_widgets.NIL == source_type_dict) {
            return (SubLObject)api_widgets.$kw418$NOT_FOUND;
        }
        final SubLObject source_list = dictionary.dictionary_lookup(source_type_dict, source_type, (SubLObject)api_widgets.NIL);
        final SubLObject paraphrasedP = paraphrased_source_listP(source_list);
        final SubLObject accessor = (SubLObject)((api_widgets.NIL != paraphrasedP) ? api_widgets.$sym411$PARAPHRASED_SOURCE_SOURCE : Symbols.symbol_function((SubLObject)api_widgets.IDENTITY));
        return dictionary_utilities.dictionary_remove_from_value(source_type_dict, source_type, source, Symbols.symbol_function((SubLObject)api_widgets.EQL), accessor);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 149430L)
    public static SubLObject initialize_fet_sources() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pred = fet_categorized_source_pred();
        if (api_widgets.NIL != pred) {
            clear_source_conceptual_works_for_project();
            api_widgets.$fet_categorized_sources$.setGlobalValue(dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQL), (SubLObject)api_widgets.UNPROVIDED));
            final SubLObject str = (SubLObject)api_widgets.$str419$Initializing_Fact_Entry_Tool_sour;
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)api_widgets.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)api_widgets.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)api_widgets.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)api_widgets.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((api_widgets.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : api_widgets.T), thread);
                utilities_macros.noting_progress_preamble(str);
                final SubLObject _prev_bind_0_$204 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_1_$205 = mt_relevance_macros.$mt$.currentBinding(thread);
                try {
                    mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym199$RELEVANT_MT_IS_EVERYTHING, thread);
                    mt_relevance_macros.$mt$.bind(api_widgets.$const47$EverythingPSC, thread);
                    final SubLObject node_var = api_widgets.$const420$Project;
                    final SubLObject _prev_bind_0_$205 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$206 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa), thread);
                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                        try {
                            SubLObject node_var_$208 = node_var;
                            final SubLObject deck_type = (SubLObject)api_widgets.$kw273$STACK;
                            final SubLObject recur_deck = deck.create_deck(deck_type);
                            final SubLObject _prev_bind_0_$206 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                try {
                                    final SubLObject tv_var = (SubLObject)api_widgets.NIL;
                                    final SubLObject _prev_bind_0_$207 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$207 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_tv$.bind((api_widgets.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((api_widgets.NIL != tv_var) ? api_widgets.$sym274$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                                        if (api_widgets.NIL != tv_var && api_widgets.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && api_widgets.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var.eql((SubLObject)api_widgets.$kw275$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                            }
                                            else if (pcase_var.eql((SubLObject)api_widgets.$kw278$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.$str279$continue_anyway, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                            }
                                            else if (pcase_var.eql((SubLObject)api_widgets.$kw280$WARN)) {
                                                Errors.warn((SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)api_widgets.$str281$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)api_widgets.$str279$continue_anyway, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$208 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$208 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$214 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$215 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$216 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), thread);
                                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa))), thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa))), thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)api_widgets.NIL, thread);
                                            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), thread);
                                            if (api_widgets.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || api_widgets.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node_var, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) {
                                                final SubLObject _prev_bind_0_$209 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$209 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                final SubLObject _prev_bind_2_$215 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_backward_search_direction(), sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa))), thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)api_widgets.NIL, thread);
                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_var_$208, (SubLObject)api_widgets.UNPROVIDED);
                                                    while (api_widgets.NIL != node_var_$208) {
                                                        final SubLObject tt_node_var = node_var_$208;
                                                        SubLObject cdolist_list_var;
                                                        final SubLObject accessible_modules = cdolist_list_var = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa));
                                                        SubLObject module_var = (SubLObject)api_widgets.NIL;
                                                        module_var = cdolist_list_var.first();
                                                        while (api_widgets.NIL != cdolist_list_var) {
                                                            final SubLObject _prev_bind_0_$210 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                            final SubLObject _prev_bind_1_$210 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                            try {
                                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((api_widgets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(api_widgets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                                final SubLObject node = function_terms.naut_to_nart(tt_node_var);
                                                                if (api_widgets.NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                    final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                    if (api_widgets.NIL != d_link) {
                                                                        final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                        if (api_widgets.NIL != mt_links) {
                                                                            SubLObject iteration_state;
                                                                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                                thread.resetMultipleValues();
                                                                                final SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                final SubLObject tv_links = thread.secondMultipleValue();
                                                                                thread.resetMultipleValues();
                                                                                if (api_widgets.NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                                    final SubLObject _prev_bind_0_$211 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                                        SubLObject iteration_state_$223;
                                                                                        for (iteration_state_$223 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$223); iteration_state_$223 = dictionary_contents.do_dictionary_contents_next(iteration_state_$223)) {
                                                                                            thread.resetMultipleValues();
                                                                                            final SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$223);
                                                                                            final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                            thread.resetMultipleValues();
                                                                                            if (api_widgets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                                final SubLObject _prev_bind_0_$212 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                                    final SubLObject sol = link_nodes;
                                                                                                    if (api_widgets.NIL != set.set_p(sol)) {
                                                                                                        final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                        SubLObject basis_object;
                                                                                                        SubLObject state;
                                                                                                        SubLObject project;
                                                                                                        SubLObject pred_var;
                                                                                                        SubLObject iterator_var;
                                                                                                        SubLObject done_var;
                                                                                                        SubLObject token_var;
                                                                                                        SubLObject final_index_spec;
                                                                                                        SubLObject valid;
                                                                                                        SubLObject final_index_iterator;
                                                                                                        SubLObject done_var_$225;
                                                                                                        SubLObject token_var_$226;
                                                                                                        SubLObject gaf;
                                                                                                        SubLObject valid_$227;
                                                                                                        SubLObject current;
                                                                                                        SubLObject datum;
                                                                                                        SubLObject source;
                                                                                                        SubLObject source_type;
                                                                                                        SubLObject type_type;
                                                                                                        SubLObject _prev_bind_0_$213;
                                                                                                        SubLObject _values;
                                                                                                        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)api_widgets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                            project = set_contents.do_set_contents_next(basis_object, state);
                                                                                                            if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state, project) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(project, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(project, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                if (api_widgets.NIL != forts.fort_p(project)) {
                                                                                                                    pred_var = pred;
                                                                                                                    if (api_widgets.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(project, (SubLObject)api_widgets.FOUR_INTEGER, pred_var)) {
                                                                                                                        iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(project, (SubLObject)api_widgets.FOUR_INTEGER, pred_var);
                                                                                                                        done_var = (SubLObject)api_widgets.NIL;
                                                                                                                        token_var = (SubLObject)api_widgets.NIL;
                                                                                                                        while (api_widgets.NIL == done_var) {
                                                                                                                            final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                                                                                                                            valid = (SubLObject)SubLObjectFactory.makeBoolean(!token_var.eql(final_index_spec));
                                                                                                                            if (api_widgets.NIL != valid) {
                                                                                                                                final_index_iterator = (SubLObject)api_widgets.NIL;
                                                                                                                                try {
                                                                                                                                    final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, (SubLObject)api_widgets.$kw421$GAF, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL);
                                                                                                                                    done_var_$225 = (SubLObject)api_widgets.NIL;
                                                                                                                                    token_var_$226 = (SubLObject)api_widgets.NIL;
                                                                                                                                    while (api_widgets.NIL == done_var_$225) {
                                                                                                                                        gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$226);
                                                                                                                                        valid_$227 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$226.eql(gaf));
                                                                                                                                        if (api_widgets.NIL != valid_$227) {
                                                                                                                                            datum = (current = list_utilities.first_n((SubLObject)api_widgets.THREE_INTEGER, assertions_high.gaf_args(gaf)));
                                                                                                                                            source = (SubLObject)api_widgets.NIL;
                                                                                                                                            source_type = (SubLObject)api_widgets.NIL;
                                                                                                                                            type_type = (SubLObject)api_widgets.NIL;
                                                                                                                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list422);
                                                                                                                                            source = current.first();
                                                                                                                                            current = current.rest();
                                                                                                                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list422);
                                                                                                                                            source_type = current.first();
                                                                                                                                            current = current.rest();
                                                                                                                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list422);
                                                                                                                                            type_type = current.first();
                                                                                                                                            current = current.rest();
                                                                                                                                            if (api_widgets.NIL == current) {
                                                                                                                                                add_categorized_fet_source(source, source_type, type_type, project);
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list422);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        done_var_$225 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid_$227);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                finally {
                                                                                                                                    _prev_bind_0_$213 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                                                    try {
                                                                                                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                                                                                                        _values = Values.getValuesAsVector();
                                                                                                                                        if (api_widgets.NIL != final_index_iterator) {
                                                                                                                                            kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                                                                                                                        }
                                                                                                                                        Values.restoreValuesFromVector(_values);
                                                                                                                                    }
                                                                                                                                    finally {
                                                                                                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$213, thread);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            done_var = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else if (sol.isList()) {
                                                                                                        SubLObject csome_list_var = sol;
                                                                                                        SubLObject project2 = (SubLObject)api_widgets.NIL;
                                                                                                        project2 = csome_list_var.first();
                                                                                                        while (api_widgets.NIL != csome_list_var) {
                                                                                                            if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(project2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(project2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                                if (api_widgets.NIL != forts.fort_p(project2)) {
                                                                                                                    final SubLObject pred_var2 = pred;
                                                                                                                    if (api_widgets.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(project2, (SubLObject)api_widgets.FOUR_INTEGER, pred_var2)) {
                                                                                                                        final SubLObject iterator_var2 = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(project2, (SubLObject)api_widgets.FOUR_INTEGER, pred_var2);
                                                                                                                        SubLObject done_var2 = (SubLObject)api_widgets.NIL;
                                                                                                                        final SubLObject token_var2 = (SubLObject)api_widgets.NIL;
                                                                                                                        while (api_widgets.NIL == done_var2) {
                                                                                                                            final SubLObject final_index_spec2 = iteration.iteration_next_without_values_macro_helper(iterator_var2, token_var2);
                                                                                                                            final SubLObject valid2 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var2.eql(final_index_spec2));
                                                                                                                            if (api_widgets.NIL != valid2) {
                                                                                                                                SubLObject final_index_iterator2 = (SubLObject)api_widgets.NIL;
                                                                                                                                try {
                                                                                                                                    final_index_iterator2 = kb_mapping_macros.new_final_index_iterator(final_index_spec2, (SubLObject)api_widgets.$kw421$GAF, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL);
                                                                                                                                    SubLObject done_var_$226 = (SubLObject)api_widgets.NIL;
                                                                                                                                    final SubLObject token_var_$227 = (SubLObject)api_widgets.NIL;
                                                                                                                                    while (api_widgets.NIL == done_var_$226) {
                                                                                                                                        final SubLObject gaf2 = iteration.iteration_next_without_values_macro_helper(final_index_iterator2, token_var_$227);
                                                                                                                                        final SubLObject valid_$228 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$227.eql(gaf2));
                                                                                                                                        if (api_widgets.NIL != valid_$228) {
                                                                                                                                            SubLObject current2;
                                                                                                                                            final SubLObject datum2 = current2 = list_utilities.first_n((SubLObject)api_widgets.THREE_INTEGER, assertions_high.gaf_args(gaf2));
                                                                                                                                            SubLObject source2 = (SubLObject)api_widgets.NIL;
                                                                                                                                            SubLObject source_type2 = (SubLObject)api_widgets.NIL;
                                                                                                                                            SubLObject type_type2 = (SubLObject)api_widgets.NIL;
                                                                                                                                            cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)api_widgets.$list422);
                                                                                                                                            source2 = current2.first();
                                                                                                                                            current2 = current2.rest();
                                                                                                                                            cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)api_widgets.$list422);
                                                                                                                                            source_type2 = current2.first();
                                                                                                                                            current2 = current2.rest();
                                                                                                                                            cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)api_widgets.$list422);
                                                                                                                                            type_type2 = current2.first();
                                                                                                                                            current2 = current2.rest();
                                                                                                                                            if (api_widgets.NIL == current2) {
                                                                                                                                                add_categorized_fet_source(source2, source_type2, type_type2, project2);
                                                                                                                                            }
                                                                                                                                            else {
                                                                                                                                                cdestructuring_bind.cdestructuring_bind_error(datum2, (SubLObject)api_widgets.$list422);
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        done_var_$226 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid_$228);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                finally {
                                                                                                                                    final SubLObject _prev_bind_0_$214 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                                                    try {
                                                                                                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                                                                                                        final SubLObject _values2 = Values.getValuesAsVector();
                                                                                                                                        if (api_widgets.NIL != final_index_iterator2) {
                                                                                                                                            kb_mapping_macros.destroy_final_index_iterator(final_index_iterator2);
                                                                                                                                        }
                                                                                                                                        Values.restoreValuesFromVector(_values2);
                                                                                                                                    }
                                                                                                                                    finally {
                                                                                                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$214, thread);
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                            done_var2 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid2);
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            csome_list_var = csome_list_var.rest();
                                                                                                            project2 = csome_list_var.first();
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                    }
                                                                                                }
                                                                                                finally {
                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$212, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_$223);
                                                                                    }
                                                                                    finally {
                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$211, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                        }
                                                                    }
                                                                    else {
                                                                        sbhl_paranoia.sbhl_error((SubLObject)api_widgets.FIVE_INTEGER, (SubLObject)api_widgets.$str283$attempting_to_bind_direction_link, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                    }
                                                                    if (api_widgets.NIL != sbhl_macros.do_sbhl_non_fort_linksP(node, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) {
                                                                        SubLObject csome_list_var2 = sbhl_link_methods.non_fort_instance_table_lookup(node);
                                                                        SubLObject instance_tuple = (SubLObject)api_widgets.NIL;
                                                                        instance_tuple = csome_list_var2.first();
                                                                        while (api_widgets.NIL != csome_list_var2) {
                                                                            SubLObject current3;
                                                                            final SubLObject datum3 = current3 = instance_tuple;
                                                                            SubLObject link_node = (SubLObject)api_widgets.NIL;
                                                                            SubLObject mt2 = (SubLObject)api_widgets.NIL;
                                                                            SubLObject tv2 = (SubLObject)api_widgets.NIL;
                                                                            cdestructuring_bind.destructuring_bind_must_consp(current3, datum3, (SubLObject)api_widgets.$list284);
                                                                            link_node = current3.first();
                                                                            current3 = current3.rest();
                                                                            cdestructuring_bind.destructuring_bind_must_consp(current3, datum3, (SubLObject)api_widgets.$list284);
                                                                            mt2 = current3.first();
                                                                            current3 = current3.rest();
                                                                            cdestructuring_bind.destructuring_bind_must_consp(current3, datum3, (SubLObject)api_widgets.$list284);
                                                                            tv2 = current3.first();
                                                                            current3 = current3.rest();
                                                                            if (api_widgets.NIL == current3) {
                                                                                if (api_widgets.NIL != mt_relevance_macros.relevant_mtP(mt2)) {
                                                                                    final SubLObject _prev_bind_0_$215 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt2, thread);
                                                                                        if (api_widgets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                            final SubLObject _prev_bind_0_$216 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                            try {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                                final SubLObject sol;
                                                                                                final SubLObject link_nodes2 = sol = (SubLObject)ConsesLow.list(link_node);
                                                                                                if (api_widgets.NIL != set.set_p(sol)) {
                                                                                                    final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                    SubLObject basis_object;
                                                                                                    SubLObject state;
                                                                                                    SubLObject project;
                                                                                                    SubLObject pred_var;
                                                                                                    SubLObject iterator_var;
                                                                                                    SubLObject done_var;
                                                                                                    SubLObject token_var;
                                                                                                    SubLObject final_index_spec;
                                                                                                    SubLObject valid;
                                                                                                    SubLObject final_index_iterator;
                                                                                                    SubLObject gaf;
                                                                                                    SubLObject source;
                                                                                                    SubLObject source_type;
                                                                                                    SubLObject type_type;
                                                                                                    SubLObject done_var_$227;
                                                                                                    SubLObject token_var_$228;
                                                                                                    SubLObject valid_$229;
                                                                                                    SubLObject current_$239;
                                                                                                    SubLObject datum_$238;
                                                                                                    SubLObject _prev_bind_0_$217;
                                                                                                    SubLObject _values3;
                                                                                                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)api_widgets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                        project = set_contents.do_set_contents_next(basis_object, state);
                                                                                                        if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state, project) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(project, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(project, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            if (api_widgets.NIL != forts.fort_p(project)) {
                                                                                                                pred_var = pred;
                                                                                                                if (api_widgets.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(project, (SubLObject)api_widgets.FOUR_INTEGER, pred_var)) {
                                                                                                                    iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(project, (SubLObject)api_widgets.FOUR_INTEGER, pred_var);
                                                                                                                    done_var = (SubLObject)api_widgets.NIL;
                                                                                                                    token_var = (SubLObject)api_widgets.NIL;
                                                                                                                    while (api_widgets.NIL == done_var) {
                                                                                                                        final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                                                                                                                        valid = (SubLObject)SubLObjectFactory.makeBoolean(!token_var.eql(final_index_spec));
                                                                                                                        if (api_widgets.NIL != valid) {
                                                                                                                            final_index_iterator = (SubLObject)api_widgets.NIL;
                                                                                                                            try {
                                                                                                                                final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, (SubLObject)api_widgets.$kw421$GAF, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL);
                                                                                                                                done_var_$227 = (SubLObject)api_widgets.NIL;
                                                                                                                                token_var_$228 = (SubLObject)api_widgets.NIL;
                                                                                                                                while (api_widgets.NIL == done_var_$227) {
                                                                                                                                    gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$228);
                                                                                                                                    valid_$229 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$228.eql(gaf));
                                                                                                                                    if (api_widgets.NIL != valid_$229) {
                                                                                                                                        datum_$238 = (current_$239 = list_utilities.first_n((SubLObject)api_widgets.THREE_INTEGER, assertions_high.gaf_args(gaf)));
                                                                                                                                        source = (SubLObject)api_widgets.NIL;
                                                                                                                                        source_type = (SubLObject)api_widgets.NIL;
                                                                                                                                        type_type = (SubLObject)api_widgets.NIL;
                                                                                                                                        cdestructuring_bind.destructuring_bind_must_consp(current_$239, datum_$238, (SubLObject)api_widgets.$list422);
                                                                                                                                        source = current_$239.first();
                                                                                                                                        current_$239 = current_$239.rest();
                                                                                                                                        cdestructuring_bind.destructuring_bind_must_consp(current_$239, datum_$238, (SubLObject)api_widgets.$list422);
                                                                                                                                        source_type = current_$239.first();
                                                                                                                                        current_$239 = current_$239.rest();
                                                                                                                                        cdestructuring_bind.destructuring_bind_must_consp(current_$239, datum_$238, (SubLObject)api_widgets.$list422);
                                                                                                                                        type_type = current_$239.first();
                                                                                                                                        current_$239 = current_$239.rest();
                                                                                                                                        if (api_widgets.NIL == current_$239) {
                                                                                                                                            add_categorized_fet_source(source, source_type, type_type, project);
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            cdestructuring_bind.cdestructuring_bind_error(datum_$238, (SubLObject)api_widgets.$list422);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    done_var_$227 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid_$229);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            finally {
                                                                                                                                _prev_bind_0_$217 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                                                try {
                                                                                                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                                                                                                    _values3 = Values.getValuesAsVector();
                                                                                                                                    if (api_widgets.NIL != final_index_iterator) {
                                                                                                                                        kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                                                                                                                    }
                                                                                                                                    Values.restoreValuesFromVector(_values3);
                                                                                                                                }
                                                                                                                                finally {
                                                                                                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$217, thread);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        done_var = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else if (sol.isList()) {
                                                                                                    SubLObject csome_list_var_$241 = sol;
                                                                                                    SubLObject project2 = (SubLObject)api_widgets.NIL;
                                                                                                    project2 = csome_list_var_$241.first();
                                                                                                    while (api_widgets.NIL != csome_list_var_$241) {
                                                                                                        if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(project2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                                            sbhl_marking_utilities.sbhl_mark_node_marked(project2, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                                            if (api_widgets.NIL != forts.fort_p(project2)) {
                                                                                                                final SubLObject pred_var2 = pred;
                                                                                                                if (api_widgets.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(project2, (SubLObject)api_widgets.FOUR_INTEGER, pred_var2)) {
                                                                                                                    final SubLObject iterator_var2 = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(project2, (SubLObject)api_widgets.FOUR_INTEGER, pred_var2);
                                                                                                                    SubLObject done_var2 = (SubLObject)api_widgets.NIL;
                                                                                                                    final SubLObject token_var2 = (SubLObject)api_widgets.NIL;
                                                                                                                    while (api_widgets.NIL == done_var2) {
                                                                                                                        final SubLObject final_index_spec2 = iteration.iteration_next_without_values_macro_helper(iterator_var2, token_var2);
                                                                                                                        final SubLObject valid2 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var2.eql(final_index_spec2));
                                                                                                                        if (api_widgets.NIL != valid2) {
                                                                                                                            SubLObject final_index_iterator2 = (SubLObject)api_widgets.NIL;
                                                                                                                            try {
                                                                                                                                final_index_iterator2 = kb_mapping_macros.new_final_index_iterator(final_index_spec2, (SubLObject)api_widgets.$kw421$GAF, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL);
                                                                                                                                SubLObject done_var_$228 = (SubLObject)api_widgets.NIL;
                                                                                                                                final SubLObject token_var_$229 = (SubLObject)api_widgets.NIL;
                                                                                                                                while (api_widgets.NIL == done_var_$228) {
                                                                                                                                    final SubLObject gaf2 = iteration.iteration_next_without_values_macro_helper(final_index_iterator2, token_var_$229);
                                                                                                                                    final SubLObject valid_$230 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$229.eql(gaf2));
                                                                                                                                    if (api_widgets.NIL != valid_$230) {
                                                                                                                                        SubLObject current_$240;
                                                                                                                                        final SubLObject datum_$239 = current_$240 = list_utilities.first_n((SubLObject)api_widgets.THREE_INTEGER, assertions_high.gaf_args(gaf2));
                                                                                                                                        SubLObject source2 = (SubLObject)api_widgets.NIL;
                                                                                                                                        SubLObject source_type2 = (SubLObject)api_widgets.NIL;
                                                                                                                                        SubLObject type_type2 = (SubLObject)api_widgets.NIL;
                                                                                                                                        cdestructuring_bind.destructuring_bind_must_consp(current_$240, datum_$239, (SubLObject)api_widgets.$list422);
                                                                                                                                        source2 = current_$240.first();
                                                                                                                                        current_$240 = current_$240.rest();
                                                                                                                                        cdestructuring_bind.destructuring_bind_must_consp(current_$240, datum_$239, (SubLObject)api_widgets.$list422);
                                                                                                                                        source_type2 = current_$240.first();
                                                                                                                                        current_$240 = current_$240.rest();
                                                                                                                                        cdestructuring_bind.destructuring_bind_must_consp(current_$240, datum_$239, (SubLObject)api_widgets.$list422);
                                                                                                                                        type_type2 = current_$240.first();
                                                                                                                                        current_$240 = current_$240.rest();
                                                                                                                                        if (api_widgets.NIL == current_$240) {
                                                                                                                                            add_categorized_fet_source(source2, source_type2, type_type2, project2);
                                                                                                                                        }
                                                                                                                                        else {
                                                                                                                                            cdestructuring_bind.cdestructuring_bind_error(datum_$239, (SubLObject)api_widgets.$list422);
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    done_var_$228 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid_$230);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            finally {
                                                                                                                                final SubLObject _prev_bind_0_$218 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                                                try {
                                                                                                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                                                                                                    final SubLObject _values4 = Values.getValuesAsVector();
                                                                                                                                    if (api_widgets.NIL != final_index_iterator2) {
                                                                                                                                        kb_mapping_macros.destroy_final_index_iterator(final_index_iterator2);
                                                                                                                                    }
                                                                                                                                    Values.restoreValuesFromVector(_values4);
                                                                                                                                }
                                                                                                                                finally {
                                                                                                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$218, thread);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                        done_var2 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid2);
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        csome_list_var_$241 = csome_list_var_$241.rest();
                                                                                                        project2 = csome_list_var_$241.first();
                                                                                                    }
                                                                                                }
                                                                                                else {
                                                                                                    Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                }
                                                                                            }
                                                                                            finally {
                                                                                                sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$216, thread);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    finally {
                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$215, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                            else {
                                                                                cdestructuring_bind.cdestructuring_bind_error(datum3, (SubLObject)api_widgets.$list284);
                                                                            }
                                                                            csome_list_var2 = csome_list_var2.rest();
                                                                            instance_tuple = csome_list_var2.first();
                                                                        }
                                                                    }
                                                                }
                                                                else if (api_widgets.NIL != obsolete.cnat_p(node, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                    SubLObject cdolist_list_var_$248;
                                                                    final SubLObject new_list = cdolist_list_var_$248 = ((api_widgets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)));
                                                                    SubLObject generating_fn = (SubLObject)api_widgets.NIL;
                                                                    generating_fn = cdolist_list_var_$248.first();
                                                                    while (api_widgets.NIL != cdolist_list_var_$248) {
                                                                        final SubLObject _prev_bind_0_$219 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                            final SubLObject sol2;
                                                                            final SubLObject link_nodes3 = sol2 = Functions.funcall(generating_fn, node);
                                                                            if (api_widgets.NIL != set.set_p(sol2)) {
                                                                                final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                                SubLObject basis_object2;
                                                                                SubLObject state2;
                                                                                SubLObject project3;
                                                                                SubLObject pred_var3;
                                                                                SubLObject iterator_var3;
                                                                                SubLObject done_var3;
                                                                                SubLObject token_var3;
                                                                                SubLObject final_index_spec3;
                                                                                SubLObject valid3;
                                                                                SubLObject final_index_iterator3;
                                                                                SubLObject done_var_$229;
                                                                                SubLObject token_var_$230;
                                                                                SubLObject gaf3;
                                                                                SubLObject valid_$231;
                                                                                SubLObject current4;
                                                                                SubLObject datum4;
                                                                                SubLObject source3;
                                                                                SubLObject source_type3;
                                                                                SubLObject type_type3;
                                                                                SubLObject _prev_bind_0_$220;
                                                                                SubLObject _values5;
                                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)api_widgets.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                    project3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                    if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state2, project3) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(project3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(project3, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        if (api_widgets.NIL != forts.fort_p(project3)) {
                                                                                            pred_var3 = pred;
                                                                                            if (api_widgets.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(project3, (SubLObject)api_widgets.FOUR_INTEGER, pred_var3)) {
                                                                                                iterator_var3 = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(project3, (SubLObject)api_widgets.FOUR_INTEGER, pred_var3);
                                                                                                done_var3 = (SubLObject)api_widgets.NIL;
                                                                                                token_var3 = (SubLObject)api_widgets.NIL;
                                                                                                while (api_widgets.NIL == done_var3) {
                                                                                                    final_index_spec3 = iteration.iteration_next_without_values_macro_helper(iterator_var3, token_var3);
                                                                                                    valid3 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var3.eql(final_index_spec3));
                                                                                                    if (api_widgets.NIL != valid3) {
                                                                                                        final_index_iterator3 = (SubLObject)api_widgets.NIL;
                                                                                                        try {
                                                                                                            final_index_iterator3 = kb_mapping_macros.new_final_index_iterator(final_index_spec3, (SubLObject)api_widgets.$kw421$GAF, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL);
                                                                                                            done_var_$229 = (SubLObject)api_widgets.NIL;
                                                                                                            token_var_$230 = (SubLObject)api_widgets.NIL;
                                                                                                            while (api_widgets.NIL == done_var_$229) {
                                                                                                                gaf3 = iteration.iteration_next_without_values_macro_helper(final_index_iterator3, token_var_$230);
                                                                                                                valid_$231 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$230.eql(gaf3));
                                                                                                                if (api_widgets.NIL != valid_$231) {
                                                                                                                    datum4 = (current4 = list_utilities.first_n((SubLObject)api_widgets.THREE_INTEGER, assertions_high.gaf_args(gaf3)));
                                                                                                                    source3 = (SubLObject)api_widgets.NIL;
                                                                                                                    source_type3 = (SubLObject)api_widgets.NIL;
                                                                                                                    type_type3 = (SubLObject)api_widgets.NIL;
                                                                                                                    cdestructuring_bind.destructuring_bind_must_consp(current4, datum4, (SubLObject)api_widgets.$list422);
                                                                                                                    source3 = current4.first();
                                                                                                                    current4 = current4.rest();
                                                                                                                    cdestructuring_bind.destructuring_bind_must_consp(current4, datum4, (SubLObject)api_widgets.$list422);
                                                                                                                    source_type3 = current4.first();
                                                                                                                    current4 = current4.rest();
                                                                                                                    cdestructuring_bind.destructuring_bind_must_consp(current4, datum4, (SubLObject)api_widgets.$list422);
                                                                                                                    type_type3 = current4.first();
                                                                                                                    current4 = current4.rest();
                                                                                                                    if (api_widgets.NIL == current4) {
                                                                                                                        add_categorized_fet_source(source3, source_type3, type_type3, project3);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        cdestructuring_bind.cdestructuring_bind_error(datum4, (SubLObject)api_widgets.$list422);
                                                                                                                    }
                                                                                                                }
                                                                                                                done_var_$229 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid_$231);
                                                                                                            }
                                                                                                        }
                                                                                                        finally {
                                                                                                            _prev_bind_0_$220 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                            try {
                                                                                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                                                                                _values5 = Values.getValuesAsVector();
                                                                                                                if (api_widgets.NIL != final_index_iterator3) {
                                                                                                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator3);
                                                                                                                }
                                                                                                                Values.restoreValuesFromVector(_values5);
                                                                                                            }
                                                                                                            finally {
                                                                                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$220, thread);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    done_var3 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid3);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            else if (sol2.isList()) {
                                                                                SubLObject csome_list_var3 = sol2;
                                                                                SubLObject project4 = (SubLObject)api_widgets.NIL;
                                                                                project4 = csome_list_var3.first();
                                                                                while (api_widgets.NIL != csome_list_var3) {
                                                                                    if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(project4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread))) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(project4, sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                                                        if (api_widgets.NIL != forts.fort_p(project4)) {
                                                                                            final SubLObject pred_var4 = pred;
                                                                                            if (api_widgets.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(project4, (SubLObject)api_widgets.FOUR_INTEGER, pred_var4)) {
                                                                                                final SubLObject iterator_var4 = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(project4, (SubLObject)api_widgets.FOUR_INTEGER, pred_var4);
                                                                                                SubLObject done_var4 = (SubLObject)api_widgets.NIL;
                                                                                                final SubLObject token_var4 = (SubLObject)api_widgets.NIL;
                                                                                                while (api_widgets.NIL == done_var4) {
                                                                                                    final SubLObject final_index_spec4 = iteration.iteration_next_without_values_macro_helper(iterator_var4, token_var4);
                                                                                                    final SubLObject valid4 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var4.eql(final_index_spec4));
                                                                                                    if (api_widgets.NIL != valid4) {
                                                                                                        SubLObject final_index_iterator4 = (SubLObject)api_widgets.NIL;
                                                                                                        try {
                                                                                                            final_index_iterator4 = kb_mapping_macros.new_final_index_iterator(final_index_spec4, (SubLObject)api_widgets.$kw421$GAF, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL);
                                                                                                            SubLObject done_var_$230 = (SubLObject)api_widgets.NIL;
                                                                                                            final SubLObject token_var_$231 = (SubLObject)api_widgets.NIL;
                                                                                                            while (api_widgets.NIL == done_var_$230) {
                                                                                                                final SubLObject gaf4 = iteration.iteration_next_without_values_macro_helper(final_index_iterator4, token_var_$231);
                                                                                                                final SubLObject valid_$232 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$231.eql(gaf4));
                                                                                                                if (api_widgets.NIL != valid_$232) {
                                                                                                                    SubLObject current5;
                                                                                                                    final SubLObject datum5 = current5 = list_utilities.first_n((SubLObject)api_widgets.THREE_INTEGER, assertions_high.gaf_args(gaf4));
                                                                                                                    SubLObject source4 = (SubLObject)api_widgets.NIL;
                                                                                                                    SubLObject source_type4 = (SubLObject)api_widgets.NIL;
                                                                                                                    SubLObject type_type4 = (SubLObject)api_widgets.NIL;
                                                                                                                    cdestructuring_bind.destructuring_bind_must_consp(current5, datum5, (SubLObject)api_widgets.$list422);
                                                                                                                    source4 = current5.first();
                                                                                                                    current5 = current5.rest();
                                                                                                                    cdestructuring_bind.destructuring_bind_must_consp(current5, datum5, (SubLObject)api_widgets.$list422);
                                                                                                                    source_type4 = current5.first();
                                                                                                                    current5 = current5.rest();
                                                                                                                    cdestructuring_bind.destructuring_bind_must_consp(current5, datum5, (SubLObject)api_widgets.$list422);
                                                                                                                    type_type4 = current5.first();
                                                                                                                    current5 = current5.rest();
                                                                                                                    if (api_widgets.NIL == current5) {
                                                                                                                        add_categorized_fet_source(source4, source_type4, type_type4, project4);
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        cdestructuring_bind.cdestructuring_bind_error(datum5, (SubLObject)api_widgets.$list422);
                                                                                                                    }
                                                                                                                }
                                                                                                                done_var_$230 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid_$232);
                                                                                                            }
                                                                                                        }
                                                                                                        finally {
                                                                                                            final SubLObject _prev_bind_0_$221 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                                            try {
                                                                                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                                                                                                final SubLObject _values6 = Values.getValuesAsVector();
                                                                                                                if (api_widgets.NIL != final_index_iterator4) {
                                                                                                                    kb_mapping_macros.destroy_final_index_iterator(final_index_iterator4);
                                                                                                                }
                                                                                                                Values.restoreValuesFromVector(_values6);
                                                                                                            }
                                                                                                            finally {
                                                                                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$221, thread);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    done_var4 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid4);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    csome_list_var3 = csome_list_var3.rest();
                                                                                    project4 = csome_list_var3.first();
                                                                                }
                                                                            }
                                                                            else {
                                                                                Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                            }
                                                                        }
                                                                        finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$219, thread);
                                                                        }
                                                                        cdolist_list_var_$248 = cdolist_list_var_$248.rest();
                                                                        generating_fn = cdolist_list_var_$248.first();
                                                                    }
                                                                }
                                                            }
                                                            finally {
                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$210, thread);
                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$210, thread);
                                                            }
                                                            cdolist_list_var = cdolist_list_var.rest();
                                                            module_var = cdolist_list_var.first();
                                                        }
                                                        SubLObject cdolist_list_var2;
                                                        final SubLObject accessible_modules2 = cdolist_list_var2 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_module_vars.get_sbhl_module(api_widgets.$const52$isa)));
                                                        SubLObject module_var2 = (SubLObject)api_widgets.NIL;
                                                        module_var2 = cdolist_list_var2.first();
                                                        while (api_widgets.NIL != cdolist_list_var2) {
                                                            final SubLObject _prev_bind_0_$222 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                            final SubLObject _prev_bind_1_$211 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                            try {
                                                                sbhl_module_vars.$sbhl_module$.bind(module_var2, thread);
                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((api_widgets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(api_widgets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                                final SubLObject node2 = function_terms.naut_to_nart(node_var_$208);
                                                                if (api_widgets.NIL != sbhl_link_vars.sbhl_node_object_p(node2)) {
                                                                    final SubLObject d_link2 = sbhl_graphs.get_sbhl_graph_link(node2, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                    if (api_widgets.NIL != d_link2) {
                                                                        final SubLObject mt_links2 = sbhl_links.get_sbhl_mt_links(d_link2, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                        if (api_widgets.NIL != mt_links2) {
                                                                            SubLObject iteration_state2;
                                                                            for (iteration_state2 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links2)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state2); iteration_state2 = dictionary_contents.do_dictionary_contents_next(iteration_state2)) {
                                                                                thread.resetMultipleValues();
                                                                                final SubLObject mt3 = dictionary_contents.do_dictionary_contents_key_value(iteration_state2);
                                                                                final SubLObject tv_links2 = thread.secondMultipleValue();
                                                                                thread.resetMultipleValues();
                                                                                if (api_widgets.NIL != mt_relevance_macros.relevant_mtP(mt3)) {
                                                                                    final SubLObject _prev_bind_0_$223 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt3, thread);
                                                                                        SubLObject iteration_state_$224;
                                                                                        for (iteration_state_$224 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links2)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$224); iteration_state_$224 = dictionary_contents.do_dictionary_contents_next(iteration_state_$224)) {
                                                                                            thread.resetMultipleValues();
                                                                                            final SubLObject tv2 = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$224);
                                                                                            final SubLObject link_nodes4 = thread.secondMultipleValue();
                                                                                            thread.resetMultipleValues();
                                                                                            if (api_widgets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv2)) {
                                                                                                final SubLObject _prev_bind_0_$224 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv2, thread);
                                                                                                    final SubLObject sol3 = link_nodes4;
                                                                                                    if (api_widgets.NIL != set.set_p(sol3)) {
                                                                                                        final SubLObject set_contents_var3 = set.do_set_internal(sol3);
                                                                                                        SubLObject basis_object3;
                                                                                                        SubLObject state3;
                                                                                                        SubLObject node_vars_link_node;
                                                                                                        for (basis_object3 = set_contents.do_set_contents_basis_object(set_contents_var3), state3 = (SubLObject)api_widgets.NIL, state3 = set_contents.do_set_contents_initial_state(basis_object3, set_contents_var3); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object3, state3); state3 = set_contents.do_set_contents_update_state(state3)) {
                                                                                                            node_vars_link_node = set_contents.do_set_contents_next(basis_object3, state3);
                                                                                                            if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state3, node_vars_link_node) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else if (sol3.isList()) {
                                                                                                        SubLObject csome_list_var4 = sol3;
                                                                                                        SubLObject node_vars_link_node2 = (SubLObject)api_widgets.NIL;
                                                                                                        node_vars_link_node2 = csome_list_var4.first();
                                                                                                        while (api_widgets.NIL != csome_list_var4) {
                                                                                                            if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                            }
                                                                                                            csome_list_var4 = csome_list_var4.rest();
                                                                                                            node_vars_link_node2 = csome_list_var4.first();
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol3);
                                                                                                    }
                                                                                                }
                                                                                                finally {
                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$224, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_$224);
                                                                                    }
                                                                                    finally {
                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$223, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state2);
                                                                        }
                                                                    }
                                                                    else {
                                                                        sbhl_paranoia.sbhl_error((SubLObject)api_widgets.FIVE_INTEGER, (SubLObject)api_widgets.$str283$attempting_to_bind_direction_link, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                    }
                                                                }
                                                                else if (api_widgets.NIL != obsolete.cnat_p(node2, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                    SubLObject cdolist_list_var_$249;
                                                                    final SubLObject new_list2 = cdolist_list_var_$249 = ((api_widgets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)));
                                                                    SubLObject generating_fn2 = (SubLObject)api_widgets.NIL;
                                                                    generating_fn2 = cdolist_list_var_$249.first();
                                                                    while (api_widgets.NIL != cdolist_list_var_$249) {
                                                                        final SubLObject _prev_bind_0_$225 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn2, thread);
                                                                            final SubLObject sol4;
                                                                            final SubLObject link_nodes5 = sol4 = Functions.funcall(generating_fn2, node2);
                                                                            if (api_widgets.NIL != set.set_p(sol4)) {
                                                                                final SubLObject set_contents_var4 = set.do_set_internal(sol4);
                                                                                SubLObject basis_object4;
                                                                                SubLObject state4;
                                                                                SubLObject node_vars_link_node3;
                                                                                for (basis_object4 = set_contents.do_set_contents_basis_object(set_contents_var4), state4 = (SubLObject)api_widgets.NIL, state4 = set_contents.do_set_contents_initial_state(basis_object4, set_contents_var4); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object4, state4); state4 = set_contents.do_set_contents_update_state(state4)) {
                                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object4, state4);
                                                                                    if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state4, node_vars_link_node3) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, (SubLObject)api_widgets.UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                    }
                                                                                }
                                                                            }
                                                                            else if (sol4.isList()) {
                                                                                SubLObject csome_list_var5 = sol4;
                                                                                SubLObject node_vars_link_node4 = (SubLObject)api_widgets.NIL;
                                                                                node_vars_link_node4 = csome_list_var5.first();
                                                                                while (api_widgets.NIL != csome_list_var5) {
                                                                                    if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, (SubLObject)api_widgets.UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                    }
                                                                                    csome_list_var5 = csome_list_var5.rest();
                                                                                    node_vars_link_node4 = csome_list_var5.first();
                                                                                }
                                                                            }
                                                                            else {
                                                                                Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol4);
                                                                            }
                                                                        }
                                                                        finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$225, thread);
                                                                        }
                                                                        cdolist_list_var_$249 = cdolist_list_var_$249.rest();
                                                                        generating_fn2 = cdolist_list_var_$249.first();
                                                                    }
                                                                }
                                                            }
                                                            finally {
                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$211, thread);
                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$222, thread);
                                                            }
                                                            cdolist_list_var2 = cdolist_list_var2.rest();
                                                            module_var2 = cdolist_list_var2.first();
                                                        }
                                                        node_var_$208 = deck.deck_pop(recur_deck);
                                                    }
                                                }
                                                finally {
                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$215, thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$209, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$209, thread);
                                                }
                                            }
                                            else {
                                                sbhl_paranoia.sbhl_warn((SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.$str285$Node__a_does_not_pass_sbhl_type_t, node_var, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                            }
                                        }
                                        finally {
                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4_$216, thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3_$215, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$214, thread);
                                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$208, thread);
                                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$208, thread);
                                        }
                                    }
                                    finally {
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$207, thread);
                                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$207, thread);
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$226 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                        final SubLObject _values7 = Values.getValuesAsVector();
                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        Values.restoreValuesFromVector(_values7);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$226, thread);
                                    }
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$206, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$227 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                final SubLObject _values8 = Values.getValuesAsVector();
                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                Values.restoreValuesFromVector(_values8);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$227, thread);
                            }
                        }
                    }
                    finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_1_$206, thread);
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$205, thread);
                    }
                }
                finally {
                    mt_relevance_macros.$mt$.rebind(_prev_bind_1_$205, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0_$204, thread);
                }
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        return api_widgets.$fet_categorized_sources$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 150039L)
    public static SubLObject maybe_initialize_fet_sources() {
        if (api_widgets.NIL == dictionary.dictionary_p(api_widgets.$fet_categorized_sources$.getGlobalValue())) {
            initialize_fet_sources();
        }
        return api_widgets.$fet_categorized_sources$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 150205L)
    public static SubLObject type_type_dict_for_project(final SubLObject project, SubLObject create_if_noneP) {
        if (create_if_noneP == api_widgets.UNPROVIDED) {
            create_if_noneP = (SubLObject)api_widgets.NIL;
        }
        maybe_initialize_fet_sources();
        SubLObject type_type_dict = dictionary.dictionary_lookup(api_widgets.$fet_categorized_sources$.getGlobalValue(), project, (SubLObject)api_widgets.NIL);
        if (api_widgets.NIL == type_type_dict && api_widgets.NIL != create_if_noneP) {
            type_type_dict = dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQL), (SubLObject)api_widgets.UNPROVIDED);
            dictionary.dictionary_enter(api_widgets.$fet_categorized_sources$.getGlobalValue(), project, type_type_dict);
        }
        return type_type_dict;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 150614L)
    public static SubLObject source_type_dict_for_type_type(final SubLObject type_type, final SubLObject type_type_dict, SubLObject create_if_noneP) {
        if (create_if_noneP == api_widgets.UNPROVIDED) {
            create_if_noneP = (SubLObject)api_widgets.NIL;
        }
        if (api_widgets.NIL == type_type_dict) {
            return (SubLObject)api_widgets.NIL;
        }
        SubLObject source_type_dict = dictionary.dictionary_lookup(type_type_dict, type_type, (SubLObject)api_widgets.NIL);
        if (api_widgets.NIL == source_type_dict && api_widgets.NIL != create_if_noneP) {
            source_type_dict = new_fet_source_type_dictionary(type_type);
            dictionary.dictionary_enter(type_type_dict, type_type, source_type_dict);
        }
        return source_type_dict;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 151075L)
    public static SubLObject new_fet_source_type_dictionary(final SubLObject type_type) {
        return dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQL), (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 151188L)
    public static SubLObject get_categorized_source_cws_for_project(final SubLObject project, final SubLObject valid_source_types_collection, final SubLObject mt) {
        if (api_widgets.NIL != fet_categorized_source_pred() && mt.eql(api_widgets.$const21$InferencePSC)) {
            final SubLObject type_type_dict = type_type_dict_for_project(project, (SubLObject)api_widgets.NIL);
            final SubLObject source_type_dict = (api_widgets.NIL != type_type_dict) ? dictionary.dictionary_lookup(type_type_dict, valid_source_types_collection, (SubLObject)api_widgets.UNPROVIDED) : fet_empty_source_dictionary();
            return (api_widgets.NIL != source_type_dict) ? source_type_dict : fet_empty_source_dictionary();
        }
        return get_categorized_source_cws_for_project_old(project, valid_source_types_collection, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 151964L)
    public static SubLObject get_categorized_source_cws_for_project_old(final SubLObject project, final SubLObject valid_source_types_collection, final SubLObject mt) {
        final SubLObject stored_pred = fet_categorized_source_pred();
        final SubLObject query_sentence = (SubLObject)((api_widgets.NIL != stored_pred) ? ConsesLow.list(stored_pred, (SubLObject)api_widgets.$sym423$_CW, (SubLObject)api_widgets.$sym424$_CW_TYPE, valid_source_types_collection, project) : ConsesLow.list(api_widgets.$const106$and, (SubLObject)ConsesLow.list(api_widgets.$const425$projectSource_FactEntry, (SubLObject)api_widgets.$sym423$_CW, project), (SubLObject)api_widgets.$list426, (SubLObject)ConsesLow.list(api_widgets.$const51$assertedSentence, (SubLObject)ConsesLow.list(api_widgets.$const52$isa, (SubLObject)api_widgets.$sym424$_CW_TYPE, valid_source_types_collection))));
        final SubLObject template = (SubLObject)api_widgets.$list427;
        final SubLObject v_properties = (SubLObject)api_widgets.$list164;
        final SubLObject ask_result = ask_utilities.query_template(template, query_sentence, mt, v_properties);
        final SubLObject results_dictionary = dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQ), (SubLObject)api_widgets.UNPROVIDED);
        SubLObject cdolist_list_var = ask_result;
        SubLObject binding = (SubLObject)api_widgets.NIL;
        binding = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = binding;
            SubLObject cw_type = (SubLObject)api_widgets.NIL;
            SubLObject cw = (SubLObject)api_widgets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list428);
            cw_type = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list428);
            cw = current.first();
            current = current.rest();
            if (api_widgets.NIL == current) {
                dictionary_utilities.dictionary_push(results_dictionary, cw_type, cw);
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list428);
            }
            cdolist_list_var = cdolist_list_var.rest();
            binding = cdolist_list_var.first();
        }
        return results_dictionary;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 153230L)
    public static SubLObject get_lisp_implementation_type() {
        return Environment.lisp_implementation_type();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 153316L)
    public static SubLObject get_lisp_implementation_version() {
        return Environment.lisp_implementation_version();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 153408L)
    public static SubLObject reconsider_template_formula_using_tms(final SubLObject the_formula, SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != el_utilities.el_formula_p(the_formula) : the_formula;
        mt = hlmt_czer.coerce_to_hlmt(mt);
        final SubLObject assertion_var = cycl_variables.make_el_var((SubLObject)api_widgets.$str432$_ASSERTION_SENTENCE_908234);
        final SubLObject formula = (SubLObject)ConsesLow.list(api_widgets.$const433$assertionSentence, assertion_var, the_formula);
        final SubLObject results = ask_utilities.query_template(assertion_var, formula, mt, (SubLObject)api_widgets.$list164);
        SubLObject error_message = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = results;
        SubLObject assertion = (SubLObject)api_widgets.NIL;
        assertion = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)api_widgets.$sym28$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        tms.tms_reconsider_assertion(assertion);
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)api_widgets.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
            cdolist_list_var = cdolist_list_var.rest();
            assertion = cdolist_list_var.first();
        }
        return Types.sublisp_null(error_message);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 154416L)
    public static SubLObject clear_all_api_widgets_caches() {
        fact_sheets.clear_all_fact_sheet_caches();
        clear_get_instances_as_renderings();
        clear_get_example_instances_as_renderings();
        clear_get_salient_exemplars();
        clear_source_conceptual_works_for_project();
        clear_get_reformulation_specification_from_kb();
        clear_default_nl_preds_for_type_list();
        reset_collection_instances_caching();
        query_library_utils.clear_cae_fact_editor_focal_types();
        query_library_utils.clear_cae_kb_parameters();
        query_library_api.clear_query_library_caches((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 156089L)
    public static SubLObject rtv_wizard_default_predicates(final SubLObject domain_mt) {
        final SubLObject terms = ask_utilities.query_variable((SubLObject)api_widgets.$sym435$_Y, (SubLObject)api_widgets.$list436, domain_mt, (SubLObject)api_widgets.$list437);
        final SubLObject renderers = get_term_list_as_renderings(terms, domain_mt, (SubLObject)api_widgets.$kw81$NONE, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        return renderers;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 156657L)
    public static SubLObject valid_term_for_enumerated_collectionP(final SubLObject v_term) {
        if (api_widgets.NIL != term_qua_inference_binding_p(v_term)) {
            return valid_term_qua_inference_binding_p(v_term);
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == term.skolem_nartP(v_term) && api_widgets.NIL == term.skolem_termP(v_term));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 156897L)
    public static SubLObject clear_collection_creation_template() {
        final SubLObject cs = api_widgets.$collection_creation_template_caching_state$.getGlobalValue();
        if (api_widgets.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 156897L)
    public static SubLObject remove_collection_creation_template() {
        return memoization_state.caching_state_remove_function_results_with_args(api_widgets.$collection_creation_template_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(api_widgets.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 156897L)
    public static SubLObject collection_creation_template_internal() {
        return constants_high.find_constant_by_guid_string((SubLObject)api_widgets.$str439$8665a79e_80ca_11db_8000_0020ed7aa);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 156897L)
    public static SubLObject collection_creation_template() {
        SubLObject caching_state = api_widgets.$collection_creation_template_caching_state$.getGlobalValue();
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)api_widgets.$sym438$COLLECTION_CREATION_TEMPLATE, (SubLObject)api_widgets.$sym440$_COLLECTION_CREATION_TEMPLATE_CACHING_STATE_, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQL, (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.ZERO_INTEGER);
        }
        SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, (SubLObject)api_widgets.UNPROVIDED);
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(collection_creation_template_internal()));
            memoization_state.caching_state_set_zero_arg_results(caching_state, results, (SubLObject)api_widgets.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 157049L)
    public static SubLObject create_collection_from_set(final SubLObject set_formula, final SubLObject domain_mt, SubLObject name_string, SubLObject language_mt, SubLObject mt) {
        if (name_string == api_widgets.UNPROVIDED) {
            name_string = (SubLObject)api_widgets.NIL;
        }
        if (language_mt == api_widgets.UNPROVIDED) {
            language_mt = (SubLObject)api_widgets.NIL;
        }
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const350$UniversalVocabularyMt;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject collection = kb_utilities.set_to_collection(set_formula, domain_mt);
        final SubLObject _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
        try {
            kb_control_vars.$forward_inference_allowed_rules$.bind(forward.creation_template_allowable_rules(collection_creation_template()), thread);
            rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.listS(api_widgets.$const52$isa, collection, (SubLObject)api_widgets.$list442), mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            if (api_widgets.NIL != name_string) {
                rkf_assertion_utilities.rkf_assert_now((SubLObject)ConsesLow.list(api_widgets.$const443$nameString, collection, name_string), language_mt);
            }
        }
        finally {
            kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
        }
        return collection;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 157547L)
    public static SubLObject create_collection_from_enumerated_terms(final SubLObject terms, final SubLObject domain_mt, SubLObject name_string, SubLObject language_mt, SubLObject basename, SubLObject mt, SubLObject v_genls) {
        if (name_string == api_widgets.UNPROVIDED) {
            name_string = (SubLObject)api_widgets.NIL;
        }
        if (language_mt == api_widgets.UNPROVIDED) {
            language_mt = (SubLObject)api_widgets.NIL;
        }
        if (basename == api_widgets.UNPROVIDED) {
            basename = (SubLObject)api_widgets.$str445$UserCreatedCollection;
        }
        if (mt == api_widgets.UNPROVIDED) {
            mt = api_widgets.$const350$UniversalVocabularyMt;
        }
        if (v_genls == api_widgets.UNPROVIDED) {
            v_genls = (SubLObject)api_widgets.$kw446$COMPUTE;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject valid_terms = list_utilities.remove_if_not(Symbols.symbol_function((SubLObject)api_widgets.$sym447$VALID_TERM_FOR_ENUMERATED_COLLECTION_), terms, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        if (api_widgets.NIL != valid_terms) {
            SubLObject new_term = (SubLObject)api_widgets.NIL;
            final SubLObject rules = forward.creation_template_allowable_rules(collection_creation_template());
            final SubLObject _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
            try {
                kb_control_vars.$forward_inference_allowed_rules$.bind(rules, thread);
                final SubLObject isas = (SubLObject)api_widgets.$list442;
                final SubLObject new_constant = rkf_term_utilities.create_new_constant(basename, isas, (SubLObject)api_widgets.NIL, mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                add_to_collection_from_enumerated_terms(new_constant, valid_terms, domain_mt, v_genls);
                rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(api_widgets.$const448$completelyAssertedCollection, new_constant), domain_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                if (api_widgets.NIL != name_string) {
                    rkf_assertion_utilities.rkf_assert_now((SubLObject)ConsesLow.list(api_widgets.$const443$nameString, new_constant, name_string), language_mt);
                }
                new_term = new_constant;
            }
            finally {
                kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
            }
            return new_term;
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 158638L)
    public static SubLObject add_to_collection_from_enumerated_terms(final SubLObject collection, final SubLObject new_instances, final SubLObject domain_mt, SubLObject v_genls) {
        if (v_genls == api_widgets.UNPROVIDED) {
            v_genls = (SubLObject)api_widgets.$kw446$COMPUTE;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject valid_new_instances = list_utilities.remove_if_not(Symbols.symbol_function((SubLObject)api_widgets.$sym447$VALID_TERM_FOR_ENUMERATED_COLLECTION_), new_instances, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        if (api_widgets.NIL != valid_new_instances) {
            final SubLObject resolved_new_instances = transform_list_utilities.transform(valid_new_instances, (SubLObject)api_widgets.$sym450$VALID_TERM_QUA_INFERENCE_BINDING_P, (SubLObject)api_widgets.$sym451$RESOLVE_TERM_QUA_INFERENCE_BINDING, (SubLObject)api_widgets.UNPROVIDED);
            final SubLObject rules = forward.creation_template_allowable_rules(collection_creation_template());
            final SubLObject _prev_bind_0 = kb_control_vars.$forward_inference_allowed_rules$.currentBinding(thread);
            try {
                kb_control_vars.$forward_inference_allowed_rules$.bind(rules, thread);
                if (api_widgets.NIL == list_utilities.proper_list_p(v_genls)) {
                    v_genls = genls_for_collection_from_enumerated_terms(valid_new_instances, domain_mt);
                }
                SubLObject cdolist_list_var = v_genls;
                SubLObject genl = (SubLObject)api_widgets.NIL;
                genl = cdolist_list_var.first();
                while (api_widgets.NIL != cdolist_list_var) {
                    rkf_assertion_utilities.rkf_assert_with_implicature((SubLObject)ConsesLow.list(api_widgets.$const58$genls, collection, genl), domain_mt, (SubLObject)api_widgets.T);
                    cdolist_list_var = cdolist_list_var.rest();
                    genl = cdolist_list_var.first();
                }
                cdolist_list_var = resolved_new_instances;
                SubLObject v_term = (SubLObject)api_widgets.NIL;
                v_term = cdolist_list_var.first();
                while (api_widgets.NIL != cdolist_list_var) {
                    rkf_assertion_utilities.rkf_assert((SubLObject)ConsesLow.list(api_widgets.$const52$isa, v_term, collection), domain_mt, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                    cdolist_list_var = cdolist_list_var.rest();
                    v_term = cdolist_list_var.first();
                }
            }
            finally {
                kb_control_vars.$forward_inference_allowed_rules$.rebind(_prev_bind_0, thread);
            }
            return collection;
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 159607L)
    public static SubLObject genls_for_collection_from_enumerated_terms(final SubLObject terms, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (api_widgets.NIL == list_utilities.find_if_not((SubLObject)api_widgets.$sym452$INDEXED_TERM_P, terms, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) {
            return isa.min_ceiling_isa(terms, (SubLObject)api_widgets.NIL, domain_mt, (SubLObject)api_widgets.UNPROVIDED);
        }
        SubLObject first_term = (SubLObject)api_widgets.NIL;
        SubLObject remaining_terms = (SubLObject)api_widgets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(terms, terms, (SubLObject)api_widgets.$list453);
        first_term = terms.first();
        SubLObject current;
        SubLObject isas;
        SubLObject next_term;
        for (current = (remaining_terms = terms.rest()), isas = all_isa_for_collection_from_enumerated_terms(first_term, domain_mt); api_widgets.NIL != isas && api_widgets.NIL != remaining_terms; remaining_terms = remaining_terms.rest(), isas = conses_high.intersection(isas, all_isa_for_collection_from_enumerated_terms(next_term, domain_mt), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) {
            next_term = remaining_terms.first();
        }
        final SubLObject mt_var = mt_relevance_macros.with_inference_mt_relevance_validate(domain_mt);
        final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
        try {
            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
            isas = genls.min_cols(isas, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        }
        finally {
            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)((api_widgets.NIL != isas) ? isas : api_widgets.$list454);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 160412L)
    public static SubLObject all_isa_for_collection_from_enumerated_terms(final SubLObject v_term, final SubLObject domain_mt) {
        if (api_widgets.NIL != valid_term_qua_inference_binding_p(v_term)) {
            return term_qua_inference_binding_all_isa(v_term, domain_mt);
        }
        return isa.all_isa(v_term, domain_mt, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 160649L)
    public static SubLObject find_external_ais_terms_in_inference(final SubLObject problem_store_id, final SubLObject inference_id) {
        assert api_widgets.NIL != subl_promotions.non_negative_integer_p(problem_store_id) : problem_store_id;
        assert api_widgets.NIL != subl_promotions.non_negative_integer_p(inference_id) : inference_id;
        final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(problem_store_id, inference_id);
        SubLObject terms = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != inference_datastructures_inference.valid_inference_p(inference)) {
            final SubLObject idx = inference_datastructures_inference.inference_answer_id_index(inference);
            if (api_widgets.NIL == id_index.id_index_objects_empty_p(idx, (SubLObject)api_widgets.$kw457$SKIP)) {
                final SubLObject idx_$267 = idx;
                if (api_widgets.NIL == id_index.id_index_dense_objects_empty_p(idx_$267, (SubLObject)api_widgets.$kw457$SKIP)) {
                    final SubLObject vector_var = id_index.id_index_dense_objects(idx_$267);
                    final SubLObject backwardP_var = (SubLObject)api_widgets.NIL;
                    SubLObject length;
                    SubLObject v_iteration;
                    SubLObject id;
                    SubLObject v_answer;
                    SubLObject cdolist_list_var;
                    SubLObject binding;
                    SubLObject current;
                    SubLObject datum;
                    SubLObject variable;
                    SubLObject value;
                    SubLObject item_var;
                    for (length = Sequences.length(vector_var), v_iteration = (SubLObject)api_widgets.NIL, v_iteration = (SubLObject)api_widgets.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)api_widgets.ONE_INTEGER)) {
                        id = ((api_widgets.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)api_widgets.ONE_INTEGER) : v_iteration);
                        v_answer = Vectors.aref(vector_var, id);
                        if (api_widgets.NIL == id_index.id_index_tombstone_p(v_answer) || api_widgets.NIL == id_index.id_index_skip_tombstones_p((SubLObject)api_widgets.$kw457$SKIP)) {
                            if (api_widgets.NIL != id_index.id_index_tombstone_p(v_answer)) {
                                v_answer = (SubLObject)api_widgets.$kw457$SKIP;
                            }
                            cdolist_list_var = inference_datastructures_inference.inference_answer_bindings(v_answer);
                            binding = (SubLObject)api_widgets.NIL;
                            binding = cdolist_list_var.first();
                            while (api_widgets.NIL != cdolist_list_var) {
                                datum = (current = binding);
                                variable = (SubLObject)api_widgets.NIL;
                                value = (SubLObject)api_widgets.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list458);
                                variable = current.first();
                                current = current.rest();
                                value = (item_var = current);
                                if (api_widgets.NIL == conses_high.member(item_var, terms, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                    terms = (SubLObject)ConsesLow.cons(item_var, terms);
                                }
                                cdolist_list_var = cdolist_list_var.rest();
                                binding = cdolist_list_var.first();
                            }
                        }
                    }
                }
                final SubLObject idx_$268 = idx;
                if (api_widgets.NIL == id_index.id_index_sparse_objects_empty_p(idx_$268)) {
                    final SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$268);
                    SubLObject id2 = (SubLObject)api_widgets.NIL;
                    SubLObject v_answer2 = (SubLObject)api_widgets.NIL;
                    final Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                    try {
                        while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                            final Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                            id2 = Hashtables.getEntryKey(cdohash_entry);
                            v_answer2 = Hashtables.getEntryValue(cdohash_entry);
                            SubLObject cdolist_list_var2 = inference_datastructures_inference.inference_answer_bindings(v_answer2);
                            SubLObject binding2 = (SubLObject)api_widgets.NIL;
                            binding2 = cdolist_list_var2.first();
                            while (api_widgets.NIL != cdolist_list_var2) {
                                SubLObject current2;
                                final SubLObject datum2 = current2 = binding2;
                                SubLObject variable2 = (SubLObject)api_widgets.NIL;
                                SubLObject value2 = (SubLObject)api_widgets.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)api_widgets.$list458);
                                variable2 = current2.first();
                                current2 = current2.rest();
                                final SubLObject item_var2;
                                value2 = (item_var2 = current2);
                                if (api_widgets.NIL == conses_high.member(item_var2, terms, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                    terms = (SubLObject)ConsesLow.cons(item_var2, terms);
                                }
                                cdolist_list_var2 = cdolist_list_var2.rest();
                                binding2 = cdolist_list_var2.first();
                            }
                        }
                    }
                    finally {
                        Hashtables.releaseEntrySetIterator(cdohash_iterator);
                    }
                }
            }
        }
        return find_external_ais_terms(terms);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 161533L)
    public static SubLObject find_external_ais_terms(final SubLObject terms) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = (SubLObject)api_widgets.NIL;
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)api_widgets.$sym199$RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind(api_widgets.$const47$EverythingPSC, thread);
            SubLObject cdolist_list_var = terms;
            SubLObject v_term = (SubLObject)api_widgets.NIL;
            v_term = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                if (api_widgets.NIL != kb_indexing_datastructures.indexed_term_p(v_term)) {
                    final SubLObject pred_var = api_widgets.$const460$synonymousExternalConcept;
                    if (api_widgets.NIL != kb_mapping_macros.do_gaf_arg_index_key_validator(v_term, (SubLObject)api_widgets.ONE_INTEGER, pred_var)) {
                        final SubLObject iterator_var = kb_mapping_macros.new_gaf_arg_final_index_spec_iterator(v_term, (SubLObject)api_widgets.ONE_INTEGER, pred_var);
                        SubLObject done_var = (SubLObject)api_widgets.NIL;
                        final SubLObject token_var = (SubLObject)api_widgets.NIL;
                        while (api_widgets.NIL == done_var) {
                            final SubLObject final_index_spec = iteration.iteration_next_without_values_macro_helper(iterator_var, token_var);
                            final SubLObject valid = (SubLObject)SubLObjectFactory.makeBoolean(!token_var.eql(final_index_spec));
                            if (api_widgets.NIL != valid) {
                                SubLObject final_index_iterator = (SubLObject)api_widgets.NIL;
                                try {
                                    final_index_iterator = kb_mapping_macros.new_final_index_iterator(final_index_spec, (SubLObject)api_widgets.$kw421$GAF, (SubLObject)api_widgets.$kw235$TRUE, (SubLObject)api_widgets.NIL);
                                    SubLObject done_var_$269 = (SubLObject)api_widgets.NIL;
                                    final SubLObject token_var_$270 = (SubLObject)api_widgets.NIL;
                                    while (api_widgets.NIL == done_var_$269) {
                                        final SubLObject gaf = iteration.iteration_next_without_values_macro_helper(final_index_iterator, token_var_$270);
                                        final SubLObject valid_$271 = (SubLObject)SubLObjectFactory.makeBoolean(!token_var_$270.eql(gaf));
                                        if (api_widgets.NIL != valid_$271) {
                                            SubLObject current;
                                            final SubLObject datum = current = assertions_high.gaf_args(gaf);
                                            SubLObject ignore_me = (SubLObject)api_widgets.NIL;
                                            SubLObject ais = (SubLObject)api_widgets.NIL;
                                            SubLObject id = (SubLObject)api_widgets.NIL;
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list461);
                                            ignore_me = current.first();
                                            current = current.rest();
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list461);
                                            ais = current.first();
                                            current = current.rest();
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list461);
                                            id = current.first();
                                            current = current.rest();
                                            if (api_widgets.NIL == current) {
                                                final SubLObject item_var = (SubLObject)ConsesLow.list(v_term, ais, id);
                                                if (api_widgets.NIL == conses_high.member(item_var, ans, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                                    ans = (SubLObject)ConsesLow.cons(item_var, ans);
                                                }
                                            }
                                            else {
                                                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list461);
                                            }
                                        }
                                        done_var_$269 = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid_$271);
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$272 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        if (api_widgets.NIL != final_index_iterator) {
                                            kb_mapping_macros.destroy_final_index_iterator(final_index_iterator);
                                        }
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$272, thread);
                                    }
                                }
                            }
                            done_var = (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == valid);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                v_term = cdolist_list_var.first();
            }
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 162060L)
    public static SubLObject valid_term_qua_inference_binding_p(final SubLObject v_object) {
        SubLObject ans = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL != term_qua_inference_binding_p(v_object)) {
            SubLObject current;
            final SubLObject datum = current = v_object.rest();
            SubLObject store_id = (SubLObject)api_widgets.NIL;
            SubLObject inf_id = (SubLObject)api_widgets.NIL;
            SubLObject ans_id = (SubLObject)api_widgets.NIL;
            SubLObject var = (SubLObject)api_widgets.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
            store_id = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
            inf_id = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
            ans_id = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
            var = current.first();
            current = current.rest();
            if (api_widgets.NIL == current) {
                final SubLObject inference_answer = inference_datastructures_inference.find_inference_answer_by_ids(store_id, inf_id, ans_id);
                if (api_widgets.NIL != inference_datastructures_inference.valid_inference_answer_p(inference_answer) && api_widgets.NIL != conses_high.member(var, bindings.bindings_variables(inference_datastructures_inference.inference_answer_bindings(inference_answer)), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) {
                    ans = (SubLObject)api_widgets.T;
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list462);
            }
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 162601L)
    public static SubLObject term_qua_inference_binding_all_isa(final SubLObject v_term, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != valid_term_qua_inference_binding_p(v_term) : v_term;
        final SubLObject resolved_term = resolve_term_qua_inference_binding(v_term);
        SubLObject types = (SubLObject)((api_widgets.NIL != kb_indexing_datastructures.indexed_term_p(resolved_term)) ? isa.all_isa(resolved_term, domain_mt, (SubLObject)api_widgets.UNPROVIDED) : api_widgets.NIL);
        if (api_widgets.NIL != kb_indexing_datastructures.indexed_term_p(resolved_term)) {
            types = isa.all_isa(resolved_term, domain_mt, (SubLObject)api_widgets.UNPROVIDED);
        }
        final SubLObject inference_answer = term_qua_inference_binding_get_inference_answer(v_term);
        final SubLObject var = (SubLObject)api_widgets.$sym50$_X;
        final SubLObject proven_sentence = inference_datastructures_inference.inference_answer_el_sentence(inference_answer);
        final SubLObject subbed_proven_sentence = cycl_utilities.expression_subst(var, resolved_term, proven_sentence, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED);
        SubLObject sentences = (SubLObject)ConsesLow.list(subbed_proven_sentence);
        SubLObject cdolist_list_var = inference_datastructures_inference.inference_answer_justifications(inference_answer);
        SubLObject just = (SubLObject)api_widgets.NIL;
        just = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$273 = inference_datastructures_inference.inference_answer_justification_supports(just);
            SubLObject support = (SubLObject)api_widgets.NIL;
            support = cdolist_list_var_$273.first();
            while (api_widgets.NIL != cdolist_list_var_$273) {
                if (api_widgets.NIL != cycl_utilities.expression_find(resolved_term, arguments.support_sentence(support), Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) {
                    final SubLObject item_var = cycl_utilities.expression_subst(var, resolved_term, arguments.support_sentence(support), Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED);
                    if (api_widgets.NIL == conses_high.member(item_var, sentences, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                        sentences = (SubLObject)ConsesLow.cons(item_var, sentences);
                    }
                }
                cdolist_list_var_$273 = cdolist_list_var_$273.rest();
                support = cdolist_list_var_$273.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            just = cdolist_list_var.first();
        }
        cdolist_list_var = sentences;
        SubLObject sentence = (SubLObject)api_widgets.NIL;
        sentence = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject local_state = inference_datastructures_problem_store.problem_store_memoization_state(term_qua_inference_binding_get_problem_store(v_term));
            final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    SubLObject cdolist_list_var_$274 = variable_isa_constraints_memoized(var, sentence, domain_mt);
                    SubLObject type = (SubLObject)api_widgets.NIL;
                    type = cdolist_list_var_$274.first();
                    while (api_widgets.NIL != cdolist_list_var_$274) {
                        SubLObject node_var = type;
                        final SubLObject deck_type = (SubLObject)api_widgets.$kw273$STACK;
                        final SubLObject recur_deck = deck.create_deck(deck_type);
                        final SubLObject _prev_bind_0_$275 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                            try {
                                final SubLObject _prev_bind_0_$276 = mt_relevance_macros.$mt$.currentBinding(thread);
                                final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                                final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                                try {
                                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(domain_mt), thread);
                                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(domain_mt), thread);
                                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(domain_mt), thread);
                                    final SubLObject tv_var = (SubLObject)api_widgets.NIL;
                                    final SubLObject _prev_bind_0_$277 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$278 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_tv$.bind((api_widgets.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((api_widgets.NIL != tv_var) ? api_widgets.$sym274$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                                        if (api_widgets.NIL != tv_var && api_widgets.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && api_widgets.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var.eql((SubLObject)api_widgets.$kw275$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                            }
                                            else if (pcase_var.eql((SubLObject)api_widgets.$kw278$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.$str279$continue_anyway, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                            }
                                            else if (pcase_var.eql((SubLObject)api_widgets.$kw280$WARN)) {
                                                Errors.warn((SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)api_widgets.$str281$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)api_widgets.$str279$continue_anyway, (SubLObject)api_widgets.$str276$_A_is_not_a__A, tv_var, (SubLObject)api_widgets.$sym277$SBHL_TRUE_TV_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$278 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$279 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$281 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_vars.get_sbhl_module(api_widgets.$const58$genls), thread);
                                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_vars.get_sbhl_module(api_widgets.$const58$genls)), thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_vars.get_sbhl_module(api_widgets.$const58$genls)), thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)api_widgets.NIL, thread);
                                            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_vars.get_sbhl_module(api_widgets.$const58$genls), thread);
                                            if (api_widgets.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || api_widgets.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(type, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) {
                                                final SubLObject _prev_bind_0_$279 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$280 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                final SubLObject _prev_bind_2_$282 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.sbhl_search_direction_to_link_direction(sbhl_search_vars.get_sbhl_forward_search_direction(), sbhl_module_vars.get_sbhl_module(api_widgets.$const58$genls)), thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)api_widgets.NIL, thread);
                                                    sbhl_marking_utilities.sbhl_mark_node_marked(node_var, (SubLObject)api_widgets.UNPROVIDED);
                                                    while (api_widgets.NIL != node_var) {
                                                        final SubLObject item_var2;
                                                        final SubLObject genl_type = item_var2 = node_var;
                                                        if (api_widgets.NIL == conses_high.member(item_var2, types, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                                                            types = (SubLObject)ConsesLow.cons(item_var2, types);
                                                        }
                                                        SubLObject cdolist_list_var_$275;
                                                        final SubLObject accessible_modules = cdolist_list_var_$275 = sbhl_macros.get_sbhl_accessible_modules(sbhl_module_vars.get_sbhl_module(api_widgets.$const58$genls));
                                                        SubLObject module_var = (SubLObject)api_widgets.NIL;
                                                        module_var = cdolist_list_var_$275.first();
                                                        while (api_widgets.NIL != cdolist_list_var_$275) {
                                                            final SubLObject _prev_bind_0_$280 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                            final SubLObject _prev_bind_1_$281 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                            try {
                                                                sbhl_module_vars.$sbhl_module$.bind(module_var, thread);
                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)((api_widgets.NIL != sbhl_search_vars.flip_genl_inverse_modeP((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) ? SubLObjectFactory.makeBoolean(api_widgets.NIL == sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)) : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                                                                final SubLObject node = function_terms.naut_to_nart(node_var);
                                                                if (api_widgets.NIL != sbhl_link_vars.sbhl_node_object_p(node)) {
                                                                    final SubLObject d_link = sbhl_graphs.get_sbhl_graph_link(node, sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                    if (api_widgets.NIL != d_link) {
                                                                        final SubLObject mt_links = sbhl_links.get_sbhl_mt_links(d_link, sbhl_link_vars.get_sbhl_link_direction(), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED));
                                                                        if (api_widgets.NIL != mt_links) {
                                                                            SubLObject iteration_state;
                                                                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(mt_links)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                                                thread.resetMultipleValues();
                                                                                final SubLObject mt = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                                                final SubLObject tv_links = thread.secondMultipleValue();
                                                                                thread.resetMultipleValues();
                                                                                if (api_widgets.NIL != mt_relevance_macros.relevant_mtP(mt)) {
                                                                                    final SubLObject _prev_bind_0_$281 = sbhl_link_vars.$sbhl_link_mt$.currentBinding(thread);
                                                                                    try {
                                                                                        sbhl_link_vars.$sbhl_link_mt$.bind(mt, thread);
                                                                                        SubLObject iteration_state_$289;
                                                                                        for (iteration_state_$289 = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(tv_links)); api_widgets.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state_$289); iteration_state_$289 = dictionary_contents.do_dictionary_contents_next(iteration_state_$289)) {
                                                                                            thread.resetMultipleValues();
                                                                                            final SubLObject tv = dictionary_contents.do_dictionary_contents_key_value(iteration_state_$289);
                                                                                            final SubLObject link_nodes = thread.secondMultipleValue();
                                                                                            thread.resetMultipleValues();
                                                                                            if (api_widgets.NIL != sbhl_search_vars.relevant_sbhl_tvP(tv)) {
                                                                                                final SubLObject _prev_bind_0_$282 = sbhl_link_vars.$sbhl_link_tv$.currentBinding(thread);
                                                                                                try {
                                                                                                    sbhl_link_vars.$sbhl_link_tv$.bind(tv, thread);
                                                                                                    final SubLObject sol = link_nodes;
                                                                                                    if (api_widgets.NIL != set.set_p(sol)) {
                                                                                                        final SubLObject set_contents_var = set.do_set_internal(sol);
                                                                                                        SubLObject basis_object;
                                                                                                        SubLObject state;
                                                                                                        SubLObject node_vars_link_node;
                                                                                                        for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)api_widgets.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                                                                                            node_vars_link_node = set_contents.do_set_contents_next(basis_object, state);
                                                                                                            if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state, node_vars_link_node) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                deck.deck_push(node_vars_link_node, recur_deck);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else if (sol.isList()) {
                                                                                                        SubLObject csome_list_var = sol;
                                                                                                        SubLObject node_vars_link_node2 = (SubLObject)api_widgets.NIL;
                                                                                                        node_vars_link_node2 = csome_list_var.first();
                                                                                                        while (api_widgets.NIL != csome_list_var) {
                                                                                                            if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node2, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                                                sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node2, (SubLObject)api_widgets.UNPROVIDED);
                                                                                                                deck.deck_push(node_vars_link_node2, recur_deck);
                                                                                                            }
                                                                                                            csome_list_var = csome_list_var.rest();
                                                                                                            node_vars_link_node2 = csome_list_var.first();
                                                                                                        }
                                                                                                    }
                                                                                                    else {
                                                                                                        Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol);
                                                                                                    }
                                                                                                }
                                                                                                finally {
                                                                                                    sbhl_link_vars.$sbhl_link_tv$.rebind(_prev_bind_0_$282, thread);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        dictionary_contents.do_dictionary_contents_finalize(iteration_state_$289);
                                                                                    }
                                                                                    finally {
                                                                                        sbhl_link_vars.$sbhl_link_mt$.rebind(_prev_bind_0_$281, thread);
                                                                                    }
                                                                                }
                                                                            }
                                                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                                                        }
                                                                    }
                                                                    else {
                                                                        sbhl_paranoia.sbhl_error((SubLObject)api_widgets.FIVE_INTEGER, (SubLObject)api_widgets.$str283$attempting_to_bind_direction_link, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                                                    }
                                                                }
                                                                else if (api_widgets.NIL != obsolete.cnat_p(node, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                    SubLObject cdolist_list_var_$276;
                                                                    final SubLObject new_list = cdolist_list_var_$276 = ((api_widgets.NIL != sbhl_link_vars.sbhl_randomize_lists_p()) ? list_utilities.randomize_list(sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED))) : sbhl_module_utilities.get_sbhl_module_relevant_naut_link_generators(sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)));
                                                                    SubLObject generating_fn = (SubLObject)api_widgets.NIL;
                                                                    generating_fn = cdolist_list_var_$276.first();
                                                                    while (api_widgets.NIL != cdolist_list_var_$276) {
                                                                        final SubLObject _prev_bind_0_$283 = sbhl_link_vars.$sbhl_link_generator$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_link_vars.$sbhl_link_generator$.bind(generating_fn, thread);
                                                                            final SubLObject sol2;
                                                                            final SubLObject link_nodes2 = sol2 = Functions.funcall(generating_fn, node);
                                                                            if (api_widgets.NIL != set.set_p(sol2)) {
                                                                                final SubLObject set_contents_var2 = set.do_set_internal(sol2);
                                                                                SubLObject basis_object2;
                                                                                SubLObject state2;
                                                                                SubLObject node_vars_link_node3;
                                                                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)api_widgets.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); api_widgets.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                                                                    node_vars_link_node3 = set_contents.do_set_contents_next(basis_object2, state2);
                                                                                    if (api_widgets.NIL != set_contents.do_set_contents_element_validP(state2, node_vars_link_node3) && api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node3, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node3, (SubLObject)api_widgets.UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node3, recur_deck);
                                                                                    }
                                                                                }
                                                                            }
                                                                            else if (sol2.isList()) {
                                                                                SubLObject csome_list_var2 = sol2;
                                                                                SubLObject node_vars_link_node4 = (SubLObject)api_widgets.NIL;
                                                                                node_vars_link_node4 = csome_list_var2.first();
                                                                                while (api_widgets.NIL != csome_list_var2) {
                                                                                    if (api_widgets.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node_vars_link_node4, (SubLObject)api_widgets.UNPROVIDED)) {
                                                                                        sbhl_marking_utilities.sbhl_mark_node_marked(node_vars_link_node4, (SubLObject)api_widgets.UNPROVIDED);
                                                                                        deck.deck_push(node_vars_link_node4, recur_deck);
                                                                                    }
                                                                                    csome_list_var2 = csome_list_var2.rest();
                                                                                    node_vars_link_node4 = csome_list_var2.first();
                                                                                }
                                                                            }
                                                                            else {
                                                                                Errors.error((SubLObject)api_widgets.$str282$_A_is_neither_SET_P_nor_LISTP_, sol2);
                                                                            }
                                                                        }
                                                                        finally {
                                                                            sbhl_link_vars.$sbhl_link_generator$.rebind(_prev_bind_0_$283, thread);
                                                                        }
                                                                        cdolist_list_var_$276 = cdolist_list_var_$276.rest();
                                                                        generating_fn = cdolist_list_var_$276.first();
                                                                    }
                                                                }
                                                            }
                                                            finally {
                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$281, thread);
                                                                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$280, thread);
                                                            }
                                                            cdolist_list_var_$275 = cdolist_list_var_$275.rest();
                                                            module_var = cdolist_list_var_$275.first();
                                                        }
                                                        node_var = deck.deck_pop(recur_deck);
                                                    }
                                                }
                                                finally {
                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_2_$282, thread);
                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_1_$280, thread);
                                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_0_$279, thread);
                                                }
                                            }
                                            else {
                                                sbhl_paranoia.sbhl_warn((SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.$str285$Node__a_does_not_pass_sbhl_type_t, type, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)api_widgets.UNPROVIDED)), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                                            }
                                        }
                                        finally {
                                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$281, thread);
                                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$279, thread);
                                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$278, thread);
                                        }
                                    }
                                    finally {
                                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$278, thread);
                                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$277, thread);
                                    }
                                }
                                finally {
                                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$276, thread);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$284 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$284, thread);
                                }
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$275, thread);
                        }
                        cdolist_list_var_$274 = cdolist_list_var_$274.rest();
                        type = cdolist_list_var_$274.first();
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$285 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)api_widgets.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$285, thread);
                    }
                }
            }
            finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
            }
            cdolist_list_var = cdolist_list_var.rest();
            sentence = cdolist_list_var.first();
        }
        return types;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 164044L)
    public static SubLObject variable_isa_constraints_memoized_internal(final SubLObject var, final SubLObject sentence, final SubLObject domain_mt) {
        return at_var_types.formula_variable_isa_constraints(var, sentence, domain_mt, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 164044L)
    public static SubLObject variable_isa_constraints_memoized(final SubLObject var, final SubLObject sentence, final SubLObject domain_mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL == v_memoization_state) {
            return variable_isa_constraints_memoized_internal(var, sentence, domain_mt);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, (SubLObject)api_widgets.$sym463$VARIABLE_ISA_CONSTRAINTS_MEMOIZED, (SubLObject)api_widgets.UNPROVIDED);
        if (api_widgets.NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), (SubLObject)api_widgets.$sym463$VARIABLE_ISA_CONSTRAINTS_MEMOIZED, (SubLObject)api_widgets.THREE_INTEGER, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, (SubLObject)api_widgets.$sym463$VARIABLE_ISA_CONSTRAINTS_MEMOIZED, caching_state);
        }
        final SubLObject sxhash = memoization_state.sxhash_calc_3(var, sentence, domain_mt);
        final SubLObject collisions = memoization_state.caching_state_lookup(caching_state, sxhash, (SubLObject)api_widgets.UNPROVIDED);
        if (!collisions.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            SubLObject cdolist_list_var = collisions;
            SubLObject collision = (SubLObject)api_widgets.NIL;
            collision = cdolist_list_var.first();
            while (api_widgets.NIL != cdolist_list_var) {
                SubLObject cached_args = collision.first();
                final SubLObject results2 = conses_high.second(collision);
                if (var.equal(cached_args.first())) {
                    cached_args = cached_args.rest();
                    if (sentence.equal(cached_args.first())) {
                        cached_args = cached_args.rest();
                        if (api_widgets.NIL != cached_args && api_widgets.NIL == cached_args.rest() && domain_mt.equal(cached_args.first())) {
                            return memoization_state.caching_results(results2);
                        }
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                collision = cdolist_list_var.first();
            }
        }
        final SubLObject results3 = Values.arg2(thread.resetMultipleValues(), (SubLObject)Values.multiple_value_list(variable_isa_constraints_memoized_internal(var, sentence, domain_mt)));
        memoization_state.caching_state_enter_multi_key_n(caching_state, sxhash, collisions, results3, (SubLObject)ConsesLow.list(var, sentence, domain_mt));
        return memoization_state.caching_results(results3);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 164206L)
    public static SubLObject formula_variable_arg_constraint_table(final SubLObject formula, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject ans = (SubLObject)api_widgets.NIL;
        final SubLObject isa_dict = dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQL), (SubLObject)api_widgets.UNPROVIDED);
        final SubLObject genl_dict = dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQL), (SubLObject)api_widgets.UNPROVIDED);
        SubLObject all_vars = (SubLObject)api_widgets.NIL;
        final SubLObject constraint_sentence = at_var_types.inter_formula_variables_arg_constraints(formula, mt, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject cdolist_list_var;
        final SubLObject constraints = cdolist_list_var = (SubLObject)((api_widgets.NIL != el_utilities.atomic_sentenceP(constraint_sentence)) ? ConsesLow.list(constraint_sentence) : ((api_widgets.NIL != el_utilities.el_conjunction_p(constraint_sentence)) ? cycl_utilities.formula_args(constraint_sentence, (SubLObject)api_widgets.UNPROVIDED) : api_widgets.NIL));
        SubLObject constraint = (SubLObject)api_widgets.NIL;
        constraint = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            thread.resetMultipleValues();
            SubLObject success = formula_pattern_match.formula_matches_pattern(constraint, (SubLObject)api_widgets.$list465);
            SubLObject v_bindings = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (api_widgets.NIL != success) {
                final SubLObject col = list_utilities.alist_lookup_without_values(v_bindings, (SubLObject)api_widgets.$sym466$COL, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                final SubLObject item_var;
                final SubLObject var = item_var = list_utilities.alist_lookup_without_values(v_bindings, (SubLObject)api_widgets.$sym467$VAR, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                if (api_widgets.NIL == conses_high.member(item_var, all_vars, Symbols.symbol_function((SubLObject)api_widgets.EQL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                    all_vars = (SubLObject)ConsesLow.cons(item_var, all_vars);
                }
                dictionary_utilities.dictionary_pushnew(isa_dict, var, col, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED);
            }
            thread.resetMultipleValues();
            success = formula_pattern_match.formula_matches_pattern(constraint, (SubLObject)api_widgets.$list468);
            v_bindings = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (api_widgets.NIL != success) {
                final SubLObject col = list_utilities.alist_lookup_without_values(v_bindings, (SubLObject)api_widgets.$sym466$COL, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                final SubLObject item_var;
                final SubLObject var = item_var = list_utilities.alist_lookup_without_values(v_bindings, (SubLObject)api_widgets.$sym467$VAR, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                if (api_widgets.NIL == conses_high.member(item_var, all_vars, Symbols.symbol_function((SubLObject)api_widgets.EQL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                    all_vars = (SubLObject)ConsesLow.cons(item_var, all_vars);
                }
                dictionary_utilities.dictionary_pushnew(genl_dict, var, col, Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED);
            }
            cdolist_list_var = cdolist_list_var.rest();
            constraint = cdolist_list_var.first();
        }
        cdolist_list_var = all_vars;
        SubLObject var2 = (SubLObject)api_widgets.NIL;
        var2 = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            ans = list_utilities.alist_enter(ans, var2, (SubLObject)ConsesLow.list(dictionary.dictionary_lookup_without_values(isa_dict, var2, (SubLObject)api_widgets.NIL), dictionary.dictionary_lookup_without_values(genl_dict, var2, (SubLObject)api_widgets.NIL)), (SubLObject)api_widgets.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            var2 = cdolist_list_var.first();
        }
        return ans;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 165536L)
    public static SubLObject resolve_term_qua_inference_binding(final SubLObject v_term) {
        assert api_widgets.NIL != valid_term_qua_inference_binding_p(v_term) : v_term;
        return bindings.variable_lookup(term_qua_inference_binding_get_variable(v_term), inference_datastructures_inference.inference_answer_bindings(term_qua_inference_binding_get_inference_answer(v_term)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 165814L)
    public static SubLObject term_qua_inference_binding_get_problem_store(final SubLObject v_term) {
        assert api_widgets.NIL != valid_term_qua_inference_binding_p(v_term) : v_term;
        SubLObject current;
        final SubLObject datum = current = v_term.rest();
        SubLObject store_id = (SubLObject)api_widgets.NIL;
        SubLObject inf_id = (SubLObject)api_widgets.NIL;
        SubLObject ans_id = (SubLObject)api_widgets.NIL;
        SubLObject var = (SubLObject)api_widgets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        store_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        inf_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        ans_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        var = current.first();
        current = current.rest();
        if (api_widgets.NIL == current) {
            return inference_datastructures_problem_store.find_problem_store_by_id(store_id);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list462);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 166081L)
    public static SubLObject term_qua_inference_binding_get_inference(final SubLObject v_term) {
        assert api_widgets.NIL != valid_term_qua_inference_binding_p(v_term) : v_term;
        SubLObject current;
        final SubLObject datum = current = v_term.rest();
        SubLObject store_id = (SubLObject)api_widgets.NIL;
        SubLObject inf_id = (SubLObject)api_widgets.NIL;
        SubLObject ans_id = (SubLObject)api_widgets.NIL;
        SubLObject var = (SubLObject)api_widgets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        store_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        inf_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        ans_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        var = current.first();
        current = current.rest();
        if (api_widgets.NIL == current) {
            return inference_datastructures_problem_store.find_inference_by_ids(store_id, inf_id);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list462);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 166341L)
    public static SubLObject term_qua_inference_binding_get_inference_answer(final SubLObject v_term) {
        assert api_widgets.NIL != valid_term_qua_inference_binding_p(v_term) : v_term;
        SubLObject current;
        final SubLObject datum = current = v_term.rest();
        SubLObject store_id = (SubLObject)api_widgets.NIL;
        SubLObject inf_id = (SubLObject)api_widgets.NIL;
        SubLObject ans_id = (SubLObject)api_widgets.NIL;
        SubLObject var = (SubLObject)api_widgets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        store_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        inf_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        ans_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        var = current.first();
        current = current.rest();
        if (api_widgets.NIL == current) {
            return inference_datastructures_inference.find_inference_answer_by_ids(store_id, inf_id, ans_id);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list462);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 166615L)
    public static SubLObject term_qua_inference_binding_get_variable(final SubLObject v_term) {
        assert api_widgets.NIL != valid_term_qua_inference_binding_p(v_term) : v_term;
        SubLObject current;
        final SubLObject datum = current = v_term.rest();
        SubLObject store_id = (SubLObject)api_widgets.NIL;
        SubLObject inf_id = (SubLObject)api_widgets.NIL;
        SubLObject ans_id = (SubLObject)api_widgets.NIL;
        SubLObject var = (SubLObject)api_widgets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        store_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        inf_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        ans_id = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)api_widgets.$list462);
        var = current.first();
        current = current.rest();
        if (api_widgets.NIL == current) {
            return var;
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)api_widgets.$list462);
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 167122L)
    public static SubLObject term_qua_inference_binding_p(final SubLObject v_object) {
        return pattern_match.tree_matches_pattern(v_object, api_widgets.$term_qua_inference_answer_pattern$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 167340L)
    public static SubLObject new_cyc_queries(final SubLObject queries, final SubLObject mt, final SubLObject query_properties) {
        SubLObject results = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = queries;
        SubLObject query = (SubLObject)api_widgets.NIL;
        query = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject result = inference_kernel.new_cyc_query(query, mt, query_properties);
            results = (SubLObject)ConsesLow.cons(result, results);
            cdolist_list_var = cdolist_list_var.rest();
            query = cdolist_list_var.first();
        }
        return Sequences.nreverse(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 170814L)
    public static SubLObject gather_filtered_el_rule_assertions_for_term(final SubLObject v_term, final SubLObject selected_terms) {
        assert api_widgets.NIL != Types.consp(selected_terms) : selected_terms;
        return gather_set_filtered_el_rule_assertions_for_term(v_term, set_utilities.construct_set_from_list(selected_terms, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 171197L)
    public static SubLObject gather_set_filtered_el_rule_assertions_for_term(final SubLObject v_term, final SubLObject selected_term_set) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert api_widgets.NIL != set.set_p(selected_term_set) : selected_term_set;
        if (api_widgets.NIL == forts.fort_p(v_term)) {
            return (SubLObject)api_widgets.NIL;
        }
        SubLObject filtered_assertions_1 = (SubLObject)api_widgets.NIL;
        SubLObject filtered_assertions_2 = (SubLObject)api_widgets.NIL;
        SubLObject cdolist_list_var = kb_indexing.gather_all_rule_assertions_for_term(v_term);
        SubLObject gathered_assertion = (SubLObject)api_widgets.NIL;
        gathered_assertion = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject gathered_el_assertion = uncanonicalizer.assertion_el_formula(gathered_assertion);
            if (!gathered_el_assertion.isCons() || (api_widgets.NIL == el_utilities.el_formula_with_any_of_operators_p(gathered_el_assertion, (SubLObject)api_widgets.$list475) && api_widgets.NIL == assertion_has_non_owl_exportable_meta_assertionP(gathered_assertion))) {
                SubLObject ignore_errors_tag = (SubLObject)api_widgets.NIL;
                try {
                    thread.throwStack.push(api_widgets.$kw184$IGNORE_ERRORS_TARGET);
                    final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)api_widgets.$sym185$IGNORE_ERRORS_HANDLER), thread);
                        try {
                            if (api_widgets.NIL != owl_exportable_rule_assertionP(gathered_el_assertion)) {
                                filtered_assertions_1 = (SubLObject)ConsesLow.cons(gathered_el_assertion, filtered_assertions_1);
                            }
                            else if (api_widgets.NIL != api_widgets.$allow_expanded_rules_as_owl_export_candidatesP$.getGlobalValue()) {
                                gathered_el_assertion = czer_utilities.canonicalize_el_sentence(verbosifier.el_expand_all(gathered_el_assertion, api_widgets.$const47$EverythingPSC), api_widgets.$const47$EverythingPSC, (SubLObject)api_widgets.UNPROVIDED);
                                if (api_widgets.NIL != owl_exportable_rule_assertionP(gathered_el_assertion)) {
                                    filtered_assertions_1 = (SubLObject)ConsesLow.cons(gathered_el_assertion, filtered_assertions_1);
                                }
                            }
                        }
                        catch (Throwable catch_var) {
                            Errors.handleThrowable(catch_var, (SubLObject)api_widgets.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_0, thread);
                    }
                }
                catch (Throwable ccatch_env_var) {
                    ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)api_widgets.$kw184$IGNORE_ERRORS_TARGET);
                }
                finally {
                    thread.throwStack.pop();
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            gathered_assertion = cdolist_list_var.first();
        }
        cdolist_list_var = filtered_assertions_1;
        SubLObject filtered_assertion_1 = (SubLObject)api_widgets.NIL;
        filtered_assertion_1 = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            SubLObject rejectedP = (SubLObject)api_widgets.NIL;
            if (api_widgets.NIL == rejectedP) {
                SubLObject csome_list_var = Sequences.remove_duplicates(list_utilities.flatten(narts_high.nart_substitute(filtered_assertion_1)), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                SubLObject assertion_term = (SubLObject)api_widgets.NIL;
                assertion_term = csome_list_var.first();
                while (api_widgets.NIL == rejectedP && api_widgets.NIL != csome_list_var) {
                    if (api_widgets.NIL != forts.fort_p(assertion_term) && api_widgets.NIL == set.set_memberP(assertion_term, api_widgets.$owl_exportable_definitional_term_set$.getGlobalValue()) && api_widgets.NIL == set.set_memberP(assertion_term, selected_term_set)) {
                        rejectedP = (SubLObject)api_widgets.T;
                    }
                    csome_list_var = csome_list_var.rest();
                    assertion_term = csome_list_var.first();
                }
            }
            if (api_widgets.NIL == rejectedP) {
                filtered_assertions_2 = (SubLObject)ConsesLow.cons(filtered_assertion_1, filtered_assertions_2);
            }
            cdolist_list_var = cdolist_list_var.rest();
            filtered_assertion_1 = cdolist_list_var.first();
        }
        return filtered_assertions_2;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 173067L)
    public static SubLObject assertion_has_non_owl_exportable_meta_assertionP(final SubLObject assertion) {
        assert api_widgets.NIL != assertion_handles.assertion_p(assertion) : assertion;
        if (api_widgets.NIL == assertion_utilities.assertion_has_meta_assertionsP(assertion)) {
            return (SubLObject)api_widgets.NIL;
        }
        if (kb_indexing.num_pragma_rule_index(assertion, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED).numG((SubLObject)api_widgets.ZERO_INTEGER)) {
            return (SubLObject)api_widgets.T;
        }
        SubLObject cdolist_list_var;
        final SubLObject predicates = cdolist_list_var = kb_indexing.key_gaf_arg_index(assertion, (SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.NIL);
        SubLObject predicate = (SubLObject)api_widgets.NIL;
        predicate = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            if (predicate.eql(api_widgets.$const477$abnormal)) {
                return (SubLObject)api_widgets.T;
            }
            cdolist_list_var = cdolist_list_var.rest();
            predicate = cdolist_list_var.first();
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 173632L)
    public static SubLObject owl_exportable_rule_assertionP(final SubLObject el_assertion) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (!el_assertion.isCons()) {
            return (SubLObject)api_widgets.NIL;
        }
        if (api_widgets.NIL == el_utilities.el_formula_with_operator_p(el_assertion, api_widgets.$const478$implies)) {
            return (SubLObject)api_widgets.NIL;
        }
        final SubLObject antecedant = conses_high.second(el_assertion);
        final SubLObject consequent_literal = conses_high.third(el_assertion);
        SubLObject antecedant_literals = (SubLObject)api_widgets.NIL;
        SubLObject antecedant_variables = (SubLObject)api_widgets.NIL;
        SubLObject consequent_variables = (SubLObject)api_widgets.NIL;
        SubLObject rejectedP = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !antecedant.isCons()) {
            Errors.error((SubLObject)api_widgets.$str479$invalid_rule_antecedant__A, el_assertion);
        }
        if (api_widgets.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !consequent_literal.isCons()) {
            Errors.error((SubLObject)api_widgets.$str480$invalid_rule_consequent__A, el_assertion);
        }
        if (antecedant.first().eql(api_widgets.$const106$and)) {
            antecedant_literals = antecedant.rest();
        }
        else {
            antecedant_literals = (SubLObject)ConsesLow.list(antecedant);
        }
        if (api_widgets.NIL == rejectedP) {
            SubLObject csome_list_var = antecedant_literals;
            SubLObject antecedant_literal = (SubLObject)api_widgets.NIL;
            antecedant_literal = csome_list_var.first();
            while (api_widgets.NIL == rejectedP && api_widgets.NIL != csome_list_var) {
                if (api_widgets.NIL != owl_exportable_rule_literalP(antecedant_literal)) {
                    SubLObject cdolist_list_var;
                    final SubLObject v_variables = cdolist_list_var = el_utilities.literal_variables(antecedant_literal, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
                    SubLObject variable = (SubLObject)api_widgets.NIL;
                    variable = cdolist_list_var.first();
                    while (api_widgets.NIL != cdolist_list_var) {
                        final SubLObject item_var = variable;
                        if (api_widgets.NIL == conses_high.member(item_var, antecedant_variables, Symbols.symbol_function((SubLObject)api_widgets.EQL), Symbols.symbol_function((SubLObject)api_widgets.IDENTITY))) {
                            antecedant_variables = (SubLObject)ConsesLow.cons(item_var, antecedant_variables);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        variable = cdolist_list_var.first();
                    }
                }
                else {
                    rejectedP = (SubLObject)api_widgets.T;
                }
                csome_list_var = csome_list_var.rest();
                antecedant_literal = csome_list_var.first();
            }
        }
        if (api_widgets.NIL != rejectedP) {
            return (SubLObject)api_widgets.NIL;
        }
        if (api_widgets.NIL == owl_exportable_rule_literalP(consequent_literal)) {
            return (SubLObject)api_widgets.NIL;
        }
        consequent_variables = el_utilities.literal_variables(consequent_literal, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        if (api_widgets.NIL == rejectedP) {
            SubLObject csome_list_var = consequent_variables;
            SubLObject consequent_variable = (SubLObject)api_widgets.NIL;
            consequent_variable = csome_list_var.first();
            while (api_widgets.NIL == rejectedP && api_widgets.NIL != csome_list_var) {
                if (api_widgets.NIL == subl_promotions.memberP(consequent_variable, antecedant_variables, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) {
                    rejectedP = (SubLObject)api_widgets.T;
                }
                csome_list_var = csome_list_var.rest();
                consequent_variable = csome_list_var.first();
            }
        }
        if (api_widgets.NIL != rejectedP) {
            return (SubLObject)api_widgets.NIL;
        }
        return (SubLObject)api_widgets.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 175204L)
    public static SubLObject owl_exportable_rule_literalP(final SubLObject literal) {
        if (api_widgets.NIL == el_utilities.atomic_sentenceP(literal)) {
            return (SubLObject)api_widgets.NIL;
        }
        final SubLObject literal_with_narts = narts_high.nart_substitute(literal);
        final SubLObject predicate = cycl_utilities.formula_arg0(literal_with_narts);
        if (!Sequences.length(literal_with_narts).eql((SubLObject)api_widgets.THREE_INTEGER) && (!predicate.eql(api_widgets.$const481$relationInstanceExists) || api_widgets.NIL != cycl_variables.el_varP(cycl_utilities.formula_arg1(literal, (SubLObject)api_widgets.UNPROVIDED)) || api_widgets.NIL == cycl_variables.el_varP(cycl_utilities.formula_arg2(literal, (SubLObject)api_widgets.UNPROVIDED)) || api_widgets.NIL != cycl_variables.el_varP(cycl_utilities.formula_arg3(literal, (SubLObject)api_widgets.UNPROVIDED)))) {
            return (SubLObject)api_widgets.NIL;
        }
        if (api_widgets.NIL == forts.fort_p(predicate)) {
            return (SubLObject)api_widgets.NIL;
        }
        SubLObject cdolist_list_var = literal_with_narts;
        SubLObject v_term = (SubLObject)api_widgets.NIL;
        v_term = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            if (v_term.isCons()) {
                return (SubLObject)api_widgets.NIL;
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_term = cdolist_list_var.first();
        }
        if (!predicate.eql(api_widgets.$const52$isa)) {
            return (SubLObject)api_widgets.T;
        }
        if (api_widgets.NIL != cycl_variables.el_varP(cycl_utilities.formula_arg1(literal, (SubLObject)api_widgets.UNPROVIDED)) && api_widgets.NIL != forts.fort_p(cycl_utilities.formula_arg2(literal_with_narts, (SubLObject)api_widgets.UNPROVIDED))) {
            return (SubLObject)api_widgets.T;
        }
        return (SubLObject)api_widgets.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 176050L)
    public static SubLObject constantify_existentials_and_open_vars(SubLObject sentence) {
        sentence = cycl_utilities.expression_transform(sentence, (SubLObject)api_widgets.$sym483$EL_EXISTENTIAL_P, (SubLObject)api_widgets.$sym484$FORMULA_ARG2, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject cdolist_list_var = obsolete.formula_free_variables(sentence, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        SubLObject var = (SubLObject)api_widgets.NIL;
        var = cdolist_list_var.first();
        while (api_widgets.NIL != cdolist_list_var) {
            final SubLObject constant = ke.ke_create_now(suggest_constant_name_from_types(var, sentence), (SubLObject)api_widgets.UNPROVIDED);
            sentence = cycl_utilities.formula_subst(constant, var, sentence, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            var = cdolist_list_var.first();
        }
        return sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 176934L)
    public static SubLObject suggest_constant_name_from_types(final SubLObject var, final SubLObject formula) {
        final SubLObject v_genls = cardinality_estimates.sort_by_generality_estimate(at_var_types.formula_variable_genl_constraints(var, formula, api_widgets.$const21$InferencePSC, (SubLObject)api_widgets.UNPROVIDED), (SubLObject)api_widgets.$kw485$ASCENDING);
        if (api_widgets.NIL != v_genls) {
            return constants_high.suggest_constant_name(Sequences.cconcatenate(pph_main.generate_phrase(v_genls.first(), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED), (SubLObject)api_widgets.$str486$_spec), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
        }
        final SubLObject isas = cardinality_estimates.sort_by_generality_estimate(at_var_types.formula_variable_isa_constraints(var, formula, api_widgets.$const21$InferencePSC, (SubLObject)api_widgets.UNPROVIDED), (SubLObject)api_widgets.$kw485$ASCENDING);
        return constants_high.suggest_constant_name(pph_main.generate_phrase(isas.first(), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 177422L)
    public static SubLObject parse_cycl_from_constrained_parse_result(final SubLObject result) {
        return conses_high.second(result);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 177422L)
    public static SubLObject constrained_parse_equalP(final SubLObject parse1, final SubLObject parse2) {
        return Equality.equal(cycl_utilities.hl_to_el(cycl_utilities.expression_transform(parse1, (SubLObject)api_widgets.$sym487$GUID_STRING_P, (SubLObject)api_widgets.$sym488$DUMMIFY_GUID_STRING, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)), cycl_utilities.hl_to_el(cycl_utilities.expression_transform(parse2, (SubLObject)api_widgets.$sym487$GUID_STRING_P, (SubLObject)api_widgets.$sym488$DUMMIFY_GUID_STRING, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 177422L)
    public static SubLObject dummify_guid_string(final SubLObject guid_string) {
        return (SubLObject)api_widgets.$kw489$GUID_STRING;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 177422L)
    public static SubLObject test_template_topic_match_finder(final SubLObject args, final SubLObject desired_terms, final SubLObject bug_number) {
        final SubLObject results = Functions.apply((SubLObject)api_widgets.$sym312$FIND_TEMPLATE_TOPIC_MATCHES_FOR_CONSTRAINT, narts_high.nart_substitute(args));
        SubLObject missingP = (SubLObject)api_widgets.NIL;
        if (api_widgets.NIL == missingP) {
            SubLObject csome_list_var = desired_terms;
            SubLObject desired_term = (SubLObject)api_widgets.NIL;
            desired_term = csome_list_var.first();
            while (api_widgets.NIL == missingP && api_widgets.NIL != csome_list_var) {
                if (api_widgets.NIL == subl_promotions.memberP(desired_term, results, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED)) {
                    missingP = (SubLObject)api_widgets.T;
                    Errors.warn((SubLObject)api_widgets.$str498$Missing_binding__S, desired_term);
                }
                csome_list_var = csome_list_var.rest();
                desired_term = csome_list_var.first();
            }
        }
        if (api_widgets.NIL != missingP && api_widgets.NIL != subl_promotions.positive_integer_p(bug_number)) {
            Errors.warn((SubLObject)api_widgets.$str499$Regression_on_bug__S, bug_number);
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == missingP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 177422L)
    public static SubLObject test_term_filtering_passes_filter(final SubLObject query, final SubLObject mt, final SubLObject v_term) {
        return subl_promotions.memberP(v_term, constraint_filters.filter_terms_for_arg_constraints((SubLObject)api_widgets.$kw502$X, query, mt, (SubLObject)ConsesLow.list(v_term)), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 177422L)
    public static SubLObject test_constrained_cycl_filter(final SubLObject constraints, final SubLObject terms) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject final_result = (SubLObject)api_widgets.NIL;
        SubLObject sentence = (SubLObject)api_widgets.NIL;
        SubLObject arg_pos = (SubLObject)api_widgets.NIL;
        SubLObject constraining_collection = (SubLObject)api_widgets.NIL;
        SubLObject domain_mt = (SubLObject)api_widgets.NIL;
        SubLObject filter_fn = (SubLObject)api_widgets.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(constraints, constraints, (SubLObject)api_widgets.$list505);
        sentence = constraints.first();
        SubLObject current = constraints.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, constraints, (SubLObject)api_widgets.$list505);
        arg_pos = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, constraints, (SubLObject)api_widgets.$list505);
        constraining_collection = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, constraints, (SubLObject)api_widgets.$list505);
        domain_mt = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, constraints, (SubLObject)api_widgets.$list505);
        filter_fn = current.first();
        current = current.rest();
        if (api_widgets.NIL == current) {
            final SubLObject _prev_bind_0 = api_widgets.$parse_sentence_context$.currentBinding(thread);
            final SubLObject _prev_bind_2 = api_widgets.$parse_arg_pos$.currentBinding(thread);
            final SubLObject _prev_bind_3 = api_widgets.$parse_constraining_collection$.currentBinding(thread);
            final SubLObject _prev_bind_4 = api_widgets.$parse_domain_mt$.currentBinding(thread);
            final SubLObject _prev_bind_5 = api_widgets.$parse_filter_fn$.currentBinding(thread);
            try {
                api_widgets.$parse_sentence_context$.bind(sentence, thread);
                api_widgets.$parse_arg_pos$.bind(arg_pos, thread);
                api_widgets.$parse_constraining_collection$.bind(constraining_collection, thread);
                api_widgets.$parse_domain_mt$.bind(domain_mt, thread);
                api_widgets.$parse_filter_fn$.bind(filter_fn, thread);
                final_result = Functions.funcall((SubLObject)api_widgets.$sym506$CONSTRAINED_CYCL_FILTER, terms);
            }
            finally {
                api_widgets.$parse_filter_fn$.rebind(_prev_bind_5, thread);
                api_widgets.$parse_domain_mt$.rebind(_prev_bind_4, thread);
                api_widgets.$parse_constraining_collection$.rebind(_prev_bind_3, thread);
                api_widgets.$parse_arg_pos$.rebind(_prev_bind_2, thread);
                api_widgets.$parse_sentence_context$.rebind(_prev_bind_0, thread);
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(constraints, (SubLObject)api_widgets.$list505);
        }
        return final_result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 177422L)
    public static SubLObject test_bug_parses(final SubLObject quoted_args, final SubLObject desired_result, SubLObject bug_num) {
        if (bug_num == api_widgets.UNPROVIDED) {
            bug_num = (SubLObject)api_widgets.NIL;
        }
        final SubLObject parse_result = Eval.eval((SubLObject)ConsesLow.cons((SubLObject)api_widgets.$sym217$GET_CONSTRAINED_CYCL_FOR_STRING, quoted_args));
        return subl_promotions.memberP(desired_result, parse_result, (SubLObject)api_widgets.$sym509$CONSTRAINED_PARSE_EQUAL_, (SubLObject)api_widgets.$sym510$PARSE_CYCL_FROM_CONSTRAINED_PARSE_RESULT);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 177422L)
    public static SubLObject bug_parse_count(final SubLObject quoted_args) {
        return Sequences.length(Eval.eval((SubLObject)ConsesLow.cons((SubLObject)api_widgets.$sym217$GET_CONSTRAINED_CYCL_FOR_STRING, quoted_args)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 177422L)
    public static SubLObject ws_instance_subset_test(final SubLObject v_term) {
        final SubLObject results_via_ws = get_instances_for_ws(v_term, api_widgets.$const47$EverythingPSC, (SubLObject)api_widgets.NIL, (SubLObject)api_widgets.$int513$350000, (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.UNPROVIDED).first();
        final SubLObject results_via_all_instances = isa.all_instances_in_all_mts(v_term);
        return (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL == conses_high.set_difference(results_via_ws, results_via_all_instances, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED) && api_widgets.NIL == conses_high.set_difference(results_via_all_instances, results_via_ws, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/api-widgets.lisp", position = 177422L)
    public static SubLObject size_between(final SubLObject result, final SubLObject between_values) {
        final SubLObject useful_result = result.first();
        final SubLObject low_value = between_values.first();
        final SubLObject high_value = conses_high.second(between_values);
        return (SubLObject)SubLObjectFactory.makeBoolean(api_widgets.NIL != list_utilities.lengthGE(useful_result, low_value, (SubLObject)api_widgets.UNPROVIDED) && api_widgets.NIL != list_utilities.lengthLE(useful_result, high_value, (SubLObject)api_widgets.UNPROVIDED));
    }
    
    public static SubLObject declare_api_widgets_file() {
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "foo_print_function_trampoline", "FOO-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "foo_p", "FOO-P", 1, 0, false);
        new $foo_p$UnaryFunction();
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "foo_bar", "FOO-BAR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "_csetf_foo_bar", "_CSETF-FOO-BAR", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "make_foo", "MAKE-FOO", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "visit_defstruct_foo", "VISIT-DEFSTRUCT-FOO", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "visit_defstruct_object_foo_method", "VISIT-DEFSTRUCT-OBJECT-FOO-METHOD", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "foo_test", "FOO-TEST", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_cyc_id_for_web_id", "GET-CYC-ID-FOR-WEB-ID", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "register_api_session_cleanup_form", "REGISTER-API-SESSION-CLEANUP-FORM", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "release_widget_resources_for_client", "RELEASE-WIDGET-RESOURCES-FOR-CLIENT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "reset_api_widget_sessions_resources", "RESET-API-WIDGET-SESSIONS-RESOURCES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "run_api_session_cleanup_forms", "RUN-API-SESSION-CLEANUP-FORMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "evaluate_api_cleanup_form", "EVALUATE-API-CLEANUP-FORM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "declare_session_symbol", "DECLARE-SESSION-SYMBOL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "register_session_symbol_cleanup_form", "REGISTER-SESSION-SYMBOL-CLEANUP-FORM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_collection_instances", "CLEAR-GET-COLLECTION-INSTANCES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_collection_instances", "REMOVE-GET-COLLECTION-INSTANCES", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_collection_instances_internal", "GET-COLLECTION-INSTANCES-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_collection_instances", "GET-COLLECTION-INSTANCES", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "note_collection_mt_cooccurrence", "NOTE-COLLECTION-MT-COOCCURRENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_collection_instances_cache_by_cooccurrence", "CLEAR-COLLECTION-INSTANCES-CACHE-BY-COOCCURRENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "recheck_collection_instances_cooccurence_cache", "RECHECK-COLLECTION-INSTANCES-COOCCURENCE-CACHE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "reset_collection_instances_caching", "RESET-COLLECTION-INSTANCES-CACHING", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "process_taxonimic_function_results", "PROCESS-TAXONIMIC-FUNCTION-RESULTS", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "process_taxonimic_function_results_new", "PROCESS-TAXONIMIC-FUNCTION-RESULTS-NEW", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "find_for_ws", "FIND-FOR-WS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_instances_for_ws", "GET-INSTANCES-FOR-WS", 1, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_instances_for_ws_int", "GET-INSTANCES-FOR-WS-INT", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_ws_instance_cache", "GET-WS-INSTANCE-CACHE", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "add_to_ws_instance_cache", "ADD-TO-WS-INSTANCE-CACHE", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "set_ws_instance_cache", "SET-WS-INSTANCE-CACHE", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "ws_instance_iterator_doneP", "WS-INSTANCE-ITERATOR-DONE?", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_ws_instance_iterator", "CLEAR-GET-WS-INSTANCE-ITERATOR", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_ws_instance_iterator", "REMOVE-GET-WS-INSTANCE-ITERATOR", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_ws_instance_iterator_internal", "GET-WS-INSTANCE-ITERATOR-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_ws_instance_iterator", "GET-WS-INSTANCE-ITERATOR", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_specs_for_ws", "GET-SPECS-FOR-WS", 1, 6, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_specs_for_ws_int", "GET-SPECS-FOR-WS-INT", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_ws_spec_cache", "GET-WS-SPEC-CACHE", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "add_to_ws_spec_cache", "ADD-TO-WS-SPEC-CACHE", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "set_ws_spec_cache", "SET-WS-SPEC-CACHE", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "ws_spec_iterator_doneP", "WS-SPEC-ITERATOR-DONE?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_ws_spec_iterator", "CLEAR-GET-WS-SPEC-ITERATOR", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_ws_spec_iterator", "REMOVE-GET-WS-SPEC-ITERATOR", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_ws_spec_iterator_internal", "GET-WS-SPEC-ITERATOR-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_ws_spec_iterator", "GET-WS-SPEC-ITERATOR", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_isas_for_ws", "GET-ISAS-FOR-WS", 1, 6, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_isas_for_ws_int", "CLEAR-GET-ISAS-FOR-WS-INT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_isas_for_ws_int", "REMOVE-GET-ISAS-FOR-WS-INT", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_isas_for_ws_int_internal", "GET-ISAS-FOR-WS-INT-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_isas_for_ws_int", "GET-ISAS-FOR-WS-INT", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "all_genls_of_any", "ALL-GENLS-OF-ANY", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_genls_for_ws", "GET-GENLS-FOR-WS", 1, 6, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_genls_for_ws_int", "CLEAR-GET-GENLS-FOR-WS-INT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_genls_for_ws_int", "REMOVE-GET-GENLS-FOR-WS-INT", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_genls_for_ws_int_internal", "GET-GENLS-FOR-WS-INT-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_genls_for_ws_int", "GET-GENLS-FOR-WS-INT", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_instances_in_nl", "GET-INSTANCES-IN-NL", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "pph_list_item_comparator", "PPH-LIST-ITEM-COMPARATOR", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_instances_as_renderings_int", "GET-INSTANCES-AS-RENDERINGS-INT", 1, 6, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_instances_as_renderings_new", "GET-INSTANCES-AS-RENDERINGS-NEW", 1, 7, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_default_nl_preds_for_type_list", "CLEAR-DEFAULT-NL-PREDS-FOR-TYPE-LIST", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_default_nl_preds_for_type_list", "REMOVE-DEFAULT-NL-PREDS-FOR-TYPE-LIST", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "default_nl_preds_for_type_list_internal", "DEFAULT-NL-PREDS-FOR-TYPE-LIST-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "default_nl_preds_for_type_list", "DEFAULT-NL-PREDS-FOR-TYPE-LIST", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_instances_as_renderings", "CLEAR-GET-INSTANCES-AS-RENDERINGS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_instances_as_renderings", "REMOVE-GET-INSTANCES-AS-RENDERINGS", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_instances_as_renderings_internal", "GET-INSTANCES-AS-RENDERINGS-INTERNAL", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_instances_as_renderings", "GET-INSTANCES-AS-RENDERINGS", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_term_list_as_renderings", "GET-TERM-LIST-AS-RENDERINGS", 3, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_term_list_as_renderings_with_fact_sheets", "GET-TERM-LIST-AS-RENDERINGS-WITH-FACT-SHEETS", 3, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_external_term_browser_url", "GET-EXTERNAL-TERM-BROWSER-URL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_term_list_as_renderings_with_fact_sheets_stripped", "GET-TERM-LIST-AS-RENDERINGS-WITH-FACT-SHEETS-STRIPPED", 3, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "convert_mini_html_to_text", "CONVERT-MINI-HTML-TO-TEXT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "convert_term_list_to_renderings_for_java", "CONVERT-TERM-LIST-TO-RENDERINGS-FOR-JAVA", 1, 7, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "convert_term_list_to_renderings_for_java_int_internal", "CONVERT-TERM-LIST-TO-RENDERINGS-FOR-JAVA-INT-INTERNAL", 6, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "convert_term_list_to_renderings_for_java_int", "CONVERT-TERM-LIST-TO-RENDERINGS-FOR-JAVA-INT", 6, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "salient_instantiation_exemplars", "SALIENT-INSTANTIATION-EXEMPLARS", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_example_instances_as_renderings_int", "GET-EXAMPLE-INSTANCES-AS-RENDERINGS-INT", 8, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_example_instances_as_renderings_new", "GET-EXAMPLE-INSTANCES-AS-RENDERINGS-NEW", 2, 7, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_example_instances_as_renderings", "CLEAR-GET-EXAMPLE-INSTANCES-AS-RENDERINGS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_example_instances_as_renderings", "REMOVE-GET-EXAMPLE-INSTANCES-AS-RENDERINGS", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_example_instances_as_renderings_internal", "GET-EXAMPLE-INSTANCES-AS-RENDERINGS-INTERNAL", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_example_instances_as_renderings", "GET-EXAMPLE-INSTANCES-AS-RENDERINGS", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_salient_exemplars", "CLEAR-GET-SALIENT-EXEMPLARS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_salient_exemplars", "REMOVE-GET-SALIENT-EXEMPLARS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_salient_exemplars_internal", "GET-SALIENT-EXEMPLARS-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_salient_exemplars", "GET-SALIENT-EXEMPLARS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_collection_extent_estimates", "GET-COLLECTION-EXTENT-ESTIMATES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "naut_isas_completely_enumerable", "NAUT-ISAS-COMPLETELY-ENUMERABLE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "naut_isas_estimated_instances", "NAUT-ISAS-ESTIMATED-INSTANCES", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_detailed_instance_estimates", "GET-DETAILED-INSTANCE-ESTIMATES", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_collection_extent_estimates_int", "GET-COLLECTION-EXTENT-ESTIMATES-INT", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_collection_extent_estimates_new", "GET-COLLECTION-EXTENT-ESTIMATES-NEW", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "create_new_instance_from_template", "CREATE-NEW-INSTANCE-FROM-TEMPLATE", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "kill_constant", "KILL-CONSTANT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "kill_fort", "KILL-FORT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_all_isa_assertions_for_fort", "GET-ALL-ISA-ASSERTIONS-FOR-FORT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_reformulation_specification_from_kb", "CLEAR-GET-REFORMULATION-SPECIFICATION-FROM-KB", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_reformulation_specification_from_kb", "REMOVE-GET-REFORMULATION-SPECIFICATION-FROM-KB", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_reformulation_specification_from_kb_internal", "GET-REFORMULATION-SPECIFICATION-FROM-KB-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_reformulation_specification_from_kb", "GET-REFORMULATION-SPECIFICATION-FROM-KB", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "reformulate_unknown_fet_term", "REFORMULATE-UNKNOWN-FET-TERM", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "make_fet_evaluation_assertion", "MAKE-FET-EVALUATION-ASSERTION", 4, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "make_fet_evaluation_of_by", "MAKE-FET-EVALUATION-OF-BY", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "existing_fet_evaluations_of_by", "EXISTING-FET-EVALUATIONS-OF-BY", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "existing_fet_evaluations_of", "EXISTING-FET-EVALUATIONS-OF", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "add_or_edit_assertion_verbose", "ADD-OR-EDIT-ASSERTION-VERBOSE", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "add_or_edit_assertion", "ADD-OR-EDIT-ASSERTION", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "add_or_edit_assertion_internal", "ADD-OR-EDIT-ASSERTION-INTERNAL", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "unassert_fet_sentence", "UNASSERT-FET-SENTENCE", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "skolem_narts_from_assertions", "SKOLEM-NARTS-FROM-ASSERTIONS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "reformulate_edit_sentences", "REFORMULATE-EDIT-SENTENCES", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "build_string_form_for_future_assertion", "BUILD-STRING-FORM-FOR-FUTURE-ASSERTION", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "note_reformulation_happened", "NOTE-REFORMULATION-HAPPENED", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_note_of_reformulation_happened", "REMOVE-NOTE-OF-REFORMULATION-HAPPENED", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "contains_mt_indexical_referencesP", "CONTAINS-MT-INDEXICAL-REFERENCES?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "resolve_mt_indexical_references", "RESOLVE-MT-INDEXICAL-REFERENCES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "cae_applicable_template_topics_for_term", "CAE-APPLICABLE-TEMPLATE-TOPICS-FOR-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_cae_template_topics", "GET-CAE-TEMPLATE-TOPICS", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "gather_temporal_concepts_for_cae", "GATHER-TEMPORAL-CONCEPTS-FOR-CAE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "gather_temporal_concept_variables_for_cae", "GATHER-TEMPORAL-CONCEPT-VARIABLES-FOR-CAE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "cae_temporal_concept_collectionP", "CAE-TEMPORAL-CONCEPT-COLLECTION?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_shared_comments", "GET-SHARED-COMMENTS", 1, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.api_widgets", "with_parsing_constraints", "WITH-PARSING-CONSTRAINTS");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_constrained_cycl_terms", "GET-CONSTRAINED-CYCL-TERMS", 2, 12, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "smart_convert_string_constraint_tuple_to_denotation", "SMART-CONVERT-STRING-CONSTRAINT-TUPLE-TO-DENOTATION", 5, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_constrained_cycl_for_string", "GET-CONSTRAINED-CYCL-FOR-STRING", 3, 11, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_constrained_cycl_for_string_single_answer", "GET-CONSTRAINED-CYCL-FOR-STRING-SINGLE-ANSWER", 3, 11, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_constrained_cycl_for_string_int", "GET-CONSTRAINED-CYCL-FOR-STRING-INT", 3, 11, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "constrained_cycl_filter", "CONSTRAINED-CYCL-FILTER", 1, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "constrained_cycl_filter_int", "CONSTRAINED-CYCL-FILTER-INT", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "read_cycl_from_string", "READ-CYCL-FROM-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "filter_constrained_cycls", "FILTER-CONSTRAINED-CYCLS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "dereference_indexicals_in_constrained_cycls", "DEREFERENCE-INDEXICALS-IN-CONSTRAINED-CYCLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "dereference_indexicals_in_constrained_cycl", "DEREFERENCE-INDEXICALS-IN-CONSTRAINED-CYCL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "partial_matches_for_string", "PARTIAL-MATCHES-FOR-STRING", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "convert_string_constraint_tuple_to_denotation", "CONVERT-STRING-CONSTRAINT-TUPLE-TO-DENOTATION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "stub_term_with_name_and_type_p", "STUB-TERM-WITH-NAME-AND-TYPE-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "string_specP", "STRING-SPEC?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_cycls_for_string_escalating", "GET-CYCLS-FOR-STRING-ESCALATING", 2, 6, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_extended_cycls_for_string", "CLEAR-GET-EXTENDED-CYCLS-FOR-STRING", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_extended_cycls_for_string", "REMOVE-GET-EXTENDED-CYCLS-FOR-STRING", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_extended_cycls_for_string_internal", "GET-EXTENDED-CYCLS-FOR-STRING-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_extended_cycls_for_string", "GET-EXTENDED-CYCLS-FOR-STRING", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_coerced_cycls_for_term", "CLEAR-GET-COERCED-CYCLS-FOR-TERM", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_coerced_cycls_for_term", "REMOVE-GET-COERCED-CYCLS-FOR-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_coerced_cycls_for_term_internal", "GET-COERCED-CYCLS-FOR-TERM-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_coerced_cycls_for_term", "GET-COERCED-CYCLS-FOR-TERM", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_constrained_extended_cycls_for_string", "GET-CONSTRAINED-EXTENDED-CYCLS-FOR-STRING", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_coerced_cycls_for_string", "GET-COERCED-CYCLS-FOR-STRING", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "apply_constrained_cycls_filter_fn", "APPLY-CONSTRAINED-CYCLS-FILTER-FN", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_constrained_cycls_from_generation", "GET-CONSTRAINED-CYCLS-FROM-GENERATION", 2, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_constrained_cycls_for_regular_expression", "GET-CONSTRAINED-CYCLS-FOR-REGULAR-EXPRESSION", 2, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_constrained_cycls_for_regular_expression_low", "GET-CONSTRAINED-CYCLS-FOR-REGULAR-EXPRESSION-LOW", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_constrained_cycls_for_regular_expression_via_inference", "GET-CONSTRAINED-CYCLS-FOR-REGULAR-EXPRESSION-VIA-INFERENCE", 5, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_cycls_for_regex_semantic_constraints", "GET-CYCLS-FOR-REGEX-SEMANTIC-CONSTRAINTS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_cycls_for_regex_regex_constraint", "GET-CYCLS-FOR-REGEX-REGEX-CONSTRAINT", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "filter_phrase_term_list_by_constraint_list", "FILTER-PHRASE-TERM-LIST-BY-CONSTRAINT-LIST", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "filter_cycl_term_by_constraint_list", "FILTER-CYCL-TERM-BY-CONSTRAINT-LIST", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "auto_complete_constrained", "AUTO-COMPLETE-CONSTRAINED", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "auto_complete_term_quick", "AUTO-COMPLETE-TERM-QUICK", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "auto_complete_constrained_new", "AUTO-COMPLETE-CONSTRAINED-NEW", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_string_from_javalist_group", "GET-STRING-FROM-JAVALIST-GROUP", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "find_template_topic_matches_for_constraint", "FIND-TEMPLATE-TOPIC-MATCHES-FOR-CONSTRAINT", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "unparsable_instance_expression_p", "UNPARSABLE-INSTANCE-EXPRESSION-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "use_topic_defining_mt_when_passed_everything_pscP", "USE-TOPIC-DEFINING-MT-WHEN-PASSED-EVERYTHING-PSC?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "everything_psc_dwimmed_awayP", "EVERYTHING-PSC-DWIMMED-AWAY?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_template_topic_assertions_for_match_in_xml", "GET-TEMPLATE-TOPIC-ASSERTIONS-FOR-MATCH-IN-XML", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "formula_template_load_template_graph_memoized_internal", "FORMULA-TEMPLATE-LOAD-TEMPLATE-GRAPH-MEMOIZED-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "formula_template_load_template_graph_memoized", "FORMULA-TEMPLATE-LOAD-TEMPLATE-GRAPH-MEMOIZED", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "assert_candidate_replacements_for_position", "ASSERT-CANDIDATE-REPLACEMENTS-FOR-POSITION", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "create_minimal_formula_template_with_query", "CREATE-MINIMAL-FORMULA-TEMPLATE-WITH-QUERY", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "create_minimal_formula_template_with_query_include_inference", "CREATE-MINIMAL-FORMULA-TEMPLATE-WITH-QUERY-INCLUDE-INFERENCE", 8, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "assert_updated_inference_parameters_for_query", "ASSERT-UPDATED-INFERENCE-PARAMETERS-FOR-QUERY", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_forward_rules_for_query", "GET-FORWARD-RULES-FOR-QUERY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "do_query_template_allowed_rules", "DO-QUERY-TEMPLATE-ALLOWED-RULES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "assert_creation_template_allowable_rules_for_query", "ASSERT-CREATION-TEMPLATE-ALLOWABLE-RULES-FOR-QUERY", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "combine_query_properties", "COMBINE-QUERY-PROPERTIES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "edit_query_gloss", "EDIT-QUERY-GLOSS", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "assert_new_query_gloss", "ASSERT-NEW-QUERY-GLOSS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "mail_about_gloss_edit", "MAIL-ABOUT-GLOSS-EDIT", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "temporally_qualify_assertion_to_end_now", "TEMPORALLY-QUALIFY-ASSERTION-TO-END-NOW", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "current_assertions_with_cycl", "CURRENT-ASSERTIONS-WITH-CYCL", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "assertion_starting_time", "ASSERTION-STARTING-TIME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "mt_starting_time", "MT-STARTING-TIME", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "create_new_formula_template_with_query", "CREATE-NEW-FORMULA-TEMPLATE-WITH-QUERY", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "make_multiple_assertions_to_mt", "MAKE-MULTIPLE-ASSERTIONS-TO-MT", 2, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "api_widgets_assert_wff_now", "API-WIDGETS-ASSERT-WFF-NOW", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "make_multiple_assertions_to_mt_with_creation_template", "MAKE-MULTIPLE-ASSERTIONS-TO-MT-WITH-CREATION-TEMPLATE", 3, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "mail_to_user", "MAIL-TO-USER", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "mail_to_user_with_content_type", "MAIL-TO-USER-WITH-CONTENT-TYPE", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "cyclist_defined_instances_of_col", "CYCLIST-DEFINED-INSTANCES-OF-COL", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "cyclist_defined_specs_of_col", "CYCLIST-DEFINED-SPECS-OF-COL", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_template_topic_in_xml", "GET-TEMPLATE-TOPIC-IN-XML", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_formula_template_in_xml", "GET-FORMULA-TEMPLATE-IN-XML", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_formula_template_from_id", "GET-FORMULA-TEMPLATE-FROM-ID", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "write_formula_template_in_xml", "WRITE-FORMULA-TEMPLATE-IN-XML", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "suggest_loading_mt_for_cycl_query", "SUGGEST-LOADING-MT-FOR-CYCL-QUERY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_cycl_query_in_xml_from_default_mt", "GET-CYCL-QUERY-IN-XML-FROM-DEFAULT-MT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_cycl_query_in_xml", "GET-CYCL-QUERY-IN-XML", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_formula_template_for_fact_or_query_in_xml_from_default_mt", "GET-FORMULA-TEMPLATE-FOR-FACT-OR-QUERY-IN-XML-FROM-DEFAULT-MT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_formula_template_for_fact_or_query_in_xml", "GET-FORMULA-TEMPLATE-FOR-FACT-OR-QUERY-IN-XML", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "process_feedback", "PROCESS-FEEDBACK", 10, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "bindinglist_to_string", "BINDINGLIST-TO-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_bugzilla_product_from_project", "GET-BUGZILLA-PRODUCT-FROM-PROJECT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_possible_renderers_for_followup", "GET-POSSIBLE-RENDERERS-FOR-FOLLOWUP", 5, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_get_possible_renderers_for_followup_int", "CLEAR-GET-POSSIBLE-RENDERERS-FOR-FOLLOWUP-INT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_get_possible_renderers_for_followup_int", "REMOVE-GET-POSSIBLE-RENDERERS-FOR-FOLLOWUP-INT", 5, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_possible_renderers_for_followup_int_internal", "GET-POSSIBLE-RENDERERS-FOR-FOLLOWUP-INT-INTERNAL", 8, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_possible_renderers_for_followup_int", "GET-POSSIBLE-RENDERERS-FOR-FOLLOWUP-INT", 5, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "uniquify_variables_across_two_sentences", "UNIQUIFY-VARIABLES-ACROSS-TWO-SENTENCES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "uniquify_variables_across_two_sentences_int", "UNIQUIFY-VARIABLES-ACROSS-TWO-SENTENCES-INT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "change_variable_names", "CHANGE-VARIABLE-NAMES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "generality_sort_lambda", "GENERALITY-SORT-LAMBDA", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_possible_merged_queries", "GET-POSSIBLE-MERGED-QUERIES", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_possible_merged_queries_wrt_var", "GET-POSSIBLE-MERGED-QUERIES-WRT-VAR", 5, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_source_conceptual_works_for_project", "GET-SOURCE-CONCEPTUAL-WORKS-FOR-PROJECT", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "paraphrased_source_listP", "PARAPHRASED-SOURCE-LIST?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "paraphrased_source_list_for_generation_mtP", "PARAPHRASED-SOURCE-LIST-FOR-GENERATION-MT?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "paraphrased_source_list_sources", "PARAPHRASED-SOURCE-LIST-SOURCES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "paraphrased_source_source", "PARAPHRASED-SOURCE-SOURCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "store_conceptual_work_paraphrases", "STORE-CONCEPTUAL-WORK-PARAPHRASES", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "fet_categorized_source_pred", "FET-CATEGORIZED-SOURCE-PRED", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "add_source_of_type_for_project", "ADD-SOURCE-OF-TYPE-FOR-PROJECT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_source_of_type_for_project", "REMOVE-SOURCE-OF-TYPE-FOR-PROJECT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "fet_empty_source_dictionary", "FET-EMPTY-SOURCE-DICTIONARY", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_source_conceptual_works_for_project", "CLEAR-SOURCE-CONCEPTUAL-WORKS-FOR-PROJECT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "add_categorized_fet_source", "ADD-CATEGORIZED-FET-SOURCE", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_categorized_fet_source", "REMOVE-CATEGORIZED-FET-SOURCE", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "initialize_fet_sources", "INITIALIZE-FET-SOURCES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "maybe_initialize_fet_sources", "MAYBE-INITIALIZE-FET-SOURCES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "type_type_dict_for_project", "TYPE-TYPE-DICT-FOR-PROJECT", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "source_type_dict_for_type_type", "SOURCE-TYPE-DICT-FOR-TYPE-TYPE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "new_fet_source_type_dictionary", "NEW-FET-SOURCE-TYPE-DICTIONARY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_categorized_source_cws_for_project", "GET-CATEGORIZED-SOURCE-CWS-FOR-PROJECT", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_categorized_source_cws_for_project_old", "GET-CATEGORIZED-SOURCE-CWS-FOR-PROJECT-OLD", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_lisp_implementation_type", "GET-LISP-IMPLEMENTATION-TYPE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "get_lisp_implementation_version", "GET-LISP-IMPLEMENTATION-VERSION", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "reconsider_template_formula_using_tms", "RECONSIDER-TEMPLATE-FORMULA-USING-TMS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_all_api_widgets_caches", "CLEAR-ALL-API-WIDGETS-CACHES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "rtv_wizard_default_predicates", "RTV-WIZARD-DEFAULT-PREDICATES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "valid_term_for_enumerated_collectionP", "VALID-TERM-FOR-ENUMERATED-COLLECTION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "clear_collection_creation_template", "CLEAR-COLLECTION-CREATION-TEMPLATE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "remove_collection_creation_template", "REMOVE-COLLECTION-CREATION-TEMPLATE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "collection_creation_template_internal", "COLLECTION-CREATION-TEMPLATE-INTERNAL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "collection_creation_template", "COLLECTION-CREATION-TEMPLATE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "create_collection_from_set", "CREATE-COLLECTION-FROM-SET", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "create_collection_from_enumerated_terms", "CREATE-COLLECTION-FROM-ENUMERATED-TERMS", 2, 5, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "add_to_collection_from_enumerated_terms", "ADD-TO-COLLECTION-FROM-ENUMERATED-TERMS", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "genls_for_collection_from_enumerated_terms", "GENLS-FOR-COLLECTION-FROM-ENUMERATED-TERMS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "all_isa_for_collection_from_enumerated_terms", "ALL-ISA-FOR-COLLECTION-FROM-ENUMERATED-TERMS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "find_external_ais_terms_in_inference", "FIND-EXTERNAL-AIS-TERMS-IN-INFERENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "find_external_ais_terms", "FIND-EXTERNAL-AIS-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "valid_term_qua_inference_binding_p", "VALID-TERM-QUA-INFERENCE-BINDING-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "term_qua_inference_binding_all_isa", "TERM-QUA-INFERENCE-BINDING-ALL-ISA", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "variable_isa_constraints_memoized_internal", "VARIABLE-ISA-CONSTRAINTS-MEMOIZED-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "variable_isa_constraints_memoized", "VARIABLE-ISA-CONSTRAINTS-MEMOIZED", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "formula_variable_arg_constraint_table", "FORMULA-VARIABLE-ARG-CONSTRAINT-TABLE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "resolve_term_qua_inference_binding", "RESOLVE-TERM-QUA-INFERENCE-BINDING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "term_qua_inference_binding_get_problem_store", "TERM-QUA-INFERENCE-BINDING-GET-PROBLEM-STORE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "term_qua_inference_binding_get_inference", "TERM-QUA-INFERENCE-BINDING-GET-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "term_qua_inference_binding_get_inference_answer", "TERM-QUA-INFERENCE-BINDING-GET-INFERENCE-ANSWER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "term_qua_inference_binding_get_variable", "TERM-QUA-INFERENCE-BINDING-GET-VARIABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "term_qua_inference_binding_p", "TERM-QUA-INFERENCE-BINDING-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "new_cyc_queries", "NEW-CYC-QUERIES", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "gather_filtered_el_rule_assertions_for_term", "GATHER-FILTERED-EL-RULE-ASSERTIONS-FOR-TERM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "gather_set_filtered_el_rule_assertions_for_term", "GATHER-SET-FILTERED-EL-RULE-ASSERTIONS-FOR-TERM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "assertion_has_non_owl_exportable_meta_assertionP", "ASSERTION-HAS-NON-OWL-EXPORTABLE-META-ASSERTION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "owl_exportable_rule_assertionP", "OWL-EXPORTABLE-RULE-ASSERTION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "owl_exportable_rule_literalP", "OWL-EXPORTABLE-RULE-LITERAL?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "constantify_existentials_and_open_vars", "CONSTANTIFY-EXISTENTIALS-AND-OPEN-VARS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "suggest_constant_name_from_types", "SUGGEST-CONSTANT-NAME-FROM-TYPES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "parse_cycl_from_constrained_parse_result", "PARSE-CYCL-FROM-CONSTRAINED-PARSE-RESULT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "constrained_parse_equalP", "CONSTRAINED-PARSE-EQUAL?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "dummify_guid_string", "DUMMIFY-GUID-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "test_template_topic_match_finder", "TEST-TEMPLATE-TOPIC-MATCH-FINDER", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "test_term_filtering_passes_filter", "TEST-TERM-FILTERING-PASSES-FILTER", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "test_constrained_cycl_filter", "TEST-CONSTRAINED-CYCL-FILTER", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "test_bug_parses", "TEST-BUG-PARSES", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "bug_parse_count", "BUG-PARSE-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "ws_instance_subset_test", "WS-INSTANCE-SUBSET-TEST", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.api_widgets", "size_between", "SIZE-BETWEEN", 2, 0, false);
        return (SubLObject)api_widgets.NIL;
    }
    
    public static SubLObject init_api_widgets_file() {
        api_widgets.$dtp_foo$ = SubLFiles.defconstant("*DTP-FOO*", (SubLObject)api_widgets.$sym0$FOO);
        api_widgets.$a_foo$ = SubLFiles.defparameter("*A-FOO*", make_foo((SubLObject)api_widgets.UNPROVIDED));
        api_widgets.$api_widget_session_resource_lock$ = SubLFiles.deflexical("*API-WIDGET-SESSION-RESOURCE-LOCK*", Locks.make_lock((SubLObject)api_widgets.$str24$Api_Widget_Session_Resource_Lock));
        api_widgets.$api_widget_session_resource_map$ = SubLFiles.deflexical("*API-WIDGET-SESSION-RESOURCE-MAP*", (api_widgets.NIL != Symbols.boundp((SubLObject)api_widgets.$sym25$_API_WIDGET_SESSION_RESOURCE_MAP_)) ? api_widgets.$api_widget_session_resource_map$.getGlobalValue() : dictionary.new_dictionary((SubLObject)api_widgets.EQUAL, (SubLObject)api_widgets.UNPROVIDED));
        api_widgets.$api_widgets_get_collection_instances_arg_cooccurrence$ = SubLFiles.deflexical("*API-WIDGETS-GET-COLLECTION-INSTANCES-ARG-COOCCURRENCE*", dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED));
        api_widgets.$get_collection_instances_caching_state$ = SubLFiles.deflexical("*GET-COLLECTION-INSTANCES-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$ws_instance_dict$ = SubLFiles.defparameter("*WS-INSTANCE-DICT*", dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED));
        api_widgets.$get_ws_instance_iterator_caching_state$ = SubLFiles.deflexical("*GET-WS-INSTANCE-ITERATOR-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$ws_spec_dict$ = SubLFiles.defparameter("*WS-SPEC-DICT*", dictionary.new_dictionary(Symbols.symbol_function((SubLObject)api_widgets.EQUAL), (SubLObject)api_widgets.UNPROVIDED));
        api_widgets.$get_ws_spec_iterator_caching_state$ = SubLFiles.deflexical("*GET-WS-SPEC-ITERATOR-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$get_isas_for_ws_int_caching_state$ = SubLFiles.deflexical("*GET-ISAS-FOR-WS-INT-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$get_genls_for_ws_int_caching_state$ = SubLFiles.deflexical("*GET-GENLS-FOR-WS-INT-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$default_nl_preds_for_type_list_caching_state$ = SubLFiles.deflexical("*DEFAULT-NL-PREDS-FOR-TYPE-LIST-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$get_instances_as_renderings_caching_state$ = SubLFiles.deflexical("*GET-INSTANCES-AS-RENDERINGS-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$sparql_endpoint_browser_format_string$ = SubLFiles.deflexical("*SPARQL-ENDPOINT-BROWSER-FORMAT-STRING*", (SubLObject)api_widgets.$str101$http____A__D_browse_uri__A_action);
        api_widgets.$mini_fact_sheet_to_fact_sheet_link_text$ = SubLFiles.defconstant("*MINI-FACT-SHEET-TO-FACT-SHEET-LINK-TEXT*", (SubLObject)api_widgets.$str116$_Fact_Sheet_);
        api_widgets.$get_example_instances_as_renderings_caching_state$ = SubLFiles.deflexical("*GET-EXAMPLE-INSTANCES-AS-RENDERINGS-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$get_salient_exemplars_caching_state$ = SubLFiles.deflexical("*GET-SALIENT-EXEMPLARS-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$get_reformulation_specification_from_kb_caching_state$ = SubLFiles.deflexical("*GET-REFORMULATION-SPECIFICATION-FROM-KB-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$fet_evaluation_mt$ = SubLFiles.defparameter("*FET-EVALUATION-MT*", api_widgets.$const150$TKBEvaluatedSentencesMt);
        api_widgets.$future_assertion_message_string$ = SubLFiles.deflexical("*FUTURE-ASSERTION-MESSAGE-STRING*", (SubLObject)api_widgets.$str177$Future_assertion_only_possibility);
        api_widgets.$future_assertion_counter$ = SubLFiles.deflexical("*FUTURE-ASSERTION-COUNTER*", (api_widgets.NIL != Symbols.boundp((SubLObject)api_widgets.$sym178$_FUTURE_ASSERTION_COUNTER_)) ? api_widgets.$future_assertion_counter$.getGlobalValue() : integer_sequence_generator.new_integer_sequence_generator((SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED));
        api_widgets.$microtheory_indexical_referent_current_mt$ = SubLFiles.deflexical("*MICROTHEORY-INDEXICAL-REFERENT-CURRENT-MT*", (SubLObject)api_widgets.$list182);
        api_widgets.$microtheory_mentioning_constructs$ = SubLFiles.deflexical("*MICROTHEORY-MENTIONING-CONSTRUCTS*", (SubLObject)api_widgets.$list183);
        api_widgets.$parse_sentence_context$ = SubLFiles.defparameter("*PARSE-SENTENCE-CONTEXT*", (SubLObject)api_widgets.NIL);
        api_widgets.$parse_arg_pos$ = SubLFiles.defparameter("*PARSE-ARG-POS*", (SubLObject)api_widgets.NIL);
        api_widgets.$parse_constraining_collection$ = SubLFiles.defparameter("*PARSE-CONSTRAINING-COLLECTION*", (SubLObject)api_widgets.NIL);
        api_widgets.$parse_domain_mt$ = SubLFiles.defparameter("*PARSE-DOMAIN-MT*", (SubLObject)api_widgets.NIL);
        api_widgets.$parse_filter_fn$ = SubLFiles.defparameter("*PARSE-FILTER-FN*", (SubLObject)api_widgets.NIL);
        api_widgets.$api_widgets_strip_nl_tagsP$ = SubLFiles.deflexical("*API-WIDGETS-STRIP-NL-TAGS?*", (SubLObject)api_widgets.T);
        api_widgets.$api_widget_return_new_cycls_separatelyP$ = SubLFiles.defparameter("*API-WIDGET-RETURN-NEW-CYCLS-SEPARATELY?*", (SubLObject)api_widgets.NIL);
        api_widgets.$get_extended_cycls_for_string_timeout$ = SubLFiles.defparameter("*GET-EXTENDED-CYCLS-FOR-STRING-TIMEOUT*", (SubLObject)api_widgets.FIVE_INTEGER);
        api_widgets.$get_coerced_cycls_timeout$ = SubLFiles.defparameter("*GET-COERCED-CYCLS-TIMEOUT*", (SubLObject)api_widgets.FIVE_INTEGER);
        api_widgets.$nl_coercion_mt$ = SubLFiles.defparameter("*NL-COERCION-MT*", api_widgets.$const233$EnglishTypeCoercionDataMt);
        api_widgets.$trace_get_cycls_for_string_escalatingP$ = SubLFiles.deflexical("*TRACE-GET-CYCLS-FOR-STRING-ESCALATING?*", (SubLObject)api_widgets.NIL);
        api_widgets.$get_extended_cycls_for_string_caching_state$ = SubLFiles.deflexical("*GET-EXTENDED-CYCLS-FOR-STRING-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$get_coerced_cycls_for_term_caching_state$ = SubLFiles.deflexical("*GET-COERCED-CYCLS-FOR-TERM-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$constrained_cycls_from_generation_cardinality_cutoff$ = SubLFiles.deflexical("*CONSTRAINED-CYCLS-FROM-GENERATION-CARDINALITY-CUTOFF*", (SubLObject)api_widgets.$int134$500);
        api_widgets.$constrained_cycls_for_regular_expression_cardinality_cutoff$ = SubLFiles.deflexical("*CONSTRAINED-CYCLS-FOR-REGULAR-EXPRESSION-CARDINALITY-CUTOFF*", (SubLObject)api_widgets.$int286$5000000);
        api_widgets.$template_topic_match_missing_term_variable$ = SubLFiles.deflexical("*TEMPLATE-TOPIC-MATCH-MISSING-TERM-VARIABLE*", (SubLObject)api_widgets.$sym50$_X);
        api_widgets.$use_topic_defining_mt_when_passed_everything_pscP$ = SubLFiles.deflexical("*USE-TOPIC-DEFINING-MT-WHEN-PASSED-EVERYTHING-PSC?*", (SubLObject)api_widgets.T);
        api_widgets.$everything_psc_dwimmed_awayP$ = SubLFiles.defparameter("*EVERYTHING-PSC-DWIMMED-AWAY?*", (SubLObject)api_widgets.NIL);
        api_widgets.$get_possible_renderers_for_followup_int_caching_state$ = SubLFiles.deflexical("*GET-POSSIBLE-RENDERERS-FOR-FOLLOWUP-INT-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$fet_categorized_source_pred$ = SubLFiles.deflexical("*FET-CATEGORIZED-SOURCE-PRED*", (SubLObject)api_widgets.NIL);
        api_widgets.$fet_categorized_sources$ = SubLFiles.deflexical("*FET-CATEGORIZED-SOURCES*", (SubLObject)((api_widgets.NIL != Symbols.boundp((SubLObject)api_widgets.$sym416$_FET_CATEGORIZED_SOURCES_)) ? api_widgets.$fet_categorized_sources$.getGlobalValue() : api_widgets.$kw417$UNINITIALIZED));
        api_widgets.$fet_empty_source_dictionary$ = SubLFiles.deflexical("*FET-EMPTY-SOURCE-DICTIONARY*", (SubLObject)api_widgets.NIL);
        api_widgets.$collection_creation_template_caching_state$ = SubLFiles.deflexical("*COLLECTION-CREATION-TEMPLATE-CACHING-STATE*", (SubLObject)api_widgets.NIL);
        api_widgets.$term_qua_inference_answer_pattern$ = SubLFiles.deflexical("*TERM-QUA-INFERENCE-ANSWER-PATTERN*", (SubLObject)api_widgets.$list469);
        api_widgets.$owl_exportable_definitional_terms$ = SubLFiles.deflexical("*OWL-EXPORTABLE-DEFINITIONAL-TERMS*", (SubLObject)api_widgets.$list471);
        api_widgets.$owl_exportable_definitional_term_set$ = SubLFiles.deflexical("*OWL-EXPORTABLE-DEFINITIONAL-TERM-SET*", set_utilities.construct_set_from_list(api_widgets.$owl_exportable_definitional_terms$.getGlobalValue(), (SubLObject)api_widgets.UNPROVIDED, (SubLObject)api_widgets.UNPROVIDED));
        api_widgets.$allow_expanded_rules_as_owl_export_candidatesP$ = SubLFiles.deflexical("*ALLOW-EXPANDED-RULES-AS-OWL-EXPORT-CANDIDATES?*", (SubLObject)api_widgets.NIL);
        return (SubLObject)api_widgets.NIL;
    }
    
    public static SubLObject setup_api_widgets_file() {
        Structures.register_method(print_high.$print_object_method_table$.getGlobalValue(), api_widgets.$dtp_foo$.getGlobalValue(), Symbols.symbol_function((SubLObject)api_widgets.$sym7$FOO_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim((SubLObject)api_widgets.$list8);
        Structures.def_csetf((SubLObject)api_widgets.$sym9$FOO_BAR, (SubLObject)api_widgets.$sym10$_CSETF_FOO_BAR);
        Equality.identity((SubLObject)api_widgets.$sym0$FOO);
        Structures.register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), api_widgets.$dtp_foo$.getGlobalValue(), Symbols.symbol_function((SubLObject)api_widgets.$sym17$VISIT_DEFSTRUCT_OBJECT_FOO_METHOD));
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym18$GET_CYC_ID_FOR_WEB_ID);
        subl_macro_promotions.declare_defglobal((SubLObject)api_widgets.$sym25$_API_WIDGET_SESSION_RESOURCE_MAP_);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym26$REGISTER_API_SESSION_CLEANUP_FORM);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym30$DECLARE_SESSION_SYMBOL);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym35$GET_COLLECTION_INSTANCES);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym41$FIND_FOR_WS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym46$GET_INSTANCES_FOR_WS);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym55$GET_WS_INSTANCE_ITERATOR);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym57$GET_SPECS_FOR_WS);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym60$GET_WS_SPEC_ITERATOR);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym62$GET_ISAS_FOR_WS);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym63$GET_ISAS_FOR_WS_INT);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym70$GET_GENLS_FOR_WS);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym71$GET_GENLS_FOR_WS_INT);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym74$GET_INSTANCES_IN_NL);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym83$GET_INSTANCES_AS_RENDERINGS_NEW);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym90$DEFAULT_NL_PREDS_FOR_TYPE_LIST);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym92$GET_INSTANCES_AS_RENDERINGS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym95$GET_TERM_LIST_AS_RENDERINGS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym97$GET_TERM_LIST_AS_RENDERINGS_WITH_FACT_SHEETS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym102$GET_EXTERNAL_TERM_BROWSER_URL);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym115$GET_TERM_LIST_AS_RENDERINGS_WITH_FACT_SHEETS_STRIPPED);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym118$CONVERT_TERM_LIST_TO_RENDERINGS_FOR_JAVA);
        memoization_state.note_memoized_function((SubLObject)api_widgets.$sym119$CONVERT_TERM_LIST_TO_RENDERINGS_FOR_JAVA_INT);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym124$SALIENT_INSTANTIATION_EXEMPLARS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym127$GET_EXAMPLE_INSTANCES_AS_RENDERINGS_NEW);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym128$GET_EXAMPLE_INSTANCES_AS_RENDERINGS);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym130$GET_SALIENT_EXEMPLARS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym132$GET_COLLECTION_EXTENT_ESTIMATES);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym136$GET_COLLECTION_EXTENT_ESTIMATES_NEW);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym137$CREATE_NEW_INSTANCE_FROM_TEMPLATE);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym139$KILL_CONSTANT);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym140$KILL_FORT);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym145$GET_REFORMULATION_SPECIFICATION_FROM_KB);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym147$REFORMULATE_UNKNOWN_FET_TERM);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym151$MAKE_FET_EVALUATION_ASSERTION);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym166$ADD_OR_EDIT_ASSERTION_VERBOSE);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym167$ADD_OR_EDIT_ASSERTION);
        subl_macro_promotions.declare_defglobal((SubLObject)api_widgets.$sym178$_FUTURE_ASSERTION_COUNTER_);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym186$CAE_APPLICABLE_TEMPLATE_TOPICS_FOR_TERM);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym189$GET_CAE_TEMPLATE_TOPICS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym194$GATHER_TEMPORAL_CONCEPTS_FOR_CAE);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym198$GET_SHARED_COMMENTS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym216$_API_WIDGET_RETURN_NEW_CYCLS_SEPARATELY__);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym217$GET_CONSTRAINED_CYCL_FOR_STRING);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym226$CONVERT_STRING_CONSTRAINT_TUPLE_TO_DENOTATION);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym234$GET_CYCLS_FOR_STRING_ESCALATING);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym257$GET_EXTENDED_CYCLS_FOR_STRING);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym265$GET_COERCED_CYCLS_FOR_TERM);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym287$GET_CONSTRAINED_CYCLS_FOR_REGULAR_EXPRESSION);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym300$FILTER_PHRASE_TERM_LIST_BY_CONSTRAINT_LIST);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym302$FILTER_CYCL_TERM_BY_CONSTRAINT_LIST);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym304$AUTO_COMPLETE_CONSTRAINED);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym305$AUTO_COMPLETE_TERM_QUICK);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym309$AUTO_COMPLETE_CONSTRAINED_NEW);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym312$FIND_TEMPLATE_TOPIC_MATCHES_FOR_CONSTRAINT);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym316$GET_TEMPLATE_TOPIC_ASSERTIONS_FOR_MATCH_IN_XML);
        memoization_state.note_memoized_function((SubLObject)api_widgets.$sym321$FORMULA_TEMPLATE_LOAD_TEMPLATE_GRAPH_MEMOIZED);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym322$ASSERT_CANDIDATE_REPLACEMENTS_FOR_POSITION);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym325$CREATE_MINIMAL_FORMULA_TEMPLATE_WITH_QUERY);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym330$CREATE_MINIMAL_FORMULA_TEMPLATE_WITH_QUERY_INCLUDE_INFERENCE);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym331$ASSERT_UPDATED_INFERENCE_PARAMETERS_FOR_QUERY);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym334$COMBINE_QUERY_PROPERTIES);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym335$EDIT_QUERY_GLOSS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym347$CREATE_NEW_FORMULA_TEMPLATE_WITH_QUERY);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym356$MAKE_MULTIPLE_ASSERTIONS_TO_MT);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym364$MAKE_MULTIPLE_ASSERTIONS_TO_MT_WITH_CREATION_TEMPLATE);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym365$MAIL_TO_USER);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym367$MAIL_TO_USER_WITH_CONTENT_TYPE);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym368$CYCLIST_DEFINED_INSTANCES_OF_COL);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym370$CYCLIST_DEFINED_SPECS_OF_COL);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym371$GET_TEMPLATE_TOPIC_IN_XML);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym375$GET_FORMULA_TEMPLATE_IN_XML);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym379$GET_CYCL_QUERY_IN_XML_FROM_DEFAULT_MT);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym380$GET_CYCL_QUERY_IN_XML);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym383$GET_FORMULA_TEMPLATE_FOR_FACT_OR_QUERY_IN_XML_FROM_DEFAULT_MT);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym384$GET_FORMULA_TEMPLATE_FOR_FACT_OR_QUERY_IN_XML);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym385$PROCESS_FEEDBACK);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym397$GET_POSSIBLE_RENDERERS_FOR_FOLLOWUP);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym399$GET_POSSIBLE_RENDERERS_FOR_FOLLOWUP_INT);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym402$UNIQUIFY_VARIABLES_ACROSS_TWO_SENTENCES);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym403$CHANGE_VARIABLE_NAMES);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym404$GENERALITY_SORT_LAMBDA);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym405$GET_POSSIBLE_MERGED_QUERIES);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym406$GET_POSSIBLE_MERGED_QUERIES_WRT_VAR);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym407$GET_SOURCE_CONCEPTUAL_WORKS_FOR_PROJECT);
        utilities_macros.register_kb_function((SubLObject)api_widgets.$sym414$ADD_SOURCE_OF_TYPE_FOR_PROJECT);
        utilities_macros.register_kb_function((SubLObject)api_widgets.$sym415$REMOVE_SOURCE_OF_TYPE_FOR_PROJECT);
        subl_macro_promotions.declare_defglobal((SubLObject)api_widgets.$sym416$_FET_CATEGORIZED_SOURCES_);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym429$GET_LISP_IMPLEMENTATION_TYPE);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym430$GET_LISP_IMPLEMENTATION_VERSION);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym431$RECONSIDER_TEMPLATE_FORMULA_USING_TMS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym434$RTV_WIZARD_DEFAULT_PREDICATES);
        memoization_state.note_globally_cached_function((SubLObject)api_widgets.$sym438$COLLECTION_CREATION_TEMPLATE);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym441$CREATE_COLLECTION_FROM_SET);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym444$CREATE_COLLECTION_FROM_ENUMERATED_TERMS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym449$ADD_TO_COLLECTION_FROM_ENUMERATED_TERMS);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym455$FIND_EXTERNAL_AIS_TERMS_IN_INFERENCE);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym459$FIND_EXTERNAL_AIS_TERMS);
        memoization_state.note_memoized_function((SubLObject)api_widgets.$sym463$VARIABLE_ISA_CONSTRAINTS_MEMOIZED);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym464$FORMULA_VARIABLE_ARG_CONSTRAINT_TABLE);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym470$NEW_CYC_QUERIES);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym472$GATHER_FILTERED_EL_RULE_ASSERTIONS_FOR_TERM);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym474$GATHER_SET_FILTERED_EL_RULE_ASSERTIONS_FOR_TERM);
        access_macros.register_external_symbol((SubLObject)api_widgets.$sym482$CONSTANTIFY_EXISTENTIALS_AND_OPEN_VARS);
        generic_testing.define_test_case_table_int((SubLObject)api_widgets.$sym490$TEST_TEMPLATE_TOPIC_MATCH_FINDER, (SubLObject)ConsesLow.list(new SubLObject[] { api_widgets.$kw491$TEST, api_widgets.EQUAL, api_widgets.$kw492$OWNER, api_widgets.NIL, api_widgets.$kw493$CLASSES, api_widgets.NIL, api_widgets.$kw494$KB, api_widgets.$kw495$FULL, api_widgets.$kw496$WORKING_, api_widgets.T }), (SubLObject)api_widgets.$list497);
        generic_testing.define_test_case_table_int((SubLObject)api_widgets.$sym500$TEST_TERM_FILTERING_PASSES_FILTER, (SubLObject)ConsesLow.list(new SubLObject[] { api_widgets.$kw491$TEST, api_widgets.EQUAL, api_widgets.$kw492$OWNER, api_widgets.NIL, api_widgets.$kw493$CLASSES, api_widgets.NIL, api_widgets.$kw494$KB, api_widgets.$kw495$FULL, api_widgets.$kw496$WORKING_, api_widgets.T }), (SubLObject)api_widgets.$list501);
        generic_testing.define_test_case_table_int((SubLObject)api_widgets.$sym503$TEST_CONSTRAINED_CYCL_FILTER, (SubLObject)ConsesLow.list(new SubLObject[] { api_widgets.$kw491$TEST, api_widgets.EQUAL, api_widgets.$kw492$OWNER, api_widgets.NIL, api_widgets.$kw493$CLASSES, api_widgets.NIL, api_widgets.$kw494$KB, api_widgets.$kw495$FULL, api_widgets.$kw496$WORKING_, api_widgets.T }), (SubLObject)api_widgets.$list504);
        generic_testing.define_test_case_table_int((SubLObject)api_widgets.$sym507$TEST_BUG_PARSES, (SubLObject)ConsesLow.list(new SubLObject[] { api_widgets.$kw491$TEST, api_widgets.EQUAL, api_widgets.$kw492$OWNER, api_widgets.NIL, api_widgets.$kw493$CLASSES, api_widgets.NIL, api_widgets.$kw494$KB, api_widgets.$kw495$FULL, api_widgets.$kw496$WORKING_, api_widgets.T }), api_widgets.$list508);
        generic_testing.define_test_case_table_int((SubLObject)api_widgets.$sym511$BUG_PARSE_COUNT, (SubLObject)ConsesLow.list(new SubLObject[] { api_widgets.$kw491$TEST, api_widgets.EQUAL, api_widgets.$kw492$OWNER, api_widgets.NIL, api_widgets.$kw493$CLASSES, api_widgets.NIL, api_widgets.$kw494$KB, api_widgets.$kw495$FULL, api_widgets.$kw496$WORKING_, api_widgets.T }), (SubLObject)api_widgets.$list512);
        generic_testing.define_test_case_table_int((SubLObject)api_widgets.$sym514$WS_INSTANCE_SUBSET_TEST, (SubLObject)ConsesLow.list(new SubLObject[] { api_widgets.$kw491$TEST, api_widgets.EQ, api_widgets.$kw492$OWNER, api_widgets.NIL, api_widgets.$kw493$CLASSES, api_widgets.NIL, api_widgets.$kw494$KB, api_widgets.$kw495$FULL, api_widgets.$kw496$WORKING_, api_widgets.T }), (SubLObject)api_widgets.$list515);
        generic_testing.define_test_case_table_int((SubLObject)api_widgets.$sym57$GET_SPECS_FOR_WS, (SubLObject)ConsesLow.list(new SubLObject[] { api_widgets.$kw491$TEST, api_widgets.$sym516$SIZE_BETWEEN, api_widgets.$kw492$OWNER, api_widgets.NIL, api_widgets.$kw493$CLASSES, api_widgets.NIL, api_widgets.$kw494$KB, api_widgets.$kw495$FULL, api_widgets.$kw496$WORKING_, api_widgets.T }), (SubLObject)api_widgets.$list517);
        generic_testing.define_test_case_table_int((SubLObject)api_widgets.$sym70$GET_GENLS_FOR_WS, (SubLObject)ConsesLow.list(new SubLObject[] { api_widgets.$kw491$TEST, api_widgets.$sym516$SIZE_BETWEEN, api_widgets.$kw492$OWNER, api_widgets.NIL, api_widgets.$kw493$CLASSES, api_widgets.NIL, api_widgets.$kw494$KB, api_widgets.$kw495$FULL, api_widgets.$kw496$WORKING_, api_widgets.T }), (SubLObject)api_widgets.$list518);
        generic_testing.define_test_case_table_int((SubLObject)api_widgets.$sym46$GET_INSTANCES_FOR_WS, (SubLObject)ConsesLow.list(new SubLObject[] { api_widgets.$kw491$TEST, api_widgets.$sym516$SIZE_BETWEEN, api_widgets.$kw492$OWNER, api_widgets.NIL, api_widgets.$kw493$CLASSES, api_widgets.NIL, api_widgets.$kw494$KB, api_widgets.$kw495$FULL, api_widgets.$kw496$WORKING_, api_widgets.T }), (SubLObject)api_widgets.$list519);
        return (SubLObject)api_widgets.NIL;
    }
    
    private static SubLObject _constant_508_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Ordizia, Spain"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GeographicalRegion")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CityNamedFn")), (SubLObject)SubLObjectFactory.makeString("Ordizia"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Spain"))), (SubLObject)SubLObjectFactory.makeInteger(13870)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("Hezbollah"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerroristGroup")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic")))), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("LebaneseHizballah")), (SubLObject)SubLObjectFactory.makeKeyword("NOT-A-BUG")), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("#$BananaTree"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InferencePSC"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BananaTree")), (SubLObject)SubLObjectFactory.makeKeyword("NOT-A-BUG")), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Israeli army"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Agent-PartiallyTangible")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ArmyFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Israel"))), (SubLObject)SubLObjectFactory.makeInteger(13667)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("tomatoes"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CANONICALIZE-TERM"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SpecsFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HighExplosive"))))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt"))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerrorismParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt"))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt"))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic"))), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ProperSubcollectionNamedFn-Ternary")), (SubLObject)SubLObjectFactory.makeString("tomatoes"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HighExplosive")), (SubLObject)SubLObjectFactory.makeString("53c4c132-f1e1-11da-88f0-0002b3a85b0b")), (SubLObject)SubLObjectFactory.makeInteger(19137)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("3"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerrorismParaphraseMt")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt"))), api_widgets.T, api_widgets.T, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), SubLObjectFactory.makeKeyword("DEFAULT"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("thereExists")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("?NUM")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("and")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("greaterThan")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("?NUM")), (SubLObject)api_widgets.ZERO_INTEGER), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExists")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("intendedAttackTargets")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("?ATTACK")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RestaurantSpace"))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("dateOfEvent")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("?ATTACK")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CANONICALIZE-TERM"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DecadeFn")), (SubLObject)SubLObjectFactory.makeInteger(199))))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExistsCount")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("animalWoundedIn")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("?ATTACK")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Person")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("?NUM"))))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("LIST"), (SubLObject)api_widgets.TWO_INTEGER, (SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.TWO_INTEGER), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), (SubLObject)api_widgets.THREE_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(17698)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Austin, TX"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Place")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CityOfAustinTX")), (SubLObject)SubLObjectFactory.makeInteger(11675)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("the mid 1980s"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TemporalThing")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MiddlePartFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DecadeFn")), (SubLObject)SubLObjectFactory.makeInteger(198))), (SubLObject)SubLObjectFactory.makeInteger(11969)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("and"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), (SubLObject)api_widgets.T), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("and")), (SubLObject)SubLObjectFactory.makeInteger(17645)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("#$and"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), (SubLObject)api_widgets.T), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("and")), (SubLObject)SubLObjectFactory.makeInteger(17645)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("late October 1980"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TemporalThing")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("LatePartFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MonthFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("October")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("YearFn")), (SubLObject)SubLObjectFactory.makeInteger(1980)))), (SubLObject)SubLObjectFactory.makeInteger(11969)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("2001"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TemporalThing")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("YearFn")), (SubLObject)SubLObjectFactory.makeInteger(2001)), (SubLObject)SubLObjectFactory.makeInteger(11972)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("between 1973 and 1988"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TemporalThing")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeIntervalInclusiveFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SomeTimeInIntervalFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("YearFn")), (SubLObject)SubLObjectFactory.makeInteger(1973)), (SubLObject)SubLObjectFactory.makeKeyword("GUID-STRING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SomeTimeInIntervalFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("YearFn")), (SubLObject)SubLObjectFactory.makeInteger(1988)), (SubLObject)SubLObjectFactory.makeKeyword("GUID-STRING"))), (SubLObject)SubLObjectFactory.makeInteger(12047)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("$2"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MonetaryValue")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Dollar-UnitedStates")), (SubLObject)api_widgets.TWO_INTEGER), (SubLObject)SubLObjectFactory.makeInteger(15954)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("between 7 and 10"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeIntegerRange")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("IntervalRangeFn")), (SubLObject)api_widgets.SEVEN_INTEGER, (SubLObject)api_widgets.TEN_INTEGER), (SubLObject)SubLObjectFactory.makeInteger(12348)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Western Europe"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GeographicalRegion")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("WesternEurope")), (SubLObject)SubLObjectFactory.makeInteger(12367)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Western Congo-Kinshasa"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GeographicalRegion")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("WesternRegionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DemocraticRepublicOfTheCongo"))), (SubLObject)SubLObjectFactory.makeInteger(14356)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("Israel"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("IndependentCountry")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Israel")), (SubLObject)SubLObjectFactory.makeInteger(12377)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("from early 1997 to the end of January 2004"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeInterval")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic")))), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeIntervalInclusiveFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SomeTimeInIntervalFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EarlyPartFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("YearFn")), (SubLObject)SubLObjectFactory.makeInteger(1997))), (SubLObject)SubLObjectFactory.makeString("506fa613-a8de-11d8-8d30-0002b3a84f94")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SomeTimeInIntervalFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EndingIntervalFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MonthFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("January")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("YearFn")), (SubLObject)SubLObjectFactory.makeInteger(2004)))), (SubLObject)SubLObjectFactory.makeString("506fa614-a8de-11d8-8d30-0002b3a84f94"))), (SubLObject)SubLObjectFactory.makeInteger(12404)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("separatist organization"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SpecsFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PoliticalOrganization")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SeparatistOrganization")), (SubLObject)SubLObjectFactory.makeInteger(12425)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("CA"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Place")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("California-State")), (SubLObject)SubLObjectFactory.makeInteger(12438)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("arson"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SpecsFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ActionOnObject")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Arson")), (SubLObject)SubLObjectFactory.makeInteger(12479)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("10 kilos"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MassOrSpatialQuantity")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Kilogram")), (SubLObject)api_widgets.TEN_INTEGER), (SubLObject)SubLObjectFactory.makeInteger(12488)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeString("10 pounds"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MassOrSpatialQuantity")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Pound-UnitOfMass")), (SubLObject)api_widgets.TEN_INTEGER), (SubLObject)SubLObjectFactory.makeInteger(12503)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("approx 1000"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeIntegerRange")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic")))), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApproximatelyFn")), (SubLObject)SubLObjectFactory.makeInteger(1000)), (SubLObject)SubLObjectFactory.makeInteger(12588)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("Greater than 9"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeIntegerRange")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic")))), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("IntervalOfTypeMinFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeInteger")), (SubLObject)api_widgets.TEN_INTEGER), (SubLObject)SubLObjectFactory.makeInteger(12713)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("over 9"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeIntegerRange")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic")))), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("IntervalOfTypeMinFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeInteger")), (SubLObject)api_widgets.TEN_INTEGER), (SubLObject)SubLObjectFactory.makeInteger(12713)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("fewer than 9"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeIntegerRange")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic")))), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("IntervalOfTypeMaxFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeInteger")), (SubLObject)api_widgets.EIGHT_INTEGER), (SubLObject)SubLObjectFactory.makeInteger(12713)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("under 9"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeIntegerRange")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic")))), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("IntervalOfTypeMaxFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeInteger")), (SubLObject)api_widgets.EIGHT_INTEGER), (SubLObject)SubLObjectFactory.makeInteger(12713)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("sudan's government"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerrorismParaphraseMt")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), SubLObjectFactory.makeKeyword("DEFAULT"), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GovernmentFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Sudan"))), (SubLObject)SubLObjectFactory.makeInteger(21749)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("government of Sudan"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerrorismParaphraseMt")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), SubLObjectFactory.makeKeyword("DEFAULT"), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GovernmentFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Sudan"))), (SubLObject)SubLObjectFactory.makeInteger(21749)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("the government of Sudan"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerrorismParaphraseMt")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), SubLObjectFactory.makeKeyword("DEFAULT"), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("GovernmentFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Sudan"))), (SubLObject)SubLObjectFactory.makeInteger(21749)), (SubLObject)api_widgets.T) });
    }
    
    public void declareFunctions() {
        declare_api_widgets_file();
    }
    
    public void initializeVariables() {
        init_api_widgets_file();
    }
    
    public void runTopLevelForms() {
        setup_api_widgets_file();
    }
    
    static {
        me = (SubLFile)new api_widgets();
        api_widgets.$dtp_foo$ = null;
        api_widgets.$a_foo$ = null;
        api_widgets.$api_widget_session_resource_lock$ = null;
        api_widgets.$api_widget_session_resource_map$ = null;
        api_widgets.$api_widgets_get_collection_instances_arg_cooccurrence$ = null;
        api_widgets.$get_collection_instances_caching_state$ = null;
        api_widgets.$ws_instance_dict$ = null;
        api_widgets.$get_ws_instance_iterator_caching_state$ = null;
        api_widgets.$ws_spec_dict$ = null;
        api_widgets.$get_ws_spec_iterator_caching_state$ = null;
        api_widgets.$get_isas_for_ws_int_caching_state$ = null;
        api_widgets.$get_genls_for_ws_int_caching_state$ = null;
        api_widgets.$default_nl_preds_for_type_list_caching_state$ = null;
        api_widgets.$get_instances_as_renderings_caching_state$ = null;
        api_widgets.$sparql_endpoint_browser_format_string$ = null;
        api_widgets.$mini_fact_sheet_to_fact_sheet_link_text$ = null;
        api_widgets.$get_example_instances_as_renderings_caching_state$ = null;
        api_widgets.$get_salient_exemplars_caching_state$ = null;
        api_widgets.$get_reformulation_specification_from_kb_caching_state$ = null;
        api_widgets.$fet_evaluation_mt$ = null;
        api_widgets.$future_assertion_message_string$ = null;
        api_widgets.$future_assertion_counter$ = null;
        api_widgets.$microtheory_indexical_referent_current_mt$ = null;
        api_widgets.$microtheory_mentioning_constructs$ = null;
        api_widgets.$parse_sentence_context$ = null;
        api_widgets.$parse_arg_pos$ = null;
        api_widgets.$parse_constraining_collection$ = null;
        api_widgets.$parse_domain_mt$ = null;
        api_widgets.$parse_filter_fn$ = null;
        api_widgets.$api_widgets_strip_nl_tagsP$ = null;
        api_widgets.$api_widget_return_new_cycls_separatelyP$ = null;
        api_widgets.$get_extended_cycls_for_string_timeout$ = null;
        api_widgets.$get_coerced_cycls_timeout$ = null;
        api_widgets.$nl_coercion_mt$ = null;
        api_widgets.$trace_get_cycls_for_string_escalatingP$ = null;
        api_widgets.$get_extended_cycls_for_string_caching_state$ = null;
        api_widgets.$get_coerced_cycls_for_term_caching_state$ = null;
        api_widgets.$constrained_cycls_from_generation_cardinality_cutoff$ = null;
        api_widgets.$constrained_cycls_for_regular_expression_cardinality_cutoff$ = null;
        api_widgets.$template_topic_match_missing_term_variable$ = null;
        api_widgets.$use_topic_defining_mt_when_passed_everything_pscP$ = null;
        api_widgets.$everything_psc_dwimmed_awayP$ = null;
        api_widgets.$get_possible_renderers_for_followup_int_caching_state$ = null;
        api_widgets.$fet_categorized_source_pred$ = null;
        api_widgets.$fet_categorized_sources$ = null;
        api_widgets.$fet_empty_source_dictionary$ = null;
        api_widgets.$collection_creation_template_caching_state$ = null;
        api_widgets.$term_qua_inference_answer_pattern$ = null;
        api_widgets.$owl_exportable_definitional_terms$ = null;
        api_widgets.$owl_exportable_definitional_term_set$ = null;
        api_widgets.$allow_expanded_rules_as_owl_export_candidatesP$ = null;
        $sym0$FOO = SubLObjectFactory.makeSymbol("FOO");
        $sym1$FOO_P = SubLObjectFactory.makeSymbol("FOO-P");
        $list2 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("BAR"));
        $list3 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("BAR"));
        $list4 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FOO-BAR"));
        $list5 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("_CSETF-FOO-BAR"));
        $sym6$DEFAULT_STRUCT_PRINT_FUNCTION = SubLObjectFactory.makeSymbol("DEFAULT-STRUCT-PRINT-FUNCTION");
        $sym7$FOO_PRINT_FUNCTION_TRAMPOLINE = SubLObjectFactory.makeSymbol("FOO-PRINT-FUNCTION-TRAMPOLINE");
        $list8 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("OPTIMIZE-FUNCALL"), (SubLObject)SubLObjectFactory.makeSymbol("FOO-P"));
        $sym9$FOO_BAR = SubLObjectFactory.makeSymbol("FOO-BAR");
        $sym10$_CSETF_FOO_BAR = SubLObjectFactory.makeSymbol("_CSETF-FOO-BAR");
        $kw11$BAR = SubLObjectFactory.makeKeyword("BAR");
        $str12$Invalid_slot__S_for_construction_ = SubLObjectFactory.makeString("Invalid slot ~S for construction function");
        $kw13$BEGIN = SubLObjectFactory.makeKeyword("BEGIN");
        $sym14$MAKE_FOO = SubLObjectFactory.makeSymbol("MAKE-FOO");
        $kw15$SLOT = SubLObjectFactory.makeKeyword("SLOT");
        $kw16$END = SubLObjectFactory.makeKeyword("END");
        $sym17$VISIT_DEFSTRUCT_OBJECT_FOO_METHOD = SubLObjectFactory.makeSymbol("VISIT-DEFSTRUCT-OBJECT-FOO-METHOD");
        $sym18$GET_CYC_ID_FOR_WEB_ID = SubLObjectFactory.makeSymbol("GET-CYC-ID-FOR-WEB-ID");
        $sym19$STRINGP = SubLObjectFactory.makeSymbol("STRINGP");
        $sym20$RELEVANT_MT_IS_ANY_MT = SubLObjectFactory.makeSymbol("RELEVANT-MT-IS-ANY-MT");
        $const21$InferencePSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InferencePSC"));
        $const22$Cyclist = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Cyclist"));
        $str23$__A__is_not_a_known___Cyclist___ = SubLObjectFactory.makeString("'~A' is not a known #$Cyclist.~%");
        $str24$Api_Widget_Session_Resource_Lock = SubLObjectFactory.makeString("Api Widget Session Resource Lock");
        $sym25$_API_WIDGET_SESSION_RESOURCE_MAP_ = SubLObjectFactory.makeSymbol("*API-WIDGET-SESSION-RESOURCE-MAP*");
        $sym26$REGISTER_API_SESSION_CLEANUP_FORM = SubLObjectFactory.makeSymbol("REGISTER-API-SESSION-CLEANUP-FORM");
        $kw27$CLEARED = SubLObjectFactory.makeKeyword("CLEARED");
        $sym28$CATCH_ERROR_MESSAGE_HANDLER = SubLObjectFactory.makeSymbol("CATCH-ERROR-MESSAGE-HANDLER");
        $str29$Clean_up_form__A_for_session__A_e = SubLObjectFactory.makeString("Clean-up form ~A for session ~A executed with an error: ~A");
        $sym30$DECLARE_SESSION_SYMBOL = SubLObjectFactory.makeSymbol("DECLARE-SESSION-SYMBOL");
        $sym31$PROGN = SubLObjectFactory.makeSymbol("PROGN");
        $sym32$MAKUNBOUND = SubLObjectFactory.makeSymbol("MAKUNBOUND");
        $sym33$FIND_SYMBOL = SubLObjectFactory.makeSymbol("FIND-SYMBOL");
        $sym34$UNINTERN = SubLObjectFactory.makeSymbol("UNINTERN");
        $sym35$GET_COLLECTION_INSTANCES = SubLObjectFactory.makeSymbol("GET-COLLECTION-INSTANCES");
        $sym36$RELEVANT_MT_IS_EQ = SubLObjectFactory.makeSymbol("RELEVANT-MT-IS-EQ");
        $sym37$_GET_COLLECTION_INSTANCES_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-COLLECTION-INSTANCES-CACHING-STATE*");
        $int38$256 = SubLObjectFactory.makeInteger(256);
        $list39 = ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL);
        $sym40$COMPACT_HL_EXTERNAL_ID_STRING = SubLObjectFactory.makeSymbol("COMPACT-HL-EXTERNAL-ID-STRING");
        $sym41$FIND_FOR_WS = SubLObjectFactory.makeSymbol("FIND-FOR-WS");
        $str42$externalId = SubLObjectFactory.makeString("externalId");
        $str43$cycl = SubLObjectFactory.makeString("cycl");
        $str44$_ = SubLObjectFactory.makeString("(");
        $list45 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("anyNl"), (SubLObject)SubLObjectFactory.makeString("nl"));
        $sym46$GET_INSTANCES_FOR_WS = SubLObjectFactory.makeSymbol("GET-INSTANCES-FOR-WS");
        $const47$EverythingPSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC"));
        $int48$250 = SubLObjectFactory.makeInteger(250);
        $kw49$INCOMPLETE = SubLObjectFactory.makeKeyword("INCOMPLETE");
        $sym50$_X = SubLObjectFactory.makeSymbol("?X");
        $const51$assertedSentence = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertedSentence"));
        $const52$isa = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa"));
        $kw53$MAX_NUMBER = SubLObjectFactory.makeKeyword("MAX-NUMBER");
        $list54 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("PRODUCTIVITY-LIMIT"), (SubLObject)SubLObjectFactory.makeKeyword("POSITIVE-INFINITY"));
        $sym55$GET_WS_INSTANCE_ITERATOR = SubLObjectFactory.makeSymbol("GET-WS-INSTANCE-ITERATOR");
        $sym56$_GET_WS_INSTANCE_ITERATOR_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-WS-INSTANCE-ITERATOR-CACHING-STATE*");
        $sym57$GET_SPECS_FOR_WS = SubLObjectFactory.makeSymbol("GET-SPECS-FOR-WS");
        $const58$genls = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genls"));
        $kw59$EMPTY_RESULT = SubLObjectFactory.makeKeyword("EMPTY-RESULT");
        $sym60$GET_WS_SPEC_ITERATOR = SubLObjectFactory.makeSymbol("GET-WS-SPEC-ITERATOR");
        $sym61$_GET_WS_SPEC_ITERATOR_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-WS-SPEC-ITERATOR-CACHING-STATE*");
        $sym62$GET_ISAS_FOR_WS = SubLObjectFactory.makeSymbol("GET-ISAS-FOR-WS");
        $sym63$GET_ISAS_FOR_WS_INT = SubLObjectFactory.makeSymbol("GET-ISAS-FOR-WS-INT");
        $list64 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?X"));
        $sym65$_GET_ISAS_FOR_WS_INT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-ISAS-FOR-WS-INT-CACHING-STATE*");
        $sym66$CLEAR_GET_ISAS_FOR_WS_INT = SubLObjectFactory.makeSymbol("CLEAR-GET-ISAS-FOR-WS-INT");
        $sym67$LISTP = SubLObjectFactory.makeSymbol("LISTP");
        $sym68$APPEND = SubLObjectFactory.makeSymbol("APPEND");
        $sym69$ALL_GENLS_IN_MT = SubLObjectFactory.makeSymbol("ALL-GENLS-IN-MT");
        $sym70$GET_GENLS_FOR_WS = SubLObjectFactory.makeSymbol("GET-GENLS-FOR-WS");
        $sym71$GET_GENLS_FOR_WS_INT = SubLObjectFactory.makeSymbol("GET-GENLS-FOR-WS-INT");
        $sym72$_GET_GENLS_FOR_WS_INT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-GENLS-FOR-WS-INT-CACHING-STATE*");
        $sym73$CLEAR_GET_GENLS_FOR_WS_INT = SubLObjectFactory.makeSymbol("CLEAR-GET-GENLS-FOR-WS-INT");
        $sym74$GET_INSTANCES_IN_NL = SubLObjectFactory.makeSymbol("GET-INSTANCES-IN-NL");
        $sym75$COLLECTION_P = SubLObjectFactory.makeSymbol("COLLECTION-P");
        $sym76$POSSIBLY_MT_P = SubLObjectFactory.makeSymbol("POSSIBLY-MT-P");
        $kw77$NEW = SubLObjectFactory.makeKeyword("NEW");
        $sym78$STRING_LESSP = SubLObjectFactory.makeSymbol("STRING-LESSP");
        $sym79$FIRST = SubLObjectFactory.makeSymbol("FIRST");
        $kw80$ALL_INSTANTIATIONS = SubLObjectFactory.makeKeyword("ALL-INSTANTIATIONS");
        $kw81$NONE = SubLObjectFactory.makeKeyword("NONE");
        $sym82$SET_OR_COLLECTION_ = SubLObjectFactory.makeSymbol("SET-OR-COLLECTION?");
        $sym83$GET_INSTANCES_AS_RENDERINGS_NEW = SubLObjectFactory.makeSymbol("GET-INSTANCES-AS-RENDERINGS-NEW");
        $kw84$ANY_MT = SubLObjectFactory.makeKeyword("ANY-MT");
        $kw85$DEFAULT = SubLObjectFactory.makeKeyword("DEFAULT");
        $kw86$LOCAL_CHANGE = SubLObjectFactory.makeKeyword("LOCAL-CHANGE");
        $kw87$UPWARD_CLOSURE = SubLObjectFactory.makeKeyword("UPWARD-CLOSURE");
        $kw88$DOWNWARD_CLOSURE = SubLObjectFactory.makeKeyword("DOWNWARD-CLOSURE");
        $sym89$RELEVANT_MT_IS_SPEC_MT = SubLObjectFactory.makeSymbol("RELEVANT-MT-IS-SPEC-MT");
        $sym90$DEFAULT_NL_PREDS_FOR_TYPE_LIST = SubLObjectFactory.makeSymbol("DEFAULT-NL-PREDS-FOR-TYPE-LIST");
        $sym91$_DEFAULT_NL_PREDS_FOR_TYPE_LIST_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*DEFAULT-NL-PREDS-FOR-TYPE-LIST-CACHING-STATE*");
        $sym92$GET_INSTANCES_AS_RENDERINGS = SubLObjectFactory.makeSymbol("GET-INSTANCES-AS-RENDERINGS");
        $sym93$PPH_LIST_ITEM_COMPARATOR = SubLObjectFactory.makeSymbol("PPH-LIST-ITEM-COMPARATOR");
        $sym94$_GET_INSTANCES_AS_RENDERINGS_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-INSTANCES-AS-RENDERINGS-CACHING-STATE*");
        $sym95$GET_TERM_LIST_AS_RENDERINGS = SubLObjectFactory.makeSymbol("GET-TERM-LIST-AS-RENDERINGS");
        $const96$nonPlural_Generic = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic"));
        $sym97$GET_TERM_LIST_AS_RENDERINGS_WITH_FACT_SHEETS = SubLObjectFactory.makeSymbol("GET-TERM-LIST-AS-RENDERINGS-WITH-FACT-SHEETS");
        $kw98$MINI = SubLObjectFactory.makeKeyword("MINI");
        $list99 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("DISPLAY-TITLE?"), (SubLObject)api_widgets.NIL, (SubLObject)SubLObjectFactory.makeKeyword("PRINT-STATS?"), (SubLObject)api_widgets.NIL, (SubLObject)SubLObjectFactory.makeKeyword("SHOW-COPYRIGHT?"), (SubLObject)api_widgets.NIL);
        $list100 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("RENDERING"), (SubLObject)SubLObjectFactory.makeSymbol("TERM"));
        $str101$http____A__D_browse_uri__A_action = SubLObjectFactory.makeString("http://~A:~D/browse?uri=~A&action=resource");
        $sym102$GET_EXTERNAL_TERM_BROWSER_URL = SubLObjectFactory.makeSymbol("GET-EXTERNAL-TERM-BROWSER-URL");
        $sym103$_MT = SubLObjectFactory.makeSymbol("?MT");
        $sym104$_SERVER = SubLObjectFactory.makeSymbol("?SERVER");
        $sym105$_PORT = SubLObjectFactory.makeSymbol("?PORT");
        $const106$and = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("and"));
        $const107$mappingMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mappingMt"));
        $const108$ist = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ist"));
        $const109$serverOfSKS = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("serverOfSKS"));
        $list110 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RDFTripleStore-Physical")));
        $const111$portNumberForSKS = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("portNumberForSKS"));
        $const112$BaseKB = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"));
        $list113 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INFERENCE-MODE"), (SubLObject)SubLObjectFactory.makeKeyword("MINIMAL"), (SubLObject)SubLObjectFactory.makeKeyword("ANSWER-LANGUAGE"), (SubLObject)SubLObjectFactory.makeKeyword("HL"), (SubLObject)SubLObjectFactory.makeKeyword("MAX-NUMBER"), (SubLObject)api_widgets.ONE_INTEGER);
        $list114 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("HOSTNAME"), (SubLObject)SubLObjectFactory.makeSymbol("PORT"));
        $sym115$GET_TERM_LIST_AS_RENDERINGS_WITH_FACT_SHEETS_STRIPPED = SubLObjectFactory.makeSymbol("GET-TERM-LIST-AS-RENDERINGS-WITH-FACT-SHEETS-STRIPPED");
        $str116$_Fact_Sheet_ = SubLObjectFactory.makeString("[Fact Sheet]");
        $list117 = ConsesLow.list((SubLObject)Characters.CHAR_newline);
        $sym118$CONVERT_TERM_LIST_TO_RENDERINGS_FOR_JAVA = SubLObjectFactory.makeSymbol("CONVERT-TERM-LIST-TO-RENDERINGS-FOR-JAVA");
        $sym119$CONVERT_TERM_LIST_TO_RENDERINGS_FOR_JAVA_INT = SubLObjectFactory.makeSymbol("CONVERT-TERM-LIST-TO-RENDERINGS-FOR-JAVA-INT");
        $sym120$NULL = SubLObjectFactory.makeSymbol("NULL");
        $kw121$REQUIRED = SubLObjectFactory.makeKeyword("REQUIRED");
        $kw122$PREFERRED = SubLObjectFactory.makeKeyword("PREFERRED");
        $kw123$HTML = SubLObjectFactory.makeKeyword("HTML");
        $sym124$SALIENT_INSTANTIATION_EXEMPLARS = SubLObjectFactory.makeSymbol("SALIENT-INSTANTIATION-EXEMPLARS");
        $sym125$_ = SubLObjectFactory.makeSymbol(">");
        $sym126$NUM_INDEX = SubLObjectFactory.makeSymbol("NUM-INDEX");
        $sym127$GET_EXAMPLE_INSTANCES_AS_RENDERINGS_NEW = SubLObjectFactory.makeSymbol("GET-EXAMPLE-INSTANCES-AS-RENDERINGS-NEW");
        $sym128$GET_EXAMPLE_INSTANCES_AS_RENDERINGS = SubLObjectFactory.makeSymbol("GET-EXAMPLE-INSTANCES-AS-RENDERINGS");
        $sym129$_GET_EXAMPLE_INSTANCES_AS_RENDERINGS_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-EXAMPLE-INSTANCES-AS-RENDERINGS-CACHING-STATE*");
        $sym130$GET_SALIENT_EXEMPLARS = SubLObjectFactory.makeSymbol("GET-SALIENT-EXEMPLARS");
        $sym131$_GET_SALIENT_EXEMPLARS_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-SALIENT-EXEMPLARS-CACHING-STATE*");
        $sym132$GET_COLLECTION_EXTENT_ESTIMATES = SubLObjectFactory.makeSymbol("GET-COLLECTION-EXTENT-ESTIMATES");
        $sym133$RELEVANT_MT_IS_GENL_MT = SubLObjectFactory.makeSymbol("RELEVANT-MT-IS-GENL-MT");
        $int134$500 = SubLObjectFactory.makeInteger(500);
        $const135$Set_Mathematical = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Set-Mathematical"));
        $sym136$GET_COLLECTION_EXTENT_ESTIMATES_NEW = SubLObjectFactory.makeSymbol("GET-COLLECTION-EXTENT-ESTIMATES-NEW");
        $sym137$CREATE_NEW_INSTANCE_FROM_TEMPLATE = SubLObjectFactory.makeSymbol("CREATE-NEW-INSTANCE-FROM-TEMPLATE");
        $str138$ = SubLObjectFactory.makeString("");
        $sym139$KILL_CONSTANT = SubLObjectFactory.makeSymbol("KILL-CONSTANT");
        $sym140$KILL_FORT = SubLObjectFactory.makeSymbol("KILL-FORT");
        $sym141$FORT_P = SubLObjectFactory.makeSymbol("FORT-P");
        $list142 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("COLLECTION"), (SubLObject)SubLObjectFactory.makeSymbol("MT"));
        $sym143$_WHAT = SubLObjectFactory.makeSymbol("?WHAT");
        $list144 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("BINDINGS"), (SubLObject)SubLObjectFactory.makeSymbol("ASSERTION-LIST"));
        $sym145$GET_REFORMULATION_SPECIFICATION_FROM_KB = SubLObjectFactory.makeSymbol("GET-REFORMULATION-SPECIFICATION-FROM-KB");
        $sym146$_GET_REFORMULATION_SPECIFICATION_FROM_KB_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-REFORMULATION-SPECIFICATION-FROM-KB-CACHING-STATE*");
        $sym147$REFORMULATE_UNKNOWN_FET_TERM = SubLObjectFactory.makeSymbol("REFORMULATE-UNKNOWN-FET-TERM");
        $const148$FET_UnknownTermReformulation = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FET-UnknownTermReformulation"));
        $const149$FETReformulatorRulesMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("FETReformulatorRulesMt"));
        $const150$TKBEvaluatedSentencesMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBEvaluatedSentencesMt"));
        $sym151$MAKE_FET_EVALUATION_ASSERTION = SubLObjectFactory.makeSymbol("MAKE-FET-EVALUATION-ASSERTION");
        $sym152$CYCL_SENTENCE_P = SubLObjectFactory.makeSymbol("CYCL-SENTENCE-P");
        $sym153$FORT_OR_NAUT_P = SubLObjectFactory.makeSymbol("FORT-OR-NAUT-P");
        $sym154$PREDICATE_ = SubLObjectFactory.makeSymbol("PREDICATE?");
        $str155$EvaluationOfAssertionByOnFn = SubLObjectFactory.makeString("EvaluationOfAssertionByOnFn");
        $str156$Couldn_t_find_constant___Evaluati = SubLObjectFactory.makeString("Couldn't find constant #$EvaluationOfAssertionByOnFn.");
        $const157$evaluationOutputSentences = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("evaluationOutputSentences"));
        $str158$Couldn_t_remove_all_pre_existing_ = SubLObjectFactory.makeString("Couldn't remove all pre-existing evaluations because ");
        $str159$Evaluation = SubLObjectFactory.makeString("Evaluation");
        $list160 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Evaluating")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SingleDoerAction")));
        $str161$FET = SubLObjectFactory.makeString("FET");
        $sym162$_EVALUATION = SubLObjectFactory.makeSymbol("?EVALUATION");
        $list163 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("??TIMESTAMP"));
        $list164 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ANSWER-LANGUAGE"), (SubLObject)SubLObjectFactory.makeKeyword("HL"));
        $list165 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("??EVALUATOR"), (SubLObject)SubLObjectFactory.makeSymbol("??TIMESTAMP"));
        $sym166$ADD_OR_EDIT_ASSERTION_VERBOSE = SubLObjectFactory.makeSymbol("ADD-OR-EDIT-ASSERTION-VERBOSE");
        $sym167$ADD_OR_EDIT_ASSERTION = SubLObjectFactory.makeSymbol("ADD-OR-EDIT-ASSERTION");
        $sym168$EL_FORMULA_P = SubLObjectFactory.makeSymbol("EL-FORMULA-P");
        $sym169$CYCL_FORMULA_P = SubLObjectFactory.makeSymbol("CYCL-FORMULA-P");
        $str170$OLD____NEW__nothing_to_be_done_ = SubLObjectFactory.makeString("OLD == NEW, nothing to be done.");
        $const171$futureAssertion = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("futureAssertion"));
        $sym172$VALID_ASSERTION_ = SubLObjectFactory.makeSymbol("VALID-ASSERTION?");
        $str173$Assertion_deemed_invalid_ = SubLObjectFactory.makeString("Assertion deemed invalid.");
        $str174$No_such_sentence_to_unassert_ = SubLObjectFactory.makeString("No such sentence to unassert.");
        $str175$Couldn_t_kill_narts__ = SubLObjectFactory.makeString("Couldn't kill narts: ");
        $sym176$SKOLEM_NART_ = SubLObjectFactory.makeSymbol("SKOLEM-NART?");
        $str177$Future_assertion_only_possibility = SubLObjectFactory.makeString("Future assertion only possibility.");
        $sym178$_FUTURE_ASSERTION_COUNTER_ = SubLObjectFactory.makeSymbol("*FUTURE-ASSERTION-COUNTER*");
        $str179$unknown_reason = SubLObjectFactory.makeString("unknown reason");
        $str180$__D__replace__S_with__S__Reason__ = SubLObjectFactory.makeString("#~D: replace ~S with ~S (Reason: ~A)");
        $str181$__D___S_failed__Reason___A_ = SubLObjectFactory.makeString("#~D: ~S failed (Reason: ~A)");
        $list182 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("The")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Microtheory")));
        $list183 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ist")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ist-Intermediate")));
        $kw184$IGNORE_ERRORS_TARGET = SubLObjectFactory.makeKeyword("IGNORE-ERRORS-TARGET");
        $sym185$IGNORE_ERRORS_HANDLER = SubLObjectFactory.makeSymbol("IGNORE-ERRORS-HANDLER", "SUBLISP");
        $sym186$CAE_APPLICABLE_TEMPLATE_TOPICS_FOR_TERM = SubLObjectFactory.makeSymbol("CAE-APPLICABLE-TEMPLATE-TOPICS-FOR-TERM");
        $str187$54e34312_5181_11d7_87a9_0002b3620 = SubLObjectFactory.makeString("54e34312-5181-11d7-87a9-0002b3620a69");
        $const188$CAEUsableFETTemplateTopic = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CAEUsableFETTemplateTopic"));
        $sym189$GET_CAE_TEMPLATE_TOPICS = SubLObjectFactory.makeSymbol("GET-CAE-TEMPLATE-TOPICS");
        $const190$titleForFormulaTemplateType_Strin = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("titleForFormulaTemplateType-String"));
        $str191$_S = SubLObjectFactory.makeString("~S");
        $sym192$STRING_ = SubLObjectFactory.makeSymbol("STRING<");
        $list193 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("TEMPLATE"), (SubLObject)SubLObjectFactory.makeSymbol("STRING"));
        $sym194$GATHER_TEMPORAL_CONCEPTS_FOR_CAE = SubLObjectFactory.makeSymbol("GATHER-TEMPORAL-CONCEPTS-FOR-CAE");
        $sym195$CHLMT_P = SubLObjectFactory.makeSymbol("CHLMT-P");
        $list196 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("VAR"), (SubLObject)SubLObjectFactory.makeSymbol("COLS"));
        $const197$TemporallyExtendedThing = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TemporallyExtendedThing"));
        $sym198$GET_SHARED_COMMENTS = SubLObjectFactory.makeSymbol("GET-SHARED-COMMENTS");
        $sym199$RELEVANT_MT_IS_EVERYTHING = SubLObjectFactory.makeSymbol("RELEVANT-MT-IS-EVERYTHING");
        $const200$sharedNotes = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("sharedNotes"));
        $const201$comment = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comment"));
        $list202 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("SENTENCE"), (SubLObject)SubLObjectFactory.makeSymbol("ARG-POS"), (SubLObject)SubLObjectFactory.makeSymbol("CONSTRAINING-COLLECTION"), (SubLObject)SubLObjectFactory.makeSymbol("DOMAIN-MT"), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-FN")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym203$CLET = SubLObjectFactory.makeSymbol("CLET");
        $sym204$_PARSE_SENTENCE_CONTEXT_ = SubLObjectFactory.makeSymbol("*PARSE-SENTENCE-CONTEXT*");
        $sym205$_PARSE_ARG_POS_ = SubLObjectFactory.makeSymbol("*PARSE-ARG-POS*");
        $sym206$_PARSE_CONSTRAINING_COLLECTION_ = SubLObjectFactory.makeSymbol("*PARSE-CONSTRAINING-COLLECTION*");
        $sym207$_PARSE_DOMAIN_MT_ = SubLObjectFactory.makeSymbol("*PARSE-DOMAIN-MT*");
        $sym208$_PARSE_FILTER_FN_ = SubLObjectFactory.makeSymbol("*PARSE-FILTER-FN*");
        $const209$MtUnionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn"));
        $const210$EnglishMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt"));
        $const211$TKBSourceSpindleCollectorMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt"));
        $list212 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"));
        $const213$SpecsFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SpecsFn"));
        $str214$__ = SubLObjectFactory.makeString(", ");
        $sym215$RKF_FILTER_IRRELEVANT_TERMS = SubLObjectFactory.makeSymbol("RKF-FILTER-IRRELEVANT-TERMS");
        $sym216$_API_WIDGET_RETURN_NEW_CYCLS_SEPARATELY__ = SubLObjectFactory.makeSymbol("*API-WIDGET-RETURN-NEW-CYCLS-SEPARATELY?*");
        $sym217$GET_CONSTRAINED_CYCL_FOR_STRING = SubLObjectFactory.makeSymbol("GET-CONSTRAINED-CYCL-FOR-STRING");
        $sym218$ISA_COLLECTION_ = SubLObjectFactory.makeSymbol("ISA-COLLECTION?");
        $sym219$FILTER_CONSTRAINED_CYCLS = SubLObjectFactory.makeSymbol("FILTER-CONSTRAINED-CYCLS");
        $sym220$CYCL_EXPRESSION_P = SubLObjectFactory.makeSymbol("CYCL-EXPRESSION-P");
        $str221$Got_invalid_denotation_s__for__S_ = SubLObjectFactory.makeString("Got invalid denotation(s) for ~S: ~S");
        $sym222$STUB_TERM_WITH_NAME_AND_TYPE_P = SubLObjectFactory.makeSymbol("STUB-TERM-WITH-NAME-AND-TYPE-P");
        $kw223$TRANSFORMATION_LIMIT_EXCEEDED = SubLObjectFactory.makeKeyword("TRANSFORMATION-LIMIT-EXCEEDED");
        $sym224$INDEXICAL_REFERENT_TERM_P = SubLObjectFactory.makeSymbol("INDEXICAL-REFERENT-TERM-P");
        $sym225$CYC_INDEXICAL_REFERENT = SubLObjectFactory.makeSymbol("CYC-INDEXICAL-REFERENT");
        $sym226$CONVERT_STRING_CONSTRAINT_TUPLE_TO_DENOTATION = SubLObjectFactory.makeSymbol("CONVERT-STRING-CONSTRAINT-TUPLE-TO-DENOTATION");
        $const227$CharacterString = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CharacterString"));
        $const228$Predicate = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Predicate"));
        $const229$PredicateNamedFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PredicateNamedFn"));
        $const230$ProperSubcollectionNamedFn_Ternar = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ProperSubcollectionNamedFn-Ternary"));
        $const231$InstanceNamedFn_Ternary = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InstanceNamedFn-Ternary"));
        $list232 = ConsesLow.listS((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PredicateNamedFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubCollectionNamedFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InstanceNamedFn"))), (SubLObject)SubLObjectFactory.makeKeyword("STRING"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"));
        $const233$EnglishTypeCoercionDataMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishTypeCoercionDataMt"));
        $sym234$GET_CYCLS_FOR_STRING_ESCALATING = SubLObjectFactory.makeSymbol("GET-CYCLS-FOR-STRING-ESCALATING");
        $kw235$TRUE = SubLObjectFactory.makeKeyword("TRUE");
        $kw236$CASE_INSENSITIVE = SubLObjectFactory.makeKeyword("CASE-INSENSITIVE");
        $kw237$FALSE = SubLObjectFactory.makeKeyword("FALSE");
        $kw238$REGULAR_EXPRESSIONS = SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS");
        $str239$________regular_expressions__A__ = SubLObjectFactory.makeString("        regular expressions ~A~%");
        $kw240$ON = SubLObjectFactory.makeKeyword("ON");
        $kw241$OFF = SubLObjectFactory.makeKeyword("OFF");
        $list242 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ACRONYMS"));
        $str243$_________typed_denots_of_string__ = SubLObjectFactory.makeString("         typed-denots-of-string '~A' with type ~A~%");
        $kw244$DENOT = SubLObjectFactory.makeKeyword("DENOT");
        $list245 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ABBREVS"), (SubLObject)SubLObjectFactory.makeKeyword("ACRONYMS"));
        $str246$__________typed_denots_of_string_ = SubLObjectFactory.makeString("          typed-denots-of-string with abbreviations: '~A'~%");
        $str247$___________parse_dates_and_number = SubLObjectFactory.makeString("           parse-dates-and-numbers: '~A'~%");
        $str248$____________parse_noun_compound_w = SubLObjectFactory.makeString("            parse-noun-compound-with-types: '~A'~%");
        $str249$_____________parse_noun_compound_ = SubLObjectFactory.makeString("            (parse-noun-compound-with-types ~S ~S ~S ~S ~S)~%");
        $str250$_____________get_constrained_exte = SubLObjectFactory.makeString("             get-constrained-extended-cycls-for-string: '~A'~%");
        $const251$EnglishSenseExtensionDataMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishSenseExtensionDataMt"));
        $str252$______________get_coerced_cycls_f = SubLObjectFactory.makeString("              get-coerced-cycls-for-string: '~A'~%");
        $str253$_______________get_coerced_cycls_ = SubLObjectFactory.makeString("              (get-coerced-cycls-for-string ~S ~S ~S ~S)~%");
        $str254$_______________get_constrained_cy = SubLObjectFactory.makeString("               get-constrained-cycls-for-regular-expression: '~A'~%");
        $str255$_______________get_constrained_cy = SubLObjectFactory.makeString("               get-constrained-cycls-from-generation: '~A'~%");
        $sym256$PARSING_REWRITE_OF_ = SubLObjectFactory.makeSymbol("PARSING-REWRITE-OF?");
        $sym257$GET_EXTENDED_CYCLS_FOR_STRING = SubLObjectFactory.makeSymbol("GET-EXTENDED-CYCLS-FOR-STRING");
        $kw258$REF = SubLObjectFactory.makeKeyword("REF");
        $const259$senseExtensionForNameString = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("senseExtensionForNameString"));
        $kw260$MAX_TIME = SubLObjectFactory.makeKeyword("MAX-TIME");
        $list261 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("PROBABLY-APPROXIMATELY-DONE"), (SubLObject)SubLObjectFactory.makeDouble(1.0), (SubLObject)SubLObjectFactory.makeKeyword("ANSWER-LANGUAGE"), (SubLObject)SubLObjectFactory.makeKeyword("HL"), (SubLObject)SubLObjectFactory.makeKeyword("MAX-TRANSFORMATION-DEPTH"), (SubLObject)api_widgets.ONE_INTEGER);
        $sym262$_GET_EXTENDED_CYCLS_FOR_STRING_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-EXTENDED-CYCLS-FOR-STRING-CACHING-STATE*");
        $int263$300 = SubLObjectFactory.makeInteger(300);
        $int264$100 = SubLObjectFactory.makeInteger(100);
        $sym265$GET_COERCED_CYCLS_FOR_TERM = SubLObjectFactory.makeSymbol("GET-COERCED-CYCLS-FOR-TERM");
        $const266$typeCoerceableToType = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("typeCoerceableToType"));
        $list267 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("REF"));
        $sym268$_GET_COERCED_CYCLS_FOR_TERM_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-COERCED-CYCLS-FOR-TERM-CACHING-STATE*");
        $const269$SententialConstituent = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SententialConstituent"));
        $const270$nounStrings = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nounStrings"));
        $kw271$BREADTH = SubLObjectFactory.makeKeyword("BREADTH");
        $kw272$QUEUE = SubLObjectFactory.makeKeyword("QUEUE");
        $kw273$STACK = SubLObjectFactory.makeKeyword("STACK");
        $sym274$RELEVANT_SBHL_TV_IS_GENERAL_TV = SubLObjectFactory.makeSymbol("RELEVANT-SBHL-TV-IS-GENERAL-TV");
        $kw275$ERROR = SubLObjectFactory.makeKeyword("ERROR");
        $str276$_A_is_not_a__A = SubLObjectFactory.makeString("~A is not a ~A");
        $sym277$SBHL_TRUE_TV_P = SubLObjectFactory.makeSymbol("SBHL-TRUE-TV-P");
        $kw278$CERROR = SubLObjectFactory.makeKeyword("CERROR");
        $str279$continue_anyway = SubLObjectFactory.makeString("continue anyway");
        $kw280$WARN = SubLObjectFactory.makeKeyword("WARN");
        $str281$_A_is_not_a_valid__sbhl_type_erro = SubLObjectFactory.makeString("~A is not a valid *sbhl-type-error-action* value");
        $str282$_A_is_neither_SET_P_nor_LISTP_ = SubLObjectFactory.makeString("~A is neither SET-P nor LISTP.");
        $str283$attempting_to_bind_direction_link = SubLObjectFactory.makeString("attempting to bind direction link variable, to NIL. macro body not executed.");
        $list284 = ConsesLow.list((SubLObject)SubLObjectFactory.makeUninternedSymbol("LINK-NODE"), (SubLObject)SubLObjectFactory.makeUninternedSymbol("MT"), (SubLObject)SubLObjectFactory.makeUninternedSymbol("TV"));
        $str285$Node__a_does_not_pass_sbhl_type_t = SubLObjectFactory.makeString("Node ~a does not pass sbhl-type-test ~a~%");
        $int286$5000000 = SubLObjectFactory.makeInteger(5000000);
        $sym287$GET_CONSTRAINED_CYCLS_FOR_REGULAR_EXPRESSION = SubLObjectFactory.makeSymbol("GET-CONSTRAINED-CYCLS-FOR-REGULAR-EXPRESSION");
        $list288 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASELESS"));
        $str289$Error__A___A__compiling_regular_e = SubLObjectFactory.makeString("Error ~A (~A) compiling regular expression ~S at offset ~A.");
        $sym290$_NAME = SubLObjectFactory.makeSymbol("?NAME");
        $const291$termStrings = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("termStrings"));
        $kw292$PROBLEM_STORE = SubLObjectFactory.makeKeyword("PROBLEM-STORE");
        $kw293$ANSWER_LANGUAGE = SubLObjectFactory.makeKeyword("ANSWER-LANGUAGE");
        $kw294$HL = SubLObjectFactory.makeKeyword("HL");
        $list295 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CANDIDATE"), (SubLObject)SubLObjectFactory.makeSymbol("NAME"));
        $const296$knownSentence = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("knownSentence"));
        $const297$unknownSentence = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unknownSentence"));
        $const298$regexStringMatch_CaseInsensitive = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("regexStringMatch-CaseInsensitive"));
        $const299$regexStringMatch = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("regexStringMatch"));
        $sym300$FILTER_PHRASE_TERM_LIST_BY_CONSTRAINT_LIST = SubLObjectFactory.makeSymbol("FILTER-PHRASE-TERM-LIST-BY-CONSTRAINT-LIST");
        $list301 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PHRASE"), (SubLObject)SubLObjectFactory.makeSymbol("TERM-DENOTED"));
        $sym302$FILTER_CYCL_TERM_BY_CONSTRAINT_LIST = SubLObjectFactory.makeSymbol("FILTER-CYCL-TERM-BY-CONSTRAINT-LIST");
        $const303$TheSet = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheSet"));
        $sym304$AUTO_COMPLETE_CONSTRAINED = SubLObjectFactory.makeSymbol("AUTO-COMPLETE-CONSTRAINED");
        $sym305$AUTO_COMPLETE_TERM_QUICK = SubLObjectFactory.makeSymbol("AUTO-COMPLETE-TERM-QUICK");
        $sym306$INTEGERP = SubLObjectFactory.makeSymbol("INTEGERP");
        $const307$plural = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("plural"));
        $const308$gerund_Plural = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("gerund-Plural"));
        $sym309$AUTO_COMPLETE_CONSTRAINED_NEW = SubLObjectFactory.makeSymbol("AUTO-COMPLETE-CONSTRAINED-NEW");
        $const310$singular = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("singular"));
        $sym311$GET_STRING_FROM_JAVALIST_GROUP = SubLObjectFactory.makeSymbol("GET-STRING-FROM-JAVALIST-GROUP");
        $sym312$FIND_TEMPLATE_TOPIC_MATCHES_FOR_CONSTRAINT = SubLObjectFactory.makeSymbol("FIND-TEMPLATE-TOPIC-MATCHES-FOR-CONSTRAINT");
        $sym313$POSSIBLY_HLMT_P = SubLObjectFactory.makeSymbol("POSSIBLY-HLMT-P");
        $sym314$PROPERTY_LIST_P = SubLObjectFactory.makeSymbol("PROPERTY-LIST-P");
        $list315 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InstanceNamedFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubCollectionNamedFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CollectionNamedFn")));
        $sym316$GET_TEMPLATE_TOPIC_ASSERTIONS_FOR_MATCH_IN_XML = SubLObjectFactory.makeSymbol("GET-TEMPLATE-TOPIC-ASSERTIONS-FOR-MATCH-IN-XML");
        $sym317$FORMULA_TEMPLATE_TOPIC_TYPE_ = SubLObjectFactory.makeSymbol("FORMULA-TEMPLATE-TOPIC-TYPE?");
        $str318$knownAssertionsForTemplateTopic = SubLObjectFactory.makeString("knownAssertionsForTemplateTopic");
        $str319$http___www_opencyc_org_xml_knownA = SubLObjectFactory.makeString("http://www.opencyc.org/xml/knownAssertionsForTemplateTopic.dtd");
        $sym320$SET_P = SubLObjectFactory.makeSymbol("SET-P");
        $sym321$FORMULA_TEMPLATE_LOAD_TEMPLATE_GRAPH_MEMOIZED = SubLObjectFactory.makeSymbol("FORMULA-TEMPLATE-LOAD-TEMPLATE-GRAPH-MEMOIZED");
        $sym322$ASSERT_CANDIDATE_REPLACEMENTS_FOR_POSITION = SubLObjectFactory.makeSymbol("ASSERT-CANDIDATE-REPLACEMENTS-FOR-POSITION");
        $const323$QueryLibrary_QuerySavingTemplate = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("QueryLibrary-QuerySavingTemplate"));
        $const324$candidateReplacementForPosition = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("candidateReplacementForPosition"));
        $sym325$CREATE_MINIMAL_FORMULA_TEMPLATE_WITH_QUERY = SubLObjectFactory.makeSymbol("CREATE-MINIMAL-FORMULA-TEMPLATE-WITH-QUERY");
        $const326$formulaTemplateGloss = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("formulaTemplateGloss"));
        $const327$microtheoryParameterValueInSpecif = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("microtheoryParameterValueInSpecification"));
        $const328$folderContainsResource = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("folderContainsResource"));
        $str329$All_KB_Operations_completed_succe = SubLObjectFactory.makeString("All KB Operations completed successfully.");
        $sym330$CREATE_MINIMAL_FORMULA_TEMPLATE_WITH_QUERY_INCLUDE_INFERENCE = SubLObjectFactory.makeSymbol("CREATE-MINIMAL-FORMULA-TEMPLATE-WITH-QUERY-INCLUDE-INFERENCE");
        $sym331$ASSERT_UPDATED_INFERENCE_PARAMETERS_FOR_QUERY = SubLObjectFactory.makeSymbol("ASSERT-UPDATED-INFERENCE-PARAMETERS-FOR-QUERY");
        $const332$QueryLibraryQueryCreationTemplate = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("QueryLibraryQueryCreationTemplateMt"));
        $const333$creationTemplateAllowableRules = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("creationTemplateAllowableRules"));
        $sym334$COMBINE_QUERY_PROPERTIES = SubLObjectFactory.makeSymbol("COMBINE-QUERY-PROPERTIES");
        $sym335$EDIT_QUERY_GLOSS = SubLObjectFactory.makeSymbol("EDIT-QUERY-GLOSS");
        $const336$TimePoint = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimePoint"));
        $const337$MtSpace = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtSpace"));
        $const338$MtTimeWithGranularityDimFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtTimeWithGranularityDimFn"));
        $const339$IntervalStartedByFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("IntervalStartedByFn"));
        $str340$Failed_to_temporally_qualify__S__ = SubLObjectFactory.makeString("Failed to temporally qualify ~S~%");
        $str341$Failed_to_assert_new_gloss__A__A_ = SubLObjectFactory.makeString("Failed to assert new gloss ~A:~A~%");
        $str342$Gloss_edit_completed_successfully = SubLObjectFactory.makeString("Gloss edit completed successfully.");
        $const343$IntervalEndedByFn_Inclusive = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("IntervalEndedByFn-Inclusive"));
        $const344$TimeIntervalInclusiveFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeIntervalInclusiveFn"));
        $const345$Now = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Now"));
        $list346 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("BINDING"), (SubLObject)SubLObjectFactory.makeSymbol("SUPPORTS"));
        $sym347$CREATE_NEW_FORMULA_TEMPLATE_WITH_QUERY = SubLObjectFactory.makeSymbol("CREATE-NEW-FORMULA-TEMPLATE-WITH-QUERY");
        $str348$ClonedQuery = SubLObjectFactory.makeString("ClonedQuery");
        $list349 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("KBContentTest-FullySpecified")));
        $const350$UniversalVocabularyMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("UniversalVocabularyMt"));
        $const351$quotedIsa = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("quotedIsa"));
        $const352$TestQueryFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TestQueryFn"));
        $list353 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TestQueryConstant")));
        $const354$TemplateFromTestQueryFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TemplateFromTestQueryFn"));
        $list355 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Individual")));
        $sym356$MAKE_MULTIPLE_ASSERTIONS_TO_MT = SubLObjectFactory.makeSymbol("MAKE-MULTIPLE-ASSERTIONS-TO-MT");
        $sym357$API_WIDGETS_ASSERT_WFF_NOW = SubLObjectFactory.makeSymbol("API-WIDGETS-ASSERT-WFF-NOW");
        $sym358$KE_ASSERT_NOW = SubLObjectFactory.makeSymbol("KE-ASSERT-NOW");
        $str359$Error_asserting_sentence___A__Got = SubLObjectFactory.makeString("Error asserting sentence: ~A~%Got error: ~A~%");
        $str360$Got_bad_CycL_sentence___A__becaus = SubLObjectFactory.makeString("Got bad CycL sentence: ~A~%because: ~A~%");
        $kw361$STRENGTH = SubLObjectFactory.makeKeyword("STRENGTH");
        $kw362$DIRECTION = SubLObjectFactory.makeKeyword("DIRECTION");
        $sym363$_EXIT = SubLObjectFactory.makeSymbol("%EXIT");
        $sym364$MAKE_MULTIPLE_ASSERTIONS_TO_MT_WITH_CREATION_TEMPLATE = SubLObjectFactory.makeSymbol("MAKE-MULTIPLE-ASSERTIONS-TO-MT-WITH-CREATION-TEMPLATE");
        $sym365$MAIL_TO_USER = SubLObjectFactory.makeSymbol("MAIL-TO-USER");
        $str366$Unable_to_find_address_for__A = SubLObjectFactory.makeString("Unable to find address for ~A");
        $sym367$MAIL_TO_USER_WITH_CONTENT_TYPE = SubLObjectFactory.makeSymbol("MAIL-TO-USER-WITH-CONTENT-TYPE");
        $sym368$CYCLIST_DEFINED_INSTANCES_OF_COL = SubLObjectFactory.makeSymbol("CYCLIST-DEFINED-INSTANCES-OF-COL");
        $int369$75 = SubLObjectFactory.makeInteger(75);
        $sym370$CYCLIST_DEFINED_SPECS_OF_COL = SubLObjectFactory.makeSymbol("CYCLIST-DEFINED-SPECS-OF-COL");
        $sym371$GET_TEMPLATE_TOPIC_IN_XML = SubLObjectFactory.makeSymbol("GET-TEMPLATE-TOPIC-IN-XML");
        $const372$definingMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("definingMt"));
        $str373$templateTopic = SubLObjectFactory.makeString("templateTopic");
        $str374$http___www_opencyc_org_xml_templa = SubLObjectFactory.makeString("http://www.opencyc.org/xml/templateTopic.dtd");
        $sym375$GET_FORMULA_TEMPLATE_IN_XML = SubLObjectFactory.makeSymbol("GET-FORMULA-TEMPLATE-IN-XML");
        $str376$formulaTemplate = SubLObjectFactory.makeString("formulaTemplate");
        $const377$softwareParameterValueInSpecifica = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("softwareParameterValueInSpecification"));
        $const378$KEInteractionResourceTestMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("KEInteractionResourceTestMt"));
        $sym379$GET_CYCL_QUERY_IN_XML_FROM_DEFAULT_MT = SubLObjectFactory.makeSymbol("GET-CYCL-QUERY-IN-XML-FROM-DEFAULT-MT");
        $sym380$GET_CYCL_QUERY_IN_XML = SubLObjectFactory.makeSymbol("GET-CYCL-QUERY-IN-XML");
        $str381$cyclQuery = SubLObjectFactory.makeString("cyclQuery");
        $str382$http___www_opencyc_org_xml_cyclQu = SubLObjectFactory.makeString("http://www.opencyc.org/xml/cyclQuery.dtd");
        $sym383$GET_FORMULA_TEMPLATE_FOR_FACT_OR_QUERY_IN_XML_FROM_DEFAULT_MT = SubLObjectFactory.makeSymbol("GET-FORMULA-TEMPLATE-FOR-FACT-OR-QUERY-IN-XML-FROM-DEFAULT-MT");
        $sym384$GET_FORMULA_TEMPLATE_FOR_FACT_OR_QUERY_IN_XML = SubLObjectFactory.makeSymbol("GET-FORMULA-TEMPLATE-FOR-FACT-OR-QUERY-IN-XML");
        $sym385$PROCESS_FEEDBACK = SubLObjectFactory.makeSymbol("PROCESS-FEEDBACK");
        $const386$createABugzillaBugReport = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("createABugzillaBugReport"));
        $str387$_response_for_query__ = SubLObjectFactory.makeString(" response for query: ");
        $str388$Query__ = SubLObjectFactory.makeString("Query: ");
        $str389$Query_Formula__ = SubLObjectFactory.makeString("Query Formula: ");
        $str390$Bindings__ = SubLObjectFactory.makeString("Bindings: ");
        $str391$User_Comments__ = SubLObjectFactory.makeString("User Comments: ");
        $str392$Java_Log__ = SubLObjectFactory.makeString("Java Log: ");
        $str393$___ = SubLObjectFactory.makeString("   ");
        $str394$__ = SubLObjectFactory.makeString(": ");
        $const395$bugzillaProductForProject = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bugzillaProductForProject"));
        $const396$CycorpInternalBugzillaBugReport = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CycorpInternalBugzillaBugReport"));
        $sym397$GET_POSSIBLE_RENDERERS_FOR_FOLLOWUP = SubLObjectFactory.makeSymbol("GET-POSSIBLE-RENDERERS-FOR-FOLLOWUP");
        $kw398$INTERROGATIVE = SubLObjectFactory.makeKeyword("INTERROGATIVE");
        $sym399$GET_POSSIBLE_RENDERERS_FOR_FOLLOWUP_INT = SubLObjectFactory.makeSymbol("GET-POSSIBLE-RENDERERS-FOR-FOLLOWUP-INT");
        $list400 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("SENTENCE1"), (SubLObject)SubLObjectFactory.makeSymbol("SENTENCE2"));
        $sym401$_GET_POSSIBLE_RENDERERS_FOR_FOLLOWUP_INT_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*GET-POSSIBLE-RENDERERS-FOR-FOLLOWUP-INT-CACHING-STATE*");
        $sym402$UNIQUIFY_VARIABLES_ACROSS_TWO_SENTENCES = SubLObjectFactory.makeSymbol("UNIQUIFY-VARIABLES-ACROSS-TWO-SENTENCES");
        $sym403$CHANGE_VARIABLE_NAMES = SubLObjectFactory.makeSymbol("CHANGE-VARIABLE-NAMES");
        $sym404$GENERALITY_SORT_LAMBDA = SubLObjectFactory.makeSymbol("GENERALITY-SORT-LAMBDA");
        $sym405$GET_POSSIBLE_MERGED_QUERIES = SubLObjectFactory.makeSymbol("GET-POSSIBLE-MERGED-QUERIES");
        $sym406$GET_POSSIBLE_MERGED_QUERIES_WRT_VAR = SubLObjectFactory.makeSymbol("GET-POSSIBLE-MERGED-QUERIES-WRT-VAR");
        $sym407$GET_SOURCE_CONCEPTUAL_WORKS_FOR_PROJECT = SubLObjectFactory.makeSymbol("GET-SOURCE-CONCEPTUAL-WORKS-FOR-PROJECT");
        $list408 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeKeyword("PARAPHRASED-CW-TYPE"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"));
        $kw409$PARAPHRASED_CW_TYPE = SubLObjectFactory.makeKeyword("PARAPHRASED-CW-TYPE");
        $kw410$ANYTHING = SubLObjectFactory.makeKeyword("ANYTHING");
        $sym411$PARAPHRASED_SOURCE_SOURCE = SubLObjectFactory.makeSymbol("PARAPHRASED-SOURCE-SOURCE");
        $str412$sourceOfTypeForProject = SubLObjectFactory.makeString("sourceOfTypeForProject");
        $list413 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("SOURCE"), (SubLObject)SubLObjectFactory.makeSymbol("SOURCE-TYPE"), (SubLObject)SubLObjectFactory.makeSymbol("TYPE-TYPE"), (SubLObject)SubLObjectFactory.makeSymbol("PROJECT"));
        $sym414$ADD_SOURCE_OF_TYPE_FOR_PROJECT = SubLObjectFactory.makeSymbol("ADD-SOURCE-OF-TYPE-FOR-PROJECT");
        $sym415$REMOVE_SOURCE_OF_TYPE_FOR_PROJECT = SubLObjectFactory.makeSymbol("REMOVE-SOURCE-OF-TYPE-FOR-PROJECT");
        $sym416$_FET_CATEGORIZED_SOURCES_ = SubLObjectFactory.makeSymbol("*FET-CATEGORIZED-SOURCES*");
        $kw417$UNINITIALIZED = SubLObjectFactory.makeKeyword("UNINITIALIZED");
        $kw418$NOT_FOUND = SubLObjectFactory.makeKeyword("NOT-FOUND");
        $str419$Initializing_Fact_Entry_Tool_sour = SubLObjectFactory.makeString("Initializing Fact Entry Tool sources...");
        $const420$Project = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Project"));
        $kw421$GAF = SubLObjectFactory.makeKeyword("GAF");
        $list422 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("SOURCE"), (SubLObject)SubLObjectFactory.makeSymbol("SOURCE-TYPE"), (SubLObject)SubLObjectFactory.makeSymbol("TYPE-TYPE"));
        $sym423$_CW = SubLObjectFactory.makeSymbol("?CW");
        $sym424$_CW_TYPE = SubLObjectFactory.makeSymbol("?CW-TYPE");
        $const425$projectSource_FactEntry = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("projectSource-FactEntry"));
        $list426 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertedSentence")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeSymbol("?CW"), (SubLObject)SubLObjectFactory.makeSymbol("?CW-TYPE")));
        $list427 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?CW-TYPE"), (SubLObject)SubLObjectFactory.makeSymbol("?CW"));
        $list428 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CW-TYPE"), (SubLObject)SubLObjectFactory.makeSymbol("CW"));
        $sym429$GET_LISP_IMPLEMENTATION_TYPE = SubLObjectFactory.makeSymbol("GET-LISP-IMPLEMENTATION-TYPE");
        $sym430$GET_LISP_IMPLEMENTATION_VERSION = SubLObjectFactory.makeSymbol("GET-LISP-IMPLEMENTATION-VERSION");
        $sym431$RECONSIDER_TEMPLATE_FORMULA_USING_TMS = SubLObjectFactory.makeSymbol("RECONSIDER-TEMPLATE-FORMULA-USING-TMS");
        $str432$_ASSERTION_SENTENCE_908234 = SubLObjectFactory.makeString("?ASSERTION-SENTENCE-908234");
        $const433$assertionSentence = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("assertionSentence"));
        $sym434$RTV_WIZARD_DEFAULT_PREDICATES = SubLObjectFactory.makeSymbol("RTV-WIZARD-DEFAULT-PREDICATES");
        $sym435$_Y = SubLObjectFactory.makeSymbol("?Y");
        $list436 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("elementOf")), (SubLObject)SubLObjectFactory.makeSymbol("?Y"), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheSet")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("performedBy")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("hasMembers")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("affiliatedWith")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relatives")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("teacherOf")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("religiousTeacherOf")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("actors")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("linked")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("stagesEvent")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("hasLeaders")) }));
        $list437 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INFERENCE-MODE"), (SubLObject)SubLObjectFactory.makeKeyword("MINIMAL"));
        $sym438$COLLECTION_CREATION_TEMPLATE = SubLObjectFactory.makeSymbol("COLLECTION-CREATION-TEMPLATE");
        $str439$8665a79e_80ca_11db_8000_0020ed7aa = SubLObjectFactory.makeString("8665a79e-80ca-11db-8000-0020ed7aa09b");
        $sym440$_COLLECTION_CREATION_TEMPLATE_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*COLLECTION-CREATION-TEMPLATE-CACHING-STATE*");
        $sym441$CREATE_COLLECTION_FROM_SET = SubLObjectFactory.makeSymbol("CREATE-COLLECTION-FROM-SET");
        $list442 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CAEUserCreatedCollection")));
        $const443$nameString = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nameString"));
        $sym444$CREATE_COLLECTION_FROM_ENUMERATED_TERMS = SubLObjectFactory.makeSymbol("CREATE-COLLECTION-FROM-ENUMERATED-TERMS");
        $str445$UserCreatedCollection = SubLObjectFactory.makeString("UserCreatedCollection");
        $kw446$COMPUTE = SubLObjectFactory.makeKeyword("COMPUTE");
        $sym447$VALID_TERM_FOR_ENUMERATED_COLLECTION_ = SubLObjectFactory.makeSymbol("VALID-TERM-FOR-ENUMERATED-COLLECTION?");
        $const448$completelyAssertedCollection = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("completelyAssertedCollection"));
        $sym449$ADD_TO_COLLECTION_FROM_ENUMERATED_TERMS = SubLObjectFactory.makeSymbol("ADD-TO-COLLECTION-FROM-ENUMERATED-TERMS");
        $sym450$VALID_TERM_QUA_INFERENCE_BINDING_P = SubLObjectFactory.makeSymbol("VALID-TERM-QUA-INFERENCE-BINDING-P");
        $sym451$RESOLVE_TERM_QUA_INFERENCE_BINDING = SubLObjectFactory.makeSymbol("RESOLVE-TERM-QUA-INFERENCE-BINDING");
        $sym452$INDEXED_TERM_P = SubLObjectFactory.makeSymbol("INDEXED-TERM-P");
        $list453 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("FIRST-TERM"), (SubLObject)SubLObjectFactory.makeSymbol("REMAINING-TERMS"));
        $list454 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing")));
        $sym455$FIND_EXTERNAL_AIS_TERMS_IN_INFERENCE = SubLObjectFactory.makeSymbol("FIND-EXTERNAL-AIS-TERMS-IN-INFERENCE");
        $sym456$NON_NEGATIVE_INTEGER_P = SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P");
        $kw457$SKIP = SubLObjectFactory.makeKeyword("SKIP");
        $list458 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("VARIABLE"), (SubLObject)SubLObjectFactory.makeSymbol("VALUE"));
        $sym459$FIND_EXTERNAL_AIS_TERMS = SubLObjectFactory.makeSymbol("FIND-EXTERNAL-AIS-TERMS");
        $const460$synonymousExternalConcept = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("synonymousExternalConcept"));
        $list461 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("IGNORE-ME"), (SubLObject)SubLObjectFactory.makeSymbol("AIS"), (SubLObject)SubLObjectFactory.makeSymbol("ID"));
        $list462 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("STORE-ID"), (SubLObject)SubLObjectFactory.makeSymbol("INF-ID"), (SubLObject)SubLObjectFactory.makeSymbol("ANS-ID"), (SubLObject)SubLObjectFactory.makeSymbol("VAR"));
        $sym463$VARIABLE_ISA_CONSTRAINTS_MEMOIZED = SubLObjectFactory.makeSymbol("VARIABLE-ISA-CONSTRAINTS-MEMOIZED");
        $sym464$FORMULA_VARIABLE_ARG_CONSTRAINT_TABLE = SubLObjectFactory.makeSymbol("FORMULA-VARIABLE-ARG-CONSTRAINT-TABLE");
        $list465 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("BIND"), (SubLObject)SubLObjectFactory.makeSymbol("VAR")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("BIND"), (SubLObject)SubLObjectFactory.makeSymbol("COL")));
        $sym466$COL = SubLObjectFactory.makeSymbol("COL");
        $sym467$VAR = SubLObjectFactory.makeSymbol("VAR");
        $list468 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genls")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("BIND"), (SubLObject)SubLObjectFactory.makeSymbol("VAR")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("BIND"), (SubLObject)SubLObjectFactory.makeSymbol("COL")));
        $list469 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INFERENCE-BINDING"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("CYC-VAR?")));
        $sym470$NEW_CYC_QUERIES = SubLObjectFactory.makeSymbol("NEW-CYC-QUERIES");
        $list471 = ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("implies")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("and")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genls")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genlPreds")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("equals")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("different")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("arg1Isa")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("arg2Isa")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("coExtensional")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("disjointWith")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExists")) });
        $sym472$GATHER_FILTERED_EL_RULE_ASSERTIONS_FOR_TERM = SubLObjectFactory.makeSymbol("GATHER-FILTERED-EL-RULE-ASSERTIONS-FOR-TERM");
        $sym473$CONSP = SubLObjectFactory.makeSymbol("CONSP");
        $sym474$GATHER_SET_FILTERED_EL_RULE_ASSERTIONS_FOR_TERM = SubLObjectFactory.makeSymbol("GATHER-SET-FILTERED-EL-RULE-ASSERTIONS-FOR-TERM");
        $list475 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("pragmaticRequirement")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("meetsPragmaticRequirement")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("abnormal")));
        $sym476$ASSERTION_P = SubLObjectFactory.makeSymbol("ASSERTION-P");
        $const477$abnormal = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("abnormal"));
        $const478$implies = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("implies"));
        $str479$invalid_rule_antecedant__A = SubLObjectFactory.makeString("invalid rule antecedant ~A");
        $str480$invalid_rule_consequent__A = SubLObjectFactory.makeString("invalid rule consequent ~A");
        $const481$relationInstanceExists = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("relationInstanceExists"));
        $sym482$CONSTANTIFY_EXISTENTIALS_AND_OPEN_VARS = SubLObjectFactory.makeSymbol("CONSTANTIFY-EXISTENTIALS-AND-OPEN-VARS");
        $sym483$EL_EXISTENTIAL_P = SubLObjectFactory.makeSymbol("EL-EXISTENTIAL-P");
        $sym484$FORMULA_ARG2 = SubLObjectFactory.makeSymbol("FORMULA-ARG2");
        $kw485$ASCENDING = SubLObjectFactory.makeKeyword("ASCENDING");
        $str486$_spec = SubLObjectFactory.makeString("-spec");
        $sym487$GUID_STRING_P = SubLObjectFactory.makeSymbol("GUID-STRING-P");
        $sym488$DUMMIFY_GUID_STRING = SubLObjectFactory.makeSymbol("DUMMIFY-GUID-STRING");
        $kw489$GUID_STRING = SubLObjectFactory.makeKeyword("GUID-STRING");
        $sym490$TEST_TEMPLATE_TOPIC_MATCH_FINDER = SubLObjectFactory.makeSymbol("TEST-TEMPLATE-TOPIC-MATCH-FINDER");
        $kw491$TEST = SubLObjectFactory.makeKeyword("TEST");
        $kw492$OWNER = SubLObjectFactory.makeKeyword("OWNER");
        $kw493$CLASSES = SubLObjectFactory.makeKeyword("CLASSES");
        $kw494$KB = SubLObjectFactory.makeKeyword("KB");
        $kw495$FULL = SubLObjectFactory.makeKeyword("FULL");
        $kw496$WORKING_ = SubLObjectFactory.makeKeyword("WORKING?");
        $list497 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBTemplate-Individual")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKB-GKE-TestMt")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt"))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("temporallySubsumes")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SomeTimeInIntervalFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DecadeFn")), (SubLObject)SubLObjectFactory.makeInteger(199)), (SubLObject)SubLObjectFactory.makeString("e235fd00-10a4-41d9-8612-85cd130d8ba6")), (SubLObject)SubLObjectFactory.makeSymbol("?DATE0")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ist-Intermediate")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtSpace")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("The")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Microtheory"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtTimeWithGranularityDimFn")), (SubLObject)SubLObjectFactory.makeSymbol("?DATE0"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimePoint")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("objectFoundInLocation")), (SubLObject)SubLObjectFactory.makeSymbol("?X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ContinentOfEurope"))))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Terrorist-Fawwaz"))), (SubLObject)SubLObjectFactory.makeInteger(14564)), (SubLObject)api_widgets.T));
        $str498$Missing_binding__S = SubLObjectFactory.makeString("Missing binding ~S");
        $str499$Regression_on_bug__S = SubLObjectFactory.makeString("Regression on bug ~S");
        $sym500$TEST_TERM_FILTERING_PASSES_FILTER = SubLObjectFactory.makeSymbol("TEST-TERM-FILTERING-PASSES-FILTER");
        $list501 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HumanNameString"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), (SubLObject)SubLObjectFactory.makeString("bin Laden")), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ProperNameString"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), (SubLObject)SubLObjectFactory.makeString("bin Laden")), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Person"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Lenat"))), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeInterval"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("YearFn")), (SubLObject)SubLObjectFactory.makeInteger(2002))), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("quotedIsa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CycLIndexedTerm"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa"))), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeScalarInterval"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Meter")), (SubLObject)api_widgets.TWO_INTEGER)), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Date"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("YearFn")), (SubLObject)SubLObjectFactory.makeInteger(1997))), (SubLObject)api_widgets.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HumanNameString"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Thing"))), (SubLObject)api_widgets.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ProperNameString"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), (SubLObject)api_widgets.FOUR_INTEGER), (SubLObject)api_widgets.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Person"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PlanetEarth"))), (SubLObject)api_widgets.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Date"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), (SubLObject)SubLObjectFactory.makeInteger(1997)), (SubLObject)api_widgets.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa")), (SubLObject)SubLObjectFactory.makeKeyword("X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NonNegativeScalarInterval"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")), (SubLObject)SubLObjectFactory.makeInteger(-2)), (SubLObject)api_widgets.NIL) });
        $kw502$X = SubLObjectFactory.makeKeyword("X");
        $sym503$TEST_CONSTRAINED_CYCL_FILTER = SubLObjectFactory.makeSymbol("TEST-CONSTRAINED-CYCL-FILTER");
        $list504 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Penguin")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-CONSTRAINED-CYCLS")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Aramil")))), (SubLObject)api_widgets.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Penguin")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-CONSTRAINED-CYCLS")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Pizza")))), (SubLObject)api_widgets.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PersonTypeByOccupation")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-CONSTRAINED-CYCLS")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PostageStamp")))), (SubLObject)api_widgets.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL, (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SpecsFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Person"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-CONSTRAINED-CYCLS")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HumanCyclist")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HumanCyclist")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)api_widgets.NIL, (SubLObject)api_widgets.NIL, (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SpecsFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Person"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-CONSTRAINED-CYCLS")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HumanCyclist")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Pizza")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HumanCyclist")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genlMt")), (SubLObject)SubLObjectFactory.makeSymbol("?X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)ConsesLow.list((SubLObject)api_widgets.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PersonTypeByOccupation")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-CONSTRAINED-CYCLS")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Plumber")))), (SubLObject)api_widgets.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genlMt")), (SubLObject)SubLObjectFactory.makeSymbol("?X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)ConsesLow.list((SubLObject)api_widgets.ONE_INTEGER), (SubLObject)api_widgets.NIL, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-CONSTRAINED-CYCLS")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeInteger(2000))), (SubLObject)api_widgets.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genlMt")), (SubLObject)SubLObjectFactory.makeSymbol("?X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)ConsesLow.list((SubLObject)api_widgets.ONE_INTEGER), (SubLObject)api_widgets.NIL, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-CONSTRAINED-CYCLS")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Plumber")))), (SubLObject)api_widgets.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genlMt")), (SubLObject)SubLObjectFactory.makeSymbol("?X"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)ConsesLow.list((SubLObject)api_widgets.ONE_INTEGER), (SubLObject)api_widgets.NIL, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-CONSTRAINED-CYCLS")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CyclistsMt")))) });
        $list505 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("SENTENCE"), (SubLObject)SubLObjectFactory.makeSymbol("ARG-POS"), (SubLObject)SubLObjectFactory.makeSymbol("CONSTRAINING-COLLECTION"), (SubLObject)SubLObjectFactory.makeSymbol("DOMAIN-MT"), (SubLObject)SubLObjectFactory.makeSymbol("FILTER-FN"));
        $sym506$CONSTRAINED_CYCL_FILTER = SubLObjectFactory.makeSymbol("CONSTRAINED-CYCL-FILTER");
        $sym507$TEST_BUG_PARSES = SubLObjectFactory.makeSymbol("TEST-BUG-PARSES");
        $list508 = _constant_508_initializer();
        $sym509$CONSTRAINED_PARSE_EQUAL_ = SubLObjectFactory.makeSymbol("CONSTRAINED-PARSE-EQUAL?");
        $sym510$PARSE_CYCL_FROM_CONSTRAINED_PARSE_RESULT = SubLObjectFactory.makeSymbol("PARSE-CYCL-FROM-CONSTRAINED-PARSE-RESULT");
        $sym511$BUG_PARSE_COUNT = SubLObjectFactory.makeSymbol("BUG-PARSE-COUNT");
        $list512 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("around 10:01 eastern time"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeInterval")), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerrorismParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic")))), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))), api_widgets.TEN_INTEGER })), (SubLObject)api_widgets.ONE_INTEGER), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeString("mutual support"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CANONICALIZE-TERM"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SpecsFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InterAgentSupportQuantity"))))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TerrorismParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtUnionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EnglishMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("RelationParaphraseMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TKBSourceSpindleCollectorMt")))), api_widgets.T, api_widgets.NIL, api_widgets.T, SubLObjectFactory.makeKeyword("NONE"), ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("nonPlural-Generic")))), api_widgets.NIL, api_widgets.NIL, ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CASE-INSENSITIVE"), (SubLObject)SubLObjectFactory.makeKeyword("TRUE"), (SubLObject)SubLObjectFactory.makeKeyword("REGULAR-EXPRESSIONS"), (SubLObject)SubLObjectFactory.makeKeyword("FALSE"))), api_widgets.TEN_INTEGER })), (SubLObject)api_widgets.ONE_INTEGER));
        $int513$350000 = SubLObjectFactory.makeInteger(350000);
        $sym514$WS_INSTANCE_SUBSET_TEST = SubLObjectFactory.makeSymbol("WS-INSTANCE-SUBSET-TEST");
        $list515 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Person"))), (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("University"))), (SubLObject)api_widgets.T));
        $sym516$SIZE_BETWEEN = SubLObjectFactory.makeSymbol("SIZE-BETWEEN");
        $list517 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Collection")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC")), (SubLObject)api_widgets.T, (SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)SubLObjectFactory.makeInteger(100))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Zebra")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC")), (SubLObject)api_widgets.T, (SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list((SubLObject)api_widgets.FIVE_INTEGER, (SubLObject)api_widgets.TWENTY_INTEGER)), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PlainsZebra")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC")), (SubLObject)api_widgets.T, (SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list((SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.ZERO_INTEGER)));
        $list518 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Collection")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC")), (SubLObject)api_widgets.NIL, (SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list((SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.TWENTY_INTEGER)), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Zebra")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC")), (SubLObject)api_widgets.NIL, (SubLObject)SubLObjectFactory.makeInteger(250), (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeInteger(50), (SubLObject)SubLObjectFactory.makeInteger(150))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PlainsZebra")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC")), (SubLObject)api_widgets.T, (SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list((SubLObject)api_widgets.ONE_INTEGER, (SubLObject)api_widgets.ONE_INTEGER)));
        $list519 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Collection")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC")), (SubLObject)api_widgets.NIL, (SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)SubLObjectFactory.makeInteger(100))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Dog")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC")), (SubLObject)api_widgets.T, (SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)api_widgets.ZERO_INTEGER, (SubLObject)api_widgets.T), (SubLObject)ConsesLow.list((SubLObject)api_widgets.FOUR_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(50))));
    }
    
    public static final class $foo_native extends SubLStructNative
    {
        public SubLObject $bar;
        private static final SubLStructDeclNative structDecl;
        
        public $foo_native() {
            this.$bar = (SubLObject)CommonSymbols.NIL;
        }
        
        public SubLStructDecl getStructDecl() {
            return (SubLStructDecl)$foo_native.structDecl;
        }
        
        public SubLObject getField2() {
            return this.$bar;
        }
        
        public SubLObject setField2(final SubLObject value) {
            return this.$bar = value;
        }
        
        static {
            structDecl = Structures.makeStructDeclNative((Class)$foo_native.class, api_widgets.$sym0$FOO, api_widgets.$sym1$FOO_P, api_widgets.$list2, api_widgets.$list3, new String[] { "$bar" }, api_widgets.$list4, api_widgets.$list5, api_widgets.$sym6$DEFAULT_STRUCT_PRINT_FUNCTION);
        }
    }
    
    public static final class $foo_p$UnaryFunction extends UnaryFunction
    {
        public $foo_p$UnaryFunction() {
            super(SubLTranslatedFile.extractFunctionNamed("FOO-P"));
        }
        
        public SubLObject processItem(final SubLObject arg1) {
            return api_widgets.foo_p(arg1);
        }
    }
}

/*

	Total time: 13542 ms
	 synthetic 
*/