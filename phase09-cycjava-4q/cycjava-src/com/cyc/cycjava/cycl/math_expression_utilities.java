package com.cyc.cycjava.cycl;

import com.cyc.cycjava.cycl.cyc_testing.generic_testing;
import com.cyc.cycjava.cycl.inference.harness.inference_modules;
import com.cyc.cycjava.cycl.inference.modules.preference_modules;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors;
import com.cyc.cycjava.cycl.inference.modules.removal.removal_modules_fractions;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import com.cyc.cycjava.cycl.inference.harness.inference_kernel;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public final class math_expression_utilities extends SubLTranslatedFile
{
    public static final SubLFile me;
    public static final String myName = "com.cyc.cycjava.cycl.math_expression_utilities";
    public static final String myFingerPrint = "1b335132b6e41682d1f331e9037924cbbc8e389fdf5fb5e5791bb5210c7ac78a";
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 926L)
    private static SubLSymbol $math_expression_multiplication_fns$;
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 1086L)
    private static SubLSymbol $math_expression_division_fns$;
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 1229L)
    private static SubLSymbol $math_expression_addition_fns$;
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 1328L)
    private static SubLSymbol $math_expression_subtraction_fns$;
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 1434L)
    private static SubLSymbol $math_expression_infix_operators$;
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 1992L)
    private static SubLSymbol $math_expression_infix_operator_precedence_rank$;
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 2712L)
    private static SubLSymbol $math_expression_unary_prefix_operators$;
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 2794L)
    private static SubLSymbol $math_expression_unary_surround_operators$;
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 4589L)
    private static SubLSymbol $all_math_expression_denoting_functions_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 6370L)
    private static SubLSymbol $math_expression_enclosure_fns$;
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 6589L)
    private static SubLSymbol $math_statement_fns$;
    private static final SubLList $list0;
    private static final SubLList $list1;
    private static final SubLList $list2;
    private static final SubLList $list3;
    private static final SubLList $list4;
    private static final SubLList $list5;
    private static final SubLList $list6;
    private static final SubLList $list7;
    private static final SubLObject $const8$PowerExpressionFn;
    private static final SubLObject $const9$NthRootExpressionFn;
    private static final SubLSymbol $sym10$ALL_MATH_EXPRESSION_DENOTING_FUNCTIONS;
    private static final SubLObject $const11$MathematicalExpressionDenotingFun;
    private static final SubLSymbol $sym12$_ALL_MATH_EXPRESSION_DENOTING_FUNCTIONS_CACHING_STATE_;
    private static final SubLSymbol $sym13$CLEAR_ALL_MATH_EXPRESSION_DENOTING_FUNCTIONS;
    private static final SubLObject $const14$MathExpressionFn;
    private static final SubLObject $const15$MathQuantFn;
    private static final SubLObject $const16$TimeExpressionFn;
    private static final SubLObject $const17$PrefixMinusFn;
    private static final SubLObject $const18$MathVarFn;
    private static final SubLList $list19;
    private static final SubLList $list20;
    private static final SubLSymbol $sym21$MATH_EXPRESSION_ADDITION_OP_P;
    private static final SubLSymbol $sym22$MATH_EXPRESSION_SUBTRACTION_OP_P;
    private static final SubLSymbol $sym23$MATH_EXPRESSION_MULTIPLICATION_OP_P;
    private static final SubLSymbol $sym24$MATH_EXPRESSION_DIVISION_OP_P;
    private static final SubLSymbol $sym25$MATH_EXPRESSION_EXPONENTIATION_OP_P;
    private static final SubLSymbol $sym26$MATH_EXPRESSION_NTH_ROOT_OP_P;
    private static final SubLSymbol $sym27$MATH_EXPRESSION_ENCLOSURE_FN_P;
    private static final SubLSymbol $kw28$POS;
    private static final SubLObject $const29$subMathExpressions_Direct;
    private static final SubLSymbol $kw30$REMOVAL_SUBMATHEXPRESSIONS_DIRECT;
    private static final SubLList $list31;
    private static final SubLSymbol $kw32$OPAQUE;
    private static final SubLSymbol $sym33$TEST_REMOVAL_SUBMATHEXPRESSIONS_DIRECT_EXPAND;
    private static final SubLSymbol $kw34$TEST;
    private static final SubLSymbol $kw35$OWNER;
    private static final SubLSymbol $kw36$CLASSES;
    private static final SubLList $list37;
    private static final SubLSymbol $kw38$KB;
    private static final SubLSymbol $kw39$FULL;
    private static final SubLSymbol $kw40$WORKING_;
    private static final SubLObject $list41;
    private static final SubLObject $const42$subMathExpressions;
    private static final SubLSymbol $kw43$REMOVAL_SUBMATHEXPRESSIONS;
    private static final SubLList $list44;
    private static final SubLSymbol $sym45$MATH_EXPRESSION_P;
    private static final SubLSymbol $sym46$TEST_REMOVAL_SUBMATHEXPRESSIONS_EXPAND;
    private static final SubLObject $list47;
    private static final SubLObject $const48$mathQuantValue;
    private static final SubLSymbol $kw49$REMOVAL_MATHQUANTVALUE;
    private static final SubLList $list50;
    private static final SubLList $list51;
    private static final SubLList $list52;
    private static final SubLObject $const53$MinusFn;
    private static final SubLSymbol $sym54$TEST_REMOVAL_MATHQUANTVALUE_EXPAND;
    private static final SubLList $list55;
    private static final SubLObject $const56$additionArglist;
    private static final SubLSymbol $kw57$REMOVAL_ADDITIONARGLIST;
    private static final SubLList $list58;
    private static final SubLObject $const59$InfixPlusFn;
    private static final SubLSymbol $sym60$MATH_EXPRESSION_QUANT_FN_P;
    private static final SubLSymbol $sym61$MATH_EXPRESSION_QUANT_VALUE;
    private static final SubLSymbol $sym62$TEST_REMOVAL_ADDITIONARGLIST_EXPAND;
    private static final SubLList $list63;
    private static final SubLObject $const64$genericAdditionArglist;
    private static final SubLSymbol $kw65$REMOVAL_GENERICADDITIONARGLIST;
    private static final SubLList $list66;
    private static final SubLSymbol $sym67$TEST_REMOVAL_GENERICADDITIONARGLIST_EXPAND;
    private static final SubLList $list68;
    private static final SubLObject $const69$multiplicationArglist;
    private static final SubLSymbol $kw70$REMOVAL_MULTIPLICATIONARGLIST;
    private static final SubLList $list71;
    private static final SubLObject $const72$InfixTimesFn;
    private static final SubLSymbol $sym73$TEST_REMOVAL_MULTIPLICATIONARGLIST_EXPAND;
    private static final SubLList $list74;
    private static final SubLObject $const75$genericMultiplicationArglist;
    private static final SubLSymbol $kw76$REMOVAL_GENERICMULTIPLICATIONARGLIST;
    private static final SubLList $list77;
    private static final SubLSymbol $sym78$TEST_REMOVAL_GENERICMULTIPLICATIONARGLIST_EXPAND;
    private static final SubLList $list79;
    private static final SubLObject $const80$expressionNegated;
    private static final SubLSymbol $kw81$REMOVAL_EXPRESSIONNEGATED;
    private static final SubLList $list82;
    private static final SubLSymbol $sym83$TEST_REMOVAL_EXPRESSIONNEGATED_EXPAND;
    private static final SubLList $list84;
    private static final SubLObject $const85$expressionMinuend;
    private static final SubLSymbol $kw86$REMOVAL_EXPRESSIONMINUEND;
    private static final SubLList $list87;
    private static final SubLObject $const88$InfixMinusFn;
    private static final SubLSymbol $sym89$TEST_REMOVAL_EXPRESSIONMINUEND_EXPAND;
    private static final SubLList $list90;
    private static final SubLObject $const91$genericExpressionMinuend;
    private static final SubLSymbol $kw92$REMOVAL_GENERICEXPRESSIONMINUEND;
    private static final SubLList $list93;
    private static final SubLSymbol $sym94$TEST_REMOVAL_GENERICEXPRESSIONMINUEND_EXPAND;
    private static final SubLList $list95;
    private static final SubLObject $const96$expressionSubtrahend;
    private static final SubLSymbol $kw97$REMOVAL_EXPRESSIONSUBTRAHEND;
    private static final SubLList $list98;
    private static final SubLSymbol $sym99$TEST_REMOVAL_EXPRESSIONSUBTRAHEND_EXPAND;
    private static final SubLList $list100;
    private static final SubLObject $const101$genericExpressionSubtrahend;
    private static final SubLSymbol $kw102$REMOVAL_GENERICEXPRESSIONSUBTRAHEND;
    private static final SubLList $list103;
    private static final SubLSymbol $sym104$TEST_REMOVAL_GENERICEXPRESSIONSUBTRAHEND_EXPAND;
    private static final SubLList $list105;
    private static final SubLObject $const106$expressionDivisor;
    private static final SubLSymbol $kw107$REMOVAL_EXPRESSIONDIVISOR;
    private static final SubLList $list108;
    private static final SubLSymbol $sym109$TEST_REMOVAL_EXPRESSIONDIVISOR_EXPAND;
    private static final SubLList $list110;
    private static final SubLObject $const111$genericExpressionDivisor;
    private static final SubLSymbol $kw112$REMOVAL_GENERICEXPRESSIONDIVISOR;
    private static final SubLList $list113;
    private static final SubLSymbol $sym114$TEST_REMOVAL_GENERICEXPRESSIONDIVISOR_EXPAND;
    private static final SubLList $list115;
    private static final SubLObject $const116$expressionDividend;
    private static final SubLSymbol $kw117$REMOVAL_EXPRESSIONDIVIDEND;
    private static final SubLList $list118;
    private static final SubLSymbol $sym119$TEST_REMOVAL_EXPRESSIONDIVIDEND_EXPAND;
    private static final SubLList $list120;
    private static final SubLObject $const121$genericExpressionDividend;
    private static final SubLSymbol $kw122$REMOVAL_GENERICEXPRESSIONDIVIDEND;
    private static final SubLList $list123;
    private static final SubLSymbol $sym124$TEST_REMOVAL_GENERICEXPRESSIONDIVIDEND_EXPAND;
    private static final SubLList $list125;
    private static final SubLObject $const126$expressionExponent;
    private static final SubLSymbol $kw127$REMOVAL_EXPRESSIONEXPONENT;
    private static final SubLList $list128;
    private static final SubLSymbol $sym129$TEST_REMOVAL_EXPRESSIONEXPONENT_EXPAND;
    private static final SubLList $list130;
    private static final SubLObject $const131$expressionBase;
    private static final SubLSymbol $kw132$REMOVAL_EXPRESSIONBASE;
    private static final SubLList $list133;
    private static final SubLSymbol $sym134$TEST_REMOVAL_EXPRESSIONBASE_EXPAND;
    private static final SubLList $list135;
    private static final SubLObject $const136$expressionRadicand;
    private static final SubLSymbol $kw137$REMOVAL_EXPRESSIONRADICAND;
    private static final SubLList $list138;
    private static final SubLSymbol $sym139$TEST_REMOVAL_EXPRESSIONRADICAND_EXPAND;
    private static final SubLList $list140;
    private static final SubLObject $const141$expressionIndex;
    private static final SubLSymbol $kw142$REMOVAL_EXPRESSIONINDEX;
    private static final SubLList $list143;
    private static final SubLSymbol $sym144$TEST_REMOVAL_EXPRESSIONINDEX_EXPAND;
    private static final SubLList $list145;
    private static final SubLObject $const146$absoluteValueOfExpression;
    private static final SubLSymbol $kw147$REMOVAL_ABSOLUTEVALUEOFEXPRESSION;
    private static final SubLList $list148;
    private static final SubLObject $const149$AbsoluteValueExpressionFn;
    private static final SubLSymbol $sym150$TEST_REMOVAL_ABSOLUTEVALUEOFEXPRESSION_EXPAND;
    private static final SubLList $list151;
    private static final SubLObject $const152$expressionEnclosed;
    private static final SubLSymbol $kw153$REMOVAL_EXPRESSIONENCLOSED;
    private static final SubLList $list154;
    private static final SubLSymbol $sym155$TEST_REMOVAL_EXPRESSIONENCLOSED_EXPAND;
    private static final SubLList $list156;
    private static final SubLObject $const157$expressionAddends;
    private static final SubLSymbol $kw158$REMOVAL_EXPRESSIONADDENDS;
    private static final SubLList $list159;
    private static final SubLSymbol $sym160$TEST_REMOVAL_EXPRESSIONADDENDS_EXPAND;
    private static final SubLList $list161;
    private static final SubLObject $const162$expressionFactors;
    private static final SubLSymbol $kw163$REMOVAL_EXPRESSIONFACTORS;
    private static final SubLList $list164;
    private static final SubLSymbol $sym165$TEST_REMOVAL_EXPRESSIONFACTORS_EXPAND;
    private static final SubLList $list166;
    private static final SubLObject $const167$expressionAddendList;
    private static final SubLSymbol $kw168$REMOVAL_EXPRESSIONADDENDLIST;
    private static final SubLList $list169;
    private static final SubLSymbol $sym170$TEST_REMOVAL_EXPRESSIONADDENDLIST_EXPAND;
    private static final SubLList $list171;
    private static final SubLObject $const172$expressionFactorList;
    private static final SubLSymbol $kw173$REMOVAL_EXPRESSIONFACTORLIST;
    private static final SubLList $list174;
    private static final SubLSymbol $sym175$MATH_EXPRESSION_UNENCLOSE;
    private static final SubLSymbol $sym176$TEST_REMOVAL_EXPRESSIONFACTORLIST_EXPAND;
    private static final SubLList $list177;
    private static final SubLObject $const178$expressionIsEvaluatable;
    private static final SubLSymbol $kw179$REMOVAL_EXPRESSIONISEVALUATABLE;
    private static final SubLList $list180;
    private static final SubLSymbol $kw181$EXPRESSION_IS_A_MATH_QUANTITY;
    private static final SubLSymbol $kw182$EXPRESSION_IS_A_NEGATED_UNEVALUATABLE_EXPRESSION;
    private static final SubLSymbol $sym183$MATH_EXPRESSION_VAR_P;
    private static final SubLSymbol $kw184$SOME_OPERAND_IS_A_VARIABLE;
    private static final SubLSymbol $sym185$MATH_EXPRESSION_WITH_SOME_OPERATOR_P;
    private static final SubLSymbol $sym186$MATH_EXPRESSION_QUANT_FN_OR_MINUS_QUANT_FN_P;
    private static final SubLSymbol $kw187$SOME_OPERAND_IS_A_MATH_EXPRESSION;
    private static final SubLObject $const188$Unity;
    private static final SubLString $str189$_units_do_not_match__;
    private static final SubLString $str190$_;
    private static final SubLString $str191$Minuend_;
    private static final SubLString $str192$_is_not_a_NUMBERP_;
    private static final SubLString $str193$Subtrahend_;
    private static final SubLObject $const194$InfixSlashDivideFn;
    private static final SubLObject $const195$InfixDivideFn;
    private static final SubLObject $const196$HorizontalDivideFn;
    private static final SubLObject $const197$SimpleFractionFn;
    private static final SubLObject $const198$MixedFractionFn;
    private static final SubLSymbol $sym199$STRINGP;
    private static final SubLString $str200$__;
    private static final SubLString $str201$_has_mismatched_units__;
    private static final SubLSymbol $sym202$EXTENDED_NUMBER_P;
    private static final SubLSymbol $kw203$UNEVALUATABLE;
    private static final SubLObject $const204$ImplicitTimesFn;
    private static final SubLObject $const205$InfixDottedTimesFn;
    private static final SubLSymbol $sym206$NUMBERP;
    private static final SubLSymbol $sym207$_;
    private static final SubLObject $const208$UnitProductFn;
    private static final SubLObject $const209$ParenthesizedMathFn;
    private static final SubLObject $const210$BracketedMathFn;
    private static final SubLString $str211$_exponent_has_units;
    private static final SubLString $str212$_base_has_units_but_exponent_not_;
    private static final SubLString $str213$_radicand_has_units;
    private static final SubLString $str214$_radicand_is_zero;
    private static final SubLString $str215$_index_has_units_but_nth_root_of_;
    private static final SubLString $str216$_index_has_units_but_radicand_not;
    private static final SubLString $str217$_could_not_find_any_operators_in_;
    private static final SubLString $str218$_invalid_due_to_operation_as_firs;
    private static final SubLString $str219$_S_was_not_solvable_by_sub_evalua;
    private static final SubLString $str220$_was_not_a_math_expression;
    private static final SubLString $str221$Unknown_reason;
    private static final SubLSymbol $sym222$MATH_EXPRESSION_EVALUATE;
    private static final SubLSymbol $sym223$TERM_UNIFY;
    private static final SubLList $list224;
    private static final SubLSymbol $sym225$TEST_REMOVAL_EXPRESSIONISEVALUATABLE_EXPAND;
    private static final SubLList $list226;
    private static final SubLObject $const227$mathExpressionOperatorList;
    private static final SubLSymbol $kw228$REMOVAL_MATHEXPRESSIONOPERATORLIST;
    private static final SubLList $list229;
    private static final SubLObject $const230$TheEmptyList;
    private static final SubLSymbol $sym231$TEST_REMOVAL_MATHEXPRESSIONOPERATORLIST_EXPAND;
    private static final SubLList $list232;
    private static final SubLObject $const233$mathExpressionOperatorCount;
    private static final SubLSymbol $kw234$REMOVAL_MATHEXPRESSIONOPERATORCOUNT;
    private static final SubLList $list235;
    private static final SubLSymbol $sym236$TEST_REMOVAL_MATHEXPRESSIONOPERATORCOUNT_EXPAND;
    private static final SubLList $list237;
    private static final SubLSymbol $sym238$MATH_EXPRESSION_INFIX_OP_P;
    private static final SubLSymbol $sym239$MATH_EXPRESSION_ELEMS_AND_OPS_FOR_ADDITIONS_AND_SUBTRACTIONS;
    private static final SubLList $list240;
    private static final SubLObject $const241$mathExpressionOperator;
    private static final SubLSymbol $kw242$REMOVAL_MATHEXPRESSIONOPERATOR;
    private static final SubLList $list243;
    private static final SubLSymbol $sym244$TEST_REMOVAL_MATHEXPRESSIONOPERATOR_EXPAND;
    private static final SubLList $list245;
    private static final SubLObject $const246$leftSideOfMathematicalStatement;
    private static final SubLSymbol $kw247$REMOVAL_LEFTSIDEOFMATHEMATICALSTATEMENT;
    private static final SubLList $list248;
    private static final SubLSymbol $sym249$TEST_REMOVAL_LEFTSIDEOFMATHEMATICALSTATEMENT_EXPAND;
    private static final SubLList $list250;
    private static final SubLObject $const251$rightSideOfMathematicalStatement;
    private static final SubLSymbol $kw252$REMOVAL_RIGHTSIDEOFMATHEMATICALSTATEMENT;
    private static final SubLList $list253;
    private static final SubLSymbol $sym254$TEST_REMOVAL_RIGHTSIDEOFMATHEMATICALSTATEMENT_EXPAND;
    private static final SubLList $list255;
    private static final SubLObject $const256$likeMathTerms;
    private static final SubLSymbol $kw257$REMOVAL_LIKEMATHTERMS;
    private static final SubLList $list258;
    private static final SubLSymbol $sym259$EXPLODE_INTERVAL_IGNORING_UNEVALUATABLE;
    private static final SubLSymbol $sym260$TEST_REMOVAL_LIKEMATHTERMS_EXPAND;
    private static final SubLObject $list261;
    private static final SubLObject $const262$unlikeMathTerms;
    private static final SubLSymbol $kw263$REMOVAL_UNLIKEMATHTERMS;
    private static final SubLList $list264;
    private static final SubLObject $const265$simplifiableMathExpression;
    private static final SubLSymbol $kw266$REMOVAL_SIMPLIFIABLEMATHEXPRESSION;
    private static final SubLList $list267;
    private static final SubLObject $const268$unsimplifiableMathExpression;
    private static final SubLSymbol $kw269$REMOVAL_UNSIMPLIFIABLEMATHEXPRESSION;
    private static final SubLList $list270;
    private static final SubLSymbol $kw271$EXPRESSION_IS_A_NEGATED_UNSIMPLIFIABLE_EXPRESSION;
    private static final SubLSymbol $sym272$UNSIMPLIFIABLE_MATH_EXPRESSION_;
    private static final SubLSymbol $kw273$ALL_SUB_EXPRESSIONS_ARE_UNSIMPLIFIABLE;
    private static final SubLSymbol $kw274$EXPRESSION_HAS_NO_DIRECT_SUB_MATH_EXPRESSION;
    private static final SubLSymbol $sym275$TEST_REMOVAL_UNSIMPLIFIABLEMATHEXPRESSION_EXPAND;
    private static final SubLObject $list276;
    private static final SubLSymbol $sym277$TEST_REMOVAL_SIMPLIFIABLEMATHEXPRESSION_EXPAND;
    private static final SubLObject $list278;
    private static final SubLObject $const279$MathEqualsStatementFn;
    private static final SubLList $list280;
    private static final SubLSymbol $sym281$MATH_EQUATION_UNIVARIATE_LINEAR_;
    private static final SubLList $list282;
    private static final SubLObject $const283$comparableMathTerms;
    private static final SubLSymbol $kw284$REMOVAL_COMPARABLEMATHTERMS;
    private static final SubLList $list285;
    private static final SubLSymbol $sym286$TEST_REMOVAL_COMPARABLEMATHTERMS_EXPAND;
    private static final SubLObject $list287;
    private static final SubLObject $const288$likeMathTermsOnOppositeSides;
    private static final SubLSymbol $kw289$REMOVAL_LIKEMATHTERMSONOPPOSITESIDES;
    private static final SubLList $list290;
    private static final SubLSymbol $sym291$TEST_REMOVAL_LIKEMATHTERMSONOPPOSITESIDES_EXPAND;
    private static final SubLObject $list292;
    private static final SubLObject $const293$SingleOperationTypeMathTransforma;
    private static final SubLObject $const294$AddTermToBothSidesOfMathStatement;
    private static final SubLObject $const295$SubtractTermFromBothSidesOfMathSt;
    private static final SubLObject $const296$DivideBothSidesOfMathStatementByT;
    private static final SubLObject $const297$MultiplyBothSidesOfMathStatementB;
    private static final SubLList $list298;
    private static final SubLSymbol $sym299$TEST_APPLY_OPERATION_TO_MATH_STATEMENT;
    private static final SubLObject $list300;
    private static final SubLObject $const301$bestTermToRemoveVia;
    private static final SubLSymbol $kw302$REMOVAL_BESTTERMTOREMOVEVIA;
    private static final SubLList $list303;
    private static final SubLSymbol $sym304$TEST_REMOVAL_BESTTERMTOREMOVEVIA_EXPAND;
    private static final SubLObject $list305;
    private static final SubLObject $const306$possibleTermsToRemoveVia;
    private static final SubLSymbol $kw307$REMOVAL_POSSIBLETERMSTOREMOVEVIA;
    private static final SubLList $list308;
    private static final SubLList $list309;
    private static final SubLSymbol $sym310$TEST_REMOVAL_POSSIBLETERMSTOREMOVEVIA_EXPAND;
    private static final SubLSymbol $sym311$HAS_MEMBER_EQUAL_;
    private static final SubLList $list312;
    private static final SubLObject $const313$mathTermCoefficient;
    private static final SubLSymbol $kw314$REMOVAL_MATHTERMCOEFFICIENT;
    private static final SubLList $list315;
    private static final SubLSymbol $sym316$TEST_REMOVAL_MATHTERMCOEFFICIENT_EXPAND;
    private static final SubLObject $list317;
    private static final SubLObject $const318$mathTermVariableWithDegree;
    private static final SubLSymbol $kw319$REMOVAL_MATHTERMVARIABLEWITHDEGREE;
    private static final SubLList $list320;
    private static final SubLList $list321;
    private static final SubLSymbol $sym322$TEST_REMOVAL_MATHTERMVARIABLEWITHDEGREE_EXPAND;
    private static final SubLObject $list323;
    private static final SubLObject $const324$mathTermDegree;
    private static final SubLSymbol $kw325$REMOVAL_MATHTERMDEGREE;
    private static final SubLList $list326;
    private static final SubLSymbol $sym327$MATH_EXPRESSION_ADDITION_OR_SUBTRACTION_OP_P;
    private static final SubLSymbol $sym328$TEST_REMOVAL_MATHTERMDEGREE_EXPAND;
    private static final SubLObject $list329;
    private static final SubLObject $const330$commonPrimeFactorList;
    private static final SubLSymbol $kw331$REMOVAL_COMMONPRIMEFACTORLIST;
    private static final SubLList $list332;
    private static final SubLSymbol $kw333$IGNORE_ERRORS_TARGET;
    private static final SubLSymbol $sym334$IGNORE_ERRORS_HANDLER;
    private static final SubLSymbol $sym335$TEST_REMOVAL_COMMONPRIMEFACTORLIST_EXPAND;
    private static final SubLList $list336;
    private static final SubLObject $const337$simplifiableFraction;
    private static final SubLSymbol $kw338$REMOVAL_SIMPLIFIABLEFRACTION;
    private static final SubLList $list339;
    private static final SubLSymbol $sym340$TEST_REMOVAL_SIMPLIFIABLEFRACTION_EXPAND;
    private static final SubLList $list341;
    private static final SubLObject $const342$mathExpressionOperandList;
    private static final SubLSymbol $kw343$REMOVAL_MATHEXPRESSIONOPERANDLIST;
    private static final SubLList $list344;
    private static final SubLSymbol $sym345$TEST_REMOVAL_MATHEXPRESSIONOPERANDLIST_EXPAND;
    private static final SubLObject $list346;
    private static final SubLObject $const347$associateLikeTerms;
    private static final SubLSymbol $kw348$REMOVAL_ASSOCIATELIKETERMS;
    private static final SubLList $list349;
    private static final SubLSymbol $kw350$LIKE_TERMS;
    private static final SubLSymbol $sym351$TEST_REMOVAL_ASSOCIATELIKETERMS_EXPAND;
    private static final SubLObject $list352;
    private static final SubLObject $const353$expressionReorderedToGroupLikeTer;
    private static final SubLSymbol $kw354$REMOVAL_EXPRESSIONREORDEREDTOGROUPLIKETERMS;
    private static final SubLList $list355;
    private static final SubLObject $const356$Fraction;
    private static final SubLSymbol $kw357$COMPARE_MATH_QUANT_FNS;
    private static final SubLSymbol $sym358$TERM__;
    private static final SubLSymbol $sym359$MATH_TERM_TYPE_FRACTION_;
    private static final SubLSymbol $sym360$MATH_TERM_TYPE;
    private static final SubLSymbol $sym361$_EXIT;
    private static final SubLSymbol $sym362$MATH_TERM___COMPARE_VALUES;
    private static final SubLSymbol $sym363$MATH_TERM__;
    private static final SubLSymbol $sym364$TEST_REMOVAL_EXPRESSIONREORDEREDTOGROUPLIKETERMS_EXPAND;
    private static final SubLObject $list365;
    private static final SubLObject $const366$expressionHasNonAdjacentLikeTerms;
    private static final SubLSymbol $kw367$REMOVAL_EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS;
    private static final SubLList $list368;
    private static final SubLSymbol $sym369$TEST_REMOVAL_EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS_EXPAND;
    private static final SubLObject $list370;
    private static final SubLObject $const371$expressionReorderedInAscendingOrd;
    private static final SubLSymbol $kw372$REMOVAL_EXPRESSIONREORDEREDINASCENDINGORDER;
    private static final SubLList $list373;
    private static final SubLSymbol $sym374$STRONG_MATH_TERM__;
    private static final SubLSymbol $sym375$TEST_REMOVAL_EXPRESSIONREORDEREDINASCENDINGORDER_EXPAND;
    private static final SubLList $list376;
    private static final SubLObject $const377$bestSubExpressionToEvaluate;
    private static final SubLSymbol $kw378$REMOVAL_BESTSUBEXPRESSIONTOEVALUATE;
    private static final SubLList $list379;
    private static final SubLSymbol $sym380$TEST_REMOVAL_BESTSUBEXPRESSIONTOEVALUATE_EXPAND;
    private static final SubLList $list381;
    private static final SubLSymbol $sym382$INFIX_MATH_EXPRESSION_P;
    private static final SubLSymbol $sym383$MATH_EXPRESSION_TO_PREFIX_FORMAT;
    private static final SubLObject $list384;
    private static final SubLSymbol $sym385$FRACTION_P;
    private static final SubLObject $const386$NegativeMixedFractionFn;
    private static final SubLSymbol $sym387$FRACTION_;
    private static final SubLObject $const388$mathExpressionNthOperand;
    private static final SubLSymbol $kw389$REMOVAL_MATHEXPRESSIONNTHOPERAND;
    private static final SubLList $list390;
    private static final SubLSymbol $sym391$TEST_REMOVAL_MATHEXPRESSIONNTHOPERAND_EXPAND;
    private static final SubLObject $list392;
    private static final SubLObject $const393$orderedListOfDirectSubExpressions;
    private static final SubLSymbol $kw394$REMOVAL_ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT;
    private static final SubLList $list395;
    private static final SubLSymbol $sym396$TEST_REMOVAL_ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT_EX;
    private static final SubLObject $list397;
    private static final SubLSymbol $sym398$NULL;
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 2574L)
    public static SubLObject math_expression_infix_operator_precedence_rank(final SubLObject op) {
        return conses_high.getf(math_expression_utilities.$math_expression_infix_operator_precedence_rank$.getGlobalValue(), op, (SubLObject)math_expression_utilities.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 2890L)
    public static SubLObject math_expression_addition_op_p(final SubLObject v_object) {
        return list_utilities.member_kbeqP(v_object, math_expression_utilities.$math_expression_addition_fns$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 3010L)
    public static SubLObject math_expression_subtraction_op_p(final SubLObject v_object) {
        return list_utilities.member_kbeqP(v_object, math_expression_utilities.$math_expression_subtraction_fns$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 3136L)
    public static SubLObject math_expression_addition_or_subtraction_op_p(final SubLObject v_object) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != math_expression_addition_op_p(v_object) || math_expression_utilities.NIL != math_expression_subtraction_op_p(v_object));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 3310L)
    public static SubLObject math_expression_multiplication_op_p(final SubLObject v_object) {
        return list_utilities.member_kbeqP(v_object, math_expression_utilities.$math_expression_multiplication_fns$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 3442L)
    public static SubLObject math_expression_division_op_p(final SubLObject v_object) {
        return list_utilities.member_kbeqP(v_object, math_expression_utilities.$math_expression_division_fns$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 3562L)
    public static SubLObject math_expression_multiplication_or_divide_op_p(final SubLObject v_object) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != math_expression_multiplication_op_p(v_object) || math_expression_utilities.NIL != math_expression_division_op_p(v_object));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 3740L)
    public static SubLObject math_expression_exponentiation_op_p(final SubLObject v_object) {
        return kb_utilities.kbeq(v_object, math_expression_utilities.$const8$PowerExpressionFn);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 3847L)
    public static SubLObject math_expression_nth_root_op_p(final SubLObject v_object) {
        return kb_utilities.kbeq(v_object, math_expression_utilities.$const9$NthRootExpressionFn);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 3950L)
    public static SubLObject math_expression_infix_op_p(final SubLObject v_object) {
        return list_utilities.member_kbeqP(v_object, math_expression_utilities.$math_expression_infix_operators$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 4070L)
    public static SubLObject math_expression_unary_prefix_op_p(final SubLObject v_object) {
        return list_utilities.member_kbeqP(v_object, math_expression_utilities.$math_expression_unary_prefix_operators$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 4204L)
    public static SubLObject math_expression_unary_surround_op_p(final SubLObject v_object) {
        return list_utilities.member_kbeqP(v_object, math_expression_utilities.$math_expression_unary_surround_operators$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 4400L)
    public static SubLObject math_expression_with_some_operator_p(final SubLObject v_object) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != el_utilities.el_formula_p(v_object) && math_expression_utilities.NIL != subl_promotions.memberP(v_object.first(), all_math_expression_denoting_functions(), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 4589L)
    public static SubLObject clear_all_math_expression_denoting_functions() {
        final SubLObject cs = math_expression_utilities.$all_math_expression_denoting_functions_caching_state$.getGlobalValue();
        if (math_expression_utilities.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 4589L)
    public static SubLObject remove_all_math_expression_denoting_functions() {
        return memoization_state.caching_state_remove_function_results_with_args(math_expression_utilities.$all_math_expression_denoting_functions_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(math_expression_utilities.EMPTY_SUBL_OBJECT_ARRAY), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 4589L)
    public static SubLObject all_math_expression_denoting_functions_internal() {
        return isa.all_instances_in_all_mts(math_expression_utilities.$const11$MathematicalExpressionDenotingFun);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 4589L)
    public static SubLObject all_math_expression_denoting_functions() {
        SubLObject caching_state = math_expression_utilities.$all_math_expression_denoting_functions_caching_state$.getGlobalValue();
        if (math_expression_utilities.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)math_expression_utilities.$sym10$ALL_MATH_EXPRESSION_DENOTING_FUNCTIONS, (SubLObject)math_expression_utilities.$sym12$_ALL_MATH_EXPRESSION_DENOTING_FUNCTIONS_CACHING_STATE_, (SubLObject)math_expression_utilities.NIL, (SubLObject)math_expression_utilities.EQL, (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.ZERO_INTEGER);
            memoization_state.register_isa_dependent_cache_clear_callback((SubLObject)math_expression_utilities.$sym13$CLEAR_ALL_MATH_EXPRESSION_DENOTING_FUNCTIONS);
        }
        SubLObject results = memoization_state.caching_state_get_zero_arg_results(caching_state, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(all_math_expression_denoting_functions_internal()));
            memoization_state.caching_state_set_zero_arg_results(caching_state, results, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 4775L)
    public static SubLObject math_expression_p(final SubLObject v_object) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != math_expression_quant_fn_p(v_object) || math_expression_utilities.NIL != time_expression_fn_p(v_object) || math_expression_utilities.NIL != math_expression_var_p(v_object) || math_expression_utilities.NIL != math_expression_with_some_operator_p(v_object));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 4994L)
    public static SubLObject infix_math_expression_p(final SubLObject obj) {
        return el_utilities.el_formula_with_operator_p(obj, math_expression_utilities.$const14$MathExpressionFn);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 5104L)
    public static SubLObject prefix_math_expression_p(final SubLObject obj) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != math_expression_p(obj) && math_expression_utilities.NIL == infix_math_expression_p(obj));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 5237L)
    public static SubLObject math_expression_quant_fn_p(final SubLObject expression) {
        return cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const15$MathQuantFn);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 5352L)
    public static SubLObject time_expression_fn_p(final SubLObject expression) {
        return cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const16$TimeExpressionFn);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 5466L)
    public static SubLObject math_expression_minus_quant_fn_p(final SubLObject expression) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const17$PrefixMinusFn) && math_expression_utilities.NIL != math_expression_quant_fn_p(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 5653L)
    public static SubLObject math_expression_quant_fn_or_minus_quant_fn_p(final SubLObject expression) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != math_expression_minus_quant_fn_p(expression) || math_expression_utilities.NIL != math_expression_quant_fn_p(expression));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 5836L)
    public static SubLObject math_expression_quant_value(final SubLObject expression) {
        SubLObject v_answer = expression;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const15$MathQuantFn)) {
            v_answer = cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return v_answer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 6047L)
    public static SubLObject math_expression_zero_quant_value(final SubLObject expression) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != math_expression_quant_fn_p(expression) && math_expression_utilities.ZERO_INTEGER.equal(Values.nth_value_step_2(Values.nth_value_step_1((SubLObject)math_expression_utilities.ONE_INTEGER), quantities.explode_interval_ignoring_unevaluatable(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED)))));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 6262L)
    public static SubLObject math_expression_var_p(final SubLObject expression) {
        return cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const18$MathVarFn);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 6467L)
    public static SubLObject math_expression_enclosure_fn_p(final SubLObject v_object) {
        return list_utilities.member_kbeqP(v_object, math_expression_utilities.$math_expression_enclosure_fns$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 6847L)
    public static SubLObject math_statement_function_p(final SubLObject v_object) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return list_utilities.member_kbeqP(v_object, math_expression_utilities.$math_statement_fns$.getDynamicValue(thread));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 6953L)
    public static SubLObject math_statement_expressionP(final SubLObject expression) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != math_statement_function_p(cycl_utilities.nat_functor(expression)) && math_expression_utilities.NIL != list_utilities.lengthE(expression, (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 7110L)
    public static SubLObject math_addition_expressionP(final SubLObject expression) {
        return math_expression_with_all_of_operator_test(expression, (SubLObject)math_expression_utilities.$sym21$MATH_EXPRESSION_ADDITION_OP_P);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 7263L)
    public static SubLObject math_subtraction_expressionP(final SubLObject expression) {
        return math_expression_with_all_of_operator_test(expression, (SubLObject)math_expression_utilities.$sym22$MATH_EXPRESSION_SUBTRACTION_OP_P);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 7422L)
    public static SubLObject math_addition_or_subtraction_expressionP(final SubLObject expression) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != math_addition_expressionP(expression) || math_expression_utilities.NIL != math_subtraction_expressionP(expression));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 7596L)
    public static SubLObject math_multiplication_expressionP(final SubLObject expression) {
        return math_expression_with_all_of_operator_test(expression, (SubLObject)math_expression_utilities.$sym23$MATH_EXPRESSION_MULTIPLICATION_OP_P);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 7761L)
    public static SubLObject math_division_expressionP(final SubLObject expression) {
        return math_expression_with_all_of_operator_test(expression, (SubLObject)math_expression_utilities.$sym24$MATH_EXPRESSION_DIVISION_OP_P);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 7914L)
    public static SubLObject math_multiplication_or_division_expressionP(final SubLObject expression) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != math_multiplication_expressionP(expression) || math_expression_utilities.NIL != math_division_expressionP(expression));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 8094L)
    public static SubLObject math_exponentiation_expressionP(final SubLObject expression) {
        return math_expression_with_all_of_operator_test(expression, (SubLObject)math_expression_utilities.$sym25$MATH_EXPRESSION_EXPONENTIATION_OP_P);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 8259L)
    public static SubLObject math_nth_root_expressionP(final SubLObject expression) {
        return math_expression_with_all_of_operator_test(expression, (SubLObject)math_expression_utilities.$sym26$MATH_EXPRESSION_NTH_ROOT_OP_P);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 8412L)
    public static SubLObject math_enclosed_math_expressionP(final SubLObject expression) {
        return math_expression_with_all_of_operator_test(expression, (SubLObject)math_expression_utilities.$sym27$MATH_EXPRESSION_ENCLOSURE_FN_P);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 8571L)
    public static SubLObject math_expression_unenclose(final SubLObject expression) {
        if (math_expression_utilities.NIL != math_enclosed_math_expressionP(expression)) {
            return math_expression_unenclose(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
        }
        return expression;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 8763L)
    public static SubLObject math_expression_with_all_of_operator_test(final SubLObject expression, final SubLObject operator_test) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject elems = math_expression_elems_and_ops(expression);
        final SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != list_utilities.sublisp_boolean(ops) && math_expression_utilities.NIL != list_utilities.every_in_list(operator_test, ops, (SubLObject)math_expression_utilities.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 9028L)
    public static SubLObject math_expression_with_any_of_operator_test(final SubLObject expression, final SubLObject operator_test) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject elems = math_expression_elems_and_ops(expression);
        final SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != list_utilities.sublisp_boolean(ops) && math_expression_utilities.NIL != list_utilities.any_in_list(operator_test, ops, (SubLObject)math_expression_utilities.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 10286L)
    public static SubLObject removal_submathexpressions_direct_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject cdolist_list_var;
        final SubLObject answers = cdolist_list_var = sub_math_expressions_direct(arg1);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        v_answer = cdolist_list_var.first();
        while (math_expression_utilities.NIL != cdolist_list_var) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_answer = cdolist_list_var.first();
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 10719L)
    public static SubLObject sub_math_expressions_direct(final SubLObject expression) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject answers = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != math_expression_p(expression) && math_expression_utilities.NIL == math_expression_quant_fn_p(expression) && math_expression_utilities.NIL == math_expression_var_p(expression)) {
            thread.resetMultipleValues();
            final SubLObject elems = math_expression_elems_and_ops(expression);
            final SubLObject ops = thread.secondMultipleValue();
            thread.resetMultipleValues();
            answers = elems;
            final SubLObject expression_args = cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL == list_utilities.singletonP(elems)) {
                SubLObject expression_args_length;
                SubLObject sub_seq_length;
                SubLObject sub_seq_start;
                for (expression_args_length = Sequences.length(expression_args), sub_seq_length = (SubLObject)math_expression_utilities.NIL, sub_seq_length = (SubLObject)math_expression_utilities.THREE_INTEGER; !Numbers.add(sub_seq_length, (SubLObject)math_expression_utilities.TWO_INTEGER).numG(expression_args_length); sub_seq_length = Numbers.add((SubLObject)math_expression_utilities.TWO_INTEGER, sub_seq_length)) {
                    for (sub_seq_start = (SubLObject)math_expression_utilities.NIL, sub_seq_start = (SubLObject)math_expression_utilities.ZERO_INTEGER; !sub_seq_start.numG(Numbers.subtract(expression_args_length, sub_seq_length)); sub_seq_start = Numbers.add((SubLObject)math_expression_utilities.TWO_INTEGER, sub_seq_start)) {
                        answers = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.cons(math_expression_utilities.$const14$MathExpressionFn, Sequences.subseq(expression_args, sub_seq_start, Numbers.add(sub_seq_start, sub_seq_length))), answers);
                    }
                }
            }
        }
        return answers;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 11656L)
    public static SubLObject test_removal_submathexpressions_direct_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 18604L)
    public static SubLObject removal_submathexpressions_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject answers = sub_math_expressions(arg1);
        SubLObject cdolist_list_var;
        answers = (cdolist_list_var = Sequences.remove(arg1, answers, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED));
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        v_answer = cdolist_list_var.first();
        while (math_expression_utilities.NIL != cdolist_list_var) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_answer = cdolist_list_var.first();
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 19113L)
    public static SubLObject sub_math_expressions(final SubLObject expression) {
        final SubLObject gathered_answers = cycl_utilities.expression_gather(expression, (SubLObject)math_expression_utilities.$sym45$MATH_EXPRESSION_P, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject answers = (SubLObject)math_expression_utilities.NIL;
        SubLObject cdolist_list_var = gathered_answers;
        SubLObject gathered_answer = (SubLObject)math_expression_utilities.NIL;
        gathered_answer = cdolist_list_var.first();
        while (math_expression_utilities.NIL != cdolist_list_var) {
            final SubLObject item_var = gathered_answer;
            if (math_expression_utilities.NIL == conses_high.member(item_var, answers, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                answers = (SubLObject)ConsesLow.cons(item_var, answers);
            }
            SubLObject cdolist_list_var_$1 = sub_math_expressions_direct(gathered_answer);
            SubLObject sub_gathered_answer = (SubLObject)math_expression_utilities.NIL;
            sub_gathered_answer = cdolist_list_var_$1.first();
            while (math_expression_utilities.NIL != cdolist_list_var_$1) {
                final SubLObject item_var2 = sub_gathered_answer;
                if (math_expression_utilities.NIL == conses_high.member(item_var2, answers, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                    answers = (SubLObject)ConsesLow.cons(item_var2, answers);
                }
                cdolist_list_var_$1 = cdolist_list_var_$1.rest();
                sub_gathered_answer = cdolist_list_var_$1.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            gathered_answer = cdolist_list_var.first();
        }
        return answers;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 19504L)
    public static SubLObject test_removal_submathexpressions_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 23518L)
    public static SubLObject removal_mathquantvalue_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = math_quant_value(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 23916L)
    public static SubLObject math_quant_value(final SubLObject expr) {
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expr, math_expression_utilities.$const15$MathQuantFn)) {
            return cycl_utilities.nat_arg1(expr, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != formula_pattern_match.formula_matches_pattern(expr, (SubLObject)math_expression_utilities.$list51)) {
            return math_quant_value(cycl_utilities.nat_arg1(expr, (SubLObject)math_expression_utilities.UNPROVIDED));
        }
        if (math_expression_utilities.NIL != formula_pattern_match.formula_matches_pattern(expr, (SubLObject)math_expression_utilities.$list52)) {
            final SubLObject pos = math_quant_value(cycl_utilities.nat_arg1(expr, (SubLObject)math_expression_utilities.UNPROVIDED));
            return pos.isNumber() ? Numbers.multiply((SubLObject)math_expression_utilities.MINUS_ONE_INTEGER, pos) : el_utilities.make_unary_formula(math_expression_utilities.$const53$MinusFn, pos);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 24413L)
    public static SubLObject test_removal_mathquantvalue_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 26836L)
    public static SubLObject removal_additionarglist_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = math_expression_addition_arglist(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            v_answer = el_utilities.make_el_list(v_answer, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 27294L)
    public static SubLObject math_expression_addition_arglist(final SubLObject expression) {
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const59$InfixPlusFn) && math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED)) {
            v_answer = Mapping.mapcar((SubLObject)math_expression_utilities.$sym61$MATH_EXPRESSION_QUANT_VALUE, cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const14$MathExpressionFn)) {
            SubLObject elems = (SubLObject)math_expression_utilities.NIL;
            SubLObject ops = (SubLObject)math_expression_utilities.NIL;
            SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op_pos = (SubLObject)math_expression_utilities.NIL;
            list_var = cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            elem_or_op = list_var.first();
            for (elem_or_op_pos = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), elem_or_op = list_var.first(), elem_or_op_pos = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, elem_or_op_pos)) {
                if (math_expression_utilities.NIL != Numbers.oddp(elem_or_op_pos)) {
                    ops = (SubLObject)ConsesLow.cons(elem_or_op, ops);
                }
                else {
                    elems = (SubLObject)ConsesLow.cons(elem_or_op, elems);
                }
            }
            ops = list_utilities.fast_remove_duplicates(ops, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != list_utilities.singletonP(ops) && math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const59$InfixPlusFn, ops.first()) && math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, elems, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                v_answer = Sequences.nreverse(Mapping.mapcar((SubLObject)math_expression_utilities.$sym61$MATH_EXPRESSION_QUANT_VALUE, elems));
            }
        }
        return v_answer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 28107L)
    public static SubLObject test_removal_additionarglist_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 29890L)
    public static SubLObject removal_genericadditionarglist_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = generic_math_expression_addition_arglist(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            v_answer = el_utilities.make_el_list(v_answer, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 30363L)
    public static SubLObject generic_math_expression_addition_arglist(final SubLObject expression) {
        return math_expression_addition_arglist(math_expression_unenclose(expression));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 30517L)
    public static SubLObject test_removal_genericadditionarglist_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 33536L)
    public static SubLObject removal_multiplicationarglist_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = math_expression_multiplication_arglist(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            v_answer = el_utilities.make_el_list(v_answer, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 34006L)
    public static SubLObject math_expression_multiplication_arglist(final SubLObject expression) {
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const72$InfixTimesFn) && math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED)) {
            v_answer = Mapping.mapcar((SubLObject)math_expression_utilities.$sym61$MATH_EXPRESSION_QUANT_VALUE, cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const14$MathExpressionFn)) {
            SubLObject elems = (SubLObject)math_expression_utilities.NIL;
            SubLObject ops = (SubLObject)math_expression_utilities.NIL;
            SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op_pos = (SubLObject)math_expression_utilities.NIL;
            list_var = cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            elem_or_op = list_var.first();
            for (elem_or_op_pos = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), elem_or_op = list_var.first(), elem_or_op_pos = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, elem_or_op_pos)) {
                if (math_expression_utilities.NIL != Numbers.oddp(elem_or_op_pos)) {
                    ops = (SubLObject)ConsesLow.cons(elem_or_op, ops);
                }
                else {
                    elems = (SubLObject)ConsesLow.cons(elem_or_op, elems);
                }
            }
            ops = list_utilities.fast_remove_duplicates(ops, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym23$MATH_EXPRESSION_MULTIPLICATION_OP_P, ops, (SubLObject)math_expression_utilities.UNPROVIDED) && math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, elems, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                v_answer = Sequences.nreverse(Mapping.mapcar((SubLObject)math_expression_utilities.$sym61$MATH_EXPRESSION_QUANT_VALUE, elems));
            }
        }
        return v_answer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 34826L)
    public static SubLObject test_removal_multiplicationarglist_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 36701L)
    public static SubLObject removal_genericmultiplicationarglist_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = generic_math_expression_multiplication_arglist(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            v_answer = el_utilities.make_el_list(v_answer, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 37186L)
    public static SubLObject generic_math_expression_multiplication_arglist(final SubLObject expression) {
        return math_expression_multiplication_arglist(math_expression_unenclose(expression));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 37352L)
    public static SubLObject test_removal_genericmultiplicationarglist_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 39791L)
    public static SubLObject removal_expressionnegated_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(arg1, math_expression_utilities.$const17$PrefixMinusFn)) {
            v_answer = cycl_utilities.nat_arg1(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 40259L)
    public static SubLObject test_removal_expressionnegated_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 41842L)
    public static SubLObject removal_expressionminuend_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = math_expression_minuend(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 42251L)
    public static SubLObject math_expression_minuend(final SubLObject expression) {
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const88$InfixMinusFn)) {
            v_answer = cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const14$MathExpressionFn) && math_expression_utilities.NIL != kb_utilities.kbeq(conses_high.third(expression), math_expression_utilities.$const88$InfixMinusFn)) {
            v_answer = conses_high.second(expression);
        }
        return v_answer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 42599L)
    public static SubLObject test_removal_expressionminuend_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 44105L)
    public static SubLObject removal_genericexpressionminuend_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = generic_math_expression_minuend(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 44528L)
    public static SubLObject generic_math_expression_minuend(final SubLObject expression) {
        return math_expression_minuend(math_expression_unenclose(expression));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 44664L)
    public static SubLObject test_removal_genericexpressionminuend_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 46850L)
    public static SubLObject removal_expressionsubtrahend_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = math_expression_subtrahend(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 47265L)
    public static SubLObject math_expression_subtrahend(final SubLObject expression) {
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const88$InfixMinusFn)) {
            v_answer = cycl_utilities.nat_arg2(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const14$MathExpressionFn) && math_expression_utilities.NIL != kb_utilities.kbeq(list_utilities.penultimate_one(expression), math_expression_utilities.$const88$InfixMinusFn)) {
            v_answer = list_utilities.last_one(expression);
        }
        return v_answer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 47628L)
    public static SubLObject test_removal_expressionsubtrahend_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 49179L)
    public static SubLObject removal_genericexpressionsubtrahend_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = generic_math_expression_subtrahend(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 49608L)
    public static SubLObject generic_math_expression_subtrahend(final SubLObject expression) {
        return math_expression_subtrahend(math_expression_unenclose(expression));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 49750L)
    public static SubLObject test_removal_genericexpressionsubtrahend_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 52414L)
    public static SubLObject removal_expressiondivisor_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = math_expression_divisor(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 52823L)
    public static SubLObject math_expression_divisor(final SubLObject expression) {
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_any_of_functors_p(expression, math_expression_utilities.$math_expression_division_fns$.getGlobalValue())) {
            v_answer = cycl_utilities.nat_arg2(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const14$MathExpressionFn) && math_expression_utilities.NIL != list_utilities.member_kbeqP(list_utilities.penultimate_one(expression), math_expression_utilities.$math_expression_division_fns$.getGlobalValue())) {
            v_answer = list_utilities.last_one(expression);
        }
        return v_answer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 53231L)
    public static SubLObject test_removal_expressiondivisor_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 54959L)
    public static SubLObject removal_genericexpressiondivisor_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = generic_math_expression_divisor(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 55382L)
    public static SubLObject generic_math_expression_divisor(final SubLObject expression) {
        return math_expression_divisor(math_expression_unenclose(expression));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 55518L)
    public static SubLObject test_removal_genericexpressiondivisor_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 58414L)
    public static SubLObject removal_expressiondividend_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = math_expression_dividend(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 58824L)
    public static SubLObject math_expression_dividend(final SubLObject expression) {
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_any_of_functors_p(expression, math_expression_utilities.$math_expression_division_fns$.getGlobalValue())) {
            v_answer = cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const14$MathExpressionFn) && math_expression_utilities.NIL != list_utilities.member_kbeqP(conses_high.third(expression), math_expression_utilities.$math_expression_division_fns$.getGlobalValue())) {
            v_answer = conses_high.second(expression);
        }
        return v_answer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 59221L)
    public static SubLObject test_removal_expressiondividend_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 60968L)
    public static SubLObject removal_genericexpressiondividend_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = generic_math_expression_dividend(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 61393L)
    public static SubLObject generic_math_expression_dividend(final SubLObject expression) {
        return math_expression_dividend(math_expression_unenclose(expression));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 61531L)
    public static SubLObject test_removal_genericexpressiondividend_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 63785L)
    public static SubLObject removal_expressionexponent_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(arg1, math_expression_utilities.$const8$PowerExpressionFn)) {
            v_answer = cycl_utilities.nat_arg2(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 64257L)
    public static SubLObject test_removal_expressionexponent_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 65667L)
    public static SubLObject removal_expressionbase_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(arg1, math_expression_utilities.$const8$PowerExpressionFn)) {
            v_answer = cycl_utilities.nat_arg1(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 66135L)
    public static SubLObject test_removal_expressionbase_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 67582L)
    public static SubLObject removal_expressionradicand_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(arg1, math_expression_utilities.$const9$NthRootExpressionFn)) {
            v_answer = cycl_utilities.nat_arg2(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 68056L)
    public static SubLObject test_removal_expressionradicand_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 69490L)
    public static SubLObject removal_expressionindex_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(arg1, math_expression_utilities.$const9$NthRootExpressionFn)) {
            v_answer = cycl_utilities.nat_arg1(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 69961L)
    public static SubLObject test_removal_expressionindex_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 71462L)
    public static SubLObject removal_absolutevalueofexpression_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(arg1, math_expression_utilities.$const149$AbsoluteValueExpressionFn)) {
            v_answer = cycl_utilities.nat_arg1(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 71949L)
    public static SubLObject test_removal_absolutevalueofexpression_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 73543L)
    public static SubLObject removal_expressionenclosed_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = math_expression_enclosed_expression(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 73965L)
    public static SubLObject math_expression_enclosed_expression(final SubLObject math_expression) {
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_any_of_functors_p(math_expression, math_expression_utilities.$math_expression_enclosure_fns$.getGlobalValue())) {
            v_answer = cycl_utilities.nat_arg1(math_expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return v_answer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 74210L)
    public static SubLObject test_removal_expressionenclosed_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 75785L)
    public static SubLObject removal_expressionaddends_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject cdolist_list_var;
        final SubLObject answers = cdolist_list_var = math_expression_addends(arg1);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        v_answer = cdolist_list_var.first();
        while (math_expression_utilities.NIL != cdolist_list_var) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_answer = cdolist_list_var.first();
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 76206L)
    public static SubLObject math_expression_addends(final SubLObject math_expression) {
        SubLObject answers = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(math_expression, math_expression_utilities.$const59$InfixPlusFn)) {
            answers = conses_high.copy_list(cycl_utilities.nat_args(math_expression, (SubLObject)math_expression_utilities.UNPROVIDED));
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(math_expression, math_expression_utilities.$const14$MathExpressionFn)) {
            SubLObject elems = (SubLObject)math_expression_utilities.NIL;
            SubLObject ops = (SubLObject)math_expression_utilities.NIL;
            SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op_pos = (SubLObject)math_expression_utilities.NIL;
            list_var = cycl_utilities.nat_args(math_expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            elem_or_op = list_var.first();
            for (elem_or_op_pos = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), elem_or_op = list_var.first(), elem_or_op_pos = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, elem_or_op_pos)) {
                if (math_expression_utilities.NIL != Numbers.oddp(elem_or_op_pos)) {
                    ops = (SubLObject)ConsesLow.cons(elem_or_op, ops);
                }
                else {
                    elems = (SubLObject)ConsesLow.cons(elem_or_op, elems);
                }
            }
            ops = list_utilities.fast_remove_duplicates(ops, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != list_utilities.singletonP(ops) && math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const59$InfixPlusFn, ops.first())) {
                answers = Sequences.nreverse(elems);
            }
        }
        return answers;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 76843L)
    public static SubLObject test_removal_expressionaddends_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 78867L)
    public static SubLObject removal_expressionfactors_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject cdolist_list_var;
        final SubLObject answers = cdolist_list_var = math_expression_factors(arg1);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        v_answer = cdolist_list_var.first();
        while (math_expression_utilities.NIL != cdolist_list_var) {
            final SubLObject v_bindings = unification_utilities.term_unify(math_expression_unenclose(v_answer), arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
            cdolist_list_var = cdolist_list_var.rest();
            v_answer = cdolist_list_var.first();
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 79316L)
    public static SubLObject math_expression_factors(final SubLObject math_expression) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject answers = (SubLObject)math_expression_utilities.NIL;
        thread.resetMultipleValues();
        final SubLObject elems = math_expression_elems_and_ops_for_multiplication_and_division(math_expression);
        final SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym23$MATH_EXPRESSION_MULTIPLICATION_OP_P, ops, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            answers = Sequences.nreverse(elems);
        }
        answers = Sequences.remove(math_expression, answers, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        return answers;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 79702L)
    public static SubLObject test_removal_expressionfactors_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 82439L)
    public static SubLObject removal_expressionaddendlist_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(arg1, math_expression_utilities.$const59$InfixPlusFn)) {
            v_answer = conses_high.copy_list(cycl_utilities.nat_args(arg1, (SubLObject)math_expression_utilities.UNPROVIDED));
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(arg1, math_expression_utilities.$const14$MathExpressionFn)) {
            SubLObject elems = (SubLObject)math_expression_utilities.NIL;
            SubLObject ops = (SubLObject)math_expression_utilities.NIL;
            SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op_pos = (SubLObject)math_expression_utilities.NIL;
            list_var = cycl_utilities.nat_args(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
            elem_or_op = list_var.first();
            for (elem_or_op_pos = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), elem_or_op = list_var.first(), elem_or_op_pos = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, elem_or_op_pos)) {
                if (math_expression_utilities.NIL != Numbers.oddp(elem_or_op_pos)) {
                    ops = (SubLObject)ConsesLow.cons(elem_or_op, ops);
                }
                else {
                    elems = (SubLObject)ConsesLow.cons(elem_or_op, elems);
                }
            }
            ops = list_utilities.fast_remove_duplicates(ops, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != list_utilities.singletonP(ops) && math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const59$InfixPlusFn, ops.first())) {
                v_answer = Sequences.nreverse(elems);
            }
        }
        if (math_expression_utilities.NIL != v_answer) {
            v_answer = el_utilities.make_el_list(v_answer, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 83354L)
    public static SubLObject test_removal_expressionaddendlist_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 86162L)
    public static SubLObject removal_expressionfactorlist_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        thread.resetMultipleValues();
        final SubLObject elems = math_expression_elems_and_ops(arg1);
        final SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym23$MATH_EXPRESSION_MULTIPLICATION_OP_P, ops, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            v_answer = elems;
        }
        if (math_expression_utilities.NIL != v_answer) {
            v_answer = el_utilities.make_el_list(Mapping.mapcar((SubLObject)math_expression_utilities.$sym175$MATH_EXPRESSION_UNENCLOSE, v_answer), (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 86789L)
    public static SubLObject test_removal_expressionfactorlist_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 89757L)
    public static SubLObject removal_expressionisevaluatable_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject expression = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        thread.resetMultipleValues();
        final SubLObject evaluatableP = math_expression_is_evaluatableP(expression);
        final SubLObject reason = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != evaluatableP) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            return (SubLObject)math_expression_utilities.NIL;
        }
        return reason;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 90112L)
    public static SubLObject math_expression_is_evaluatableP(SubLObject expression) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (math_expression_utilities.NIL != math_expression_enclosure_fn_p(cycl_utilities.nat_functor(expression))) {
            expression = cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != math_expression_quant_fn_p(expression)) {
            return Values.values((SubLObject)math_expression_utilities.NIL, (SubLObject)math_expression_utilities.$kw181$EXPRESSION_IS_A_MATH_QUANTITY);
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const17$PrefixMinusFn) && math_expression_utilities.NIL == math_expression_is_evaluatableP(cycl_utilities.atomic_sentence_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED))) {
            return Values.values((SubLObject)math_expression_utilities.NIL, (SubLObject)math_expression_utilities.$kw182$EXPRESSION_IS_A_NEGATED_UNEVALUATABLE_EXPRESSION);
        }
        if (math_expression_utilities.NIL != cycl_utilities.expression_find_if((SubLObject)math_expression_utilities.$sym183$MATH_EXPRESSION_VAR_P, expression, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return Values.values((SubLObject)math_expression_utilities.NIL, (SubLObject)math_expression_utilities.$kw184$SOME_OPERAND_IS_A_VARIABLE);
        }
        if (math_expression_utilities.NIL != Sequences.find_if((SubLObject)math_expression_utilities.$sym185$MATH_EXPRESSION_WITH_SOME_OPERATOR_P, cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED) && math_expression_utilities.NIL != list_utilities.find_if_not((SubLObject)math_expression_utilities.$sym186$MATH_EXPRESSION_QUANT_FN_OR_MINUS_QUANT_FN_P, math_expression_elems_and_ops(expression), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return Values.values((SubLObject)math_expression_utilities.NIL, (SubLObject)math_expression_utilities.$kw187$SOME_OPERAND_IS_A_MATH_EXPRESSION);
        }
        thread.resetMultipleValues();
        final SubLObject value = math_expression_evaluate_int(expression);
        final SubLObject type = thread.secondMultipleValue();
        final SubLObject reason = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL == value) {
            return Values.values((SubLObject)math_expression_utilities.NIL, reason);
        }
        return Values.values((SubLObject)math_expression_utilities.T, (SubLObject)math_expression_utilities.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 91473L)
    public static SubLObject math_expression_evaluate(final SubLObject expression) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)math_expression_utilities.NIL;
        thread.resetMultipleValues();
        SubLObject v_answer = math_expression_evaluate_int(expression);
        final SubLObject units = thread.secondMultipleValue();
        final SubLObject reason = thread.thirdMultipleValue();
        final SubLObject first_expression_to_evaluate = thread.fourthMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != v_answer && math_expression_utilities.NIL != units && math_expression_utilities.NIL == reason) {
            v_answer = arithmetic.arithmetic_answer(v_answer);
            final SubLObject negateP = (SubLObject)SubLObjectFactory.makeBoolean(v_answer.isNumber() && v_answer.isNegative());
            if (math_expression_utilities.NIL != negateP) {
                v_answer = Numbers.minus(v_answer);
            }
            if (math_expression_utilities.NIL != kb_utilities.kbeq(units, math_expression_utilities.$const188$Unity)) {
                result = el_utilities.make_unary_formula(math_expression_utilities.$const15$MathQuantFn, v_answer);
            }
            else {
                result = el_utilities.make_unary_formula(math_expression_utilities.$const15$MathQuantFn, el_utilities.make_unary_formula(units, v_answer));
            }
            if (math_expression_utilities.NIL != negateP) {
                result = el_utilities.make_unary_formula(math_expression_utilities.$const17$PrefixMinusFn, result);
            }
        }
        return Values.values(result, reason, first_expression_to_evaluate);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 92829L)
    public static SubLObject math_expression_evaluate_int(final SubLObject expression) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject expression_type = cycl_utilities.nat_functor(expression);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        SubLObject units = (SubLObject)math_expression_utilities.NIL;
        SubLObject reason = (SubLObject)math_expression_utilities.NIL;
        SubLObject first_expression_to_evaluate = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const15$MathQuantFn, expression_type)) {
            final SubLObject interval = cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            thread.resetMultipleValues();
            final SubLObject units_$2 = quantities.explode_interval_ignoring_unevaluatable(interval);
            final SubLObject v_answer_$3 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            units = units_$2;
            v_answer = v_answer_$3;
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const88$InfixMinusFn, expression_type)) {
            thread.resetMultipleValues();
            final SubLObject minuend = math_expression_evaluate_int(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject minuend_units = thread.secondMultipleValue();
            final SubLObject minuend_reason = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            thread.resetMultipleValues();
            final SubLObject subtrahend = math_expression_evaluate_int(cycl_utilities.nat_arg2(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject subtrahend_units = thread.secondMultipleValue();
            final SubLObject subtrahend_reason = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (math_expression_utilities.NIL != minuend_reason || math_expression_utilities.NIL != subtrahend_reason) {
                reason = math_expression_failed_evaluation_reasons_merge(minuend_reason, subtrahend_reason);
            }
            if (math_expression_utilities.NIL == reason) {
                if (math_expression_utilities.NIL == unification_utilities.term_unify(minuend_units, subtrahend_units, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                    reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(expression), new SubLObject[] { math_expression_utilities.$str189$_units_do_not_match__, format_nil.format_nil_s_no_copy(minuend_units), math_expression_utilities.$str190$_, format_nil.format_nil_s_no_copy(subtrahend_units) });
                }
                else if (!minuend.isNumber()) {
                    reason = Sequences.cconcatenate((SubLObject)math_expression_utilities.$str191$Minuend_, new SubLObject[] { format_nil.format_nil_s_no_copy(minuend), math_expression_utilities.$str192$_is_not_a_NUMBERP_ });
                }
                else if (!subtrahend.isNumber()) {
                    reason = Sequences.cconcatenate((SubLObject)math_expression_utilities.$str193$Subtrahend_, new SubLObject[] { format_nil.format_nil_s_no_copy(subtrahend), math_expression_utilities.$str192$_is_not_a_NUMBERP_ });
                }
                else {
                    v_answer = Numbers.subtract(minuend, subtrahend);
                    units = minuend_units;
                }
            }
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const194$InfixSlashDivideFn, expression_type) || math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const195$InfixDivideFn, expression_type) || math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const196$HorizontalDivideFn, expression_type)) {
            thread.resetMultipleValues();
            final SubLObject numerator = math_expression_evaluate_int(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject numerator_units = thread.secondMultipleValue();
            final SubLObject numerator_reason = thread.thirdMultipleValue();
            final SubLObject numerator_first_expression_to_evaluate = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            thread.resetMultipleValues();
            final SubLObject denominator = math_expression_evaluate_int(cycl_utilities.nat_arg2(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject denominator_units = thread.secondMultipleValue();
            final SubLObject denominator_reason = thread.thirdMultipleValue();
            final SubLObject denominator_first_expression_to_evaluate = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            if (math_expression_utilities.NIL != numerator_reason || math_expression_utilities.NIL != denominator_reason) {
                reason = math_expression_failed_evaluation_reasons_merge(numerator_reason, denominator_reason);
            }
            if (math_expression_utilities.NIL == reason) {
                v_answer = (SubLObject)((!numerator.isNumber() || !denominator.isNumber()) ? math_expression_utilities.NIL : (Numbers.mod(numerator, denominator).isZero() ? Numbers.round(Numbers.divide(numerator, denominator), (SubLObject)math_expression_utilities.UNPROVIDED) : (Numbers.divide(numerator, denominator).numL((SubLObject)math_expression_utilities.ONE_INTEGER) ? el_utilities.make_binary_formula(math_expression_utilities.$const197$SimpleFractionFn, numerator, denominator) : el_utilities.make_ternary_formula(math_expression_utilities.$const198$MixedFractionFn, Numbers.round(Numbers.divide(numerator, denominator), (SubLObject)math_expression_utilities.UNPROVIDED), Numbers.mod(numerator, denominator), denominator))));
                units = czer_main.canonicalize_term(quantities.unit_quotient(numerator_units, denominator_units), (SubLObject)math_expression_utilities.UNPROVIDED);
                first_expression_to_evaluate = ((math_expression_utilities.NIL != numerator_first_expression_to_evaluate) ? numerator_first_expression_to_evaluate : ((math_expression_utilities.NIL != denominator_first_expression_to_evaluate) ? denominator_first_expression_to_evaluate : expression));
            }
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const59$InfixPlusFn, expression_type)) {
            SubLObject sub_answers = (SubLObject)math_expression_utilities.NIL;
            SubLObject sub_unitss = (SubLObject)math_expression_utilities.NIL;
            SubLObject sub_reasons = (SubLObject)math_expression_utilities.NIL;
            SubLObject cdolist_list_var = cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            SubLObject sub_expression = (SubLObject)math_expression_utilities.NIL;
            sub_expression = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                thread.resetMultipleValues();
                final SubLObject sub_answer = math_expression_evaluate_int(sub_expression);
                final SubLObject sub_units = thread.secondMultipleValue();
                final SubLObject sub_reason = thread.thirdMultipleValue();
                final SubLObject sub_first_expression_to_evaluate = thread.fourthMultipleValue();
                thread.resetMultipleValues();
                sub_answers = (SubLObject)ConsesLow.cons(sub_answer, sub_answers);
                sub_unitss = (SubLObject)ConsesLow.cons(sub_units, sub_unitss);
                sub_reasons = (SubLObject)ConsesLow.cons(sub_reason, sub_reasons);
                if (math_expression_utilities.NIL == first_expression_to_evaluate) {
                    first_expression_to_evaluate = sub_first_expression_to_evaluate;
                }
                cdolist_list_var = cdolist_list_var.rest();
                sub_expression = cdolist_list_var.first();
            }
            if (math_expression_utilities.NIL != Sequences.find_if((SubLObject)math_expression_utilities.$sym199$STRINGP, sub_reasons, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                reason = string_utilities.bunge_with_string(list_utilities.find_all_if((SubLObject)math_expression_utilities.$sym199$STRINGP, sub_reasons, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.$str200$__);
            }
            if (math_expression_utilities.NIL == list_utilities.singletonP(list_utilities.fast_remove_duplicates(sub_unitss, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED))) {
                reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(list_utilities.fast_remove_duplicates(sub_unitss, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)), new SubLObject[] { math_expression_utilities.$str201$_has_mismatched_units__, format_nil.format_nil_s_no_copy((SubLObject)math_expression_utilities.NIL) });
            }
            if (math_expression_utilities.NIL == reason && math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym202$EXTENDED_NUMBER_P, sub_answers, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                SubLObject catch_this = (SubLObject)math_expression_utilities.NIL;
                try {
                    thread.throwStack.push(math_expression_utilities.$kw203$UNEVALUATABLE);
                    v_answer = arithmetic.cyc_plus(sub_answers);
                    units = sub_unitss.first();
                }
                catch (Throwable ccatch_env_var) {
                    catch_this = Errors.handleThrowable(ccatch_env_var, (SubLObject)math_expression_utilities.$kw203$UNEVALUATABLE);
                }
                finally {
                    thread.throwStack.pop();
                }
            }
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const204$ImplicitTimesFn, expression_type) || math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const72$InfixTimesFn, expression_type) || math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const205$InfixDottedTimesFn, expression_type)) {
            SubLObject sub_answers = (SubLObject)math_expression_utilities.NIL;
            SubLObject sub_unitss = (SubLObject)math_expression_utilities.NIL;
            SubLObject sub_reasons = (SubLObject)math_expression_utilities.NIL;
            SubLObject cdolist_list_var = cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            SubLObject sub_expression = (SubLObject)math_expression_utilities.NIL;
            sub_expression = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                thread.resetMultipleValues();
                final SubLObject sub_answer = math_expression_evaluate_int(sub_expression);
                final SubLObject sub_units = thread.secondMultipleValue();
                final SubLObject sub_reason = thread.thirdMultipleValue();
                final SubLObject sub_first_expression_to_evaluate = thread.fourthMultipleValue();
                thread.resetMultipleValues();
                sub_answers = (SubLObject)ConsesLow.cons(sub_answer, sub_answers);
                sub_unitss = (SubLObject)ConsesLow.cons(sub_units, sub_unitss);
                sub_reasons = (SubLObject)ConsesLow.cons(sub_reason, sub_reasons);
                if (math_expression_utilities.NIL == first_expression_to_evaluate) {
                    first_expression_to_evaluate = sub_first_expression_to_evaluate;
                }
                cdolist_list_var = cdolist_list_var.rest();
                sub_expression = cdolist_list_var.first();
            }
            if (math_expression_utilities.NIL != Sequences.find_if((SubLObject)math_expression_utilities.$sym199$STRINGP, sub_reasons, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                reason = string_utilities.bunge_with_string(list_utilities.find_all_if((SubLObject)math_expression_utilities.$sym199$STRINGP, sub_reasons, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.$str200$__);
            }
            if (math_expression_utilities.NIL == reason) {
                if (math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym206$NUMBERP, sub_answers, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                    v_answer = Functions.apply((SubLObject)math_expression_utilities.$sym207$_, sub_answers);
                }
                final SubLObject useful_units = Sequences.remove(math_expression_utilities.$const188$Unity, sub_unitss, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                if (math_expression_utilities.NIL != useful_units) {
                    if (math_expression_utilities.NIL != list_utilities.singletonP(useful_units)) {
                        units = useful_units.first();
                    }
                    else {
                        units = (SubLObject)ConsesLow.cons(math_expression_utilities.$const208$UnitProductFn, useful_units);
                    }
                }
                if (math_expression_utilities.NIL == first_expression_to_evaluate) {
                    first_expression_to_evaluate = el_utilities.make_ternary_formula(math_expression_utilities.$const14$MathExpressionFn, ConsesLow.nth((SubLObject)math_expression_utilities.ONE_INTEGER, expression), expression_type, ConsesLow.nth((SubLObject)math_expression_utilities.TWO_INTEGER, expression));
                }
            }
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const149$AbsoluteValueExpressionFn, expression_type)) {
            thread.resetMultipleValues();
            final SubLObject sub_answer2 = math_expression_evaluate_int(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject sub_units2 = thread.secondMultipleValue();
            final SubLObject sub_reason2 = thread.thirdMultipleValue();
            final SubLObject sub_first_expression_to_evaluate2 = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            v_answer = (sub_answer2.isNumber() ? Numbers.abs(sub_answer2) : sub_answer2);
            units = sub_units2;
            reason = sub_reason2;
            first_expression_to_evaluate = ((math_expression_utilities.NIL != sub_first_expression_to_evaluate2) ? sub_first_expression_to_evaluate2 : expression);
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const17$PrefixMinusFn, expression_type)) {
            thread.resetMultipleValues();
            final SubLObject sub_answer2 = math_expression_evaluate_int(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject sub_units2 = thread.secondMultipleValue();
            final SubLObject sub_reason2 = thread.thirdMultipleValue();
            final SubLObject sub_first_expression_to_evaluate2 = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            if (sub_answer2.isNumber()) {
                v_answer = Numbers.minus(sub_answer2);
                units = sub_units2;
                first_expression_to_evaluate = ((math_expression_utilities.NIL != sub_first_expression_to_evaluate2) ? sub_first_expression_to_evaluate2 : expression);
            }
            else {
                reason = sub_reason2;
            }
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const209$ParenthesizedMathFn, expression_type)) {
            thread.resetMultipleValues();
            final SubLObject v_answer_$4 = math_expression_evaluate_int(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject units_$3 = thread.secondMultipleValue();
            final SubLObject reason_$6 = thread.thirdMultipleValue();
            final SubLObject first_expression_to_evaluate_$7 = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            v_answer = v_answer_$4;
            units = units_$3;
            reason = reason_$6;
            first_expression_to_evaluate = first_expression_to_evaluate_$7;
            if (first_expression_to_evaluate.equal(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED))) {
                first_expression_to_evaluate = expression;
            }
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const210$BracketedMathFn, expression_type)) {
            thread.resetMultipleValues();
            final SubLObject v_answer_$5 = math_expression_evaluate_int(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject units_$4 = thread.secondMultipleValue();
            final SubLObject reason_$7 = thread.thirdMultipleValue();
            final SubLObject first_expression_to_evaluate_$8 = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            v_answer = v_answer_$5;
            units = units_$4;
            reason = reason_$7;
            first_expression_to_evaluate = first_expression_to_evaluate_$8;
            if (first_expression_to_evaluate.equal(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED))) {
                first_expression_to_evaluate = expression;
            }
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const8$PowerExpressionFn, expression_type)) {
            thread.resetMultipleValues();
            final SubLObject base = math_expression_evaluate_int(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject base_units = thread.secondMultipleValue();
            final SubLObject base_reason = thread.thirdMultipleValue();
            final SubLObject base_first_expression_to_evaluate = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            thread.resetMultipleValues();
            final SubLObject exponent = math_expression_evaluate_int(cycl_utilities.nat_arg2(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject exponent_units = thread.secondMultipleValue();
            final SubLObject exponent_reason = thread.thirdMultipleValue();
            final SubLObject exponent_first_expression_to_evaluate = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            if (math_expression_utilities.NIL != base_reason || math_expression_utilities.NIL != exponent_reason) {
                reason = math_expression_failed_evaluation_reasons_merge(base_reason, exponent_reason);
            }
            if (math_expression_utilities.NIL == reason) {
                first_expression_to_evaluate = ((math_expression_utilities.NIL != exponent_first_expression_to_evaluate) ? exponent_first_expression_to_evaluate : ((math_expression_utilities.NIL != base_first_expression_to_evaluate) ? base_first_expression_to_evaluate : expression));
                if (math_expression_utilities.NIL == kb_utilities.kbeq(math_expression_utilities.$const188$Unity, exponent_units)) {
                    reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(expression), (SubLObject)math_expression_utilities.$str211$_exponent_has_units);
                }
                else {
                    v_answer = Numbers.expt(base, exponent);
                    if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const188$Unity, base_units)) {
                        units = base_units;
                    }
                    else if (math_expression_utilities.NIL != number_utilities.zero_number_p(exponent)) {
                        units = math_expression_utilities.$const188$Unity;
                    }
                    else if (math_expression_utilities.NIL != number_utilities.onep(exponent)) {
                        units = base_units;
                    }
                    else if (exponent.isInteger()) {
                        units = (SubLObject)ConsesLow.cons(math_expression_utilities.$const208$UnitProductFn, (SubLObject)ConsesLow.make_list(exponent, base_units));
                    }
                    else {
                        v_answer = (SubLObject)math_expression_utilities.NIL;
                        reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(expression), (SubLObject)math_expression_utilities.$str212$_base_has_units_but_exponent_not_);
                        first_expression_to_evaluate = (SubLObject)math_expression_utilities.NIL;
                    }
                }
            }
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const9$NthRootExpressionFn, expression_type)) {
            thread.resetMultipleValues();
            final SubLObject index = math_expression_evaluate_int(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject index_units = thread.secondMultipleValue();
            final SubLObject index_reason = thread.thirdMultipleValue();
            final SubLObject index_first_expression_to_evaluate = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            thread.resetMultipleValues();
            final SubLObject radicand = math_expression_evaluate_int(cycl_utilities.nat_arg2(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject radicand_units = thread.secondMultipleValue();
            final SubLObject radicand_reason = thread.thirdMultipleValue();
            final SubLObject radicand_first_expression_to_evaluate = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            if (math_expression_utilities.NIL != index_reason || math_expression_utilities.NIL != radicand_reason) {
                reason = math_expression_failed_evaluation_reasons_merge(index_reason, radicand_reason);
            }
            if (math_expression_utilities.NIL == reason) {
                first_expression_to_evaluate = ((math_expression_utilities.NIL != radicand_first_expression_to_evaluate) ? radicand_first_expression_to_evaluate : ((math_expression_utilities.NIL != index_first_expression_to_evaluate) ? index_first_expression_to_evaluate : expression));
                if (math_expression_utilities.NIL == kb_utilities.kbeq(math_expression_utilities.$const188$Unity, radicand_units)) {
                    reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(expression), (SubLObject)math_expression_utilities.$str213$_radicand_has_units);
                }
                else if (math_expression_utilities.NIL != number_utilities.zero_number_p(radicand)) {
                    reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(expression), (SubLObject)math_expression_utilities.$str214$_radicand_is_zero);
                }
                else {
                    v_answer = Numbers.expt(radicand, Numbers.divide((SubLObject)math_expression_utilities.ONE_INTEGER, index));
                    if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const188$Unity, index_units)) {
                        units = index_units;
                    }
                    else if (math_expression_utilities.NIL != number_utilities.onep(radicand)) {
                        units = index_units;
                    }
                    else if (radicand.isInteger()) {
                        v_answer = (SubLObject)math_expression_utilities.NIL;
                        reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(expression), (SubLObject)math_expression_utilities.$str215$_index_has_units_but_nth_root_of_);
                    }
                    else {
                        v_answer = (SubLObject)math_expression_utilities.NIL;
                        reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(expression), (SubLObject)math_expression_utilities.$str216$_index_has_units_but_radicand_not);
                        first_expression_to_evaluate = (SubLObject)math_expression_utilities.NIL;
                    }
                }
            }
        }
        else if (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const14$MathExpressionFn, expression_type)) {
            final SubLObject args = cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != list_utilities.tripleP(args)) {
                final SubLObject operator = cycl_utilities.nat_arg2(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
                final SubLObject arg1 = cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
                final SubLObject arg2 = cycl_utilities.nat_arg3(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
                thread.resetMultipleValues();
                final SubLObject v_answer_$6 = math_expression_evaluate_int((SubLObject)ConsesLow.list(operator, arg1, arg2));
                final SubLObject units_$5 = thread.secondMultipleValue();
                final SubLObject reason_$8 = thread.thirdMultipleValue();
                thread.resetMultipleValues();
                v_answer = v_answer_$6;
                units = units_$5;
                reason = reason_$8;
                if (math_expression_utilities.NIL == reason) {
                    first_expression_to_evaluate = expression;
                }
            }
            else {
                SubLObject position_of_highest_precedent_operator = (SubLObject)math_expression_utilities.NIL;
                SubLObject highest_precedence = (SubLObject)math_expression_utilities.MINUS_ONE_INTEGER;
                thread.resetMultipleValues();
                final SubLObject elems = math_expression_elems_and_ops(expression);
                final SubLObject ops = thread.secondMultipleValue();
                thread.resetMultipleValues();
                if (math_expression_utilities.NIL == first_expression_to_evaluate) {
                    SubLObject csome_list_var = elems;
                    SubLObject elem = (SubLObject)math_expression_utilities.NIL;
                    elem = csome_list_var.first();
                    while (math_expression_utilities.NIL == first_expression_to_evaluate && math_expression_utilities.NIL != csome_list_var) {
                        thread.resetMultipleValues();
                        final SubLObject sub_answer3 = math_expression_evaluate_int(elem);
                        final SubLObject sub_units3 = thread.secondMultipleValue();
                        final SubLObject sub_reason3 = thread.thirdMultipleValue();
                        final SubLObject sub_first_expression_to_evaluate3 = thread.fourthMultipleValue();
                        thread.resetMultipleValues();
                        first_expression_to_evaluate = sub_first_expression_to_evaluate3;
                        csome_list_var = csome_list_var.rest();
                        elem = csome_list_var.first();
                    }
                }
                SubLObject cdolist_list_var2 = ops;
                SubLObject op = (SubLObject)math_expression_utilities.NIL;
                op = cdolist_list_var2.first();
                while (math_expression_utilities.NIL != cdolist_list_var2) {
                    final SubLObject op_precedence = math_expression_infix_operator_precedence_rank(op);
                    if (op_precedence.numG(highest_precedence)) {
                        highest_precedence = op_precedence;
                        position_of_highest_precedent_operator = Sequences.position(op, args, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                    }
                    cdolist_list_var2 = cdolist_list_var2.rest();
                    op = cdolist_list_var2.first();
                }
                if (math_expression_utilities.NIL == position_of_highest_precedent_operator) {
                    reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(expression), (SubLObject)math_expression_utilities.$str217$_could_not_find_any_operators_in_);
                }
                else if (math_expression_utilities.ZERO_INTEGER.numE(position_of_highest_precedent_operator) || Numbers.subtract(Sequences.length(args), (SubLObject)math_expression_utilities.ONE_INTEGER).numE(position_of_highest_precedent_operator)) {
                    reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(expression), (SubLObject)math_expression_utilities.$str218$_invalid_due_to_operation_as_firs);
                }
                else {
                    final SubLObject operator2 = ConsesLow.nth(position_of_highest_precedent_operator, args);
                    final SubLObject arg3 = ConsesLow.nth(Numbers.subtract(position_of_highest_precedent_operator, (SubLObject)math_expression_utilities.ONE_INTEGER), args);
                    final SubLObject arg4 = ConsesLow.nth(Numbers.add(position_of_highest_precedent_operator, (SubLObject)math_expression_utilities.ONE_INTEGER), args);
                    final SubLObject sub_expression2 = (SubLObject)ConsesLow.list(math_expression_utilities.$const14$MathExpressionFn, arg3, operator2, arg4);
                    thread.resetMultipleValues();
                    final SubLObject sub_answer3 = math_expression_evaluate_int(sub_expression2);
                    final SubLObject sub_units3 = thread.secondMultipleValue();
                    final SubLObject sub_reason3 = thread.thirdMultipleValue();
                    final SubLObject sub_first_expression_to_evaluate3 = thread.fourthMultipleValue();
                    thread.resetMultipleValues();
                    if (math_expression_utilities.NIL == sub_answer3 || math_expression_utilities.NIL == sub_units3 || math_expression_utilities.NIL != sub_reason3) {
                        v_answer = (SubLObject)math_expression_utilities.NIL;
                        reason = sub_reason3;
                    }
                    if (math_expression_utilities.NIL == reason) {
                        if (math_expression_utilities.NIL == first_expression_to_evaluate) {
                            first_expression_to_evaluate = ((math_expression_utilities.NIL != sub_first_expression_to_evaluate3) ? sub_first_expression_to_evaluate3 : el_utilities.make_ternary_formula(math_expression_utilities.$const14$MathExpressionFn, arg3, operator2, arg4));
                        }
                        final SubLObject sub_quant_fn = (math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const188$Unity, sub_units3)) ? el_utilities.make_unary_formula(math_expression_utilities.$const15$MathQuantFn, sub_answer3) : el_utilities.make_unary_formula(math_expression_utilities.$const15$MathQuantFn, el_utilities.make_unary_formula(sub_units3, sub_answer3));
                        final SubLObject new_expression = list_utilities.substitute_sequence((SubLObject)ConsesLow.list(sub_quant_fn), (SubLObject)ConsesLow.list(arg3, operator2, arg4), conses_high.copy_list(expression));
                        if (expression.equal(new_expression)) {
                            reason = (SubLObject)math_expression_utilities.$str219$_S_was_not_solvable_by_sub_evalua;
                        }
                        if (math_expression_utilities.NIL == reason) {
                            thread.resetMultipleValues();
                            final SubLObject v_answer_$7 = math_expression_evaluate_int(new_expression);
                            final SubLObject units_$6 = thread.secondMultipleValue();
                            final SubLObject reason_$9 = thread.thirdMultipleValue();
                            thread.resetMultipleValues();
                            v_answer = v_answer_$7;
                            units = units_$6;
                            reason = reason_$9;
                        }
                    }
                }
            }
        }
        else {
            v_answer = (SubLObject)math_expression_utilities.NIL;
            reason = Sequences.cconcatenate(format_nil.format_nil_s_no_copy(expression), (SubLObject)math_expression_utilities.$str220$_was_not_a_math_expression);
        }
        if (math_expression_utilities.NIL != units) {
            units = czer_main.canonicalize_term(units, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        else {
            units = math_expression_utilities.$const188$Unity;
        }
        return Values.values(v_answer, units, reason, first_expression_to_evaluate);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 106306L)
    public static SubLObject math_expression_failed_evaluation_reasons_merge(final SubLObject reason1, final SubLObject reason2) {
        if (math_expression_utilities.NIL != reason1 && math_expression_utilities.NIL != reason2) {
            return Sequences.cconcatenate(reason1, new SubLObject[] { math_expression_utilities.$str200$__, reason2 });
        }
        if (math_expression_utilities.NIL != reason1) {
            return reason1;
        }
        if (math_expression_utilities.NIL != reason2) {
            return reason2;
        }
        return (SubLObject)math_expression_utilities.$str221$Unknown_reason;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 106576L)
    public static SubLObject math_expression_operand_quantity_type(final SubLObject expression) {
        return math_quant_value_type(math_expression_quant_value(expression));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 106718L)
    public static SubLObject math_quant_value_type(final SubLObject value) {
        if (value.isCons()) {
            return value.first();
        }
        return math_expression_utilities.$const188$Unity;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 106843L)
    public static SubLObject test_removal_expressionisevaluatable_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 112393L)
    public static SubLObject removal_mathexpressionoperatorlist_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject answers = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(arg1, math_expression_utilities.$const14$MathExpressionFn)) {
            thread.resetMultipleValues();
            final SubLObject elems = math_expression_elems_and_ops(arg1);
            final SubLObject ops = thread.secondMultipleValue();
            thread.resetMultipleValues();
            answers = ops;
        }
        final SubLObject v_bindings = unification_utilities.term_unify((math_expression_utilities.NIL != answers) ? el_utilities.make_el_list(answers, (SubLObject)math_expression_utilities.UNPROVIDED) : math_expression_utilities.$const230$TheEmptyList, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL != v_bindings) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 112981L)
    public static SubLObject test_removal_mathexpressionoperatorlist_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 114800L)
    public static SubLObject removal_mathexpressionoperatorcount_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject answers = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_grammar.cycl_nat_p(arg1)) {
            final SubLObject operator = cycl_utilities.nat_functor(arg1);
            if (math_expression_utilities.NIL != kb_utilities.kbeq(operator, math_expression_utilities.$const14$MathExpressionFn)) {
                thread.resetMultipleValues();
                final SubLObject elems = math_expression_elems_and_ops(arg1);
                final SubLObject ops = thread.secondMultipleValue();
                thread.resetMultipleValues();
                answers = ops;
            }
            else if (math_expression_utilities.NIL != math_expression_infix_op_p(operator) || math_expression_utilities.NIL != math_expression_enclosure_fn_p(operator) || math_expression_utilities.NIL != math_expression_unary_prefix_op_p(operator) || math_expression_utilities.NIL != math_expression_unary_surround_op_p(operator)) {
                answers = (SubLObject)ConsesLow.list(operator);
            }
        }
        final SubLObject v_bindings = unification_utilities.term_unify(Sequences.length(answers), arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL != v_bindings) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 115685L)
    public static SubLObject test_removal_mathexpressionoperatorcount_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 116848L)
    public static SubLObject math_expression_elems_and_ops(final SubLObject expression) {
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const14$MathExpressionFn)) {
            SubLObject elems = (SubLObject)math_expression_utilities.NIL;
            SubLObject ops = (SubLObject)math_expression_utilities.NIL;
            SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op_pos = (SubLObject)math_expression_utilities.NIL;
            list_var = cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            elem_or_op = list_var.first();
            for (elem_or_op_pos = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), elem_or_op = list_var.first(), elem_or_op_pos = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, elem_or_op_pos)) {
                if (math_expression_utilities.NIL != Numbers.oddp(elem_or_op_pos)) {
                    ops = (SubLObject)ConsesLow.cons(elem_or_op, ops);
                }
                else {
                    elems = (SubLObject)ConsesLow.cons(elem_or_op, elems);
                }
            }
            if (math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym238$MATH_EXPRESSION_INFIX_OP_P, ops, (SubLObject)math_expression_utilities.UNPROVIDED) && math_expression_utilities.NIL != list_utilities.not_any_in_list((SubLObject)math_expression_utilities.$sym238$MATH_EXPRESSION_INFIX_OP_P, elems, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                return Values.values(Sequences.nreverse(elems), Sequences.nreverse(ops));
            }
        }
        if (math_expression_utilities.NIL != math_expression_p(expression)) {
            return Values.values(conses_high.copy_list(cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED)), (SubLObject)ConsesLow.list(cycl_utilities.nat_functor(expression)));
        }
        return Values.values((SubLObject)math_expression_utilities.NIL, (SubLObject)math_expression_utilities.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 117485L)
    public static SubLObject make_math_expression(final SubLObject elems, final SubLObject ops) {
        SubLObject result = (SubLObject)math_expression_utilities.NIL;
        SubLObject elem = (SubLObject)math_expression_utilities.NIL;
        SubLObject elem_$18 = (SubLObject)math_expression_utilities.NIL;
        SubLObject op = (SubLObject)math_expression_utilities.NIL;
        SubLObject op_$19 = (SubLObject)math_expression_utilities.NIL;
        elem = elems;
        elem_$18 = elem.first();
        op = ops;
        op_$19 = op.first();
        while (math_expression_utilities.NIL != op || math_expression_utilities.NIL != elem) {
            result = (SubLObject)ConsesLow.cons(elem_$18, result);
            if (math_expression_utilities.NIL != op_$19) {
                result = (SubLObject)ConsesLow.cons(op_$19, result);
            }
            elem = elem.rest();
            elem_$18 = elem.first();
            op = op.rest();
            op_$19 = op.first();
        }
        result = (SubLObject)ConsesLow.cons(math_expression_utilities.$const14$MathExpressionFn, Sequences.nreverse(result));
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 117753L)
    public static SubLObject math_expression_elems_and_ops_for_additions_and_subtractions(final SubLObject expression) {
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const14$MathExpressionFn)) {
            SubLObject elems = (SubLObject)math_expression_utilities.NIL;
            SubLObject ops = (SubLObject)math_expression_utilities.NIL;
            SubLObject add_subtract_op_nums = (SubLObject)math_expression_utilities.NIL;
            SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op_pos = (SubLObject)math_expression_utilities.NIL;
            list_var = expression;
            elem_or_op = list_var.first();
            for (elem_or_op_pos = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), elem_or_op = list_var.first(), elem_or_op_pos = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, elem_or_op_pos)) {
                if (math_expression_utilities.NIL != Numbers.evenp(elem_or_op_pos) && math_expression_utilities.NIL != math_expression_addition_or_subtraction_op_p(elem_or_op)) {
                    add_subtract_op_nums = (SubLObject)ConsesLow.cons(elem_or_op_pos, add_subtract_op_nums);
                }
            }
            add_subtract_op_nums = Sequences.nreverse(add_subtract_op_nums);
            if (math_expression_utilities.NIL == add_subtract_op_nums) {
                return Values.values((SubLObject)ConsesLow.list(expression), (SubLObject)math_expression_utilities.NIL);
            }
            SubLObject start_pos = (SubLObject)math_expression_utilities.ONE_INTEGER;
            SubLObject cdotimes_end_var;
            SubLObject n;
            SubLObject op_pos;
            SubLObject end_pos;
            SubLObject expression_args;
            for (cdotimes_end_var = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, Sequences.length(add_subtract_op_nums)), n = (SubLObject)math_expression_utilities.NIL, n = (SubLObject)math_expression_utilities.ZERO_INTEGER; n.numL(cdotimes_end_var); n = Numbers.add(n, (SubLObject)math_expression_utilities.ONE_INTEGER)) {
                op_pos = ConsesLow.nth(n, add_subtract_op_nums);
                end_pos = ((math_expression_utilities.NIL != op_pos) ? Numbers.subtract(op_pos, (SubLObject)math_expression_utilities.ONE_INTEGER) : Numbers.subtract(Sequences.length(expression), (SubLObject)math_expression_utilities.ONE_INTEGER));
                expression_args = Sequences.subseq(expression, start_pos, Numbers.add(end_pos, (SubLObject)math_expression_utilities.ONE_INTEGER));
                if (math_expression_utilities.NIL != list_utilities.singletonP(expression_args)) {
                    elems = (SubLObject)ConsesLow.cons(expression_args.first(), elems);
                }
                else {
                    elems = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.cons(math_expression_utilities.$const14$MathExpressionFn, expression_args), elems);
                }
                if (math_expression_utilities.NIL != op_pos) {
                    ops = (SubLObject)ConsesLow.cons(ConsesLow.nth(op_pos, expression), ops);
                    start_pos = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, op_pos);
                }
            }
            return Values.values(Sequences.nreverse(elems), Sequences.nreverse(ops));
        }
        else {
            if (math_expression_utilities.NIL != math_addition_or_subtraction_expressionP(expression)) {
                return Values.values(conses_high.copy_list(cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED)), (SubLObject)ConsesLow.list(cycl_utilities.nat_functor(expression)));
            }
            return Values.values((SubLObject)ConsesLow.list(expression), (SubLObject)math_expression_utilities.NIL);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 119990L)
    public static SubLObject math_expression_elems_and_ops_for_addition(final SubLObject expression) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result_elems = (SubLObject)math_expression_utilities.NIL;
        thread.resetMultipleValues();
        final SubLObject elems = math_expression_elems_and_ops_for_additions_and_subtractions(expression);
        final SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        result_elems = (SubLObject)ConsesLow.cons(elems.first(), result_elems);
        SubLObject elem = (SubLObject)math_expression_utilities.NIL;
        SubLObject elem_$20 = (SubLObject)math_expression_utilities.NIL;
        SubLObject op = (SubLObject)math_expression_utilities.NIL;
        SubLObject op_$21 = (SubLObject)math_expression_utilities.NIL;
        elem = elems.rest();
        elem_$20 = elem.first();
        op = ops;
        op_$21 = op.first();
        while (math_expression_utilities.NIL != op || math_expression_utilities.NIL != elem) {
            if (math_expression_utilities.NIL != math_expression_addition_op_p(op_$21)) {
                result_elems = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(math_expression_utilities.$const17$PrefixMinusFn, elem_$20), result_elems);
            }
            else {
                result_elems = (SubLObject)ConsesLow.cons(elem_$20, result_elems);
            }
            elem = elem.rest();
            elem_$20 = elem.first();
            op = op.rest();
            op_$21 = op.first();
        }
        return subl_promotions.values2(Sequences.nreverse(result_elems), (SubLObject)ConsesLow.make_list(Sequences.length(ops), math_expression_utilities.$const59$InfixPlusFn));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 120742L)
    public static SubLObject math_expression_elems_and_ops_for_multiplication_and_division(final SubLObject expression) {
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const14$MathExpressionFn)) {
            SubLObject elems = (SubLObject)math_expression_utilities.NIL;
            SubLObject ops = (SubLObject)math_expression_utilities.NIL;
            SubLObject add_subtract_op_nums = (SubLObject)math_expression_utilities.NIL;
            SubLObject multiply_or_divide_op_nums = (SubLObject)math_expression_utilities.NIL;
            SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_or_op_pos = (SubLObject)math_expression_utilities.NIL;
            list_var = expression;
            elem_or_op = list_var.first();
            for (elem_or_op_pos = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), elem_or_op = list_var.first(), elem_or_op_pos = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, elem_or_op_pos)) {
                if (math_expression_utilities.NIL != Numbers.evenp(elem_or_op_pos)) {
                    if (math_expression_utilities.NIL != math_expression_addition_or_subtraction_op_p(elem_or_op)) {
                        add_subtract_op_nums = (SubLObject)ConsesLow.cons(elem_or_op_pos, add_subtract_op_nums);
                    }
                    if (math_expression_utilities.NIL != math_expression_multiplication_or_divide_op_p(elem_or_op)) {
                        multiply_or_divide_op_nums = (SubLObject)ConsesLow.cons(elem_or_op_pos, multiply_or_divide_op_nums);
                    }
                }
            }
            if (math_expression_utilities.NIL != add_subtract_op_nums) {
                return Values.values((SubLObject)ConsesLow.list(expression), (SubLObject)math_expression_utilities.NIL);
            }
            multiply_or_divide_op_nums = Sequences.nreverse(multiply_or_divide_op_nums);
            if (math_expression_utilities.NIL == multiply_or_divide_op_nums) {
                return Values.values((SubLObject)ConsesLow.list(expression), (SubLObject)math_expression_utilities.NIL);
            }
            SubLObject start_pos = (SubLObject)math_expression_utilities.ONE_INTEGER;
            SubLObject cdotimes_end_var;
            SubLObject n;
            SubLObject op_pos;
            SubLObject end_pos;
            SubLObject expression_args;
            for (cdotimes_end_var = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, Sequences.length(multiply_or_divide_op_nums)), n = (SubLObject)math_expression_utilities.NIL, n = (SubLObject)math_expression_utilities.ZERO_INTEGER; n.numL(cdotimes_end_var); n = Numbers.add(n, (SubLObject)math_expression_utilities.ONE_INTEGER)) {
                op_pos = ConsesLow.nth(n, multiply_or_divide_op_nums);
                end_pos = ((math_expression_utilities.NIL != op_pos) ? Numbers.subtract(op_pos, (SubLObject)math_expression_utilities.ONE_INTEGER) : Numbers.subtract(Sequences.length(expression), (SubLObject)math_expression_utilities.ONE_INTEGER));
                expression_args = Sequences.subseq(expression, start_pos, Numbers.add(end_pos, (SubLObject)math_expression_utilities.ONE_INTEGER));
                if (math_expression_utilities.NIL != list_utilities.singletonP(expression_args)) {
                    elems = (SubLObject)ConsesLow.cons(expression_args.first(), elems);
                }
                else {
                    elems = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.cons(math_expression_utilities.$const14$MathExpressionFn, expression_args), elems);
                }
                if (math_expression_utilities.NIL != op_pos) {
                    ops = (SubLObject)ConsesLow.cons(ConsesLow.nth(op_pos, expression), ops);
                    start_pos = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, op_pos);
                }
            }
            return Values.values(Sequences.nreverse(elems), Sequences.nreverse(ops));
        }
        else {
            if (math_expression_utilities.NIL != math_multiplication_or_division_expressionP(expression)) {
                return Values.values(conses_high.copy_list(cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED)), (SubLObject)ConsesLow.list(cycl_utilities.nat_functor(expression)));
            }
            return Values.values((SubLObject)ConsesLow.list(expression), (SubLObject)math_expression_utilities.NIL);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 122358L)
    public static SubLObject math_expression_elems_and_ops_for_multiplication(final SubLObject expression) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result_elems = (SubLObject)math_expression_utilities.NIL;
        thread.resetMultipleValues();
        final SubLObject elems = math_expression_elems_and_ops_for_multiplication_and_division(expression);
        final SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        result_elems = (SubLObject)ConsesLow.cons(elems.first(), result_elems);
        SubLObject elem = (SubLObject)math_expression_utilities.NIL;
        SubLObject elem_$22 = (SubLObject)math_expression_utilities.NIL;
        SubLObject op = (SubLObject)math_expression_utilities.NIL;
        SubLObject op_$23 = (SubLObject)math_expression_utilities.NIL;
        elem = elems.rest();
        elem_$22 = elem.first();
        op = ops;
        op_$23 = op.first();
        while (math_expression_utilities.NIL != op || math_expression_utilities.NIL != elem) {
            if (math_expression_utilities.NIL != math_expression_division_op_p(op_$23)) {
                result_elems = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(math_expression_utilities.$const195$InfixDivideFn, (SubLObject)math_expression_utilities.ONE_INTEGER, elem_$22), result_elems);
            }
            else {
                result_elems = (SubLObject)ConsesLow.cons(elem_$22, result_elems);
            }
            elem = elem.rest();
            elem_$22 = elem.first();
            op = op.rest();
            op_$23 = op.first();
        }
        return subl_promotions.values2(Sequences.nreverse(result_elems), (SubLObject)ConsesLow.make_list(Sequences.length(ops), math_expression_utilities.$const72$InfixTimesFn));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 123956L)
    public static SubLObject removal_mathexpressionoperator_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_grammar.cycl_nat_p(arg1)) {
            v_answer = math_expression_operator(arg1);
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 124419L)
    public static SubLObject math_expression_operator(final SubLObject expression) {
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        final SubLObject operator = cycl_utilities.nat_functor(expression);
        if (math_expression_utilities.NIL != math_expression_infix_op_p(operator) || math_expression_utilities.NIL != math_expression_enclosure_fn_p(operator) || math_expression_utilities.NIL != math_expression_unary_prefix_op_p(operator) || math_expression_utilities.NIL != math_expression_unary_surround_op_p(operator)) {
            v_answer = operator;
        }
        if (math_expression_utilities.NIL != kb_utilities.kbeq(operator, math_expression_utilities.$const14$MathExpressionFn) && math_expression_utilities.NIL != el_utilities.formula_arityE(expression, (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            v_answer = cycl_utilities.formula_arg2(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return v_answer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 124920L)
    public static SubLObject test_removal_mathexpressionoperator_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 127290L)
    public static SubLObject removal_leftsideofmathematicalstatement_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_grammar.cycl_nat_p(arg1) && math_expression_utilities.NIL != math_statement_expressionP(arg1)) {
            v_answer = cycl_utilities.formula_arg1(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 127793L)
    public static SubLObject test_removal_leftsideofmathematicalstatement_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 129330L)
    public static SubLObject removal_rightsideofmathematicalstatement_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_grammar.cycl_nat_p(arg1) && math_expression_utilities.NIL != math_statement_expressionP(arg1)) {
            v_answer = cycl_utilities.formula_arg2(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 129834L)
    public static SubLObject test_removal_rightsideofmathematicalstatement_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 131205L)
    public static SubLObject removal_likemathterms_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        v_answer = like_math_termsP(arg1, arg2, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL != v_answer) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 131523L)
    public static SubLObject like_fractionsP(final SubLObject fraction1, final SubLObject fraction2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)math_expression_utilities.NIL;
        SubLObject catch_this = (SubLObject)math_expression_utilities.NIL;
        try {
            thread.throwStack.push(math_expression_utilities.$kw203$UNEVALUATABLE);
            result = arithmetic.cyc_numerically_equal(removal_modules_fractions.el_fraction_denominator(fraction1, (SubLObject)math_expression_utilities.UNPROVIDED), removal_modules_fractions.el_fraction_denominator(fraction2, (SubLObject)math_expression_utilities.UNPROVIDED));
        }
        catch (Throwable ccatch_env_var) {
            catch_this = Errors.handleThrowable(ccatch_env_var, (SubLObject)math_expression_utilities.$kw203$UNEVALUATABLE);
        }
        finally {
            thread.throwStack.pop();
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 131768L)
    public static SubLObject like_math_termsP(final SubLObject term1, final SubLObject term2, SubLObject comparableP) {
        if (comparableP == math_expression_utilities.UNPROVIDED) {
            comparableP = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(why_like_math_termsP(term1, term2, comparableP));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 131904L)
    public static SubLObject normalize_term_for_like_math_terms(final SubLObject v_term) {
        if (math_expression_utilities.NIL != math_expression_unary_surround_op_p(v_term) || math_expression_utilities.NIL != math_enclosed_math_expressionP(v_term) || math_expression_utilities.NIL != math_expression_minus_quant_fn_p(v_term)) {
            return cycl_utilities.nat_arg1(v_term, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return v_term;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 132212L)
    public static SubLObject why_like_math_termsP(SubLObject term1, SubLObject term2, SubLObject comparableP) {
        if (comparableP == math_expression_utilities.UNPROVIDED) {
            comparableP = (SubLObject)math_expression_utilities.NIL;
        }
        term1 = normalize_term_for_like_math_terms(term1);
        term2 = normalize_term_for_like_math_terms(term2);
        SubLObject reason = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(term1, math_expression_utilities.$const17$PrefixMinusFn)) {
            return why_like_math_termsP(conses_high.second(term1), term2, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(term2, math_expression_utilities.$const17$PrefixMinusFn)) {
            return why_like_math_termsP(term1, conses_high.second(term2), (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != math_expression_var_p(term1) && math_expression_utilities.NIL != math_expression_var_p(term2)) {
            if (term1.equal(term2)) {
                reason = (SubLObject)ConsesLow.list(term1);
            }
        }
        else if (math_expression_utilities.NIL != time_expression_fn_p(term1) && math_expression_utilities.NIL != time_expression_fn_p(term2)) {
            reason = (SubLObject)ConsesLow.list(math_expression_utilities.$const16$TimeExpressionFn);
        }
        else if (math_expression_utilities.NIL == comparableP && math_expression_utilities.NIL != math_expression_quant_fn_p(term1) && math_expression_utilities.NIL != math_expression_quant_fn_p(term2)) {
            final SubLObject units1 = quantities.explode_interval_ignoring_unevaluatable(cycl_utilities.nat_arg1(term1, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject units2 = quantities.explode_interval_ignoring_unevaluatable(cycl_utilities.nat_arg1(term2, (SubLObject)math_expression_utilities.UNPROVIDED));
            if (units1.equal(units2)) {
                reason = (SubLObject)ConsesLow.list(units1);
            }
        }
        else if (math_expression_utilities.NIL != comparableP && math_expression_utilities.NIL != math_expression_quant_fn_p(term1) && math_expression_utilities.NIL != math_expression_quant_fn_p(term2)) {
            final SubLObject units1 = quantities.explode_interval_ignoring_unevaluatable(cycl_utilities.nat_arg1(term1, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject units2 = quantities.explode_interval_ignoring_unevaluatable(cycl_utilities.nat_arg1(term2, (SubLObject)math_expression_utilities.UNPROVIDED));
            if (math_expression_utilities.NIL != quantities.term_unify_with_units(el_utilities.make_unary_formula(units1, variables.get_variable((SubLObject)math_expression_utilities.ZERO_INTEGER)), el_utilities.make_unary_formula(units2, (SubLObject)math_expression_utilities.ONE_INTEGER))) {
                reason = (SubLObject)((math_expression_utilities.NIL != kb_utilities.term_L(units1, units2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) ? ConsesLow.list(units1) : ConsesLow.list(units2));
            }
        }
        else if (math_expression_utilities.NIL != math_multiplication_expressionP(term1) && math_expression_utilities.NIL != math_multiplication_expressionP(term2)) {
            reason = why_like_math_terms_listsP(math_expression_elems_and_ops(term1), math_expression_elems_and_ops(term2), comparableP);
        }
        else if (math_expression_utilities.NIL != math_multiplication_expressionP(term1)) {
            final SubLObject term1_simplified = simplify_math_expression_multiplication_term_for_like_terms(term1);
            if (!term1.equal(term1_simplified)) {
                reason = why_like_math_termsP(term1_simplified, term2, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        else if (math_expression_utilities.NIL != math_multiplication_expressionP(term2)) {
            final SubLObject term2_simplified = simplify_math_expression_multiplication_term_for_like_terms(term2);
            if (!term2.equal(term2_simplified)) {
                reason = why_like_math_termsP(term1, term2_simplified, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        else if (math_expression_utilities.NIL != math_division_expressionP(term1) && math_expression_utilities.NIL != math_division_expressionP(term2)) {
            final SubLObject term1_elems = math_expression_elems_and_ops(term1);
            final SubLObject term2_elems = math_expression_elems_and_ops(term2);
            final SubLObject numerator_reason = why_like_math_termsP(term1_elems.first(), term2_elems.first(), (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject denominator_reason = why_like_math_termsP(conses_high.second(term1_elems), conses_high.second(term2_elems), (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != numerator_reason && math_expression_utilities.NIL != denominator_reason) {
                reason = quantities.unit_quotient(numerator_reason, denominator_reason);
            }
        }
        else if (math_expression_utilities.NIL != math_division_expressionP(term1)) {
            if (math_expression_utilities.NIL != math_expression_quant_fn_p(cycl_utilities.nat_arg2(term1, (SubLObject)math_expression_utilities.UNPROVIDED))) {
                reason = why_like_math_termsP(cycl_utilities.nat_arg1(term1, (SubLObject)math_expression_utilities.UNPROVIDED), term2, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        else if (math_expression_utilities.NIL != math_division_expressionP(term2)) {
            if (math_expression_utilities.NIL != math_expression_quant_fn_p(cycl_utilities.nat_arg2(term2, (SubLObject)math_expression_utilities.UNPROVIDED))) {
                reason = why_like_math_termsP(term1, cycl_utilities.nat_arg1(term2, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        else if (math_expression_utilities.NIL != math_exponentiation_expressionP(term1) && math_expression_utilities.NIL != math_exponentiation_expressionP(term2)) {
            final SubLObject term1_elems = math_expression_elems_and_ops(term1);
            final SubLObject term2_elems = math_expression_elems_and_ops(term2);
            final SubLObject possible_reason = why_like_math_termsP(term1_elems.first(), term2_elems.first(), (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != possible_reason && conses_high.second(term1_elems).equal(conses_high.second(term2_elems))) {
                reason = possible_reason;
            }
        }
        else if (math_expression_utilities.NIL != math_nth_root_expressionP(term1) && math_expression_utilities.NIL != math_nth_root_expressionP(term2)) {
            final SubLObject term1_elems = math_expression_elems_and_ops(term1);
            final SubLObject term2_elems = math_expression_elems_and_ops(term2);
            final SubLObject possible_reason = why_like_math_termsP(term1_elems.first(), term2_elems.first(), (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != possible_reason && math_expression_utilities.NIL != why_like_math_termsP(conses_high.second(term1_elems), conses_high.second(term2_elems), (SubLObject)math_expression_utilities.UNPROVIDED)) {
                reason = possible_reason;
            }
        }
        return reason;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 136896L)
    public static SubLObject like_math_terms_listsP(final SubLObject term1_list, final SubLObject term2_list, SubLObject comparableP) {
        if (comparableP == math_expression_utilities.UNPROVIDED) {
            comparableP = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(why_like_math_terms_listsP(term1_list, term2_list, comparableP));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 137064L)
    public static SubLObject why_like_math_terms_listsP(SubLObject term1_list, SubLObject term2_list, SubLObject comparableP) {
        if (comparableP == math_expression_utilities.UNPROVIDED) {
            comparableP = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject term1_list_quant_fns = list_utilities.find_all_if((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, term1_list, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject term2_list_quant_fns = list_utilities.find_all_if((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, term2_list, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject reasons = (SubLObject)math_expression_utilities.NIL;
        term1_list = conses_high.set_difference(term1_list, term1_list_quant_fns, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), (SubLObject)math_expression_utilities.UNPROVIDED);
        term2_list = conses_high.set_difference(term2_list, term2_list_quant_fns, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject term1_list_units = Mapping.mapcar((SubLObject)math_expression_utilities.$sym259$EXPLODE_INTERVAL_IGNORING_UNEVALUATABLE, Mapping.mapcar((SubLObject)math_expression_utilities.$sym61$MATH_EXPRESSION_QUANT_VALUE, term1_list_quant_fns));
        final SubLObject term2_list_units = Mapping.mapcar((SubLObject)math_expression_utilities.$sym259$EXPLODE_INTERVAL_IGNORING_UNEVALUATABLE, Mapping.mapcar((SubLObject)math_expression_utilities.$sym61$MATH_EXPRESSION_QUANT_VALUE, term2_list_quant_fns));
        if (math_expression_utilities.NIL == comparableP && math_expression_utilities.NIL == list_utilities.sets_equalP(Sequences.remove(math_expression_utilities.$const188$Unity, term1_list_units, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), Sequences.remove(math_expression_utilities.$const188$Unity, term2_list_units, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return (SubLObject)math_expression_utilities.NIL;
        }
        reasons = term1_list_units;
        if (math_expression_utilities.NIL != comparableP && math_expression_utilities.NIL == quantities.convert_to_units((SubLObject)((math_expression_utilities.NIL == term1_list_units) ? math_expression_utilities.$const188$Unity : ((math_expression_utilities.NIL != list_utilities.singletonP(term1_list_units)) ? term1_list_units.first() : ConsesLow.cons(math_expression_utilities.$const208$UnitProductFn, term1_list_units))), (SubLObject)((math_expression_utilities.NIL == term2_list_units) ? math_expression_utilities.$const188$Unity : ((math_expression_utilities.NIL != list_utilities.singletonP(term2_list_units)) ? term2_list_units.first() : ConsesLow.cons(math_expression_utilities.$const208$UnitProductFn, term2_list_units))), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return (SubLObject)math_expression_utilities.NIL;
        }
        if (math_expression_utilities.NIL == list_utilities.same_length_p(term1_list, term2_list)) {
            return (SubLObject)math_expression_utilities.NIL;
        }
        SubLObject matched_term1_nums = (SubLObject)math_expression_utilities.NIL;
        SubLObject matched_term2_nums = (SubLObject)math_expression_utilities.NIL;
        SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
        SubLObject term1 = (SubLObject)math_expression_utilities.NIL;
        SubLObject term1_num = (SubLObject)math_expression_utilities.NIL;
        list_var = term1_list;
        term1 = list_var.first();
        for (term1_num = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), term1 = list_var.first(), term1_num = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, term1_num)) {
            SubLObject list_var_$24 = (SubLObject)math_expression_utilities.NIL;
            SubLObject term2 = (SubLObject)math_expression_utilities.NIL;
            SubLObject term2_num = (SubLObject)math_expression_utilities.NIL;
            list_var_$24 = term2_list;
            term2 = list_var_$24.first();
            for (term2_num = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var_$24; list_var_$24 = list_var_$24.rest(), term2 = list_var_$24.first(), term2_num = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, term2_num)) {
                final SubLObject this_reason = why_like_math_termsP(term1, term2, (SubLObject)math_expression_utilities.UNPROVIDED);
                if (math_expression_utilities.NIL != this_reason) {
                    final SubLObject items_var = this_reason;
                    if (items_var.isVector()) {
                        final SubLObject vector_var = items_var;
                        final SubLObject backwardP_var = (SubLObject)math_expression_utilities.NIL;
                        SubLObject length;
                        SubLObject v_iteration;
                        SubLObject element_num;
                        SubLObject item_var;
                        SubLObject item;
                        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)math_expression_utilities.NIL, v_iteration = (SubLObject)math_expression_utilities.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)math_expression_utilities.ONE_INTEGER)) {
                            element_num = ((math_expression_utilities.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)math_expression_utilities.ONE_INTEGER) : v_iteration);
                            item = (item_var = Vectors.aref(vector_var, element_num));
                            if (math_expression_utilities.NIL == conses_high.member(item_var, reasons, (SubLObject)math_expression_utilities.EQUAL, Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                                reasons = (SubLObject)ConsesLow.cons(item_var, reasons);
                            }
                        }
                    }
                    else {
                        SubLObject cdolist_list_var = items_var;
                        SubLObject item2 = (SubLObject)math_expression_utilities.NIL;
                        item2 = cdolist_list_var.first();
                        while (math_expression_utilities.NIL != cdolist_list_var) {
                            final SubLObject item_var2 = item2;
                            if (math_expression_utilities.NIL == conses_high.member(item_var2, reasons, (SubLObject)math_expression_utilities.EQUAL, Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                                reasons = (SubLObject)ConsesLow.cons(item_var2, reasons);
                            }
                            cdolist_list_var = cdolist_list_var.rest();
                            item2 = cdolist_list_var.first();
                        }
                    }
                    SubLObject item_var3 = term1_num;
                    if (math_expression_utilities.NIL == conses_high.member(item_var3, matched_term1_nums, Symbols.symbol_function((SubLObject)math_expression_utilities.EQL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                        matched_term1_nums = (SubLObject)ConsesLow.cons(item_var3, matched_term1_nums);
                    }
                    item_var3 = term2_num;
                    if (math_expression_utilities.NIL == conses_high.member(item_var3, matched_term2_nums, Symbols.symbol_function((SubLObject)math_expression_utilities.EQL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                        matched_term2_nums = (SubLObject)ConsesLow.cons(item_var3, matched_term2_nums);
                    }
                }
            }
        }
        if (math_expression_utilities.NIL != list_utilities.same_length_p(term1_list, matched_term1_nums) && math_expression_utilities.NIL != list_utilities.same_length_p(term2_list, matched_term2_nums)) {
            return reasons;
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 139189L)
    public static SubLObject simplify_math_expression_multiplication_term_for_like_terms(final SubLObject v_term) {
        if (math_expression_utilities.NIL != math_multiplication_expressionP(v_term)) {
            final SubLObject args = Sequences.remove_if((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, math_expression_elems_and_ops(v_term), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != list_utilities.singletonP(args)) {
                return args.first();
            }
        }
        return v_term;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 139614L)
    public static SubLObject test_removal_likemathterms_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 145325L)
    public static SubLObject removal_unlikemathterms_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        v_answer = (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL == like_math_termsP(arg1, arg2, (SubLObject)math_expression_utilities.UNPROVIDED));
        if (math_expression_utilities.NIL != v_answer) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 146377L)
    public static SubLObject removal_simplifiablemathexpression_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        v_answer = (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL == unsimplifiable_math_expressionP(arg1));
        if (math_expression_utilities.NIL != v_answer) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 147430L)
    public static SubLObject removal_unsimplifiablemathexpression_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        v_answer = unsimplifiable_math_expressionP(arg1);
        if (math_expression_utilities.NIL != v_answer) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 147735L)
    public static SubLObject unsimplifiable_math_expressionP(final SubLObject expression) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (math_expression_utilities.NIL != math_expression_is_evaluatableP(expression)) {
            return (SubLObject)math_expression_utilities.NIL;
        }
        if (math_expression_utilities.NIL != math_expression_quant_fn_or_minus_quant_fn_p(expression)) {
            return (SubLObject)math_expression_utilities.$kw181$EXPRESSION_IS_A_MATH_QUANTITY;
        }
        thread.resetMultipleValues();
        SubLObject elems = math_expression_elems_and_ops_for_additions_and_subtractions(expression);
        SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        SubLObject elem = (SubLObject)math_expression_utilities.NIL;
        SubLObject elem_$25 = (SubLObject)math_expression_utilities.NIL;
        SubLObject op = (SubLObject)math_expression_utilities.NIL;
        SubLObject op_$26 = (SubLObject)math_expression_utilities.NIL;
        elem = elems.rest();
        elem_$25 = elem.first();
        op = ops;
        op_$26 = op.first();
        while (math_expression_utilities.NIL != op || math_expression_utilities.NIL != elem) {
            if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(elem_$25, math_expression_utilities.$const17$PrefixMinusFn) || (math_expression_utilities.NIL != math_expression_quant_fn_p(elem_$25) && math_expression_utilities.NIL != extended_numbers.extended_number_minus_p(math_expression_quant_value(elem_$25)))) {
                return (SubLObject)math_expression_utilities.NIL;
            }
            elem = elem.rest();
            elem_$25 = elem.first();
            op = op.rest();
            op_$26 = op.first();
        }
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const17$PrefixMinusFn) && math_expression_utilities.NIL != unsimplifiable_math_expressionP(cycl_utilities.atomic_sentence_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED))) {
            return (SubLObject)math_expression_utilities.$kw271$EXPRESSION_IS_A_NEGATED_UNSIMPLIFIABLE_EXPRESSION;
        }
        thread.resetMultipleValues();
        elems = math_expression_elems_and_ops(expression);
        ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != list_utilities.singletonP(ops)) {
            final SubLObject operator = math_expression_operator(expression);
            ops = (SubLObject)ConsesLow.list(operator);
            if (math_expression_utilities.NIL != math_expression_division_op_p(operator)) {
                final SubLObject numerator = elems.first();
                final SubLObject denominator = conses_high.second(elems);
                thread.resetMultipleValues();
                final SubLObject numerator_elems = math_expression_elems_and_ops_for_multiplication_and_division(numerator);
                final SubLObject numerator_ops = thread.secondMultipleValue();
                thread.resetMultipleValues();
                thread.resetMultipleValues();
                final SubLObject denominator_elems = math_expression_elems_and_ops_for_multiplication_and_division(denominator);
                final SubLObject denominator_ops = thread.secondMultipleValue();
                thread.resetMultipleValues();
                if (math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym23$MATH_EXPRESSION_MULTIPLICATION_OP_P, numerator_ops, (SubLObject)math_expression_utilities.UNPROVIDED) && math_expression_utilities.NIL != list_utilities.every_in_list((SubLObject)math_expression_utilities.$sym23$MATH_EXPRESSION_MULTIPLICATION_OP_P, denominator_ops, (SubLObject)math_expression_utilities.UNPROVIDED) && math_expression_utilities.NIL != conses_high.intersection(numerator_elems, denominator_elems, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), (SubLObject)math_expression_utilities.UNPROVIDED)) {
                    return (SubLObject)math_expression_utilities.NIL;
                }
            }
            if (math_expression_utilities.NIL != math_expression_multiplication_op_p(operator) || math_expression_utilities.NIL != math_expression_division_op_p(operator) || math_expression_utilities.NIL != math_expression_exponentiation_op_p(operator) || math_expression_utilities.NIL != math_expression_nth_root_op_p(operator)) {
                elems = conses_high.copy_list(cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED));
                if (math_expression_utilities.ONE_INTEGER.numL(Sequences.count_if((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, expression, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED))) {
                    return (SubLObject)math_expression_utilities.NIL;
                }
            }
        }
        if (Sequences.length(ops).numE(Numbers.add(Sequences.count_if((SubLObject)math_expression_utilities.$sym21$MATH_EXPRESSION_ADDITION_OP_P, ops, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), Sequences.count_if((SubLObject)math_expression_utilities.$sym22$MATH_EXPRESSION_SUBTRACTION_OP_P, ops, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)))) {
            SubLObject some_like_term_pair_foundP = (SubLObject)math_expression_utilities.NIL;
            SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
            SubLObject term1 = (SubLObject)math_expression_utilities.NIL;
            SubLObject term1_num = (SubLObject)math_expression_utilities.NIL;
            list_var = elems;
            term1 = list_var.first();
            for (term1_num = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL == some_like_term_pair_foundP && math_expression_utilities.NIL != list_var; list_var = list_var.rest(), term1 = list_var.first(), term1_num = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, term1_num)) {
                SubLObject list_var_$27 = (SubLObject)math_expression_utilities.NIL;
                SubLObject term2 = (SubLObject)math_expression_utilities.NIL;
                SubLObject term2_num = (SubLObject)math_expression_utilities.NIL;
                list_var_$27 = elems;
                term2 = list_var_$27.first();
                for (term2_num = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL == some_like_term_pair_foundP && math_expression_utilities.NIL != list_var_$27; list_var_$27 = list_var_$27.rest(), term2 = list_var_$27.first(), term2_num = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, term2_num)) {
                    if (!term1_num.numE(term2_num) && math_expression_utilities.NIL != like_math_terms_for_simplificationP(term1, term2)) {
                        some_like_term_pair_foundP = (SubLObject)math_expression_utilities.T;
                    }
                }
            }
            if (math_expression_utilities.NIL != some_like_term_pair_foundP) {
                return (SubLObject)math_expression_utilities.NIL;
            }
        }
        if (math_expression_utilities.NIL == list_utilities.find_if_not((SubLObject)math_expression_utilities.$sym272$UNSIMPLIFIABLE_MATH_EXPRESSION_, sub_math_expressions_direct(expression), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return (SubLObject)math_expression_utilities.$kw273$ALL_SUB_EXPRESSIONS_ARE_UNSIMPLIFIABLE;
        }
        if (math_expression_utilities.NIL == sub_math_expressions_direct(expression)) {
            return (SubLObject)math_expression_utilities.$kw274$EXPRESSION_HAS_NO_DIRECT_SUB_MATH_EXPRESSION;
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 151738L)
    public static SubLObject like_math_terms_for_simplificationP(final SubLObject term1, final SubLObject term2) {
        return (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.NIL != math_expression_zero_quant_value(term1) || math_expression_utilities.NIL != math_expression_zero_quant_value(term2) || math_expression_utilities.NIL != like_math_termsP(term1, term2, (SubLObject)math_expression_utilities.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 151943L)
    public static SubLObject test_removal_unsimplifiablemathexpression_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 164112L)
    public static SubLObject test_removal_simplifiablemathexpression_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 176901L)
    public static SubLObject math_equals_statementP(final SubLObject expression) {
        return cycl_utilities.nat_with_functor_p(expression, math_expression_utilities.$const279$MathEqualsStatementFn);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 177127L)
    public static SubLObject math_equation_univariate_linearP(final SubLObject expression) {
        if (math_expression_utilities.NIL != math_equals_statementP(expression)) {
            final SubLObject lhs = cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject rhs = cycl_utilities.nat_arg2(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject lhs_vars = cycl_utilities.expression_gather(lhs, (SubLObject)math_expression_utilities.$sym183$MATH_EXPRESSION_VAR_P, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject rhs_vars = cycl_utilities.expression_gather(rhs, (SubLObject)math_expression_utilities.$sym183$MATH_EXPRESSION_VAR_P, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject lhs_univariate_linearP = math_expression_univariate_linearP(lhs);
            final SubLObject rhs_univariate_linearP = math_expression_univariate_linearP(rhs);
            if ((math_expression_utilities.NIL == lhs_vars || math_expression_utilities.NIL == rhs_vars || math_expression_utilities.NIL != list_utilities.sets_equalP(lhs_vars, rhs_vars, (SubLObject)math_expression_utilities.UNPROVIDED)) && (math_expression_utilities.NIL != lhs_univariate_linearP || math_expression_utilities.NIL != rhs_univariate_linearP) && (math_expression_utilities.NIL == lhs_vars || math_expression_utilities.NIL != lhs_univariate_linearP) && (math_expression_utilities.NIL == rhs_vars || math_expression_utilities.NIL != rhs_univariate_linearP)) {
                return (SubLObject)math_expression_utilities.T;
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 177915L)
    public static SubLObject math_expression_univariate_linearP(final SubLObject expression) {
        final SubLObject v_variables = cycl_utilities.expression_gather(expression, (SubLObject)math_expression_utilities.$sym183$MATH_EXPRESSION_VAR_P, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL != list_utilities.singletonP(v_variables)) {
            final SubLObject variable = v_variables.first();
            SubLObject current;
            final SubLObject datum = current = list_utilities.tree_positions_w_parents(variable, expression, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL));
            SubLObject positions = (SubLObject)math_expression_utilities.NIL;
            SubLObject root_nodes = (SubLObject)math_expression_utilities.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)math_expression_utilities.$list280);
            positions = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)math_expression_utilities.$list280);
            root_nodes = current.first();
            current = current.rest();
            if (math_expression_utilities.NIL == current) {
                SubLObject n = (SubLObject)math_expression_utilities.NIL;
                SubLObject n_$28 = (SubLObject)math_expression_utilities.NIL;
                SubLObject op = (SubLObject)math_expression_utilities.NIL;
                SubLObject op_$29 = (SubLObject)math_expression_utilities.NIL;
                n = positions.first();
                n_$28 = n.first();
                op = root_nodes.first();
                op_$29 = op.first();
                while (math_expression_utilities.NIL != op || math_expression_utilities.NIL != n) {
                    if (n_$28.eql((SubLObject)math_expression_utilities.ONE_INTEGER) && math_expression_utilities.NIL != math_expression_exponentiation_op_p(op_$29)) {
                        return (SubLObject)math_expression_utilities.NIL;
                    }
                    if (n_$28.eql((SubLObject)math_expression_utilities.TWO_INTEGER) && math_expression_utilities.NIL != math_expression_division_op_p(op_$29)) {
                        return (SubLObject)math_expression_utilities.NIL;
                    }
                    n = n.rest();
                    n_$28 = n.first();
                    op = op.rest();
                    op_$29 = op.first();
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)math_expression_utilities.$list280);
            }
            return (SubLObject)math_expression_utilities.T;
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 181818L)
    public static SubLObject removal_comparablemathterms_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        v_answer = like_math_termsP(arg1, arg2, (SubLObject)math_expression_utilities.T);
        if (math_expression_utilities.NIL != v_answer) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 182144L)
    public static SubLObject test_removal_comparablemathterms_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 189090L)
    public static SubLObject removal_likemathtermsonoppositesides_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != math_statement_expressionP(arg1)) {
            final SubLObject lhs = cycl_utilities.nat_arg1(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject rhs = cycl_utilities.nat_arg2(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL == v_answer) {
                SubLObject csome_list_var = math_expression_elems_and_ops_for_additions_and_subtractions(lhs);
                SubLObject lhs_term = (SubLObject)math_expression_utilities.NIL;
                lhs_term = csome_list_var.first();
                while (math_expression_utilities.NIL == v_answer && math_expression_utilities.NIL != csome_list_var) {
                    if (math_expression_utilities.NIL == v_answer) {
                        SubLObject csome_list_var_$30;
                        SubLObject rhs_term;
                        for (csome_list_var_$30 = math_expression_elems_and_ops_for_additions_and_subtractions(rhs), rhs_term = (SubLObject)math_expression_utilities.NIL, rhs_term = csome_list_var_$30.first(); math_expression_utilities.NIL == v_answer && math_expression_utilities.NIL != csome_list_var_$30; v_answer = like_math_termsP(lhs_term, rhs_term, (SubLObject)math_expression_utilities.UNPROVIDED), csome_list_var_$30 = csome_list_var_$30.rest(), rhs_term = csome_list_var_$30.first()) {}
                    }
                    csome_list_var = csome_list_var.rest();
                    lhs_term = csome_list_var.first();
                }
            }
        }
        if (math_expression_utilities.NIL != v_answer) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 189695L)
    public static SubLObject test_removal_likemathtermsonoppositesides_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 193185L)
    public static SubLObject apply_operation_to_math_statement(final SubLObject statement, final SubLObject operation, final SubLObject v_term) {
        if (math_expression_utilities.NIL != isa.isa_in_any_mtP(operation, math_expression_utilities.$const293$SingleOperationTypeMathTransforma) && math_expression_utilities.NIL != math_statement_expressionP(statement)) {
            final SubLObject lhs = apply_operation_to_math_expression(cycl_utilities.nat_arg1(statement, (SubLObject)math_expression_utilities.UNPROVIDED), operation, v_term);
            final SubLObject rhs = apply_operation_to_math_expression(cycl_utilities.nat_arg2(statement, (SubLObject)math_expression_utilities.UNPROVIDED), operation, v_term);
            if (math_expression_utilities.NIL != lhs && math_expression_utilities.NIL != rhs) {
                return el_utilities.make_binary_formula(cycl_utilities.nat_functor(statement), lhs, rhs);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 193763L)
    public static SubLObject apply_operation_to_math_expression(final SubLObject expression, final SubLObject operation, final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (math_expression_utilities.NIL != math_expression_p(expression)) {
            if (math_expression_utilities.NIL != kb_utilities.kbeq(operation, math_expression_utilities.$const294$AddTermToBothSidesOfMathStatement) || math_expression_utilities.NIL != kb_utilities.kbeq(operation, math_expression_utilities.$const295$SubtractTermFromBothSidesOfMathSt)) {
                final SubLObject op_to_add = (math_expression_utilities.NIL != kb_utilities.kbeq(operation, math_expression_utilities.$const294$AddTermToBothSidesOfMathStatement)) ? math_expression_utilities.$const59$InfixPlusFn : math_expression_utilities.$const88$InfixMinusFn;
                SubLObject elems = (SubLObject)math_expression_utilities.NIL;
                SubLObject ops = (SubLObject)math_expression_utilities.NIL;
                thread.resetMultipleValues();
                final SubLObject elems_$31 = math_expression_elems_and_ops_for_additions_and_subtractions(expression);
                final SubLObject ops_$32 = thread.secondMultipleValue();
                thread.resetMultipleValues();
                elems = elems_$31;
                ops = ops_$32;
                SubLObject term_position = Sequences.position(v_term, elems, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                final SubLObject minus_term_position = Sequences.position((SubLObject)ConsesLow.list(math_expression_utilities.$const17$PrefixMinusFn, v_term), elems, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                if (math_expression_utilities.NIL != minus_term_position) {
                    term_position = minus_term_position;
                }
                if (math_expression_utilities.NIL == term_position && math_expression_utilities.NIL != math_expression_quant_fn_p(v_term)) {
                    term_position = list_utilities.last_one(list_utilities.all_positions((SubLObject)math_expression_utilities.T, elems, Symbols.symbol_function((SubLObject)math_expression_utilities.EQ), (SubLObject)math_expression_utilities.$sym186$MATH_EXPRESSION_QUANT_FN_OR_MINUS_QUANT_FN_P, (SubLObject)math_expression_utilities.UNPROVIDED));
                }
                if (math_expression_utilities.NIL == term_position || math_expression_utilities.NIL != list_utilities.singletonP(elems)) {
                    elems = list_utilities.add_to_end(v_term, elems);
                    ops = list_utilities.add_to_end(op_to_add, ops);
                }
                else if (math_expression_utilities.NIL != kb_utilities.kbeq(operation, math_expression_utilities.$const295$SubtractTermFromBothSidesOfMathSt) || (!v_term.equal(ConsesLow.nth(term_position, elems)) && !ConsesLow.list(math_expression_utilities.$const17$PrefixMinusFn, v_term).equal(ConsesLow.nth(term_position, elems)))) {
                    elems = list_utilities.ninsert_by_position(v_term, elems, Numbers.add(term_position, (SubLObject)math_expression_utilities.ONE_INTEGER));
                    ops = list_utilities.ninsert_by_position(op_to_add, ops, term_position);
                }
                else {
                    if (math_expression_utilities.NIL == term_position) {
                        term_position = Sequences.length(elems);
                    }
                    final SubLObject term_to_replace = ConsesLow.nth(term_position, elems);
                    final SubLObject change_subtract_to_addP = (SubLObject)SubLObjectFactory.makeBoolean(math_expression_utilities.ZERO_INTEGER.numL(term_position) && math_expression_utilities.NIL != math_expression_subtraction_op_p(ConsesLow.nth(Numbers.subtract(term_position, (SubLObject)math_expression_utilities.ONE_INTEGER), ops)));
                    final SubLObject sub_elem1 = (math_expression_utilities.NIL != change_subtract_to_addP) ? el_utilities.make_unary_formula(math_expression_utilities.$const17$PrefixMinusFn, term_to_replace) : term_to_replace;
                    final SubLObject new_elem = el_utilities.make_unary_formula(math_expression_utilities.$const209$ParenthesizedMathFn, el_utilities.make_ternary_formula(math_expression_utilities.$const14$MathExpressionFn, sub_elem1, op_to_add, v_term));
                    elems = list_utilities.replace_nth(term_position, new_elem, elems);
                    if (math_expression_utilities.NIL != change_subtract_to_addP) {
                        ops = list_utilities.replace_nth(Numbers.subtract(term_position, (SubLObject)math_expression_utilities.ONE_INTEGER), math_expression_utilities.$const59$InfixPlusFn, ops);
                    }
                }
                return make_math_expression(elems, ops);
            }
            if (math_expression_utilities.NIL != kb_utilities.kbeq(operation, math_expression_utilities.$const296$DivideBothSidesOfMathStatementByT) || math_expression_utilities.NIL != kb_utilities.kbeq(operation, math_expression_utilities.$const297$MultiplyBothSidesOfMathStatementB)) {
                final SubLObject op_to_add = (math_expression_utilities.NIL != kb_utilities.kbeq(operation, math_expression_utilities.$const296$DivideBothSidesOfMathStatementByT)) ? math_expression_utilities.$const195$InfixDivideFn : math_expression_utilities.$const72$InfixTimesFn;
                SubLObject elems = (SubLObject)math_expression_utilities.NIL;
                SubLObject ops = (SubLObject)math_expression_utilities.NIL;
                thread.resetMultipleValues();
                final SubLObject elems_$32 = math_expression_elems_and_ops_for_multiplication_and_division(expression);
                final SubLObject ops_$33 = thread.secondMultipleValue();
                thread.resetMultipleValues();
                elems = elems_$32;
                ops = ops_$33;
                if (math_expression_utilities.NIL != kb_utilities.kbeq(operation, math_expression_utilities.$const296$DivideBothSidesOfMathStatementByT)) {
                    if (math_expression_utilities.NIL != list_utilities.singletonP(elems)) {
                        return el_utilities.make_binary_formula(math_expression_utilities.$const196$HorizontalDivideFn, elems.first(), v_term);
                    }
                    return el_utilities.make_binary_formula(math_expression_utilities.$const196$HorizontalDivideFn, expression, v_term);
                }
                else {
                    if (math_expression_utilities.NIL != list_utilities.singletonP(elems)) {
                        return el_utilities.make_binary_formula(math_expression_utilities.$const204$ImplicitTimesFn, v_term, el_utilities.make_unary_formula(math_expression_utilities.$const209$ParenthesizedMathFn, elems.first()));
                    }
                    return el_utilities.make_binary_formula(math_expression_utilities.$const204$ImplicitTimesFn, v_term, el_utilities.make_unary_formula(math_expression_utilities.$const209$ParenthesizedMathFn, expression));
                }
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 197242L)
    public static SubLObject test_apply_operation_to_math_statement(final SubLObject input) {
        SubLObject fn = (SubLObject)math_expression_utilities.NIL;
        SubLObject expression = (SubLObject)math_expression_utilities.NIL;
        SubLObject operation = (SubLObject)math_expression_utilities.NIL;
        SubLObject v_term = (SubLObject)math_expression_utilities.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(input, input, (SubLObject)math_expression_utilities.$list298);
        fn = input.first();
        SubLObject current = input.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, input, (SubLObject)math_expression_utilities.$list298);
        expression = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, input, (SubLObject)math_expression_utilities.$list298);
        operation = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, input, (SubLObject)math_expression_utilities.$list298);
        v_term = current.first();
        current = current.rest();
        if (math_expression_utilities.NIL == current) {
            return apply_operation_to_math_statement(expression, operation, v_term);
        }
        cdestructuring_bind.cdestructuring_bind_error(input, (SubLObject)math_expression_utilities.$list298);
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 211811L)
    public static SubLObject removal_besttermtoremovevia_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pred = cycl_utilities.atomic_sentence_arg0(asent);
        final SubLObject statement = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        thread.resetMultipleValues();
        final SubLObject remove_term = math_statement_best_term_to_remove(statement);
        final SubLObject operation = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != remove_term && math_expression_utilities.NIL != operation) {
            SubLObject cdolist_list_var = (SubLObject)((math_expression_utilities.NIL != variables.not_fully_bound_p(cycl_utilities.atomic_sentence_arg4(asent, (SubLObject)math_expression_utilities.UNPROVIDED))) ? ConsesLow.cons(operation, genls.asserted_genls(operation, (SubLObject)math_expression_utilities.UNPROVIDED)) : genls.all_genls(operation, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED));
            SubLObject operation_type = (SubLObject)math_expression_utilities.NIL;
            operation_type = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                final SubLObject v_bindings = unification_utilities.term_unify(asent, el_utilities.make_quaternary_formula(pred, statement, remove_term, operation, operation_type), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                if (math_expression_utilities.NIL != v_bindings) {
                    backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
                }
                cdolist_list_var = cdolist_list_var.rest();
                operation_type = cdolist_list_var.first();
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 212638L)
    public static SubLObject math_statement_best_term_to_remove(final SubLObject math_statement) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject remove_term = math_statement_best_term_to_remove_int(math_statement);
        final SubLObject operation = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(remove_term, math_expression_utilities.$const17$PrefixMinusFn) && math_expression_utilities.NIL != math_expression_quant_fn_or_minus_quant_fn_p(conses_high.second(remove_term))) {
            if (math_expression_utilities.NIL != math_expression_minus_quant_fn_p(conses_high.second(remove_term))) {
                remove_term = conses_high.second(conses_high.second(remove_term));
            }
            else {
                remove_term = (SubLObject)ConsesLow.list(math_expression_utilities.$const15$MathQuantFn, Numbers.minus(conses_high.second(conses_high.second(remove_term))));
            }
        }
        return subl_promotions.values2(remove_term, operation);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 213256L)
    public static SubLObject math_statement_best_term_to_remove_int(final SubLObject math_statement) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (math_expression_utilities.NIL == math_statement_expressionP(math_statement)) {
            return subl_promotions.values2((SubLObject)math_expression_utilities.NIL, (SubLObject)math_expression_utilities.NIL);
        }
        final SubLObject lhs = possibly_denegate_math_expression(cycl_utilities.nat_arg1(math_statement, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.T);
        final SubLObject rhs = possibly_denegate_math_expression(cycl_utilities.nat_arg2(math_statement, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.T);
        final SubLObject lhs_addition_terms = math_expression_elems_and_ops_for_addition(lhs);
        final SubLObject rhs_addition_terms = math_expression_elems_and_ops_for_addition(rhs);
        final SubLObject lhs_multiplication_terms = math_expression_elems_and_ops_for_multiplication(lhs);
        final SubLObject rhs_multiplication_terms = math_expression_elems_and_ops_for_multiplication(rhs);
        if (math_expression_utilities.NIL == list_utilities.singletonP(lhs_addition_terms) && math_expression_utilities.NIL == list_utilities.singletonP(rhs_addition_terms)) {
            SubLObject cdolist_list_var = Sequences.nreverse(group_and_sort_like_math_terms(lhs_addition_terms));
            SubLObject elem1 = (SubLObject)math_expression_utilities.NIL;
            elem1 = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                SubLObject cdolist_list_var_$35 = Sequences.nreverse(group_and_sort_like_math_terms(rhs_addition_terms));
                SubLObject elem2 = (SubLObject)math_expression_utilities.NIL;
                elem2 = cdolist_list_var_$35.first();
                while (math_expression_utilities.NIL != cdolist_list_var_$35) {
                    if (math_expression_utilities.NIL != like_math_termsP(elem1, elem2, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                        if (math_expression_utilities.NIL != math_term_L_compare_values(elem2, elem1)) {
                            final SubLObject swap_var = elem1;
                            elem1 = elem2;
                            elem2 = swap_var;
                        }
                        if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(elem1, math_expression_utilities.$const17$PrefixMinusFn)) {
                            return subl_promotions.values2(conses_high.second(elem1), math_expression_utilities.$const295$SubtractTermFromBothSidesOfMathSt);
                        }
                        return subl_promotions.values2(elem1, math_expression_utilities.$const295$SubtractTermFromBothSidesOfMathSt);
                    }
                    else {
                        cdolist_list_var_$35 = cdolist_list_var_$35.rest();
                        elem2 = cdolist_list_var_$35.first();
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                elem1 = cdolist_list_var.first();
            }
        }
        SubLObject cdolist_list_var = lhs_multiplication_terms;
        SubLObject elem1 = (SubLObject)math_expression_utilities.NIL;
        elem1 = cdolist_list_var.first();
        while (math_expression_utilities.NIL != cdolist_list_var) {
            if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(elem1, math_expression_utilities.$const195$InfixDivideFn) && math_expression_utilities.ONE_INTEGER.eql(conses_high.second(elem1))) {
                return subl_promotions.values2(conses_high.third(elem1), math_expression_utilities.$const297$MultiplyBothSidesOfMathStatementB);
            }
            cdolist_list_var = cdolist_list_var.rest();
            elem1 = cdolist_list_var.first();
        }
        cdolist_list_var = rhs_multiplication_terms;
        SubLObject elem3 = (SubLObject)math_expression_utilities.NIL;
        elem3 = cdolist_list_var.first();
        while (math_expression_utilities.NIL != cdolist_list_var) {
            if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(elem3, math_expression_utilities.$const195$InfixDivideFn) && math_expression_utilities.ONE_INTEGER.eql(conses_high.second(elem3))) {
                return subl_promotions.values2(conses_high.third(elem3), math_expression_utilities.$const297$MultiplyBothSidesOfMathStatementB);
            }
            cdolist_list_var = cdolist_list_var.rest();
            elem3 = cdolist_list_var.first();
        }
        if (math_expression_utilities.NIL != list_utilities.singletonP(lhs_addition_terms) && math_expression_utilities.NIL != list_utilities.singletonP(rhs_addition_terms) && math_expression_utilities.NIL != list_utilities.singletonP(lhs_multiplication_terms) && math_expression_utilities.NIL != list_utilities.singletonP(rhs_multiplication_terms)) {
            cdolist_list_var = group_and_sort_like_math_terms(lhs_multiplication_terms);
            elem1 = (SubLObject)math_expression_utilities.NIL;
            elem1 = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                SubLObject cdolist_list_var_$36 = group_and_sort_like_math_terms(rhs_multiplication_terms);
                SubLObject elem2 = (SubLObject)math_expression_utilities.NIL;
                elem2 = cdolist_list_var_$36.first();
                while (math_expression_utilities.NIL != cdolist_list_var_$36) {
                    if (math_expression_utilities.NIL != like_math_termsP(elem1, elem2, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                        if (math_expression_utilities.NIL != math_term_L_compare_values(elem2, elem1)) {
                            final SubLObject swap_var = elem1;
                            elem1 = elem2;
                            elem2 = swap_var;
                        }
                        return subl_promotions.values2(elem1, math_expression_utilities.$const296$DivideBothSidesOfMathStatementByT);
                    }
                    cdolist_list_var_$36 = cdolist_list_var_$36.rest();
                    elem2 = cdolist_list_var_$36.first();
                }
                cdolist_list_var = cdolist_list_var.rest();
                elem1 = cdolist_list_var.first();
            }
        }
        thread.resetMultipleValues();
        final SubLObject lhs_remove_term = math_expression_best_term_to_remove(lhs);
        final SubLObject lhs_operation = thread.secondMultipleValue();
        thread.resetMultipleValues();
        thread.resetMultipleValues();
        final SubLObject rhs_remove_term = math_expression_best_term_to_remove(rhs);
        final SubLObject rhs_operation = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL == lhs_remove_term) {
            return subl_promotions.values2(rhs_remove_term, rhs_operation);
        }
        if (math_expression_utilities.NIL == rhs_remove_term) {
            return subl_promotions.values2(lhs_remove_term, lhs_operation);
        }
        if (math_expression_utilities.NIL != list_utilities.tree_find_if((SubLObject)math_expression_utilities.$sym183$MATH_EXPRESSION_VAR_P, lhs, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return subl_promotions.values2(rhs_remove_term, rhs_operation);
        }
        if (math_expression_utilities.NIL != list_utilities.tree_find_if((SubLObject)math_expression_utilities.$sym183$MATH_EXPRESSION_VAR_P, rhs, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return subl_promotions.values2(lhs_remove_term, lhs_operation);
        }
        return subl_promotions.values2(lhs_remove_term, lhs_operation);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 216315L)
    public static SubLObject math_expression_best_term_to_remove(final SubLObject expression) {
        final SubLObject remove_term_operation_pair = math_expression_terms_to_remove(expression, (SubLObject)math_expression_utilities.T);
        return Values.values(remove_term_operation_pair.first(), conses_high.second(remove_term_operation_pair));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 216562L)
    public static SubLObject possibly_denegate_math_expression(SubLObject math_expression, SubLObject push_negation_deeperP) {
        if (push_negation_deeperP == math_expression_utilities.UNPROVIDED) {
            push_negation_deeperP = (SubLObject)math_expression_utilities.NIL;
        }
        if (math_expression_utilities.NIL != list_utilities.singletonP(math_expression_elems_and_ops_for_additions_and_subtractions(math_expression)) && math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(math_expression, math_expression_utilities.$const17$PrefixMinusFn)) {
            final SubLObject first_elem = conses_high.second(conses_high.second(math_expression));
            final SubLObject rest_elems = conses_high.second(math_expression).rest().rest();
            math_expression = (SubLObject)ConsesLow.cons(conses_high.second(math_expression).first(), (SubLObject)ConsesLow.cons((SubLObject)((math_expression_utilities.NIL != push_negation_deeperP) ? ConsesLow.list(math_expression_utilities.$const17$PrefixMinusFn, first_elem) : first_elem), rest_elems));
        }
        return math_expression;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 217345L)
    public static SubLObject possibly_negate_math_quant_fn(final SubLObject math_quant_fn) {
        final SubLObject arg1 = cycl_utilities.naut_arg1(math_quant_fn, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (arg1.isNumber()) {
            return (SubLObject)ConsesLow.list(math_expression_utilities.$const15$MathQuantFn, Numbers.minus(arg1));
        }
        if (math_expression_utilities.NIL != collection_defns.fractionP(arg1, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return (SubLObject)ConsesLow.list(math_expression_utilities.$const15$MathQuantFn, list_utilities.replace_nth((SubLObject)math_expression_utilities.ONE_INTEGER, Numbers.minus(ConsesLow.nth((SubLObject)math_expression_utilities.ONE_INTEGER, arg1)), conses_high.copy_list(arg1)));
        }
        return math_quant_fn;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 217658L)
    public static SubLObject test_removal_besttermtoremovevia_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return inference_kernel.new_cyc_query(sentence, mt, query_properties);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 224705L)
    public static SubLObject removal_possibletermstoremovevia_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject pred = cycl_utilities.atomic_sentence_arg0(asent);
        final SubLObject statement = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject cdolist_list_var = math_statement_terms_to_remove(statement);
        SubLObject remove_term_operation_pairs = (SubLObject)math_expression_utilities.NIL;
        remove_term_operation_pairs = cdolist_list_var.first();
        while (math_expression_utilities.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = remove_term_operation_pairs;
            SubLObject remove_term = (SubLObject)math_expression_utilities.NIL;
            SubLObject operation = (SubLObject)math_expression_utilities.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)math_expression_utilities.$list309);
            remove_term = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)math_expression_utilities.$list309);
            operation = current.first();
            current = current.rest();
            if (math_expression_utilities.NIL == current) {
                if (math_expression_utilities.NIL != remove_term && math_expression_utilities.NIL != operation) {
                    SubLObject cdolist_list_var_$37 = (SubLObject)((math_expression_utilities.NIL != variables.not_fully_bound_p(cycl_utilities.atomic_sentence_arg4(asent, (SubLObject)math_expression_utilities.UNPROVIDED))) ? ConsesLow.cons(operation, genls.asserted_genls(operation, (SubLObject)math_expression_utilities.UNPROVIDED)) : genls.all_genls(operation, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED));
                    SubLObject operation_type = (SubLObject)math_expression_utilities.NIL;
                    operation_type = cdolist_list_var_$37.first();
                    while (math_expression_utilities.NIL != cdolist_list_var_$37) {
                        final SubLObject v_bindings = unification_utilities.term_unify(asent, el_utilities.make_quaternary_formula(pred, statement, remove_term, operation, operation_type), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                        if (math_expression_utilities.NIL != v_bindings) {
                            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
                        }
                        cdolist_list_var_$37 = cdolist_list_var_$37.rest();
                        operation_type = cdolist_list_var_$37.first();
                    }
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)math_expression_utilities.$list309);
            }
            cdolist_list_var = cdolist_list_var.rest();
            remove_term_operation_pairs = cdolist_list_var.first();
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 225594L)
    public static SubLObject math_statement_terms_to_remove(final SubLObject math_statement) {
        if (math_expression_utilities.NIL != math_statement_expressionP(math_statement)) {
            final SubLObject lhs = cycl_utilities.nat_arg1(math_statement, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject rhs = cycl_utilities.nat_arg2(math_statement, (SubLObject)math_expression_utilities.UNPROVIDED);
            return Sequences.remove_duplicates(ConsesLow.append(math_expression_terms_to_remove(lhs, (SubLObject)math_expression_utilities.UNPROVIDED), math_expression_terms_to_remove(rhs, (SubLObject)math_expression_utilities.UNPROVIDED)), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 225922L)
    public static SubLObject math_expression_terms_to_remove(final SubLObject expression, SubLObject best_onlyP) {
        if (best_onlyP == math_expression_utilities.UNPROVIDED) {
            best_onlyP = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject remove_term_operation_pairs_good = (SubLObject)math_expression_utilities.NIL;
        SubLObject remove_term_operation_pairs_ok = (SubLObject)math_expression_utilities.NIL;
        SubLObject remove_term_operation_pairs_bad = (SubLObject)math_expression_utilities.NIL;
        thread.resetMultipleValues();
        SubLObject elems = math_expression_elems_and_ops_for_additions_and_subtractions(expression);
        SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != list_utilities.singletonP(elems)) {
            final SubLObject item_var = (SubLObject)ConsesLow.list(elems.first(), math_expression_utilities.$const295$SubtractTermFromBothSidesOfMathSt);
            if (math_expression_utilities.NIL == conses_high.member(item_var, remove_term_operation_pairs_bad, Symbols.symbol_function((SubLObject)math_expression_utilities.EQL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                remove_term_operation_pairs_bad = (SubLObject)ConsesLow.cons(item_var, remove_term_operation_pairs_bad);
            }
        }
        else {
            SubLObject cdolist_list_var = elems;
            SubLObject remove_term = (SubLObject)math_expression_utilities.NIL;
            remove_term = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                final SubLObject term_position = Sequences.position(remove_term, elems, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                SubLObject operation = (SubLObject)math_expression_utilities.NIL;
                if (term_position.isZero() || math_expression_utilities.NIL != math_expression_addition_op_p(ConsesLow.nth(Numbers.subtract(term_position, (SubLObject)math_expression_utilities.ONE_INTEGER), ops))) {
                    operation = math_expression_utilities.$const295$SubtractTermFromBothSidesOfMathSt;
                }
                else {
                    operation = math_expression_utilities.$const294$AddTermToBothSidesOfMathStatement;
                }
                if (math_expression_utilities.NIL != math_multiplication_or_division_expressionP(remove_term)) {
                    SubLObject cdolist_list_var_$38 = math_expression_terms_to_remove(remove_term, (SubLObject)math_expression_utilities.UNPROVIDED);
                    SubLObject sub_remove_term_operation_pair = (SubLObject)math_expression_utilities.NIL;
                    sub_remove_term_operation_pair = cdolist_list_var_$38.first();
                    while (math_expression_utilities.NIL != cdolist_list_var_$38) {
                        final SubLObject item_var2 = sub_remove_term_operation_pair;
                        if (math_expression_utilities.NIL == conses_high.member(item_var2, remove_term_operation_pairs_bad, Symbols.symbol_function((SubLObject)math_expression_utilities.EQL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                            remove_term_operation_pairs_bad = (SubLObject)ConsesLow.cons(item_var2, remove_term_operation_pairs_bad);
                        }
                        cdolist_list_var_$38 = cdolist_list_var_$38.rest();
                        sub_remove_term_operation_pair = cdolist_list_var_$38.first();
                    }
                }
                if (math_expression_utilities.NIL != math_expression_quant_fn_or_minus_quant_fn_p(remove_term)) {
                    final SubLObject item_var3 = (SubLObject)ConsesLow.list(remove_term, operation);
                    if (math_expression_utilities.NIL == conses_high.member(item_var3, remove_term_operation_pairs_good, Symbols.symbol_function((SubLObject)math_expression_utilities.EQL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                        remove_term_operation_pairs_good = (SubLObject)ConsesLow.cons(item_var3, remove_term_operation_pairs_good);
                    }
                }
                else {
                    final SubLObject item_var3 = (SubLObject)ConsesLow.list(remove_term, operation);
                    if (math_expression_utilities.NIL == conses_high.member(item_var3, remove_term_operation_pairs_ok, Symbols.symbol_function((SubLObject)math_expression_utilities.EQL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                        remove_term_operation_pairs_ok = (SubLObject)ConsesLow.cons(item_var3, remove_term_operation_pairs_ok);
                    }
                }
                if (math_expression_utilities.NIL != collection_defns.fractionP(remove_term, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                    final SubLObject item_var4 = (SubLObject)ConsesLow.list(removal_modules_fractions.el_fraction_denominator(remove_term, (SubLObject)math_expression_utilities.UNPROVIDED), math_expression_utilities.$const297$MultiplyBothSidesOfMathStatementB);
                    if (math_expression_utilities.NIL == conses_high.member(item_var4, remove_term_operation_pairs_bad, Symbols.symbol_function((SubLObject)math_expression_utilities.EQL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                        remove_term_operation_pairs_bad = (SubLObject)ConsesLow.cons(item_var4, remove_term_operation_pairs_bad);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                remove_term = cdolist_list_var.first();
            }
        }
        thread.resetMultipleValues();
        elems = math_expression_elems_and_ops_for_multiplication_and_division(expression);
        ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL == list_utilities.singletonP(elems)) {
            SubLObject cdolist_list_var = elems;
            SubLObject remove_term = (SubLObject)math_expression_utilities.NIL;
            remove_term = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                final SubLObject term_position = Sequences.position(remove_term, elems, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                SubLObject operation = (SubLObject)math_expression_utilities.NIL;
                if (term_position.isZero() || math_expression_utilities.NIL != math_expression_multiplication_op_p(ConsesLow.nth(Numbers.subtract(term_position, (SubLObject)math_expression_utilities.ONE_INTEGER), ops))) {
                    operation = math_expression_utilities.$const296$DivideBothSidesOfMathStatementByT;
                }
                else {
                    operation = math_expression_utilities.$const297$MultiplyBothSidesOfMathStatementB;
                }
                if (math_expression_utilities.NIL != math_expression_quant_fn_or_minus_quant_fn_p(remove_term)) {
                    final SubLObject item_var3 = (SubLObject)ConsesLow.list(remove_term, operation);
                    if (math_expression_utilities.NIL == conses_high.member(item_var3, remove_term_operation_pairs_good, Symbols.symbol_function((SubLObject)math_expression_utilities.EQL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                        remove_term_operation_pairs_good = (SubLObject)ConsesLow.cons(item_var3, remove_term_operation_pairs_good);
                    }
                }
                else {
                    final SubLObject item_var3 = (SubLObject)ConsesLow.list(remove_term, operation);
                    if (math_expression_utilities.NIL == conses_high.member(item_var3, remove_term_operation_pairs_ok, Symbols.symbol_function((SubLObject)math_expression_utilities.EQL), Symbols.symbol_function((SubLObject)math_expression_utilities.IDENTITY))) {
                        remove_term_operation_pairs_ok = (SubLObject)ConsesLow.cons(item_var3, remove_term_operation_pairs_ok);
                    }
                }
                cdolist_list_var = cdolist_list_var.rest();
                remove_term = cdolist_list_var.first();
            }
        }
        return (math_expression_utilities.NIL != best_onlyP) ? list_utilities.last_one(remove_term_operation_pairs_good) : Sequences.nreverse(ConsesLow.append(remove_term_operation_pairs_bad, remove_term_operation_pairs_ok, remove_term_operation_pairs_good));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 228291L)
    public static SubLObject test_removal_possibletermstoremovevia_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return inference_kernel.new_cyc_query(sentence, mt, query_properties);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 231244L)
    public static SubLObject removal_mathtermcoefficient_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pred = cycl_utilities.atomic_sentence_arg0(asent);
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject expression = conses_high.copy_list(arg1);
        SubLObject negate_result_factor = (SubLObject)math_expression_utilities.ONE_INTEGER;
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != math_expression_quant_fn_or_minus_quant_fn_p(expression)) {
            v_answer = expression;
        }
        if (math_expression_utilities.NIL == v_answer && math_expression_utilities.NIL != math_expression_var_p(expression)) {
            v_answer = (SubLObject)ConsesLow.list(math_expression_utilities.$const15$MathQuantFn, (SubLObject)math_expression_utilities.ONE_INTEGER);
        }
        if (math_expression_utilities.NIL == v_answer && math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(expression, math_expression_utilities.$const17$PrefixMinusFn)) {
            negate_result_factor = Numbers.multiply((SubLObject)math_expression_utilities.MINUS_ONE_INTEGER, negate_result_factor);
            expression = cycl_utilities.naut_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL == v_answer && math_expression_utilities.NIL != math_exponentiation_expressionP(expression) && math_expression_utilities.NIL != math_expression_var_p(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED))) {
            v_answer = (SubLObject)ConsesLow.list(math_expression_utilities.$const15$MathQuantFn, negate_result_factor);
        }
        if (math_expression_utilities.NIL == v_answer && math_expression_utilities.NIL != math_multiplication_expressionP(expression)) {
            thread.resetMultipleValues();
            SubLObject elems = math_expression_elems_and_ops(expression);
            final SubLObject ops = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject new_elems = (SubLObject)math_expression_utilities.NIL;
            SubLObject cdolist_list_var = elems;
            SubLObject elem = (SubLObject)math_expression_utilities.NIL;
            elem = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(elem, math_expression_utilities.$const17$PrefixMinusFn)) {
                    negate_result_factor = Numbers.multiply((SubLObject)math_expression_utilities.MINUS_ONE_INTEGER, negate_result_factor);
                    new_elems = (SubLObject)ConsesLow.cons(cycl_utilities.naut_arg1(elem, (SubLObject)math_expression_utilities.UNPROVIDED), new_elems);
                }
                else {
                    new_elems = (SubLObject)ConsesLow.cons(elem, new_elems);
                }
                cdolist_list_var = cdolist_list_var.rest();
                elem = cdolist_list_var.first();
            }
            elems = Sequences.nreverse(new_elems);
            final SubLObject answers = list_utilities.find_all_if((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, elems, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (negate_result_factor.isNegative()) {
                v_answer = possibly_negate_math_quant_fn(answers.first());
            }
            else {
                v_answer = answers.first();
            }
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(asent, el_utilities.make_binary_formula(pred, arg1, v_answer), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 233177L)
    public static SubLObject test_removal_mathtermcoefficient_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 239717L)
    public static SubLObject removal_mathtermvariablewithdegree_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject pred = cycl_utilities.atomic_sentence_arg0(asent);
        final SubLObject expression = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject answers = math_expression_variables_and_degrees(expression);
        if (math_expression_utilities.NIL != answers) {
            SubLObject cdolist_list_var = answers;
            SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
            v_answer = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = v_answer;
                SubLObject var = (SubLObject)math_expression_utilities.NIL;
                SubLObject degree = (SubLObject)math_expression_utilities.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)math_expression_utilities.$list321);
                var = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)math_expression_utilities.$list321);
                degree = current.first();
                current = current.rest();
                if (math_expression_utilities.NIL == current) {
                    final SubLObject v_bindings = unification_utilities.term_unify(asent, el_utilities.make_ternary_formula(pred, expression, var, degree), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                    if (math_expression_utilities.NIL != v_bindings) {
                        backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
                    }
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)math_expression_utilities.$list321);
                }
                cdolist_list_var = cdolist_list_var.rest();
                v_answer = cdolist_list_var.first();
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 240287L)
    public static SubLObject math_expression_variables_and_degrees(SubLObject expression) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        expression = possibly_denegate_math_expression(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject answers = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != math_expression_quant_fn_p(expression)) {
            return (SubLObject)math_expression_utilities.NIL;
        }
        if (math_expression_utilities.NIL == answers && math_expression_utilities.NIL != math_expression_var_p(expression)) {
            answers = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(expression, (SubLObject)math_expression_utilities.ONE_INTEGER), answers);
        }
        if (math_expression_utilities.NIL == answers && math_expression_utilities.NIL != math_exponentiation_expressionP(expression)) {
            final SubLObject base = possibly_denegate_math_expression(cycl_utilities.nat_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != math_expression_var_p(possibly_denegate_math_expression(base, (SubLObject)math_expression_utilities.UNPROVIDED))) {}
            answers = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(base, math_expression_quant_value(cycl_utilities.nat_arg2(expression, (SubLObject)math_expression_utilities.UNPROVIDED))), answers);
        }
        if (math_expression_utilities.NIL == answers && math_expression_utilities.NIL != math_multiplication_expressionP(expression)) {
            thread.resetMultipleValues();
            final SubLObject elems = math_expression_elems_and_ops(expression);
            final SubLObject ops = thread.secondMultipleValue();
            thread.resetMultipleValues();
            SubLObject cdolist_list_var = list_utilities.find_all_if_not((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, elems, (SubLObject)math_expression_utilities.UNPROVIDED);
            SubLObject elem = (SubLObject)math_expression_utilities.NIL;
            elem = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                elem = possibly_denegate_math_expression(elem, (SubLObject)math_expression_utilities.UNPROVIDED);
                answers = ConsesLow.append(answers, math_expression_variables_and_degrees(elem));
                cdolist_list_var = cdolist_list_var.rest();
                elem = cdolist_list_var.first();
            }
        }
        return answers;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 241422L)
    public static SubLObject test_removal_mathtermvariablewithdegree_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 248754L)
    public static SubLObject removal_mathtermdegree_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject pred = cycl_utilities.atomic_sentence_arg0(asent);
        final SubLObject expression = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = math_expression_degree(expression);
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(asent, el_utilities.make_binary_formula(pred, expression, v_answer), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 249209L)
    public static SubLObject math_expression_degree(final SubLObject expression) {
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != math_expression_with_any_of_operator_test(expression, (SubLObject)math_expression_utilities.$sym327$MATH_EXPRESSION_ADDITION_OR_SUBTRACTION_OP_P)) {
            return (SubLObject)math_expression_utilities.NIL;
        }
        if (math_expression_utilities.NIL == v_answer) {
            v_answer = (SubLObject)math_expression_utilities.ZERO_INTEGER;
            SubLObject cdolist_list_var = math_expression_variables_and_degrees(expression);
            SubLObject var_and_degree = (SubLObject)math_expression_utilities.NIL;
            var_and_degree = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = var_and_degree;
                SubLObject var = (SubLObject)math_expression_utilities.NIL;
                SubLObject degree = (SubLObject)math_expression_utilities.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)math_expression_utilities.$list321);
                var = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)math_expression_utilities.$list321);
                degree = current.first();
                current = current.rest();
                if (math_expression_utilities.NIL == current) {
                    v_answer = Numbers.add(v_answer, degree);
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)math_expression_utilities.$list321);
                }
                cdolist_list_var = cdolist_list_var.rest();
                var_and_degree = cdolist_list_var.first();
            }
        }
        return v_answer;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 249962L)
    public static SubLObject test_removal_mathtermdegree_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 255369L)
    public static SubLObject removal_commonprimefactorlist_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pred = cycl_utilities.atomic_sentence_arg0(asent);
        final SubLObject num1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject num2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = (SubLObject)math_expression_utilities.NIL;
        SubLObject ignore_errors_tag = (SubLObject)math_expression_utilities.NIL;
        try {
            thread.throwStack.push(math_expression_utilities.$kw333$IGNORE_ERRORS_TARGET);
            final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)math_expression_utilities.$sym334$IGNORE_ERRORS_HANDLER), thread);
                try {
                    v_answer = el_utilities.make_el_list(number_utilities.common_prime_factors((SubLObject)ConsesLow.list(num1, num2)), (SubLObject)math_expression_utilities.UNPROVIDED);
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)math_expression_utilities.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)math_expression_utilities.$kw333$IGNORE_ERRORS_TARGET);
        }
        finally {
            thread.throwStack.pop();
        }
        if (math_expression_utilities.NIL != v_answer) {
            final SubLObject v_bindings = unification_utilities.term_unify(asent, el_utilities.make_ternary_formula(pred, num1, num2, v_answer), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 255921L)
    public static SubLObject test_removal_commonprimefactorlist_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 257538L)
    public static SubLObject removal_simplifiablefraction_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (arg1.isCons()) {
            if (math_expression_utilities.NIL != cycl_utilities.naut_with_functor_p(arg1, math_expression_utilities.$const53$MinusFn)) {
                arg1 = cycl_utilities.naut_arg1(arg1, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
            SubLObject units = (SubLObject)math_expression_utilities.NIL;
            SubLObject fraction = (SubLObject)math_expression_utilities.NIL;
            if (math_expression_utilities.NIL != collection_defns.fractionP(arg1, (SubLObject)math_expression_utilities.UNPROVIDED)) {
                units = math_expression_utilities.$const188$Unity;
                fraction = arg1;
            }
            else if (math_expression_utilities.NIL != collection_defns.unit_of_measureP(arg1.first(), (SubLObject)math_expression_utilities.UNPROVIDED)) {
                thread.resetMultipleValues();
                final SubLObject units_$39 = quantities.explode_interval(arg1);
                final SubLObject fraction_$40 = thread.secondMultipleValue();
                thread.resetMultipleValues();
                units = units_$39;
                fraction = fraction_$40;
            }
            final SubLObject mixed_fraction_whole = (SubLObject)((math_expression_utilities.NIL != collection_defns.mixed_fractionP(fraction, (SubLObject)math_expression_utilities.UNPROVIDED)) ? cycl_utilities.naut_arg1(fraction, (SubLObject)math_expression_utilities.UNPROVIDED) : math_expression_utilities.NIL);
            final SubLObject numerator = removal_modules_fractions.el_fraction_numerator(fraction, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject denominator = removal_modules_fractions.el_fraction_denominator(fraction, (SubLObject)math_expression_utilities.UNPROVIDED);
            SubLObject simplifiableP = (SubLObject)math_expression_utilities.NIL;
            simplifiableP = (SubLObject)SubLObjectFactory.makeBoolean((math_expression_utilities.NIL != mixed_fraction_whole && math_expression_utilities.NIL != number_utilities.zero_number_p(mixed_fraction_whole)) || math_expression_utilities.NIL != number_utilities.zero_number_p(numerator) || (math_expression_utilities.NIL != numerator && math_expression_utilities.NIL != denominator && math_expression_utilities.NIL == number_utilities.zero_number_p(denominator) && (math_expression_utilities.NIL != arithmetic.cyc_greater_than_or_equal_to(numerator, denominator) || math_expression_utilities.NIL != number_utilities.common_prime_factors((SubLObject)ConsesLow.list(numerator, denominator)))));
            if (math_expression_utilities.NIL != simplifiableP) {
                final SubLObject v_bindings = unification_utilities.term_unify(asent, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                if (math_expression_utilities.NIL != v_bindings) {
                    backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
                }
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 259029L)
    public static SubLObject test_removal_simplifiablefraction_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 261385L)
    public static SubLObject removal_mathexpressionoperandlist_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_answer = el_utilities.make_el_list((SubLObject)((math_expression_utilities.NIL != math_expression_with_some_operator_p(arg1)) ? math_expression_elems_and_ops(arg1) : ConsesLow.list(arg1)), (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL != v_bindings) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 261882L)
    public static SubLObject test_removal_mathexpressionoperandlist_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 268593L)
    public static SubLObject like_fractions_or_non_fractional_math_termsP(final SubLObject term1, final SubLObject term2) {
        return (SubLObject)SubLObjectFactory.makeBoolean(((math_expression_utilities.NIL == math_expression_quant_fn_p(term1) || math_expression_utilities.NIL == collection_defns.fractionP(math_expression_quant_value(term1), (SubLObject)math_expression_utilities.UNPROVIDED)) && (math_expression_utilities.NIL == math_expression_quant_fn_p(term2) || math_expression_utilities.NIL == collection_defns.fractionP(math_expression_quant_value(term2), (SubLObject)math_expression_utilities.UNPROVIDED)) && math_expression_utilities.NIL != like_math_termsP(term1, term2, (SubLObject)math_expression_utilities.UNPROVIDED)) || (math_expression_utilities.NIL != math_expression_quant_fn_p(term1) && math_expression_utilities.NIL != collection_defns.fractionP(math_expression_quant_value(term1), (SubLObject)math_expression_utilities.UNPROVIDED) && math_expression_utilities.NIL != math_expression_quant_fn_p(term2) && math_expression_utilities.NIL != collection_defns.fractionP(math_expression_quant_value(term2), (SubLObject)math_expression_utilities.UNPROVIDED) && math_expression_utilities.NIL != like_fractionsP(math_expression_quant_value(term1), math_expression_quant_value(term2))));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 269234L)
    public static SubLObject removal_associateliketerms_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = arg1;
        thread.resetMultipleValues();
        final SubLObject elems = math_expression_elems_and_ops_for_additions_and_subtractions(arg1);
        final SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        SubLObject op_bracket_types = (SubLObject)math_expression_utilities.NIL;
        SubLObject last_elem = (SubLObject)math_expression_utilities.NIL;
        SubLObject cdolist_list_var = elems;
        SubLObject elem = (SubLObject)math_expression_utilities.NIL;
        elem = cdolist_list_var.first();
        while (math_expression_utilities.NIL != cdolist_list_var) {
            if (math_expression_utilities.NIL != last_elem) {
                if (math_expression_utilities.NIL != like_fractions_or_non_fractional_math_termsP(last_elem, elem)) {
                    op_bracket_types = (SubLObject)ConsesLow.cons((SubLObject)math_expression_utilities.$kw350$LIKE_TERMS, op_bracket_types);
                }
                else {
                    op_bracket_types = (SubLObject)ConsesLow.cons((SubLObject)math_expression_utilities.NIL, op_bracket_types);
                }
            }
            last_elem = elem;
            cdolist_list_var = cdolist_list_var.rest();
            elem = cdolist_list_var.first();
        }
        op_bracket_types = Sequences.nreverse(op_bracket_types);
        SubLObject bracket_positions = (SubLObject)math_expression_utilities.NIL;
        SubLObject last_bracket_type = (SubLObject)math_expression_utilities.NIL;
        SubLObject last_op = (SubLObject)math_expression_utilities.NIL;
        SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
        SubLObject op = (SubLObject)math_expression_utilities.NIL;
        SubLObject op_num = (SubLObject)math_expression_utilities.NIL;
        list_var = ops;
        op = list_var.first();
        for (op_num = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), op = list_var.first(), op_num = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, op_num)) {
            final SubLObject bracket_type = ConsesLow.nth(op_num, op_bracket_types);
            SubLObject bracket_start = (SubLObject)math_expression_utilities.NIL;
            SubLObject bracket_end = (SubLObject)math_expression_utilities.NIL;
            if (math_expression_utilities.NIL == bracket_type) {
                last_bracket_type = (SubLObject)math_expression_utilities.NIL;
            }
            else if (math_expression_utilities.NIL != bracket_type && !bracket_type.eql(last_bracket_type)) {
                bracket_start = op_num;
                bracket_end = Numbers.add(op_num, (SubLObject)math_expression_utilities.ONE_INTEGER);
                for (SubLObject next_pos = Numbers.add(op_num, (SubLObject)math_expression_utilities.ONE_INTEGER); bracket_type.eql(ConsesLow.nth(next_pos, op_bracket_types)); next_pos = Numbers.add(next_pos, (SubLObject)math_expression_utilities.ONE_INTEGER), bracket_end = Numbers.add(bracket_end, (SubLObject)math_expression_utilities.ONE_INTEGER)) {}
                bracket_positions = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(Numbers.multiply((SubLObject)math_expression_utilities.TWO_INTEGER, bracket_start), Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, Numbers.multiply((SubLObject)math_expression_utilities.TWO_INTEGER, bracket_end))), bracket_positions);
            }
            last_bracket_type = bracket_type;
            last_op = op;
        }
        SubLObject cdolist_list_var2 = bracket_positions;
        SubLObject bracket_position = (SubLObject)math_expression_utilities.NIL;
        bracket_position = cdolist_list_var2.first();
        while (math_expression_utilities.NIL != cdolist_list_var2) {
            final SubLObject start = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, bracket_position.first());
            final SubLObject end = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, conses_high.second(bracket_position));
            final SubLObject sub_expr = (SubLObject)ConsesLow.list(math_expression_utilities.$const209$ParenthesizedMathFn, (SubLObject)ConsesLow.cons(math_expression_utilities.$const14$MathExpressionFn, Sequences.subseq(v_answer, start, end)));
            if (math_expression_utilities.NIL == math_expression_subtraction_op_p(ConsesLow.nth(Numbers.subtract(start, (SubLObject)math_expression_utilities.ONE_INTEGER), v_answer))) {
                v_answer = list_utilities.subseq_subst((SubLObject)ConsesLow.list(sub_expr), v_answer, start, end);
            }
            cdolist_list_var2 = cdolist_list_var2.rest();
            bracket_position = cdolist_list_var2.first();
        }
        final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL != v_bindings) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 271391L)
    public static SubLObject test_removal_associateliketerms_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 281534L)
    public static SubLObject math_term_type_fractionP(final SubLObject type) {
        return (SubLObject)SubLObjectFactory.makeBoolean(type.isCons() && math_expression_utilities.NIL != kb_utilities.kbeq(math_expression_utilities.$const356$Fraction, type.first()));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 281649L)
    public static SubLObject math_term_type_L(final SubLObject type1, final SubLObject type2) {
        if (type1.equal(type2)) {
            return (SubLObject)math_expression_utilities.$kw357$COMPARE_MATH_QUANT_FNS;
        }
        final SubLObject type1_vars = Sort.sort(list_utilities.find_all_if((SubLObject)math_expression_utilities.$sym183$MATH_EXPRESSION_VAR_P, type1, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.$sym358$TERM__, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject type2_vars = Sort.sort(list_utilities.find_all_if((SubLObject)math_expression_utilities.$sym183$MATH_EXPRESSION_VAR_P, type2, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.$sym358$TERM__, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject type1_complexity = Sequences.length(type1_vars);
        final SubLObject type2_complexity = Sequences.length(type2_vars);
        if (type1_complexity.numL(type2_complexity)) {
            return (SubLObject)math_expression_utilities.T;
        }
        if (type1_complexity.numG(type2_complexity)) {
            return (SubLObject)math_expression_utilities.NIL;
        }
        if (math_expression_utilities.NIL != Sequences.find_if((SubLObject)math_expression_utilities.$sym359$MATH_TERM_TYPE_FRACTION_, type1, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED) && math_expression_utilities.NIL == Sequences.find_if((SubLObject)math_expression_utilities.$sym359$MATH_TERM_TYPE_FRACTION_, type2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return (SubLObject)math_expression_utilities.NIL;
        }
        if (math_expression_utilities.NIL != Sequences.find_if((SubLObject)math_expression_utilities.$sym359$MATH_TERM_TYPE_FRACTION_, type2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED) && math_expression_utilities.NIL == Sequences.find_if((SubLObject)math_expression_utilities.$sym359$MATH_TERM_TYPE_FRACTION_, type1, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return (SubLObject)math_expression_utilities.T;
        }
        if (math_expression_utilities.NIL != Sequences.find_if((SubLObject)math_expression_utilities.$sym359$MATH_TERM_TYPE_FRACTION_, type1, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return kb_utilities.term_L(type1, type2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return kb_utilities.term_L(type1_vars, type2_vars, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 282601L)
    public static SubLObject math_term_type_internal(final SubLObject v_term) {
        SubLObject result = why_like_math_termsP(v_term, v_term, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject math_quant_fn = list_utilities.tree_find_if((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, v_term, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL != math_quant_fn && math_expression_utilities.NIL != collection_defns.fractionP(math_expression_quant_value(math_quant_fn), (SubLObject)math_expression_utilities.UNPROVIDED)) {
            final SubLObject denominator = removal_modules_fractions.el_fraction_denominator(math_expression_quant_value(math_quant_fn), (SubLObject)math_expression_utilities.UNPROVIDED);
            result = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.list(math_expression_utilities.$const356$Fraction, denominator), result);
        }
        if (math_expression_utilities.NIL == list_utilities.singletonP(result)) {
            result = Sequences.remove(math_expression_utilities.$const188$Unity, result, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        result = kb_utilities.sort_terms(result, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 282601L)
    public static SubLObject math_term_type(final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_memoization_state = memoization_state.$memoization_state$.getDynamicValue(thread);
        SubLObject caching_state = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL == v_memoization_state) {
            return math_term_type_internal(v_term);
        }
        caching_state = memoization_state.memoization_state_lookup(v_memoization_state, (SubLObject)math_expression_utilities.$sym360$MATH_TERM_TYPE, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL == caching_state) {
            caching_state = memoization_state.create_caching_state(memoization_state.memoization_state_lock(v_memoization_state), (SubLObject)math_expression_utilities.$sym360$MATH_TERM_TYPE, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.NIL, (SubLObject)math_expression_utilities.EQUAL, (SubLObject)math_expression_utilities.UNPROVIDED);
            memoization_state.memoization_state_put(v_memoization_state, (SubLObject)math_expression_utilities.$sym360$MATH_TERM_TYPE, caching_state);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, v_term, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(thread.resetMultipleValues(), (SubLObject)Values.multiple_value_list(math_term_type_internal(v_term)));
            memoization_state.caching_state_put(caching_state, v_term, results, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 283180L)
    public static SubLObject math_term_L_compare_values(final SubLObject term1, final SubLObject term2) {
        return math_term_L(term1, term2, (SubLObject)math_expression_utilities.T);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 283275L)
    public static SubLObject math_term_L(final SubLObject term1, final SubLObject term2, SubLObject compare_valuesP) {
        if (compare_valuesP == math_expression_utilities.UNPROVIDED) {
            compare_valuesP = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject term1_type = math_term_type(term1);
        final SubLObject term2_type = math_term_type(term2);
        SubLObject result = math_term_type_L(term1_type, term2_type);
        if (result == math_expression_utilities.$kw357$COMPARE_MATH_QUANT_FNS) {
            SubLObject value1 = math_expression_quant_value((math_expression_utilities.NIL != math_expression_quant_fn_p(term1)) ? term1 : list_utilities.tree_find_if((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, term1, (SubLObject)math_expression_utilities.UNPROVIDED));
            SubLObject value2 = math_expression_quant_value((math_expression_utilities.NIL != math_expression_quant_fn_p(term2)) ? term2 : list_utilities.tree_find_if((SubLObject)math_expression_utilities.$sym60$MATH_EXPRESSION_QUANT_FN_P, term2, (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject value1_fractionP = collection_defns.fractionP(value1, (SubLObject)math_expression_utilities.UNPROVIDED);
            final SubLObject value2_fractionP = collection_defns.fractionP(value2, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL == value1) {
                value1 = (SubLObject)math_expression_utilities.ONE_INTEGER;
            }
            if (math_expression_utilities.NIL == value2) {
                value2 = (SubLObject)math_expression_utilities.ONE_INTEGER;
            }
            if (math_expression_utilities.NIL != compare_valuesP && math_expression_utilities.NIL != list_utilities.safe_L(value1, value2)) {
                result = (SubLObject)math_expression_utilities.T;
            }
            else {
                if (math_expression_utilities.NIL == value1_fractionP && math_expression_utilities.NIL == value2_fractionP) {
                    return (SubLObject)math_expression_utilities.NIL;
                }
                if (math_expression_utilities.NIL != value1_fractionP) {
                    result = (SubLObject)math_expression_utilities.NIL;
                }
                else if (math_expression_utilities.NIL != value2_fractionP) {
                    result = (SubLObject)math_expression_utilities.T;
                }
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 284542L)
    public static SubLObject group_and_sort_like_math_terms(final SubLObject math_terms) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject local_state;
        final SubLObject state = local_state = memoization_state.new_memoization_state((SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                return Sort.stable_sort(math_terms, (SubLObject)math_expression_utilities.$sym362$MATH_TERM___COMPARE_VALUES, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
            finally {
                final SubLObject _prev_bind_0_$41 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)math_expression_utilities.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$41, thread);
                }
            }
        }
        finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 284698L)
    public static SubLObject group_like_math_terms(final SubLObject math_terms) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject local_state;
        final SubLObject state = local_state = memoization_state.new_memoization_state((SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                return Sort.stable_sort(math_terms, (SubLObject)math_expression_utilities.$sym363$MATH_TERM__, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
            finally {
                final SubLObject _prev_bind_0_$42 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)math_expression_utilities.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$42, thread);
                }
            }
        }
        finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 284830L)
    public static SubLObject removal_expressionreorderedtogroupliketerms_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = arg1;
        thread.resetMultipleValues();
        final SubLObject elems = math_expression_elems_and_ops(arg1);
        final SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != list_utilities.singletonP(Sequences.remove_duplicates(ops, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) && (math_expression_utilities.NIL != math_expression_addition_op_p(ops.first()) || math_expression_utilities.NIL != math_expression_multiplication_op_p(ops.first()))) {
            final SubLObject sorted_elems = group_like_math_terms(elems);
            v_answer = make_math_expression(sorted_elems, ops);
        }
        final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL != v_bindings) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 285568L)
    public static SubLObject test_removal_expressionreorderedtogroupliketerms_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 291636L)
    public static SubLObject removal_expressionhasnonadjacentliketermsasoperands_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject non_adjacent_like_terms_foundP = (SubLObject)math_expression_utilities.NIL;
        thread.resetMultipleValues();
        final SubLObject elems = math_expression_elems_and_ops(arg1);
        final SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        final SubLObject elem_types = Mapping.mapcar((SubLObject)math_expression_utilities.$sym360$MATH_TERM_TYPE, elems);
        final SubLObject unique_elem_types = list_utilities.fast_remove_duplicates(elem_types, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL == non_adjacent_like_terms_foundP) {
            SubLObject csome_list_var = unique_elem_types;
            SubLObject unique_elem_type = (SubLObject)math_expression_utilities.NIL;
            unique_elem_type = csome_list_var.first();
            while (math_expression_utilities.NIL == non_adjacent_like_terms_foundP && math_expression_utilities.NIL != csome_list_var) {
                final SubLObject positions = list_utilities.all_positions(unique_elem_type, elem_types, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
                SubLObject cur_position = positions.first();
                if (math_expression_utilities.NIL == non_adjacent_like_terms_foundP) {
                    SubLObject csome_list_var_$43 = positions.rest();
                    SubLObject position = (SubLObject)math_expression_utilities.NIL;
                    position = csome_list_var_$43.first();
                    while (math_expression_utilities.NIL == non_adjacent_like_terms_foundP && math_expression_utilities.NIL != csome_list_var_$43) {
                        if (Numbers.add(cur_position, (SubLObject)math_expression_utilities.ONE_INTEGER).numL(position)) {
                            non_adjacent_like_terms_foundP = (SubLObject)math_expression_utilities.T;
                        }
                        cur_position = position;
                        csome_list_var_$43 = csome_list_var_$43.rest();
                        position = csome_list_var_$43.first();
                    }
                }
                csome_list_var = csome_list_var.rest();
                unique_elem_type = csome_list_var.first();
            }
        }
        if (math_expression_utilities.NIL != non_adjacent_like_terms_foundP) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 292755L)
    public static SubLObject test_removal_expressionhasnonadjacentliketermsasoperands_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 298546L)
    public static SubLObject strong_math_term_L(final SubLObject term1, final SubLObject term2) {
        final SubLObject term1_type = math_term_type(term1);
        final SubLObject term2_type = math_term_type(term2);
        if (math_expression_utilities.NIL != math_term_L(term1_type, term2_type, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return (SubLObject)math_expression_utilities.T;
        }
        if (math_expression_utilities.NIL != math_term_L(term1_type, term2_type, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return (SubLObject)math_expression_utilities.NIL;
        }
        return kb_utilities.term_L(term1, term2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 298852L)
    public static SubLObject sort_math_terms(final SubLObject math_terms) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject local_state;
        final SubLObject state = local_state = memoization_state.new_memoization_state((SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject _prev_bind_0 = memoization_state.$memoization_state$.currentBinding(thread);
        try {
            memoization_state.$memoization_state$.bind(local_state, thread);
            final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
            try {
                return Sort.stable_sort(math_terms, (SubLObject)math_expression_utilities.$sym374$STRONG_MATH_TERM__, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
            finally {
                final SubLObject _prev_bind_0_$44 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)math_expression_utilities.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$44, thread);
                }
            }
        }
        finally {
            memoization_state.$memoization_state$.rebind(_prev_bind_0, thread);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 298985L)
    public static SubLObject removal_expressionreorderedinascendingorder_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject v_answer = arg1;
        thread.resetMultipleValues();
        final SubLObject elems = math_expression_elems_and_ops(arg1);
        final SubLObject ops = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != list_utilities.singletonP(Sequences.remove_duplicates(ops, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED)) && (math_expression_utilities.NIL != math_expression_addition_op_p(ops.first()) || math_expression_utilities.NIL != math_expression_subtraction_op_p(ops.first()) || math_expression_utilities.NIL != math_expression_multiplication_op_p(ops.first()))) {
            final SubLObject sorted_elems = sort_math_terms(elems);
            v_answer = make_math_expression(sorted_elems, ops);
        }
        final SubLObject v_bindings = unification_utilities.term_unify(v_answer, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        if (math_expression_utilities.NIL != v_bindings) {
            backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 299767L)
    public static SubLObject test_removal_expressionreorderedinascendingorder_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 303574L)
    public static SubLObject removal_bestsubexpressiontoevaluate_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        thread.resetMultipleValues();
        final SubLObject result = math_expression_evaluate(arg1);
        final SubLObject reason = thread.secondMultipleValue();
        final SubLObject first_expression_to_evaluate = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        if (math_expression_utilities.NIL != first_expression_to_evaluate) {
            final SubLObject v_bindings = unification_utilities.term_unify(first_expression_to_evaluate, arg2, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 304129L)
    public static SubLObject test_removal_bestsubexpressiontoevaluate_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        return list_utilities.sublisp_boolean(inference_kernel.new_cyc_query(sentence, mt, query_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 307079L)
    public static SubLObject math_expression_to_prefix_format(final SubLObject math_expression) {
        assert math_expression_utilities.NIL != math_expression_p(math_expression) : math_expression;
        return (math_expression_utilities.NIL != infix_math_expression_p(math_expression)) ? infix_math_expression_to_prefix_format(math_expression) : math_expression;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 307650L)
    public static SubLObject infix_math_expression_to_prefix_format(final SubLObject math_expression) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert math_expression_utilities.NIL != infix_math_expression_p(math_expression) : math_expression;
        if (math_expression_utilities.NIL != el_utilities.formula_arityE(math_expression, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            return math_expression_to_prefix_format(cycl_utilities.nat_arg1(math_expression, (SubLObject)math_expression_utilities.UNPROVIDED));
        }
        thread.resetMultipleValues();
        final SubLObject main_operator = infix_math_expression_main_operator(math_expression);
        final SubLObject main_operator_argnum = thread.secondMultipleValue();
        thread.resetMultipleValues();
        final SubLObject operand1 = math_expression_to_prefix_format(el_utilities.make_el_formula(math_expression_utilities.$const14$MathExpressionFn, Sequences.subseq(cycl_utilities.nat_args(math_expression, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.ZERO_INTEGER, number_utilities.f_1_(main_operator_argnum)), (SubLObject)math_expression_utilities.UNPROVIDED));
        final SubLObject operand2 = math_expression_to_prefix_format(el_utilities.make_el_formula(math_expression_utilities.$const14$MathExpressionFn, Sequences.subseq(cycl_utilities.nat_args(math_expression, (SubLObject)math_expression_utilities.UNPROVIDED), main_operator_argnum, (SubLObject)math_expression_utilities.UNPROVIDED), (SubLObject)math_expression_utilities.UNPROVIDED));
        return el_utilities.make_binary_formula(main_operator, operand1, operand2);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 308599L)
    public static SubLObject infix_math_expression_main_operator(final SubLObject math_expression) {
        SubLObject main_operator_argnum = (SubLObject)math_expression_utilities.TWO_INTEGER;
        SubLObject main_operator = cycl_utilities.nat_arg(math_expression, main_operator_argnum, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject main_operator_precedence_rank = math_expression_infix_operator_precedence_rank(main_operator);
        if (math_expression_utilities.NIL != el_utilities.formula_arityG(math_expression, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            SubLObject end_var;
            SubLObject n;
            SubLObject op;
            SubLObject precedence_rank;
            for (end_var = el_utilities.formula_arity(math_expression, (SubLObject)math_expression_utilities.UNPROVIDED), n = (SubLObject)math_expression_utilities.NIL, n = (SubLObject)math_expression_utilities.FOUR_INTEGER; !n.numGE(end_var); n = Numbers.add(n, (SubLObject)math_expression_utilities.TWO_INTEGER)) {
                op = cycl_utilities.nat_arg(math_expression, n, (SubLObject)math_expression_utilities.UNPROVIDED);
                precedence_rank = math_expression_infix_operator_precedence_rank(op);
                if (precedence_rank.numL(main_operator_precedence_rank)) {
                    main_operator = op;
                    main_operator_argnum = n;
                    main_operator_precedence_rank = precedence_rank;
                }
            }
        }
        return Values.values(main_operator, main_operator_argnum, main_operator_precedence_rank);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 312125L)
    public static SubLObject really_big_number_for_fractionP(final SubLObject obj) {
        return (SubLObject)SubLObjectFactory.makeBoolean(obj.isNumber() && !obj.isZero() && Numbers.log(Numbers.abs(obj), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER).numGE((SubLObject)math_expression_utilities.SIX_INTEGER));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 312323L)
    public static SubLObject fraction_to_el(final SubLObject fraction) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert math_expression_utilities.NIL != fraction_utilities.fraction_p(fraction) : fraction;
        if (math_expression_utilities.NIL != really_big_number_for_fractionP(fraction_utilities.numerator(fraction)) || math_expression_utilities.NIL != really_big_number_for_fractionP(fraction_utilities.denominator(fraction))) {
            final SubLObject num = fraction_utilities.defractionify(fraction);
            final SubLObject numerator_digits = number_utilities.f_1X(Numbers.truncate(Numbers.log(Numbers.abs(fraction_utilities.numerator(fraction)), (SubLObject)math_expression_utilities.TEN_INTEGER), (SubLObject)math_expression_utilities.UNPROVIDED));
            final SubLObject denominator_digits = number_utilities.f_1X(Numbers.truncate(Numbers.log(Numbers.abs(fraction_utilities.denominator(fraction)), (SubLObject)math_expression_utilities.TEN_INTEGER), (SubLObject)math_expression_utilities.UNPROVIDED));
            return (math_expression_utilities.NIL != really_big_number_for_fractionP(num)) ? scientific_numbers.scientific_number_from_subl_real(num, Numbers.max(numerator_digits, denominator_digits)) : num;
        }
        if (Numbers.abs(fraction_utilities.numerator(fraction)).numLE(Numbers.abs(fraction_utilities.denominator(fraction)))) {
            return el_utilities.make_binary_formula(math_expression_utilities.$const197$SimpleFractionFn, fraction_utilities.numerator(fraction), fraction_utilities.denominator(fraction));
        }
        if (subl_promotions.positive_integer_p(fraction_utilities.numerator(fraction)).eql(subl_promotions.positive_integer_p(fraction_utilities.denominator(fraction)))) {
            thread.resetMultipleValues();
            final SubLObject whole = Numbers.truncate(Numbers.abs(fraction_utilities.numerator(fraction)), Numbers.abs(fraction_utilities.denominator(fraction)));
            final SubLObject numerator = thread.secondMultipleValue();
            thread.resetMultipleValues();
            return el_utilities.make_ternary_formula(math_expression_utilities.$const198$MixedFractionFn, whole, numerator, Numbers.abs(fraction_utilities.denominator(fraction)));
        }
        thread.resetMultipleValues();
        final SubLObject whole = Numbers.truncate(Numbers.abs(fraction_utilities.numerator(fraction)), Numbers.abs(fraction_utilities.denominator(fraction)));
        final SubLObject numerator = thread.secondMultipleValue();
        thread.resetMultipleValues();
        return el_utilities.make_ternary_formula(math_expression_utilities.$const386$NegativeMixedFractionFn, whole, numerator, Numbers.abs(fraction_utilities.denominator(fraction)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 313723L)
    public static SubLObject fraction_from_el(final SubLObject el_fraction) {
        assert math_expression_utilities.NIL != collection_defns.fractionP(el_fraction, (SubLObject)math_expression_utilities.UNPROVIDED) : el_fraction;
        return quantities.convert_simple_fraction_to_fraction(quantities.convert_fraction_to_simple_fraction(el_fraction));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 314901L)
    public static SubLObject removal_mathexpressionnthoperand_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
        SubLObject elem = (SubLObject)math_expression_utilities.NIL;
        SubLObject n = (SubLObject)math_expression_utilities.NIL;
        list_var = math_expression_elems_and_ops(arg1);
        elem = list_var.first();
        for (n = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), elem = list_var.first(), n = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, n)) {
            final SubLObject answer_asent = el_utilities.make_ternary_formula(math_expression_utilities.$const388$mathExpressionNthOperand, arg1, Numbers.add(n, (SubLObject)math_expression_utilities.ONE_INTEGER), elem);
            final SubLObject v_bindings = unification_utilities.term_unify(answer_asent, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 315390L)
    public static SubLObject test_removal_mathexpressionnthoperand_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject v_answer = inference_kernel.new_cyc_query(sentence, mt, query_properties);
        if (math_expression_utilities.NIL != cyc_kernel.closed_query_success_token_p(v_answer)) {
            return (SubLObject)math_expression_utilities.T;
        }
        if (math_expression_utilities.NIL != bindings.bindings_p(v_answer)) {
            return bindings.bindings_values(v_answer.first()).first();
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 319938L)
    public static SubLObject removal_orderedlistofdirectsubexpressionswithoperandcount_expand(final SubLObject asent, SubLObject sense) {
        if (sense == math_expression_utilities.UNPROVIDED) {
            sense = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject arg1 = cycl_utilities.atomic_sentence_arg1(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        final SubLObject arg2 = cycl_utilities.atomic_sentence_arg2(asent, (SubLObject)math_expression_utilities.UNPROVIDED);
        SubLObject operand_count_to_answers_plist = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != subl_promotions.positive_integer_p(arg2)) {
            SubLObject cdolist_list_var = Sequences.nreverse(sub_math_expressions_direct_ordered_by_appearance(arg1, arg2));
            SubLObject elem = (SubLObject)math_expression_utilities.NIL;
            elem = cdolist_list_var.first();
            while (math_expression_utilities.NIL != cdolist_list_var) {
                operand_count_to_answers_plist = conses_high.putf(operand_count_to_answers_plist, arg2, (SubLObject)ConsesLow.cons(elem, list_utilities.plist_lookup(operand_count_to_answers_plist, arg2, (SubLObject)math_expression_utilities.NIL)));
                cdolist_list_var = cdolist_list_var.rest();
                elem = cdolist_list_var.first();
            }
        }
        else {
            SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem_ignored = (SubLObject)math_expression_utilities.NIL;
            SubLObject num = (SubLObject)math_expression_utilities.NIL;
            list_var = math_expression_elems_and_ops(arg1);
            elem_ignored = list_var.first();
            for (num = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), elem_ignored = list_var.first(), num = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, num)) {
                SubLObject cdolist_list_var2 = Sequences.nreverse(sub_math_expressions_direct_ordered_by_appearance(arg1, num));
                SubLObject elem2 = (SubLObject)math_expression_utilities.NIL;
                elem2 = cdolist_list_var2.first();
                while (math_expression_utilities.NIL != cdolist_list_var2) {
                    operand_count_to_answers_plist = conses_high.putf(operand_count_to_answers_plist, num, (SubLObject)ConsesLow.cons(elem2, list_utilities.plist_lookup(operand_count_to_answers_plist, num, (SubLObject)math_expression_utilities.NIL)));
                    cdolist_list_var2 = cdolist_list_var2.rest();
                    elem2 = cdolist_list_var2.first();
                }
            }
        }
        SubLObject remainder;
        SubLObject operand_count;
        SubLObject elem_list;
        SubLObject answer_asent;
        SubLObject v_bindings;
        for (remainder = (SubLObject)math_expression_utilities.NIL, remainder = operand_count_to_answers_plist; math_expression_utilities.NIL != remainder; remainder = conses_high.cddr(remainder)) {
            operand_count = remainder.first();
            elem_list = conses_high.cadr(remainder);
            answer_asent = el_utilities.make_ternary_formula(math_expression_utilities.$const393$orderedListOfDirectSubExpressions, arg1, operand_count, el_utilities.make_el_list(elem_list, (SubLObject)math_expression_utilities.UNPROVIDED));
            v_bindings = unification_utilities.term_unify(answer_asent, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        if (arg2.isNumber() && math_expression_utilities.NIL == conses_high.getf(operand_count_to_answers_plist, arg2, (SubLObject)math_expression_utilities.UNPROVIDED)) {
            final SubLObject answer_asent2 = el_utilities.make_ternary_formula(math_expression_utilities.$const393$orderedListOfDirectSubExpressions, arg1, arg2, math_expression_utilities.$const230$TheEmptyList);
            final SubLObject v_bindings2 = unification_utilities.term_unify(answer_asent2, asent, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
            if (math_expression_utilities.NIL != v_bindings2) {
                backward.removal_add_node(arguments.make_hl_support((SubLObject)math_expression_utilities.$kw32$OPAQUE, bindings.apply_bindings(v_bindings2, asent), (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED), v_bindings2, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 321399L)
    public static SubLObject sub_math_expressions_direct_ordered_by_appearance(final SubLObject expression, final SubLObject operand_count) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject answers = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != math_expression_p(expression) && math_expression_utilities.NIL == math_expression_quant_fn_p(expression) && math_expression_utilities.NIL == math_expression_var_p(expression)) {
            thread.resetMultipleValues();
            final SubLObject elems = math_expression_elems_and_ops(expression);
            final SubLObject ops = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (math_expression_utilities.NIL == infix_math_expression_p(expression) && operand_count.eql((SubLObject)math_expression_utilities.TWO_INTEGER)) {
                return (SubLObject)ConsesLow.list(expression);
            }
            if (math_expression_utilities.NIL == infix_math_expression_p(expression) && operand_count.eql((SubLObject)math_expression_utilities.ONE_INTEGER)) {
                return elems;
            }
            if (Sequences.length(elems).eql(operand_count)) {
                answers = (SubLObject)ConsesLow.cons(expression, answers);
            }
            final SubLObject expression_args = cycl_utilities.nat_args(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            SubLObject expression_args_length;
            SubLObject sub_seq_start;
            SubLObject sub_seq_length;
            SubLObject sub_expression;
            for (expression_args_length = Sequences.length(expression_args), sub_seq_start = (SubLObject)math_expression_utilities.NIL, sub_seq_start = (SubLObject)math_expression_utilities.ZERO_INTEGER; !sub_seq_start.numG(expression_args_length); sub_seq_start = Numbers.add((SubLObject)math_expression_utilities.TWO_INTEGER, sub_seq_start)) {
                for (sub_seq_length = (SubLObject)math_expression_utilities.NIL, sub_seq_length = (SubLObject)math_expression_utilities.ONE_INTEGER; !sub_seq_length.numG(expression_args_length); sub_seq_length = Numbers.add((SubLObject)math_expression_utilities.TWO_INTEGER, sub_seq_length)) {
                    if (sub_seq_length.eql(Numbers.subtract(Numbers.multiply((SubLObject)math_expression_utilities.TWO_INTEGER, operand_count), (SubLObject)math_expression_utilities.ONE_INTEGER))) {
                        if (operand_count.eql((SubLObject)math_expression_utilities.TWO_INTEGER)) {
                            sub_expression = ConsesLow.nth(sub_seq_start, expression_args);
                            if (math_expression_utilities.NIL != prefix_math_expression_p(sub_expression) && math_expression_utilities.TWO_INTEGER.eql(Sequences.length(cycl_utilities.formula_args(sub_expression, (SubLObject)math_expression_utilities.UNPROVIDED)))) {
                                answers = (SubLObject)ConsesLow.cons(sub_expression, answers);
                            }
                        }
                        if (math_expression_utilities.ONE_INTEGER.eql(sub_seq_length)) {
                            answers = (SubLObject)ConsesLow.cons(ConsesLow.nth(sub_seq_start, expression_args), answers);
                        }
                        else if (Numbers.add(sub_seq_start, sub_seq_length).numLE(expression_args_length)) {
                            answers = (SubLObject)ConsesLow.cons((SubLObject)ConsesLow.cons(math_expression_utilities.$const14$MathExpressionFn, Sequences.subseq(expression_args, sub_seq_start, Numbers.add(sub_seq_start, sub_seq_length))), answers);
                        }
                    }
                }
            }
        }
        return Sequences.nreverse(answers);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 323268L)
    public static SubLObject test_removal_orderedlistofdirectsubexpressionswithoperandcount_expand(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == math_expression_utilities.UNPROVIDED) {
            mt = (SubLObject)math_expression_utilities.NIL;
        }
        if (query_properties == math_expression_utilities.UNPROVIDED) {
            query_properties = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLObject v_answer = inference_kernel.new_cyc_query(sentence, mt, query_properties);
        if (math_expression_utilities.NIL != cyc_kernel.closed_query_success_token_p(v_answer)) {
            return (SubLObject)math_expression_utilities.T;
        }
        if (math_expression_utilities.NIL != bindings.bindings_p(v_answer)) {
            return bindings.bindings_values(v_answer.first()).first();
        }
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 328749L)
    public static SubLObject math_expression_flatten(final SubLObject expression) {
        if (math_expression_utilities.NIL != list_utilities.singletonP(expression)) {
            return expression;
        }
        return math_expression_flatten_int(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/math-expression-utilities.lisp", position = 329086L)
    public static SubLObject math_expression_flatten_int(final SubLObject expression, SubLObject only_operator) {
        if (only_operator == math_expression_utilities.UNPROVIDED) {
            only_operator = (SubLObject)math_expression_utilities.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (math_expression_utilities.NIL == math_expression_p(expression) || math_expression_utilities.NIL == narts_high.naut_p(expression)) {
            return expression;
        }
        final SubLObject operator = cycl_utilities.naut_functor(expression);
        SubLObject result = (SubLObject)math_expression_utilities.NIL;
        if (math_expression_utilities.NIL != only_operator && math_expression_utilities.NIL == kb_utilities.kbeq(operator, only_operator)) {
            return math_expression_flatten_int(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
        }
        if (math_expression_utilities.NIL != kb_utilities.kbeq(operator, math_expression_utilities.$const14$MathExpressionFn)) {
            thread.resetMultipleValues();
            final SubLObject elems = math_expression_elems_and_ops(expression);
            final SubLObject ops = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (math_expression_utilities.NIL == elems) {
                return (SubLObject)math_expression_utilities.NIL;
            }
            SubLObject list_var = (SubLObject)math_expression_utilities.NIL;
            SubLObject elem = (SubLObject)math_expression_utilities.NIL;
            SubLObject num = (SubLObject)math_expression_utilities.NIL;
            list_var = elems;
            elem = list_var.first();
            for (num = (SubLObject)math_expression_utilities.ZERO_INTEGER; math_expression_utilities.NIL != list_var; list_var = list_var.rest(), elem = list_var.first(), num = Numbers.add((SubLObject)math_expression_utilities.ONE_INTEGER, num)) {
                final SubLObject sub_flatten = math_expression_flatten_int(elem, operator);
                if (math_expression_utilities.NIL != infix_math_expression_p(sub_flatten)) {
                    SubLObject cdolist_list_var = sub_flatten.rest();
                    SubLObject v_object = (SubLObject)math_expression_utilities.NIL;
                    v_object = cdolist_list_var.first();
                    while (math_expression_utilities.NIL != cdolist_list_var) {
                        result = (SubLObject)ConsesLow.cons(v_object, result);
                        cdolist_list_var = cdolist_list_var.rest();
                        v_object = cdolist_list_var.first();
                    }
                }
                else {
                    result = (SubLObject)ConsesLow.cons(sub_flatten, result);
                }
                final SubLObject op = ConsesLow.nth(num, ops);
                if (math_expression_utilities.NIL != op) {
                    result = (SubLObject)ConsesLow.cons(ConsesLow.nth(num, ops), result);
                }
            }
        }
        else {
            if (math_expression_utilities.NIL == math_expression_infix_op_p(operator)) {
                return expression;
            }
            if (math_expression_utilities.NIL != list_utilities.doubletonP(expression)) {
                return cycl_utilities.naut_arg1(expression, (SubLObject)math_expression_utilities.UNPROVIDED);
            }
            SubLObject cdolist_list_var2;
            final SubLObject elems = cdolist_list_var2 = expression.rest();
            SubLObject elem2 = (SubLObject)math_expression_utilities.NIL;
            elem2 = cdolist_list_var2.first();
            while (math_expression_utilities.NIL != cdolist_list_var2) {
                final SubLObject sub_flatten2 = math_expression_flatten_int(elem2, operator);
                if (math_expression_utilities.NIL != kb_utilities.kbeq(operator, math_expression_operator(sub_flatten2))) {
                    SubLObject cdolist_list_var_$45 = sub_flatten2.rest();
                    SubLObject v_object2 = (SubLObject)math_expression_utilities.NIL;
                    v_object2 = cdolist_list_var_$45.first();
                    while (math_expression_utilities.NIL != cdolist_list_var_$45) {
                        result = (SubLObject)ConsesLow.cons(v_object2, result);
                        cdolist_list_var_$45 = cdolist_list_var_$45.rest();
                        v_object2 = cdolist_list_var_$45.first();
                    }
                }
                else {
                    result = (SubLObject)ConsesLow.cons(sub_flatten2, result);
                }
                cdolist_list_var2 = cdolist_list_var2.rest();
                elem2 = cdolist_list_var2.first();
            }
        }
        result = Sequences.remove_if((SubLObject)math_expression_utilities.$sym398$NULL, result, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED, (SubLObject)math_expression_utilities.UNPROVIDED);
        return (SubLObject)ConsesLow.cons(operator, Sequences.nreverse(result));
    }
    
    public static SubLObject declare_math_expression_utilities_file() {
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_infix_operator_precedence_rank", "MATH-EXPRESSION-INFIX-OPERATOR-PRECEDENCE-RANK", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_addition_op_p", "MATH-EXPRESSION-ADDITION-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_subtraction_op_p", "MATH-EXPRESSION-SUBTRACTION-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_addition_or_subtraction_op_p", "MATH-EXPRESSION-ADDITION-OR-SUBTRACTION-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_multiplication_op_p", "MATH-EXPRESSION-MULTIPLICATION-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_division_op_p", "MATH-EXPRESSION-DIVISION-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_multiplication_or_divide_op_p", "MATH-EXPRESSION-MULTIPLICATION-OR-DIVIDE-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_exponentiation_op_p", "MATH-EXPRESSION-EXPONENTIATION-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_nth_root_op_p", "MATH-EXPRESSION-NTH-ROOT-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_infix_op_p", "MATH-EXPRESSION-INFIX-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_unary_prefix_op_p", "MATH-EXPRESSION-UNARY-PREFIX-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_unary_surround_op_p", "MATH-EXPRESSION-UNARY-SURROUND-OP-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_with_some_operator_p", "MATH-EXPRESSION-WITH-SOME-OPERATOR-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "clear_all_math_expression_denoting_functions", "CLEAR-ALL-MATH-EXPRESSION-DENOTING-FUNCTIONS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "remove_all_math_expression_denoting_functions", "REMOVE-ALL-MATH-EXPRESSION-DENOTING-FUNCTIONS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "all_math_expression_denoting_functions_internal", "ALL-MATH-EXPRESSION-DENOTING-FUNCTIONS-INTERNAL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "all_math_expression_denoting_functions", "ALL-MATH-EXPRESSION-DENOTING-FUNCTIONS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_p", "MATH-EXPRESSION-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "infix_math_expression_p", "INFIX-MATH-EXPRESSION-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "prefix_math_expression_p", "PREFIX-MATH-EXPRESSION-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_quant_fn_p", "MATH-EXPRESSION-QUANT-FN-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "time_expression_fn_p", "TIME-EXPRESSION-FN-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_minus_quant_fn_p", "MATH-EXPRESSION-MINUS-QUANT-FN-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_quant_fn_or_minus_quant_fn_p", "MATH-EXPRESSION-QUANT-FN-OR-MINUS-QUANT-FN-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_quant_value", "MATH-EXPRESSION-QUANT-VALUE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_zero_quant_value", "MATH-EXPRESSION-ZERO-QUANT-VALUE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_var_p", "MATH-EXPRESSION-VAR-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_enclosure_fn_p", "MATH-EXPRESSION-ENCLOSURE-FN-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_statement_function_p", "MATH-STATEMENT-FUNCTION-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_statement_expressionP", "MATH-STATEMENT-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_addition_expressionP", "MATH-ADDITION-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_subtraction_expressionP", "MATH-SUBTRACTION-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_addition_or_subtraction_expressionP", "MATH-ADDITION-OR-SUBTRACTION-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_multiplication_expressionP", "MATH-MULTIPLICATION-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_division_expressionP", "MATH-DIVISION-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_multiplication_or_division_expressionP", "MATH-MULTIPLICATION-OR-DIVISION-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_exponentiation_expressionP", "MATH-EXPONENTIATION-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_nth_root_expressionP", "MATH-NTH-ROOT-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_enclosed_math_expressionP", "MATH-ENCLOSED-MATH-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_unenclose", "MATH-EXPRESSION-UNENCLOSE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_with_all_of_operator_test", "MATH-EXPRESSION-WITH-ALL-OF-OPERATOR-TEST", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_with_any_of_operator_test", "MATH-EXPRESSION-WITH-ANY-OF-OPERATOR-TEST", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_submathexpressions_direct_expand", "REMOVAL-SUBMATHEXPRESSIONS-DIRECT-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "sub_math_expressions_direct", "SUB-MATH-EXPRESSIONS-DIRECT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_submathexpressions_direct_expand", "TEST-REMOVAL-SUBMATHEXPRESSIONS-DIRECT-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_submathexpressions_expand", "REMOVAL-SUBMATHEXPRESSIONS-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "sub_math_expressions", "SUB-MATH-EXPRESSIONS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_submathexpressions_expand", "TEST-REMOVAL-SUBMATHEXPRESSIONS-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_mathquantvalue_expand", "REMOVAL-MATHQUANTVALUE-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_quant_value", "MATH-QUANT-VALUE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_mathquantvalue_expand", "TEST-REMOVAL-MATHQUANTVALUE-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_additionarglist_expand", "REMOVAL-ADDITIONARGLIST-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_addition_arglist", "MATH-EXPRESSION-ADDITION-ARGLIST", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_additionarglist_expand", "TEST-REMOVAL-ADDITIONARGLIST-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_genericadditionarglist_expand", "REMOVAL-GENERICADDITIONARGLIST-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "generic_math_expression_addition_arglist", "GENERIC-MATH-EXPRESSION-ADDITION-ARGLIST", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_genericadditionarglist_expand", "TEST-REMOVAL-GENERICADDITIONARGLIST-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_multiplicationarglist_expand", "REMOVAL-MULTIPLICATIONARGLIST-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_multiplication_arglist", "MATH-EXPRESSION-MULTIPLICATION-ARGLIST", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_multiplicationarglist_expand", "TEST-REMOVAL-MULTIPLICATIONARGLIST-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_genericmultiplicationarglist_expand", "REMOVAL-GENERICMULTIPLICATIONARGLIST-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "generic_math_expression_multiplication_arglist", "GENERIC-MATH-EXPRESSION-MULTIPLICATION-ARGLIST", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_genericmultiplicationarglist_expand", "TEST-REMOVAL-GENERICMULTIPLICATIONARGLIST-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionnegated_expand", "REMOVAL-EXPRESSIONNEGATED-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionnegated_expand", "TEST-REMOVAL-EXPRESSIONNEGATED-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionminuend_expand", "REMOVAL-EXPRESSIONMINUEND-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_minuend", "MATH-EXPRESSION-MINUEND", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionminuend_expand", "TEST-REMOVAL-EXPRESSIONMINUEND-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_genericexpressionminuend_expand", "REMOVAL-GENERICEXPRESSIONMINUEND-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "generic_math_expression_minuend", "GENERIC-MATH-EXPRESSION-MINUEND", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_genericexpressionminuend_expand", "TEST-REMOVAL-GENERICEXPRESSIONMINUEND-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionsubtrahend_expand", "REMOVAL-EXPRESSIONSUBTRAHEND-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_subtrahend", "MATH-EXPRESSION-SUBTRAHEND", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionsubtrahend_expand", "TEST-REMOVAL-EXPRESSIONSUBTRAHEND-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_genericexpressionsubtrahend_expand", "REMOVAL-GENERICEXPRESSIONSUBTRAHEND-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "generic_math_expression_subtrahend", "GENERIC-MATH-EXPRESSION-SUBTRAHEND", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_genericexpressionsubtrahend_expand", "TEST-REMOVAL-GENERICEXPRESSIONSUBTRAHEND-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressiondivisor_expand", "REMOVAL-EXPRESSIONDIVISOR-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_divisor", "MATH-EXPRESSION-DIVISOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressiondivisor_expand", "TEST-REMOVAL-EXPRESSIONDIVISOR-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_genericexpressiondivisor_expand", "REMOVAL-GENERICEXPRESSIONDIVISOR-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "generic_math_expression_divisor", "GENERIC-MATH-EXPRESSION-DIVISOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_genericexpressiondivisor_expand", "TEST-REMOVAL-GENERICEXPRESSIONDIVISOR-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressiondividend_expand", "REMOVAL-EXPRESSIONDIVIDEND-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_dividend", "MATH-EXPRESSION-DIVIDEND", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressiondividend_expand", "TEST-REMOVAL-EXPRESSIONDIVIDEND-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_genericexpressiondividend_expand", "REMOVAL-GENERICEXPRESSIONDIVIDEND-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "generic_math_expression_dividend", "GENERIC-MATH-EXPRESSION-DIVIDEND", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_genericexpressiondividend_expand", "TEST-REMOVAL-GENERICEXPRESSIONDIVIDEND-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionexponent_expand", "REMOVAL-EXPRESSIONEXPONENT-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionexponent_expand", "TEST-REMOVAL-EXPRESSIONEXPONENT-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionbase_expand", "REMOVAL-EXPRESSIONBASE-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionbase_expand", "TEST-REMOVAL-EXPRESSIONBASE-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionradicand_expand", "REMOVAL-EXPRESSIONRADICAND-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionradicand_expand", "TEST-REMOVAL-EXPRESSIONRADICAND-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionindex_expand", "REMOVAL-EXPRESSIONINDEX-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionindex_expand", "TEST-REMOVAL-EXPRESSIONINDEX-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_absolutevalueofexpression_expand", "REMOVAL-ABSOLUTEVALUEOFEXPRESSION-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_absolutevalueofexpression_expand", "TEST-REMOVAL-ABSOLUTEVALUEOFEXPRESSION-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionenclosed_expand", "REMOVAL-EXPRESSIONENCLOSED-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_enclosed_expression", "MATH-EXPRESSION-ENCLOSED-EXPRESSION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionenclosed_expand", "TEST-REMOVAL-EXPRESSIONENCLOSED-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionaddends_expand", "REMOVAL-EXPRESSIONADDENDS-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_addends", "MATH-EXPRESSION-ADDENDS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionaddends_expand", "TEST-REMOVAL-EXPRESSIONADDENDS-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionfactors_expand", "REMOVAL-EXPRESSIONFACTORS-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_factors", "MATH-EXPRESSION-FACTORS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionfactors_expand", "TEST-REMOVAL-EXPRESSIONFACTORS-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionaddendlist_expand", "REMOVAL-EXPRESSIONADDENDLIST-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionaddendlist_expand", "TEST-REMOVAL-EXPRESSIONADDENDLIST-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionfactorlist_expand", "REMOVAL-EXPRESSIONFACTORLIST-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionfactorlist_expand", "TEST-REMOVAL-EXPRESSIONFACTORLIST-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionisevaluatable_expand", "REMOVAL-EXPRESSIONISEVALUATABLE-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_is_evaluatableP", "MATH-EXPRESSION-IS-EVALUATABLE?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_evaluate", "MATH-EXPRESSION-EVALUATE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_evaluate_int", "MATH-EXPRESSION-EVALUATE-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_failed_evaluation_reasons_merge", "MATH-EXPRESSION-FAILED-EVALUATION-REASONS-MERGE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_operand_quantity_type", "MATH-EXPRESSION-OPERAND-QUANTITY-TYPE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_quant_value_type", "MATH-QUANT-VALUE-TYPE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionisevaluatable_expand", "TEST-REMOVAL-EXPRESSIONISEVALUATABLE-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_mathexpressionoperatorlist_expand", "REMOVAL-MATHEXPRESSIONOPERATORLIST-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_mathexpressionoperatorlist_expand", "TEST-REMOVAL-MATHEXPRESSIONOPERATORLIST-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_mathexpressionoperatorcount_expand", "REMOVAL-MATHEXPRESSIONOPERATORCOUNT-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_mathexpressionoperatorcount_expand", "TEST-REMOVAL-MATHEXPRESSIONOPERATORCOUNT-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_elems_and_ops", "MATH-EXPRESSION-ELEMS-AND-OPS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "make_math_expression", "MAKE-MATH-EXPRESSION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_elems_and_ops_for_additions_and_subtractions", "MATH-EXPRESSION-ELEMS-AND-OPS-FOR-ADDITIONS-AND-SUBTRACTIONS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_elems_and_ops_for_addition", "MATH-EXPRESSION-ELEMS-AND-OPS-FOR-ADDITION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_elems_and_ops_for_multiplication_and_division", "MATH-EXPRESSION-ELEMS-AND-OPS-FOR-MULTIPLICATION-AND-DIVISION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_elems_and_ops_for_multiplication", "MATH-EXPRESSION-ELEMS-AND-OPS-FOR-MULTIPLICATION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_mathexpressionoperator_expand", "REMOVAL-MATHEXPRESSIONOPERATOR-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_operator", "MATH-EXPRESSION-OPERATOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_mathexpressionoperator_expand", "TEST-REMOVAL-MATHEXPRESSIONOPERATOR-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_leftsideofmathematicalstatement_expand", "REMOVAL-LEFTSIDEOFMATHEMATICALSTATEMENT-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_leftsideofmathematicalstatement_expand", "TEST-REMOVAL-LEFTSIDEOFMATHEMATICALSTATEMENT-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_rightsideofmathematicalstatement_expand", "REMOVAL-RIGHTSIDEOFMATHEMATICALSTATEMENT-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_rightsideofmathematicalstatement_expand", "TEST-REMOVAL-RIGHTSIDEOFMATHEMATICALSTATEMENT-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_likemathterms_expand", "REMOVAL-LIKEMATHTERMS-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "like_fractionsP", "LIKE-FRACTIONS?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "like_math_termsP", "LIKE-MATH-TERMS?", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "normalize_term_for_like_math_terms", "NORMALIZE-TERM-FOR-LIKE-MATH-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "why_like_math_termsP", "WHY-LIKE-MATH-TERMS?", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "like_math_terms_listsP", "LIKE-MATH-TERMS-LISTS?", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "why_like_math_terms_listsP", "WHY-LIKE-MATH-TERMS-LISTS?", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "simplify_math_expression_multiplication_term_for_like_terms", "SIMPLIFY-MATH-EXPRESSION-MULTIPLICATION-TERM-FOR-LIKE-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_likemathterms_expand", "TEST-REMOVAL-LIKEMATHTERMS-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_unlikemathterms_expand", "REMOVAL-UNLIKEMATHTERMS-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_simplifiablemathexpression_expand", "REMOVAL-SIMPLIFIABLEMATHEXPRESSION-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_unsimplifiablemathexpression_expand", "REMOVAL-UNSIMPLIFIABLEMATHEXPRESSION-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "unsimplifiable_math_expressionP", "UNSIMPLIFIABLE-MATH-EXPRESSION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "like_math_terms_for_simplificationP", "LIKE-MATH-TERMS-FOR-SIMPLIFICATION?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_unsimplifiablemathexpression_expand", "TEST-REMOVAL-UNSIMPLIFIABLEMATHEXPRESSION-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_simplifiablemathexpression_expand", "TEST-REMOVAL-SIMPLIFIABLEMATHEXPRESSION-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_equals_statementP", "MATH-EQUALS-STATEMENT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_equation_univariate_linearP", "MATH-EQUATION-UNIVARIATE-LINEAR?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_univariate_linearP", "MATH-EXPRESSION-UNIVARIATE-LINEAR?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_comparablemathterms_expand", "REMOVAL-COMPARABLEMATHTERMS-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_comparablemathterms_expand", "TEST-REMOVAL-COMPARABLEMATHTERMS-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_likemathtermsonoppositesides_expand", "REMOVAL-LIKEMATHTERMSONOPPOSITESIDES-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_likemathtermsonoppositesides_expand", "TEST-REMOVAL-LIKEMATHTERMSONOPPOSITESIDES-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "apply_operation_to_math_statement", "APPLY-OPERATION-TO-MATH-STATEMENT", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "apply_operation_to_math_expression", "APPLY-OPERATION-TO-MATH-EXPRESSION", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_apply_operation_to_math_statement", "TEST-APPLY-OPERATION-TO-MATH-STATEMENT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_besttermtoremovevia_expand", "REMOVAL-BESTTERMTOREMOVEVIA-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_statement_best_term_to_remove", "MATH-STATEMENT-BEST-TERM-TO-REMOVE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_statement_best_term_to_remove_int", "MATH-STATEMENT-BEST-TERM-TO-REMOVE-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_best_term_to_remove", "MATH-EXPRESSION-BEST-TERM-TO-REMOVE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "possibly_denegate_math_expression", "POSSIBLY-DENEGATE-MATH-EXPRESSION", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "possibly_negate_math_quant_fn", "POSSIBLY-NEGATE-MATH-QUANT-FN", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_besttermtoremovevia_expand", "TEST-REMOVAL-BESTTERMTOREMOVEVIA-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_possibletermstoremovevia_expand", "REMOVAL-POSSIBLETERMSTOREMOVEVIA-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_statement_terms_to_remove", "MATH-STATEMENT-TERMS-TO-REMOVE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_terms_to_remove", "MATH-EXPRESSION-TERMS-TO-REMOVE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_possibletermstoremovevia_expand", "TEST-REMOVAL-POSSIBLETERMSTOREMOVEVIA-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_mathtermcoefficient_expand", "REMOVAL-MATHTERMCOEFFICIENT-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_mathtermcoefficient_expand", "TEST-REMOVAL-MATHTERMCOEFFICIENT-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_mathtermvariablewithdegree_expand", "REMOVAL-MATHTERMVARIABLEWITHDEGREE-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_variables_and_degrees", "MATH-EXPRESSION-VARIABLES-AND-DEGREES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_mathtermvariablewithdegree_expand", "TEST-REMOVAL-MATHTERMVARIABLEWITHDEGREE-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_mathtermdegree_expand", "REMOVAL-MATHTERMDEGREE-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_degree", "MATH-EXPRESSION-DEGREE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_mathtermdegree_expand", "TEST-REMOVAL-MATHTERMDEGREE-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_commonprimefactorlist_expand", "REMOVAL-COMMONPRIMEFACTORLIST-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_commonprimefactorlist_expand", "TEST-REMOVAL-COMMONPRIMEFACTORLIST-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_simplifiablefraction_expand", "REMOVAL-SIMPLIFIABLEFRACTION-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_simplifiablefraction_expand", "TEST-REMOVAL-SIMPLIFIABLEFRACTION-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_mathexpressionoperandlist_expand", "REMOVAL-MATHEXPRESSIONOPERANDLIST-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_mathexpressionoperandlist_expand", "TEST-REMOVAL-MATHEXPRESSIONOPERANDLIST-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "like_fractions_or_non_fractional_math_termsP", "LIKE-FRACTIONS-OR-NON-FRACTIONAL-MATH-TERMS?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_associateliketerms_expand", "REMOVAL-ASSOCIATELIKETERMS-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_associateliketerms_expand", "TEST-REMOVAL-ASSOCIATELIKETERMS-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_term_type_fractionP", "MATH-TERM-TYPE-FRACTION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_term_type_L", "MATH-TERM-TYPE-<", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_term_type_internal", "MATH-TERM-TYPE-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_term_type", "MATH-TERM-TYPE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_term_L_compare_values", "MATH-TERM-<-COMPARE-VALUES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_term_L", "MATH-TERM-<", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "group_and_sort_like_math_terms", "GROUP-AND-SORT-LIKE-MATH-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "group_like_math_terms", "GROUP-LIKE-MATH-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionreorderedtogroupliketerms_expand", "REMOVAL-EXPRESSIONREORDEREDTOGROUPLIKETERMS-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionreorderedtogroupliketerms_expand", "TEST-REMOVAL-EXPRESSIONREORDEREDTOGROUPLIKETERMS-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionhasnonadjacentliketermsasoperands_expand", "REMOVAL-EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionhasnonadjacentliketermsasoperands_expand", "TEST-REMOVAL-EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "strong_math_term_L", "STRONG-MATH-TERM-<", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "sort_math_terms", "SORT-MATH-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_expressionreorderedinascendingorder_expand", "REMOVAL-EXPRESSIONREORDEREDINASCENDINGORDER-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_expressionreorderedinascendingorder_expand", "TEST-REMOVAL-EXPRESSIONREORDEREDINASCENDINGORDER-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_bestsubexpressiontoevaluate_expand", "REMOVAL-BESTSUBEXPRESSIONTOEVALUATE-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_bestsubexpressiontoevaluate_expand", "TEST-REMOVAL-BESTSUBEXPRESSIONTOEVALUATE-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_to_prefix_format", "MATH-EXPRESSION-TO-PREFIX-FORMAT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "infix_math_expression_to_prefix_format", "INFIX-MATH-EXPRESSION-TO-PREFIX-FORMAT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "infix_math_expression_main_operator", "INFIX-MATH-EXPRESSION-MAIN-OPERATOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "really_big_number_for_fractionP", "REALLY-BIG-NUMBER-FOR-FRACTION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "fraction_to_el", "FRACTION-TO-EL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "fraction_from_el", "FRACTION-FROM-EL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_mathexpressionnthoperand_expand", "REMOVAL-MATHEXPRESSIONNTHOPERAND-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_mathexpressionnthoperand_expand", "TEST-REMOVAL-MATHEXPRESSIONNTHOPERAND-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "removal_orderedlistofdirectsubexpressionswithoperandcount_expand", "REMOVAL-ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT-EXPAND", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "sub_math_expressions_direct_ordered_by_appearance", "SUB-MATH-EXPRESSIONS-DIRECT-ORDERED-BY-APPEARANCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "test_removal_orderedlistofdirectsubexpressionswithoperandcount_expand", "TEST-REMOVAL-ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT-EXPAND", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_flatten", "MATH-EXPRESSION-FLATTEN", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.math_expression_utilities", "math_expression_flatten_int", "MATH-EXPRESSION-FLATTEN-INT", 1, 1, false);
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    public static SubLObject init_math_expression_utilities_file() {
        math_expression_utilities.$math_expression_multiplication_fns$ = SubLFiles.deflexical("*MATH-EXPRESSION-MULTIPLICATION-FNS*", (SubLObject)math_expression_utilities.$list0);
        math_expression_utilities.$math_expression_division_fns$ = SubLFiles.deflexical("*MATH-EXPRESSION-DIVISION-FNS*", (SubLObject)math_expression_utilities.$list1);
        math_expression_utilities.$math_expression_addition_fns$ = SubLFiles.deflexical("*MATH-EXPRESSION-ADDITION-FNS*", (SubLObject)math_expression_utilities.$list2);
        math_expression_utilities.$math_expression_subtraction_fns$ = SubLFiles.deflexical("*MATH-EXPRESSION-SUBTRACTION-FNS*", (SubLObject)math_expression_utilities.$list3);
        math_expression_utilities.$math_expression_infix_operators$ = SubLFiles.deflexical("*MATH-EXPRESSION-INFIX-OPERATORS*", (SubLObject)math_expression_utilities.$list4);
        math_expression_utilities.$math_expression_infix_operator_precedence_rank$ = SubLFiles.deflexical("*MATH-EXPRESSION-INFIX-OPERATOR-PRECEDENCE-RANK*", (SubLObject)math_expression_utilities.$list5);
        math_expression_utilities.$math_expression_unary_prefix_operators$ = SubLFiles.deflexical("*MATH-EXPRESSION-UNARY-PREFIX-OPERATORS*", (SubLObject)math_expression_utilities.$list6);
        math_expression_utilities.$math_expression_unary_surround_operators$ = SubLFiles.deflexical("*MATH-EXPRESSION-UNARY-SURROUND-OPERATORS*", (SubLObject)math_expression_utilities.$list7);
        math_expression_utilities.$all_math_expression_denoting_functions_caching_state$ = SubLFiles.deflexical("*ALL-MATH-EXPRESSION-DENOTING-FUNCTIONS-CACHING-STATE*", (SubLObject)math_expression_utilities.NIL);
        math_expression_utilities.$math_expression_enclosure_fns$ = SubLFiles.deflexical("*MATH-EXPRESSION-ENCLOSURE-FNS*", (SubLObject)math_expression_utilities.$list19);
        math_expression_utilities.$math_statement_fns$ = SubLFiles.defparameter("*MATH-STATEMENT-FNS*", (SubLObject)math_expression_utilities.$list20);
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    public static SubLObject setup_math_expression_utilities_file() {
        memoization_state.note_globally_cached_function((SubLObject)math_expression_utilities.$sym10$ALL_MATH_EXPRESSION_DENOTING_FUNCTIONS);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const29$subMathExpressions_Direct, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw30$REMOVAL_SUBMATHEXPRESSIONS_DIRECT, (SubLObject)math_expression_utilities.$list31);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym33$TEST_REMOVAL_SUBMATHEXPRESSIONS_DIRECT_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list41);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const42$subMathExpressions, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw43$REMOVAL_SUBMATHEXPRESSIONS, (SubLObject)math_expression_utilities.$list44);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym46$TEST_REMOVAL_SUBMATHEXPRESSIONS_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list47);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const48$mathQuantValue, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw49$REMOVAL_MATHQUANTVALUE, (SubLObject)math_expression_utilities.$list50);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym54$TEST_REMOVAL_MATHQUANTVALUE_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list55);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const56$additionArglist, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw57$REMOVAL_ADDITIONARGLIST, (SubLObject)math_expression_utilities.$list58);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym62$TEST_REMOVAL_ADDITIONARGLIST_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list63);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const64$genericAdditionArglist, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw65$REMOVAL_GENERICADDITIONARGLIST, (SubLObject)math_expression_utilities.$list66);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym67$TEST_REMOVAL_GENERICADDITIONARGLIST_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list68);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const69$multiplicationArglist, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw70$REMOVAL_MULTIPLICATIONARGLIST, (SubLObject)math_expression_utilities.$list71);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym73$TEST_REMOVAL_MULTIPLICATIONARGLIST_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list74);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const75$genericMultiplicationArglist, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw76$REMOVAL_GENERICMULTIPLICATIONARGLIST, (SubLObject)math_expression_utilities.$list77);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym78$TEST_REMOVAL_GENERICMULTIPLICATIONARGLIST_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list79);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const80$expressionNegated, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw81$REMOVAL_EXPRESSIONNEGATED, (SubLObject)math_expression_utilities.$list82);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym83$TEST_REMOVAL_EXPRESSIONNEGATED_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list84);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const85$expressionMinuend, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw86$REMOVAL_EXPRESSIONMINUEND, (SubLObject)math_expression_utilities.$list87);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym89$TEST_REMOVAL_EXPRESSIONMINUEND_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list90);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const91$genericExpressionMinuend, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw92$REMOVAL_GENERICEXPRESSIONMINUEND, (SubLObject)math_expression_utilities.$list93);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym94$TEST_REMOVAL_GENERICEXPRESSIONMINUEND_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list95);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const96$expressionSubtrahend, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw97$REMOVAL_EXPRESSIONSUBTRAHEND, (SubLObject)math_expression_utilities.$list98);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym99$TEST_REMOVAL_EXPRESSIONSUBTRAHEND_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list100);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const101$genericExpressionSubtrahend, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw102$REMOVAL_GENERICEXPRESSIONSUBTRAHEND, (SubLObject)math_expression_utilities.$list103);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym104$TEST_REMOVAL_GENERICEXPRESSIONSUBTRAHEND_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list105);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const106$expressionDivisor, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw107$REMOVAL_EXPRESSIONDIVISOR, (SubLObject)math_expression_utilities.$list108);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym109$TEST_REMOVAL_EXPRESSIONDIVISOR_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list110);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const111$genericExpressionDivisor, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw112$REMOVAL_GENERICEXPRESSIONDIVISOR, (SubLObject)math_expression_utilities.$list113);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym114$TEST_REMOVAL_GENERICEXPRESSIONDIVISOR_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list115);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const116$expressionDividend, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw117$REMOVAL_EXPRESSIONDIVIDEND, (SubLObject)math_expression_utilities.$list118);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym119$TEST_REMOVAL_EXPRESSIONDIVIDEND_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list120);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const121$genericExpressionDividend, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw122$REMOVAL_GENERICEXPRESSIONDIVIDEND, (SubLObject)math_expression_utilities.$list123);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym124$TEST_REMOVAL_GENERICEXPRESSIONDIVIDEND_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list125);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const126$expressionExponent, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw127$REMOVAL_EXPRESSIONEXPONENT, (SubLObject)math_expression_utilities.$list128);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym129$TEST_REMOVAL_EXPRESSIONEXPONENT_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list130);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const131$expressionBase, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw132$REMOVAL_EXPRESSIONBASE, (SubLObject)math_expression_utilities.$list133);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym134$TEST_REMOVAL_EXPRESSIONBASE_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list135);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const136$expressionRadicand, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw137$REMOVAL_EXPRESSIONRADICAND, (SubLObject)math_expression_utilities.$list138);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym139$TEST_REMOVAL_EXPRESSIONRADICAND_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list140);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const141$expressionIndex, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw142$REMOVAL_EXPRESSIONINDEX, (SubLObject)math_expression_utilities.$list143);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym144$TEST_REMOVAL_EXPRESSIONINDEX_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list145);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const146$absoluteValueOfExpression, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw147$REMOVAL_ABSOLUTEVALUEOFEXPRESSION, (SubLObject)math_expression_utilities.$list148);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym150$TEST_REMOVAL_ABSOLUTEVALUEOFEXPRESSION_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list151);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const152$expressionEnclosed, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw153$REMOVAL_EXPRESSIONENCLOSED, (SubLObject)math_expression_utilities.$list154);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym155$TEST_REMOVAL_EXPRESSIONENCLOSED_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list156);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const157$expressionAddends, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw158$REMOVAL_EXPRESSIONADDENDS, (SubLObject)math_expression_utilities.$list159);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym160$TEST_REMOVAL_EXPRESSIONADDENDS_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list161);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const162$expressionFactors, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw163$REMOVAL_EXPRESSIONFACTORS, (SubLObject)math_expression_utilities.$list164);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym165$TEST_REMOVAL_EXPRESSIONFACTORS_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list166);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const167$expressionAddendList, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw168$REMOVAL_EXPRESSIONADDENDLIST, (SubLObject)math_expression_utilities.$list169);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym170$TEST_REMOVAL_EXPRESSIONADDENDLIST_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list171);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const172$expressionFactorList, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw173$REMOVAL_EXPRESSIONFACTORLIST, (SubLObject)math_expression_utilities.$list174);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym176$TEST_REMOVAL_EXPRESSIONFACTORLIST_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list177);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const178$expressionIsEvaluatable, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw179$REMOVAL_EXPRESSIONISEVALUATABLE, (SubLObject)math_expression_utilities.$list180);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym222$MATH_EXPRESSION_EVALUATE, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.$sym223$TERM_UNIFY), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list224);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym225$TEST_REMOVAL_EXPRESSIONISEVALUATABLE_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list226);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const227$mathExpressionOperatorList, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw228$REMOVAL_MATHEXPRESSIONOPERATORLIST, (SubLObject)math_expression_utilities.$list229);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym231$TEST_REMOVAL_MATHEXPRESSIONOPERATORLIST_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list232);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const233$mathExpressionOperatorCount, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw234$REMOVAL_MATHEXPRESSIONOPERATORCOUNT, (SubLObject)math_expression_utilities.$list235);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym236$TEST_REMOVAL_MATHEXPRESSIONOPERATORCOUNT_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list237);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym239$MATH_EXPRESSION_ELEMS_AND_OPS_FOR_ADDITIONS_AND_SUBTRACTIONS, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list240);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const241$mathExpressionOperator, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw242$REMOVAL_MATHEXPRESSIONOPERATOR, (SubLObject)math_expression_utilities.$list243);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym244$TEST_REMOVAL_MATHEXPRESSIONOPERATOR_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list245);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const246$leftSideOfMathematicalStatement, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw247$REMOVAL_LEFTSIDEOFMATHEMATICALSTATEMENT, (SubLObject)math_expression_utilities.$list248);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym249$TEST_REMOVAL_LEFTSIDEOFMATHEMATICALSTATEMENT_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list250);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const251$rightSideOfMathematicalStatement, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw252$REMOVAL_RIGHTSIDEOFMATHEMATICALSTATEMENT, (SubLObject)math_expression_utilities.$list253);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym254$TEST_REMOVAL_RIGHTSIDEOFMATHEMATICALSTATEMENT_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list255);
        preference_modules.doomed_unless_all_args_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const256$likeMathTerms);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw257$REMOVAL_LIKEMATHTERMS, (SubLObject)math_expression_utilities.$list258);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym260$TEST_REMOVAL_LIKEMATHTERMS_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list261);
        preference_modules.doomed_unless_all_args_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const262$unlikeMathTerms);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw263$REMOVAL_UNLIKEMATHTERMS, (SubLObject)math_expression_utilities.$list264);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const265$simplifiableMathExpression, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw266$REMOVAL_SIMPLIFIABLEMATHEXPRESSION, (SubLObject)math_expression_utilities.$list267);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const268$unsimplifiableMathExpression, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw269$REMOVAL_UNSIMPLIFIABLEMATHEXPRESSION, (SubLObject)math_expression_utilities.$list270);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym275$TEST_REMOVAL_UNSIMPLIFIABLEMATHEXPRESSION_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list276);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym277$TEST_REMOVAL_SIMPLIFIABLEMATHEXPRESSION_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list278);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym281$MATH_EQUATION_UNIVARIATE_LINEAR_, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list282);
        preference_modules.doomed_unless_all_args_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const283$comparableMathTerms);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw284$REMOVAL_COMPARABLEMATHTERMS, (SubLObject)math_expression_utilities.$list285);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym286$TEST_REMOVAL_COMPARABLEMATHTERMS_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list287);
        preference_modules.doomed_unless_all_args_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const288$likeMathTermsOnOppositeSides);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw289$REMOVAL_LIKEMATHTERMSONOPPOSITESIDES, (SubLObject)math_expression_utilities.$list290);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym291$TEST_REMOVAL_LIKEMATHTERMSONOPPOSITESIDES_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list292);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym299$TEST_APPLY_OPERATION_TO_MATH_STATEMENT, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list300);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const301$bestTermToRemoveVia, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw302$REMOVAL_BESTTERMTOREMOVEVIA, (SubLObject)math_expression_utilities.$list303);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym304$TEST_REMOVAL_BESTTERMTOREMOVEVIA_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list305);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const306$possibleTermsToRemoveVia, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw307$REMOVAL_POSSIBLETERMSTOREMOVEVIA, (SubLObject)math_expression_utilities.$list308);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym310$TEST_REMOVAL_POSSIBLETERMSTOREMOVEVIA_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.$sym311$HAS_MEMBER_EQUAL_), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list312);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const313$mathTermCoefficient, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw314$REMOVAL_MATHTERMCOEFFICIENT, (SubLObject)math_expression_utilities.$list315);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym316$TEST_REMOVAL_MATHTERMCOEFFICIENT_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list317);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const318$mathTermVariableWithDegree, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw319$REMOVAL_MATHTERMVARIABLEWITHDEGREE, (SubLObject)math_expression_utilities.$list320);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym322$TEST_REMOVAL_MATHTERMVARIABLEWITHDEGREE_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list323);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const324$mathTermDegree, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw325$REMOVAL_MATHTERMDEGREE, (SubLObject)math_expression_utilities.$list326);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym328$TEST_REMOVAL_MATHTERMDEGREE_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list329);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const330$commonPrimeFactorList, (SubLObject)math_expression_utilities.ONE_INTEGER);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const330$commonPrimeFactorList, (SubLObject)math_expression_utilities.TWO_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw331$REMOVAL_COMMONPRIMEFACTORLIST, (SubLObject)math_expression_utilities.$list332);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym335$TEST_REMOVAL_COMMONPRIMEFACTORLIST_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list336);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const337$simplifiableFraction, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw338$REMOVAL_SIMPLIFIABLEFRACTION, (SubLObject)math_expression_utilities.$list339);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym340$TEST_REMOVAL_SIMPLIFIABLEFRACTION_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list341);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const342$mathExpressionOperandList, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw343$REMOVAL_MATHEXPRESSIONOPERANDLIST, (SubLObject)math_expression_utilities.$list344);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym345$TEST_REMOVAL_MATHEXPRESSIONOPERANDLIST_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list346);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const347$associateLikeTerms, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw348$REMOVAL_ASSOCIATELIKETERMS, (SubLObject)math_expression_utilities.$list349);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym351$TEST_REMOVAL_ASSOCIATELIKETERMS_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list352);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const353$expressionReorderedToGroupLikeTer, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw354$REMOVAL_EXPRESSIONREORDEREDTOGROUPLIKETERMS, (SubLObject)math_expression_utilities.$list355);
        memoization_state.note_memoized_function((SubLObject)math_expression_utilities.$sym360$MATH_TERM_TYPE);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym364$TEST_REMOVAL_EXPRESSIONREORDEREDTOGROUPLIKETERMS_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list365);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const366$expressionHasNonAdjacentLikeTerms, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw367$REMOVAL_EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS, (SubLObject)math_expression_utilities.$list368);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym369$TEST_REMOVAL_EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list370);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const371$expressionReorderedInAscendingOrd, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw372$REMOVAL_EXPRESSIONREORDEREDINASCENDINGORDER, (SubLObject)math_expression_utilities.$list373);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym375$TEST_REMOVAL_EXPRESSIONREORDEREDINASCENDINGORDER_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list376);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const377$bestSubExpressionToEvaluate, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw378$REMOVAL_BESTSUBEXPRESSIONTOEVALUATE, (SubLObject)math_expression_utilities.$list379);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym380$TEST_REMOVAL_BESTSUBEXPRESSIONTOEVALUATE_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), (SubLObject)math_expression_utilities.$list381);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym383$MATH_EXPRESSION_TO_PREFIX_FORMAT, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list384);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const388$mathExpressionNthOperand, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw389$REMOVAL_MATHEXPRESSIONNTHOPERAND, (SubLObject)math_expression_utilities.$list390);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym391$TEST_REMOVAL_MATHEXPRESSIONNTHOPERAND_EXPAND, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list392);
        preference_modules.doomed_unless_arg_bindable((SubLObject)math_expression_utilities.$kw28$POS, math_expression_utilities.$const393$orderedListOfDirectSubExpressions, (SubLObject)math_expression_utilities.ONE_INTEGER);
        inference_modules.inference_removal_module((SubLObject)math_expression_utilities.$kw394$REMOVAL_ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT, (SubLObject)math_expression_utilities.$list395);
        generic_testing.define_test_case_table_int((SubLObject)math_expression_utilities.$sym396$TEST_REMOVAL_ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT_EX, (SubLObject)ConsesLow.list(new SubLObject[] { math_expression_utilities.$kw34$TEST, Symbols.symbol_function((SubLObject)math_expression_utilities.EQUAL), math_expression_utilities.$kw35$OWNER, math_expression_utilities.NIL, math_expression_utilities.$kw36$CLASSES, math_expression_utilities.$list37, math_expression_utilities.$kw38$KB, math_expression_utilities.$kw39$FULL, math_expression_utilities.$kw40$WORKING_, math_expression_utilities.T }), math_expression_utilities.$list397);
        return (SubLObject)math_expression_utilities.NIL;
    }
    
    private static SubLObject _constant_41_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_47_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)SubLObjectFactory.makeSymbol("?VAR0"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_261_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeDouble(8.5)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeDouble(8.5)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeDouble(8.5)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeDouble(8.5)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("p"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("p"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("p"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("p")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)SubLObjectFactory.makeDouble(3.7))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)SubLObjectFactory.makeDouble(3.7))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_276_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.FOUR_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.ZERO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.ZERO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.ZERO_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.FIVE_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FOUR_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeDouble(3.14)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.EIGHT_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227)))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER))))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWENTY_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NegativeMixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)SubLObjectFactory.makeInteger(-5), (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-5))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-5))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)SubLObjectFactory.makeInteger(-5), (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_278_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.FOUR_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.FIVE_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FOUR_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227)))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER))))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWENTY_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedAdditionExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(123)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(2460)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(36900))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedAdditionExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(2460)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(36900))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedAdditionExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(36900))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedAdditionExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(2460)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(36900))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedAdditionExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(2460)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(36900))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedAdditionExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(36900))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeOfDay-PM")), (SubLObject)math_expression_utilities.TWELVE_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(45)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeOfDay-PM")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(40))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeOfDay-PM")), (SubLObject)math_expression_utilities.TWELVE_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(45)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeOfDay-PM")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(40))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeOfDay-PM")), (SubLObject)math_expression_utilities.TWELVE_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(45)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeOfDay-PM")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(40))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeOfDay-PM")), (SubLObject)math_expression_utilities.TWELVE_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(45)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeOfDay-PM")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(40))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NegativeMixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)SubLObjectFactory.makeInteger(-5), (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-5))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-5))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)SubLObjectFactory.makeInteger(-5), (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL) });
    }
    
    private static SubLObject _constant_287_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Mile")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.SIX_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Mile")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Mile")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Mile")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Mile")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HoursDuration")), (SubLObject)math_expression_utilities.SIX_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Mile")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Ohm")), (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Mile")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeDouble(8.5)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("p"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("p"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("p"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("p")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("q"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)SubLObjectFactory.makeDouble(3.7))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)SubLObjectFactory.makeDouble(3.7))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_292_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathGreaterThanStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathGreaterThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("p")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("p"))))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.SIX_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FOUR_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.SIX_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathGreaterThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("INFIXPLUS"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("INFIXPLUS"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(98)))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("INFIX"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))))), (SubLObject)math_expression_utilities.NIL) });
    }
    
    private static SubLObject _constant_300_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AddTermToBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathGreaterThanStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathGreaterThanStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AddTermToBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AddTermToBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AddTermToBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AddTermToBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AddTermToBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(34))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220))))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220)))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(220)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(227))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(220)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(220)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(220)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(227)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(220))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MultiplyBothSidesOfMathStatementByTerm")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MultiplyBothSidesOfMathStatementByTerm")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DivideBothSidesOfMathStatementByTerm")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DivideBothSidesOfMathStatementByTerm")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ApplyOperationToMathStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MultiplyBothSidesOfMathStatementByTerm")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))))) });
    }
    
    private static SubLObject _constant_305_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?REMOVE-TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OPERATION"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaAdditionOrSubtraction")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?REMOVE-TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OPERATION"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AddTermToBothSidesOfMathStatement")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaAdditionOrSubtraction")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AddTermToBothSidesOfMathStatement")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaAdditionOrSubtraction")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AddTermToBothSidesOfMathStatement")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaMultiplicationOrDivision")))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaAdditionOrSubtraction")))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaMultiplicationOrDivision")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MultiplyBothSidesOfMathStatementByTerm")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaAdditionOrSubtraction")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaAdditionOrSubtraction")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaMultiplicationOrDivision")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MultiplyBothSidesOfMathStatementByTerm")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(36)))), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?METHOD"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaMultiplicationOrDivision")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-6)), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?METHOD"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DivideBothSidesOfMathStatementByTerm")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(36)))), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?METHOD"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaMultiplicationOrDivision")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-6)), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?METHOD"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DivideBothSidesOfMathStatementByTerm")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-36))), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?METHOD"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaMultiplicationOrDivision")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-6)), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?METHOD"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DivideBothSidesOfMathStatementByTerm")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-6)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-36))), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?METHOD"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaMultiplicationOrDivision")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-6)), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?METHOD"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DivideBothSidesOfMathStatementByTerm")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-5))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaMultiplicationOrDivision")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-5)), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MultiplyBothSidesOfMathStatementByTerm")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementViaMultiplicationOrDivision")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-5)), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OP"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MultiplyBothSidesOfMathStatementByTerm")))))) });
    }
    
    private static SubLObject _constant_317_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("X"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-2)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("X"))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-4)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-4)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-4)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-7)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(-7)))), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_323_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("X"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("X")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("X"))), (SubLObject)SubLObjectFactory.makeSymbol("?VAR"), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_329_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?DEGREE"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_346_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.THREE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_352_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)))))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)))))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)) }), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?NEW")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?NEW")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)))))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?NEW")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))) }), (SubLObject)SubLObjectFactory.makeSymbol("?NEW")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))) }), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))) }), (SubLObject)SubLObjectFactory.makeSymbol("?NEW")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_365_initializer() {
        return (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER) }), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER)) })), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER) }), (SubLObject)SubLObjectFactory.makeSymbol("?NEW")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER) }), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))) })), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER) }), (SubLObject)SubLObjectFactory.makeSymbol("?NEW")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER)) }), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))) })), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER)) }), (SubLObject)SubLObjectFactory.makeSymbol("?NEW")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER) }), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER)) })), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER) }), (SubLObject)SubLObjectFactory.makeSymbol("?NEW")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
    }
    
    private static SubLObject _constant_370_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER, (SubLObject)math_expression_utilities.TWELVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(37)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER, (SubLObject)math_expression_utilities.TWELVE_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER) }))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER) }))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER)) }))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER)) }))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER)) }))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWELVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))) }))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER, (SubLObject)math_expression_utilities.TWELVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER, (SubLObject)math_expression_utilities.TWELVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWELVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(37))))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER))))), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_384_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FOUR_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.FOUR_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.EIGHT_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.EIGHT_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.EIGHT_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.EIGHT_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER)))) });
    }
    
    private static SubLObject _constant_392_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?X"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?X"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?X"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?X"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(50)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER) }), (SubLObject)math_expression_utilities.SIX_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?X"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(50)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER) }), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?X"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?X"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?X"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)math_expression_utilities.T) });
    }
    
    private static SubLObject _constant_397_initializer() {
        return (SubLObject)ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheEmptyList"))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER))))), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER))))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.NINE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)))))) });
    }
    
    public void declareFunctions() {
        declare_math_expression_utilities_file();
    }
    
    public void initializeVariables() {
        init_math_expression_utilities_file();
    }
    
    public void runTopLevelForms() {
        setup_math_expression_utilities_file();
    }
    
    static {
        me = (SubLFile)new math_expression_utilities();
        math_expression_utilities.$math_expression_multiplication_fns$ = null;
        math_expression_utilities.$math_expression_division_fns$ = null;
        math_expression_utilities.$math_expression_addition_fns$ = null;
        math_expression_utilities.$math_expression_subtraction_fns$ = null;
        math_expression_utilities.$math_expression_infix_operators$ = null;
        math_expression_utilities.$math_expression_infix_operator_precedence_rank$ = null;
        math_expression_utilities.$math_expression_unary_prefix_operators$ = null;
        math_expression_utilities.$math_expression_unary_surround_operators$ = null;
        math_expression_utilities.$all_math_expression_denoting_functions_caching_state$ = null;
        math_expression_utilities.$math_expression_enclosure_fns$ = null;
        math_expression_utilities.$math_statement_fns$ = null;
        $list0 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedMultiplicationExpressionFn")));
        $list1 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLongDivisionStatementFn")));
        $list2 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedAdditionExpressionFn")));
        $list3 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedSubtractionExpressionFn")));
        $list4 = ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedMultiplicationExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLongDivisionStatementFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedAdditionExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedSubtractionExpressionFn")) });
        $list5 = ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), math_expression_utilities.TWO_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), math_expression_utilities.TWO_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), math_expression_utilities.ONE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), math_expression_utilities.ONE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), math_expression_utilities.ONE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedMultiplicationExpressionFn")), math_expression_utilities.ONE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), math_expression_utilities.ONE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), math_expression_utilities.ONE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), math_expression_utilities.ONE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLongDivisionStatementFn")), math_expression_utilities.ONE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), math_expression_utilities.ZERO_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedAdditionExpressionFn")), math_expression_utilities.ZERO_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), math_expression_utilities.ZERO_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("StackedSubtractionExpressionFn")), math_expression_utilities.ZERO_INTEGER });
        $list6 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")));
        $list7 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AbsoluteValueExpressionFn")));
        $const8$PowerExpressionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn"));
        $const9$NthRootExpressionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn"));
        $sym10$ALL_MATH_EXPRESSION_DENOTING_FUNCTIONS = SubLObjectFactory.makeSymbol("ALL-MATH-EXPRESSION-DENOTING-FUNCTIONS");
        $const11$MathematicalExpressionDenotingFun = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathematicalExpressionDenotingFunction"));
        $sym12$_ALL_MATH_EXPRESSION_DENOTING_FUNCTIONS_CACHING_STATE_ = SubLObjectFactory.makeSymbol("*ALL-MATH-EXPRESSION-DENOTING-FUNCTIONS-CACHING-STATE*");
        $sym13$CLEAR_ALL_MATH_EXPRESSION_DENOTING_FUNCTIONS = SubLObjectFactory.makeSymbol("CLEAR-ALL-MATH-EXPRESSION-DENOTING-FUNCTIONS");
        $const14$MathExpressionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn"));
        $const15$MathQuantFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn"));
        $const16$TimeExpressionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TimeExpressionFn"));
        $const17$PrefixMinusFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn"));
        $const18$MathVarFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn"));
        $list19 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BracketedMathFn")));
        $list20 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathGreaterThanStatementFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathGreaterThanOrEqualStatementFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanOrEqualStatementFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathLessThanStatementFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathNotEqualsStatementFn")));
        $sym21$MATH_EXPRESSION_ADDITION_OP_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-ADDITION-OP-P");
        $sym22$MATH_EXPRESSION_SUBTRACTION_OP_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-SUBTRACTION-OP-P");
        $sym23$MATH_EXPRESSION_MULTIPLICATION_OP_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-MULTIPLICATION-OP-P");
        $sym24$MATH_EXPRESSION_DIVISION_OP_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-DIVISION-OP-P");
        $sym25$MATH_EXPRESSION_EXPONENTIATION_OP_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-EXPONENTIATION-OP-P");
        $sym26$MATH_EXPRESSION_NTH_ROOT_OP_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-NTH-ROOT-OP-P");
        $sym27$MATH_EXPRESSION_ENCLOSURE_FN_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-ENCLOSURE-FN-P");
        $kw28$POS = SubLObjectFactory.makeKeyword("POS");
        $const29$subMathExpressions_Direct = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"));
        $kw30$REMOVAL_SUBMATHEXPRESSIONS_DIRECT = SubLObjectFactory.makeKeyword("REMOVAL-SUBMATHEXPRESSIONS-DIRECT");
        $list31 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-SUBMATHEXPRESSIONS-DIRECT-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$subMathExpressions-Direct <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(subMathExpressions-Direct (#$MathExpressionFn (#$MathQuantFn 3) \n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 5)\n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 7)) ?WHAT)") });
        $kw32$OPAQUE = SubLObjectFactory.makeKeyword("OPAQUE");
        $sym33$TEST_REMOVAL_SUBMATHEXPRESSIONS_DIRECT_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-SUBMATHEXPRESSIONS-DIRECT-EXPAND");
        $kw34$TEST = SubLObjectFactory.makeKeyword("TEST");
        $kw35$OWNER = SubLObjectFactory.makeKeyword("OWNER");
        $kw36$CLASSES = SubLObjectFactory.makeKeyword("CLASSES");
        $list37 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("MATH-EXPRESSION-TEST-CASE-TABLES"));
        $kw38$KB = SubLObjectFactory.makeKeyword("KB");
        $kw39$FULL = SubLObjectFactory.makeKeyword("FULL");
        $kw40$WORKING_ = SubLObjectFactory.makeKeyword("WORKING?");
        $list41 = _constant_41_initializer();
        $const42$subMathExpressions = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions"));
        $kw43$REMOVAL_SUBMATHEXPRESSIONS = SubLObjectFactory.makeKeyword("REMOVAL-SUBMATHEXPRESSIONS");
        $list44 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-SUBMATHEXPRESSIONS-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$subMathExpressions <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(subMathExpressions (#$MathExpressionFn (#$MathQuantFn 3) \n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 5)\n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 7)) ?WHAT)") });
        $sym45$MATH_EXPRESSION_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-P");
        $sym46$TEST_REMOVAL_SUBMATHEXPRESSIONS_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-SUBMATHEXPRESSIONS-EXPAND");
        $list47 = _constant_47_initializer();
        $const48$mathQuantValue = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathQuantValue"));
        $kw49$REMOVAL_MATHQUANTVALUE = SubLObjectFactory.makeKeyword("REMOVAL-MATHQUANTVALUE");
        $list50 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathQuantValue")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathQuantValue")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-MATHQUANTVALUE-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$mathQuantValue <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (mathQuantValue (MathQuantFn FOO) ?WHAT) --> ?WHAT = FOO\n (mathQuantValue (MathQuantFn FOO) FOO) --> True") });
        $list51 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BracketedMathFn"))), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"));
        $list52 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"));
        $const53$MinusFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MinusFn"));
        $sym54$TEST_REMOVAL_MATHQUANTVALUE_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-MATHQUANTVALUE-EXPAND");
        $list55 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathQuantValue")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathQuantValue")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathQuantValue")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathQuantValue")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeInteger(-5)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathQuantValue")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const56$additionArglist = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("additionArglist"));
        $kw57$REMOVAL_ADDITIONARGLIST = SubLObjectFactory.makeKeyword("REMOVAL-ADDITIONARGLIST");
        $list58 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("additionArglist")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("additionArglist")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("COMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-ADDITIONARGLIST-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$additionArglist <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (additionArglist (InfixPlusFn . ARGS) [fully-bound]) \n (additionArglist (InfixPlusFn . ARGS) ?WHAT) ---> ?WHAT = list of values of the symbols in ARGS \n For example, \n (additionArglist (InfixPlusFn (MathQuantFn 3) (MathQuantFn 5)) ?WHAT) ---> ?WHAT = (TheList 3 5)\n (additionArglist (InfixPlusFn (MathQuantFn 3) (MathVarFn \"X\")) ?WHAT) ---> ?WHAT = no binding\n\n (additionArglist (MathExpressionFn OP1 InfixPlusFn .... InfixPlusFn OPN) [fully-bound]) \n (additionArglist (MathExpressionFn OP1 InfixPlusFn .... InfixPlusFn OPN) ?WHAT) ---> ?WHAT = list of values of all of the OPs\n All operators must be InfixPlusFn.  For example, \n (additionArglist \n  (MathExpressionFn (MathQuantFn 3) \n    InfixPlusFn (MathQuantFn 5)\n    InfixPlusFn (MathQuantFn 7))\n  (TheList 3 5 7))\n (additionArglist \n  (MathExpressionFn (MathQuantFn 3) \n    InfixPlusFn (MathQuantFn 5)\n    InfixTimesFn (MathQuantFn 7)) ?WHAT) ----> ?WHAT = no binding") });
        $const59$InfixPlusFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn"));
        $sym60$MATH_EXPRESSION_QUANT_FN_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-QUANT-FN-P");
        $sym61$MATH_EXPRESSION_QUANT_VALUE = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-QUANT-VALUE");
        $sym62$TEST_REMOVAL_ADDITIONARGLIST_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-ADDITIONARGLIST-EXPAND");
        $list63 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("additionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("additionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("additionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("additionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("additionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL));
        $const64$genericAdditionArglist = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericAdditionArglist"));
        $kw65$REMOVAL_GENERICADDITIONARGLIST = SubLObjectFactory.makeKeyword("REMOVAL-GENERICADDITIONARGLIST");
        $list66 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericAdditionArglist")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericAdditionArglist")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("COMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-GENERICADDITIONARGLIST-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$genericAdditionArglist <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(genericAdditionArglist (ParenthesizedMathFn (InfixPlusFn . ARGS)) [fully-bound])") });
        $sym67$TEST_REMOVAL_GENERICADDITIONARGLIST_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-GENERICADDITIONARGLIST-EXPAND");
        $list68 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericAdditionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericAdditionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericAdditionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericAdditionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericAdditionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericAdditionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericAdditionArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL));
        $const69$multiplicationArglist = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("multiplicationArglist"));
        $kw70$REMOVAL_MULTIPLICATIONARGLIST = SubLObjectFactory.makeKeyword("REMOVAL-MULTIPLICATIONARGLIST");
        $list71 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("multiplicationArglist")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("multiplicationArglist")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("COMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-MULTIPLICATIONARGLIST-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$multiplicationArglist <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (multiplicationArglist (InfixTimesFn . ARGS) [fully-bound]) \n (multiplicationArglist (InfixTimesFn . ARGS) ?WHAT) ---> ?WHAT = list of values of the symbols in ARGS \n For example, \n (multiplicationArglist (InfixTimesFn (MathQuantFn 3) (MathQuantFn 5)) ?WHAT) ---> ?WHAT = (TheList 3 5)\n (multiplicationArglist (InfixTimesFn (MathQuantFn 3) (MathVarFn \"X\")) ?WHAT) ---> ?WHAT = no binding\n\n (multiplicationArglist (MathExpressionFn OP1 InfixTimesFn .... InfixTimesFn OPN) [fully-bound]) \n (multiplicationArglist (MathExpressionFn OP1 InfixTimesFn .... InfixTimesFn OPN) ?WHAT) ---> ?WHAT = list of values of all of the OPs\n All operators must be InfixTimesFn.  For example, \n (multiplicationArglist \n  (MathExpressionFn (MathQuantFn 3) \n    InfixTimesFn (MathQuantFn 5)\n    InfixTimesFn (MathQuantFn 7))\n  (TheList 3 5 7))\n (multiplicationArglist \n  (MathExpressionFn (MathQuantFn 3) \n    InfixTimesFn (MathQuantFn 5)\n    InfixTimesFn (MathQuantFn 7)) ?WHAT) ----> ?WHAT = no binding") });
        $const72$InfixTimesFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn"));
        $sym73$TEST_REMOVAL_MULTIPLICATIONARGLIST_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-MULTIPLICATIONARGLIST-EXPAND");
        $list74 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("multiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("multiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("multiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("multiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("multiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL));
        $const75$genericMultiplicationArglist = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericMultiplicationArglist"));
        $kw76$REMOVAL_GENERICMULTIPLICATIONARGLIST = SubLObjectFactory.makeKeyword("REMOVAL-GENERICMULTIPLICATIONARGLIST");
        $list77 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericMultiplicationArglist")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericMultiplicationArglist")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("COMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-GENERICMULTIPLICATIONARGLIST-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$genericMultiplicationArglist <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(genericMultiplicationArglist (ParenthesizedMathFn (InfixTimesFn . ARGS)) [fully-bound])") });
        $sym78$TEST_REMOVAL_GENERICMULTIPLICATIONARGLIST_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-GENERICMULTIPLICATIONARGLIST-EXPAND");
        $list79 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericMultiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericMultiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericMultiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericMultiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericMultiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericMultiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericMultiplicationArglist")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL));
        $const80$expressionNegated = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionNegated"));
        $kw81$REMOVAL_EXPRESSIONNEGATED = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONNEGATED");
        $list82 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionNegated")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionNegated")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONNEGATED-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionNegated <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionNegated (PrefixMinusFn FOO) ?WHAT) --> ?WHAT = FOO\n (expressionNegated (PrefixMinusFn FOO) FOO) --> True") });
        $sym83$TEST_REMOVAL_EXPRESSIONNEGATED_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONNEGATED-EXPAND");
        $list84 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionNegated")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionNegated")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const85$expressionMinuend = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionMinuend"));
        $kw86$REMOVAL_EXPRESSIONMINUEND = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONMINUEND");
        $list87 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionMinuend")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionMinuend")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("MATH-EXPRESSION-MINUEND")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONMINUEND-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionMinuend <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionMinuend (InfixMinusFn FOO [anything]) ?WHAT) --> ?WHAT = FOO\n (expressionMinuend (InfixMinusFn FOO [anything]) FOO) --> True\n (expressionMinuend (MathExpressionFn FOO InfixMinusFn [anything]) ?WHAT)  --> ?WHAT = FOO\n (expressionMinuend (MathExpressionFn FOO InfixMinusFn [anything]) FOO)  --> True") });
        $const88$InfixMinusFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn"));
        $sym89$TEST_REMOVAL_EXPRESSIONMINUEND_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONMINUEND-EXPAND");
        $list90 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const91$genericExpressionMinuend = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionMinuend"));
        $kw92$REMOVAL_GENERICEXPRESSIONMINUEND = SubLObjectFactory.makeKeyword("REMOVAL-GENERICEXPRESSIONMINUEND");
        $list93 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionMinuend")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionMinuend")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-GENERICEXPRESSIONMINUEND-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$genericExpressionMinuend <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(genericExpressionMinuend (ParenthesizedMathFn (InfixMinusFn FOO [anything])) ?WHAT)") });
        $sym94$TEST_REMOVAL_GENERICEXPRESSIONMINUEND_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-GENERICEXPRESSIONMINUEND-EXPAND");
        $list95 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionMinuend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const96$expressionSubtrahend = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionSubtrahend"));
        $kw97$REMOVAL_EXPRESSIONSUBTRAHEND = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONSUBTRAHEND");
        $list98 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionSubtrahend")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionSubtrahend")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("MATH-EXPRESSION-SUBTRAHEND")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONSUBTRAHEND-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionSubtrahend <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionSubtrahend (InfixMinusFn [anything] FOO) ?WHAT) --> ?WHAT = FOO\n (expressionSubtrahend (InfixMinusFn [anything] FOO) FOO) --> True\n (expressionSubtrahend (MathExpressionFn  [anything] InfixMinusFn FOO) ?WHAT)  --> ?WHAT = FOO\n (expressionSubtrahend (MathExpressionFn  [anything] InfixMinusFn FOO) FOO) --> True") });
        $sym99$TEST_REMOVAL_EXPRESSIONSUBTRAHEND_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONSUBTRAHEND-EXPAND");
        $list100 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)math_expression_utilities.SIX_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const101$genericExpressionSubtrahend = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionSubtrahend"));
        $kw102$REMOVAL_GENERICEXPRESSIONSUBTRAHEND = SubLObjectFactory.makeKeyword("REMOVAL-GENERICEXPRESSIONSUBTRAHEND");
        $list103 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionSubtrahend")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionSubtrahend")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-GENERICEXPRESSIONSUBTRAHEND-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$genericExpressionSubtrahend <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(genericExpressionSubtrahend (ParenthesizedMathFn (InfixMinusFn [anything] FOO)) ?WHAT)") });
        $sym104$TEST_REMOVAL_GENERICEXPRESSIONSUBTRAHEND_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-GENERICEXPRESSIONSUBTRAHEND-EXPAND");
        $list105 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionSubtrahend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)math_expression_utilities.SIX_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const106$expressionDivisor = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor"));
        $kw107$REMOVAL_EXPRESSIONDIVISOR = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONDIVISOR");
        $list108 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("MATH-EXPRESSION-DIVISOR")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONDIVISOR-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionDivisor <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionDivisor (InfixDivideFn [anything] FOO) ?WHAT) --> ?WHAT = FOO\n (expressionDivisor (InfixSlashDivideFn [anything] FOO) ?WHAT) --> ?WHAT = FOO\n (expressionDivisor (HorizontalDivideFn [anything] FOO) ?WHAT) --> ?WHAT = FOO\n (expressionDivisor (InfixDivideFn [anything] FOO) FOO) --> True\n (expressionDivisor (InfixSlashDivideFn [anything] FOO) FOO) --> True\n (expressionDivisor (HorizontalDivideFn [anything] FOO) FOO) --> True\n (expressionDivisor (MathExpressionFn  [anything] InfixDivideFn FOO) ?WHAT) --> ?WHAT = FOO\n (expressionDivisor (MathExpressionFn  [anything] InfixSlashDivideFn FOO) ?WHAT) --> ?WHAT = FOO\n (expressionDivisor (MathExpressionFn  [anything] InfixDivideFn FOO) FOO) --> True\n (expressionDivisor (MathExpressionFn  [anything] InfixSlashDivideFn FOO) FOO) --> True") });
        $sym109$TEST_REMOVAL_EXPRESSIONDIVISOR_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONDIVISOR-EXPAND");
        $list110 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)math_expression_utilities.SIX_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const111$genericExpressionDivisor = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor"));
        $kw112$REMOVAL_GENERICEXPRESSIONDIVISOR = SubLObjectFactory.makeKeyword("REMOVAL-GENERICEXPRESSIONDIVISOR");
        $list113 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-GENERICEXPRESSIONDIVISOR-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$genericExpressionDivisor <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(genericExpressionDivisor (ParenthesizedMathFn (InfixDivideFn [anything] FOO)) ?WHAT)") });
        $sym114$TEST_REMOVAL_GENERICEXPRESSIONDIVISOR_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-GENERICEXPRESSIONDIVISOR-EXPAND");
        $list115 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDivisor")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)math_expression_utilities.SIX_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T) });
        $const116$expressionDividend = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend"));
        $kw117$REMOVAL_EXPRESSIONDIVIDEND = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONDIVIDEND");
        $list118 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("MATH-EXPRESSION-DIVIDEND")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONDIVIDEND-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionDividend <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionDividend (InfixDivideFn FOO  [anything]) ?WHAT) --> ?WHAT = FOO\n (expressionDividend (InfixSlashDivideFn FOO [anything]) ?WHAT) --> ?WHAT = FOO\n (expressionDividend (HorizontalDivideFn FOO [anything]) ?WHAT) --> ?WHAT = FOO\n (expressionDividend (InfixDivideFn FOO) FOO [anything]) --> True\n (expressionDividend (InfixSlashDivideFn FOO [anything]) FOO) --> True\n (expressionDividend (HorizontalDivideFn FOO [anything]) FOO) --> True\n (expressionDividend (MathExpressionFn FOO InfixDivideFn [anything]) ?WHAT) --> ?WHAT = FOO\n (expressionDividend (MathExpressionFn FOO InfixSlashDivideFn [anything]) ?WHAT) --> ?WHAT = FOO\n (expressionDividend (MathExpressionFn FOO InfixDivideFn [anything]) FOO) --> True\n (expressionDividend (MathExpressionFn FOO InfixSlashDivideFn [anything]) FOO) --> True") });
        $sym119$TEST_REMOVAL_EXPRESSIONDIVIDEND_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONDIVIDEND-EXPAND");
        $list120 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const121$genericExpressionDividend = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend"));
        $kw122$REMOVAL_GENERICEXPRESSIONDIVIDEND = SubLObjectFactory.makeKeyword("REMOVAL-GENERICEXPRESSIONDIVIDEND");
        $list123 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-GENERICEXPRESSIONDIVIDEND-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$genericExpressionDividend <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(genericExpressionDividend (ParenthesizedMathFn (InfixDivideFn FOO  [anything])) ?WHAT)") });
        $sym124$TEST_REMOVAL_GENERICEXPRESSIONDIVIDEND_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-GENERICEXPRESSIONDIVIDEND-EXPAND");
        $list125 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genericExpressionDividend")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)math_expression_utilities.SIX_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T) });
        $const126$expressionExponent = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionExponent"));
        $kw127$REMOVAL_EXPRESSIONEXPONENT = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONEXPONENT");
        $list128 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionExponent")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionExponent")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONEXPONENT-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionExponent <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionExponent (PowerExpressionFn [anything] FOO) ?WHAT) --> ?WHAT = FOO\n (expressionExponent (PowerExpressionFn [anything] FOO) FOO) --> True") });
        $sym129$TEST_REMOVAL_EXPRESSIONEXPONENT_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONEXPONENT-EXPAND");
        $list130 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionExponent")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionExponent")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const131$expressionBase = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionBase"));
        $kw132$REMOVAL_EXPRESSIONBASE = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONBASE");
        $list133 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionBase")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionBase")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONBASE-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionBase <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(expressionBase (PowerExpressionFn FOO [anything]) ?WHAT) --> ?WHAT = FOO\n (expressionBase (PowerExpressionFn FOO [anything]) FOO) --> True") });
        $sym134$TEST_REMOVAL_EXPRESSIONBASE_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONBASE-EXPAND");
        $list135 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionBase")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionBase")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const136$expressionRadicand = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionRadicand"));
        $kw137$REMOVAL_EXPRESSIONRADICAND = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONRADICAND");
        $list138 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionRadicand")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionRadicand")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONRADICAND-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionRadicand <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionRadicand (NthRootExpressionFn INDEX RADICAND) ?WHAT) --> ?WHAT = RADICAND\n (expressionRadicand (NthRootExpressionFn INDEX RADICAND) RADICAND) --> True") });
        $sym139$TEST_REMOVAL_EXPRESSIONRADICAND_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONRADICAND-EXPAND");
        $list140 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionRadicand")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionRadicand")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const141$expressionIndex = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIndex"));
        $kw142$REMOVAL_EXPRESSIONINDEX = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONINDEX");
        $list143 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIndex")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIndex")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONINDEX-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionIndex <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionIndex (NthRootExpressionFn INDEX RADICAND) ?WHAT) --> ?WHAT = INDEX\n (expressionIndex (NthRootExpressionFn INDEX RADICAND) INDEX) --> True") });
        $sym144$TEST_REMOVAL_EXPRESSIONINDEX_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONINDEX-EXPAND");
        $list145 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIndex")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIndex")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const146$absoluteValueOfExpression = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("absoluteValueOfExpression"));
        $kw147$REMOVAL_ABSOLUTEVALUEOFEXPRESSION = SubLObjectFactory.makeKeyword("REMOVAL-ABSOLUTEVALUEOFEXPRESSION");
        $list148 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("absoluteValueOfExpression")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("absoluteValueOfExpression")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AbsoluteValueExpressionFn")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-ABSOLUTEVALUEOFEXPRESSION-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$absoluteValueOfExpression <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (absoluteValueOfExpression (AbsoluteValueExpressionFn OP) ?WHAT) --> ?WHAT = OP\n (absoluteValueOfExpression (AbsoluteValueExpressionFn OP) OP) --> True") });
        $const149$AbsoluteValueExpressionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AbsoluteValueExpressionFn"));
        $sym150$TEST_REMOVAL_ABSOLUTEVALUEOFEXPRESSION_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-ABSOLUTEVALUEOFEXPRESSION-EXPAND");
        $list151 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("absoluteValueOfExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AbsoluteValueExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("absoluteValueOfExpression")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AbsoluteValueExpressionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const152$expressionEnclosed = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionEnclosed"));
        $kw153$REMOVAL_EXPRESSIONENCLOSED = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONENCLOSED");
        $list154 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionEnclosed")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionEnclosed")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("MATH-EXPRESSION-ENCLOSED-EXPRESSION")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONENCLOSED-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionEnclosed <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionEnclosed (ParenthesizedMathFn OP) ?WHAT) --> ?WHAT = OP\n (expressionEnclosed (BracketedMathFn OP) ?WHAT) --> ?WHAT = OP\n (expressionEnclosed (ParenthesizedMathFn OP) OP) --> True\n (expressionEnclosed (BracketedMathFn OP) OP) --> True") });
        $sym155$TEST_REMOVAL_EXPRESSIONENCLOSED_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONENCLOSED-EXPAND");
        $list156 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionEnclosed")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionEnclosed")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionEnclosed")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BracketedMathFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionEnclosed")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BracketedMathFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const157$expressionAddends = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddends"));
        $kw158$REMOVAL_EXPRESSIONADDENDS = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONADDENDS");
        $list159 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddends")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddends")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("MATH-EXPRESSION-ADDENDS")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONADDENDS-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionAddends <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(expressionAddends (InfixPlusFn A ... N) ?what) --> (((?what . A)) ... ((?what . N)))\n (expressionAddends (InfixPlusFn A ... N) A) --> True") });
        $sym160$TEST_REMOVAL_EXPRESSIONADDENDS_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONADDENDS-EXPAND");
        $list161 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddends")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddends")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddends")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddends")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddends")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL));
        $const162$expressionFactors = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors"));
        $kw163$REMOVAL_EXPRESSIONFACTORS = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONFACTORS");
        $list164 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("ANY-PREDICATES"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct"))), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("OR"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("AND"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("subMathExpressions-Direct")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEST"), (SubLObject)SubLObjectFactory.makeSymbol("MATH-EXPRESSION-FACTORS")), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")))), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONFACTORS-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionFactors <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionFactors (InfixTimesFn A ... N) ?what) --> (((?what . A)) ... ((?what . N)))\n (expressionFactors (InfixTimesFn A ... N) A) --> True") });
        $sym165$TEST_REMOVAL_EXPRESSIONFACTORS_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONFACTORS-EXPAND");
        $list166 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.MINUS_ONE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?X"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.MINUS_ONE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.MINUS_ONE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactors")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.MINUS_ONE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)math_expression_utilities.T) });
        $const167$expressionAddendList = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddendList"));
        $kw168$REMOVAL_EXPRESSIONADDENDLIST = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONADDENDLIST");
        $list169 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddendList")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddendList")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("COMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONADDENDLIST-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionAddendList <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionAddendList (InfixPlusFn A ... N) ?what) --> (((?what . (TheList A ... N))))\n (expressionAddendList (InfixPlusFn A ... N) (TheList A ... N)) --> True") });
        $sym170$TEST_REMOVAL_EXPRESSIONADDENDLIST_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONADDENDLIST-EXPAND");
        $list171 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddendList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddendList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddendList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddendList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionAddendList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL));
        $const172$expressionFactorList = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactorList"));
        $kw173$REMOVAL_EXPRESSIONFACTORLIST = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONFACTORLIST");
        $list174 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactorList")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactorList")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("COMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONFACTORLIST-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionFactorList <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" (expressionFactorList (InfixTimesFn . ARGS) [fully-bound]) \n (expressionFactorList (InfixTimesFn . ARGS) ?WHAT) ---> ?WHAT = list of values of the symbols in ARGS \n For example, \n (expressionFactorList (InfixTimesFn (MathQuantFn 3) (MathQuantFn 5)) ?WHAT) ---> ?WHAT = (TheList 3 5)\n (expressionFactorList (InfixTimesFn (MathQuantFn 3) (MathVarFn \"X\")) ?WHAT) ---> ?WHAT = no binding\n\n (expressionFactorList (MathExpressionFn OP1 InfixTimesFn .... InfixTimesFn OPN) [fully-bound]) \n (expressionFactorList (MathExpressionFn OP1 InfixTimesFn .... InfixTimesFn OPN) ?WHAT) ---> ?WHAT = list of values of all of the OPs\n All operators must be InfixTimesFn.  For example, \n (expressionFactorList \n  (MathExpressionFn (MathQuantFn 3) \n    InfixTimesFn (MathQuantFn 5)\n    InfixTimesFn (MathQuantFn 7))\n  (TheList 3 5 7))\n (expressionFactorList \n  (MathExpressionFn (MathQuantFn 3) \n    InfixTimesFn (MathQuantFn 5)\n    InfixTimesFn (MathQuantFn 7)) ?WHAT) ----> ?WHAT = no binding") });
        $sym175$MATH_EXPRESSION_UNENCLOSE = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-UNENCLOSE");
        $sym176$TEST_REMOVAL_EXPRESSIONFACTORLIST_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONFACTORLIST-EXPAND");
        $list177 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.MINUS_ONE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)SubLObjectFactory.makeSymbol("?X"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionFactorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.MINUS_ONE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.MINUS_ONE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)))), (SubLObject)math_expression_utilities.T));
        $const178$expressionIsEvaluatable = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable"));
        $kw179$REMOVAL_EXPRESSIONISEVALUATABLE = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONISEVALUATABLE");
        $list180 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("COMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONISEVALUATABLE-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionIsEvaluatable <fully-bound-p>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString(" These are all not evaluatable:\n ;; contains a variable: \n (MathExpressionFn (MathVarFn \"x\") InfixPlusFn (MathQuantFn 2)) \n (InfixPlusFn (MathVarFn \"x\") (MathQuantFn 2))\n ;; incommensurate units: \n (MathExpressionFn (MathQuantFn (Inch 2)) InfixPlusFn (MathQuantFn (Mile 2)))\n (InfixPlusFn (MathQuantFn (Inch 2)) (MathQuantFn (Mile 2)))\n ;; operand is an expression with an operator and operands of its own:\n (MathExpressionFn (MathQuantFn (Inch 2)) InfixPlusFn (ParenthesizedMathFn (InfixTimesFn (MathQuantFn 2) (MathQuantFn (Inch 2)))))\n (InfixPlusFn (MathQuantFn (Inch 2)) (ParenthesizedMathFn (InfixTimesFn (MathQuantFn 2) (MathQuantFn (Inch 2)))))\n\n These are evaluatable: \n (MathExpressionFn (MathQuantFn 5.5) InfixPlusFn (MathQuantFn 2)) \n (InfixPlusFn (MathQuantFn 5.5) (MathQuantFn 2))") });
        $kw181$EXPRESSION_IS_A_MATH_QUANTITY = SubLObjectFactory.makeKeyword("EXPRESSION-IS-A-MATH-QUANTITY");
        $kw182$EXPRESSION_IS_A_NEGATED_UNEVALUATABLE_EXPRESSION = SubLObjectFactory.makeKeyword("EXPRESSION-IS-A-NEGATED-UNEVALUATABLE-EXPRESSION");
        $sym183$MATH_EXPRESSION_VAR_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-VAR-P");
        $kw184$SOME_OPERAND_IS_A_VARIABLE = SubLObjectFactory.makeKeyword("SOME-OPERAND-IS-A-VARIABLE");
        $sym185$MATH_EXPRESSION_WITH_SOME_OPERATOR_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-WITH-SOME-OPERATOR-P");
        $sym186$MATH_EXPRESSION_QUANT_FN_OR_MINUS_QUANT_FN_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-QUANT-FN-OR-MINUS-QUANT-FN-P");
        $kw187$SOME_OPERAND_IS_A_MATH_EXPRESSION = SubLObjectFactory.makeKeyword("SOME-OPERAND-IS-A-MATH-EXPRESSION");
        $const188$Unity = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Unity"));
        $str189$_units_do_not_match__ = SubLObjectFactory.makeString(" units do not match: ");
        $str190$_ = SubLObjectFactory.makeString(" ");
        $str191$Minuend_ = SubLObjectFactory.makeString("Minuend ");
        $str192$_is_not_a_NUMBERP_ = SubLObjectFactory.makeString(" is not a NUMBERP.");
        $str193$Subtrahend_ = SubLObjectFactory.makeString("Subtrahend ");
        $const194$InfixSlashDivideFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn"));
        $const195$InfixDivideFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn"));
        $const196$HorizontalDivideFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn"));
        $const197$SimpleFractionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn"));
        $const198$MixedFractionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn"));
        $sym199$STRINGP = SubLObjectFactory.makeSymbol("STRINGP");
        $str200$__ = SubLObjectFactory.makeString(", ");
        $str201$_has_mismatched_units__ = SubLObjectFactory.makeString(" has mismatched units: ");
        $sym202$EXTENDED_NUMBER_P = SubLObjectFactory.makeSymbol("EXTENDED-NUMBER-P");
        $kw203$UNEVALUATABLE = SubLObjectFactory.makeKeyword("UNEVALUATABLE");
        $const204$ImplicitTimesFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn"));
        $const205$InfixDottedTimesFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn"));
        $sym206$NUMBERP = SubLObjectFactory.makeSymbol("NUMBERP");
        $sym207$_ = SubLObjectFactory.makeSymbol("*");
        $const208$UnitProductFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("UnitProductFn"));
        $const209$ParenthesizedMathFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn"));
        $const210$BracketedMathFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BracketedMathFn"));
        $str211$_exponent_has_units = SubLObjectFactory.makeString(" exponent has units");
        $str212$_base_has_units_but_exponent_not_ = SubLObjectFactory.makeString(" base has units but exponent not an integer");
        $str213$_radicand_has_units = SubLObjectFactory.makeString(" radicand has units");
        $str214$_radicand_is_zero = SubLObjectFactory.makeString(" radicand is zero");
        $str215$_index_has_units_but_nth_root_of_ = SubLObjectFactory.makeString(" index has units but nth root of units not yet supported");
        $str216$_index_has_units_but_radicand_not = SubLObjectFactory.makeString(" index has units but radicand not an integer");
        $str217$_could_not_find_any_operators_in_ = SubLObjectFactory.makeString(" could not find any operators in #$MathExpressionFn");
        $str218$_invalid_due_to_operation_as_firs = SubLObjectFactory.makeString(" invalid due to operation as first or last item");
        $str219$_S_was_not_solvable_by_sub_evalua = SubLObjectFactory.makeString("~S was not solvable by sub-evaluation");
        $str220$_was_not_a_math_expression = SubLObjectFactory.makeString(" was not a math expression");
        $str221$Unknown_reason = SubLObjectFactory.makeString("Unknown reason");
        $sym222$MATH_EXPRESSION_EVALUATE = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-EVALUATE");
        $sym223$TERM_UNIFY = SubLObjectFactory.makeSymbol("TERM-UNIFY");
        $list224 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220))))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220)))))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.SEVEN_INTEGER))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(227)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(220))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(227)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(220)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(30)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(60))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(30)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PrefixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(60)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(30))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(60)))), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeDouble(3.5)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)) });
        $sym225$TEST_REMOVAL_EXPRESSIONISEVALUATABLE_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONISEVALUATABLE-EXPAND");
        $list226 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.TWO_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Mile")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Mile")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("INFIXPLUSFN"), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.TWO_INTEGER)))))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.TWO_INTEGER)))))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeDouble(5.5)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeDouble(5.5)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("y")))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionIsEvaluatable")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL) });
        $const227$mathExpressionOperatorList = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorList"));
        $kw228$REMOVAL_MATHEXPRESSIONOPERATORLIST = SubLObjectFactory.makeKeyword("REMOVAL-MATHEXPRESSIONOPERATORLIST");
        $list229 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorList")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorList")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-MATHEXPRESSIONOPERATORLIST-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$mathExpressionOperatorList <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(mathExpressionOperatorList (#$MathExpressionFn (#$MathQuantFn 3) \n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 5)\n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 7)) ?WHAT)") });
        $const230$TheEmptyList = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheEmptyList"));
        $sym231$TEST_REMOVAL_MATHEXPRESSIONOPERATORLIST_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-MATHEXPRESSIONOPERATORLIST-EXPAND");
        $list232 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorList")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheEmptyList"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const233$mathExpressionOperatorCount = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorCount"));
        $kw234$REMOVAL_MATHEXPRESSIONOPERATORCOUNT = SubLObjectFactory.makeKeyword("REMOVAL-MATHEXPRESSIONOPERATORCOUNT");
        $list235 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorCount")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorCount")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-MATHEXPRESSIONOPERATORCOUNT-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$mathExpressionOperatorCount <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(mathExpressionOperatorCount (#$MathExpressionFn (#$MathQuantFn 3) \n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 5)\n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 7)) ?WHAT)") });
        $sym236$TEST_REMOVAL_MATHEXPRESSIONOPERATORCOUNT_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-MATHEXPRESSIONOPERATORCOUNT-EXPAND");
        $list237 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)math_expression_utilities.ZERO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)SubLObjectFactory.makeInteger(47)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperatorCount")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $sym238$MATH_EXPRESSION_INFIX_OP_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-INFIX-OP-P");
        $sym239$MATH_EXPRESSION_ELEMS_AND_OPS_FOR_ADDITIONS_AND_SUBTRACTIONS = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-ELEMS-AND-OPS-FOR-ADDITIONS-AND-SUBTRACTIONS");
        $list240 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER) })), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixSlashDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))));
        $const241$mathExpressionOperator = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator"));
        $kw242$REMOVAL_MATHEXPRESSIONOPERATOR = SubLObjectFactory.makeKeyword("REMOVAL-MATHEXPRESSIONOPERATOR");
        $list243 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-MATHEXPRESSIONOPERATOR-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$mathExpressionOperator <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(mathExpressionOperator (#$MathExpressionFn (#$MathQuantFn 3) \n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 5)\n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 7)) ?WHAT)") });
        $sym244$TEST_REMOVAL_MATHEXPRESSIONOPERATOR_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-MATHEXPRESSIONOPERATOR-EXPAND");
        $list245 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.NIL), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AbsoluteValueExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AbsoluteValueExpressionFn"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperator")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("z")))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn"))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB"))), (SubLObject)math_expression_utilities.T));
        $const246$leftSideOfMathematicalStatement = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("leftSideOfMathematicalStatement"));
        $kw247$REMOVAL_LEFTSIDEOFMATHEMATICALSTATEMENT = SubLObjectFactory.makeKeyword("REMOVAL-LEFTSIDEOFMATHEMATICALSTATEMENT");
        $list248 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("leftSideOfMathematicalStatement")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("leftSideOfMathematicalStatement")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-LEFTSIDEOFMATHEMATICALSTATEMENT-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$leftSideOfMathematicalStatement <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(leftSideOfMathematicalStatement (#$MathEqualsStatementFn (#$MathVarFn \"x\") (#$MathQuantFn 2)) (#$MathVarFn \"x\")") });
        $sym249$TEST_REMOVAL_LEFTSIDEOFMATHEMATICALSTATEMENT_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-LEFTSIDEOFMATHEMATICALSTATEMENT-EXPAND");
        $list250 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("leftSideOfMathematicalStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("leftSideOfMathematicalStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T));
        $const251$rightSideOfMathematicalStatement = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("rightSideOfMathematicalStatement"));
        $kw252$REMOVAL_RIGHTSIDEOFMATHEMATICALSTATEMENT = SubLObjectFactory.makeKeyword("REMOVAL-RIGHTSIDEOFMATHEMATICALSTATEMENT");
        $list253 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("rightSideOfMathematicalStatement")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("rightSideOfMathematicalStatement")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-RIGHTSIDEOFMATHEMATICALSTATEMENT-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$rightSideOfMathematicalStatement <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(rightSideOfMathematicalStatement (#$MathEqualsStatementFn (#$MathVarFn \"x\") (#$MathQuantFn 2)) (#$MathVarFn \"x\")") });
        $sym254$TEST_REMOVAL_RIGHTSIDEOFMATHEMATICALSTATEMENT_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-RIGHTSIDEOFMATHEMATICALSTATEMENT-EXPAND");
        $list255 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("rightSideOfMathematicalStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("rightSideOfMathematicalStatement")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)), (SubLObject)SubLObjectFactory.makeSymbol("?WHAT"))), (SubLObject)math_expression_utilities.T));
        $const256$likeMathTerms = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms"));
        $kw257$REMOVAL_LIKEMATHTERMS = SubLObjectFactory.makeKeyword("REMOVAL-LIKEMATHTERMS");
        $list258 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTerms")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-LIKEMATHTERMS-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$likeMathTerms <fully-bound-p> <fully-bound-p>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(likeMathTerms (MathVarFn \"x\") (ImplicitTimes (MathQuantFn 98) (MathVarFn \"x\"))") });
        $sym259$EXPLODE_INTERVAL_IGNORING_UNEVALUATABLE = SubLObjectFactory.makeSymbol("EXPLODE-INTERVAL-IGNORING-UNEVALUATABLE");
        $sym260$TEST_REMOVAL_LIKEMATHTERMS_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-LIKEMATHTERMS-EXPAND");
        $list261 = _constant_261_initializer();
        $const262$unlikeMathTerms = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unlikeMathTerms"));
        $kw263$REMOVAL_UNLIKEMATHTERMS = SubLObjectFactory.makeKeyword("REMOVAL-UNLIKEMATHTERMS");
        $list264 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unlikeMathTerms")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unlikeMathTerms")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-UNLIKEMATHTERMS-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$unlikeMathTerms <fully-bound-p> <fully-bound-p>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(unlikeMathTerms (MathVarFn \"x\") (ImplicitTimes (MathQuantFn 98) (MathVarFn \"x\"))") });
        $const265$simplifiableMathExpression = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression"));
        $kw266$REMOVAL_SIMPLIFIABLEMATHEXPRESSION = SubLObjectFactory.makeKeyword("REMOVAL-SIMPLIFIABLEMATHEXPRESSION");
        $list267 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableMathExpression")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-SIMPLIFIABLEMATHEXPRESSION-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$simplifiableMathExpression <fully-bound-p>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(simplifiableMathExpression (#$MathQuantFn 4)") });
        $const268$unsimplifiableMathExpression = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression"));
        $kw269$REMOVAL_UNSIMPLIFIABLEMATHEXPRESSION = SubLObjectFactory.makeKeyword("REMOVAL-UNSIMPLIFIABLEMATHEXPRESSION");
        $list270 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("unsimplifiableMathExpression")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-UNSIMPLIFIABLEMATHEXPRESSION-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$unsimplifiableMathExpression <fully-bound-p>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(unsimplifiableMathExpression (#$MathQuantFn 4)") });
        $kw271$EXPRESSION_IS_A_NEGATED_UNSIMPLIFIABLE_EXPRESSION = SubLObjectFactory.makeKeyword("EXPRESSION-IS-A-NEGATED-UNSIMPLIFIABLE-EXPRESSION");
        $sym272$UNSIMPLIFIABLE_MATH_EXPRESSION_ = SubLObjectFactory.makeSymbol("UNSIMPLIFIABLE-MATH-EXPRESSION?");
        $kw273$ALL_SUB_EXPRESSIONS_ARE_UNSIMPLIFIABLE = SubLObjectFactory.makeKeyword("ALL-SUB-EXPRESSIONS-ARE-UNSIMPLIFIABLE");
        $kw274$EXPRESSION_HAS_NO_DIRECT_SUB_MATH_EXPRESSION = SubLObjectFactory.makeKeyword("EXPRESSION-HAS-NO-DIRECT-SUB-MATH-EXPRESSION");
        $sym275$TEST_REMOVAL_UNSIMPLIFIABLEMATHEXPRESSION_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-UNSIMPLIFIABLEMATHEXPRESSION-EXPAND");
        $list276 = _constant_276_initializer();
        $sym277$TEST_REMOVAL_SIMPLIFIABLEMATHEXPRESSION_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-SIMPLIFIABLEMATHEXPRESSION-EXPAND");
        $list278 = _constant_278_initializer();
        $const279$MathEqualsStatementFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn"));
        $list280 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("POSITIONS"), (SubLObject)SubLObjectFactory.makeSymbol("ROOT-NODES"));
        $sym281$MATH_EQUATION_UNIVARIATE_LINEAR_ = SubLObjectFactory.makeSymbol("MATH-EQUATION-UNIVARIATE-LINEAR?");
        $list282 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("PowerExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))))), (SubLObject)math_expression_utilities.NIL), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))))), (SubLObject)math_expression_utilities.NIL), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))))), (SubLObject)math_expression_utilities.NIL), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("HorizontalDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDottedTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)math_expression_utilities.TWENTY_INTEGER)))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))))), (SubLObject)math_expression_utilities.NIL));
        $const283$comparableMathTerms = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms"));
        $kw284$REMOVAL_COMPARABLEMATHTERMS = SubLObjectFactory.makeKeyword("REMOVAL-COMPARABLEMATHTERMS");
        $list285 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("comparableMathTerms")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-COMPARABLEMATHTERMS-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$comparableMathTerms <fully-bound-p> <fully-bound-p>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(comparableMathTerms (MathVarFn \"x\") (ImplicitTimes (MathQuantFn 98) (MathVarFn \"x\"))") });
        $sym286$TEST_REMOVAL_COMPARABLEMATHTERMS_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-COMPARABLEMATHTERMS-EXPAND");
        $list287 = _constant_287_initializer();
        $const288$likeMathTermsOnOppositeSides = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides"));
        $kw289$REMOVAL_LIKEMATHTERMSONOPPOSITESIDES = SubLObjectFactory.makeKeyword("REMOVAL-LIKEMATHTERMSONOPPOSITESIDES");
        $list290 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("likeMathTermsOnOppositeSides")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-LIKEMATHTERMSONOPPOSITESIDES-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$likeMathTermsOnOppositeSides <fully-bound-p>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(#$likeMathTermsOnOppositeSides\n (#$MathEqualsStatementFn\n  (#$MathExpressionFn (#$MathQuantFn 5) #$InfixPlusFn (#$MathVarFn \"y\"))\n  (#$MathVarFn \"y\")))") });
        $sym291$TEST_REMOVAL_LIKEMATHTERMSONOPPOSITESIDES_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-LIKEMATHTERMSONOPPOSITESIDES-EXPAND");
        $list292 = _constant_292_initializer();
        $const293$SingleOperationTypeMathTransforma = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SingleOperationTypeMathTransformationType"));
        $const294$AddTermToBothSidesOfMathStatement = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("AddTermToBothSidesOfMathStatement"));
        $const295$SubtractTermFromBothSidesOfMathSt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement"));
        $const296$DivideBothSidesOfMathStatementByT = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DivideBothSidesOfMathStatementByTerm"));
        $const297$MultiplyBothSidesOfMathStatementB = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MultiplyBothSidesOfMathStatementByTerm"));
        $list298 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FN"), (SubLObject)SubLObjectFactory.makeSymbol("EXPRESSION"), (SubLObject)SubLObjectFactory.makeSymbol("OPERATION"), (SubLObject)SubLObjectFactory.makeSymbol("TERM"));
        $sym299$TEST_APPLY_OPERATION_TO_MATH_STATEMENT = SubLObjectFactory.makeSymbol("TEST-APPLY-OPERATION-TO-MATH-STATEMENT");
        $list300 = _constant_300_initializer();
        $const301$bestTermToRemoveVia = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia"));
        $kw302$REMOVAL_BESTTERMTOREMOVEVIA = SubLObjectFactory.makeKeyword("REMOVAL-BESTTERMTOREMOVEVIA");
        $list303 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestTermToRemoveVia")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-BESTTERMTOREMOVEVIA-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$bestTermToRemoveVia <fully-bound-p> <anything> <anything> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(bestTermToRemoveVia\n  (MathEqualsStatementFn \n      (MathExpressionFn \n        (MathVarFn \"y\") InfixMinusFn (MathQuantFn 5))\n      (MathQuantFn 2))  ?REMOVE-TERM ?OPERATION ?OPERATION-TYPE)") });
        $sym304$TEST_REMOVAL_BESTTERMTOREMOVEVIA_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-BESTTERMTOREMOVEVIA-EXPAND");
        $list305 = _constant_305_initializer();
        $const306$possibleTermsToRemoveVia = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("possibleTermsToRemoveVia"));
        $kw307$REMOVAL_POSSIBLETERMSTOREMOVEVIA = SubLObjectFactory.makeKeyword("REMOVAL-POSSIBLETERMSTOREMOVEVIA");
        $list308 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("possibleTermsToRemoveVia")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("possibleTermsToRemoveVia")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-POSSIBLETERMSTOREMOVEVIA-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$possibleTermsToRemoveVia <fully-bound-p> <anything> <anything> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(possibleTermsToRemoveVia\n  (MathEqualsStatementFn \n      (MathExpressionFn \n        (MathVarFn \"y\") InfixMinusFn (MathQuantFn 5))\n      (MathQuantFn 2))  ?REMOVE-TERM ?OPERATION ?OPERATION-TYPE)") });
        $list309 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("REMOVE-TERM"), (SubLObject)SubLObjectFactory.makeSymbol("OPERATION"));
        $sym310$TEST_REMOVAL_POSSIBLETERMSTOREMOVEVIA_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-POSSIBLETERMSTOREMOVEVIA-EXPAND");
        $sym311$HAS_MEMBER_EQUAL_ = SubLObjectFactory.makeSymbol("HAS-MEMBER-EQUAL?");
        $list312 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("possibleTermsToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227)))), (SubLObject)SubLObjectFactory.makeSymbol("?REMOVE-TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OPERATION"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementWithTheSameOperation")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?REMOVE-TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220))), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OPERATION"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement"))))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("possibleTermsToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227)))), (SubLObject)SubLObjectFactory.makeSymbol("?REMOVE-TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OPERATION"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementWithTheSameOperation")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?REMOVE-TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227))), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OPERATION"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement"))))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("possibleTermsToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227)))), (SubLObject)SubLObjectFactory.makeSymbol("?REMOVE-TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OPERATION"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementWithTheSameOperation")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?REMOVE-TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x"))), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OPERATION"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SubtractTermFromBothSidesOfMathStatement"))))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("possibleTermsToRemoveVia")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathEqualsStatementFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(220))), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ImplicitTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathVarFn")), (SubLObject)SubLObjectFactory.makeString("x")))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)SubLObjectFactory.makeInteger(227)))), (SubLObject)SubLObjectFactory.makeSymbol("?REMOVE-TERM"), (SubLObject)SubLObjectFactory.makeSymbol("?OPERATION"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ModifyingBothSidesOfAMathStatementWithTheSameOperation")))), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?REMOVE-TERM"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), (SubLObject)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("?OPERATION"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("DivideBothSidesOfMathStatementByTerm"))))));
        $const313$mathTermCoefficient = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient"));
        $kw314$REMOVAL_MATHTERMCOEFFICIENT = SubLObjectFactory.makeKeyword("REMOVAL-MATHTERMCOEFFICIENT");
        $list315 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermCoefficient")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-MATHTERMCOEFFICIENT-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$mathTermCoefficient <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(mathTermCoefficient (ImplicitTimesFn (MathQuantFn 3) (MathVarFn \"x\")) 3)") });
        $sym316$TEST_REMOVAL_MATHTERMCOEFFICIENT_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-MATHTERMCOEFFICIENT-EXPAND");
        $list317 = _constant_317_initializer();
        $const318$mathTermVariableWithDegree = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree"));
        $kw319$REMOVAL_MATHTERMVARIABLEWITHDEGREE = SubLObjectFactory.makeKeyword("REMOVAL-MATHTERMVARIABLEWITHDEGREE");
        $list320 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermVariableWithDegree")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-MATHTERMVARIABLEWITHDEGREE-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$mathTermVariableWithDegree <fully-bound-p> <anything> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(mathTermVariableWithDegree (ImplicitTimesFn (MathQuantFn 3) (MathVarFn \"x\")) (MathVarFn \"x\") 1)") });
        $list321 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("VAR"), (SubLObject)SubLObjectFactory.makeSymbol("DEGREE"));
        $sym322$TEST_REMOVAL_MATHTERMVARIABLEWITHDEGREE_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-MATHTERMVARIABLEWITHDEGREE-EXPAND");
        $list323 = _constant_323_initializer();
        $const324$mathTermDegree = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree"));
        $kw325$REMOVAL_MATHTERMDEGREE = SubLObjectFactory.makeKeyword("REMOVAL-MATHTERMDEGREE");
        $list326 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathTermDegree")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-MATHTERMDEGREE-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$mathTermDegree <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(mathTermDegree (ImplicitTimesFn (MathQuantFn 3) (MathVarFn \"x\")) 1)") });
        $sym327$MATH_EXPRESSION_ADDITION_OR_SUBTRACTION_OP_P = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-ADDITION-OR-SUBTRACTION-OP-P");
        $sym328$TEST_REMOVAL_MATHTERMDEGREE_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-MATHTERMDEGREE-EXPAND");
        $list329 = _constant_329_initializer();
        $const330$commonPrimeFactorList = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList"));
        $kw331$REMOVAL_COMMONPRIMEFACTORLIST = SubLObjectFactory.makeKeyword("REMOVAL-COMMONPRIMEFACTORLIST");
        $list332 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-COMMONPRIMEFACTORLIST-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$commonPrimeFactorList <fully-bound-p> <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(commonPrimeFactorList 20 30 (TheList 2 5))") });
        $kw333$IGNORE_ERRORS_TARGET = SubLObjectFactory.makeKeyword("IGNORE-ERRORS-TARGET");
        $sym334$IGNORE_ERRORS_HANDLER = SubLObjectFactory.makeSymbol("IGNORE-ERRORS-HANDLER", "SUBLISP");
        $sym335$TEST_REMOVAL_COMMONPRIMEFACTORLIST_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-COMMONPRIMEFACTORLIST-EXPAND");
        $list336 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)math_expression_utilities.TWENTY_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(30), (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)math_expression_utilities.TWENTY_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(30), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)math_expression_utilities.SEVEN_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)math_expression_utilities.SEVEN_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER, constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheEmptyList")))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)SubLObjectFactory.makeInteger(40), (SubLObject)SubLObjectFactory.makeInteger(60), (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)SubLObjectFactory.makeInteger(40), (SubLObject)SubLObjectFactory.makeInteger(60), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)SubLObjectFactory.makeInteger(-40), (SubLObject)SubLObjectFactory.makeInteger(60), (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)SubLObjectFactory.makeInteger(-40), (SubLObject)SubLObjectFactory.makeInteger(60), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)SubLObjectFactory.makeInteger(-40), (SubLObject)SubLObjectFactory.makeInteger(-60), (SubLObject)SubLObjectFactory.makeSymbol("?LIST"))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("commonPrimeFactorList")), (SubLObject)SubLObjectFactory.makeInteger(-40), (SubLObject)SubLObjectFactory.makeInteger(-60), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("TheList")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER))), (SubLObject)math_expression_utilities.T) });
        $const337$simplifiableFraction = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction"));
        $kw338$REMOVAL_SIMPLIFIABLEFRACTION = SubLObjectFactory.makeKeyword("REMOVAL-SIMPLIFIABLEFRACTION");
        $list339 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-SIMPLIFIABLEFRACTION-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$simplifiableFraction <fully-bound-p>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(simplifiableFraction (#$SimpleFractionFn 17 11))") });
        $sym340$TEST_REMOVAL_SIMPLIFIABLEFRACTION_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-SIMPLIFIABLEFRACTION-EXPAND");
        $list341 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER, (SubLObject)math_expression_utilities.SEVENTEEN_INTEGER))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ELEVEN_INTEGER, (SubLObject)math_expression_utilities.SEVENTEEN_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.SEVENTEEN_INTEGER, (SubLObject)math_expression_utilities.ELEVEN_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THIRTEEN_INTEGER, (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.SIX_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Volt")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIFTEEN_INTEGER, (SubLObject)SubLObjectFactory.makeInteger(24))))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.EIGHT_INTEGER, (SubLObject)math_expression_utilities.TWELVE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Inch")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.NINE_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.NIL), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MixedFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.THREE_INTEGER)))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ZERO_INTEGER, (SubLObject)math_expression_utilities.TWO_INTEGER))), (SubLObject)math_expression_utilities.T), ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("simplifiableFraction")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.MINUS_ONE_INTEGER, (SubLObject)math_expression_utilities.ZERO_INTEGER))), (SubLObject)math_expression_utilities.NIL) });
        $const342$mathExpressionOperandList = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList"));
        $kw343$REMOVAL_MATHEXPRESSIONOPERANDLIST = SubLObjectFactory.makeKeyword("REMOVAL-MATHEXPRESSIONOPERANDLIST");
        $list344 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionOperandList")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-MATHEXPRESSIONOPERANDLIST-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$mathExpressionOperandList <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(mathExpressionOperandList (#$MathExpressionFn (#$MathQuantFn 3) \n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 5)\n\t\t\t\t     #$InfixPlusFn (#$MathQuantFn 7)) ?WHAT)") });
        $sym345$TEST_REMOVAL_MATHEXPRESSIONOPERANDLIST_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-MATHEXPRESSIONOPERANDLIST-EXPAND");
        $list346 = _constant_346_initializer();
        $const347$associateLikeTerms = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms"));
        $kw348$REMOVAL_ASSOCIATELIKETERMS = SubLObjectFactory.makeKeyword("REMOVAL-ASSOCIATELIKETERMS");
        $list349 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("associateLikeTerms")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-ASSOCIATELIKETERMS-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$associateLikeTerms <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(#$associateLikeTerms (#$MathExpressionFn (#$MathQuantFn 5) #$InfixPlusFn\n\t\t\t   (#$MathQuantFn 12) #$InfixPlusFn\n\t\t\t   (#$MathQuantFn (#$SimpleFractionFn 3 7)) #$InfixPlusFn\n\t\t\t   (#$MathQuantFn (#$MixedFractionFn 3 5 7))) ?WHAT)") });
        $kw350$LIKE_TERMS = SubLObjectFactory.makeKeyword("LIKE-TERMS");
        $sym351$TEST_REMOVAL_ASSOCIATELIKETERMS_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-ASSOCIATELIKETERMS-EXPAND");
        $list352 = _constant_352_initializer();
        $const353$expressionReorderedToGroupLikeTer = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms"));
        $kw354$REMOVAL_EXPRESSIONREORDEREDTOGROUPLIKETERMS = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONREORDEREDTOGROUPLIKETERMS");
        $list355 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedToGroupLikeTerms")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONREORDEREDTOGROUPLIKETERMS-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionReorderedToGroupLikeTerms <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(#$expressionReorderedToGroupLikeTerms (#$MathExpressionFn (#$MathQuantFn 5) #$InfixPlusFn\n\t\t\t   (#$MathQuantFn 12) #$InfixPlusFn\n\t\t\t   (#$MathQuantFn (#$SimpleFractionFn 3 7)) #$InfixPlusFn\n\t\t\t   (#$MathQuantFn (#$MixedFractionFn 3 5 7))) ?WHAT)") });
        $const356$Fraction = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Fraction"));
        $kw357$COMPARE_MATH_QUANT_FNS = SubLObjectFactory.makeKeyword("COMPARE-MATH-QUANT-FNS");
        $sym358$TERM__ = SubLObjectFactory.makeSymbol("TERM-<");
        $sym359$MATH_TERM_TYPE_FRACTION_ = SubLObjectFactory.makeSymbol("MATH-TERM-TYPE-FRACTION?");
        $sym360$MATH_TERM_TYPE = SubLObjectFactory.makeSymbol("MATH-TERM-TYPE");
        $sym361$_EXIT = SubLObjectFactory.makeSymbol("%EXIT");
        $sym362$MATH_TERM___COMPARE_VALUES = SubLObjectFactory.makeSymbol("MATH-TERM-<-COMPARE-VALUES");
        $sym363$MATH_TERM__ = SubLObjectFactory.makeSymbol("MATH-TERM-<");
        $sym364$TEST_REMOVAL_EXPRESSIONREORDEREDTOGROUPLIKETERMS_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONREORDEREDTOGROUPLIKETERMS-EXPAND");
        $list365 = _constant_365_initializer();
        $const366$expressionHasNonAdjacentLikeTerms = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands"));
        $kw367$REMOVAL_EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS");
        $list368 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionHasNonAdjacentLikeTermsAsOperands")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionHasNonAdjacentLikeTermsAsOperands <fully-bound-p>>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(#$expressionHasNonAdjacentLikeTermsAsOperands   (#$MathExpressionFn (#$ImplicitTimesFn (#$MathQuantFn 7) (#$MathVarFn \"x\")) #$InfixPlusFn\n\t\t       (#$MathQuantFn (#$SimpleFractionFn 3 7)) #$InfixPlusFn\n\t\t       (#$ImplicitTimesFn (#$MathQuantFn 2) (#$MathVarFn \"x\")) #$InfixPlusFn\n\t\t       (#$MathVarFn \"x\")))") });
        $sym369$TEST_REMOVAL_EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONHASNONADJACENTLIKETERMSASOPERANDS-EXPAND");
        $list370 = _constant_370_initializer();
        $const371$expressionReorderedInAscendingOrd = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedInAscendingOrder"));
        $kw372$REMOVAL_EXPRESSIONREORDEREDINASCENDINGORDER = SubLObjectFactory.makeKeyword("REMOVAL-EXPRESSIONREORDEREDINASCENDINGORDER");
        $list373 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedInAscendingOrder")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedInAscendingOrder")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-EXPRESSIONREORDEREDINASCENDINGORDER-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$expressionReorderedInAscendingOrder <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(#$expressionReorderedInAscendingOrder\n  (MathExpressionFn\n   (MathQuantFn 4) InfixPlusFn\n   (MathQuantFn 2) InfixPlusFn\n   (MathQuantFn 5) InfixPlusFn\n   (MathQuantFn 1) InfixPlusFn\n   (MathQuantFn 3))\n  (MathExpressionFn\n   (MathQuantFn 1) InfixPlusFn\n   (MathQuantFn 2) InfixPlusFn\n   (MathQuantFn 3) InfixPlusFn\n   (MathQuantFn 4) InfixPlusFn\n   (MathQuantFn 5)))") });
        $sym374$STRONG_MATH_TERM__ = SubLObjectFactory.makeSymbol("STRONG-MATH-TERM-<");
        $sym375$TEST_REMOVAL_EXPRESSIONREORDEREDINASCENDINGORDER_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-EXPRESSIONREORDEREDINASCENDINGORDER-EXPAND");
        $list376 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedInAscendingOrder")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER) }), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER) }))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedInAscendingOrder")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER) }), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER) }))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedInAscendingOrder")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER) }), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.ONE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER) }))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("expressionReorderedInAscendingOrder")), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)) }), (SubLObject)ConsesLow.list(new SubLObject[] { constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.ONE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.TWO_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.THREE_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FOUR_INTEGER, (SubLObject)math_expression_utilities.FIVE_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("SimpleFractionFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER, (SubLObject)math_expression_utilities.SIX_INTEGER)) }))), (SubLObject)math_expression_utilities.T));
        $const377$bestSubExpressionToEvaluate = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate"));
        $kw378$REMOVAL_BESTSUBEXPRESSIONTOEVALUATE = SubLObjectFactory.makeKeyword("REMOVAL-BESTSUBEXPRESSIONTOEVALUATE");
        $list379 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-BESTSUBEXPRESSIONTOEVALUATE-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$bestSubExpressionToEvaluate <fully-bound-p> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(#$bestSubExpressionToEvaluate\n (#$MathExpressionFn\n  (#$MathQuantFn 3)\n  #$InfixPlusFn (#$MathQuantFn 5)\n  #$InfixMinusFn (#$MathQuantFn 7))\n (#$MathExpressionFn\n  (#$MathQuantFn 3)\n  #$InfixPlusFn (#$MathQuantFn 5)))") });
        $sym380$TEST_REMOVAL_BESTSUBEXPRESSIONTOEVALUATE_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-BESTSUBEXPRESSIONTOEVALUATE-EXPAND");
        $list381 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.THREE_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NthRootExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER)))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER)))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixDivideFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixMinusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER)))), (SubLObject)math_expression_utilities.T), (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("bestSubExpressionToEvaluate")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SIXTEEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.TWO_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixTimesFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER)))), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("ParenthesizedMathFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathExpressionFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.SEVEN_INTEGER), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InfixPlusFn")), (SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MathQuantFn")), (SubLObject)math_expression_utilities.FIVE_INTEGER))))), (SubLObject)math_expression_utilities.T));
        $sym382$INFIX_MATH_EXPRESSION_P = SubLObjectFactory.makeSymbol("INFIX-MATH-EXPRESSION-P");
        $sym383$MATH_EXPRESSION_TO_PREFIX_FORMAT = SubLObjectFactory.makeSymbol("MATH-EXPRESSION-TO-PREFIX-FORMAT");
        $list384 = _constant_384_initializer();
        $sym385$FRACTION_P = SubLObjectFactory.makeSymbol("FRACTION-P");
        $const386$NegativeMixedFractionFn = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("NegativeMixedFractionFn"));
        $sym387$FRACTION_ = SubLObjectFactory.makeSymbol("FRACTION?");
        $const388$mathExpressionNthOperand = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand"));
        $kw389$REMOVAL_MATHEXPRESSIONNTHOPERAND = SubLObjectFactory.makeKeyword("REMOVAL-MATHEXPRESSIONNTHOPERAND");
        $list390 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("mathExpressionNthOperand")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-MATHEXPRESSIONNTHOPERAND-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$mathExpressionNthOperand <fully-bound-p> <anything> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(mathExpressionNthOperand (MathExpressionFn (MathQuantFn 5) InfixPlusFn\n(MathQuantFn 7)) 1 (MathQuantFn 5))\n(mathExpressionNthOperand (ImplicitTimesFn (MathQuantFn 5) (MathQuantFn 7)) 2\n(MathQuantFn 7))") });
        $sym391$TEST_REMOVAL_MATHEXPRESSIONNTHOPERAND_EXPAND = SubLObjectFactory.makeSymbol("TEST-REMOVAL-MATHEXPRESSIONNTHOPERAND-EXPAND");
        $list392 = _constant_392_initializer();
        $const393$orderedListOfDirectSubExpressions = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount"));
        $kw394$REMOVAL_ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT = SubLObjectFactory.makeKeyword("REMOVAL-ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT");
        $list395 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("SENSE"), SubLObjectFactory.makeKeyword("POS"), SubLObjectFactory.makeKeyword("PREDICATE"), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), SubLObjectFactory.makeKeyword("REQUIRED-PATTERN"), ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("orderedListOfDirectSubExpressionsWithOperandCount")), (SubLObject)SubLObjectFactory.makeKeyword("FULLY-BOUND"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING"), (SubLObject)SubLObjectFactory.makeKeyword("ANYTHING")), SubLObjectFactory.makeKeyword("COST-EXPRESSION"), SubLObjectFactory.makeSymbol("*DEFAULT-MATH-MODULE-COST*"), SubLObjectFactory.makeKeyword("COMPLETENESS"), SubLObjectFactory.makeKeyword("INCOMPLETE"), SubLObjectFactory.makeKeyword("EXPAND"), SubLObjectFactory.makeSymbol("REMOVAL-ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT-EXPAND"), SubLObjectFactory.makeKeyword("DOCUMENTATION"), SubLObjectFactory.makeString("(#$orderedListOfDirectSubExpressionsWithOperandCount <fully-bound-p> <anything> <anything>)"), SubLObjectFactory.makeKeyword("EXAMPLE"), SubLObjectFactory.makeString("(orderedListOfDirectSubExpressionsWithOperandCount (MathExpressionFn (MathQuantFn 5) InfixPlusFn\n(MathQuantFn 7)) 1 (MathQuantFn 5))\n(orderedListOfDirectSubExpressionsWithOperandCount (ImplicitTimesFn (MathQuantFn 5) (MathQuantFn 7)) 2\n(MathQuantFn 7))") });
        $sym396$TEST_REMOVAL_ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT_EX = SubLObjectFactory.makeSymbol("TEST-REMOVAL-ORDEREDLISTOFDIRECTSUBEXPRESSIONSWITHOPERANDCOUNT-EXPAND");
        $list397 = _constant_397_initializer();
        $sym398$NULL = SubLObjectFactory.makeSymbol("NULL");
    }
}

/*

	Total time: 7594 ms
	
*/