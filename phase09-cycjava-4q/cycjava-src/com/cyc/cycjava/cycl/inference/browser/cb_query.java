package com.cyc.cycjava.cycl.inference.browser;

import com.cyc.cycjava.cycl.constant_handles;
import com.cyc.cycjava.cycl.cyc_navigator_internals;
import com.cyc.cycjava.cycl.access_macros;
import com.cyc.cycjava.cycl.meta_macros;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.random;
import com.cyc.cycjava.cycl.kb_hl_supports_high;
import com.cyc.cycjava.cycl.arguments;
import com.cyc.cycjava.cycl.inference.harness.inference_metrics;
import com.cyc.cycjava.cycl.file_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Filesys;
import com.cyc.cycjava.cycl.cb_system_tools;
import com.cyc.cycjava.cycl.inference.harness.inference_strategic_heuristics;
import com.cyc.cycjava.cycl.plot_generation;
import com.cyc.cycjava.cycl.web_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.cycjava.cycl.cycl_variables;
import com.cyc.cycjava.cycl.subl_macro_promotions;
import com.cyc.cycjava.cycl.html_arghash;
import com.cyc.cycjava.cycl.cb_blue_grapher;
import com.cyc.cycjava.cycl.blue_grapher_utilities;
import com.cyc.cycjava.cycl.numeric_date_utilities;
import com.cyc.cycjava.cycl.hl_supports;
import com.cyc.cycjava.cycl.kb_indexing;
import com.cyc.cycjava.cycl.genl_mts;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.cycjava.cycl.hash_table_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables;
import com.cyc.cycjava.cycl.arity;
import com.cyc.cycjava.cycl.kb_utilities;
import com.cyc.cycjava.cycl.cardinality_estimates;
import com.cyc.cycjava.cycl.forts;
import com.cyc.cycjava.cycl.bindings;
import com.cyc.cycjava.cycl.clauses;
import com.cyc.cycjava.cycl.inference.harness.inference_worker_transformation;
import com.cyc.cycjava.cycl.assertion_utilities;
import com.cyc.cycjava.cycl.inference.ask_utilities;
import com.cyc.cycjava.cycl.control_vars;
import com.cyc.cycjava.cycl.uncanonicalizer;
import com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils;
import com.cyc.cycjava.cycl.inference.kb_query;
import com.cyc.cycjava.cycl.el_utilities;
import com.cyc.cycjava.cycl.assertions_high;
import com.cyc.cycjava.cycl.assertion_handles;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory;
import com.cyc.cycjava.cycl.inference.harness.inference_utilities;
import com.cyc.cycjava.cycl.inference.harness.inference_parameters;
import com.cyc.cycjava.cycl.cb_tools;
import com.cyc.cycjava.cycl.fi;
import com.cyc.cycjava.cycl.cb_form_widgets;
import com.cyc.cycjava.cycl.hlmt;
import com.cyc.cycjava.cycl.isa;
import com.cyc.cycjava.cycl.cb_assertion_editor;
import com.cyc.cycjava.cycl.dhtml_macros;
import com.cyc.cycjava.cycl.html_complete;
import com.cyc.cycjava.cycl.cyc_file_dependencies;
import com.cyc.cycjava.cycl.integer_sequence_generator;
import com.cyc.cycjava.cycl.inference.harness.inference_analysis;
import com.cyc.cycjava.cycl.number_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.cycjava.cycl.cyc_testing.kb_content_test.cb_kct_test;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import java.util.ArrayList;
import com.cyc.cycjava.cycl.process_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Packages;
import com.cyc.cycjava.cycl.special_variable_state;
import com.cyc.cycjava.cycl.utilities_macros;
import com.cyc.cycjava.cycl.subl_promotions;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Semaphores;
import com.cyc.cycjava.cycl.inference.harness.inference_kernel;
import com.cyc.cycjava.cycl.cb_events;
import com.cyc.cycjava.cycl.inference.harness.inference_strategist;
import com.cyc.cycjava.cycl.czer_utilities;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_enumerated_types;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high;
import com.cyc.cycjava.cycl.dictionary;
import com.cyc.cycjava.cycl.system_parameters;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow;
import com.cyc.cycjava.cycl.cb_utilities;
import com.cyc.cycjava.cycl.cb_parameters;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters;
import com.cyc.cycjava.cycl.html_utilities;
import com.cyc.cycjava.cycl.html_macros;
import com.cyc.cycjava.cycl.html_script_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_problem_store;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.cycjava.cycl.string_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences;
import com.cyc.cycjava.cycl.format_nil;
import com.cyc.cycjava.cycl.inference.harness.inference_datastructures_inference;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLFloat;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public final class cb_query extends SubLTranslatedFile
{
    public static final SubLFile me;
    public static final String myName = "com.cyc.cycjava.cycl.inference.browser.cb_query";
    public static final String myFingerPrint = "701c234a31945b3c241ec25730e8dfc9d1c27a4c9cc30f96108597fe916ded7f";
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 888L)
    private static SubLSymbol $cb_inference_progress_frame_enabledP$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 9111L)
    private static SubLSymbol $cb_inference_help_filename$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 9746L)
    private static SubLSymbol $inference_parameter_table$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 14904L)
    private static SubLSymbol $inference_mode_custom_value_number$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 31929L)
    public static SubLSymbol $cb_inferences$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 35476L)
    private static SubLSymbol $cb_cyc_editor_enabledP$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48107L)
    public static SubLSymbol $default_new_inference_monad_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48312L)
    public static SubLSymbol $default_new_inference_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48724L)
    private static SubLSymbol $cb_query_default_mt_monad_choices$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 52855L)
    public static SubLSymbol $cb_default_query_parameters$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 55975L)
    private static SubLSymbol $cb_basic_inference_resource_constraints$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 58301L)
    private static SubLSymbol $cb_inference_mode_properties$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 60319L)
    private static SubLSymbol $cb_advanced_inference_dynamic_properties$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 61890L)
    private static SubLSymbol $cb_advanced_inference_static_properties$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 64460L)
    private static SubLSymbol $cb_advanced_strategy_dynamic_properties$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 64689L)
    private static SubLSymbol $cb_advanced_strategy_static_properties$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 64935L)
    private static SubLSymbol $cb_advanced_problem_store_dynamic_properties$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 65067L)
    private static SubLSymbol $cb_advanced_problem_store_static_properties$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 66544L)
    private static SubLSymbol $cb_all_inference_properties$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 66928L)
    private static SubLSymbol $cb_all_inference_parameters$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 75475L)
    private static SubLSymbol $html_js_on_click_preamble$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 75538L)
    private static SubLSymbol $html_js_on_click_postamble$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 75593L)
    private static SubLSymbol $cb_set_all_radio_buttons_body$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 75700L)
    private static SubLSymbol $cb_set_field_value_body$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 80349L)
    private static SubLSymbol $cb_focus_and_set_all_radio_buttons_script$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 109658L)
    private static SubLSymbol $cb_default_unspecified_query_mt$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 110903L)
    private static SubLSymbol $cb_literal_query_variables$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 110995L)
    private static SubLSymbol $cb_literal_query_time_cutoff$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 111111L)
    private static SubLSymbol $sort_literal_query_terms_by_generality_estimateP$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 118003L)
    private static SubLSymbol $cb_query_auto_refresh_rate$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 118269L)
    private static SubLSymbol $cb_open_inference_progress_frame_height$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 118336L)
    private static SubLSymbol $cb_closed_inference_progress_frame_height$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 120102L)
    private static SubLSymbol $cb_inference_answer_section_limit$;
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 182441L)
    private static SubLSymbol $cb_show_forward_inference_metrics_verbosity$;
    private static final SubLSymbol $sym0$INFERENCE_P;
    private static final SubLString $str1$_;
    private static final SubLList $list2;
    private static final SubLList $list3;
    private static final SubLString $str4$nd___;
    private static final SubLString $str5$__;
    private static final SubLString $str6$;
    private static final SubLList $list7;
    private static final SubLSymbol $kw8$MAIN;
    private static final SubLSymbol $sym9$FRAME_LINK_HOVEROVER;
    private static final SubLSymbol $kw10$DOC;
    private static final SubLSymbol $kw11$SELF;
    private static final SubLSymbol $kw12$INFERENCE_DOC;
    private static final SubLSymbol $sym13$CB_LINK_INFERENCE_DOC;
    private static final SubLString $str14$None;
    private static final SubLString $str15$_D_total;
    private static final SubLString $str16$__;
    private static final SubLString $str17$_D_new;
    private static final SubLString $str18$_D_new_justification_P;
    private static final SubLSymbol $kw19$TAUTOLOGY;
    private static final SubLSymbol $kw20$CONTRADICTION;
    private static final SubLSymbol $kw21$SUSPENDED_INITIAL_JUSTIFICATION;
    private static final SubLString $str22$_Explain_;
    private static final SubLSymbol $kw23$SUSPENDED;
    private static final SubLString $str24$More___;
    private static final SubLString $str25$help_inference_;
    private static final SubLString $str26$inference_overview;
    private static final SubLString $str27$_html_;
    private static final SubLSymbol $sym28$_INFERENCE_PARAMETER_TABLE_;
    private static final SubLSymbol $kw29$FANCY_NAME;
    private static final SubLSymbol $kw30$DESCRIPTION;
    private static final SubLSymbol $kw31$SETTINGS;
    private static final SubLSymbol $kw32$SCALING_FACTOR;
    private static final SubLSymbol $kw33$ROUND_ON_INPUT_;
    private static final SubLList $list34;
    private static final SubLList $list35;
    private static final SubLSymbol $kw36$ALLOW_OTHER_KEYS;
    private static final SubLSymbol $sym37$DECLARE_INFERENCE_PARAMETER_INTERNAL;
    private static final SubLSymbol $sym38$QUOTE;
    private static final SubLSymbol $sym39$DECLARE_INFERENCE_PARAMETER;
    private static final SubLList $list40;
    private static final SubLSymbol $sym41$KEYWORDP;
    private static final SubLList $list42;
    private static final SubLList $list43;
    private static final SubLSymbol $kw44$VALUE;
    private static final SubLSymbol $kw45$ENTRY;
    private static final SubLSymbol $kw46$MAX_NUMBER;
    private static final SubLString $str47$Number_cutoff;
    private static final SubLString $str48$This_controls_how_many_answers_we;
    private static final SubLList $list49;
    private static final SubLSymbol $kw50$MAX_TIME;
    private static final SubLString $str51$Time_cutoff;
    private static final SubLString $str52$This_controls_how_long_we_allow_a;
    private static final SubLList $list53;
    private static final SubLSymbol $kw54$MAX_STEP;
    private static final SubLString $str55$Step_cutoff;
    private static final SubLString $str56$This_controls_how_many_inference_;
    private static final SubLList $list57;
    private static final SubLSymbol $kw58$INFERENCE_MODE;
    private static final SubLString $str59$Inference_engine_mode;
    private static final SubLString $str60$This_controls_what_mode_the_infer;
    private static final SubLList $list61;
    private static final SubLSymbol $kw62$FORWARD_MAX_TIME;
    private static final SubLString $str63$Forward_time_cutoff;
    private static final SubLString $str64$This_controls_how_long_we_allow_f;
    private static final SubLSymbol $kw65$MAX_TRANSFORMATION_DEPTH;
    private static final SubLString $str66$Transformation_cutoff;
    private static final SubLString $str67$This_specifies_the_maximum_allowa;
    private static final SubLList $list68;
    private static final SubLSymbol $kw69$MIN_RULE_UTILITY;
    private static final SubLString $str70$Rule_utility_threshold;
    private static final SubLString $str71$This_specifies_the_minimum_allowa;
    private static final SubLList $list72;
    private static final SubLSymbol $kw73$MAX_PROOF_DEPTH;
    private static final SubLString $str74$Proof_complexity_cutoff;
    private static final SubLString $str75$This_specifies_the_maximum_allowa;
    private static final SubLList $list76;
    private static final SubLSymbol $kw77$PROBABLY_APPROXIMATELY_DONE;
    private static final SubLString $str78$Probably_Done_cutoff;
    private static final SubLString $str79$Probably_Approximately_Done__This;
    private static final SubLList $list80;
    private static final SubLFloat $float81$0_01;
    private static final SubLSymbol $kw82$BLOCK_;
    private static final SubLString $str83$Step_by_step;
    private static final SubLString $str84$This_controls_whether_the_inferen;
    private static final SubLList $list85;
    private static final SubLSymbol $kw86$CACHE_INFERENCE_RESULTS_;
    private static final SubLString $str87$Cache_backward_query_results;
    private static final SubLString $str88$This_controls_whether_or_not_the_;
    private static final SubLSymbol $kw89$ANSWER_LANGUAGE;
    private static final SubLString $str90$Answer_language;
    private static final SubLString $str91$This_controls_the_CycL_language_u;
    private static final SubLList $list92;
    private static final SubLSymbol $kw93$CONTINUABLE_;
    private static final SubLString $str94$Continuable;
    private static final SubLString $str95$This_controls_whether_the_inferen;
    private static final SubLList $list96;
    private static final SubLSymbol $kw97$METRICS;
    private static final SubLString $str98$Metrics;
    private static final SubLString $str99$This_controls_which_metrics_are_g;
    private static final SubLList $list100;
    private static final SubLSymbol $kw101$ALLOW_HL_PREDICATE_TRANSFORMATION_;
    private static final SubLString $str102$Allow_HL_predicate_transformation;
    private static final SubLString $str103$Whether_transformation_is_allowed;
    private static final SubLList $list104;
    private static final SubLSymbol $kw105$ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_;
    private static final SubLString $str106$Allow_unbound_predicate_rule_back;
    private static final SubLString $str107$Whether_it_is_permissible_to_use_;
    private static final SubLSymbol $kw108$ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_;
    private static final SubLString $str109$Allow_evaluatable_predicate_trans;
    private static final SubLString $str110$Whether_transformation_is_allowed;
    private static final SubLSymbol $kw111$ALLOW_INDETERMINATE_RESULTS_;
    private static final SubLString $str112$Allow_result_bindings_to_indeterm;
    private static final SubLString $str113$Whether_it_is_permissible_to_use_;
    private static final SubLSymbol $kw114$ALLOW_ABNORMALITY_CHECKING_;
    private static final SubLString $str115$Allow_abnormality_checking_;
    private static final SubLString $str116$Whether_to_check_for_exceptions_t;
    private static final SubLSymbol $kw117$TRANSITIVE_CLOSURE_MODE;
    private static final SubLString $str118$Transitive_closure_mode;
    private static final SubLString $str119$The_degree_to_which_modules__such;
    private static final SubLList $list120;
    private static final SubLSymbol $kw121$RESULT_UNIQUENESS;
    private static final SubLString $str122$Result_uniqueness_is_based_on;
    private static final SubLString $str123$If_result_uniqueness_is_based_on_;
    private static final SubLList $list124;
    private static final SubLSymbol $kw125$DISJUNCTION_FREE_EL_VARS_POLICY;
    private static final SubLString $str126$If_disjuncts_have_different_free_;
    private static final SubLString $str127$What_to_do_if_different_top_level;
    private static final SubLList $list128;
    private static final SubLSymbol $kw129$ALLOWED_MODULES;
    private static final SubLString $str130$Allowed_HL_Modules;
    private static final SubLString $str131$An_HL_module_specification_which_;
    private static final SubLList $list132;
    private static final SubLSymbol $kw133$PRODUCTIVITY_LIMIT;
    private static final SubLString $str134$Productivity_limit;
    private static final SubLString $str135$If_a_tactic_is_estimated_to_have_;
    private static final SubLList $list136;
    private static final SubLInteger $int137$100;
    private static final SubLSymbol $kw138$REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT;
    private static final SubLString $str139$Removal_backtracking_productivity;
    private static final SubLString $str140$If_a_tactic_is_estimated_to_have_;
    private static final SubLList $list141;
    private static final SubLSymbol $kw142$EQUALITY_REASONING_METHOD;
    private static final SubLString $str143$Canonicalize_problems;
    private static final SubLString $str144$Whether_to_canonicalize_problem_q;
    private static final SubLList $list145;
    private static final SubLSymbol $kw146$EQUALITY_REASONING_DOMAIN;
    private static final SubLString $str147$Allow_problem_reuse_for;
    private static final SubLString $str148$Which_problems_are_permitted_to_b;
    private static final SubLList $list149;
    private static final SubLSymbol $kw150$INTERMEDIATE_STEP_VALIDATION_LEVEL;
    private static final SubLString $str151$Intermediate_proof_validation;
    private static final SubLString $str152$How_carefully_to_check_the_interm;
    private static final SubLList $list153;
    private static final SubLSymbol $kw154$MAX_PROBLEM_COUNT;
    private static final SubLString $str155$Space_cutoff;
    private static final SubLString $str156$The_maximum_number_of_subproblems;
    private static final SubLList $list157;
    private static final SubLSymbol $kw158$TRANSFORMATION_ALLOWED_;
    private static final SubLString $str159$Allow_transformation_at_all;
    private static final SubLString $str160$Even_stronger_than_setting_the_in;
    private static final SubLList $list161;
    private static final SubLSymbol $kw162$ADD_RESTRICTION_LAYER_OF_INDIRECTION_;
    private static final SubLString $str163$Add_restriction_layer_of_indirect;
    private static final SubLString $str164$When_solving_an_open_problem__the;
    private static final SubLSymbol $kw165$NEGATION_BY_FAILURE_;
    private static final SubLString $str166$Enable_negation_by_failure;
    private static final SubLString $str167$This_controls_whether_or_not_we_a;
    private static final SubLSymbol $kw168$COMPLETENESS_MINIMIZATION_ALLOWED_;
    private static final SubLString $str169$Enable_use_of_completeness_meta_k;
    private static final SubLString $str170$This_controls_whether_or_not_we_a;
    private static final SubLSymbol $kw171$DIRECTION;
    private static final SubLString $str172$Inference_Direction;
    private static final SubLString $str173$This_controls_whether_inferences_;
    private static final SubLList $list174;
    private static final SubLSymbol $kw175$EVALUATE_SUBL_ALLOWED_;
    private static final SubLString $str176$Enable_evaluation_of_SubL_perform;
    private static final SubLString $str177$This_controls_whether_or_not_we_a;
    private static final SubLSymbol $kw178$REWRITE_ALLOWED_;
    private static final SubLString $str179$Enable_sidechaining;
    private static final SubLString $str180$This_controls_whether_or_not_we_a;
    private static final SubLSymbol $kw181$ABDUCTION_ALLOWED_;
    private static final SubLString $str182$Enable_abduction;
    private static final SubLString $str183$This_controls_whether_or_not_we_a;
    private static final SubLSymbol $kw184$NEW_TERMS_ALLOWED_;
    private static final SubLString $str185$Introduce_new_terms;
    private static final SubLString $str186$This_controls_whether_or_not_we_a;
    private static final SubLSymbol $kw187$COMPUTE_ANSWER_JUSTIFICATIONS_;
    private static final SubLString $str188$Compute_Answer_Justifications;
    private static final SubLString $str189$This_controls_whether_or_not_we_c;
    private static final SubLSymbol $kw190$PROBLEM_STORE;
    private static final SubLSymbol $kw191$NON_EXPLANATORY_SENTENCE;
    private static final SubLSymbol $kw192$CONDITIONAL_SENTENCE_;
    private static final SubLString $str193$CB_QUERY;
    private static final SubLString $str194$CB_Query;
    private static final SubLSymbol $sym195$CB_QUERY_CONTINUE_THREAD;
    private static final SubLString $str196$CYC;
    private static final SubLSymbol $sym197$SPECIAL_VARIABLE_STATE_P;
    private static final SubLSymbol $sym198$CONTINUE_INFERENCE;
    private static final SubLSymbol $sym199$_CB_INFERENCES_;
    private static final SubLList $list200;
    private static final SubLSymbol $sym201$DO_LIST;
    private static final SubLList $list202;
    private static final SubLSymbol $sym203$PWHEN;
    private static final SubLList $list204;
    private static final SubLSymbol $sym205$CDESTRUCTURING_BIND;
    private static final SubLSymbol $sym206$_OPTIONAL;
    private static final SubLSymbol $sym207$_REST;
    private static final SubLList $list208;
    private static final SubLList $list209;
    private static final SubLSymbol $sym210$VALID_INFERENCE_P;
    private static final SubLSymbol $kw211$IGNORE_ERRORS_TARGET;
    private static final SubLSymbol $sym212$IGNORE_ERRORS_HANDLER;
    private static final SubLInteger $int213$1000;
    private static final SubLSymbol $sym214$CB_QUERY;
    private static final SubLSymbol $kw215$HTML_HANDLER;
    private static final SubLSymbol $kw216$QUERY;
    private static final SubLString $str217$query_tool_gif;
    private static final SubLString $str218$Query;
    private static final SubLString $str219$cb_query;
    private static final SubLSymbol $sym220$CB_LINK_QUERY;
    private static final SubLString $str221$Ask_a_Query;
    private static final SubLSymbol $kw222$TITLE;
    private static final SubLString $str223$Query_Tool;
    private static final SubLSymbol $kw224$REFRESH;
    private static final SubLSymbol $kw225$SENTENCE;
    private static final SubLSymbol $kw226$UNSPECIFIED;
    private static final SubLSymbol $kw227$MT;
    private static final SubLSymbol $kw228$PROPERTIES;
    private static final SubLSymbol $kw229$QUERY_SPEC;
    private static final SubLSymbol $kw230$TEST_SPEC;
    private static final SubLString $str231$__DOCTYPE_html_PUBLIC_____W3C__DT;
    private static final SubLString $str232$_meta_http_equiv__X_UA_Compatible;
    private static final SubLSymbol $kw233$UNINITIALIZED;
    private static final SubLSymbol $kw234$CB_CYC;
    private static final SubLString $str235$yui_skin_sam;
    private static final SubLString $str236$post;
    private static final SubLString $str237$cb_handle_query;
    private static final SubLString $str238$non_explanatory;
    private static final SubLSymbol $kw239$VISIBLE;
    private static final SubLSymbol $kw240$PARAGRAPH;
    private static final SubLSymbol $kw241$INVISIBLE;
    private static final SubLSymbol $kw242$CB_QUERY;
    private static final SubLString $str243$cb_query_html;
    private static final SubLString $str244$_Refresh_;
    private static final SubLString $str245$Go_to_section__;
    private static final SubLString $str246$Shortcut_links_to_sections_that_a;
    private static final SubLString $str247$focal_inference_section;
    private static final SubLString $str248$_Focal_Inference_;
    private static final SubLString $str249$The_inference_you_are_currently_e;
    private static final SubLString $str250$new_inference_section;
    private static final SubLString $str251$_New_Inference_;
    private static final SubLString $str252$Start_a_new_inference_;
    private static final SubLString $str253$parameters_section;
    private static final SubLString $str254$_Inference_Parameters_;
    private static final SubLString $str255$Adjust_the_inference_parameters_a;
    private static final SubLString $str256$proof_checker_section;
    private static final SubLString $str257$_Proof_Checker_Setup_;
    private static final SubLString $str258$Specify_an_exact_set_of_rules__an;
    private static final SubLString $str259$other_inferences;
    private static final SubLString $str260$Show;
    private static final SubLString $str261$Hide;
    private static final SubLString $str262$Other_Inferences;
    private static final SubLString $str263$Examine__continue__or_destroy_pas;
    private static final SubLString $str264$__A_total_;
    private static final SubLSymbol $kw265$LEFT;
    private static final SubLSymbol $kw266$TOP;
    private static final SubLString $str267$Actions;
    private static final SubLSymbol $kw268$DESTROY_ALL_OTHER_INFERENCES;
    private static final SubLString $str269$_Destroy_All_;
    private static final SubLSymbol $kw270$DEBUG_INFERENCE;
    private static final SubLString $str271$_Debug_;
    private static final SubLSymbol $kw272$INFERENCE;
    private static final SubLString $str273$_Examine_;
    private static final SubLSymbol $kw274$FOCUS_INFERENCE;
    private static final SubLString $str275$_Focus_;
    private static final SubLSymbol $kw276$DESTROY_INFERENCE;
    private static final SubLString $str277$_Destroy_;
    private static final SubLString $str278$Status;
    private static final SubLString $str279$Answers;
    private static final SubLString $str280$focal_problem_store;
    private static final SubLString $str281$focal_inference;
    private static final SubLString $str282$Focal_Inference;
    private static final SubLString $str283$Actions__;
    private static final SubLSymbol $kw284$MONITOR_INFERENCE;
    private static final SubLSymbol $kw285$REINFORCE_INFERENCE;
    private static final SubLString $str286$_Reinforce_;
    private static final SubLSymbol $kw287$DEFOCUS_INFERENCE;
    private static final SubLString $str288$_Defocus_;
    private static final SubLSymbol $kw289$TEMPLATE_OE_INFERENCE;
    private static final SubLString $str290$_Template_OE_;
    private static final SubLSymbol $kw291$CB_OWL_EXPORT_INFERENCE_ANSWERS;
    private static final SubLString $str292$_OWL_Export_;
    private static final SubLSymbol $kw293$KBQ_SAVE;
    private static final SubLString $str294$_Save_As_Query_;
    private static final SubLSymbol $kw295$KCT_SAVE;
    private static final SubLString $str296$_Save_As_Test_;
    private static final SubLSymbol $kw297$INFERENCE_TO_SUBL_QUERY;
    private static final SubLString $str298$_SubL_Query_;
    private static final SubLSymbol $kw299$INFERENCE_GRAPH;
    private static final SubLString $str300$_Query_Graph_;
    private static final SubLString $str301$Asking_query__;
    private static final SubLObject $const302$UnrunnableQuery_SubstitutionOfInd;
    private static final SubLSymbol $kw303$RED;
    private static final SubLString $str304$WARNING__This_query_is_not_intend;
    private static final SubLString $str305$new_inference;
    private static final SubLString $str306$New_Inference;
    private static final SubLSymbol $kw307$RUNNING;
    private static final SubLString $str308$Reset_All_Fields;
    private static final SubLString $str309$Start_as_a_Followup_to_Focal;
    private static final SubLString $str310$Starts_a_new_inference_as_a_follo;
    private static final SubLString $str311$sharing_a_problem_store;
    private static final SubLString $str312$followup;
    private static final SubLString $str313$Start_as_New;
    private static final SubLString $str314$Starts_a_new_inference_with_a_fre;
    private static final SubLString $str315$new;
    private static final SubLString $str316$Start_Inference;
    private static final SubLString $str317$query_spec;
    private static final SubLString $str318$test_spec;
    private static final SubLObject $const319$CurrentWorldDataCollectorMt_NonHo;
    private static final SubLSymbol $sym320$_DEFAULT_NEW_INFERENCE_MONAD_MT_;
    private static final SubLObject $const321$MtSpace;
    private static final SubLList $list322;
    private static final SubLSymbol $sym323$_DEFAULT_NEW_INFERENCE_MT_;
    private static final SubLObject $const324$InferencePSC;
    private static final SubLList $list325;
    private static final SubLString $str326$mt_section;
    private static final SubLString $str327$cb_query_inference_mt;
    private static final SubLString $str328$Query_Context;
    private static final SubLSymbol $kw329$MONAD_CHOICES;
    private static final SubLString $str330$sentence_section;
    private static final SubLInteger $int331$80;
    private static final SubLSymbol $kw332$INPUT_NAME;
    private static final SubLString $str333$sentence;
    private static final SubLSymbol $kw334$WIDTH;
    private static final SubLSymbol $kw335$HEIGHT;
    private static final SubLSymbol $kw336$COMPLETE_LABEL;
    private static final SubLString $str337$Complete;
    private static final SubLSymbol $kw338$CYCLIFY_LABEL;
    private static final SubLString $str339$Cyclify;
    private static final SubLSymbol $kw340$CLEAR_LABEL;
    private static final SubLString $str341$Clear_Sentence;
    private static final SubLSymbol $kw342$MODE;
    private static final SubLString $str343$editor_;
    private static final SubLString $str344$CycEditor;
    private static final SubLList $list345;
    private static final SubLList $list346;
    private static final SubLString $str347$_cols_;
    private static final SubLString $str348$_rows_;
    private static final SubLString $str349$Pragmatics;
    private static final SubLString $str350$An_optional_sentence_that_will_fu;
    private static final SubLString $str351$non_exp_sentence;
    private static final SubLSymbol $sym352$_CB_DEFAULT_QUERY_PARAMETERS_;
    private static final SubLString $str353$inference_parameters;
    private static final SubLString $str354$Inference_Parameters;
    private static final SubLString $str355$The_inference_parameters_and_reso;
    private static final SubLString $str356$Continue_the_Focal_Inference;
    private static final SubLString $str357$Continues_running_the_focal_infer;
    private static final SubLString $str358$continue;
    private static final SubLString $str359$Save_Parameters;
    private static final SubLString $str360$Saves_the_current_inference_param;
    private static final SubLString $str361$save_parameters;
    private static final SubLString $str362$Load_Parameters;
    private static final SubLString $str363$Loads_user_saved_default_inferenc;
    private static final SubLString $str364$load_parameters;
    private static final SubLString $str365$Reset_Parameters;
    private static final SubLString $str366$Resets_all_the_inference_paramete;
    private static final SubLString $str367$reset_parameters;
    private static final SubLString $str368$Strengthen_Parameters;
    private static final SubLString $str369$Sets_the_inference_parameters_to_;
    private static final SubLString $str370$strengthen_parameters;
    private static final SubLList $list371;
    private static final SubLString $str372$Inference_Resource_Constraints;
    private static final SubLString $str373$Properties_that_can_change_while_;
    private static final SubLString $str374$advanced_parameters;
    private static final SubLString $str375$Inference_Debugging_Parameters;
    private static final SubLString $str376$The_advanced_inference_parameters;
    private static final SubLList $list377;
    private static final SubLSymbol $sym378$CB_INFERENCE_MODE_PROPERTY_DATUM_P;
    private static final SubLSymbol $sym379$FIRST;
    private static final SubLString $str380$Inference_Engine_Mode_Properties;
    private static final SubLString $str381$Properties_determined_by_the_choi;
    private static final SubLList $list382;
    private static final SubLString $str383$Inference_Dynamic_Properties;
    private static final SubLList $list384;
    private static final SubLString $str385$Inference_Static_Properties;
    private static final SubLString $str386$Properties_that_can_vary_between_;
    private static final SubLList $list387;
    private static final SubLList $list388;
    private static final SubLString $str389$Problem_Store_Static_Properties;
    private static final SubLString $str390$Properties_of_a_problem_store_tha;
    private static final SubLList $list391;
    private static final SubLList $list392;
    private static final SubLSymbol $kw393$NO_MODE_VALUE_SPECIFIED;
    private static final SubLSymbol $kw394$YELLOW;
    private static final SubLString $str395$_;
    private static final SubLString $str396$This_parameter_has_been_modified_;
    private static final SubLList $list397;
    private static final SubLList $list398;
    private static final SubLSymbol $kw399$TEXT;
    private static final SubLString $str400$onClick__;
    private static final SubLString $str401$_;
    private static final SubLString $str402$set_all_radio_buttons_document_fo;
    private static final SubLString $str403$with__this_form_elements___A____v;
    private static final SubLList $list404;
    private static final SubLList $list405;
    private static final SubLString $str406$No_setting_for__s_matched_the_val;
    private static final SubLSymbol $kw407$DEFAULT_UNSPECIFIED;
    private static final SubLString $str408$Unexpected_inference_parameter_se;
    private static final SubLString $str409$_;
    private static final SubLString $str410$_;
    private static final SubLString $str411$_;
    private static final SubLString $str412$onClick__with__this_form_elements;
    private static final SubLSymbol $kw413$ALLOWED_RULES;
    private static final SubLSymbol $kw414$FORBIDDEN_RULES;
    private static final SubLSymbol $kw415$ALL;
    private static final SubLSymbol $kw416$NONE;
    private static final SubLString $str417$proof_checker;
    private static final SubLString $str418$Proof_Checker_Setup;
    private static final SubLString $str419$Specify_an_exact_set_of_rules_all;
    private static final SubLSymbol $kw420$CENTER;
    private static final SubLString $str421$_FFDFDF;
    private static final SubLString $str422$Forbidden;
    private static final SubLString $str423$Forbid_the_use_of_this_rule_in_in;
    private static final SubLString $str424$_Forbid_All_;
    private static final SubLString $str425$this_document_forms_0_;
    private static final SubLString $str426$_rule___;
    private static final SubLString $str427$forbidden;
    private static final SubLString $str428$_FFFFDF;
    private static final SubLString $str429$Unused;
    private static final SubLString $str430$Neither_forbid_nor_allow__treat_l;
    private static final SubLString $str431$_Unuse_All_;
    private static final SubLString $str432$unused;
    private static final SubLSymbol $kw433$QUERY_PROOF_CHECKER_DROP_ALL;
    private static final SubLString $str434$_Drop_All_;
    private static final SubLString $str435$_DFFFDF;
    private static final SubLString $str436$Allowed;
    private static final SubLString $str437$Allow_the_use_of_this_rule_in_inf;
    private static final SubLString $str438$_Allow_All_;
    private static final SubLString $str439$allowed;
    private static final SubLString $str440$_FFFFFF;
    private static final SubLString $str441$Proof_Checker_Rules;
    private static final SubLSymbol $kw442$FORBIDDEN;
    private static final SubLSymbol $kw443$UNUSED;
    private static final SubLSymbol $kw444$QUERY_PROOF_CHECKER_DROP;
    private static final SubLString $str445$_Drop_;
    private static final SubLSymbol $kw446$ALLOWED;
    private static final SubLString $str447$rule_;
    private static final SubLString $str448$Properties_which_must_remain_cons;
    private static final SubLString $str449$Other_Problem_Store_Properties;
    private static final SubLString $str450$Destruction_Imminent__;
    private static final SubLString $str451$Memoization_state___;
    private static final SubLSymbol $kw452$PROBLEM_STORE_MEMOIZATION_STATE;
    private static final SubLString $str453$Janitor___;
    private static final SubLSymbol $kw454$PROBLEM_STORE_JANITOR;
    private static final SubLSymbol $kw455$RECOMPUTE_DESTRUCTIBLES;
    private static final SubLSymbol $kw456$REMOVE_DESTRUCTIBLES;
    private static final SubLString $str457$_a_does_not_specify_an_assertion;
    private static final SubLString $str458$Assertion_specified_was_not_a_rul;
    private static final SubLSymbol $sym459$CB_QUERY_PROOF_CHECKER_DROP;
    private static final SubLSymbol $sym460$ASSERTION_P;
    private static final SubLSymbol $kw461$OVERLIB;
    private static final SubLString $str462$No_longer_consider_this_rule_as_b;
    private static final SubLString $str463$cb_query_proof_checker_drop__A;
    private static final SubLSymbol $sym464$CB_LINK_QUERY_PROOF_CHECKER_DROP;
    private static final SubLSymbol $sym465$CB_QUERY_PROOF_CHECKER_DROP_ALL;
    private static final SubLString $str466$No_longer_consider_any_of_these_r;
    private static final SubLString $str467$cb_query_proof_checker_drop_all;
    private static final SubLSymbol $sym468$CB_LINK_QUERY_PROOF_CHECKER_DROP_ALL;
    private static final SubLSymbol $kw469$CONTINUE;
    private static final SubLSymbol $kw470$FOLLOWUP;
    private static final SubLSymbol $kw471$NEW;
    private static final SubLSymbol $kw472$SAVE_PARAMETERS;
    private static final SubLSymbol $kw473$LOAD_PARAMETERS;
    private static final SubLSymbol $kw474$RESET_PARAMETERS;
    private static final SubLSymbol $kw475$STRENGTHEN_PARAMETERS;
    private static final SubLString $str476$Unknown_inference_method__how_did;
    private static final SubLString $str477$_A;
    private static final SubLString $str478$That_inference_is_no_longer_conti;
    private static final SubLList $list479;
    private static final SubLList $list480;
    private static final SubLList $list481;
    private static final SubLList $list482;
    private static final SubLList $list483;
    private static final SubLSymbol $sym484$CB_HANDLE_QUERY;
    private static final SubLSymbol $sym485$_TRUTH;
    private static final SubLObject $const486$sentenceTruth;
    private static final SubLSymbol $kw487$UNKNOWN;
    private static final SubLString $str488$_is_not_an_inference_parameter_;
    private static final SubLList $list489;
    private static final SubLString $str490$No_value_was_entered_for__;
    private static final SubLString $str491$__;
    private static final SubLString $str492$The_value_entered_for__;
    private static final SubLString $str493$__was_not_valid_;
    private static final SubLString $str494$No_choice_was_made_for__;
    private static final SubLString $str495$The_ID__;
    private static final SubLString $str496$__does_not_denote_a_CycLQuerySpec;
    private static final SubLString $str497$The_query_spec_ID__;
    private static final SubLString $str498$__does_not_denote_a_FORT_;
    private static final SubLString $str499$__does_not_denote_a_KBContentTest;
    private static final SubLString $str500$The_test_spec_ID__;
    private static final SubLSymbol $kw501$BROWSABLE_;
    private static final SubLString $str502$Socratic_Query;
    private static final SubLString $str503$Similar_Query;
    private static final SubLString $str504$_Query_Similar_;
    private static final SubLString $str505$cb_assertion_similar_query__A;
    private static final SubLSymbol $kw506$ASSERTION_SIMILAR_QUERY;
    private static final SubLSymbol $sym507$CB_LINK_ASSERTION_SIMILAR_QUERY;
    private static final SubLString $str508$The_assertion_is_not_available_;
    private static final SubLSymbol $sym509$CB_ASSERTION_SIMILAR_QUERY;
    private static final SubLSymbol $kw510$CUSTOM;
    private static final SubLSymbol $kw511$FORWARD;
    private static final SubLSymbol $kw512$PROOF;
    private static final SubLString $str513$Antecedent_Query;
    private static final SubLString $str514$_Antecedent_Query_;
    private static final SubLString $str515$cb_assertion_antecedent_query__A;
    private static final SubLSymbol $kw516$ANTECEDENT_QUERY;
    private static final SubLSymbol $sym517$CB_LINK_ANTECEDENT_QUERY;
    private static final SubLSymbol $sym518$CB_ASSERTION_ANTECEDENT_QUERY;
    private static final SubLString $str519$Known_Extent_Query;
    private static final SubLString $str520$_Known_Extent_Query_;
    private static final SubLSymbol $sym521$RULE_ASSERTION_;
    private static final SubLString $str522$cb_rule_known_extent_query__A;
    private static final SubLSymbol $kw523$RULE_KNOWN_EXTENT_QUERY;
    private static final SubLSymbol $sym524$CB_LINK_RULE_KNOWN_EXTENT_QUERY;
    private static final SubLString $str525$The_rule_is_not_available_;
    private static final SubLSymbol $sym526$CB_RULE_KNOWN_EXTENT_QUERY;
    private static final SubLString $str527$Unknown_Extent_Query;
    private static final SubLString $str528$_Unknown_Extent_Query_;
    private static final SubLString $str529$cb_rule_unknown_extent_query__A;
    private static final SubLSymbol $kw530$RULE_UNKNOWN_EXTENT_QUERY;
    private static final SubLSymbol $sym531$CB_LINK_RULE_UNKNOWN_EXTENT_QUERY;
    private static final SubLSymbol $sym532$CB_RULE_UNKNOWN_EXTENT_QUERY;
    private static final SubLString $str533$KB_Query;
    private static final SubLString $str534$Parameter_Strengthened_Query;
    private static final SubLObject $const535$EverythingPSC;
    private static final SubLList $list536;
    private static final SubLString $str537$Could_not_determine_a_term_from__;
    private static final SubLString $str538$Could_not_determine_an_arg_from__;
    private static final SubLSymbol $sym539$CB_LITERAL_QUERY;
    private static final SubLSymbol $sym540$CB_LQ;
    private static final SubLList $list541;
    private static final SubLSymbol $kw542$CB_LITERAL_QUERY;
    private static final SubLString $str543$cb_literal_query_html;
    private static final SubLString $str544$Literal_Query;
    private static final SubLSymbol $kw545$SAM_AUTOCOMPLETE_CSS;
    private static final SubLSymbol $kw546$SHA1;
    private static final SubLString $str547$reloadFrameButton;
    private static final SubLString $str548$button;
    private static final SubLString $str549$reload;
    private static final SubLString $str550$Refresh_Frames;
    private static final SubLSymbol $kw551$SENTENCE_QUERY_SIMILAR;
    private static final SubLString $str552$_Query_Tool_;
    private static final SubLString $str553$Last_query;
    private static final SubLSymbol $kw554$EXHAUST;
    private static final SubLSymbol $kw555$EXHAUST_TOTAL;
    private static final SubLString $str556$Query_halted_because___;
    private static final SubLString $str557$No_answers_were_proven;
    private static final SubLString $str558$One_answer;
    private static final SubLString $str559$_S_answers;
    private static final SubLString $str560$_for__S__;
    private static final SubLString $str561$Substituted_Results__;
    private static final SubLString $str562$Could_not_determine_the_arity_of_;
    private static final SubLSymbol $kw563$BINDINGS;
    private static final SubLSymbol $kw564$HL;
    private static final SubLSymbol $kw565$RETURN;
    private static final SubLSymbol $kw566$POSITIVE_INFINITY;
    private static final SubLFloat $float567$1_0;
    private static final SubLInteger $int568$64;
    private static final SubLSymbol $sym569$GENERALITY_ESTIMATE_;
    private static final SubLString $str570$Simulated_query_over_all_mts__;
    private static final SubLObject $const571$isa;
    private static final SubLList $list572;
    private static final SubLString $str573$Answers_in_;
    private static final SubLString $str574$_;
    private static final SubLString $str575$__inherits_from;
    private static final SubLString $str576$_;
    private static final SubLString $str577$_;
    private static final SubLString $str578$__;
    private static final SubLSymbol $sym579$GENERALITY_ESTIMATE_;
    private static final SubLSymbol $kw580$INDEX;
    private static final SubLList $list581;
    private static final SubLSymbol $kw582$LIKELY;
    private static final SubLSymbol $kw583$POSSIBLE;
    private static final SubLSymbol $kw584$INDEX_DISPLAY;
    private static final SubLSymbol $kw585$NORMAL;
    private static final SubLSymbol $kw586$KNOWN;
    private static final SubLSymbol $kw587$POS;
    private static final SubLObject $const588$genlPreds;
    private static final SubLString $str589$Current_query;
    private static final SubLString $str590$_in_;
    private static final SubLString $str591$__;
    private static final SubLInteger $int592$800;
    private static final SubLString $str593$cb_inference_progress_page__A__A;
    private static final SubLString $str594$inference_progress;
    private static final SubLString $str595$100_;
    private static final SubLSymbol $kw596$ON;
    private static final SubLSymbol $kw597$OFF;
    private static final SubLString $str598$Inference__A_in_problem_store__A_;
    private static final SubLString $str599$Inference__A__A_Progress;
    private static final SubLSymbol $kw600$DISABLED;
    private static final SubLSymbol $sym601$CB_INFERENCE_PROGRESS_PAGE;
    private static final SubLString $str602$_Refresh_Page_;
    private static final SubLString $str603$Status__;
    private static final SubLString $str604$_Halt_Auto_Refresh_;
    private static final SubLSymbol $kw605$AUTO_REFRESH_QUERY;
    private static final SubLString $str606$_Auto_Refresh_;
    private static final SubLSymbol $kw607$INTERRUPT_INFERENCE;
    private static final SubLString $str608$_Interrupt_;
    private static final SubLSymbol $kw609$ABORT_INFERENCE;
    private static final SubLString $str610$_Abort_;
    private static final SubLString $str611$Max_time_remaining__;
    private static final SubLString $str612$Time_over_budget__;
    private static final SubLString $str613$inference_answers;
    private static final SubLString $str614$_;
    private static final SubLSymbol $kw615$ALL_INFERENCE_ANSWERS;
    private static final SubLString $str616$_All_Answers_;
    private static final SubLSymbol $kw617$SAVE_INFERENCE_ANSWERS;
    private static final SubLSymbol $kw618$GRAPH_INFERENCE_ANSWERS;
    private static final SubLSymbol $kw619$SAVE_INFERENCE_ANSWERS_AS_QUERIES;
    private static final SubLString $str620$_Save_Answers_as_Queries_;
    private static final SubLSymbol $kw621$INFERENCE_ANSWER_TIMELINE;
    private static final SubLString $str622$_Timeline_;
    private static final SubLSymbol $sym623$CB_AUTO_REFRESH_QUERY;
    private static final SubLString $str624$Starts_up_an_auto_refresh_loop_th;
    private static final SubLString $str625$cb_auto_refresh_query__A__A;
    private static final SubLSymbol $sym626$CB_LINK_AUTO_REFRESH_QUERY;
    private static final SubLString $str627$_More_____;
    private static final SubLString $str628$cb_all_inference_answers__A__A;
    private static final SubLSymbol $sym629$CB_LINK_ALL_INFERENCE_ANSWERS;
    private static final SubLString $str630$Inference__A__A;
    private static final SubLSymbol $sym631$CB_ALL_INFERENCE_ANSWERS;
    private static final SubLString $str632$Inference_Answers;
    private static final SubLString $str633$_Examine_Inference_;
    private static final SubLSymbol $sym634$CB_FOCUS_INFERENCE;
    private static final SubLString $str635$Make_this_inference_the_focal_inf;
    private static final SubLString $str636$cb_focus_inference__A__A;
    private static final SubLSymbol $sym637$CB_LINK_FOCUS_INFERENCE;
    private static final SubLSymbol $sym638$CB_DEFOCUS_INFERENCE;
    private static final SubLString $str639$Make_this_inference_no_longer_the;
    private static final SubLString $str640$cb_defocus_inference__A__A;
    private static final SubLSymbol $sym641$CB_LINK_DEFOCUS_INFERENCE;
    private static final SubLSymbol $sym642$CB_INTERRUPT_INFERENCE;
    private static final SubLString $str643$cb_interrupt_inference__A__A;
    private static final SubLSymbol $sym644$CB_LINK_INTERRUPT_INFERENCE;
    private static final SubLSymbol $sym645$CB_ABORT_INFERENCE;
    private static final SubLString $str646$cb_abort_inference__A__A;
    private static final SubLSymbol $sym647$CB_LINK_ABORT_INFERENCE;
    private static final SubLSymbol $sym648$CB_FORGET_INFERENCE;
    private static final SubLString $str649$_Forget_;
    private static final SubLString $str650$cb_forget_inference__A__A;
    private static final SubLSymbol $kw651$FORGET_INFERENCE;
    private static final SubLSymbol $sym652$CB_LINK_FORGET_INFERENCE;
    private static final SubLSymbol $sym653$CB_FORGET_ALL_INFERENCES;
    private static final SubLString $str654$_Forget_All_;
    private static final SubLString $str655$cb_forget_all_inferences;
    private static final SubLSymbol $kw656$FORGET_ALL_INFERENCES;
    private static final SubLSymbol $sym657$CB_LINK_FORGET_ALL_INFERENCES;
    private static final SubLSymbol $sym658$CB_FORGET_ALL_OTHER_INFERENCES;
    private static final SubLString $str659$cb_forget_all_other_inferences;
    private static final SubLSymbol $kw660$FORGET_ALL_OTHER_INFERENCES;
    private static final SubLSymbol $sym661$CB_LINK_FORGET_ALL_OTHER_INFERENCES;
    private static final SubLString $str662$Inference_heuristics_are_being_re;
    private static final SubLInteger $int663$2000;
    private static final SubLSymbol $sym664$CB_REINFORCE_INFERENCE;
    private static final SubLString $str665$Reinforce_the_inference_heuristic;
    private static final SubLString $str666$cb_reinforce_inference__A__A;
    private static final SubLSymbol $sym667$CB_LINK_REINFORCE_INFERENCE;
    private static final SubLSymbol $sym668$CB_DESTROY_INFERENCE;
    private static final SubLString $str669$Destroy_this_inference__reclaimin;
    private static final SubLString $str670$cb_destroy_inference__A__A;
    private static final SubLSymbol $sym671$CB_LINK_DESTROY_INFERENCE;
    private static final SubLSymbol $sym672$CB_DESTROY_ALL_INFERENCES;
    private static final SubLString $str673$Destroy_all_inferences__including;
    private static final SubLString $str674$cb_destroy_all_inferences;
    private static final SubLSymbol $kw675$DESTROY_ALL_INFERENCES;
    private static final SubLSymbol $sym676$CB_LINK_DESTROY_ALL_INFERENCES;
    private static final SubLList $list677;
    private static final SubLSymbol $sym678$CB_DESTROY_ALL_OTHER_INFERENCES;
    private static final SubLString $str679$Destroy_all_inferences_other_than;
    private static final SubLString $str680$cb_destroy_all_other_inferences;
    private static final SubLSymbol $sym681$CB_LINK_DESTROY_ALL_OTHER_INFERENCES;
    private static final SubLString $str682$Convert_this_inference_to_an_equi;
    private static final SubLString $str683$cb_inference_to_subl_query__A__A;
    private static final SubLSymbol $sym684$CB_LINK_INFERENCE_TO_SUBL_QUERY;
    private static final SubLString $str685$input_string;
    private static final SubLSymbol $sym686$CB_INFERENCE_TO_SUBL_QUERY;
    private static final SubLString $str687$_Graph_Answers_;
    private static final SubLString $str688$cb_graph_inference_answers__A__A;
    private static final SubLString $str689$window_open__;
    private static final SubLString $str690$__;
    private static final SubLString $str691$__A_;
    private static final SubLString $str692$null;
    private static final SubLString $str693$___A____;
    private static final SubLString $str694$return_false_;
    private static final SubLSymbol $sym695$CB_LINK_GRAPH_INFERENCE_ANSWERS;
    private static final SubLSymbol $sym696$CB_GRAPH_INFERENCE_ANSWERS;
    private static final SubLSymbol $kw697$SIGNATURE;
    private static final SubLSymbol $kw698$INFERENCE_STORE_ID;
    private static final SubLSymbol $kw699$INFERENCE_ID;
    private static final SubLString $str700$cb_graph_inference_answers_window;
    private static final SubLSymbol $sym701$CB_GRAPH_INFERENCE_ANSWERS_WINDOW;
    private static final SubLSymbol $kw702$BBF_INFERENCE_ANSWERS;
    private static final SubLSymbol $kw703$BUILDER_FN;
    private static final SubLSymbol $kw704$PARAMS;
    private static final SubLString $str705$store_id;
    private static final SubLString $str706$inference_id;
    private static final SubLString $str707$_ans_format;
    private static final SubLString $str708$_destination;
    private static final SubLString $str709$_filename;
    private static final SubLString $str710$cycl_prefix;
    private static final SubLSymbol $kw711$FILE;
    private static final SubLString $str712$Please_enter_a_filename_to_save_t;
    private static final SubLSymbol $kw713$TAB_DELIMITED;
    private static final SubLSymbol $kw714$XML;
    private static final SubLSymbol $kw715$ALCHEMY;
    private static final SubLSymbol $sym716$CATCH_ERROR_MESSAGE_HANDLER;
    private static final SubLString $str717$Attempt_to_save_answers_failed___;
    private static final SubLSymbol $kw718$CUSTOM_XML;
    private static final SubLString $str719$_spec;
    private static final SubLString $str720$Error__Operation_failed;
    private static final SubLString $str721$The_query_results_were_not_transf;
    private static final SubLString $str722$Back;
    private static final SubLString $str723$Error__Invalid_input;
    private static final SubLString $str724$Please_select_one_of_the_output_f;
    private static final SubLSymbol $sym725$CB_SAVE_INFERENCE_ANSWERS_INT;
    private static final SubLSymbol $kw726$HTML_STREAM;
    private static final SubLSymbol $kw727$OUTPUT;
    private static final SubLString $str728$Answers_were_saved_to_;
    private static final SubLSymbol $kw729$CB_SAVE_INFERENCE_ANSWERS;
    private static final SubLString $str730$cb_save_inference_answers_html;
    private static final SubLString $str731$Save_Query_Results_as_Text_XML;
    private static final SubLString $str732$cb_save_inference_answers_int;
    private static final SubLString $str733$Save_query_results_as_;
    private static final SubLString $str734$_tab_delimited;
    private static final SubLString $str735$Text;
    private static final SubLString $str736$_xml;
    private static final SubLString $str737$Default_XML;
    private static final SubLString $str738$_custom_xml;
    private static final SubLString $str739$User_defined_XML;
    private static final SubLString $str740$_alchemy;
    private static final SubLString $str741$Alchemy_text__bindings_must_be_se;
    private static final SubLString $str742$Destination_;
    private static final SubLString $str743$_html_stream;
    private static final SubLString $str744$Show_results_in_this_browser;
    private static final SubLString $str745$_file;
    private static final SubLString $str746$Save_results_in_file_;
    private static final SubLSymbol $kw747$NBSP;
    private static final SubLInteger $int748$60;
    private static final SubLString $str749$Clear;
    private static final SubLString $str750$Optional_Parameters_;
    private static final SubLString $str751$cycl_prefix_enabled;
    private static final SubLString $str752$Include______prefix_on_CycL_terms;
    private static final SubLString $str753$Please_enter_XML_specifications_i;
    private static final SubLString $str754$Submit;
    private static final SubLSymbol $sym755$CB_SAVE_INFERENCE_ANSWERS;
    private static final SubLString $str756$_Save_Answers_;
    private static final SubLString $str757$cb_save_inference_answers__A__A;
    private static final SubLSymbol $sym758$CB_LINK_SAVE_INFERENCE_ANSWERS;
    private static final SubLSymbol $kw759$STORE_ID;
    private static final SubLSymbol $sym760$CB_SAVE_INFERENCE_ANSWERS_AS_QUERIES;
    private static final SubLString $str761$Save_Inference_Answers_as_Queries;
    private static final SubLSymbol $kw762$SUBMIT;
    private static final SubLSymbol $kw763$EL_VARIABLES;
    private static final SubLString $str764$Please_select_one_or_more_EL_vari;
    private static final SubLSymbol $kw765$ANSWER_IDS;
    private static final SubLString $str766$Please_select_one_or_more_answers;
    private static final SubLSymbol $sym767$_EXIT;
    private static final SubLString $str768$cb_save_inference_answers_as_quer;
    private static final SubLString $str769$Inference__A_in_problem_store__A_;
    private static final SubLString $str770$Inference__A_in_problem_store__A_;
    private static final SubLString $str771$Which_variables_should_be_filled_;
    private static final SubLString $str772$Which_answers_should_be_used_to_g;
    private static final SubLString $str773$Answer;
    private static final SubLSymbol $sym774$MAKE_EL_VAR;
    private static final SubLString $str775$Reifying_query_for__;
    private static final SubLString $str776$query_about;
    private static final SubLString $str777$New_Constant__;
    private static final SubLString $str778$cb_save_inference_answers_as_quer;
    private static final SubLSymbol $sym779$CB_LINK_SAVE_INFERENCE_ANSWERS_AS_QUERIES;
    private static final SubLString $str780$Inference__A__A_Answer_Timeline;
    private static final SubLString $str781$Inference_Answer_Timeline;
    private static final SubLString $str782$_for_;
    private static final SubLList $list783;
    private static final SubLSymbol $sym784$CB_INFERENCE_ANSWER_TIMELINE;
    private static final SubLString $str785$_Answer_Timeline_;
    private static final SubLString $str786$cb_inference_answer_timeline__A__;
    private static final SubLSymbol $sym787$CB_LINK_INFERENCE_ANSWER_TIMELINE;
    private static final SubLSymbol $sym788$DOUBLE_FLOAT;
    private static final SubLString $str789$http___chart_apis_google_com_char;
    private static final SubLString $str790$cht_s;
    private static final SubLString $str791$_chs_600x450;
    private static final SubLString $str792$Inference_;
    private static final SubLString $str793$_Answer_Timeline;
    private static final SubLString $str794$_chtt__A;
    private static final SubLString $str795$_chds__S__S__S__S;
    private static final SubLString $str796$_chxt_x_y_x_y;
    private static final SubLString $str797$_chxr_0__S__S_1__S__S;
    private static final SubLString $str798$milliseconds;
    private static final SubLString $str799$seconds;
    private static final SubLString $str800$Time__;
    private static final SubLString $str801$Answer__;
    private static final SubLString $str802$_chxl_2___A_3___A;
    private static final SubLString $str803$_chxp_2__S_3__S;
    private static final SubLInteger $int804$50;
    private static final SubLString $str805$_chd_t_;
    private static final SubLString $str806$_;
    private static final SubLInteger $int807$450;
    private static final SubLInteger $int808$600;
    private static final SubLInteger $int809$120;
    private static final SubLSymbol $sym810$_;
    private static final SubLSymbol $sym811$SECOND;
    private static final SubLList $list812;
    private static final SubLSymbol $kw813$SOME;
    private static final SubLString $str814$Unexpected_mode__A;
    private static final SubLSymbol $sym815$CB_INFERENCE_STRENGTHEN_PROPERTIES;
    private static final SubLString $str816$_Strengthen_Parameters_;
    private static final SubLList $list817;
    private static final SubLString $str818$_S_was_an_invalid_mode;
    private static final SubLString $str819$cb_inference_strengthen_propertie;
    private static final SubLSymbol $kw820$INFERENCE_STRENGTHEN_PROPERTIES;
    private static final SubLSymbol $sym821$CB_LINK_INFERENCE_STRENGTHEN_PROPERTIES;
    private static final SubLSymbol $sym822$QUERY_PROPERTY_P;
    private static final SubLList $list823;
    private static final SubLSymbol $kw824$TERSE;
    private static final SubLSymbol $sym825$CB_TRANSFORMATION_RULE_STATISTICS;
    private static final SubLString $str826$Experience_Control_Panel;
    private static final SubLString $str827$cb_handle_transformation_rule_sta;
    private static final SubLSymbol $kw828$TRANSFORMATION_RULE_STATISTICS;
    private static final SubLSymbol $kw829$CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS;
    private static final SubLString $str830$_Clear_All_Experience_;
    private static final SubLString $str831$Load_experience_from_file___;
    private static final SubLString $str832$load_filename;
    private static final SubLString $str833$Load_Experience;
    private static final SubLString $str834$load;
    private static final SubLString $str835$Save_experience_to_file___;
    private static final SubLString $str836$save_filename;
    private static final SubLString $str837$Save_Experience;
    private static final SubLString $str838$save;
    private static final SubLString $str839$Transformation_Rule_Statistics;
    private static final SubLString $str840$cb_transformation_rule_statistics;
    private static final SubLSymbol $sym841$CB_LINK_TRANSFORMATION_RULE_STATISTICS;
    private static final SubLList $list842;
    private static final SubLString $str843$cb_transformation_rule_statistics;
    private static final SubLSymbol $kw844$HISTORICAL_UTILITY;
    private static final SubLString $str845$Gather_during_inference___;
    private static final SubLSymbol $kw846$DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static final SubLSymbol $kw847$ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static final SubLString $str848$_Disable_;
    private static final SubLString $str849$_Enable_;
    private static final SubLString $str850$Use_for_sorting_during_inference_;
    private static final SubLSymbol $kw851$DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static final SubLSymbol $kw852$ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static final SubLString $str853$Prune_never_before_successful_rul;
    private static final SubLSymbol $kw854$DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static final SubLSymbol $kw855$ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static final SubLString $str856$No_rules;
    private static final SubLString $str857$Experience_files_that_have_been_l;
    private static final SubLString $str858$No_experience_files_have_been_loa;
    private static final SubLString $str859$Experience_files_that_have_been_r;
    private static final SubLString $str860$No_experience_files_have_been_rec;
    private static final SubLString $str861$Total_experience_;
    private static final SubLString $str862$_S_rule_considerations;
    private static final SubLString $str863$_S_rule_successes;
    private static final SubLString $str864$_S_rules;
    private static final SubLString $str865$_see_below_;
    private static final SubLString $str866$_Show_Rule_Details_;
    private static final SubLString $str867$Experience_acquired_by_this_image;
    private static final SubLSymbol $kw868$IMAGE_SPECIFIC;
    private static final SubLString $str869$Experience_received_from_other_im;
    private static final SubLList $list870;
    private static final SubLSymbol $sym871$__;
    private static final SubLSymbol $sym872$CAR;
    private static final SubLString $str873$Rule_Utility_Histogram;
    private static final SubLSymbol $kw874$RIGHT;
    private static final SubLString $str875$Utility;
    private static final SubLString $str876$Count;
    private static final SubLString $str877$Percent;
    private static final SubLSymbol $sym878$CDR;
    private static final SubLList $list879;
    private static final SubLString $str880$_A__;
    private static final SubLInteger $int881$40;
    private static final SubLString $str882$_S_rules_with_image_specific_expe;
    private static final SubLString $str883$_Hide_Rule_Details_;
    private static final SubLString $str884$_S_rules__sorted_by__A;
    private static final SubLString $str885$__S__S___S_____utility____S;
    private static final SubLString $str886$__S_utility;
    private static final SubLString $str887$__never_considered;
    private static final SubLString $str888$__due_to__S___success___S__S_;
    private static final SubLString $str889$__;
    private static final SubLString $str890$_mode_is_the_least_powerful_infer;
    private static final SubLSymbol $kw891$SHALLOW;
    private static final SubLSymbol $kw892$EXTENDED;
    private static final SubLSymbol $kw893$MAXIMAL;
    private static final SubLSymbol $kw894$BLUE;
    private static final SubLString $str895$Shallow;
    private static final SubLSymbol $kw896$MAGENTA;
    private static final SubLString $str897$Extended;
    private static final SubLString $str898$Maximal;
    private static final SubLSymbol $sym899$CB_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static final SubLString $str900$cb_disable_strategic_heuristic_ru;
    private static final SubLSymbol $sym901$CB_LINK_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static final SubLSymbol $sym902$CB_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static final SubLString $str903$cb_enable_strategic_heuristic_rul;
    private static final SubLSymbol $sym904$CB_LINK_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY;
    private static final SubLSymbol $sym905$CB_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static final SubLString $str906$cb_disable_transformation_rule_st;
    private static final SubLSymbol $sym907$CB_LINK_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static final SubLSymbol $sym908$CB_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static final SubLString $str909$cb_enable_transformation_rule_sta;
    private static final SubLSymbol $sym910$CB_LINK_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE;
    private static final SubLSymbol $sym911$CB_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static final SubLString $str912$cb_disable_transformation_rule_hi;
    private static final SubLSymbol $sym913$CB_LINK_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static final SubLSymbol $sym914$CB_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static final SubLString $str915$cb_enable_transformation_rule_his;
    private static final SubLSymbol $sym916$CB_LINK_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING;
    private static final SubLList $list917;
    private static final SubLString $str918$Could_not_determine_an_assertion_;
    private static final SubLString $str919$The_transformation_statistics_hav;
    private static final SubLSymbol $sym920$CB_CLEAR_TRANSFORMATION_RULE_STATISTICS;
    private static final SubLString $str921$_Clear_;
    private static final SubLString $str922$cb_clear_transformation_rule_stat;
    private static final SubLSymbol $kw923$CLEAR_TRANSFORMATION_RULE_STATISTICS;
    private static final SubLSymbol $sym924$CB_LINK_CLEAR_TRANSFORMATION_RULE_STATISTICS;
    private static final SubLSymbol $sym925$CB_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS;
    private static final SubLString $str926$_Clear_All_;
    private static final SubLString $str927$cb_clear_all_transformation_rule_;
    private static final SubLSymbol $sym928$CB_LINK_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS;
    private static final SubLString $str929$Must_specify_either_load_or_save_;
    private static final SubLString $str930$Unexpected_args__s;
    private static final SubLSymbol $sym931$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS;
    private static final SubLString $str932$The_specified_filename__S_could_n;
    private static final SubLString $str933$No_filename_was_specified_;
    private static final SubLSymbol $sym934$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_LOAD;
    private static final SubLString $str935$The_specified_filename__S_could_n;
    private static final SubLString $str936$Experience_saved_;
    private static final SubLSymbol $sym937$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_SAVE;
    private static final SubLString $str938$Forward_Inference_Metrics;
    private static final SubLSymbol $sym939$CB_FORWARD_INFERENCE_METRICS;
    private static final SubLString $str940$cb_forward_inference_metrics;
    private static final SubLSymbol $kw941$FORWARD_INFERENCE_METRICS;
    private static final SubLSymbol $sym942$CB_LINK_FORWARD_INFERENCE_METRICS;
    private static final SubLList $list943;
    private static final SubLString $str944$Rule_Forward_Inference_Metrics;
    private static final SubLSymbol $kw945$RULE_FORWARD_INFERENCE_METRICS;
    private static final SubLString $str946$_All_Forward_Inference_Metrics_;
    private static final SubLSymbol $kw947$VERBOSE;
    private static final SubLSymbol $sym948$CB_RULE_FORWARD_INFERENCE_METRICS;
    private static final SubLString $str949$_Forward_Inference_Metrics_;
    private static final SubLString $str950$cb_rule_forward_inference_metrics;
    private static final SubLString $str951$cb_rule_forward_inference_metrics;
    private static final SubLSymbol $sym952$CB_LINK_RULE_FORWARD_INFERENCE_METRICS;
    private static final SubLSymbol $sym953$CB_CLEAR_FORWARD_INFERENCE_METRICS;
    private static final SubLString $str954$_Clear_Forward_Metrics_;
    private static final SubLString $str955$cb_clear_forward_inference_metric;
    private static final SubLSymbol $kw956$CLEAR_FORWARD_INFERENCE_METRICS;
    private static final SubLSymbol $sym957$CB_LINK_CLEAR_FORWARD_INFERENCE_METRICS;
    private static final SubLSymbol $sym958$CB_START_GATHERING_FORWARD_INFERENCE_METRICS;
    private static final SubLString $str959$_Start_Gathering_Metrics_;
    private static final SubLString $str960$cb_start_gathering_forward_infere;
    private static final SubLSymbol $kw961$START_GATHERING_FORWARD_INFERENCE_METRICS;
    private static final SubLSymbol $sym962$CB_LINK_START_GATHERING_FORWARD_INFERENCE_METRICS;
    private static final SubLSymbol $sym963$CB_STOP_GATHERING_FORWARD_INFERENCE_METRICS;
    private static final SubLString $str964$_Stop_Gathering_Metrics_;
    private static final SubLString $str965$cb_stop_gathering_forward_inferen;
    private static final SubLSymbol $kw966$STOP_GATHERING_FORWARD_INFERENCE_METRICS;
    private static final SubLSymbol $sym967$CB_LINK_STOP_GATHERING_FORWARD_INFERENCE_METRICS;
    private static final SubLString $str968$_No_forward_inference_metrics_hav;
    private static final SubLString $str969$No_forward_inference_metrics_have;
    private static final SubLSymbol $kw970$TOTAL_TIME;
    private static final SubLSymbol $kw971$TOTAL_INFERENCE_TIME;
    private static final SubLSymbol $kw972$TOTAL_INFERENCES;
    private static final SubLSymbol $kw973$TOTAL_TRIGGERS;
    private static final SubLSymbol $kw974$TOTAL_RULES;
    private static final SubLSymbol $kw975$AVERAGE_INFERENCES_PER_RULE;
    private static final SubLSymbol $kw976$STDEV_INFERENCES_PER_RULE;
    private static final SubLSymbol $kw977$AVERAGE_TRIGGER_PER_RULE;
    private static final SubLSymbol $kw978$STDEV_TRIGGER_PER_RULE;
    private static final SubLSymbol $kw979$AVERAGE_TIME_PER_RULE;
    private static final SubLSymbol $kw980$STDEV_TIME_PER_RULE;
    private static final SubLSymbol $kw981$AVERAGE_TIME_PER_INFERENCE;
    private static final SubLSymbol $kw982$STDEV_TIME_PER_INFERENCE;
    private static final SubLSymbol $kw983$AVERAGE_TIME_PER_TRIGGER;
    private static final SubLSymbol $kw984$STDEV_TIME_PER_TRIGGER;
    private static final SubLSymbol $kw985$SUCCESS_RULE_COUNT;
    private static final SubLSymbol $kw986$SUCCESS_TRIGGER_COUNT;
    private static final SubLSymbol $kw987$SUCCESS_TIME_ESTIMATE;
    private static final SubLSymbol $kw988$SUCCESS_RULE_RATIO;
    private static final SubLSymbol $kw989$SUCCESS_TRIGGER_RATIO;
    private static final SubLSymbol $kw990$SUCCESS_TIME_RATIO;
    private static final SubLString $str991$Total_time__;
    private static final SubLString $str992$Inference_time__;
    private static final SubLString $str993$___A__;
    private static final SubLString $str994$Successful;
    private static final SubLList $list995;
    private static final SubLString $str996$__est_;
    private static final SubLString $str997$_inference_P;
    private static final SubLString $str998$_rule_P;
    private static final SubLString $str999$_trigger_P;
    private static final SubLString $str1000$Total;
    private static final SubLString $str1001$Success__;
    private static final SubLString $str1002$__;
    private static final SubLString $str1003$Averages;
    private static final SubLString $str1004$___rule;
    private static final SubLString $str1005$_inferences___rule;
    private static final SubLString $str1006$___inference;
    private static final SubLString $str1007$_triggers___rule;
    private static final SubLString $str1008$___trigger;
    private static final SubLString $str1009$Standard_Deviations;
    private static final SubLString $str1010$_Show_Metric_Histogram_;
    private static final SubLString $str1011$_Hide_Metric_Histogram_;
    private static final SubLSymbol $kw1012$TIME;
    private static final SubLSymbol $sym1013$_;
    private static final SubLSymbol $sym1014$SAFE__;
    private static final SubLString $str1015$Metric;
    private static final SubLString $str1016$Total_time;
    private static final SubLString $str1017$_;
    private static final SubLString $str1018$Time___call;
    private static final SubLList $list1019;
    private static final SubLList $list1020;
    private static final SubLList $list1021;
    private static final SubLSymbol $kw1022$RULE;
    private static final SubLSymbol $kw1023$INFERENCE_TIME;
    private static final SubLSymbol $kw1024$TIME_PLIST;
    private static final SubLSymbol $kw1025$COUNT_PLIST;
    private static final SubLSymbol $kw1026$TRIGGER_GAFS;
    private static final SubLSymbol $kw1027$INFERENCE_COUNT;
    private static final SubLSymbol $kw1028$INFERENCES;
    private static final SubLString $str1029$cumulative_time__S_;
    private static final SubLSymbol $kw1030$WHITE;
    private static final SubLSymbol $kw1031$BLACK;
    private static final SubLString $str1032$80_;
    private static final SubLString $str1033$Overhead;
    private static final SubLString $str1034$_Show_Detail_;
    private static final SubLString $str1035$Inferences_;
    private static final SubLString $str1036$__S_good;
    private static final SubLString $str1037$__S_neutral;
    private static final SubLString $str1038$__S_no_good;
    private static final SubLString $str1039$Good__;
    private static final SubLString $str1040$Neutral__;
    private static final SubLString $str1041$No_Good__;
    private static final SubLString $str1042$Triggers_;
    private static final SubLString $str1043$__S_successful;
    private static final SubLString $str1044$__S_failed;
    private static final SubLString $str1045$__S_unknown;
    private static final SubLString $str1046$Successful__;
    private static final SubLString $str1047$_A_successful_trigger__P_now_inva;
    private static final SubLString $str1048$Failed__;
    private static final SubLString $str1049$_A_failed_trigger__P_now_invalid_;
    private static final SubLString $str1050$Unknown__unreifiable___;
    private static final SubLSymbol $kw1051$VERY_VERBOSE;
    private static final SubLString $str1052$___as_;
    private static final SubLString $str1053$inference_metrics;
    private static final SubLString $str1054$_Show_metrics_;
    private static final SubLString $str1055$_Hide_metrics_;
    private static final SubLSymbol $kw1056$GOOD;
    private static final SubLSymbol $kw1057$NEUTRAL;
    private static final SubLSymbol $kw1058$NO_GOOD;
    private static final SubLString $str1059$_;
    private static final SubLSymbol $kw1060$CONTENT;
    private static final SubLString $str1061$cb_inference_graph__A__A;
    private static final SubLSymbol $sym1062$CB_LINK_INFERENCE_GRAPH;
    private static final SubLSymbol $sym1063$CB_INFERENCE_GRAPH;
    private static final SubLString $str1064$Graph_of_a_query_formula;
    private static final SubLString $str1065$Refresh;
    private static final SubLString $str1066$reloadCurrentFrame__reloadFrameBu;
    private static final SubLString $str1067$Graph_for_;
    private static final SubLString $str1068$_a;
    private static final SubLInteger $int1069$30;
    private static final SubLSymbol $sym1070$BBF_INFERENCE;
    private static final SubLSymbol $kw1071$STORE_SUID;
    private static final SubLSymbol $kw1072$INFERENCE_SUID;
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 1074L)
    public static SubLObject cb_inference_identifier(final SubLObject inference) {
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        return Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { cb_query.$str1$_, format_nil.format_nil_a_no_copy(inference_id) });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 1317L)
    public static SubLObject cb_guess_inference_from_identifier(final SubLObject identifier) {
        if (identifier.isString()) {
            final SubLObject ids = string_utilities.split_string(identifier, (SubLObject)cb_query.$list2);
            if (cb_query.NIL != list_utilities.lengthE(ids, (SubLObject)cb_query.TWO_INTEGER, (SubLObject)cb_query.UNPROVIDED)) {
                SubLObject current;
                final SubLObject datum = current = ids;
                SubLObject store_id_string = (SubLObject)cb_query.NIL;
                SubLObject inference_id_string = (SubLObject)cb_query.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list3);
                store_id_string = current.first();
                current = current.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list3);
                inference_id_string = current.first();
                current = current.rest();
                if (cb_query.NIL == current) {
                    return cb_guess_inference(store_id_string, inference_id_string);
                }
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list3);
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 1629L)
    public static SubLObject cb_guess_inference(final SubLObject store_id_string, final SubLObject inference_id_string) {
        if (cb_query.NIL != string_utilities.digit_stringP(store_id_string) && cb_query.NIL != string_utilities.digit_stringP(inference_id_string)) {
            final SubLObject store_suid = reader.parse_integer(store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject inference_suid = reader.parse_integer(inference_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(store_suid, inference_suid);
            if (cb_query.NIL != inference_datastructures_inference.inference_p(inference)) {
                return inference;
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 2047L)
    public static SubLObject html_princ_with_explanation(final SubLObject text, final SubLObject explanation, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        if (sticky == cb_query.UNPROVIDED) {
            sticky = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL != explanation) {
            if (explanation.isString()) {
                final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover(explanation, caption, width, sticky);
                html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(onmouseover);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ(text);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
                html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
            }
        }
        else {
            html_utilities.html_princ(text);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 2465L)
    public static SubLObject html_princ_strong_with_explanation(final SubLObject text, final SubLObject explanation, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        if (sticky == cb_query.UNPROVIDED) {
            sticky = (SubLObject)cb_query.NIL;
        }
        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
        html_princ_with_explanation(text, explanation, caption, width, sticky);
        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 2816L)
    public static SubLObject cb_princ_with_explanation(final SubLObject text, final SubLObject explanation, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        if (sticky == cb_query.UNPROVIDED) {
            sticky = (SubLObject)cb_query.NIL;
        }
        return html_princ_with_explanation(text, explanation, caption, width, sticky);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 3189L)
    public static SubLObject cb_princ_strong_with_explanation(final SubLObject text, final SubLObject explanation, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        if (sticky == cb_query.UNPROVIDED) {
            sticky = (SubLObject)cb_query.NIL;
        }
        return html_princ_strong_with_explanation(text, explanation, caption, width, sticky);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 3583L)
    public static SubLObject cb_princ_with_target_reference_and_explanation(final SubLObject target, final SubLObject linktext, final SubLObject explanation, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        if (sticky == cb_query.UNPROVIDED) {
            sticky = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (explanation.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover(explanation, caption, width, sticky);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_hash, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(target);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 3979L)
    public static SubLObject cb_submit_input_with_explanation(SubLObject label, SubLObject explanation, SubLObject name, SubLObject script, SubLObject caption, SubLObject width, SubLObject sticky) {
        if (label == cb_query.UNPROVIDED) {
            label = (SubLObject)cb_query.NIL;
        }
        if (explanation == cb_query.UNPROVIDED) {
            explanation = (SubLObject)cb_query.NIL;
        }
        if (name == cb_query.UNPROVIDED) {
            name = (SubLObject)cb_query.NIL;
        }
        if (script == cb_query.UNPROVIDED) {
            script = (SubLObject)cb_query.NIL;
        }
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        if (sticky == cb_query.UNPROVIDED) {
            sticky = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (explanation.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover(explanation, caption, width, sticky);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_submit_input(label, name, script);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 4312L)
    public static SubLObject cb_submit_input_with_explanation_and_inference_doc_more_link(SubLObject label, SubLObject explanation, SubLObject link_specification_string, SubLObject name, SubLObject script, SubLObject caption, SubLObject width) {
        if (label == cb_query.UNPROVIDED) {
            label = (SubLObject)cb_query.NIL;
        }
        if (explanation == cb_query.UNPROVIDED) {
            explanation = (SubLObject)cb_query.NIL;
        }
        if (link_specification_string == cb_query.UNPROVIDED) {
            link_specification_string = (SubLObject)cb_query.NIL;
        }
        if (name == cb_query.UNPROVIDED) {
            name = (SubLObject)cb_query.NIL;
        }
        if (script == cb_query.UNPROVIDED) {
            script = (SubLObject)cb_query.NIL;
        }
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        final SubLObject more_link_string = cb_inference_more_link_string(link_specification_string);
        final SubLObject explanation_with_more_link = Sequences.cconcatenate(explanation, new SubLObject[] { cb_query.$str5$__, more_link_string });
        cb_submit_input_with_explanation(label, explanation_with_more_link, name, script, caption, width, (SubLObject)cb_query.T);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 4821L)
    public static SubLObject cb_princ_with_explanation_and_inference_doc_more_link(final SubLObject text, final SubLObject explanation, final SubLObject link_specification_string, SubLObject caption, SubLObject width) {
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        final SubLObject more_link_string = cb_inference_more_link_string(link_specification_string);
        final SubLObject explanation_with_more_link = Sequences.cconcatenate(explanation, new SubLObject[] { cb_query.$str5$__, more_link_string });
        cb_princ_with_explanation(text, explanation_with_more_link, caption, width, (SubLObject)cb_query.T);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 5476L)
    public static SubLObject cb_princ_strong_with_explanation_and_inference_doc_more_link(final SubLObject text, final SubLObject explanation, final SubLObject link_specification_string, SubLObject caption, SubLObject width) {
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        final SubLObject more_link_string = cb_inference_more_link_string(link_specification_string);
        final SubLObject explanation_with_more_link = Sequences.cconcatenate(explanation, new SubLObject[] { cb_query.$str5$__, more_link_string });
        cb_princ_strong_with_explanation(text, explanation_with_more_link, caption, width, (SubLObject)cb_query.T);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 5897L)
    public static SubLObject cb_princ_with_inference_doc_more_link(final SubLObject text, final SubLObject link_specification_string, SubLObject caption, SubLObject width) {
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        cb_princ_with_explanation_and_inference_doc_more_link(text, (SubLObject)cb_query.$str6$, link_specification_string, caption, width);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 6306L)
    public static SubLObject cb_princ_strong_with_inference_doc_more_link(final SubLObject text, final SubLObject link_specification_string, SubLObject caption, SubLObject width) {
        if (caption == cb_query.UNPROVIDED) {
            caption = (SubLObject)cb_query.NIL;
        }
        if (width == cb_query.UNPROVIDED) {
            width = (SubLObject)cb_query.NIL;
        }
        cb_princ_strong_with_explanation_and_inference_doc_more_link(text, (SubLObject)cb_query.$str6$, link_specification_string, caption, width);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 6553L)
    public static SubLObject cb_frame_link_with_explanation(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        SubLObject url_body = (SubLObject)cb_query.NIL;
        SubLObject link_body = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list7);
        url_body = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list7);
        link_body = current.first();
        current = current.rest();
        final SubLObject target = (SubLObject)(current.isCons() ? current.first() : cb_query.$kw8$MAIN);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list7);
        current = current.rest();
        final SubLObject explanation = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list7);
        current = current.rest();
        final SubLObject caption = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list7);
        current = current.rest();
        final SubLObject width = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list7);
        current = current.rest();
        final SubLObject sticky = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list7);
        current = current.rest();
        if (cb_query.NIL == current) {
            return (SubLObject)ConsesLow.list((SubLObject)cb_query.$sym9$FRAME_LINK_HOVEROVER, url_body, link_body, target, explanation, caption, width, sticky);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list7);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 6845L)
    public static SubLObject cb_link_inference_doc(final SubLObject linktext, final SubLObject link_specification_string) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL != cb_parameters.$cb_include_inference_helpP$.getDynamicValue(thread)) {
            final SubLObject target = (SubLObject)((cb_query.NIL != cb_parameters.$cb_separate_doc_frame$.getDynamicValue(thread)) ? cb_query.$kw10$DOC : cb_query.$kw11$SELF);
            final SubLObject frame_name = cb_utilities.cb_frame_name(target);
            final SubLObject full_pathname_and_anchor = inference_link_specification_string_to_full_pathname_and_anchor(link_specification_string);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_princ(full_pathname_and_anchor);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        else {
            html_utilities.html_princ(linktext);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 7486L)
    public static SubLObject cb_show_inference_answer_counts(final SubLObject answer_count, final SubLObject new_answer_count, final SubLObject new_justification_count) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (answer_count.isZero()) {
            html_utilities.html_princ((SubLObject)cb_query.$str14$None);
        }
        else {
            if (!answer_count.numE(new_answer_count)) {
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str15$_D_total, answer_count);
            }
            if (!new_answer_count.isZero()) {
                if (!answer_count.numE(new_answer_count)) {
                    html_utilities.html_princ((SubLObject)cb_query.$str16$__);
                }
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str17$_D_new, new_answer_count);
            }
            if (!new_justification_count.numE(new_answer_count)) {
                html_utilities.html_princ((SubLObject)cb_query.$str16$__);
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str18$_D_new_justification_P, new_justification_count, new_justification_count);
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 8118L)
    public static SubLObject cb_query_show_inference_status(final SubLObject inference, SubLObject explainP) {
        if (explainP == cb_query.UNPROVIDED) {
            explainP = (SubLObject)cb_query.T;
        }
        final SubLObject status = inference_datastructures_inference.inference_status(inference);
        final SubLObject suspend_status = inference_datastructures_inference.inference_suspend_status(inference);
        cb_query_browser.cb_show_inference_status(status);
        if (cb_query.NIL != explainP && (status == cb_query.$kw19$TAUTOLOGY || status == cb_query.$kw20$CONTRADICTION) && cb_query.NIL != suspend_status) {
            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
            cb_utilities.cb_link((SubLObject)cb_query.$kw21$SUSPENDED_INITIAL_JUSTIFICATION, inference, (SubLObject)cb_query.$str22$_Explain_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (status == cb_query.$kw23$SUSPENDED) {
            final SubLObject suspend_status_$1 = inference_datastructures_inference.inference_suspend_status(inference);
            html_utilities.html_princ((SubLObject)cb_query.$str16$__);
            cb_query_browser.cb_show_inference_suspend_status(suspend_status_$1);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 8738L)
    public static SubLObject cb_inference_more_link_string(final SubLObject link_specification_string) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject more_link = (SubLObject)cb_query.NIL;
        SubLObject stream = (SubLObject)cb_query.NIL;
        try {
            stream = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_0 = html_macros.$html_stream$.currentBinding(thread);
            try {
                html_macros.$html_stream$.bind(stream, thread);
                cb_utilities.cb_link((SubLObject)cb_query.$kw12$INFERENCE_DOC, (SubLObject)cb_query.$str24$More___, link_specification_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            finally {
                html_macros.$html_stream$.rebind(_prev_bind_0, thread);
            }
            more_link = streams_high.get_output_stream_string(stream);
        }
        finally {
            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cb_query.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(stream, (SubLObject)cb_query.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        return more_link;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 8997L)
    public static SubLObject cb_inference_help_directory() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return Sequences.cconcatenate(format_nil.format_nil_a_no_copy(system_parameters.$cyc_documentation_url$.getDynamicValue(thread)), (SubLObject)cb_query.$str25$help_inference_);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 9306L)
    public static SubLObject inference_link_specification_string_to_full_pathname_and_anchor(final SubLObject link_specification_string) {
        return Sequences.cconcatenate(cb_inference_help_directory(), new SubLObject[] { cb_query.$cb_inference_help_filename$.getGlobalValue(), cb_query.$str27$_html_, link_specification_string });
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 9930L)
    public static SubLObject inference_parameter_p(final SubLObject v_object) {
        return list_utilities.sublisp_boolean(dictionary.dictionary_lookup(cb_query.$inference_parameter_table$.getGlobalValue(), v_object, (SubLObject)cb_query.NIL));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10058L)
    public static SubLObject inference_parameter_fancy_name(final SubLObject v_object) {
        return conses_high.getf(dictionary.dictionary_lookup(cb_query.$inference_parameter_table$.getGlobalValue(), v_object, (SubLObject)cb_query.NIL), (SubLObject)cb_query.$kw29$FANCY_NAME, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10204L)
    public static SubLObject inference_parameter_description(final SubLObject v_object) {
        return conses_high.getf(dictionary.dictionary_lookup(cb_query.$inference_parameter_table$.getGlobalValue(), v_object, (SubLObject)cb_query.NIL), (SubLObject)cb_query.$kw30$DESCRIPTION, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10352L)
    public static SubLObject inference_parameter_settings(final SubLObject v_object) {
        return conses_high.getf(dictionary.dictionary_lookup(cb_query.$inference_parameter_table$.getGlobalValue(), v_object, (SubLObject)cb_query.NIL), (SubLObject)cb_query.$kw31$SETTINGS, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10494L)
    public static SubLObject inference_parameter_scaling_factor(final SubLObject v_object) {
        return conses_high.getf(dictionary.dictionary_lookup(cb_query.$inference_parameter_table$.getGlobalValue(), v_object, (SubLObject)cb_query.NIL), (SubLObject)cb_query.$kw32$SCALING_FACTOR, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10648L)
    public static SubLObject inference_parameter_round_on_inputP(final SubLObject v_object) {
        return conses_high.getf(dictionary.dictionary_lookup(cb_query.$inference_parameter_table$.getGlobalValue(), v_object, (SubLObject)cb_query.NIL), (SubLObject)cb_query.$kw33$ROUND_ON_INPUT_, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 10804L)
    public static SubLObject possibly_scale_value_on_input(SubLObject value, final SubLObject property) {
        value = (value.isNumber() ? Numbers.multiply(value, inference_parameter_scaling_factor(property)) : value);
        if (value.isNumber() && cb_query.NIL != inference_parameter_round_on_inputP(property)) {
            value = Numbers.round(value, (SubLObject)cb_query.UNPROVIDED);
        }
        return value;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 11392L)
    public static SubLObject possibly_scale_value_for_output(final SubLObject value, final SubLObject property) {
        return value.isNumber() ? Numbers.divide(value, inference_parameter_scaling_factor(property)) : value;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 11711L)
    public static SubLObject declare_inference_parameter(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        SubLObject parameter = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list34);
        parameter = current.first();
        current = current.rest();
        SubLObject allow_other_keys_p = (SubLObject)cb_query.NIL;
        SubLObject rest = current;
        SubLObject bad = (SubLObject)cb_query.NIL;
        SubLObject current_$2 = (SubLObject)cb_query.NIL;
        while (cb_query.NIL != rest) {
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)cb_query.$list34);
            current_$2 = rest.first();
            rest = rest.rest();
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)cb_query.$list34);
            if (cb_query.NIL == conses_high.member(current_$2, (SubLObject)cb_query.$list35, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED)) {
                bad = (SubLObject)cb_query.T;
            }
            if (current_$2 == cb_query.$kw36$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        }
        if (cb_query.NIL != bad && cb_query.NIL == allow_other_keys_p) {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list34);
        }
        final SubLObject fancy_name_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw29$FANCY_NAME, current);
        final SubLObject fancy_name = (SubLObject)((cb_query.NIL != fancy_name_tail) ? conses_high.cadr(fancy_name_tail) : cb_query.NIL);
        final SubLObject description_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw30$DESCRIPTION, current);
        final SubLObject description = (SubLObject)((cb_query.NIL != description_tail) ? conses_high.cadr(description_tail) : cb_query.NIL);
        final SubLObject settings_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw31$SETTINGS, current);
        final SubLObject settings = (SubLObject)((cb_query.NIL != settings_tail) ? conses_high.cadr(settings_tail) : cb_query.NIL);
        final SubLObject scaling_factor_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw32$SCALING_FACTOR, current);
        final SubLObject scaling_factor = (SubLObject)((cb_query.NIL != scaling_factor_tail) ? conses_high.cadr(scaling_factor_tail) : cb_query.NIL);
        final SubLObject round_on_inputP_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw33$ROUND_ON_INPUT_, current);
        final SubLObject round_on_inputP = (SubLObject)((cb_query.NIL != round_on_inputP_tail) ? conses_high.cadr(round_on_inputP_tail) : cb_query.NIL);
        return (SubLObject)ConsesLow.list((SubLObject)cb_query.$sym37$DECLARE_INFERENCE_PARAMETER_INTERNAL, parameter, fancy_name, description, (SubLObject)ConsesLow.list((SubLObject)cb_query.$sym38$QUOTE, settings), scaling_factor, round_on_inputP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 12918L)
    public static SubLObject declare_inference_parameter_internal(final SubLObject parameter, SubLObject fancy_name, SubLObject description, SubLObject settings, SubLObject scaling_factor, final SubLObject round_on_inputP) {
        assert cb_query.NIL != Types.keywordp(parameter) : parameter;
        if (!fancy_name.isString()) {
            fancy_name = print_high.prin1_to_string(parameter);
        }
        if (!description.isString()) {
            description = (SubLObject)cb_query.$str6$;
        }
        if (!settings.isCons()) {
            settings = (SubLObject)cb_query.$list42;
        }
        if (!scaling_factor.isNumber()) {
            scaling_factor = (SubLObject)cb_query.ONE_INTEGER;
        }
        final SubLObject data = (SubLObject)ConsesLow.list(new SubLObject[] { cb_query.$kw29$FANCY_NAME, fancy_name, cb_query.$kw30$DESCRIPTION, description, cb_query.$kw31$SETTINGS, settings, cb_query.$kw32$SCALING_FACTOR, scaling_factor, cb_query.$kw33$ROUND_ON_INPUT_, round_on_inputP });
        dictionary.dictionary_enter(cb_query.$inference_parameter_table$.getGlobalValue(), parameter, data);
        return parameter;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 13739L)
    public static SubLObject inference_parameter_value_matches_setting(final SubLObject property, final SubLObject value, final SubLObject setting) {
        SubLObject method = (SubLObject)cb_query.NIL;
        SubLObject data = (SubLObject)cb_query.NIL;
        SubLObject explanation = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(setting, setting, (SubLObject)cb_query.$list43);
        method = setting.first();
        SubLObject current = setting.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, setting, (SubLObject)cb_query.$list43);
        data = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, setting, (SubLObject)cb_query.$list43);
        explanation = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(setting, (SubLObject)cb_query.$list43);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject pcase_var = method;
        if (pcase_var.eql((SubLObject)cb_query.$kw44$VALUE)) {
            return list_utilities.equalE(data, value);
        }
        if (pcase_var.eql((SubLObject)cb_query.$kw45$ENTRY)) {
            return Functions.funcall(data, value);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 28807L)
    public static SubLObject cb_query_new_followup(final SubLObject previous_inference, final SubLObject sentence, final SubLObject mt, final SubLObject non_explanatory_sentence, SubLObject v_inference_parameters) {
        final SubLObject problem_store = inference_datastructures_inference.inference_problem_store(previous_inference);
        v_inference_parameters = conses_high.putf(conses_high.copy_list(v_inference_parameters), (SubLObject)cb_query.$kw190$PROBLEM_STORE, problem_store);
        return cb_query_new(sentence, mt, non_explanatory_sentence, v_inference_parameters);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 29334L)
    public static SubLObject cb_query_new(final SubLObject sentence, final SubLObject mt, final SubLObject non_explanatory_sentence, SubLObject v_inference_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject static_properties = inference_datastructures_enumerated_types.extract_query_static_or_meta_properties(v_inference_parameters);
        if (cb_query.NIL != non_explanatory_sentence) {
            static_properties = conses_high.putf(conses_high.copy_list(static_properties), (SubLObject)cb_query.$kw191$NON_EXPLANATORY_SENTENCE, non_explanatory_sentence);
            v_inference_parameters = conses_high.putf(conses_high.copy_list(v_inference_parameters), (SubLObject)cb_query.$kw191$NON_EXPLANATORY_SENTENCE, non_explanatory_sentence);
        }
        thread.resetMultipleValues();
        final SubLObject right_sentence = czer_utilities.unwrap_if_ist(sentence, mt, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject right_mt = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (cb_query.NIL != inference_strategist.inference_conditional_sentence_p(right_sentence)) {
            static_properties = conses_high.putf(conses_high.copy_list(static_properties), (SubLObject)cb_query.$kw192$CONDITIONAL_SENTENCE_, (SubLObject)cb_query.T);
            v_inference_parameters = conses_high.putf(conses_high.copy_list(v_inference_parameters), (SubLObject)cb_query.$kw192$CONDITIONAL_SENTENCE_, (SubLObject)cb_query.T);
        }
        cb_events.cb_post_query_event(right_sentence, right_mt, v_inference_parameters);
        final SubLObject new_inference = inference_kernel.new_continuable_inference(right_sentence, right_mt, static_properties);
        if (cb_query.NIL != inference_datastructures_inference.continuable_inference_p(new_inference)) {
            return cb_query_continue(new_inference, v_inference_parameters);
        }
        return new_inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 30599L)
    public static SubLObject cb_query_continue(final SubLObject previous_inference, final SubLObject v_inference_parameters) {
        final SubLObject dynamic_properties = inference_datastructures_enumerated_types.extract_query_dynamic_properties(v_inference_parameters);
        final SubLObject v_special_variable_state = new_cb_query_special_variable_state();
        final SubLObject semaphore = Semaphores.new_semaphore((SubLObject)cb_query.$str193$CB_QUERY, (SubLObject)cb_query.ZERO_INTEGER);
        subl_promotions.make_process_with_args((SubLObject)cb_query.$str194$CB_Query, (SubLObject)cb_query.$sym195$CB_QUERY_CONTINUE_THREAD, (SubLObject)ConsesLow.list(previous_inference, dynamic_properties, v_special_variable_state, semaphore));
        Semaphores.semaphore_wait(semaphore);
        return previous_inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 31104L)
    public static SubLObject new_cb_query_special_variable_state() {
        return special_variable_state.new_special_variable_state(utilities_macros.$html_state_variables$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 31221L)
    public static SubLObject cb_query_continue_thread(final SubLObject inference, final SubLObject query_dynamic_properties, final SubLObject v_special_variable_state, final SubLObject semaphore) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = Packages.$package$.currentBinding(thread);
        final SubLObject _prev_bind_2 = print_high.$print_readably$.currentBinding(thread);
        final SubLObject _prev_bind_3 = reader.$read_eval$.currentBinding(thread);
        try {
            Packages.$package$.bind(Packages.find_package((SubLObject)cb_query.$str196$CYC), thread);
            print_high.$print_readably$.bind((SubLObject)cb_query.NIL, thread);
            reader.$read_eval$.bind((SubLObject)cb_query.NIL, thread);
            final SubLObject cprogv_var = special_variable_state.with_special_variable_state_variables(v_special_variable_state);
            final ArrayList old_values = Dynamic.extract_dynamic_values(cprogv_var);
            try {
                Dynamic.bind_dynamic_vars(cprogv_var, special_variable_state.with_special_variable_state_values(v_special_variable_state));
                enforceType(v_special_variable_state, cb_query.$sym197$SPECIAL_VARIABLE_STATE_P);
                Semaphores.semaphore_signal(semaphore);
                if (cb_query.NIL != inference_datastructures_inference.valid_inference_p(inference)) {
                    try {
                        final SubLObject query_form = (SubLObject)ConsesLow.list((SubLObject)cb_query.$sym198$CONTINUE_INFERENCE, inference, list_utilities.quotify(query_dynamic_properties));
                        process_utilities.current_process_note_form(query_form);
                        inference_kernel.continue_inference(inference, query_dynamic_properties);
                    }
                    finally {
                        final SubLObject _prev_bind_0_$3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cb_query.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            process_utilities.current_process_clear_form();
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$3, thread);
                        }
                    }
                }
            }
            finally {
                Dynamic.rebind_dynamic_vars(cprogv_var, old_values);
            }
        }
        finally {
            reader.$read_eval$.rebind(_prev_bind_3, thread);
            print_high.$print_readably$.rebind(_prev_bind_2, thread);
            Packages.$package$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32017L)
    public static SubLObject cb_inferences() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        cb_act_forget_invalid_inferences();
        return cb_query.$cb_inferences$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32112L)
    public static SubLObject do_cb_inferences(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list200);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject inference = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list200);
        inference = current.first();
        current = current.rest();
        if (cb_query.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.list((SubLObject)cb_query.$sym201$DO_LIST, reader.bq_cons(inference, (SubLObject)cb_query.$list202), (SubLObject)ConsesLow.listS((SubLObject)cb_query.$sym203$PWHEN, inference, ConsesLow.append(body, (SubLObject)cb_query.NIL)));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list200);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32259L)
    public static SubLObject with_cb_inferences(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list204);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject focal_inference = (SubLObject)cb_query.NIL;
        SubLObject other_inferences = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list204);
        focal_inference = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list204);
        other_inferences = current.first();
        current = current.rest();
        if (cb_query.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.listS((SubLObject)cb_query.$sym205$CDESTRUCTURING_BIND, (SubLObject)ConsesLow.list((SubLObject)cb_query.$sym206$_OPTIONAL, focal_inference, (SubLObject)cb_query.$sym207$_REST, other_inferences), (SubLObject)cb_query.$list208, ConsesLow.append(body, (SubLObject)cb_query.NIL));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list204);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32456L)
    public static SubLObject cb_focal_inference() {
        SubLObject current;
        final SubLObject datum = current = cb_inferences();
        final SubLObject focal_inference = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list209);
        final SubLObject other_inferences;
        current = (other_inferences = current.rest());
        return focal_inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32610L)
    public static SubLObject cb_note_focal_inference(final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        cb_act_forget_inference((SubLObject)cb_query.NIL);
        cb_act_forget_inference(inference);
        cb_query.$cb_inferences$.setDynamicValue((SubLObject)ConsesLow.cons(inference, cb_query.$cb_inferences$.getDynamicValue(thread)), thread);
        cb_destroy_all_inferences_but_last_n();
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32823L)
    public static SubLObject cb_note_no_focal_inference() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        cb_act_forget_inference((SubLObject)cb_query.NIL);
        cb_query.$cb_inferences$.setDynamicValue((SubLObject)ConsesLow.cons((SubLObject)cb_query.NIL, cb_query.$cb_inferences$.getDynamicValue(thread)), thread);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 32945L)
    public static SubLObject cb_steal_inferences_by_problem_store_ids(final SubLObject ids) {
        SubLObject count = (SubLObject)cb_query.ZERO_INTEGER;
        SubLObject cdolist_list_var = ids;
        SubLObject id = (SubLObject)cb_query.NIL;
        id = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(id, (SubLObject)cb_query.ZERO_INTEGER);
            if (cb_query.NIL != inference_datastructures_inference.valid_inference_p(inference)) {
                count = Numbers.add(count, (SubLObject)cb_query.ONE_INTEGER);
                cb_note_focal_inference(inference);
            }
            cdolist_list_var = cdolist_list_var.rest();
            id = cdolist_list_var.first();
        }
        return count;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 33332L)
    public static SubLObject cb_act_forget_inference(final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        cb_query.$cb_inferences$.setDynamicValue(Sequences.delete(inference, cb_query.$cb_inferences$.getDynamicValue(thread), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
        return (SubLObject)cb_query.T;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 33457L)
    public static SubLObject cb_act_forget_invalid_inferences() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        cb_query.$cb_inferences$.setDynamicValue(list_utilities.delete_if_not(Symbols.symbol_function((SubLObject)cb_query.$sym210$VALID_INFERENCE_P), cb_query.$cb_inferences$.getDynamicValue(thread), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 33601L)
    public static SubLObject cb_act_destroy_inference(final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        cb_kb_query.kbq_deregister_query_spec_of_inference(inference);
        cb_kct_test.kct_deregister_test_spec_of_inference(inference);
        SubLObject ignore_errors_tag = (SubLObject)cb_query.NIL;
        try {
            thread.throwStack.push(cb_query.$kw211$IGNORE_ERRORS_TARGET);
            final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cb_query.$sym212$IGNORE_ERRORS_HANDLER), thread);
                try {
                    try {
                        if (cb_query.NIL != inference_datastructures_inference.valid_inference_p(inference)) {
                            final SubLObject store = inference_datastructures_inference.inference_problem_store(inference);
                            if (cb_query.ONE_INTEGER.numE(inference_datastructures_problem_store.problem_store_non_recursive_inference_count(store))) {
                                inference_datastructures_problem_store.destroy_problem_store(store);
                            }
                            else {
                                inference_datastructures_inference.destroy_inference(inference);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cb_query.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            cb_act_forget_inference(inference);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$4, thread);
                        }
                    }
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)cb_query.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)cb_query.$kw211$IGNORE_ERRORS_TARGET);
        }
        finally {
            thread.throwStack.pop();
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 34086L)
    public static SubLObject cb_destroy_all_inferences_but_last_n() {
        SubLObject current;
        final SubLObject datum = current = cb_inferences();
        final SubLObject focal_inference = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list209);
        final SubLObject other_inferences;
        current = (other_inferences = current.rest());
        cb_destroy_all_inferences_but_last_n_int(other_inferences);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 34310L)
    public static SubLObject cb_destroy_all_inferences_but_last_n_int(final SubLObject other_inferences) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL != number_utilities.positive_infinity_p(cb_parameters.$cb_destroy_all_inferences_but_last_n$.getDynamicValue(thread))) {
            return (SubLObject)cb_query.NIL;
        }
        if (cb_query.NIL != list_utilities.lengthL(other_inferences, cb_parameters.$cb_destroy_all_inferences_but_last_n$.getDynamicValue(thread), (SubLObject)cb_query.UNPROVIDED)) {
            return (SubLObject)cb_query.NIL;
        }
        SubLObject list_var = (SubLObject)cb_query.NIL;
        SubLObject other_inference = (SubLObject)cb_query.NIL;
        SubLObject number = (SubLObject)cb_query.NIL;
        list_var = other_inferences;
        other_inference = list_var.first();
        for (number = (SubLObject)cb_query.ZERO_INTEGER; cb_query.NIL != list_var; list_var = list_var.rest(), other_inference = list_var.first(), number = Numbers.add((SubLObject)cb_query.ONE_INTEGER, number)) {
            if (number.numGE(cb_parameters.$cb_destroy_all_inferences_but_last_n$.getDynamicValue(thread))) {
                cb_act_destroy_inference(other_inference);
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 34754L)
    public static SubLObject cb_act_reinforce_inference(final SubLObject inference) {
        if (cb_query.NIL != inference_datastructures_inference.valid_inference_p(inference)) {
            inference_analysis.reinforce_inference_transformation_rules(inference, (SubLObject)cb_query.$int213$1000);
            return inference;
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 34933L)
    public static SubLObject cb_query(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 35212L)
    public static SubLObject cb_link_query(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str218$Query;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw8$MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str219$cb_query);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 35611L)
    public static SubLObject cb_query_internal(SubLObject rendering_properties) {
        if (rendering_properties == cb_query.UNPROVIDED) {
            rendering_properties = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        cb_act_forget_invalid_inferences();
        SubLObject current;
        final SubLObject datum = current = cb_inferences();
        final SubLObject focal_inference = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list209);
        final SubLObject other_inferences;
        current = (other_inferences = current.rest());
        final SubLObject current_$6;
        final SubLObject datum_$5 = current_$6 = rendering_properties;
        final SubLObject title_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw222$TITLE, current_$6);
        final SubLObject title = (SubLObject)((cb_query.NIL != title_tail) ? conses_high.cadr(title_tail) : cb_query.$str223$Query_Tool);
        final SubLObject refresh_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw224$REFRESH, current_$6);
        final SubLObject refresh = (SubLObject)((cb_query.NIL != refresh_tail) ? conses_high.cadr(refresh_tail) : cb_query.NIL);
        final SubLObject sentence_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw225$SENTENCE, current_$6);
        final SubLObject sentence = (SubLObject)((cb_query.NIL != sentence_tail) ? conses_high.cadr(sentence_tail) : cb_query.$kw226$UNSPECIFIED);
        final SubLObject mt_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw227$MT, current_$6);
        final SubLObject mt = (SubLObject)((cb_query.NIL != mt_tail) ? conses_high.cadr(mt_tail) : cb_query.$kw226$UNSPECIFIED);
        final SubLObject non_explanatory_sentence_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw191$NON_EXPLANATORY_SENTENCE, current_$6);
        final SubLObject non_explanatory_sentence = (SubLObject)((cb_query.NIL != non_explanatory_sentence_tail) ? conses_high.cadr(non_explanatory_sentence_tail) : cb_query.$kw226$UNSPECIFIED);
        final SubLObject properties_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw228$PROPERTIES, current_$6);
        final SubLObject v_properties = (SubLObject)((cb_query.NIL != properties_tail) ? conses_high.cadr(properties_tail) : cb_query.$kw226$UNSPECIFIED);
        final SubLObject query_spec_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw229$QUERY_SPEC, current_$6);
        final SubLObject query_spec = (SubLObject)((cb_query.NIL != query_spec_tail) ? conses_high.cadr(query_spec_tail) : cb_query.$kw226$UNSPECIFIED);
        final SubLObject test_spec_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw230$TEST_SPEC, current_$6);
        final SubLObject test_spec = (SubLObject)((cb_query.NIL != test_spec_tail) ? conses_high.cadr(test_spec_tail) : cb_query.$kw226$UNSPECIFIED);
        final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
            html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$7 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                html_utilities.html_princ(title);
                html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                if (cb_query.NIL != refresh) {
                    html_utilities.html_refresh(refresh, (SubLObject)cb_query.UNPROVIDED);
                }
                html_complete.html_complete_script();
                dhtml_macros.dhtml_with_toggle_visibility_support();
                html_script_utilities.html_set_all_radio_buttons_script();
                dhtml_macros.html_basic_cb_scripts();
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$8 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str235$yui_skin_sam);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$9 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.NIL);
                        html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_form_method$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str236$post);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        if (cb_query.NIL != frame_name_var) {
                            html_utilities.html_markup(html_macros.$html_form_target$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(frame_name_var);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        }
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$10 = html_macros.$html_safe_print$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_macros.$within_html_form$.bind((SubLObject)cb_query.T, thread);
                            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                            html_utilities.html_hidden_input((SubLObject)cb_query.$str237$cb_handle_query, (SubLObject)cb_query.NIL, (SubLObject)cb_query.UNPROVIDED);
                            cb_show_query_header_top(title);
                            html_script_utilities.cb_hoverover_page_init();
                            cb_show_query_header_links(focal_inference, other_inferences);
                            if (cb_query.NIL != other_inferences) {
                                html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                cb_query_other_inferences_section(focal_inference, other_inferences);
                            }
                            if (cb_query.NIL != focal_inference) {
                                html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                cb_query_focal_inference_section(sentence, refresh, focal_inference);
                            }
                            html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            cb_query_new_inference_section(sentence, mt, non_explanatory_sentence, focal_inference, other_inferences, query_spec, test_spec);
                            html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            cb_query_parameters_section(focal_inference, v_properties);
                            if (cb_query.NIL != cb_query_proof_checker_section_relevantP(focal_inference, v_properties)) {
                                html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                cb_query_proof_checker_setup_section(focal_inference, v_properties);
                            }
                            html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                        }
                        finally {
                            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                            html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$10, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$9, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$8, thread);
                }
                dhtml_macros.dhtml_set_visibility((SubLObject)cb_query.$str238$non_explanatory, (SubLObject)cb_query.$kw239$VISIBLE, (SubLObject)cb_query.$kw240$PARAGRAPH);
                final SubLObject sentence_$11 = cb_query_non_explanatory_sentence(non_explanatory_sentence, focal_inference);
                final SubLObject initial_visibility = (SubLObject)((cb_query.NIL != sentence_$11 && cb_query.$kw226$UNSPECIFIED != sentence_$11) ? cb_query.$kw239$VISIBLE : cb_query.$kw241$INVISIBLE);
                dhtml_macros.dhtml_set_visibility((SubLObject)cb_query.$str238$non_explanatory, initial_visibility, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            }
            finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$7, thread);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 37753L)
    public static SubLObject cb_show_query_header_top(final SubLObject title) {
        html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
        html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_princ(title);
        html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
        html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_help_preamble((SubLObject)cb_query.$kw242$CB_QUERY, (SubLObject)cb_query.NIL, (SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw216$QUERY, (SubLObject)cb_query.$str244$_Refresh_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 37983L)
    public static SubLObject cb_show_query_header_links(final SubLObject focal_inference, final SubLObject other_inferences) {
        if (cb_query.NIL != focal_inference || cb_query.NIL != other_inferences || cb_query.NIL != cb_assertion_editor.cb_proof_checker_rules()) {
            html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
            cb_princ_strong_with_explanation((SubLObject)cb_query.$str245$Go_to_section__, (SubLObject)cb_query.$str246$Shortcut_links_to_sections_that_a, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != focal_inference && cb_query.NIL != other_inferences) {
                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                cb_princ_with_target_reference_and_explanation((SubLObject)cb_query.$str247$focal_inference_section, (SubLObject)cb_query.$str248$_Focal_Inference_, (SubLObject)cb_query.$str249$The_inference_you_are_currently_e, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            if (cb_query.NIL != focal_inference || cb_query.NIL != other_inferences) {
                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                cb_princ_with_target_reference_and_explanation((SubLObject)cb_query.$str250$new_inference_section, (SubLObject)cb_query.$str251$_New_Inference_, (SubLObject)cb_query.$str252$Start_a_new_inference_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            if (cb_query.NIL != focal_inference || cb_query.NIL != other_inferences) {
                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                cb_princ_with_target_reference_and_explanation((SubLObject)cb_query.$str253$parameters_section, (SubLObject)cb_query.$str254$_Inference_Parameters_, (SubLObject)cb_query.$str255$Adjust_the_inference_parameters_a, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            if (cb_query.NIL != cb_assertion_editor.cb_proof_checker_rules()) {
                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                cb_princ_with_target_reference_and_explanation((SubLObject)cb_query.$str256$proof_checker_section, (SubLObject)cb_query.$str257$_Proof_Checker_Setup_, (SubLObject)cb_query.$str258$Specify_an_exact_set_of_rules__an, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 39334L)
    public static SubLObject cb_query_inference_sharedP(final SubLObject inference) {
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 39523L)
    public static SubLObject cb_query_any_inferences_sharedP(final SubLObject inferences) {
        SubLObject cdolist_list_var = inferences;
        SubLObject inference = (SubLObject)cb_query.NIL;
        inference = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            if (cb_query.NIL != cb_query_inference_sharedP(inference)) {
                return (SubLObject)cb_query.T;
            }
            cdolist_list_var = cdolist_list_var.rest();
            inference = cdolist_list_var.first();
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 39686L)
    public static SubLObject cb_query_other_inferences_section(final SubLObject focal_inference, final SubLObject other_inferences) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str259$other_inferences, (SubLObject)cb_query.$str260$Show, (SubLObject)cb_query.$str261$Hide);
        final SubLObject size_val = (SubLObject)cb_query.FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (cb_query.NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            cb_princ_strong_with_explanation((SubLObject)cb_query.$str262$Other_Inferences, (SubLObject)cb_query.$str263$Examine__continue__or_destroy_pas, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str264$__A_total_, Sequences.length(other_inferences));
        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
        final SubLObject initial_visibility = (SubLObject)((cb_query.NIL != focal_inference) ? cb_query.$kw241$INVISIBLE : cb_query.$kw239$VISIBLE);
        dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str259$other_inferences, initial_visibility, (SubLObject)cb_query.$kw240$PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str259$other_inferences);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.ONE_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$12 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$13 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$14 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str267$Actions);
                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
                        cb_utilities.cb_link((SubLObject)cb_query.$kw268$DESTROY_ALL_OTHER_INFERENCES, (SubLObject)cb_query.$str269$_Destroy_All_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$14, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    SubLObject cdolist_list_var = other_inferences;
                    SubLObject inference = (SubLObject)cb_query.NIL;
                    inference = cdolist_list_var.first();
                    while (cb_query.NIL != cdolist_list_var) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$15 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            cb_utilities.cb_link((SubLObject)cb_query.$kw270$DEBUG_INFERENCE, inference, (SubLObject)cb_query.$str271$_Debug_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                            cb_utilities.cb_link((SubLObject)cb_query.$kw272$INFERENCE, inference, (SubLObject)cb_query.NIL, (SubLObject)cb_query.$str273$_Examine_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                            cb_utilities.cb_link((SubLObject)cb_query.$kw274$FOCUS_INFERENCE, inference, (SubLObject)cb_query.$str275$_Focus_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                            cb_utilities.cb_link((SubLObject)cb_query.$kw276$DESTROY_INFERENCE, inference, (SubLObject)cb_query.$str277$_Destroy_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$15, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cdolist_list_var = cdolist_list_var.rest();
                        inference = cdolist_list_var.first();
                    }
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$13, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$16 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$17 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str218$Query);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$17, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    SubLObject cdolist_list_var = other_inferences;
                    SubLObject inference = (SubLObject)cb_query.NIL;
                    inference = cdolist_list_var.first();
                    while (cb_query.NIL != cdolist_list_var) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$18 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            cb_query_browser.cb_show_inference_el_query(inference, (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$18, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cdolist_list_var = cdolist_list_var.rest();
                        inference = cdolist_list_var.first();
                    }
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$16, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$19 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$20 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str278$Status);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$20, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    SubLObject cdolist_list_var = other_inferences;
                    SubLObject inference = (SubLObject)cb_query.NIL;
                    inference = cdolist_list_var.first();
                    while (cb_query.NIL != cdolist_list_var) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$21 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            cb_query_show_inference_status(inference, (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$21, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cdolist_list_var = cdolist_list_var.rest();
                        inference = cdolist_list_var.first();
                    }
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$19, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$22 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$23 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str279$Answers);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$23, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    SubLObject cdolist_list_var = other_inferences;
                    SubLObject inference = (SubLObject)cb_query.NIL;
                    inference = cdolist_list_var.first();
                    while (cb_query.NIL != cdolist_list_var) {
                        final SubLObject answer_count = inference_datastructures_inference.inference_answer_count(inference);
                        final SubLObject new_answer_count = inference_datastructures_inference.inference_new_answer_count(inference);
                        final SubLObject new_justification_count = inference_datastructures_inference.inference_new_justification_count(inference);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$24 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            cb_show_inference_answer_counts(answer_count, new_answer_count, new_justification_count);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$24, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        cdolist_list_var = cdolist_list_var.rest();
                        inference = cdolist_list_var.first();
                    }
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$22, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$12, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 42461L)
    public static SubLObject cb_query_focal_inference_section(final SubLObject sentence, final SubLObject refreshP, final SubLObject focal_inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition((SubLObject)cb_query.$str247$focal_inference_section);
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(focal_inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(focal_inference);
        html_utilities.html_hidden_input((SubLObject)cb_query.$str280$focal_problem_store, store_id, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_hidden_input((SubLObject)cb_query.$str281$focal_inference, inference_id, (SubLObject)cb_query.UNPROVIDED);
        dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str281$focal_inference, (SubLObject)cb_query.$str260$Show, (SubLObject)cb_query.$str261$Hide);
        final SubLObject size_val = (SubLObject)cb_query.FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (cb_query.NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            cb_princ_strong_with_explanation((SubLObject)cb_query.$str282$Focal_Inference, (SubLObject)cb_query.$str249$The_inference_you_are_currently_e, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
        html_utilities.html_princ_strong((SubLObject)cb_query.$str283$Actions__);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw270$DEBUG_INFERENCE, focal_inference, (SubLObject)cb_query.$str271$_Debug_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw272$INFERENCE, focal_inference, (SubLObject)cb_query.NIL, (SubLObject)cb_query.$str273$_Examine_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw284$MONITOR_INFERENCE, focal_inference, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != inference_reinforcement_applicableP(focal_inference)) {
            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
            cb_utilities.cb_link((SubLObject)cb_query.$kw285$REINFORCE_INFERENCE, focal_inference, (SubLObject)cb_query.$str286$_Reinforce_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw287$DEFOCUS_INFERENCE, focal_inference, (SubLObject)cb_query.$str288$_Defocus_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw276$DESTROY_INFERENCE, focal_inference, (SubLObject)cb_query.$str277$_Destroy_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw289$TEMPLATE_OE_INFERENCE, focal_inference, (SubLObject)cb_query.$str290$_Template_OE_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw291$CB_OWL_EXPORT_INFERENCE_ANSWERS, focal_inference, (SubLObject)cb_query.$str292$_OWL_Export_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw293$KBQ_SAVE, focal_inference, (SubLObject)cb_query.$str294$_Save_As_Query_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw295$KCT_SAVE, focal_inference, (SubLObject)cb_query.$str296$_Save_As_Test_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw297$INFERENCE_TO_SUBL_QUERY, focal_inference, (SubLObject)cb_query.$str298$_SubL_Query_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw299$INFERENCE_GRAPH, focal_inference, (SubLObject)cb_query.$str300$_Query_Graph_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject initial_visibility = (SubLObject)((cb_query.$kw226$UNSPECIFIED == sentence) ? cb_query.$kw239$VISIBLE : cb_query.$kw241$INVISIBLE);
        dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str281$focal_inference, initial_visibility, (SubLObject)cb_query.$kw240$PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str281$focal_inference);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            cb_query_browser.cb_show_inference_el_query(focal_inference, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
            cb_show_focal_inference_progress_section(focal_inference, refreshP);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 45110L)
    public static SubLObject cb_query_new_inference_section(final SubLObject sentence, final SubLObject mt, final SubLObject non_explanatory_sentence, final SubLObject focal_inference, final SubLObject other_inferences, SubLObject query_spec, SubLObject test_spec) {
        if (query_spec == cb_query.UNPROVIDED) {
            query_spec = (SubLObject)cb_query.NIL;
        }
        if (test_spec == cb_query.UNPROVIDED) {
            test_spec = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition((SubLObject)cb_query.$str250$new_inference_section);
        if (cb_query.NIL != query_spec && query_spec != cb_query.$kw226$UNSPECIFIED) {
            html_utilities.html_princ_strong((SubLObject)cb_query.$str301$Asking_query__);
            cb_utilities.cb_form(query_spec, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != isa.isa_in_any_mtP(query_spec, cb_query.$const302$UnrunnableQuery_SubstitutionOfInd)) {
                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                final SubLObject color_val = (SubLObject)cb_query.$kw303$RED;
                html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                if (cb_query.NIL != color_val) {
                    html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_color(color_val));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                }
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str304$WARNING__This_query_is_not_intend);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
                html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
            }
            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        }
        dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str305$new_inference, (SubLObject)cb_query.$str260$Show, (SubLObject)cb_query.$str261$Hide);
        final SubLObject size_val = (SubLObject)cb_query.FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (cb_query.NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            cb_princ_strong_with_explanation((SubLObject)cb_query.$str306$New_Inference, (SubLObject)cb_query.$str252$Start_a_new_inference_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
        cb_query_new_inference_submit_section(focal_inference, query_spec, test_spec);
        SubLObject initial_visibility = (SubLObject)cb_query.$kw239$VISIBLE;
        if (cb_query.$kw226$UNSPECIFIED == sentence && ((cb_query.NIL != focal_inference && cb_query.$kw307$RUNNING == inference_datastructures_inference.inference_status(focal_inference) && cb_query.NIL == cb_query.$cb_inference_progress_frame_enabledP$.getGlobalValue()) || (cb_query.NIL == focal_inference && cb_query.NIL != other_inferences))) {
            initial_visibility = (SubLObject)cb_query.$kw241$INVISIBLE;
        }
        dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str305$new_inference, initial_visibility, (SubLObject)cb_query.$kw240$PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str305$new_inference);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            cb_query_new_inference_mt_section(sentence, mt, focal_inference);
            cb_query_new_inference_sentence_section(sentence, focal_inference);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            cb_query_new_inference_non_explanatory_sentence_section(non_explanatory_sentence, focal_inference);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 46849L)
    public static SubLObject cb_query_new_inference_submit_section(final SubLObject focal_inference, SubLObject query_spec, SubLObject test_spec) {
        if (query_spec == cb_query.UNPROVIDED) {
            query_spec = (SubLObject)cb_query.NIL;
        }
        if (test_spec == cb_query.UNPROVIDED) {
            test_spec = (SubLObject)cb_query.NIL;
        }
        html_utilities.html_reset_input((SubLObject)cb_query.$str308$Reset_All_Fields);
        if (cb_query.NIL != focal_inference) {
            if (cb_query.NIL != focal_inference) {
                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                cb_submit_input_with_explanation_and_inference_doc_more_link((SubLObject)cb_query.$str309$Start_as_a_Followup_to_Focal, (SubLObject)cb_query.$str310$Starts_a_new_inference_as_a_follo, (SubLObject)cb_query.$str311$sharing_a_problem_store, (SubLObject)cb_query.$str312$followup, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
            cb_submit_input_with_explanation((SubLObject)cb_query.$str313$Start_as_New, (SubLObject)cb_query.$str314$Starts_a_new_inference_with_a_fre, (SubLObject)cb_query.$str315$new, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        else {
            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
            cb_submit_input_with_explanation((SubLObject)cb_query.$str316$Start_Inference, (SubLObject)cb_query.$str314$Starts_a_new_inference_with_a_fre, (SubLObject)cb_query.$str315$new, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != query_spec && query_spec != cb_query.$kw226$UNSPECIFIED) {
            html_utilities.html_hidden_input((SubLObject)cb_query.$str317$query_spec, cb_utilities.cb_term_identifier(query_spec), (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != test_spec && test_spec != cb_query.$kw226$UNSPECIFIED) {
            html_utilities.html_hidden_input((SubLObject)cb_query.$str318$test_spec, cb_utilities.cb_term_identifier(test_spec), (SubLObject)cb_query.UNPROVIDED);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48220L)
    public static SubLObject default_new_inference_monad_mt() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return cb_query.$default_new_inference_monad_mt$.getDynamicValue(thread);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48443L)
    public static SubLObject default_new_inference_mt() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL != hlmt.$hlmts_supportedP$.getDynamicValue(thread)) {
            return cb_query.$default_new_inference_mt$.getDynamicValue(thread);
        }
        return cb_query.$const324$InferencePSC;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48583L)
    public static SubLObject set_default_new_inference_mt(final SubLObject mt) {
        cb_query.$default_new_inference_mt$.setDynamicValue(hlmt.augment_hlmt(mt));
        return default_new_inference_mt();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 48974L)
    public static SubLObject cb_query_new_inference_mt_section(final SubLObject sentence, SubLObject mt, final SubLObject focal_inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition((SubLObject)cb_query.$str326$mt_section);
        dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str327$cb_query_inference_mt, (SubLObject)cb_query.$str260$Show, (SubLObject)cb_query.$str261$Hide);
        html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
        html_utilities.html_princ((SubLObject)cb_query.$str328$Query_Context);
        html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        final SubLObject initial_visibility = (SubLObject)cb_query.$kw239$VISIBLE;
        dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str327$cb_query_inference_mt, initial_visibility, (SubLObject)cb_query.$kw240$PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str327$cb_query_inference_mt);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            if (cb_query.$kw226$UNSPECIFIED == sentence) {
                if (cb_query.NIL != focal_inference) {
                    mt = inference_datastructures_inference.inference_input_mt(focal_inference);
                }
                else {
                    mt = default_new_inference_mt();
                }
            }
            else if (cb_query.$kw226$UNSPECIFIED == mt) {
                mt = (SubLObject)cb_query.NIL;
            }
            else {
                mt = mt;
            }
            final SubLObject display_options = (SubLObject)ConsesLow.list((SubLObject)cb_query.$kw329$MONAD_CHOICES, cb_query.$cb_query_default_mt_monad_choices$.getGlobalValue());
            cb_form_widgets.cb_mt_input_section(mt, display_options);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 49923L)
    public static SubLObject cb_query_new_inference_sentence_section(final SubLObject sentence, final SubLObject focal_inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition((SubLObject)cb_query.$str330$sentence_section);
        final SubLObject query_sentence = cb_query_sentence(sentence, focal_inference);
        final SubLObject width = (SubLObject)cb_query.$int331$80;
        final SubLObject height = (SubLObject)cb_query.TEN_INTEGER;
        final SubLObject display_options = (SubLObject)ConsesLow.list(new SubLObject[] { cb_query.$kw332$INPUT_NAME, cb_query.$str333$sentence, cb_query.$kw334$WIDTH, width, cb_query.$kw335$HEIGHT, height, cb_query.$kw336$COMPLETE_LABEL, cb_query.$str337$Complete, cb_query.$kw338$CYCLIFY_LABEL, cb_query.$str339$Cyclify, cb_query.$kw340$CLEAR_LABEL, cb_query.$str341$Clear_Sentence, cb_query.$kw342$MODE, cb_query.$kw216$QUERY });
        final SubLObject sentence_id = Sequences.cconcatenate((SubLObject)cb_query.$str343$editor_, format_nil.format_nil_a_no_copy(html_macros.next_html_id((SubLObject)cb_query.UNPROVIDED)));
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        if (cb_query.NIL != sentence_id) {
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(sentence_id);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_markup(html_macros.$html_attribute_class$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str344$CycEditor);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        SubLObject cdolist_list_var = (SubLObject)ConsesLow.list((SubLObject)cb_query.$list346, reader.bq_cons((SubLObject)cb_query.$str347$_cols_, width), reader.bq_cons((SubLObject)cb_query.$str348$_rows_, height));
        SubLObject cons = (SubLObject)cb_query.NIL;
        cons = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject attribute = (SubLObject)cb_query.NIL;
            SubLObject value = (SubLObject)cb_query.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list345);
            attribute = current.first();
            current = (value = current.rest());
            html_utilities.html_markup(attribute);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(value);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            cb_form_widgets.cb_el_sentence_input_section((SubLObject)((cb_query.$kw226$UNSPECIFIED == query_sentence) ? cb_query.NIL : query_sentence), display_options);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 50795L)
    public static SubLObject cb_query_new_inference_non_explanatory_sentence_section(final SubLObject non_explanatory_sentence, final SubLObject focal_inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject sentence = cb_query_non_explanatory_sentence(non_explanatory_sentence, focal_inference);
        final SubLObject initial_visibility = (SubLObject)((cb_query.NIL != sentence && cb_query.$kw226$UNSPECIFIED != sentence) ? cb_query.$kw239$VISIBLE : cb_query.$kw241$INVISIBLE);
        dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str238$non_explanatory, (SubLObject)cb_query.$str260$Show, (SubLObject)cb_query.$str261$Hide);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_princ_strong_with_explanation((SubLObject)cb_query.$str349$Pragmatics, (SubLObject)cb_query.$str350$An_optional_sentence_that_will_fu, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str238$non_explanatory, initial_visibility, (SubLObject)cb_query.$kw240$PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str238$non_explanatory);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            final SubLObject display_options = (SubLObject)ConsesLow.list(new SubLObject[] { cb_query.$kw332$INPUT_NAME, cb_query.$str351$non_exp_sentence, cb_query.$kw336$COMPLETE_LABEL, cb_query.$str337$Complete, cb_query.$kw338$CYCLIFY_LABEL, cb_query.$str339$Cyclify, cb_query.$kw340$CLEAR_LABEL, cb_query.$str341$Clear_Sentence, cb_query.$kw335$HEIGHT, cb_query.FIVE_INTEGER, cb_query.$kw334$WIDTH, cb_query.$int331$80, cb_query.$kw342$MODE, cb_query.$kw216$QUERY });
            cb_form_widgets.cb_el_sentence_input_section((SubLObject)((cb_query.$kw226$UNSPECIFIED == sentence) ? cb_query.NIL : sentence), display_options);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 51867L)
    public static SubLObject cb_query_sentence(final SubLObject explicit_sentence, final SubLObject focal_inference) {
        final SubLObject focal_sentence = (SubLObject)((cb_query.NIL != focal_inference) ? inference_datastructures_inference.inference_input_el_query(focal_inference) : cb_query.$kw226$UNSPECIFIED);
        final SubLObject sentence = cb_query_select_sentence(explicit_sentence, focal_sentence);
        return sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 52156L)
    public static SubLObject cb_query_non_explanatory_sentence(final SubLObject explicit_sentence, final SubLObject focal_inference) {
        final SubLObject focal_sentence = (SubLObject)((cb_query.NIL != focal_inference && cb_query.NIL != inference_datastructures_inference.inference_input_non_explanatory_el_query(focal_inference)) ? inference_datastructures_inference.inference_input_non_explanatory_el_query(focal_inference) : cb_query.$kw226$UNSPECIFIED);
        final SubLObject sentence = cb_query_select_sentence(explicit_sentence, focal_sentence);
        return sentence;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 52550L)
    public static SubLObject cb_query_select_sentence(final SubLObject explicit_sentence, final SubLObject focal_sentence) {
        if (cb_query.$kw226$UNSPECIFIED != explicit_sentence) {
            return fi.perform_fi_substitutions(explicit_sentence, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.$kw226$UNSPECIFIED != focal_sentence) {
            return fi.perform_fi_substitutions(focal_sentence, (SubLObject)cb_query.UNPROVIDED);
        }
        return (SubLObject)cb_query.$kw226$UNSPECIFIED;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 53098L)
    public static SubLObject cb_query_parameters_section(final SubLObject focal_inference, final SubLObject query_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_target_definition((SubLObject)cb_query.$str253$parameters_section);
        dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str353$inference_parameters, (SubLObject)cb_query.$str260$Show, (SubLObject)cb_query.$str261$Hide);
        final SubLObject size_val = (SubLObject)cb_query.FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (cb_query.NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            cb_princ_strong_with_explanation((SubLObject)cb_query.$str354$Inference_Parameters, (SubLObject)cb_query.$str355$The_inference_parameters_and_reso, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        if (cb_query.NIL != focal_inference && (cb_query.NIL != inference_datastructures_inference.continuable_inference_p(focal_inference) || (cb_query.NIL != cb_query.$cb_inference_progress_frame_enabledP$.getGlobalValue() && cb_query.NIL != inference_datastructures_inference.running_inference_p(focal_inference) && cb_query.NIL != inference_datastructures_inference.inference_continuableP(focal_inference)))) {
            html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
            cb_submit_input_with_explanation((SubLObject)cb_query.$str356$Continue_the_Focal_Inference, (SubLObject)cb_query.$str357$Continues_running_the_focal_infer, (SubLObject)cb_query.$str358$continue, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        final SubLObject initial_visibility = (SubLObject)cb_query.$kw239$VISIBLE;
        dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str353$inference_parameters, initial_visibility, (SubLObject)cb_query.$kw240$PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str353$inference_parameters);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            cb_submit_input_with_explanation((SubLObject)cb_query.$str359$Save_Parameters, (SubLObject)cb_query.$str360$Saves_the_current_inference_param, (SubLObject)cb_query.$str361$save_parameters, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
            cb_submit_input_with_explanation((SubLObject)cb_query.$str362$Load_Parameters, (SubLObject)cb_query.$str363$Loads_user_saved_default_inferenc, (SubLObject)cb_query.$str364$load_parameters, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
            cb_submit_input_with_explanation((SubLObject)cb_query.$str365$Reset_Parameters, (SubLObject)cb_query.$str366$Resets_all_the_inference_paramete, (SubLObject)cb_query.$str367$reset_parameters, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != focal_inference && cb_query.NIL != inference_datastructures_inference.inference_has_some_answerP(focal_inference)) {
                html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                cb_submit_input_with_explanation((SubLObject)cb_query.$str368$Strengthen_Parameters, (SubLObject)cb_query.$str369$Sets_the_inference_parameters_to_, (SubLObject)cb_query.$str370$strengthen_parameters, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
            cb_query_basic_inference_resource_constraints_section(focal_inference, (SubLObject)cb_query.T, (SubLObject)cb_query.T, query_properties);
            html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            cb_query_advanced_inference_parameters_section(focal_inference, query_properties);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 55494L)
    public static SubLObject cb_save_inference_parameter_defaults(final SubLObject v_inference_parameters) {
        cb_query.$cb_default_query_parameters$.setDynamicValue(v_inference_parameters);
        cb_tools.cb_save_interface_state();
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 55675L)
    public static SubLObject get_saved_inference_parameter_default(final SubLObject inference_parameter, SubLObject v_default) {
        if (v_default == cb_query.UNPROVIDED) {
            v_default = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject saved_default = conses_high.getf(cb_query.$cb_default_query_parameters$.getDynamicValue(thread), inference_parameter, (SubLObject)cb_query.NIL);
        if (cb_query.NIL != saved_default) {
            return possibly_scale_value_for_output(saved_default, inference_parameter);
        }
        return v_default;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 56288L)
    public static SubLObject cb_query_inference_resource_constraints_section(final SubLObject focal_inference, final SubLObject allow_editP, final SubLObject show_input_valuesP, SubLObject query_properties) {
        if (query_properties == cb_query.UNPROVIDED) {
            query_properties = (SubLObject)cb_query.$kw226$UNSPECIFIED;
        }
        html_utilities.html_markup(html_macros.$html_underlined_head$.getGlobalValue());
        cb_princ_strong_with_explanation((SubLObject)cb_query.$str372$Inference_Resource_Constraints, (SubLObject)cb_query.$str373$Properties_that_can_change_while_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_underlined_tail$.getGlobalValue());
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        return cb_query_basic_inference_resource_constraints_section(focal_inference, allow_editP, show_input_valuesP, query_properties);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 56814L)
    public static SubLObject cb_query_basic_inference_resource_constraints_section(final SubLObject focal_inference, final SubLObject allow_editP, final SubLObject show_input_valuesP, final SubLObject query_properties) {
        cb_query_show_inference_properties(cb_query.$cb_basic_inference_resource_constraints$.getGlobalValue(), focal_inference, allow_editP, show_input_valuesP, query_properties, (SubLObject)cb_query.FOUR_INTEGER, (SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 57111L)
    public static SubLObject cb_query_advanced_inference_parameters_section(final SubLObject focal_inference, final SubLObject query_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str374$advanced_parameters, (SubLObject)cb_query.$str260$Show, (SubLObject)cb_query.$str261$Hide);
        final SubLObject size_val = (SubLObject)cb_query.FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (cb_query.NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            cb_princ_strong_with_explanation((SubLObject)cb_query.$str375$Inference_Debugging_Parameters, (SubLObject)cb_query.$str376$The_advanced_inference_parameters, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        final SubLObject initial_visibility = (SubLObject)cb_query.$kw241$INVISIBLE;
        dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str374$advanced_parameters, initial_visibility, (SubLObject)cb_query.$kw240$PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str374$advanced_parameters);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            cb_query_advanced_inference_mode_properties(focal_inference, (SubLObject)cb_query.T, (SubLObject)cb_query.T, query_properties);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            cb_query_advanced_inference_dynamic_properties(focal_inference, (SubLObject)cb_query.T, (SubLObject)cb_query.T, query_properties, (SubLObject)cb_query.NIL);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            cb_query_advanced_inference_static_properties(focal_inference, (SubLObject)cb_query.T, (SubLObject)cb_query.T, query_properties, (SubLObject)cb_query.NIL);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            cb_query_advanced_problem_store_static_properties(focal_inference, (SubLObject)cb_query.T, (SubLObject)cb_query.T, query_properties);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 58919L)
    public static SubLObject cb_inference_mode_property_p(final SubLObject v_object) {
        return list_utilities.member_eqP(v_object, cb_query.$cb_inference_mode_properties$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 59034L)
    public static SubLObject cb_inference_mode_property_datum_p(final SubLObject v_object) {
        return list_utilities.member_eqP(v_object.first(), cb_query.$cb_inference_mode_properties$.getGlobalValue());
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 59163L)
    public static SubLObject cb_possibly_filter_out_inference_mode_properties(final SubLObject properties_data, final SubLObject include_inference_mode_propertiesP) {
        if (cb_query.NIL != include_inference_mode_propertiesP) {
            return properties_data;
        }
        return Sequences.remove_if((SubLObject)cb_query.$sym378$CB_INFERENCE_MODE_PROPERTY_DATUM_P, properties_data, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 59432L)
    public static SubLObject cb_inference_mode_properties_data() {
        SubLObject data = (SubLObject)cb_query.NIL;
        SubLObject cdolist_list_var = cb_query.$cb_all_inference_properties$.getGlobalValue();
        SubLObject datum = (SubLObject)cb_query.NIL;
        datum = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            if (cb_query.NIL != cb_inference_mode_property_datum_p(datum)) {
                data = (SubLObject)ConsesLow.cons(datum, data);
            }
            cdolist_list_var = cdolist_list_var.rest();
            datum = cdolist_list_var.first();
        }
        return list_utilities.sort_via_position(data, cb_query.$cb_inference_mode_properties$.getGlobalValue(), Symbols.symbol_function((SubLObject)cb_query.EQ), Symbols.symbol_function((SubLObject)cb_query.$sym379$FIRST));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 59800L)
    public static SubLObject cb_query_advanced_inference_mode_properties(final SubLObject focal_inference, final SubLObject allow_editP, final SubLObject show_input_valuesP, SubLObject query_properties) {
        if (query_properties == cb_query.UNPROVIDED) {
            query_properties = (SubLObject)cb_query.$kw226$UNSPECIFIED;
        }
        html_utilities.html_markup(html_macros.$html_underlined_head$.getGlobalValue());
        cb_princ_strong_with_explanation((SubLObject)cb_query.$str380$Inference_Engine_Mode_Properties, (SubLObject)cb_query.$str381$Properties_determined_by_the_choi, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_underlined_tail$.getGlobalValue());
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        cb_query_show_inference_properties(cb_inference_mode_properties_data(), focal_inference, allow_editP, show_input_valuesP, query_properties, (SubLObject)cb_query.THREE_INTEGER, (SubLObject)cb_query.T);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 61261L)
    public static SubLObject cb_query_advanced_inference_dynamic_properties(final SubLObject focal_inference, final SubLObject allow_editP, final SubLObject show_input_valuesP, SubLObject query_properties, SubLObject include_inference_mode_propertiesP) {
        if (query_properties == cb_query.UNPROVIDED) {
            query_properties = (SubLObject)cb_query.$kw226$UNSPECIFIED;
        }
        if (include_inference_mode_propertiesP == cb_query.UNPROVIDED) {
            include_inference_mode_propertiesP = (SubLObject)cb_query.T;
        }
        html_utilities.html_markup(html_macros.$html_underlined_head$.getGlobalValue());
        cb_princ_strong_with_explanation((SubLObject)cb_query.$str383$Inference_Dynamic_Properties, (SubLObject)cb_query.$str373$Properties_that_can_change_while_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_underlined_tail$.getGlobalValue());
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        cb_query_show_inference_properties(cb_query.$cb_advanced_inference_dynamic_properties$.getGlobalValue(), focal_inference, allow_editP, show_input_valuesP, query_properties, (SubLObject)cb_query.THREE_INTEGER, include_inference_mode_propertiesP);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 63774L)
    public static SubLObject cb_query_advanced_inference_static_properties(final SubLObject focal_inference, final SubLObject allow_editP, final SubLObject show_input_valuesP, SubLObject query_properties, SubLObject include_inference_mode_propertiesP) {
        if (query_properties == cb_query.UNPROVIDED) {
            query_properties = (SubLObject)cb_query.$kw226$UNSPECIFIED;
        }
        if (include_inference_mode_propertiesP == cb_query.UNPROVIDED) {
            include_inference_mode_propertiesP = (SubLObject)cb_query.T;
        }
        html_utilities.html_markup(html_macros.$html_underlined_head$.getGlobalValue());
        cb_princ_strong_with_explanation((SubLObject)cb_query.$str385$Inference_Static_Properties, (SubLObject)cb_query.$str386$Properties_that_can_vary_between_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_underlined_tail$.getGlobalValue());
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        cb_query_show_inference_properties(cb_query.$cb_advanced_inference_static_properties$.getGlobalValue(), focal_inference, allow_editP, show_input_valuesP, query_properties, (SubLObject)cb_query.TWO_INTEGER, include_inference_mode_propertiesP);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 66003L)
    public static SubLObject cb_query_advanced_problem_store_static_properties(final SubLObject focal_inference, final SubLObject allow_editP, final SubLObject show_input_valuesP, final SubLObject query_properties) {
        html_utilities.html_markup(html_macros.$html_underlined_head$.getGlobalValue());
        cb_princ_strong_with_explanation((SubLObject)cb_query.$str389$Problem_Store_Static_Properties, (SubLObject)cb_query.$str390$Properties_of_a_problem_store_tha, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_underlined_tail$.getGlobalValue());
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        cb_query_show_inference_properties(cb_query.$cb_advanced_problem_store_static_properties$.getGlobalValue(), focal_inference, allow_editP, show_input_valuesP, query_properties, (SubLObject)cb_query.THREE_INTEGER, (SubLObject)cb_query.NIL);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 67035L)
    public static SubLObject cb_all_inference_parameters() {
        return cb_query.$cb_all_inference_parameters$.getGlobalValue();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 67122L)
    public static SubLObject cb_query_show_inference_properties(SubLObject cb_properties, final SubLObject focal_inference, final SubLObject allow_editP, final SubLObject show_input_valuesP, final SubLObject query_properties, SubLObject group_size, SubLObject include_inference_mode_propertiesP) {
        if (group_size == cb_query.UNPROVIDED) {
            group_size = (SubLObject)cb_query.TWO_INTEGER;
        }
        if (include_inference_mode_propertiesP == cb_query.UNPROVIDED) {
            include_inference_mode_propertiesP = (SubLObject)cb_query.T;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        cb_properties = cb_possibly_filter_out_inference_mode_properties(cb_properties, include_inference_mode_propertiesP);
        if (cb_query.NIL != cb_properties) {
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.THREE_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.THREE_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                while (cb_query.NIL != conses_high.nthcdr(group_size, cb_properties)) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$25 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        SubLObject i;
                        SubLObject current;
                        SubLObject datum;
                        SubLObject temp;
                        SubLObject property;
                        SubLObject cb_default;
                        SubLObject entry_spec;
                        SubLObject remaining_cb_properties;
                        SubLObject value;
                        SubLObject _prev_bind_0_$26;
                        SubLObject _prev_bind_0_$27;
                        for (i = (SubLObject)cb_query.NIL, i = (SubLObject)cb_query.ZERO_INTEGER; i.numL(group_size); i = Numbers.add(i, (SubLObject)cb_query.ONE_INTEGER)) {
                            datum = (current = cb_properties);
                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list391);
                            temp = current.rest();
                            current = current.first();
                            property = (SubLObject)cb_query.NIL;
                            cb_default = (SubLObject)cb_query.NIL;
                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list391);
                            property = current.first();
                            current = current.rest();
                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list391);
                            cb_default = current.first();
                            current = current.rest();
                            entry_spec = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
                            cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list391);
                            current = current.rest();
                            if (cb_query.NIL == current) {
                                current = temp;
                                remaining_cb_properties = (cb_properties = current);
                                if (cb_query.NIL != cb_inference_mode_property_p(property)) {
                                    cb_default = cb_default_property_value(property, cb_default, query_properties);
                                }
                                value = cb_query_property_value_from_properties_or_focal_inference(query_properties, focal_inference, property, cb_default, show_input_valuesP);
                                if (!i.isZero()) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    _prev_bind_0_$26 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$26, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                _prev_bind_0_$27 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    cb_query_show_inference_parameter(property, value, cb_default, allow_editP, entry_spec);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$27, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            else {
                                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list391);
                            }
                        }
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$25, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                }
                final SubLObject missing_count = Numbers.subtract(group_size, Sequences.length(cb_properties));
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$28 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    SubLObject cdolist_list_var = cb_properties;
                    SubLObject cb_property_spec = (SubLObject)cb_query.NIL;
                    cb_property_spec = cdolist_list_var.first();
                    while (cb_query.NIL != cdolist_list_var) {
                        SubLObject current2;
                        final SubLObject datum2 = current2 = cb_property_spec;
                        SubLObject property2 = (SubLObject)cb_query.NIL;
                        SubLObject cb_default2 = (SubLObject)cb_query.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)cb_query.$list392);
                        property2 = current2.first();
                        current2 = current2.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)cb_query.$list392);
                        cb_default2 = current2.first();
                        current2 = current2.rest();
                        final SubLObject entry_spec2 = (SubLObject)(current2.isCons() ? current2.first() : cb_query.NIL);
                        cdestructuring_bind.destructuring_bind_must_listp(current2, datum2, (SubLObject)cb_query.$list392);
                        current2 = current2.rest();
                        if (cb_query.NIL == current2) {
                            if (cb_query.NIL != cb_inference_mode_property_p(property2)) {
                                cb_default2 = cb_default_property_value(property2, cb_default2, query_properties);
                            }
                            final SubLObject value = cb_query_property_value_from_properties_or_focal_inference(query_properties, focal_inference, property2, cb_default2, show_input_valuesP);
                            if (!cb_property_spec.eql(cb_properties.first())) {
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$29 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$29, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$30 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                cb_query_show_inference_parameter(property2, value, cb_default2, allow_editP, entry_spec2);
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$30, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        }
                        else {
                            cdestructuring_bind.cdestructuring_bind_error(datum2, (SubLObject)cb_query.$list392);
                        }
                        cdolist_list_var = cdolist_list_var.rest();
                        cb_property_spec = cdolist_list_var.first();
                    }
                    if (!missing_count.isZero()) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        if (cb_query.NIL != missing_count) {
                            html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(missing_count);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        }
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$31 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$31, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$28, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 69204L)
    public static SubLObject cb_query_property_for_inference_mode(final SubLObject property, final SubLObject mode, final SubLObject cb_default) {
        final SubLObject mode_value = inference_parameters.query_property_for_inference_mode(mode, property, (SubLObject)cb_query.$kw393$NO_MODE_VALUE_SPECIFIED);
        if (mode_value == cb_query.$kw393$NO_MODE_VALUE_SPECIFIED) {
            return cb_default;
        }
        return possibly_scale_value_for_output(mode_value, property);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 69517L)
    public static SubLObject cb_default_property_value(final SubLObject property, final SubLObject cb_default, final SubLObject v_properties) {
        final SubLObject mode = v_properties.isList() ? conses_high.getf(v_properties, (SubLObject)cb_query.$kw58$INFERENCE_MODE, cb_default_inference_mode()) : cb_default_inference_mode();
        return cb_query_property_for_inference_mode(property, mode, cb_default);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 69813L)
    public static SubLObject cb_query_property_value_from_properties_or_focal_inference(final SubLObject query_properties, final SubLObject focal_inference, final SubLObject property, final SubLObject cb_default, final SubLObject show_input_valuesP) {
        SubLObject value = cb_query_property_value_from_properties_or_focal_inference_int(query_properties, focal_inference, property, cb_default, show_input_valuesP);
        if (property == cb_query.$kw77$PROBABLY_APPROXIMATELY_DONE && cb_query.NIL == inference_datastructures_inference.pad_table_initializedP()) {
            value = (SubLObject)cb_query.$int137$100;
        }
        return value;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 70248L)
    public static SubLObject cb_query_property_value_from_properties_or_focal_inference_int(final SubLObject query_properties, final SubLObject focal_inference, final SubLObject property, final SubLObject cb_default, final SubLObject show_input_valuesP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.$kw226$UNSPECIFIED != query_properties) {
            final SubLObject value = conses_high.getf(query_properties, property, (SubLObject)cb_query.$kw226$UNSPECIFIED);
            if (cb_query.$kw226$UNSPECIFIED == value) {
                return cb_default;
            }
            return possibly_scale_value_for_output(value, property);
        }
        else {
            if (cb_query.NIL != focal_inference) {
                final SubLObject v_default = possibly_scale_value_on_input(cb_default, property);
                final SubLObject value2 = (cb_query.NIL != show_input_valuesP) ? inference_utilities.inference_input_property_lookup(focal_inference, property, v_default) : inference_utilities.inference_property_lookup(focal_inference, property, v_default);
                return possibly_scale_value_for_output(value2, property);
            }
            if (cb_query.NIL != cb_query.$cb_default_query_parameters$.getDynamicValue(thread)) {
                return get_saved_inference_parameter_default(property, cb_default);
            }
            return cb_default;
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 71365L)
    public static SubLObject cb_query_show_inference_parameter(final SubLObject property, final SubLObject value, final SubLObject cb_default, final SubLObject allow_editP, final SubLObject entry_spec) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == inference_parameter_p(property)) {
            html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
            html_utilities.html_prin1(property);
            html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
        }
        else {
            final SubLObject fancy_name = inference_parameter_fancy_name(property);
            final SubLObject description = inference_parameter_description(property);
            final SubLObject settings = inference_parameter_settings(property);
            if (cb_query.NIL == list_utilities.equalE(value, cb_default)) {
                html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_style_background_color((SubLObject)cb_query.$kw394$YELLOW);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    cb_princ_strong_with_explanation((SubLObject)cb_query.$str395$_, (SubLObject)cb_query.$str396$This_parameter_has_been_modified_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
                html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
            }
            if (cb_query.NIL == string_utilities.empty_stringP(description)) {
                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                html_princ_with_explanation(fancy_name, description, fancy_name, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
            }
            else {
                html_utilities.html_princ_strong(fancy_name);
            }
            cb_query_show_inference_parameter_settings(property, value, allow_editP, settings, entry_spec);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 72243L)
    public static SubLObject cb_query_show_inference_parameter_settings(final SubLObject property, final SubLObject value, final SubLObject allow_editP, final SubLObject settings, final SubLObject entry_spec) {
        final SubLObject radio_name = html_utilities.html_control_parameter_radio_name(property);
        final SubLObject entry_name = html_utilities.html_control_parameter_entry_name(property);
        final SubLObject some_entryP = Sequences.find((SubLObject)cb_query.$kw45$ENTRY, settings, Symbols.symbol_function((SubLObject)cb_query.EQL), Symbols.symbol_function((SubLObject)cb_query.$sym379$FIRST), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject total_settings = Sequences.length(settings);
        SubLObject list_var = (SubLObject)cb_query.NIL;
        SubLObject setting = (SubLObject)cb_query.NIL;
        SubLObject setting_number = (SubLObject)cb_query.NIL;
        list_var = settings;
        setting = list_var.first();
        for (setting_number = (SubLObject)cb_query.ZERO_INTEGER; cb_query.NIL != list_var; list_var = list_var.rest(), setting = list_var.first(), setting_number = Numbers.add((SubLObject)cb_query.ONE_INTEGER, setting_number)) {
            if (cb_query.$kw58$INFERENCE_MODE != property || !cb_query.$inference_mode_custom_value_number$.getGlobalValue().eql(setting_number)) {
                cb_query_show_inference_parameter_setting(property, value, allow_editP, setting, setting_number, total_settings, radio_name, some_entryP, entry_name, entry_spec);
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 72963L)
    public static SubLObject cb_default_inference_mode() {
        return list_utilities.only_one(list_utilities.alist_lookup(cb_query.$cb_basic_inference_resource_constraints$.getGlobalValue(), (SubLObject)cb_query.$kw58$INFERENCE_MODE, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 73102L)
    public static SubLObject cb_query_show_inference_parameter_setting(final SubLObject property, final SubLObject value, final SubLObject allow_editP, final SubLObject setting, final SubLObject setting_number, final SubLObject total_settings, final SubLObject radio_name, final SubLObject some_entryP, final SubLObject entry_name, final SubLObject entry_spec) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject current_settingP = inference_parameter_value_matches_setting(property, value, setting);
        SubLObject input_id = (SubLObject)cb_query.NIL;
        if (cb_query.NIL != allow_editP || cb_query.NIL != current_settingP) {
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
            SubLObject method = (SubLObject)cb_query.NIL;
            SubLObject data = (SubLObject)cb_query.NIL;
            SubLObject explanation = (SubLObject)cb_query.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(setting, setting, (SubLObject)cb_query.$list43);
            method = setting.first();
            SubLObject current = setting.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, setting, (SubLObject)cb_query.$list43);
            data = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, setting, (SubLObject)cb_query.$list43);
            explanation = current.first();
            current = current.rest();
            if (cb_query.NIL == current) {
                if (cb_query.NIL != allow_editP) {
                    final SubLObject encoded_radio_name = html_utilities.get_encoded_form_field_name(radio_name);
                    input_id = Sequences.cconcatenate(format_nil.format_nil_a_no_copy(encoded_radio_name), new SubLObject[] { cb_query.$str1$_, format_nil.format_nil_a_no_copy(setting_number) });
                    if (cb_query.ONE_INTEGER.numE(total_settings)) {
                        html_utilities.html_hidden_input(encoded_radio_name, setting_number, (SubLObject)cb_query.UNPROVIDED);
                    }
                    else if (property == cb_query.$kw58$INFERENCE_MODE) {
                        cb_set_all_inference_mode_parameters_to_cb_default_radio_input(encoded_radio_name, input_id, setting_number, current_settingP);
                    }
                    else if (cb_query.NIL != cb_inference_mode_property_p(property)) {
                        if (cb_query.NIL != some_entryP) {
                            if (cb_query.$kw45$ENTRY == method) {
                                cb_focus_and_set_inference_mode_radio_to_custom_radio_input(encoded_radio_name, input_id, entry_name, setting_number, current_settingP);
                            }
                            else {
                                cb_clear_and_set_inference_mode_radio_to_custom_radio_input(encoded_radio_name, input_id, entry_name, setting_number, current_settingP);
                            }
                        }
                        else {
                            cb_set_inference_mode_radio_to_custom_radio_input(encoded_radio_name, input_id, setting_number, current_settingP);
                        }
                    }
                    else if (cb_query.NIL != some_entryP) {
                        if (cb_query.$kw45$ENTRY == method) {
                            html_script_utilities.html_focus_radio_input(encoded_radio_name, entry_name, setting_number, current_settingP, input_id);
                        }
                        else {
                            html_script_utilities.html_clear_radio_input(encoded_radio_name, entry_name, setting_number, current_settingP, input_id);
                        }
                    }
                    else {
                        html_utilities.html_radio_input(encoded_radio_name, setting_number, current_settingP, input_id);
                    }
                }
                if (cb_query.$kw45$ENTRY == method) {
                    html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                    final SubLObject entry_default = (SubLObject)((cb_query.NIL != current_settingP) ? print_high.prin1_to_string(value) : cb_query.NIL);
                    if (cb_query.NIL != allow_editP) {
                        SubLObject current_$33;
                        final SubLObject datum_$32 = current_$33 = (SubLObject)((cb_query.NIL != entry_spec) ? entry_spec : cb_query.$list397);
                        SubLObject type = (SubLObject)cb_query.NIL;
                        SubLObject size = (SubLObject)cb_query.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current_$33, datum_$32, (SubLObject)cb_query.$list398);
                        type = current_$33.first();
                        current_$33 = current_$33.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current_$33, datum_$32, (SubLObject)cb_query.$list398);
                        size = current_$33.first();
                        current_$33 = current_$33.rest();
                        if (cb_query.NIL == current_$33) {
                            final SubLObject pcase_var = type;
                            if (pcase_var.eql((SubLObject)cb_query.$kw399$TEXT)) {
                                html_utilities.html_text_input(entry_name, entry_default, size);
                            }
                            else {
                                html_utilities.html_text_input(entry_name, entry_default, (SubLObject)cb_query.UNPROVIDED);
                            }
                        }
                        else {
                            cdestructuring_bind.cdestructuring_bind_error(datum_$32, (SubLObject)cb_query.$list398);
                        }
                    }
                    else {
                        html_utilities.html_princ(entry_default);
                    }
                }
                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)SubLObjectFactory.makeBoolean(property != cb_query.$kw58$INFERENCE_MODE), thread);
                    html_utilities.html_markup(html_macros.$html_label_head$.getGlobalValue());
                    if (cb_query.NIL != input_id) {
                        html_utilities.html_markup(html_macros.$html_label_for$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(input_id));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    }
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$34 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(explanation);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$34, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_label_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(setting, (SubLObject)cb_query.$list43);
            }
            html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 75797L)
    public static SubLObject cb_set_radio_buttons_script(final SubLObject alist) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), cb_query.$html_js_on_click_preamble$.getGlobalValue());
        SubLObject cdolist_list_var = alist;
        SubLObject cons = (SubLObject)cb_query.NIL;
        cons = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            SubLObject current;
            final SubLObject datum = current = cons;
            SubLObject radio_field_name = (SubLObject)cb_query.NIL;
            SubLObject value = (SubLObject)cb_query.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list404);
            radio_field_name = current.first();
            current = (value = current.rest());
            if (value.isCons()) {
                SubLObject current_$36;
                final SubLObject datum_$35 = current_$36 = value;
                SubLObject radio_value = (SubLObject)cb_query.NIL;
                SubLObject entry_field_name = (SubLObject)cb_query.NIL;
                SubLObject entry_value = (SubLObject)cb_query.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current_$36, datum_$35, (SubLObject)cb_query.$list405);
                radio_value = current_$36.first();
                current_$36 = current_$36.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current_$36, datum_$35, (SubLObject)cb_query.$list405);
                entry_field_name = current_$36.first();
                current_$36 = current_$36.rest();
                cdestructuring_bind.destructuring_bind_must_consp(current_$36, datum_$35, (SubLObject)cb_query.$list405);
                entry_value = current_$36.first();
                current_$36 = current_$36.rest();
                if (cb_query.NIL == current_$36) {
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), cb_query.$cb_set_all_radio_buttons_body$.getGlobalValue(), radio_field_name, radio_value);
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), cb_query.$cb_set_field_value_body$.getGlobalValue(), entry_field_name, entry_value);
                }
                else {
                    cdestructuring_bind.cdestructuring_bind_error(datum_$35, (SubLObject)cb_query.$list405);
                }
            }
            else {
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), cb_query.$cb_set_all_radio_buttons_body$.getGlobalValue(), radio_field_name, value);
            }
            cdolist_list_var = cdolist_list_var.rest();
            cons = cdolist_list_var.first();
        }
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), cb_query.$html_js_on_click_postamble$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 76331L)
    public static SubLObject cb_set_radio_button_script(final SubLObject field_name, final SubLObject value) {
        return cb_set_radio_buttons_script(list_utilities.alist_enter((SubLObject)cb_query.NIL, field_name, value, (SubLObject)cb_query.UNPROVIDED));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 76468L)
    public static SubLObject inference_setting_number_for_parameter_value(final SubLObject parameter, final SubLObject value) {
        SubLObject list_var = (SubLObject)cb_query.NIL;
        SubLObject setting = (SubLObject)cb_query.NIL;
        SubLObject setting_number = (SubLObject)cb_query.NIL;
        list_var = inference_parameter_settings(parameter);
        setting = list_var.first();
        for (setting_number = (SubLObject)cb_query.ZERO_INTEGER; cb_query.NIL != list_var; list_var = list_var.rest(), setting = list_var.first(), setting_number = Numbers.add((SubLObject)cb_query.ONE_INTEGER, setting_number)) {
            if (cb_query.NIL != inference_parameter_value_matches_setting(parameter, value, setting)) {
                return setting_number;
            }
        }
        return Errors.error((SubLObject)cb_query.$str406$No_setting_for__s_matched_the_val, parameter, value);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 76816L)
    public static SubLObject cb_set_all_inference_mode_properties_to_defaults_script(final SubLObject inference_mode) {
        SubLObject alist = (SubLObject)cb_query.NIL;
        SubLObject cdolist_list_var = cb_query.$cb_inference_mode_properties$.getGlobalValue();
        SubLObject property = (SubLObject)cb_query.NIL;
        property = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            final SubLObject radio_field_name = get_one_radio_field_name_regexp(property);
            final SubLObject mode_default = cb_query_property_for_inference_mode(property, inference_mode, (SubLObject)cb_query.$kw407$DEFAULT_UNSPECIFIED);
            final SubLObject setting_number = inference_setting_number_for_parameter_value(property, mode_default);
            final SubLObject settings = inference_parameter_settings(property);
            final SubLObject setting = ConsesLow.nth(setting_number, settings);
            final SubLObject pcase_var;
            final SubLObject setting_type = pcase_var = setting.first();
            if (pcase_var.eql((SubLObject)cb_query.$kw44$VALUE)) {
                final SubLObject some_entryP = Sequences.find((SubLObject)cb_query.$kw45$ENTRY, settings, Symbols.symbol_function((SubLObject)cb_query.EQL), Symbols.symbol_function((SubLObject)cb_query.$sym379$FIRST), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                if (cb_query.NIL != some_entryP) {
                    final SubLObject entry_field_name = html_utilities.html_control_parameter_entry_name(property);
                    alist = list_utilities.alist_enter(alist, radio_field_name, (SubLObject)ConsesLow.list(setting_number, entry_field_name, (SubLObject)cb_query.$str6$), (SubLObject)cb_query.UNPROVIDED);
                }
                else {
                    alist = list_utilities.alist_enter(alist, radio_field_name, setting_number, (SubLObject)cb_query.UNPROVIDED);
                }
            }
            else if (pcase_var.eql((SubLObject)cb_query.$kw45$ENTRY)) {
                final SubLObject entry_field_name2 = html_utilities.html_control_parameter_entry_name(property);
                alist = list_utilities.alist_enter(alist, radio_field_name, (SubLObject)ConsesLow.list(setting_number, entry_field_name2, mode_default), (SubLObject)cb_query.UNPROVIDED);
            }
            else {
                Errors.error((SubLObject)cb_query.$str408$Unexpected_inference_parameter_se, setting_type);
            }
            cdolist_list_var = cdolist_list_var.rest();
            property = cdolist_list_var.first();
        }
        cb_set_radio_buttons_script(alist);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 78162L)
    public static SubLObject cb_set_all_inference_mode_parameters_to_cb_default_radio_input(final SubLObject encoded_radio_name, final SubLObject id, final SubLObject setting_number, final SubLObject current_settingP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference_mode = conses_high.second(ConsesLow.nth(setting_number, inference_parameter_settings((SubLObject)cb_query.$kw58$INFERENCE_MODE)));
        html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_input_radio$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != id) {
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(id);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != encoded_radio_name) {
            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(encoded_radio_name);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != setting_number) {
            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_princ(setting_number);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != current_settingP) {
            html_utilities.html_simple_attribute(html_macros.$html_input_checked$.getGlobalValue());
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_space, (SubLObject)cb_query.UNPROVIDED);
        cb_set_all_inference_mode_properties_to_defaults_script(inference_mode);
        if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
            html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 78635L)
    public static SubLObject get_big_radio_field_name_regexp() {
        SubLObject string = get_one_radio_field_name_regexp(cb_query.$cb_inference_mode_properties$.getGlobalValue().first());
        SubLObject cdolist_list_var = cb_query.$cb_inference_mode_properties$.getGlobalValue().rest();
        SubLObject property = (SubLObject)cb_query.NIL;
        property = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            string = Sequences.cconcatenate(string, new SubLObject[] { cb_query.$str409$_, get_one_radio_field_name_regexp(property) });
            cdolist_list_var = cdolist_list_var.rest();
            property = cdolist_list_var.first();
        }
        return string;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 78951L)
    public static SubLObject get_one_radio_field_name_regexp(final SubLObject property) {
        return string_utilities.string_substitute((SubLObject)cb_query.$str410$_, (SubLObject)cb_query.$str411$_, html_utilities.get_encoded_form_field_name(html_utilities.html_control_parameter_radio_name(property)), (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 79166L)
    public static SubLObject get_one_entry_field_name_regexp(final SubLObject property) {
        return string_utilities.string_substitute((SubLObject)cb_query.$str410$_, (SubLObject)cb_query.$str411$_, html_utilities.get_encoded_form_field_name(html_utilities.html_control_parameter_entry_name(property)), (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 79381L)
    public static SubLObject cb_set_inference_mode_radio_to_custom_radio_input(final SubLObject encoded_radio_name, final SubLObject id, final SubLObject setting_number, final SubLObject current_settingP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference_mode_field_name = get_one_radio_field_name_regexp((SubLObject)cb_query.$kw58$INFERENCE_MODE);
        html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_input_radio$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != id) {
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(id);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != encoded_radio_name) {
            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(encoded_radio_name);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != setting_number) {
            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_princ(setting_number);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != current_settingP) {
            html_utilities.html_simple_attribute(html_macros.$html_input_checked$.getGlobalValue());
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_space, (SubLObject)cb_query.UNPROVIDED);
        cb_set_radio_button_script(inference_mode_field_name, cb_query.$inference_mode_custom_value_number$.getGlobalValue());
        if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
            html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 79844L)
    public static SubLObject cb_clear_and_set_inference_mode_radio_to_custom_radio_input(final SubLObject encoded_radio_name, final SubLObject id, final SubLObject entry_name, final SubLObject setting_number, final SubLObject current_settingP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference_mode_field_name = get_one_radio_field_name_regexp((SubLObject)cb_query.$kw58$INFERENCE_MODE);
        html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_input_radio$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != id) {
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(id);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != encoded_radio_name) {
            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(encoded_radio_name);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != setting_number) {
            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_princ(setting_number);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != current_settingP) {
            html_utilities.html_simple_attribute(html_macros.$html_input_checked$.getGlobalValue());
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_space, (SubLObject)cb_query.UNPROVIDED);
        cb_set_radio_button_script(inference_mode_field_name, (SubLObject)ConsesLow.list(cb_query.$inference_mode_custom_value_number$.getGlobalValue(), entry_name, (SubLObject)cb_query.$str6$));
        if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
            html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 80529L)
    public static SubLObject cb_focus_and_set_inference_mode_radio_to_custom_radio_input(final SubLObject encoded_radio_name, final SubLObject id, final SubLObject entry_name, final SubLObject setting_number, final SubLObject current_settingP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference_mode_field_name = get_one_radio_field_name_regexp((SubLObject)cb_query.$kw58$INFERENCE_MODE);
        html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_input_radio$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != id) {
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(id);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != encoded_radio_name) {
            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(encoded_radio_name);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != setting_number) {
            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_princ(setting_number);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != current_settingP) {
            html_utilities.html_simple_attribute(html_macros.$html_input_checked$.getGlobalValue());
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_space, (SubLObject)cb_query.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), cb_query.$cb_focus_and_set_all_radio_buttons_script$.getGlobalValue(), new SubLObject[] { entry_name, inference_mode_field_name, cb_query.$inference_mode_custom_value_number$.getGlobalValue() });
        if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
            html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 81053L)
    public static SubLObject cb_query_proof_checker_section_relevantP(final SubLObject focal_inference, final SubLObject v_properties) {
        return (SubLObject)SubLObjectFactory.makeBoolean(cb_query.NIL != cb_assertion_editor.cb_proof_checker_rules() || (cb_query.NIL != focal_inference && (cb_query.NIL != inference_datastructures_inference.inference_allowed_rules_list(focal_inference) || cb_query.NIL != inference_datastructures_inference.inference_forbidden_rules_list(focal_inference)) && cb_query.$kw226$UNSPECIFIED != v_properties && (inference_datastructures_enumerated_types.inference_query_property_lookup(v_properties, (SubLObject)cb_query.$kw413$ALLOWED_RULES).isList() || inference_datastructures_enumerated_types.inference_query_property_lookup(v_properties, (SubLObject)cb_query.$kw414$FORBIDDEN_RULES).isList())));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 81545L)
    public static SubLObject cb_extract_specified_proof_checker_rules(final SubLObject focal_inference, final SubLObject v_properties) {
        SubLObject focal_allowed_rules = (SubLObject)cb_query.$kw226$UNSPECIFIED;
        SubLObject focal_forbidden_rules = (SubLObject)cb_query.$kw226$UNSPECIFIED;
        SubLObject specified_allowed_rules = (SubLObject)cb_query.$kw226$UNSPECIFIED;
        SubLObject specified_forbidden_rules = (SubLObject)cb_query.$kw226$UNSPECIFIED;
        if (cb_query.NIL != focal_inference) {
            focal_allowed_rules = inference_datastructures_inference.inference_allowed_rules_list(focal_inference);
            focal_forbidden_rules = inference_datastructures_inference.inference_forbidden_rules_list(focal_inference);
        }
        if (cb_query.$kw226$UNSPECIFIED != v_properties) {
            specified_allowed_rules = inference_datastructures_enumerated_types.inference_query_property_lookup(v_properties, (SubLObject)cb_query.$kw413$ALLOWED_RULES);
            specified_forbidden_rules = inference_datastructures_enumerated_types.inference_query_property_lookup(v_properties, (SubLObject)cb_query.$kw414$FORBIDDEN_RULES);
        }
        cb_possibly_add_rules_to_proof_checker(focal_allowed_rules);
        cb_possibly_add_rules_to_proof_checker(focal_forbidden_rules);
        cb_possibly_add_rules_to_proof_checker(specified_allowed_rules);
        cb_possibly_add_rules_to_proof_checker(specified_forbidden_rules);
        final SubLObject proof_checker_rules = cb_assertion_editor.cb_proof_checker_rules();
        SubLObject allowed_rules = (SubLObject)cb_query.$kw415$ALL;
        SubLObject forbidden_rules = (SubLObject)cb_query.$kw416$NONE;
        if (cb_query.$kw226$UNSPECIFIED != v_properties) {
            allowed_rules = specified_allowed_rules;
            forbidden_rules = specified_forbidden_rules;
        }
        else if (cb_query.NIL != focal_inference) {
            allowed_rules = focal_allowed_rules;
            forbidden_rules = focal_forbidden_rules;
        }
        return Values.values(proof_checker_rules, allowed_rules, forbidden_rules);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 83011L)
    public static SubLObject cb_possibly_add_rules_to_proof_checker(final SubLObject rules) {
        if (rules.isList()) {
            SubLObject cdolist_list_var = rules;
            SubLObject rule = (SubLObject)cb_query.NIL;
            rule = cdolist_list_var.first();
            while (cb_query.NIL != cdolist_list_var) {
                cb_assertion_editor.cb_add_to_proof_checker_rules(rule);
                cdolist_list_var = cdolist_list_var.rest();
                rule = cdolist_list_var.first();
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 83235L)
    public static SubLObject cb_query_proof_checker_setup_section(final SubLObject focal_inference, final SubLObject v_properties) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject proof_checker_rules = cb_extract_specified_proof_checker_rules(focal_inference, v_properties);
        final SubLObject allowed_rules = thread.secondMultipleValue();
        final SubLObject forbidden_rules = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        html_utilities.html_target_definition((SubLObject)cb_query.$str256$proof_checker_section);
        dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str417$proof_checker, (SubLObject)cb_query.$str260$Show, (SubLObject)cb_query.$str261$Hide);
        final SubLObject size_val = (SubLObject)cb_query.FOUR_INTEGER;
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (cb_query.NIL != size_val) {
            html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(size_val);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            cb_princ_strong_with_explanation((SubLObject)cb_query.$str418$Proof_Checker_Setup, (SubLObject)cb_query.$str419$Specify_an_exact_set_of_rules_all, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        final SubLObject initial_visibility = (SubLObject)((cb_query.NIL != proof_checker_rules) ? cb_query.$kw239$VISIBLE : cb_query.$kw241$INVISIBLE);
        dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str417$proof_checker, initial_visibility, (SubLObject)cb_query.$kw240$PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str417$proof_checker);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.ONE_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$37 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$38 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str421$_FFDFDF);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$39 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        cb_princ_strong_with_explanation((SubLObject)cb_query.$str422$Forbidden, (SubLObject)cb_query.$str423$Forbid_the_use_of_this_rule_in_in, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                        html_script_utilities.html_anchor_set_radio_buttons_to_value((SubLObject)cb_query.$str424$_Forbid_All_, (SubLObject)cb_query.$str425$this_document_forms_0_, (SubLObject)cb_query.$str426$_rule___, (SubLObject)cb_query.$str427$forbidden);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$39, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str428$_FFFFDF);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$40 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        cb_princ_strong_with_explanation((SubLObject)cb_query.$str429$Unused, (SubLObject)cb_query.$str430$Neither_forbid_nor_allow__treat_l, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                        html_script_utilities.html_anchor_set_radio_buttons_to_value((SubLObject)cb_query.$str431$_Unuse_All_, (SubLObject)cb_query.$str425$this_document_forms_0_, (SubLObject)cb_query.$str426$_rule___, (SubLObject)cb_query.$str432$unused);
                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                        cb_utilities.cb_link((SubLObject)cb_query.$kw433$QUERY_PROOF_CHECKER_DROP_ALL, (SubLObject)cb_query.$str434$_Drop_All_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$40, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str435$_DFFFDF);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$41 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        cb_princ_strong_with_explanation((SubLObject)cb_query.$str436$Allowed, (SubLObject)cb_query.$str437$Allow_the_use_of_this_rule_in_inf, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                        html_script_utilities.html_anchor_set_radio_buttons_to_value((SubLObject)cb_query.$str438$_Allow_All_, (SubLObject)cb_query.$str425$this_document_forms_0_, (SubLObject)cb_query.$str426$_rule___, (SubLObject)cb_query.$str439$allowed);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$41, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str440$_FFFFFF);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$42 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str441$Proof_Checker_Rules);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$42, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$38, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                SubLObject list_var = (SubLObject)cb_query.NIL;
                SubLObject proof_checker_rule = (SubLObject)cb_query.NIL;
                SubLObject rule_number = (SubLObject)cb_query.NIL;
                list_var = proof_checker_rules;
                proof_checker_rule = list_var.first();
                for (rule_number = (SubLObject)cb_query.ZERO_INTEGER; cb_query.NIL != list_var; list_var = list_var.rest(), proof_checker_rule = list_var.first(), rule_number = Numbers.add((SubLObject)cb_query.ONE_INTEGER, rule_number)) {
                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$43 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        final SubLObject rule_status = cb_proof_checker_rule_status(proof_checker_rule, allowed_rules, forbidden_rules);
                        final SubLObject radio_name = cb_query_proof_checker_input_name(rule_number);
                        final SubLObject encoded_radio_name = html_utilities.get_encoded_form_field_name(radio_name);
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str421$_FFDFDF);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$44 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_radio_input(encoded_radio_name, (SubLObject)cb_query.$str427$forbidden, Equality.eq(rule_status, (SubLObject)cb_query.$kw442$FORBIDDEN), (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$44, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str428$_FFFFDF);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$45 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_radio_input(encoded_radio_name, (SubLObject)cb_query.$str432$unused, Equality.eq(rule_status, (SubLObject)cb_query.$kw443$UNUSED), (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                            cb_utilities.cb_link((SubLObject)cb_query.$kw444$QUERY_PROOF_CHECKER_DROP, proof_checker_rule, (SubLObject)cb_query.$str445$_Drop_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$45, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str435$_DFFFDF);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$46 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_radio_input(encoded_radio_name, (SubLObject)cb_query.$str439$allowed, Equality.eq(rule_status, (SubLObject)cb_query.$kw446$ALLOWED), (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$46, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str440$_FFFFFF);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$47 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            cb_utilities.cb_show_assertion_readably(proof_checker_rule, (SubLObject)cb_query.T, (SubLObject)cb_query.T);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$47, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$43, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                }
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$37, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 86278L)
    public static SubLObject cb_query_proof_checker_input_name(final SubLObject rule_number) {
        return Sequences.cconcatenate((SubLObject)cb_query.$str447$rule_, format_nil.format_nil_a_no_copy(rule_number));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 86387L)
    public static SubLObject cb_proof_checker_rule_status(final SubLObject proof_checker_rule, final SubLObject allowed_rules, final SubLObject forbidden_rules) {
        if (cb_query.$kw415$ALL == allowed_rules) {
            if (cb_query.$kw416$NONE == forbidden_rules) {
                return (SubLObject)cb_query.$kw443$UNUSED;
            }
            if (cb_query.NIL != subl_promotions.memberP(proof_checker_rule, forbidden_rules, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED)) {
                return (SubLObject)cb_query.$kw442$FORBIDDEN;
            }
            return (SubLObject)cb_query.$kw443$UNUSED;
        }
        else {
            if (cb_query.NIL != subl_promotions.memberP(proof_checker_rule, allowed_rules, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED)) {
                return (SubLObject)cb_query.$kw446$ALLOWED;
            }
            return (SubLObject)cb_query.$kw443$UNUSED;
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 86764L)
    public static SubLObject cb_query_extract_proof_checker_parameters(final SubLObject args) {
        final SubLObject proof_checker_rules = cb_assertion_editor.cb_proof_checker_rules();
        SubLObject forbidden_rules = (SubLObject)cb_query.NIL;
        SubLObject unused_rules = (SubLObject)cb_query.NIL;
        SubLObject allowed_rules = (SubLObject)cb_query.NIL;
        SubLObject list_var = (SubLObject)cb_query.NIL;
        SubLObject proof_checker_rule = (SubLObject)cb_query.NIL;
        SubLObject rule_number = (SubLObject)cb_query.NIL;
        list_var = proof_checker_rules;
        proof_checker_rule = list_var.first();
        for (rule_number = (SubLObject)cb_query.ZERO_INTEGER; cb_query.NIL != list_var; list_var = list_var.rest(), proof_checker_rule = list_var.first(), rule_number = Numbers.add((SubLObject)cb_query.ONE_INTEGER, rule_number)) {
            final SubLObject input_name = cb_query_proof_checker_input_name(rule_number);
            final SubLObject rule_choice = html_utilities.extract_encoded_form_field_value(input_name, args);
            if (rule_choice.equal((SubLObject)cb_query.$str427$forbidden)) {
                forbidden_rules = (SubLObject)ConsesLow.cons(proof_checker_rule, forbidden_rules);
            }
            else if (rule_choice.equal((SubLObject)cb_query.$str439$allowed)) {
                allowed_rules = (SubLObject)ConsesLow.cons(proof_checker_rule, allowed_rules);
            }
            else {
                unused_rules = (SubLObject)ConsesLow.cons(proof_checker_rule, unused_rules);
            }
        }
        forbidden_rules = Sequences.nreverse(forbidden_rules);
        allowed_rules = Sequences.nreverse(allowed_rules);
        if (cb_query.NIL != allowed_rules) {
            return Values.values(allowed_rules, (SubLObject)cb_query.$kw416$NONE);
        }
        if (cb_query.NIL != forbidden_rules) {
            return Values.values((SubLObject)cb_query.$kw415$ALL, forbidden_rules);
        }
        return Values.values((SubLObject)cb_query.$kw415$ALL, (SubLObject)cb_query.$kw416$NONE);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 87756L)
    public static SubLObject cb_show_problem_store_properties(final SubLObject store) {
        html_utilities.html_target_definition((SubLObject)cb_query.$str253$parameters_section);
        cb_princ_strong_with_explanation((SubLObject)cb_query.$str389$Problem_Store_Static_Properties, (SubLObject)cb_query.$str448$Properties_which_must_remain_cons, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        final SubLObject v_properties = inference_datastructures_problem_store.problem_store_static_properties(store);
        cb_query_show_inference_properties(cb_query.$cb_advanced_problem_store_static_properties$.getGlobalValue(), (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, v_properties, (SubLObject)cb_query.TWO_INTEGER, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_princ_strong((SubLObject)cb_query.$str449$Other_Problem_Store_Properties);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_princ_strong((SubLObject)cb_query.$str450$Destruction_Imminent__);
        cb_utilities.cb_show_boolean(inference_datastructures_problem_store.problem_store_destruction_imminentP(store));
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_princ_strong((SubLObject)cb_query.$str451$Memoization_state___);
        cb_utilities.cb_link((SubLObject)cb_query.$kw452$PROBLEM_STORE_MEMOIZATION_STATE, store, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_princ_strong((SubLObject)cb_query.$str453$Janitor___);
        cb_utilities.cb_link((SubLObject)cb_query.$kw454$PROBLEM_STORE_JANITOR, store, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != inference_datastructures_problem_store.problem_store_could_recompute_destructiblesP(store)) {
            cb_utilities.cb_link((SubLObject)cb_query.$kw455$RECOMPUTE_DESTRUCTIBLES, store, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != inference_datastructures_problem_store.problem_store_could_remove_destructiblesP(store)) {
            cb_utilities.cb_link((SubLObject)cb_query.$kw456$REMOVE_DESTRUCTIBLES, store, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 89177L)
    public static SubLObject cb_query_proof_checker_drop(final SubLObject args) {
        final SubLObject assertion = cb_utilities.cb_guess_assertion(args);
        if (cb_query.NIL == assertion_handles.assertion_p(assertion)) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str457$_a_does_not_specify_an_assertion, args, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL == assertions_high.rule_assertionP(assertion)) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str458$Assertion_specified_was_not_a_rul, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        cb_assertion_editor.cb_delete_from_proof_checker_rules(assertion);
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 89656L)
    public static SubLObject cb_link_query_proof_checker_drop(final SubLObject assertion, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str445$_Drop_;
        }
        assert cb_query.NIL != assertion_handles.assertion_p(assertion) : assertion;
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        cyc_file_dependencies.javascript((SubLObject)cb_query.$kw461$OVERLIB);
        if (cb_query.$str462$No_longer_consider_this_rule_as_b.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover((SubLObject)cb_query.$str462$No_longer_consider_this_rule_as_b, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str463$cb_query_proof_checker_drop__A, assertion_handles.assertion_id(assertion));
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return assertion;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 90060L)
    public static SubLObject cb_query_proof_checker_drop_all(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        cb_assertion_editor.cb_delete_all_proof_checker_rules();
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 90314L)
    public static SubLObject cb_link_query_proof_checker_drop_all(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str434$_Drop_All_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        cyc_file_dependencies.javascript((SubLObject)cb_query.$kw461$OVERLIB);
        if (cb_query.$str466$No_longer_consider_any_of_these_r.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover((SubLObject)cb_query.$str466$No_longer_consider_any_of_these_r, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            html_utilities.html_princ((SubLObject)cb_query.$str467$cb_query_proof_checker_drop_all);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 90657L)
    public static SubLObject cb_handle_query(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject inference_method = cb_query_extract_inference_method(args);
        SubLObject v_inference_parameters = (SubLObject)cb_query.NIL;
        SubLObject parameter_error = (SubLObject)cb_query.NIL;
        final SubLObject pcase_var = inference_method;
        if (pcase_var.eql((SubLObject)cb_query.$kw469$CONTINUE) || pcase_var.eql((SubLObject)cb_query.$kw470$FOLLOWUP)) {
            thread.resetMultipleValues();
            final SubLObject v_inference_parameters_$48 = cb_query_extract_parameters(args, (SubLObject)cb_query.T, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject parameter_error_$49 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            v_inference_parameters = v_inference_parameters_$48;
            parameter_error = parameter_error_$49;
        }
        else if (pcase_var.eql((SubLObject)cb_query.$kw471$NEW) || pcase_var.eql((SubLObject)cb_query.$kw472$SAVE_PARAMETERS)) {
            thread.resetMultipleValues();
            final SubLObject v_inference_parameters_$49 = cb_query_extract_parameters(args, (SubLObject)cb_query.NIL, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject parameter_error_$50 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            v_inference_parameters = v_inference_parameters_$49;
            parameter_error = parameter_error_$50;
        }
        else if (pcase_var.eql((SubLObject)cb_query.$kw473$LOAD_PARAMETERS)) {
            if (cb_query.NIL != cb_query.$cb_default_query_parameters$.getDynamicValue(thread)) {
                v_inference_parameters = cb_query.$cb_default_query_parameters$.getDynamicValue(thread);
            }
            else {
                v_inference_parameters = (SubLObject)cb_query.$kw226$UNSPECIFIED;
            }
        }
        else if (pcase_var.eql((SubLObject)cb_query.$kw474$RESET_PARAMETERS)) {
            thread.resetMultipleValues();
            final SubLObject v_inference_parameters_$50 = cb_query_extract_parameters(args, (SubLObject)cb_query.NIL, (SubLObject)cb_query.T);
            final SubLObject parameter_error_$51 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            v_inference_parameters = v_inference_parameters_$50;
            parameter_error = parameter_error_$51;
        }
        else {
            if (!pcase_var.eql((SubLObject)cb_query.$kw475$STRENGTHEN_PARAMETERS)) {
                return cb_utilities.cb_error((SubLObject)cb_query.$str476$Unknown_inference_method__how_did, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            thread.resetMultipleValues();
            final SubLObject v_inference_parameters_$51 = cb_query_extract_parameters(args, (SubLObject)cb_query.NIL, (SubLObject)cb_query.T);
            final SubLObject parameter_error_$52 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            v_inference_parameters = v_inference_parameters_$51;
            parameter_error = parameter_error_$52;
        }
        if (cb_query.NIL != parameter_error) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str477$_A, parameter_error, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.$kw469$CONTINUE == inference_method) {
            final SubLObject inference = cb_query_extract_inference(args);
            if (cb_query.NIL == inference_datastructures_inference.continuable_inference_p(inference)) {
                return cb_utilities.cb_error((SubLObject)cb_query.$str478$That_inference_is_no_longer_conti, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            cb_query_continue(inference, v_inference_parameters);
            return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
        }
        else {
            if (cb_query.$kw472$SAVE_PARAMETERS == inference_method) {
                cb_save_inference_parameter_defaults(v_inference_parameters);
                return cb_query_internal((SubLObject)ConsesLow.list((SubLObject)cb_query.$kw228$PROPERTIES, v_inference_parameters));
            }
            if (cb_query.$kw473$LOAD_PARAMETERS == inference_method) {
                return cb_query_internal((SubLObject)ConsesLow.list((SubLObject)cb_query.$kw228$PROPERTIES, v_inference_parameters));
            }
            if (cb_query.$kw474$RESET_PARAMETERS == inference_method) {
                return cb_query_internal((SubLObject)cb_query.$list479);
            }
            thread.resetMultipleValues();
            SubLObject mt = cb_form_widgets.cb_extract_mt_input(args, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject mt_error = thread.secondMultipleValue();
            final SubLObject mt_error_string = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (cb_query.NIL != mt_error) {
                return cb_form_widgets.cb_mt_error(mt_error, mt_error_string);
            }
            thread.resetMultipleValues();
            SubLObject sentence = cb_extract_query_sentence_input(args, (SubLObject)cb_query.$list480);
            final SubLObject sentence_error = thread.secondMultipleValue();
            final SubLObject sentence_error_string = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (cb_query.NIL != sentence_error) {
                return cb_form_widgets.cb_el_sentence_error(sentence_error, sentence_error_string, (SubLObject)cb_query.$list481);
            }
            thread.resetMultipleValues();
            SubLObject non_explanatory_sentence = cb_extract_query_sentence_input(args, (SubLObject)cb_query.$list482);
            final SubLObject non_explanatory_sentence_error = thread.secondMultipleValue();
            final SubLObject non_explanatory_sentence_error_string = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (cb_query.NIL != non_explanatory_sentence_error) {
                return cb_form_widgets.cb_el_sentence_error(non_explanatory_sentence_error, non_explanatory_sentence_error_string, (SubLObject)cb_query.$list483);
            }
            thread.resetMultipleValues();
            final SubLObject query_spec = cb_query_extract_query_or_test_spec(args);
            final SubLObject test_spec = thread.secondMultipleValue();
            final SubLObject query_or_test_spec_error = thread.thirdMultipleValue();
            thread.resetMultipleValues();
            if (cb_query.NIL != query_or_test_spec_error) {
                return cb_utilities.cb_error((SubLObject)cb_query.$str477$_A, query_or_test_spec_error, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            thread.resetMultipleValues();
            final SubLObject sentence_$56 = cb_query_preprocess_arguments(sentence, mt, non_explanatory_sentence, v_inference_parameters);
            final SubLObject mt_$57 = thread.secondMultipleValue();
            final SubLObject non_explanatory_sentence_$58 = thread.thirdMultipleValue();
            final SubLObject v_inference_parameters_$52 = thread.fourthMultipleValue();
            thread.resetMultipleValues();
            sentence = sentence_$56;
            mt = mt_$57;
            non_explanatory_sentence = non_explanatory_sentence_$58;
            v_inference_parameters = v_inference_parameters_$52;
            final SubLObject pcase_var2 = inference_method;
            if (pcase_var2.eql((SubLObject)cb_query.$kw471$NEW)) {
                final SubLObject new_inference = cb_query_new(sentence, mt, non_explanatory_sentence, v_inference_parameters);
                if (cb_query.NIL != query_spec) {
                    cb_kb_query.kbq_register_query_spec_of_inference(new_inference, query_spec);
                }
                if (cb_query.NIL != test_spec) {
                    cb_kct_test.kct_register_test_spec_of_inference(new_inference, test_spec);
                }
                cb_note_focal_inference(new_inference);
                return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
            }
            if (pcase_var2.eql((SubLObject)cb_query.$kw470$FOLLOWUP)) {
                final SubLObject inference2 = cb_query_extract_inference(args);
                final SubLObject followup_inference = cb_query_new_followup(inference2, sentence, mt, non_explanatory_sentence, v_inference_parameters);
                cb_note_focal_inference(followup_inference);
                return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
            }
            if (pcase_var2.eql((SubLObject)cb_query.$kw475$STRENGTHEN_PARAMETERS)) {
                final SubLObject inference2 = cb_query_extract_inference(args);
                final SubLObject strengthened_parameters = inference_parameters.inference_compute_all_answers_query_properties(inference2);
                return cb_parameter_strengthened_query(sentence, mt, strengthened_parameters, non_explanatory_sentence);
            }
            return cb_utilities.cb_error((SubLObject)cb_query.$str476$Unknown_inference_method__how_did, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 95281L)
    public static SubLObject cb_extract_query_sentence_input(final SubLObject args, SubLObject input_options) {
        if (input_options == cb_query.UNPROVIDED) {
            input_options = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject sentence = cb_form_widgets.cb_extract_el_sentence_input(args, input_options);
        final SubLObject sentence_error = thread.secondMultipleValue();
        final SubLObject input_string = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        if (cb_query.NIL == sentence_error) {}
        return Values.values(sentence, sentence_error, input_string);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 95800L)
    public static SubLObject cb_query_preprocess_arguments(SubLObject sentence, final SubLObject mt, final SubLObject non_explanatory_sentence, SubLObject v_inference_parameters) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL != cb_parameters.$cb_perform_argumentation_for_closed_queryP$.getDynamicValue(thread) && cb_query.NIL != el_utilities.closedP(sentence, (SubLObject)cb_query.UNPROVIDED)) {
            v_inference_parameters = conses_high.putf(v_inference_parameters, (SubLObject)cb_query.$kw158$TRANSFORMATION_ALLOWED_, (SubLObject)cb_query.T);
            SubLObject max_transformation_depth = inference_datastructures_enumerated_types.inference_properties_max_transformation_depth(v_inference_parameters);
            max_transformation_depth = Numbers.add(max_transformation_depth, (SubLObject)cb_query.ONE_INTEGER);
            v_inference_parameters = conses_high.putf(v_inference_parameters, (SubLObject)cb_query.$kw65$MAX_TRANSFORMATION_DEPTH, max_transformation_depth);
            final SubLObject el_var = czer_utilities.unique_el_var_wrt_expression(sentence, (SubLObject)cb_query.$sym485$_TRUTH);
            sentence = (SubLObject)ConsesLow.list(cb_query.$const486$sentenceTruth, sentence, el_var);
        }
        return Values.values(sentence, mt, non_explanatory_sentence, v_inference_parameters);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 96834L)
    public static SubLObject cb_query_extract_inference_method(final SubLObject args) {
        if (cb_query.NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input((SubLObject)cb_query.$str358$continue, args))) {
            return (SubLObject)cb_query.$kw469$CONTINUE;
        }
        if (cb_query.NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input((SubLObject)cb_query.$str315$new, args))) {
            return (SubLObject)cb_query.$kw471$NEW;
        }
        if (cb_query.NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input((SubLObject)cb_query.$str312$followup, args))) {
            return (SubLObject)cb_query.$kw470$FOLLOWUP;
        }
        if (cb_query.NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input((SubLObject)cb_query.$str361$save_parameters, args))) {
            return (SubLObject)cb_query.$kw472$SAVE_PARAMETERS;
        }
        if (cb_query.NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input((SubLObject)cb_query.$str364$load_parameters, args))) {
            return (SubLObject)cb_query.$kw473$LOAD_PARAMETERS;
        }
        if (cb_query.NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input((SubLObject)cb_query.$str367$reset_parameters, args))) {
            return (SubLObject)cb_query.$kw474$RESET_PARAMETERS;
        }
        if (cb_query.NIL != list_utilities.sublisp_boolean(html_utilities.html_extract_input((SubLObject)cb_query.$str370$strengthen_parameters, args))) {
            return (SubLObject)cb_query.$kw475$STRENGTHEN_PARAMETERS;
        }
        return (SubLObject)cb_query.$kw487$UNKNOWN;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 97509L)
    public static SubLObject cb_query_extract_inference(final SubLObject args) {
        final SubLObject store_id_string = html_utilities.html_extract_input((SubLObject)cb_query.$str280$focal_problem_store, args);
        final SubLObject inference_id_string = html_utilities.html_extract_input((SubLObject)cb_query.$str281$focal_inference, args);
        return cb_guess_inference(store_id_string, inference_id_string);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 97783L)
    public static SubLObject cb_query_extract_parameters(final SubLObject args, final SubLObject use_focal_inferenceP, SubLObject use_query_tool_defaultP) {
        if (use_query_tool_defaultP == cb_query.UNPROVIDED) {
            use_query_tool_defaultP = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        SubLObject v_inference_parameters = cb_query_extract_inference_parameters_from_args_or_focal_inference(args, use_focal_inferenceP, use_query_tool_defaultP);
        final SubLObject parameter_error = thread.secondMultipleValue();
        thread.resetMultipleValues();
        if (cb_query.NIL != parameter_error) {
            return Values.values((SubLObject)cb_query.NIL, parameter_error);
        }
        thread.resetMultipleValues();
        final SubLObject allowed_rules = cb_query_extract_proof_checker_parameters(args);
        final SubLObject forbidden_rules = thread.secondMultipleValue();
        thread.resetMultipleValues();
        v_inference_parameters = conses_high.putf(v_inference_parameters, (SubLObject)cb_query.$kw413$ALLOWED_RULES, allowed_rules);
        v_inference_parameters = conses_high.putf(v_inference_parameters, (SubLObject)cb_query.$kw414$FORBIDDEN_RULES, forbidden_rules);
        return Values.values(v_inference_parameters, parameter_error);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 98539L)
    public static SubLObject cb_query_extract_inference_parameters_from_args_or_focal_inference(final SubLObject args, final SubLObject use_focal_inferenceP, final SubLObject use_query_tool_defaultP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        final SubLObject datum = current = cb_inferences();
        final SubLObject focal_inference = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list209);
        final SubLObject other_inferences;
        current = (other_inferences = current.rest());
        SubLObject result = (SubLObject)cb_query.NIL;
        SubLObject cdolist_list_var = cb_all_inference_parameters();
        SubLObject parameter = (SubLObject)cb_query.NIL;
        parameter = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            thread.resetMultipleValues();
            final SubLObject value = cb_query_extract_inference_parameter_value(parameter, args, focal_inference, use_focal_inferenceP, use_query_tool_defaultP);
            final SubLObject error_message = thread.secondMultipleValue();
            thread.resetMultipleValues();
            if (cb_query.NIL != error_message) {
                return Values.values((SubLObject)cb_query.NIL, error_message);
            }
            result = (SubLObject)ConsesLow.cons(parameter, result);
            result = (SubLObject)ConsesLow.cons(value, result);
            cdolist_list_var = cdolist_list_var.rest();
            parameter = cdolist_list_var.first();
        }
        return Values.values(Sequences.nreverse(result), (SubLObject)cb_query.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 99177L)
    public static SubLObject cb_query_extract_inference_parameter_value(final SubLObject parameter, final SubLObject args, final SubLObject focal_inference, final SubLObject use_focal_inferenceP, final SubLObject use_query_tool_defaultP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == inference_parameter_p(parameter)) {
            return Values.values((SubLObject)cb_query.NIL, Sequences.cconcatenate(format_nil.format_nil_s_no_copy(parameter), (SubLObject)cb_query.$str488$_is_not_an_inference_parameter_));
        }
        if (cb_query.NIL != use_query_tool_defaultP) {
            if (cb_query.NIL != focal_inference) {
                return Values.values(inference_utilities.inference_property_lookup(focal_inference, parameter, (SubLObject)cb_query.NIL), (SubLObject)cb_query.NIL);
            }
            final SubLObject property_spec = Sequences.find(parameter, cb_query.$cb_all_inference_properties$.getGlobalValue(), Symbols.symbol_function((SubLObject)cb_query.EQ), Symbols.symbol_function((SubLObject)cb_query.$sym379$FIRST), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != property_spec) {
                return possibly_scale_value_on_input(conses_high.second(property_spec), parameter);
            }
        }
        final SubLObject fancy_name = inference_parameter_fancy_name(parameter);
        final SubLObject settings = inference_parameter_settings(parameter);
        final SubLObject radio_name = html_utilities.html_control_parameter_radio_name(parameter);
        SubLObject radio_choice = (SubLObject)cb_query.NIL;
        final SubLObject _prev_bind_0 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
        try {
            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.get_form_field_code(args), thread);
            radio_choice = html_utilities.extract_encoded_form_field_value(radio_name, args);
        }
        finally {
            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_0, thread);
        }
        if (cb_query.NIL != radio_choice) {
            final SubLObject setting = ConsesLow.nth(reader.read_from_string_ignoring_errors(radio_choice, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), settings);
            SubLObject current;
            final SubLObject datum = current = setting;
            SubLObject method = (SubLObject)cb_query.NIL;
            SubLObject datum_$60 = (SubLObject)cb_query.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list489);
            method = current.first();
            current = current.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list489);
            datum_$60 = current.first();
            current = current.rest();
            final SubLObject explanation = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
            cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list489);
            current = current.rest();
            if (cb_query.NIL == current) {
                final SubLObject pcase_var = method;
                if (pcase_var.eql((SubLObject)cb_query.$kw44$VALUE)) {
                    return Values.values(possibly_scale_value_on_input(datum_$60, parameter), (SubLObject)cb_query.NIL);
                }
                if (pcase_var.eql((SubLObject)cb_query.$kw45$ENTRY)) {
                    final SubLObject entry_name = html_utilities.html_control_parameter_entry_name(parameter);
                    final SubLObject entry_string = html_utilities.html_extract_input(entry_name, args);
                    if (cb_query.NIL == entry_string) {
                        return Values.values((SubLObject)cb_query.NIL, Sequences.cconcatenate((SubLObject)cb_query.$str490$No_value_was_entered_for__, new SubLObject[] { format_nil.format_nil_a_no_copy(fancy_name), cb_query.$str491$__ }));
                    }
                    if (cb_query.NIL != Functions.funcall(datum_$60, entry_string)) {
                        return Values.values(entry_string, (SubLObject)cb_query.NIL);
                    }
                    final SubLObject value = reader.read_from_string_ignoring_errors(entry_string, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                    if (cb_query.NIL == Functions.funcall(datum_$60, value)) {
                        return Values.values((SubLObject)cb_query.NIL, Sequences.cconcatenate((SubLObject)cb_query.$str492$The_value_entered_for__, new SubLObject[] { format_nil.format_nil_a_no_copy(fancy_name), cb_query.$str493$__was_not_valid_ }));
                    }
                    return Values.values(possibly_scale_value_on_input(value, parameter), (SubLObject)cb_query.NIL);
                }
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list489);
            }
            return (SubLObject)cb_query.NIL;
        }
        if (cb_query.NIL != use_focal_inferenceP) {
            return Values.values(inference_utilities.inference_property_lookup(focal_inference, parameter, (SubLObject)cb_query.NIL), (SubLObject)cb_query.NIL);
        }
        if (cb_query.$kw58$INFERENCE_MODE == parameter) {
            return Values.values(inference_datastructures_enumerated_types.$default_inference_mode$.getGlobalValue(), (SubLObject)cb_query.NIL);
        }
        return Values.values((SubLObject)cb_query.NIL, Sequences.cconcatenate((SubLObject)cb_query.$str494$No_choice_was_made_for__, new SubLObject[] { format_nil.format_nil_a_no_copy(fancy_name), cb_query.$str491$__ }));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 101580L)
    public static SubLObject cb_query_extract_query_or_test_spec(final SubLObject args) {
        final SubLObject query_spec_id_string = html_utilities.html_extract_input((SubLObject)cb_query.$str317$query_spec, args);
        final SubLObject test_spec_id_string = html_utilities.html_extract_input((SubLObject)cb_query.$str318$test_spec, args);
        SubLObject query_spec = (SubLObject)cb_query.NIL;
        SubLObject test_spec = (SubLObject)cb_query.NIL;
        SubLObject error = (SubLObject)cb_query.NIL;
        if (cb_query.NIL != query_spec_id_string) {
            query_spec = cb_utilities.cb_guess_term(query_spec_id_string, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != query_spec) {
                if (cb_query.NIL == kb_query.kbq_query_spec_p(query_spec)) {
                    error = Sequences.cconcatenate((SubLObject)cb_query.$str495$The_ID__, new SubLObject[] { format_nil.format_nil_a_no_copy(query_spec_id_string), cb_query.$str496$__does_not_denote_a_CycLQuerySpec });
                }
            }
            else {
                error = Sequences.cconcatenate((SubLObject)cb_query.$str497$The_query_spec_ID__, new SubLObject[] { format_nil.format_nil_a_no_copy(query_spec_id_string), cb_query.$str498$__does_not_denote_a_FORT_ });
            }
        }
        if (cb_query.NIL != test_spec_id_string) {
            test_spec = cb_utilities.cb_guess_term(test_spec_id_string, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != test_spec) {
                if (cb_query.NIL == kct_utils.kct_test_spec_p(test_spec, (SubLObject)cb_query.UNPROVIDED)) {
                    error = Sequences.cconcatenate((SubLObject)cb_query.$str495$The_ID__, new SubLObject[] { format_nil.format_nil_a_no_copy(test_spec_id_string), cb_query.$str499$__does_not_denote_a_KBContentTest });
                }
            }
            else {
                error = Sequences.cconcatenate((SubLObject)cb_query.$str500$The_test_spec_ID__, new SubLObject[] { format_nil.format_nil_a_no_copy(test_spec_id_string), cb_query.$str498$__does_not_denote_a_FORT_ });
            }
        }
        return Values.values(query_spec, test_spec, error);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 102710L)
    public static SubLObject cb_new_cyc_query(final SubLObject sentence, SubLObject mt, SubLObject query_properties) {
        if (mt == cb_query.UNPROVIDED) {
            mt = (SubLObject)cb_query.NIL;
        }
        if (query_properties == cb_query.UNPROVIDED) {
            query_properties = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        query_properties = conses_high.copy_list(query_properties);
        query_properties = conses_high.putf(query_properties, (SubLObject)cb_query.$kw501$BROWSABLE_, (SubLObject)cb_query.T);
        thread.resetMultipleValues();
        final SubLObject answers = inference_kernel.new_cyc_query(sentence, mt, query_properties);
        final SubLObject suspend_status = thread.secondMultipleValue();
        final SubLObject inference = thread.thirdMultipleValue();
        thread.resetMultipleValues();
        cb_note_focal_inference(inference);
        cb_show_inference_with_status_and_all_answers(inference);
        return Values.values(answers, suspend_status, inference);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 103461L)
    public static SubLObject cb_socratic_query(final SubLObject sentence, SubLObject mt, SubLObject v_properties) {
        if (mt == cb_query.UNPROVIDED) {
            mt = (SubLObject)cb_query.NIL;
        }
        if (v_properties == cb_query.UNPROVIDED) {
            v_properties = (SubLObject)cb_query.NIL;
        }
        return cb_query_internal((SubLObject)ConsesLow.list((SubLObject)cb_query.$kw222$TITLE, (SubLObject)cb_query.$str502$Socratic_Query, (SubLObject)cb_query.$kw225$SENTENCE, sentence, (SubLObject)cb_query.$kw227$MT, mt, (SubLObject)cb_query.$kw228$PROPERTIES, v_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 103688L)
    public static SubLObject cb_similar_query(final SubLObject sentence, SubLObject mt, SubLObject v_properties) {
        if (mt == cb_query.UNPROVIDED) {
            mt = (SubLObject)cb_query.NIL;
        }
        if (v_properties == cb_query.UNPROVIDED) {
            v_properties = (SubLObject)cb_query.NIL;
        }
        return cb_query_internal((SubLObject)ConsesLow.list((SubLObject)cb_query.$kw222$TITLE, (SubLObject)cb_query.$str503$Similar_Query, (SubLObject)cb_query.$kw225$SENTENCE, sentence, (SubLObject)cb_query.$kw227$MT, mt, (SubLObject)cb_query.$kw228$PROPERTIES, v_properties));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 103912L)
    public static SubLObject cb_link_assertion_similar_query(final SubLObject assertion, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str504$_Query_Similar_;
        }
        assert cb_query.NIL != assertion_handles.assertion_p(assertion) : assertion;
        final SubLObject id = assertion_handles.assertion_id(assertion);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str505$cb_assertion_similar_query__A, id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return assertion;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 104258L)
    public static SubLObject cb_assertion_similar_query(final SubLObject args) {
        final SubLObject assertion = cb_utilities.cb_guess_assertion(args);
        if (cb_query.NIL == assertion) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str508$The_assertion_is_not_available_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        final SubLObject sentence = uncanonicalizer.assertion_el_formula(assertion);
        final SubLObject mt = assertions_high.assertion_mt(assertion);
        return cb_similar_query(sentence, mt, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 104585L)
    public static SubLObject cb_antecedent_query(final SubLObject sentence, SubLObject mt, SubLObject non_explanatory_sentence) {
        if (mt == cb_query.UNPROVIDED) {
            mt = (SubLObject)cb_query.NIL;
        }
        if (non_explanatory_sentence == cb_query.UNPROVIDED) {
            non_explanatory_sentence = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject query_properties = (SubLObject)ConsesLow.list(new SubLObject[] { cb_query.$kw50$MAX_TIME, cb_query.NIL, cb_query.$kw54$MAX_STEP, cb_query.NIL, cb_query.$kw58$INFERENCE_MODE, cb_query.$kw510$CUSTOM, cb_query.$kw171$DIRECTION, cb_query.$kw511$FORWARD, cb_query.$kw158$TRANSFORMATION_ALLOWED_, cb_query.NIL, cb_query.$kw111$ALLOW_INDETERMINATE_RESULTS_, cb_query.T, cb_query.$kw133$PRODUCTIVITY_LIMIT, ask_utilities.productivity_limit_from_removal_cost_cutoff(control_vars.$forward_inference_removal_cost_cutoff$.getDynamicValue(thread)), cb_query.$kw121$RESULT_UNIQUENESS, cb_query.$kw512$PROOF });
        return cb_query_internal((SubLObject)ConsesLow.listS((SubLObject)cb_query.$kw222$TITLE, new SubLObject[] { cb_query.$str513$Antecedent_Query, cb_query.$kw225$SENTENCE, sentence, cb_query.$kw227$MT, mt, cb_query.$kw228$PROPERTIES, query_properties, (cb_query.NIL != non_explanatory_sentence) ? ConsesLow.list((SubLObject)cb_query.$kw191$NON_EXPLANATORY_SENTENCE, non_explanatory_sentence) : cb_query.NIL }));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 105288L)
    public static SubLObject cb_link_antecedent_query(final SubLObject assertion, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str514$_Antecedent_Query_;
        }
        assert cb_query.NIL != assertion_handles.assertion_p(assertion) : assertion;
        final SubLObject id = assertion_handles.assertion_id(assertion);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str515$cb_assertion_antecedent_query__A, id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return assertion;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 105633L)
    public static SubLObject cb_assertion_antecedent_query(final SubLObject args) {
        final SubLObject assertion = cb_utilities.cb_guess_assertion(args);
        if (cb_query.NIL == assertion) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str508$The_assertion_is_not_available_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        final SubLObject sentence = assertion_utilities.assertion_antecedent_query_formula(assertion);
        final SubLObject mt = cb_query.$const324$InferencePSC;
        final SubLObject non_explanatory_sentence = rule_pragmatic_query_formula(assertion, (SubLObject)cb_query.UNPROVIDED);
        return cb_antecedent_query(sentence, mt, non_explanatory_sentence);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 106134L)
    public static SubLObject rule_pragmatic_query_formula(final SubLObject rule, SubLObject mt) {
        if (mt == cb_query.UNPROVIDED) {
            mt = (SubLObject)cb_query.NIL;
        }
        if (cb_query.NIL == mt) {
            mt = assertions_high.assertion_mt(rule);
        }
        final SubLObject dnf = inference_worker_transformation.backward_rule_pragmatic_dnf(rule, mt);
        final SubLObject hl_query_formula = clauses.dnf_formula(dnf);
        final SubLObject hl_to_el_variable_map = assertions_high.assertion_hl_to_el_variable_map(rule);
        final SubLObject el_query_formula = bindings.apply_bindings(hl_to_el_variable_map, hl_query_formula);
        return el_query_formula;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 106579L)
    public static SubLObject cb_known_extent_query(final SubLObject sentence, SubLObject mt, SubLObject non_explanatory_sentence) {
        if (mt == cb_query.UNPROVIDED) {
            mt = (SubLObject)cb_query.NIL;
        }
        if (non_explanatory_sentence == cb_query.UNPROVIDED) {
            non_explanatory_sentence = (SubLObject)cb_query.NIL;
        }
        return cb_query_internal((SubLObject)ConsesLow.listS((SubLObject)cb_query.$kw222$TITLE, new SubLObject[] { cb_query.$str519$Known_Extent_Query, cb_query.$kw225$SENTENCE, sentence, cb_query.$kw227$MT, mt, (cb_query.NIL != non_explanatory_sentence) ? ConsesLow.list((SubLObject)cb_query.$kw191$NON_EXPLANATORY_SENTENCE, non_explanatory_sentence) : cb_query.NIL }));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 106899L)
    public static SubLObject cb_link_rule_known_extent_query(final SubLObject rule, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str520$_Known_Extent_Query_;
        }
        assert cb_query.NIL != assertions_high.rule_assertionP(rule) : rule;
        final SubLObject id = assertion_handles.assertion_id(rule);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str522$cb_rule_known_extent_query__A, id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return rule;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 107234L)
    public static SubLObject cb_rule_known_extent_query(final SubLObject args) {
        final SubLObject rule = cb_utilities.cb_guess_assertion(args);
        if (cb_query.NIL == rule) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str525$The_rule_is_not_available_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        final SubLObject sentence = assertion_utilities.assertion_known_extent_query_formula(rule);
        final SubLObject mt = cb_query.$cb_default_unspecified_query_mt$.getGlobalValue();
        final SubLObject non_explanatory_sentence = rule_pragmatic_query_formula(rule, (SubLObject)cb_query.UNPROVIDED);
        return cb_known_extent_query(sentence, mt, non_explanatory_sentence);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 107730L)
    public static SubLObject cb_unknown_extent_query(final SubLObject sentence, SubLObject mt, SubLObject non_explanatory_sentence) {
        if (mt == cb_query.UNPROVIDED) {
            mt = (SubLObject)cb_query.NIL;
        }
        if (non_explanatory_sentence == cb_query.UNPROVIDED) {
            non_explanatory_sentence = (SubLObject)cb_query.NIL;
        }
        return cb_query_internal((SubLObject)ConsesLow.listS((SubLObject)cb_query.$kw222$TITLE, new SubLObject[] { cb_query.$str527$Unknown_Extent_Query, cb_query.$kw225$SENTENCE, sentence, cb_query.$kw227$MT, mt, (cb_query.NIL != non_explanatory_sentence) ? ConsesLow.list((SubLObject)cb_query.$kw191$NON_EXPLANATORY_SENTENCE, non_explanatory_sentence) : cb_query.NIL }));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 108056L)
    public static SubLObject cb_link_rule_unknown_extent_query(final SubLObject rule, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str528$_Unknown_Extent_Query_;
        }
        assert cb_query.NIL != assertions_high.rule_assertionP(rule) : rule;
        final SubLObject id = assertion_handles.assertion_id(rule);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str529$cb_rule_unknown_extent_query__A, id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return rule;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 108397L)
    public static SubLObject cb_rule_unknown_extent_query(final SubLObject args) {
        final SubLObject rule = cb_utilities.cb_guess_assertion(args);
        if (cb_query.NIL == rule) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str525$The_rule_is_not_available_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        final SubLObject sentence = assertion_utilities.assertion_unknown_extent_query_formula(rule);
        final SubLObject mt = cb_query.$cb_default_unspecified_query_mt$.getGlobalValue();
        final SubLObject non_explanatory_sentence = rule_pragmatic_query_formula(rule, (SubLObject)cb_query.UNPROVIDED);
        return cb_unknown_extent_query(sentence, mt, non_explanatory_sentence);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 108899L)
    public static SubLObject cb_kb_query(final SubLObject sentence, final SubLObject mt, final SubLObject v_properties, final SubLObject query_spec, SubLObject non_explanatory_sentence) {
        if (non_explanatory_sentence == cb_query.UNPROVIDED) {
            non_explanatory_sentence = (SubLObject)cb_query.$kw226$UNSPECIFIED;
        }
        return cb_query_internal((SubLObject)ConsesLow.list(new SubLObject[] { cb_query.$kw222$TITLE, cb_query.$str533$KB_Query, cb_query.$kw225$SENTENCE, sentence, cb_query.$kw227$MT, mt, cb_query.$kw228$PROPERTIES, v_properties, cb_query.$kw229$QUERY_SPEC, query_spec, cb_query.$kw191$NON_EXPLANATORY_SENTENCE, non_explanatory_sentence }));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 109261L)
    public static SubLObject cb_parameter_strengthened_query(final SubLObject sentence, final SubLObject mt, final SubLObject strengthened_properties, SubLObject non_explanatory_sentence) {
        if (non_explanatory_sentence == cb_query.UNPROVIDED) {
            non_explanatory_sentence = (SubLObject)cb_query.$kw226$UNSPECIFIED;
        }
        return cb_query_internal((SubLObject)ConsesLow.list(new SubLObject[] { cb_query.$kw222$TITLE, cb_query.$str534$Parameter_Strengthened_Query, cb_query.$kw225$SENTENCE, sentence, cb_query.$kw227$MT, mt, cb_query.$kw228$PROPERTIES, strengthened_properties, cb_query.$kw191$NON_EXPLANATORY_SENTENCE, non_explanatory_sentence }));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 109884L)
    public static SubLObject cb_literal_query(final SubLObject args) {
        SubLObject fort_spec = (SubLObject)cb_query.NIL;
        SubLObject arg_string = (SubLObject)cb_query.NIL;
        SubLObject pred_spec = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list536);
        fort_spec = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list536);
        arg_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list536);
        pred_spec = current.first();
        current = current.rest();
        final SubLObject mt_spec = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, args, (SubLObject)cb_query.$list536);
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list536);
            return (SubLObject)cb_query.NIL;
        }
        SubLObject fort = (SubLObject)cb_query.NIL;
        SubLObject arg = (SubLObject)cb_query.NIL;
        SubLObject predicate = (SubLObject)cb_query.NIL;
        SubLObject mt = (SubLObject)cb_query.NIL;
        fort = cb_utilities.cb_guess_fort(fort_spec, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL == forts.fort_p(fort)) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str537$Could_not_determine_a_term_from__, fort_spec, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        arg = reader.read_from_string_ignoring_errors(arg_string, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        if (!arg.isInteger()) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str538$Could_not_determine_an_arg_from__, arg_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        predicate = cb_utilities.cb_guess_fort(pred_spec, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL == forts.fort_p(predicate)) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str537$Could_not_determine_a_term_from__, pred_spec, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL == mt_spec) {
            mt = cb_query.$cb_default_unspecified_query_mt$.getGlobalValue();
        }
        else {
            mt = cb_utilities.cb_guess_fort(mt_spec, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL == forts.fort_p(mt)) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str537$Could_not_determine_a_term_from__, mt_spec, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        return cb_literal_query_internal(fort, arg, predicate, mt);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 110810L)
    public static SubLObject cb_lq(final SubLObject args) {
        return cb_literal_query(args);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 111190L)
    public static SubLObject cb_print_literal_query_internal(final SubLObject query_formula, final SubLObject binding_lists, final SubLObject reason, final SubLObject v_arity, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject query_ist_sentence = el_utilities.make_ist_sentence(mt, query_formula);
        final SubLObject title_var = (SubLObject)cb_query.$str544$Literal_Query;
        final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
            html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$61 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (cb_query.NIL != title_var) {
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$62 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (cb_query.NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str235$yui_skin_sam);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$63 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str547$reloadFrameButton);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$64 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str548$button);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str549$reload);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ((SubLObject)cb_query.$str550$Refresh_Frames);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$64, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (cb_query.NIL != title_var) {
                            html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ(title_var);
                            html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$65 = html_macros.$html_safe_print$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_macros.$within_html_form$.bind((SubLObject)cb_query.T, thread);
                            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                            cb_utilities.cb_help_preamble((SubLObject)cb_query.$kw542$CB_LITERAL_QUERY, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                            cb_utilities.cb_link((SubLObject)cb_query.$kw551$SENTENCE_QUERY_SIMILAR, query_ist_sentence, (SubLObject)cb_query.$str552$_Query_Tool_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                            cb_show_query(query_formula, mt, (SubLObject)cb_query.$str553$Last_query);
                            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                            if (reason != cb_query.$kw554$EXHAUST && reason != cb_query.$kw555$EXHAUST_TOTAL) {
                                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                                html_utilities.html_princ((SubLObject)cb_query.$str556$Query_halted_because___);
                                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                                cb_query_browser.cb_show_inference_suspend_status(reason);
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                            }
                            if (cb_query.NIL == binding_lists) {
                                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                                html_utilities.html_princ((SubLObject)cb_query.$str557$No_answers_were_proven);
                                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                            }
                            else if (v_arity.numE((SubLObject)cb_query.TWO_INTEGER)) {
                                final SubLObject count = Sequences.length(binding_lists);
                                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                                if (count.numE((SubLObject)cb_query.ONE_INTEGER)) {
                                    html_utilities.html_princ((SubLObject)cb_query.$str558$One_answer);
                                }
                                else if (count.numG((SubLObject)cb_query.ONE_INTEGER)) {
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str559$_S_answers, count);
                                }
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str560$_for__S__, bindings.variable_binding_variable(binding_lists.first().first()));
                                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                SubLObject value_list = (SubLObject)cb_query.NIL;
                                SubLObject cdolist_list_var = binding_lists;
                                SubLObject v_bindings = (SubLObject)cb_query.NIL;
                                v_bindings = cdolist_list_var.first();
                                while (cb_query.NIL != cdolist_list_var) {
                                    final SubLObject value = bindings.variable_binding_value(v_bindings.first());
                                    value_list = (SubLObject)ConsesLow.cons(value, value_list);
                                    cdolist_list_var = cdolist_list_var.rest();
                                    v_bindings = cdolist_list_var.first();
                                }
                                if (cb_query.NIL != cb_query.$sort_literal_query_terms_by_generality_estimateP$.getDynamicValue(thread)) {
                                    value_list = cardinality_estimates.sort_by_generality_estimate(value_list, (SubLObject)cb_query.UNPROVIDED);
                                }
                                else {
                                    value_list = kb_utilities.sort_terms(value_list, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.T, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                }
                                cdolist_list_var = value_list;
                                SubLObject value2 = (SubLObject)cb_query.NIL;
                                value2 = cdolist_list_var.first();
                                while (cb_query.NIL != cdolist_list_var) {
                                    if (cb_query.NIL != control_vars.$cb_literal_query_results_one_per_lineP$.getDynamicValue(thread)) {
                                        cb_utilities.cb_show_term(value2, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                    }
                                    else {
                                        html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
                                        cb_utilities.cb_show_term(value2, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
                                        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                                        html_utilities.html_terpri((SubLObject)cb_query.UNPROVIDED);
                                    }
                                    cdolist_list_var = cdolist_list_var.rest();
                                    value2 = cdolist_list_var.first();
                                }
                            }
                            else {
                                html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                                html_utilities.html_princ((SubLObject)cb_query.$str561$Substituted_Results__);
                                html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                                SubLObject cdolist_list_var2 = binding_lists;
                                SubLObject v_bindings2 = (SubLObject)cb_query.NIL;
                                v_bindings2 = cdolist_list_var2.first();
                                while (cb_query.NIL != cdolist_list_var2) {
                                    final SubLObject substituted_query = conses_high.sublis(v_bindings2, query_formula, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                    cb_utilities.cb_show_term(substituted_query, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    v_bindings2 = cdolist_list_var2.first();
                                }
                            }
                            html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                        }
                        finally {
                            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                            html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$65, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$63, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$62, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            }
            finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$61, thread);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 113425L)
    public static SubLObject cb_literal_query_internal(final SubLObject constant, final SubLObject arg, final SubLObject predicate, final SubLObject mt) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject v_arity = arity.arity(predicate);
        if (!v_arity.isInteger()) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str562$Could_not_determine_the_arity_of_, predicate, mt, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        SubLObject query_formula = (SubLObject)ConsesLow.list(predicate);
        SubLObject index;
        SubLObject arg_index;
        for (index = (SubLObject)cb_query.NIL, index = (SubLObject)cb_query.ZERO_INTEGER; index.numL(v_arity); index = Numbers.add(index, (SubLObject)cb_query.ONE_INTEGER)) {
            arg_index = Numbers.add(index, (SubLObject)cb_query.ONE_INTEGER);
            if (arg_index.numE(arg)) {
                query_formula = (SubLObject)ConsesLow.cons(constant, query_formula);
            }
            else {
                query_formula = (SubLObject)ConsesLow.cons(ConsesLow.nth(arg_index, cb_query.$cb_literal_query_variables$.getGlobalValue()), query_formula);
            }
        }
        query_formula = Sequences.nreverse(query_formula);
        thread.resetMultipleValues();
        final SubLObject bindings_set = cb_new_literal_query(query_formula, mt);
        final SubLObject halt_status = thread.secondMultipleValue();
        thread.resetMultipleValues();
        cb_print_literal_query_internal(query_formula, bindings_set, halt_status, v_arity, mt);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 114503L)
    public static SubLObject cb_new_literal_query(final SubLObject sentence, final SubLObject mt) {
        final SubLObject query_properties = (SubLObject)ConsesLow.list(new SubLObject[] { cb_query.$kw158$TRANSFORMATION_ALLOWED_, cb_query.NIL, cb_query.$kw93$CONTINUABLE_, cb_query.NIL, cb_query.$kw162$ADD_RESTRICTION_LAYER_OF_INDIRECTION_, cb_query.NIL, cb_query.$kw121$RESULT_UNIQUENESS, cb_query.$kw563$BINDINGS, cb_query.$kw50$MAX_TIME, cb_query.$cb_literal_query_time_cutoff$.getGlobalValue(), cb_query.$kw54$MAX_STEP, cb_query.NIL, cb_query.$kw86$CACHE_INFERENCE_RESULTS_, cb_query.NIL, cb_query.$kw89$ANSWER_LANGUAGE, cb_query.$kw564$HL, cb_query.$kw111$ALLOW_INDETERMINATE_RESULTS_, cb_query.T, cb_query.$kw184$NEW_TERMS_ALLOWED_, cb_query.NIL, cb_query.$kw565$RETURN, cb_query.$kw563$BINDINGS, cb_query.$kw133$PRODUCTIVITY_LIMIT, cb_query.$kw566$POSITIVE_INFINITY, cb_query.$kw77$PROBABLY_APPROXIMATELY_DONE, cb_query.$float567$1_0 });
        return inference_kernel.new_cyc_query(sentence, mt, query_properties);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 115175L)
    public static SubLObject cb_literal_query_internal_arg1_isa(final SubLObject fort) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject isa_hash = Hashtables.make_hash_table((SubLObject)cb_query.$int568$64, Symbols.symbol_function((SubLObject)cb_query.EQUAL), (SubLObject)cb_query.UNPROVIDED);
        SubLObject all_mts = (SubLObject)cb_query.NIL;
        SubLObject cdolist_list_var = isa.all_isa_in_any_mt(fort);
        SubLObject an_isa = (SubLObject)cb_query.NIL;
        an_isa = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            SubLObject cdolist_list_var_$66;
            final SubLObject mf_mts = cdolist_list_var_$66 = isa.max_floor_mts_of_isa_paths(fort, an_isa, (SubLObject)cb_query.UNPROVIDED);
            SubLObject mf_mt = (SubLObject)cb_query.NIL;
            mf_mt = cdolist_list_var_$66.first();
            while (cb_query.NIL != cdolist_list_var_$66) {
                hash_table_utilities.pushnew_hash(mf_mt, an_isa, isa_hash, (SubLObject)cb_query.UNPROVIDED);
                cdolist_list_var_$66 = cdolist_list_var_$66.rest();
                mf_mt = cdolist_list_var_$66.first();
            }
            cdolist_list_var = cdolist_list_var.rest();
            an_isa = cdolist_list_var.first();
        }
        all_mts = Sort.sort(hash_table_utilities.hash_table_keys(isa_hash), Symbols.symbol_function((SubLObject)cb_query.$sym569$GENERALITY_ESTIMATE_), (SubLObject)cb_query.UNPROVIDED);
        final SubLObject title_var = (SubLObject)cb_query.$str544$Literal_Query;
        final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
            html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$67 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (cb_query.NIL != title_var) {
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$68 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (cb_query.NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str235$yui_skin_sam);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$69 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str547$reloadFrameButton);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$70 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str548$button);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str549$reload);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ((SubLObject)cb_query.$str550$Refresh_Frames);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$70, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (cb_query.NIL != title_var) {
                            html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ(title_var);
                            html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        }
                        cb_utilities.cb_help_preamble((SubLObject)cb_query.$kw542$CB_LITERAL_QUERY, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
                        html_utilities.html_princ((SubLObject)cb_query.$str570$Simulated_query_over_all_mts__);
                        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                        cb_utilities.cb_form((SubLObject)ConsesLow.listS(cb_query.$const571$isa, fort, (SubLObject)cb_query.$list572), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                        SubLObject cdolist_list_var2 = all_mts;
                        SubLObject mt = (SubLObject)cb_query.NIL;
                        mt = cdolist_list_var2.first();
                        while (cb_query.NIL != cdolist_list_var2) {
                            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                            html_utilities.html_princ((SubLObject)cb_query.$str573$Answers_in_);
                            cb_utilities.cb_show_term(mt, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ((SubLObject)cb_query.$str574$_);
                            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                            final SubLObject v_genl_mts = conses_high.set_difference(genl_mts.selected_genl_mts(mt, all_mts, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), (SubLObject)ConsesLow.list(mt), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            if (cb_query.NIL != v_genl_mts) {
                                html_utilities.html_princ((SubLObject)cb_query.$str575$__inherits_from);
                                SubLObject cdolist_list_var_$67 = v_genl_mts;
                                SubLObject genl_mt = (SubLObject)cb_query.NIL;
                                genl_mt = cdolist_list_var_$67.first();
                                while (cb_query.NIL != cdolist_list_var_$67) {
                                    html_utilities.html_princ((SubLObject)cb_query.$str576$_);
                                    cb_utilities.cb_show_term(genl_mt, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                    cdolist_list_var_$67 = cdolist_list_var_$67.rest();
                                    genl_mt = cdolist_list_var_$67.first();
                                }
                                html_utilities.html_princ((SubLObject)cb_query.$str577$_);
                            }
                            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ((SubLObject)cb_query.$str578$__);
                            SubLObject cdolist_list_var_$68;
                            final SubLObject the_isas = cdolist_list_var_$68 = Sort.sort(Hashtables.gethash(mt, isa_hash, (SubLObject)cb_query.UNPROVIDED), Symbols.symbol_function((SubLObject)cb_query.$sym579$GENERALITY_ESTIMATE_), (SubLObject)cb_query.UNPROVIDED);
                            SubLObject the_isa = (SubLObject)cb_query.NIL;
                            the_isa = cdolist_list_var_$68.first();
                            while (cb_query.NIL != cdolist_list_var_$68) {
                                html_utilities.html_markup(html_macros.$html_no_break_head$.getGlobalValue());
                                final SubLObject the_assertion = kb_indexing.find_gaf((SubLObject)ConsesLow.list(cb_query.$const571$isa, fort, the_isa), mt);
                                if (cb_query.NIL != the_assertion) {
                                    cb_utilities.cb_link_assertion(the_assertion);
                                }
                                cb_utilities.cb_show_term(the_isa, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_no_break_tail$.getGlobalValue());
                                html_utilities.html_princ((SubLObject)cb_query.$str576$_);
                                cdolist_list_var_$68 = cdolist_list_var_$68.rest();
                                the_isa = cdolist_list_var_$68.first();
                            }
                            html_utilities.html_princ((SubLObject)cb_query.$str577$_);
                            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                            cdolist_list_var2 = cdolist_list_var2.rest();
                            mt = cdolist_list_var2.first();
                        }
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$69, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$68, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            }
            finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$67, thread);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 116733L)
    public static SubLObject cb_include_literal_query_linkP(final SubLObject constant, final SubLObject arg, final SubLObject predicate, final SubLObject use) {
        if (use.eql((SubLObject)cb_query.$kw580$INDEX)) {
            if (cb_query.NIL != subl_promotions.memberP(arg, (SubLObject)cb_query.$list581, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED)) {
                if (cb_query.NIL != hl_supports.hl_predicate_p(predicate)) {
                    return (SubLObject)cb_query.$kw582$LIKELY;
                }
                if (cb_query.NIL != possible_to_conclude(predicate)) {
                    return (SubLObject)cb_query.$kw583$POSSIBLE;
                }
            }
        }
        else if (use.eql((SubLObject)cb_query.$kw584$INDEX_DISPLAY)) {
            if (cb_query.NIL != hl_supports.hl_predicate_p(predicate)) {
                return (SubLObject)cb_query.$kw582$LIKELY;
            }
            if (cb_query.NIL != possible_to_conclude(predicate)) {
                return (SubLObject)cb_query.$kw583$POSSIBLE;
            }
        }
        else if (use.eql((SubLObject)cb_query.$kw585$NORMAL)) {
            if (kb_indexing.num_gaf_arg_index(constant, arg, predicate, (SubLObject)cb_query.UNPROVIDED).numG((SubLObject)cb_query.ZERO_INTEGER)) {
                return (SubLObject)cb_query.$kw586$KNOWN;
            }
            if (cb_query.NIL != hl_supports.hl_predicate_p(predicate)) {
                return (SubLObject)cb_query.$kw582$LIKELY;
            }
            if (cb_query.NIL != possible_to_conclude(predicate)) {
                return (SubLObject)cb_query.$kw583$POSSIBLE;
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 117465L)
    public static SubLObject possible_to_conclude(final SubLObject predicate) {
        return (SubLObject)SubLObjectFactory.makeBoolean(kb_indexing.num_predicate_rule_index(predicate, (SubLObject)cb_query.$kw587$POS, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED).numG((SubLObject)cb_query.ZERO_INTEGER) || kb_indexing.num_gaf_arg_index(predicate, (SubLObject)cb_query.TWO_INTEGER, cb_query.$const588$genlPreds, (SubLObject)cb_query.UNPROVIDED).numG((SubLObject)cb_query.ZERO_INTEGER));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 117633L)
    public static SubLObject cb_show_query(final SubLObject formula, final SubLObject mt, SubLObject query_prompt) {
        if (query_prompt == cb_query.UNPROVIDED) {
            query_prompt = (SubLObject)cb_query.$str589$Current_query;
        }
        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
        html_utilities.html_princ(query_prompt);
        html_utilities.html_princ((SubLObject)cb_query.$str590$_in_);
        cb_utilities.cb_show_term(mt, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_princ((SubLObject)cb_query.$str591$__);
        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_show_term(formula, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 118404L)
    public static SubLObject cb_show_focal_inference_progress_section(final SubLObject focal_inference, final SubLObject refreshP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL != inference_datastructures_inference.running_inference_p(focal_inference) && cb_query.NIL != cb_query.$cb_inference_progress_frame_enabledP$.getGlobalValue()) {
            final SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(focal_inference);
            final SubLObject inference_suid = inference_datastructures_inference.inference_suid(focal_inference);
            final SubLObject height = (cb_query.NIL != inference_datastructures_inference.closed_inference_p(focal_inference)) ? cb_query.$cb_closed_inference_progress_frame_height$.getGlobalValue() : cb_query.$cb_open_inference_progress_frame_height$.getGlobalValue();
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_iframe_src$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str593$cb_inference_progress_page__A__A, store_suid, inference_suid);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_name$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str594$inference_progress);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_width$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str595$100_);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_height$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(height);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_frameborder$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_marginwidth$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_iframe_marginheight$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_iframe_tail$.getGlobalValue());
        }
        else {
            final SubLObject refresh_mode = (SubLObject)((cb_query.NIL != refreshP) ? cb_query.$kw596$ON : cb_query.$kw597$OFF);
            cb_inference_progress_page_guts(focal_inference, refresh_mode, (SubLObject)cb_query.NIL);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 119228L)
    public static SubLObject cb_inference_progress_page(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL == current) {
            final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
            if (cb_query.NIL == inference) {
                return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            final SubLObject refresh = (SubLObject)((cb_query.NIL != inference_datastructures_inference.running_inference_p(inference)) ? cb_query.$cb_query_auto_refresh_rate$.getGlobalValue() : cb_query.NIL);
            final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
            try {
                html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
                html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
                if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
                }
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$73 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                try {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                    html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                    html_macros.html_head_content_type();
                    cb_parameters.cb_head_shortcut_icon();
                    html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                    cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str599$Inference__A__A_Progress, store_id_string, inference_id_string);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                    if (cb_query.NIL != refresh) {
                        html_utilities.html_refresh(refresh, (SubLObject)cb_query.UNPROVIDED);
                    }
                    dhtml_macros.dhtml_with_dom_script();
                    dhtml_macros.dhtml_with_toggle_visibility_support();
                    dhtml_macros.html_basic_cb_scripts();
                    html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$74 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                    try {
                        html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$75 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            cb_inference_progress_page_guts(inference, (SubLObject)cb_query.$kw600$DISABLED, (SubLObject)cb_query.T);
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$75, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    }
                    finally {
                        html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$74, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                }
                finally {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$73, thread);
                }
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            }
            finally {
                html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 120178L)
    public static SubLObject cb_inference_progress_page_guts(final SubLObject inference, final SubLObject refresh_mode, final SubLObject inside_progress_frameP) {
        cb_show_inference_status_section(inference, refresh_mode);
        if (cb_query.NIL == inside_progress_frameP && cb_query.NIL != inference_datastructures_inference.continuable_inference_p(inference)) {
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            cb_submit_input_with_explanation((SubLObject)cb_query.$str356$Continue_the_Focal_Inference, (SubLObject)cb_query.$str357$Continues_running_the_focal_infer, (SubLObject)cb_query.$str358$continue, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != inside_progress_frameP && cb_query.NIL == inference_datastructures_inference.running_inference_p(inference)) {
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            cb_utilities.cb_link((SubLObject)cb_query.$kw216$QUERY, (SubLObject)cb_query.$str602$_Refresh_Page_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        cb_show_query_answer_section(inference, cb_query.$cb_inference_answer_section_limit$.getGlobalValue());
        return inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 121016L)
    public static SubLObject cb_show_inference_status_section(final SubLObject inference, final SubLObject refresh_mode) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_princ_strong((SubLObject)cb_query.$str603$Status__);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_query_show_inference_status(inference, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject pcase_var = inference_datastructures_inference.inference_status(inference);
        if (pcase_var.eql((SubLObject)cb_query.$kw307$RUNNING)) {
            html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
            if (refresh_mode.eql((SubLObject)cb_query.$kw596$ON)) {
                cb_utilities.cb_link((SubLObject)cb_query.$kw216$QUERY, (SubLObject)cb_query.$str604$_Halt_Auto_Refresh_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            else if (refresh_mode.eql((SubLObject)cb_query.$kw597$OFF)) {
                cb_utilities.cb_link((SubLObject)cb_query.$kw216$QUERY, (SubLObject)cb_query.$str244$_Refresh_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                cb_utilities.cb_link((SubLObject)cb_query.$kw605$AUTO_REFRESH_QUERY, inference, (SubLObject)cb_query.$str606$_Auto_Refresh_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            else if (refresh_mode.eql((SubLObject)cb_query.$kw600$DISABLED)) {}
            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
            cb_utilities.cb_link((SubLObject)cb_query.$kw607$INTERRUPT_INFERENCE, inference, (SubLObject)cb_query.$str608$_Interrupt_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
            cb_utilities.cb_link((SubLObject)cb_query.$kw609$ABORT_INFERENCE, inference, (SubLObject)cb_query.$str610$_Abort_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
            final SubLObject remaining_time = inference_datastructures_inference.inference_remaining_time(inference, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != remaining_time) {
                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                if (cb_query.NIL != subl_promotions.non_negative_integer_p(remaining_time)) {
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str611$Max_time_remaining__);
                    html_utilities.html_princ(numeric_date_utilities.elapsed_seconds_string(remaining_time));
                }
                else {
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str612$Time_over_budget__);
                    final SubLObject color_val = (SubLObject)cb_query.$kw303$RED;
                    html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                    if (cb_query.NIL != color_val) {
                        html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(color_val));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    }
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ(numeric_date_utilities.elapsed_seconds_string(Numbers.minus(remaining_time)));
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
                }
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 122416L)
    public static SubLObject cb_show_query_answer_section(final SubLObject inference, SubLObject answer_limit) {
        if (answer_limit == cb_query.UNPROVIDED) {
            answer_limit = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject answer_count = inference_datastructures_inference.inference_answer_count(inference);
        final SubLObject new_answer_count = inference_datastructures_inference.inference_new_answer_count(inference);
        final SubLObject new_justification_count = inference_datastructures_inference.inference_new_justification_count(inference);
        final SubLObject initial_visibility = (SubLObject)cb_query.$kw239$VISIBLE;
        if (answer_count.isZero() || cb_query.NIL == inference_datastructures_inference.inference_free_el_vars(inference)) {
            cb_query_browser.cb_show_inference_answer_section(inference, (SubLObject)cb_query.NIL);
        }
        else {
            dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str613$inference_answers, (SubLObject)cb_query.$str260$Show, (SubLObject)cb_query.$str261$Hide);
            final SubLObject size_val = (SubLObject)cb_query.FOUR_INTEGER;
            html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
            if (cb_query.NIL != size_val) {
                html_utilities.html_markup(html_macros.$html_font_size$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(size_val);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ_strong((SubLObject)cb_query.$str279$Answers);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
            html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
            html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
            html_utilities.html_princ((SubLObject)cb_query.$str614$_);
            cb_show_inference_answer_counts(answer_count, new_answer_count, new_justification_count);
            html_utilities.html_princ((SubLObject)cb_query.$str577$_);
            html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
            if (cb_query.NIL != inference_datastructures_inference.inference_has_some_answerP(inference)) {
                html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
                html_utilities.html_princ_strong((SubLObject)cb_query.$str283$Actions__);
                if (answer_limit.isInteger()) {
                    html_utilities.html_indent((SubLObject)cb_query.ONE_INTEGER);
                    cb_utilities.cb_link((SubLObject)cb_query.$kw615$ALL_INFERENCE_ANSWERS, inference, (SubLObject)cb_query.$str616$_All_Answers_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                html_utilities.html_indent((SubLObject)cb_query.ONE_INTEGER);
                cb_utilities.cb_link((SubLObject)cb_query.$kw617$SAVE_INFERENCE_ANSWERS, inference, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                if (cb_query.NIL != blue_grapher_utilities.determine_edge_templates_for_inference(inference)) {
                    html_utilities.html_indent((SubLObject)cb_query.ONE_INTEGER);
                    cb_utilities.cb_link((SubLObject)cb_query.$kw618$GRAPH_INFERENCE_ANSWERS, inference, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                if (inference_datastructures_inference.inference_answer_count(inference).numGE((SubLObject)cb_query.ONE_INTEGER)) {
                    html_utilities.html_indent((SubLObject)cb_query.ONE_INTEGER);
                    cb_utilities.cb_link((SubLObject)cb_query.$kw619$SAVE_INFERENCE_ANSWERS_AS_QUERIES, inference, (SubLObject)cb_query.$str620$_Save_Answers_as_Queries_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                if (inference_datastructures_inference.inference_answer_count(inference).numG((SubLObject)cb_query.ONE_INTEGER)) {
                    html_utilities.html_indent((SubLObject)cb_query.ONE_INTEGER);
                    cb_utilities.cb_link((SubLObject)cb_query.$kw621$INFERENCE_ANSWER_TIMELINE, inference, (SubLObject)cb_query.$str622$_Timeline_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
            }
            dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str613$inference_answers, initial_visibility, (SubLObject)cb_query.$kw240$PARAGRAPH);
            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str613$inference_answers);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                cb_query_browser.cb_show_inference_answer_section(inference, answer_limit);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 124236L)
    public static SubLObject cb_auto_refresh_query(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        return cb_auto_refresh_query_internal();
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 124404L)
    public static SubLObject cb_link_auto_refresh_query(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str606$_Auto_Refresh_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        cyc_file_dependencies.javascript((SubLObject)cb_query.$kw461$OVERLIB);
        if (cb_query.$str624$Starts_up_an_auto_refresh_loop_th.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover((SubLObject)cb_query.$str624$Starts_up_an_auto_refresh_loop_th, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str625$cb_auto_refresh_query__A__A, store_suid, inference_suid);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 124938L)
    public static SubLObject cb_auto_refresh_query_internal() {
        SubLObject current;
        final SubLObject datum = current = cb_inferences();
        final SubLObject focal_inference = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list209);
        final SubLObject other_inferences;
        current = (other_inferences = current.rest());
        if (cb_query.NIL != focal_inference && cb_query.$kw307$RUNNING == inference_datastructures_inference.inference_status(focal_inference)) {
            return cb_query_internal((SubLObject)ConsesLow.list((SubLObject)cb_query.$kw224$REFRESH, cb_query.$cb_query_auto_refresh_rate$.getGlobalValue()));
        }
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 125295L)
    public static SubLObject cb_link_all_inference_answers(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str627$_More_____;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw8$MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str628$cb_all_inference_answers__A__A, store_suid, inference_suid);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 125754L)
    public static SubLObject cb_all_inference_answers(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
            html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$77 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str630$Inference__A__A, store_id_string, inference_id_string);
                html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                dhtml_macros.dhtml_with_dom_script();
                dhtml_macros.dhtml_with_toggle_visibility_support();
                dhtml_macros.html_basic_cb_scripts();
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$78 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$79 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        cb_show_inference_with_status_and_all_answers(inference);
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$79, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$78, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            }
            finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$77, thread);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 126486L)
    public static SubLObject cb_show_inference_with_status_and_all_answers(final SubLObject inference) {
        html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
        html_utilities.html_princ_strong((SubLObject)cb_query.$str632$Inference_Answers);
        html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
        html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
        cb_utilities.cb_link((SubLObject)cb_query.$kw615$ALL_INFERENCE_ANSWERS, inference, (SubLObject)cb_query.$str244$_Refresh_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw272$INFERENCE, inference, (SubLObject)cb_query.NIL, (SubLObject)cb_query.$str633$_Examine_Inference_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_link((SubLObject)cb_query.$kw216$QUERY, (SubLObject)cb_query.$str552$_Query_Tool_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        cb_query_browser.cb_show_inference_el_query(inference, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        html_utilities.html_princ_strong((SubLObject)cb_query.$str603$Status__);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        cb_query_show_inference_status(inference, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        cb_show_query_answer_section(inference, (SubLObject)cb_query.NIL);
        return inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 127298L)
    public static SubLObject cb_focus_inference(final SubLObject args) {
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        cb_note_focal_inference(inference);
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 127771L)
    public static SubLObject cb_link_focus_inference(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str275$_Focus_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        cyc_file_dependencies.javascript((SubLObject)cb_query.$kw461$OVERLIB);
        if (cb_query.$str635$Make_this_inference_the_focal_inf.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover((SubLObject)cb_query.$str635$Make_this_inference_the_focal_inf, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str636$cb_focus_inference__A__A, store_suid, inference_suid);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 128244L)
    public static SubLObject cb_defocus_inference(final SubLObject args) {
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        cb_note_no_focal_inference();
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 128718L)
    public static SubLObject cb_link_defocus_inference(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str288$_Defocus_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        cyc_file_dependencies.javascript((SubLObject)cb_query.$kw461$OVERLIB);
        if (cb_query.$str639$Make_this_inference_no_longer_the.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover((SubLObject)cb_query.$str639$Make_this_inference_no_longer_the, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str640$cb_defocus_inference__A__A, store_suid, inference_suid);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 129215L)
    public static SubLObject cb_interrupt_inference(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        SubLObject ignore_errors_tag = (SubLObject)cb_query.NIL;
        try {
            thread.throwStack.push(cb_query.$kw211$IGNORE_ERRORS_TARGET);
            final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cb_query.$sym212$IGNORE_ERRORS_HANDLER), thread);
                try {
                    if (cb_query.NIL != inference_datastructures_inference.running_inference_p(inference)) {
                        inference_strategist.inference_interrupt(inference, (SubLObject)cb_query.NIL);
                    }
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)cb_query.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)cb_query.$kw211$IGNORE_ERRORS_TARGET);
        }
        finally {
            thread.throwStack.pop();
        }
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 129760L)
    public static SubLObject cb_link_interrupt_inference(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str608$_Interrupt_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw8$MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str643$cb_interrupt_inference__A__A, store_id, inference_id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 130126L)
    public static SubLObject cb_abort_inference(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        SubLObject ignore_errors_tag = (SubLObject)cb_query.NIL;
        try {
            thread.throwStack.push(cb_query.$kw211$IGNORE_ERRORS_TARGET);
            final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)cb_query.$sym212$IGNORE_ERRORS_HANDLER), thread);
                try {
                    if (cb_query.NIL != inference_datastructures_inference.running_inference_p(inference)) {
                        inference_strategist.inference_abort(inference);
                    }
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)cb_query.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)cb_query.$kw211$IGNORE_ERRORS_TARGET);
        }
        finally {
            thread.throwStack.pop();
        }
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 130647L)
    public static SubLObject cb_link_abort_inference(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str610$_Abort_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw8$MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str646$cb_abort_inference__A__A, store_id, inference_id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 131001L)
    public static SubLObject cb_forget_inference(final SubLObject args) {
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        cb_act_forget_inference(inference);
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 131478L)
    public static SubLObject cb_link_forget_inference(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str649$_Forget_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str650$cb_forget_inference__A__A, store_id, inference_id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 131835L)
    public static SubLObject cb_forget_all_inferences(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        SubLObject cdolist_list_var = cb_inferences();
        SubLObject inference = (SubLObject)cb_query.NIL;
        inference = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            if (cb_query.NIL != inference) {
                cb_act_forget_inference(inference);
            }
            cdolist_list_var = cdolist_list_var.rest();
            inference = cdolist_list_var.first();
        }
        cb_note_no_focal_inference();
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 132200L)
    public static SubLObject cb_link_forget_all_inferences(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str654$_Forget_All_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str655$cb_forget_all_inferences);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 132430L)
    public static SubLObject cb_forget_all_other_inferences(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        SubLObject current;
        final SubLObject datum = current = cb_inferences();
        final SubLObject focal_inference = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list209);
        current = current.rest();
        SubLObject cdolist_list_var;
        final SubLObject other_inferences = cdolist_list_var = current;
        SubLObject other_inference = (SubLObject)cb_query.NIL;
        other_inference = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            cb_act_forget_inference(other_inference);
            cdolist_list_var = cdolist_list_var.rest();
            other_inference = cdolist_list_var.first();
        }
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 132729L)
    public static SubLObject cb_link_forget_all_other_inferences(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str654$_Forget_All_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str659$cb_forget_all_other_inferences);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 132971L)
    public static SubLObject cb_reinforce_inference(final SubLObject args) {
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        cb_act_reinforce_inference(inference);
        return cb_utilities.cb_simple_message_page((SubLObject)cb_query.$str662$Inference_heuristics_are_being_re, (SubLObject)cb_query.ONE_INTEGER, (SubLObject)cb_query.$int663$2000);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 133516L)
    public static SubLObject cb_link_reinforce_inference(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str286$_Reinforce_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        cyc_file_dependencies.javascript((SubLObject)cb_query.$kw461$OVERLIB);
        if (cb_query.$str665$Reinforce_the_inference_heuristic.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover((SubLObject)cb_query.$str665$Reinforce_the_inference_heuristic, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str666$cb_reinforce_inference__A__A, store_id, inference_id);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 134024L)
    public static SubLObject inference_reinforcement_applicableP(final SubLObject inference) {
        return (SubLObject)SubLObjectFactory.makeBoolean(cb_query.NIL != number_utilities.possibly_positive_integer_p(inference_datastructures_inference.inference_max_transformation_depth(inference)) && cb_query.NIL != subl_promotions.positive_integer_p(inference_datastructures_inference.inference_answer_count(inference)));
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 134246L)
    public static SubLObject cb_destroy_inference(final SubLObject args) {
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        cb_act_destroy_inference(inference);
        SubLObject cdolist_list_var = cb_inferences();
        SubLObject inference_$80 = (SubLObject)cb_query.NIL;
        inference_$80 = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            if (cb_query.NIL != inference_$80 && cb_query.NIL == inference_datastructures_inference.valid_inference_p(inference_$80)) {
                cb_act_forget_inference(inference_$80);
            }
            cdolist_list_var = cdolist_list_var.rest();
            inference_$80 = cdolist_list_var.first();
        }
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 134849L)
    public static SubLObject cb_link_destroy_inference(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str277$_Destroy_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        cyc_file_dependencies.javascript((SubLObject)cb_query.$kw461$OVERLIB);
        if (cb_query.$str669$Destroy_this_inference__reclaimin.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover((SubLObject)cb_query.$str669$Destroy_this_inference__reclaimin, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str670$cb_destroy_inference__A__A, store_id, inference_id);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 135375L)
    public static SubLObject cb_destroy_all_inferences(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        SubLObject cdolist_list_var = cb_inferences();
        SubLObject inference = (SubLObject)cb_query.NIL;
        inference = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            if (cb_query.NIL != inference) {
                cb_act_destroy_inference(inference);
            }
            cdolist_list_var = cdolist_list_var.rest();
            inference = cdolist_list_var.first();
        }
        cb_note_no_focal_inference();
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 135669L)
    public static SubLObject cb_link_destroy_all_inferences(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str269$_Destroy_All_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        cyc_file_dependencies.javascript((SubLObject)cb_query.$kw461$OVERLIB);
        if (cb_query.$str673$Destroy_all_inferences__including.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover((SubLObject)cb_query.$str673$Destroy_all_inferences__including, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            html_utilities.html_princ((SubLObject)cb_query.$str674$cb_destroy_all_inferences);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 136025L)
    public static SubLObject cb_destroy_all_other_inferences(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        SubLObject current;
        final SubLObject datum = current = cb_inferences();
        final SubLObject focal_inferences = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list677);
        current = current.rest();
        SubLObject cdolist_list_var;
        final SubLObject other_inferences = cdolist_list_var = current;
        SubLObject other_inference = (SubLObject)cb_query.NIL;
        other_inference = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            cb_act_destroy_inference(other_inference);
            cdolist_list_var = cdolist_list_var.rest();
            other_inference = cdolist_list_var.first();
        }
        return cb_query_internal((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 136328L)
    public static SubLObject cb_link_destroy_all_other_inferences(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str269$_Destroy_All_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        cyc_file_dependencies.javascript((SubLObject)cb_query.$kw461$OVERLIB);
        if (cb_query.$str679$Destroy_all_inferences_other_than.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover((SubLObject)cb_query.$str679$Destroy_all_inferences_other_than, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            html_utilities.html_princ((SubLObject)cb_query.$str680$cb_destroy_all_other_inferences);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 136695L)
    public static SubLObject cb_link_inference_to_subl_query(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str298$_SubL_Query_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        cyc_file_dependencies.javascript((SubLObject)cb_query.$kw461$OVERLIB);
        if (cb_query.$str682$Convert_this_inference_to_an_equi.isString()) {
            final SubLObject onmouseover = html_script_utilities.html_hoverover_anchor_onmouseover((SubLObject)cb_query.$str682$Convert_this_inference_to_an_equi, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str683$cb_inference_to_subl_query__A__A, store_id, inference_id);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup(html_macros.$html_anchor_onmouseover$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(onmouseover);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_anchor_onmouseout$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str4$nd___);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 137300L)
    public static SubLObject cb_inference_to_subl_query(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        SubLObject current;
        final SubLObject datum = current = args;
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list3);
        store_id_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL == current) {
            final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
            final SubLObject input_string = inference_datastructures_inference.inference_to_new_cyc_query_form_string(inference);
            cb_tools.cb_handle_interactor((SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)cb_query.$str685$input_string, input_string)));
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list3);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 137661L)
    public static SubLObject cb_link_graph_inference_answers(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str687$_Graph_Answers_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = (SubLObject)((cb_query.NIL != Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { cb_query.$str1$_, format_nil.format_nil_a_no_copy(inference_id) })) ? cb_utilities.cb_frame_name(Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { cb_query.$str1$_, format_nil.format_nil_a_no_copy(inference_id) })) : cb_query.NIL);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str688$cb_graph_inference_answers__A__A, store_id, inference_id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_markup(html_macros.$html_event_attribute_onclick$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str689$window_open__);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str688$cb_graph_inference_answers__A__A, store_id, inference_id);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str690$__);
        if (cb_query.NIL != Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { cb_query.$str1$_, format_nil.format_nil_a_no_copy(inference_id) })) {
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str691$__A_, Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { cb_query.$str1$_, format_nil.format_nil_a_no_copy(inference_id) }));
        }
        else {
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str692$null);
        }
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str693$___A____, cb_blue_grapher.cb_blue_construct_window_options(cb_blue_grapher.$cb_blue_applet_window_width$.getGlobalValue(), cb_blue_grapher.$cb_blue_applet_window_height$.getGlobalValue()));
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str694$return_false_);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 137661L)
    public static SubLObject cb_graph_inference_answers(final SubLObject args) {
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        return cb_graph_inference_answers_int(inference);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 137661L)
    public static SubLObject cb_graph_inference_answers_int(final SubLObject inference) {
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject arghash = html_arghash.new_arghash((SubLObject)cb_query.UNPROVIDED);
        html_arghash.set_arghash_value((SubLObject)cb_query.$kw697$SIGNATURE, arghash, Sequences.cconcatenate(format_nil.format_nil_a_no_copy(store_id), new SubLObject[] { cb_query.$str1$_, format_nil.format_nil_a_no_copy(inference_id) }));
        html_arghash.set_arghash_value((SubLObject)cb_query.$kw698$INFERENCE_STORE_ID, arghash, store_id);
        html_arghash.set_arghash_value((SubLObject)cb_query.$kw699$INFERENCE_ID, arghash, inference_id);
        blue_grapher_utilities.html_determine_edge_templates_for_inference(inference);
        cb_blue_grapher.cb_blue_applet_window_internal(arghash);
        subl_promotions.make_process_with_args((SubLObject)cb_query.$str700$cb_graph_inference_answers_window, Symbols.symbol_function((SubLObject)cb_query.$sym701$CB_GRAPH_INFERENCE_ANSWERS_WINDOW), (SubLObject)ConsesLow.list(arghash));
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 137661L)
    public static SubLObject cb_graph_inference_answers_window(final SubLObject arghash) {
        final SubLObject builder_fn_key = (SubLObject)cb_query.$kw702$BBF_INFERENCE_ANSWERS;
        final SubLObject builder_fn = Packages.intern(string_utilities.string_from_keyword(builder_fn_key), (SubLObject)cb_query.$str196$CYC);
        final SubLObject signature = html_arghash.get_arghash_value((SubLObject)cb_query.$kw697$SIGNATURE, arghash);
        blue_grapher_utilities.blue_event(signature, (SubLObject)ConsesLow.list(cb_blue_grapher.$cb_blue_cyc_graph_command_add_graph_string$.getGlobalValue(), (SubLObject)ConsesLow.list((SubLObject)cb_query.$kw703$BUILDER_FN, builder_fn, (SubLObject)cb_query.$kw704$PARAMS, (SubLObject)ConsesLow.list((SubLObject)cb_query.$kw698$INFERENCE_STORE_ID, html_arghash.get_arghash_value((SubLObject)cb_query.$kw698$INFERENCE_STORE_ID, arghash), (SubLObject)cb_query.$kw699$INFERENCE_ID, html_arghash.get_arghash_value((SubLObject)cb_query.$kw699$INFERENCE_ID, arghash)))));
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 139900L)
    public static SubLObject cb_save_inference_answers_int(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject store_id_string = html_utilities.html_extract_input((SubLObject)cb_query.$str705$store_id, args);
        final SubLObject inference_id_string = html_utilities.html_extract_input((SubLObject)cb_query.$str706$inference_id, args);
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        SubLObject output_format = html_utilities.html_extract_input((SubLObject)cb_query.$str707$_ans_format, args);
        final SubLObject destination = reader.read_from_string(html_utilities.html_extract_input((SubLObject)cb_query.$str708$_destination, args), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject filename = html_utilities.html_extract_input((SubLObject)cb_query.$str709$_filename, args);
        final SubLObject cycl_prefixP = html_utilities.html_extract_boolean((SubLObject)cb_query.$str710$cycl_prefix, args, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != output_format) {
            output_format = reader.read_from_string(output_format, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (destination == cb_query.$kw711$FILE && cb_query.NIL == string_utilities.non_empty_string_p(filename)) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str712$Please_enter_a_filename_to_save_t, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        final SubLObject pcase_var = output_format;
        if (pcase_var.eql((SubLObject)cb_query.$kw713$TAB_DELIMITED) || pcase_var.eql((SubLObject)cb_query.$kw714$XML) || pcase_var.eql((SubLObject)cb_query.$kw715$ALCHEMY)) {
            SubLObject error = (SubLObject)cb_query.NIL;
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)cb_query.$sym716$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        cb_inference_output_answers_to_html_stream_or_file(inference, destination, filename, output_format, (SubLObject)cb_query.NIL, cycl_prefixP);
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)cb_query.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                error = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
            if (cb_query.NIL != error) {
                cb_utilities.cb_error((SubLObject)cb_query.$str717$Attempt_to_save_answers_failed___, error, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
        }
        else if (pcase_var.eql((SubLObject)cb_query.$kw718$CUSTOM_XML)) {
            SubLObject xml_spec = html_utilities.html_extract_string((SubLObject)cb_query.$str719$_spec, args, (SubLObject)cb_query.UNPROVIDED);
            SubLObject doneP = (SubLObject)cb_query.NIL;
            try {
                xml_spec = reader.read_from_string(xml_spec, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                doneP = cb_inference_output_answers_to_html_stream_or_file(inference, destination, filename, (SubLObject)cb_query.$kw714$XML, xml_spec, cycl_prefixP);
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cb_query.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (cb_query.NIL == doneP) {
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str720$Error__Operation_failed);
                        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                        html_utilities.html_princ((SubLObject)cb_query.$str721$The_query_results_were_not_transf);
                        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                        cb_utilities.cb_back_button((SubLObject)cb_query.$kw11$SELF, (SubLObject)cb_query.$str722$Back);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        else {
            final SubLObject title_var = (SubLObject)cb_query.$str723$Error__Invalid_input;
            final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
            try {
                html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
                html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
                if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
                }
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$81 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                try {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                    html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                    html_macros.html_head_content_type();
                    cb_parameters.cb_head_shortcut_icon();
                    html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                    cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                    dhtml_macros.html_basic_cb_scripts();
                    if (cb_query.NIL != title_var) {
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                        html_utilities.html_princ(title_var);
                        html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                    }
                    html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$82 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                    try {
                        html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                        if (cb_query.NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                            html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str235$yui_skin_sam);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$83 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str547$reloadFrameButton);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$84 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.$str548$button);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.$str549$reload);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ((SubLObject)cb_query.$str550$Refresh_Frames);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                    html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                                }
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$84, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            if (cb_query.NIL != title_var) {
                                html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ(title_var);
                                html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            }
                            html_utilities.html_princ((SubLObject)cb_query.$str724$Please_select_one_of_the_output_f);
                            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                            cb_utilities.cb_back_button((SubLObject)cb_query.$kw11$SELF, (SubLObject)cb_query.$str722$Back);
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_copyright_notice();
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$83, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    }
                    finally {
                        html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$82, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                }
                finally {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$81, thread);
                }
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            }
            finally {
                html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 142218L)
    public static SubLObject cb_inference_output_answers_to_html_stream_or_file(final SubLObject inference, final SubLObject destination, final SubLObject filename, final SubLObject output_format, final SubLObject xml_spec, final SubLObject cycl_prefixP) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (destination.eql((SubLObject)cb_query.$kw726$HTML_STREAM)) {
            return inference_utilities.inference_output_answers(inference, html_macros.$html_stream$.getDynamicValue(thread), output_format, xml_spec, cycl_prefixP);
        }
        if (destination.eql((SubLObject)cb_query.$kw711$FILE)) {
            final SubLObject result = inference_utilities.inference_output_answers_to_file(inference, filename, output_format, (SubLObject)cb_query.$kw727$OUTPUT, xml_spec, cycl_prefixP);
            cb_utilities.cb_message_page_with_history(Sequences.cconcatenate((SubLObject)cb_query.$str728$Answers_were_saved_to_, new SubLObject[] { format_nil.format_nil_a_no_copy(filename), cb_query.$str410$_ }), (SubLObject)cb_query.T);
            return result;
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 142817L)
    public static SubLObject cb_save_inference_answers(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL == current) {
            final SubLObject title_var = (SubLObject)cb_query.$str731$Save_Query_Results_as_Text_XML;
            final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
            try {
                html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
                html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
                if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
                }
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$85 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                try {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                    html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                    html_macros.html_head_content_type();
                    cb_parameters.cb_head_shortcut_icon();
                    html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                    cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                    dhtml_macros.html_basic_cb_scripts();
                    if (cb_query.NIL != title_var) {
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                        html_utilities.html_princ(title_var);
                        html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                    }
                    html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$86 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                    try {
                        html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                        if (cb_query.NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                            html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str235$yui_skin_sam);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$87 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str547$reloadFrameButton);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$88 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.$str548$button);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.$str549$reload);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ((SubLObject)cb_query.$str550$Refresh_Frames);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                    html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                                }
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$88, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            if (cb_query.NIL != title_var) {
                                html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ(title_var);
                                html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            }
                            final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.NIL);
                            html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_form_method$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str236$post);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            if (cb_query.NIL != frame_name_var) {
                                html_utilities.html_markup(html_macros.$html_form_target$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(frame_name_var);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            }
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$89 = html_macros.$html_safe_print$.currentBinding(thread);
                            final SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_macros.$within_html_form$.bind((SubLObject)cb_query.T, thread);
                                html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                                html_utilities.html_hidden_input((SubLObject)cb_query.$str732$cb_save_inference_answers_int, (SubLObject)cb_query.T, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_hidden_input((SubLObject)cb_query.$str705$store_id, store_id_string, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_hidden_input((SubLObject)cb_query.$str706$inference_id, inference_id_string, (SubLObject)cb_query.UNPROVIDED);
                                cb_utilities.cb_help_preamble((SubLObject)cb_query.$kw729$CB_SAVE_INFERENCE_ANSWERS, (SubLObject)cb_query.NIL, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_princ_strong((SubLObject)cb_query.$str733$Save_query_results_as_);
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_radio_input((SubLObject)cb_query.$str707$_ans_format, (SubLObject)cb_query.$str734$_tab_delimited, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ((SubLObject)cb_query.$str735$Text);
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_radio_input((SubLObject)cb_query.$str707$_ans_format, (SubLObject)cb_query.$str736$_xml, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ((SubLObject)cb_query.$str737$Default_XML);
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_radio_input((SubLObject)cb_query.$str707$_ans_format, (SubLObject)cb_query.$str738$_custom_xml, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ((SubLObject)cb_query.$str739$User_defined_XML);
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_radio_input((SubLObject)cb_query.$str707$_ans_format, (SubLObject)cb_query.$str740$_alchemy, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ((SubLObject)cb_query.$str741$Alchemy_text__bindings_must_be_se);
                                html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_princ_strong((SubLObject)cb_query.$str742$Destination_);
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_radio_input((SubLObject)cb_query.$str708$_destination, (SubLObject)cb_query.$str743$_html_stream, (SubLObject)cb_query.T, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ((SubLObject)cb_query.$str744$Show_results_in_this_browser);
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_radio_input((SubLObject)cb_query.$str708$_destination, (SubLObject)cb_query.$str745$_file, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ((SubLObject)cb_query.$str746$Save_results_in_file_);
                                html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_text_input((SubLObject)cb_query.$str709$_filename, (SubLObject)cb_query.NIL, (SubLObject)cb_query.$int748$60);
                                html_script_utilities.html_clear_input_button((SubLObject)cb_query.$str709$_filename, (SubLObject)cb_query.$str749$Clear, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_princ_strong((SubLObject)cb_query.$str750$Optional_Parameters_);
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_checkbox_input((SubLObject)cb_query.$str710$cycl_prefix, (SubLObject)cb_query.$str751$cycl_prefix_enabled, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ((SubLObject)cb_query.$str752$Include______prefix_on_CycL_terms);
                                html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_princ_strong((SubLObject)cb_query.$str753$Please_enter_XML_specifications_i);
                                html_utilities.html_princ((SubLObject)cb_query.$str739$User_defined_XML);
                                html_utilities.html_princ_strong((SubLObject)cb_query.$str574$_);
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_textarea_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_textarea_name$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.$str719$_spec);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_textarea_cols$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.$int748$60);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_textarea_rows$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.TEN_INTEGER);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$90 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$90, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_textarea_tail$.getGlobalValue());
                                html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_reset_input((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_submit_input((SubLObject)cb_query.$str754$Submit, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                                html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                            }
                            finally {
                                html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                                html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$89, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_copyright_notice();
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$87, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    }
                    finally {
                        html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$86, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                }
                finally {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$85, thread);
                }
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            }
            finally {
                html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
            }
            return (SubLObject)cb_query.NIL;
        }
        cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 145249L)
    public static SubLObject cb_link_save_inference_answers(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str756$_Save_Answers_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = (SubLObject)cb_query.NIL;
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str757$cb_save_inference_answers__A__A, store_id, inference_id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_markup(html_macros.$html_event_attribute_onclick$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str689$window_open__);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str757$cb_save_inference_answers__A__A, store_id, inference_id);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str690$__);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str692$null);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str693$___A____, (SubLObject)cb_query.$str6$);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str694$return_false_);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 145827L)
    public static SubLObject cb_save_inference_answers_as_queries(final SubLObject args) {
        SubLObject arghash = (SubLObject)cb_query.NIL;
        if (cb_query.NIL != list_utilities.doubletonP(args)) {
            SubLObject store_id_string = (SubLObject)cb_query.NIL;
            SubLObject inference_id_string = (SubLObject)cb_query.NIL;
            cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
            store_id_string = args.first();
            SubLObject current = args.rest();
            cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
            inference_id_string = current.first();
            current = current.rest();
            if (cb_query.NIL == current) {
                arghash = html_arghash.new_arghash((SubLObject)cb_query.UNPROVIDED);
                html_arghash.set_arghash_value((SubLObject)cb_query.$kw759$STORE_ID, arghash, reader.read_from_string_ignoring_errors(store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED));
                html_arghash.set_arghash_value((SubLObject)cb_query.$kw699$INFERENCE_ID, arghash, reader.read_from_string_ignoring_errors(inference_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED));
            }
            else {
                cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
            }
        }
        else {
            arghash = html_arghash.arglist_to_arghash(args);
        }
        return cb_save_inference_answers_as_queries_int(arghash);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 146427L)
    public static SubLObject cb_save_inference_answers_as_queries_int(final SubLObject arghash) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
        if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
        }
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
        try {
            cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
            html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
            html_macros.html_head_content_type();
            cb_parameters.cb_head_shortcut_icon();
            html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
            cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str761$Save_Inference_Answers_as_Queries);
            html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
            dhtml_macros.dhtml_with_dom_script();
            dhtml_macros.dhtml_with_toggle_visibility_support();
            html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$91 = html_macros.$html_inside_bodyP$.currentBinding(thread);
            try {
                html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$92 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str761$Save_Inference_Answers_as_Queries);
                    html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
                    html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                    SubLObject do_workP = (SubLObject)cb_query.NIL;
                    if (cb_query.NIL != html_arghash.get_arghash_value((SubLObject)cb_query.$kw762$SUBMIT, arghash)) {
                        do_workP = (SubLObject)cb_query.T;
                        if (cb_query.NIL == html_arghash.get_arghash_value((SubLObject)cb_query.$kw763$EL_VARIABLES, arghash)) {
                            do_workP = (SubLObject)cb_query.NIL;
                            html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                            if (cb_query.NIL != html_macros.$html_color_sat_red$.getGlobalValue()) {
                                html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_color(html_macros.$html_color_sat_red$.getGlobalValue()));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            }
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$93 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                                html_utilities.html_princ((SubLObject)cb_query.$str764$Please_select_one_or_more_EL_vari);
                                html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$93, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
                            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                        }
                        if (cb_query.NIL == html_arghash.get_arghash_value((SubLObject)cb_query.$kw765$ANSWER_IDS, arghash)) {
                            do_workP = (SubLObject)cb_query.NIL;
                            html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
                            if (cb_query.NIL != html_macros.$html_color_sat_red$.getGlobalValue()) {
                                html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_color(html_macros.$html_color_sat_red$.getGlobalValue()));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            }
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$94 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                                html_utilities.html_princ((SubLObject)cb_query.$str766$Please_select_one_or_more_answers);
                                html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$94, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
                            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                        }
                    }
                    final SubLObject store_id = html_arghash.get_arghash_value((SubLObject)cb_query.$kw759$STORE_ID, arghash);
                    final SubLObject inference_id = html_arghash.get_arghash_value((SubLObject)cb_query.$kw699$INFERENCE_ID, arghash);
                    final SubLObject inference = inference_datastructures_problem_store.find_inference_by_ids(store_id, inference_id);
                    if (cb_query.NIL == inference_datastructures_inference.inference_p(inference)) {
                        return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id, store_id, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                    }
                    if (cb_query.NIL == do_workP) {
                        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.NIL);
                        html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_form_method$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str236$post);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        if (cb_query.NIL != frame_name_var) {
                            html_utilities.html_markup(html_macros.$html_form_target$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(frame_name_var);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        }
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$95 = html_macros.$html_safe_print$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_macros.$within_html_form$.bind((SubLObject)cb_query.T, thread);
                            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                            html_utilities.html_hidden_input((SubLObject)cb_query.$str768$cb_save_inference_answers_as_quer, (SubLObject)cb_query.T, (SubLObject)cb_query.UNPROVIDED);
                            html_arghash.html_arghash_hidden_input(arghash, (SubLObject)cb_query.$kw759$STORE_ID, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_arghash.html_arghash_hidden_input(arghash, (SubLObject)cb_query.$kw699$INFERENCE_ID, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            cb_utilities.cb_form(inference, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                            cb_utilities.cb_form(inference_datastructures_inference.inference_el_query(inference), (SubLObject)cb_query.NIL, (SubLObject)cb_query.T);
                            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ((SubLObject)cb_query.$str590$_in_);
                            cb_utilities.cb_form(inference_datastructures_inference.inference_mt(inference), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                            html_arghash.html_arghash_submit_input(arghash, (SubLObject)cb_query.$str754$Submit, (SubLObject)cb_query.$kw762$SUBMIT, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                            thread.resetMultipleValues();
                            final SubLObject current_answers = cb_query_browser.cb_inference_current_answers(inference);
                            final SubLObject free_el_variables = thread.secondMultipleValue();
                            final SubLObject inference_new_justification_set = thread.thirdMultipleValue();
                            thread.resetMultipleValues();
                            if (cb_query.NIL == current_answers) {
                                cb_utilities.cb_error((SubLObject)cb_query.$str769$Inference__A_in_problem_store__A_, inference_id, store_id, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            }
                            else if (cb_query.NIL == inference_datastructures_inference.inference_free_el_vars(inference)) {
                                return cb_utilities.cb_error((SubLObject)cb_query.$str770$Inference__A_in_problem_store__A_, inference_id, store_id, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            }
                            html_utilities.html_princ((SubLObject)cb_query.$str771$Which_variables_should_be_filled_);
                            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                            SubLObject cdolist_list_var = free_el_variables;
                            SubLObject free_el_variable = (SubLObject)cb_query.NIL;
                            free_el_variable = cdolist_list_var.first();
                            while (cb_query.NIL != cdolist_list_var) {
                                html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                                html_arghash.html_arghash_checkbox_input(arghash, (SubLObject)cb_query.$kw763$EL_VARIABLES, cycl_variables.variable_name(free_el_variable), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                                cb_utilities.cb_form(free_el_variable, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                cdolist_list_var = cdolist_list_var.rest();
                                free_el_variable = cdolist_list_var.first();
                            }
                            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ((SubLObject)cb_query.$str772$Which_answers_should_be_used_to_g);
                            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$96 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$97 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$98 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$98, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$99 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ_strong((SubLObject)cb_query.$str773$Answer);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$99, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    cb_query_browser.cb_show_bindings_horizontal_variable_row(free_el_variables, (SubLObject)cb_query.NIL, (SubLObject)cb_query.T);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$97, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                                SubLObject cdolist_list_var2 = current_answers;
                                SubLObject v_answer = (SubLObject)cb_query.NIL;
                                v_answer = cdolist_list_var2.first();
                                while (cb_query.NIL != cdolist_list_var2) {
                                    html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$100 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                        final SubLObject _prev_bind_0_$101 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                            html_arghash.html_arghash_checkbox_input(arghash, (SubLObject)cb_query.$kw765$ANSWER_IDS, inference_datastructures_inference.inference_answer_suid(v_answer), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                        }
                                        finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$101, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                        final SubLObject _prev_bind_0_$102 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                            cb_query_browser.cb_show_inference_answer_section_answer_number(v_answer, inference_new_justification_set, Sequences.length(current_answers));
                                        }
                                        finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$102, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                        cb_query_browser.cb_show_inference_answer_section_bindings(v_answer, free_el_variables);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$100, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    v_answer = cdolist_list_var2.first();
                                }
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$96, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                            html_arghash.html_arghash_submit_input(arghash, (SubLObject)cb_query.$str754$Submit, (SubLObject)cb_query.$kw762$SUBMIT, (SubLObject)cb_query.UNPROVIDED);
                            html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                        }
                        finally {
                            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                            html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$95, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                    }
                    else {
                        SubLObject el_variables = html_arghash.get_arghash_value_list((SubLObject)cb_query.$kw763$EL_VARIABLES, arghash);
                        final SubLObject answer_ids = html_arghash.get_arghash_value_list((SubLObject)cb_query.$kw765$ANSWER_IDS, arghash);
                        el_variables = Mapping.mapcar((SubLObject)cb_query.$sym774$MAKE_EL_VAR, el_variables);
                        save_inference_answers_as_queries(inference, answer_ids, el_variables);
                    }
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_copyright_notice();
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$92, thread);
                }
                html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            }
            finally {
                html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$91, thread);
            }
            html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
        }
        finally {
            cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 150240L)
    public static SubLObject save_inference_answers_as_queries(final SubLObject inference, final SubLObject answer_ids, final SubLObject el_variables) {
        SubLObject cdolist_list_var = answer_ids;
        SubLObject answer_id = (SubLObject)cb_query.NIL;
        answer_id = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            final SubLObject kb_query_being_saved = cb_kb_query_state.cb_kbq_new_query_state_from_inference(inference, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject v_answer = inference_datastructures_inference.find_inference_answer_by_id(inference, answer_id);
            final SubLObject answer_el_bindings = inference_datastructures_inference.inference_answer_bindings(v_answer);
            SubLObject query_formula = inference_datastructures_inference.inference_el_query(inference);
            final SubLObject query_properties = inference_datastructures_enumerated_types.inference_input_non_default_query_properties(inference);
            SubLObject relevant_el_bindings = (SubLObject)cb_query.NIL;
            SubLObject cdolist_list_var_$103 = answer_el_bindings;
            SubLObject answer_el_binding = (SubLObject)cb_query.NIL;
            answer_el_binding = cdolist_list_var_$103.first();
            while (cb_query.NIL != cdolist_list_var_$103) {
                if (cb_query.NIL != subl_promotions.memberP(answer_el_binding.first(), el_variables, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED)) {
                    relevant_el_bindings = (SubLObject)ConsesLow.cons(answer_el_binding, relevant_el_bindings);
                }
                cdolist_list_var_$103 = cdolist_list_var_$103.rest();
                answer_el_binding = cdolist_list_var_$103.first();
            }
            query_formula = bindings.apply_bindings(relevant_el_bindings, query_formula);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_princ_strong((SubLObject)cb_query.$str775$Reifying_query_for__);
            cb_utilities.cb_form(query_formula, (SubLObject)cb_query.NIL, (SubLObject)cb_query.T);
            cb_kb_query_state._csetf_kb_query_state_query_mts(kb_query_being_saved, (SubLObject)ConsesLow.list(inference_datastructures_inference.inference_mt(inference)));
            cb_kb_query_state._csetf_kb_query_state_sentences(kb_query_being_saved, (SubLObject)ConsesLow.list(query_formula));
            cb_kb_query_state._csetf_kb_query_state_query_properties(kb_query_being_saved, query_properties);
            cb_kb_query_state._csetf_kb_query_state_name(kb_query_being_saved, string_utilities.make_valid_constant_name(Sequences.cconcatenate(format_nil.format_nil_a_no_copy((SubLObject)cb_query.$str776$query_about), new SubLObject[] { cb_query.$str576$_, format_nil.format_nil_a_no_copy(query_formula.first().isCons() ? query_formula.first().first() : query_formula.first()), cb_query.$str576$_, format_nil.format_nil_a_no_copy(relevant_el_bindings) }), (SubLObject)cb_query.UNPROVIDED));
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
            html_utilities.html_princ((SubLObject)cb_query.$str777$New_Constant__);
            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
            cb_kb_query.cb_kb_save_new_query(kb_query_being_saved, (SubLObject)cb_query.T);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            answer_id = cdolist_list_var.first();
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 152055L)
    public static SubLObject cb_link_save_inference_answers_as_queries(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str620$_Save_Answers_as_Queries_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_id = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_id = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw8$MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str778$cb_save_inference_answers_as_quer, store_id, inference_id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 152649L)
    public static SubLObject cb_inference_answer_timeline(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL == current) {
            final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
            if (cb_query.NIL == inference) {
                return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str780$Inference__A__A_Answer_Timeline, store_id_string, inference_id_string);
                html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                dhtml_macros.dhtml_with_dom_script();
                dhtml_macros.dhtml_with_toggle_visibility_support();
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$104 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$105 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str781$Inference_Answer_Timeline);
                        html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
                        html_utilities.html_princ((SubLObject)cb_query.$str782$_for_);
                        cb_utilities.cb_link((SubLObject)cb_query.$kw272$INFERENCE, inference, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                        cb_show_inference_answer_timeline_image(inference, (SubLObject)cb_query.$list783);
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$105, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$104, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            }
            finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 153799L)
    public static SubLObject cb_link_inference_answer_timeline(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str785$_Answer_Timeline_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        final SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw8$MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str786$cb_inference_answer_timeline__A__, store_suid, inference_suid);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 154197L)
    public static SubLObject cb_show_inference_answer_timeline_image(final SubLObject inference, SubLObject plot_properties) {
        if (plot_properties == cb_query.UNPROVIDED) {
            plot_properties = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject tuples = inference_answer_tuples_for_chart(inference);
        final SubLObject use_millisecondsP = Numbers.numLE(list_utilities.last_one(tuples).first(), (SubLObject)cb_query.ONE_INTEGER);
        SubLObject chart_url = (SubLObject)cb_query.NIL;
        SubLObject s = (SubLObject)cb_query.NIL;
        try {
            s = streams_high.make_private_string_output_stream();
            final SubLObject _prev_bind_0 = reader.$read_default_float_format$.currentBinding(thread);
            try {
                reader.$read_default_float_format$.bind((SubLObject)cb_query.$sym788$DOUBLE_FLOAT, thread);
                streams_high.write_string((SubLObject)cb_query.$str789$http___chart_apis_google_com_char, s, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                streams_high.write_string((SubLObject)cb_query.$str790$cht_s, s, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                streams_high.write_string((SubLObject)cb_query.$str791$_chs_600x450, s, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
                final SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
                final SubLObject title = Sequences.cconcatenate((SubLObject)cb_query.$str792$Inference_, new SubLObject[] { format_nil.format_nil_a_no_copy(store_suid), cb_query.$str410$_, format_nil.format_nil_a_no_copy(inference_suid), cb_query.$str793$_Answer_Timeline });
                PrintLow.format(s, (SubLObject)cb_query.$str794$_chtt__A, web_utilities.html_url_encode(title, (SubLObject)cb_query.UNPROVIDED));
                final SubLObject last_tuple = list_utilities.last_one(tuples);
                final SubLObject last_time = Numbers.multiply((SubLObject)((cb_query.NIL != use_millisecondsP) ? cb_query.$int213$1000 : cb_query.ONE_INTEGER), number_utilities.significant_digits(last_tuple.first(), (SubLObject)cb_query.THREE_INTEGER));
                final SubLObject last_answer = Numbers.max((SubLObject)cb_query.TWO_INTEGER, conses_high.second(last_tuple));
                PrintLow.format(s, (SubLObject)cb_query.$str795$_chds__S__S__S__S, new SubLObject[] { cb_query.ZERO_INTEGER, last_time, cb_query.ZERO_INTEGER, last_answer });
                streams_high.write_string((SubLObject)cb_query.$str796$_chxt_x_y_x_y, s, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                PrintLow.format(s, (SubLObject)cb_query.$str797$_chxr_0__S__S_1__S__S, new SubLObject[] { cb_query.ZERO_INTEGER, last_time, cb_query.ZERO_INTEGER, last_answer });
                final SubLObject xunits = (SubLObject)((cb_query.NIL != use_millisecondsP) ? cb_query.$str798$milliseconds : cb_query.$str799$seconds);
                final SubLObject xlabel = Sequences.cconcatenate((SubLObject)cb_query.$str800$Time__, new SubLObject[] { format_nil.format_nil_a_no_copy(xunits), cb_query.$str577$_ });
                final SubLObject ylabel = (SubLObject)cb_query.$str801$Answer__;
                PrintLow.format(s, (SubLObject)cb_query.$str802$_chxl_2___A_3___A, web_utilities.html_url_encode(xlabel, (SubLObject)cb_query.UNPROVIDED), web_utilities.html_url_encode(ylabel, (SubLObject)cb_query.UNPROVIDED));
                PrintLow.format(s, (SubLObject)cb_query.$str803$_chxp_2__S_3__S, (SubLObject)cb_query.$int804$50, (SubLObject)cb_query.$int804$50);
                streams_high.write_string((SubLObject)cb_query.$str805$_chd_t_, s, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                SubLObject list_var = (SubLObject)cb_query.NIL;
                SubLObject tuple = (SubLObject)cb_query.NIL;
                SubLObject index = (SubLObject)cb_query.NIL;
                list_var = tuples;
                tuple = list_var.first();
                for (index = (SubLObject)cb_query.ZERO_INTEGER; cb_query.NIL != list_var; list_var = list_var.rest(), tuple = list_var.first(), index = Numbers.add((SubLObject)cb_query.ONE_INTEGER, index)) {
                    SubLObject time = number_utilities.significant_digits(tuple.first(), (SubLObject)cb_query.THREE_INTEGER);
                    if (cb_query.NIL != use_millisecondsP) {
                        time = Numbers.round(Numbers.multiply(time, (SubLObject)cb_query.$int213$1000), (SubLObject)cb_query.UNPROVIDED);
                    }
                    if (!index.isZero()) {
                        streams_high.write_string((SubLObject)cb_query.$str806$_, s, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                    }
                    print_high.princ(time, s);
                }
                streams_high.write_string((SubLObject)cb_query.$str409$_, s, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                list_var = (SubLObject)cb_query.NIL;
                tuple = (SubLObject)cb_query.NIL;
                index = (SubLObject)cb_query.NIL;
                list_var = tuples;
                tuple = list_var.first();
                for (index = (SubLObject)cb_query.ZERO_INTEGER; cb_query.NIL != list_var; list_var = list_var.rest(), tuple = list_var.first(), index = Numbers.add((SubLObject)cb_query.ONE_INTEGER, index)) {
                    final SubLObject v_answer = conses_high.second(tuple);
                    if (!index.isZero()) {
                        streams_high.write_string((SubLObject)cb_query.$str806$_, s, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                    }
                    print_high.princ(v_answer, s);
                }
            }
            finally {
                reader.$read_default_float_format$.rebind(_prev_bind_0, thread);
            }
            chart_url = streams_high.get_output_stream_string(s);
        }
        finally {
            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)cb_query.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                streams_high.close(s, (SubLObject)cb_query.UNPROVIDED);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        html_utilities.html_markup(html_macros.$html_image_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_image_src$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(chart_url);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_image_height$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$int807$450);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_image_width$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$int808$600);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_image_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 156602L)
    public static SubLObject inference_answer_tuples_for_chart(final SubLObject inference) {
        final SubLObject tuples = plot_generation.inference_answer_elapsed_time_tuples(inference);
        if (cb_query.NIL != list_utilities.lengthLE(tuples, (SubLObject)cb_query.$int809$120, (SubLObject)cb_query.UNPROVIDED)) {
            return tuples;
        }
        final SubLObject total = Sequences.length(tuples);
        final SubLObject first_10 = list_utilities.first_n((SubLObject)cb_query.TEN_INTEGER, tuples);
        SubLObject middle = Sequences.subseq(tuples, (SubLObject)cb_query.TEN_INTEGER, Numbers.subtract(total, (SubLObject)cb_query.TWENTY_INTEGER));
        final SubLObject last_10 = list_utilities.last_n((SubLObject)cb_query.TEN_INTEGER, tuples);
        middle = list_utilities.randomize_list(middle);
        middle = list_utilities.first_n((SubLObject)cb_query.$int137$100, middle);
        middle = Sort.sort(middle, Symbols.symbol_function((SubLObject)cb_query.$sym810$_), Symbols.symbol_function((SubLObject)cb_query.$sym811$SECOND));
        final SubLObject result_tuples = ConsesLow.nconc(first_10, middle, last_10);
        return result_tuples;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 157196L)
    public static SubLObject cb_inference_strengthen_properties(final SubLObject args) {
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        SubLObject mode_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list812);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list812);
        inference_id_string = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list812);
        mode_string = current.first();
        current = current.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list812);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
        if (cb_query.NIL == inference) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str598$Inference__A_in_problem_store__A_, inference_id_string, store_id_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        final SubLObject mode = reader.read_from_string_ignoring_errors(mode_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        SubLObject query_properties = (SubLObject)cb_query.NIL;
        final SubLObject pcase_var = mode;
        if (pcase_var.eql((SubLObject)cb_query.$kw415$ALL)) {
            query_properties = inference_parameters.inference_compute_all_answers_query_properties(inference);
        }
        else {
            if (!pcase_var.eql((SubLObject)cb_query.$kw813$SOME)) {
                return cb_utilities.cb_error((SubLObject)cb_query.$str814$Unexpected_mode__A, mode_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            query_properties = inference_parameters.inference_compute_some_answer_query_properties(inference);
        }
        final SubLObject sentence = inference_datastructures_inference.inference_input_el_query(inference);
        final SubLObject mt = inference_datastructures_inference.inference_input_mt(inference);
        return cb_parameter_strengthened_query(sentence, mt, query_properties, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 158191L)
    public static SubLObject cb_link_inference_strengthen_properties(final SubLObject inference, final SubLObject mode, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str816$_Strengthen_Parameters_;
        }
        assert cb_query.NIL != inference_datastructures_inference.inference_p(inference) : inference;
        if (cb_query.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && cb_query.NIL == list_utilities.member_eqP(mode, (SubLObject)cb_query.$list817)) {
            Errors.error((SubLObject)cb_query.$str818$_S_was_an_invalid_mode, mode);
        }
        final SubLObject store_suid = inference_datastructures_inference.inference_problem_store_suid(inference);
        final SubLObject inference_suid = inference_datastructures_inference.inference_suid(inference);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw8$MAIN);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str819$cb_inference_strengthen_propertie, new SubLObject[] { store_suid, inference_suid, mode });
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 158695L)
    public static SubLObject query_tool_default_for_property(final SubLObject query_property) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert cb_query.NIL != inference_datastructures_enumerated_types.query_property_p(query_property) : query_property;
        SubLObject value = (SubLObject)cb_query.NIL;
        SubLObject specifiedP = (SubLObject)cb_query.NIL;
        if (cb_query.NIL != inference_datastructures_enumerated_types.inference_dynamic_property_p(query_property)) {
            thread.resetMultipleValues();
            final SubLObject value_$106 = scaled_property_default_spec_lookup(query_property, cb_query.$cb_basic_inference_resource_constraints$.getGlobalValue());
            final SubLObject specifiedP_$107 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$106;
            specifiedP = specifiedP_$107;
            if (cb_query.NIL == specifiedP) {
                thread.resetMultipleValues();
                final SubLObject value_$107 = scaled_property_default_spec_lookup(query_property, cb_query.$cb_advanced_inference_dynamic_properties$.getGlobalValue());
                final SubLObject specifiedP_$108 = thread.secondMultipleValue();
                thread.resetMultipleValues();
                value = value_$107;
                specifiedP = specifiedP_$108;
            }
        }
        else if (cb_query.NIL != inference_datastructures_enumerated_types.inference_static_property_p(query_property)) {
            thread.resetMultipleValues();
            final SubLObject value_$108 = scaled_property_default_spec_lookup(query_property, cb_query.$cb_advanced_inference_static_properties$.getGlobalValue());
            final SubLObject specifiedP_$109 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$108;
            specifiedP = specifiedP_$109;
        }
        else if (cb_query.NIL != inference_datastructures_enumerated_types.strategy_dynamic_property_p(query_property)) {
            thread.resetMultipleValues();
            final SubLObject value_$109 = scaled_property_default_spec_lookup(query_property, cb_query.$cb_advanced_strategy_dynamic_properties$.getGlobalValue());
            final SubLObject specifiedP_$110 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$109;
            specifiedP = specifiedP_$110;
        }
        else if (cb_query.NIL != inference_datastructures_enumerated_types.strategy_static_property_p(query_property)) {
            thread.resetMultipleValues();
            final SubLObject value_$110 = scaled_property_default_spec_lookup(query_property, cb_query.$cb_advanced_strategy_static_properties$.getGlobalValue());
            final SubLObject specifiedP_$111 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$110;
            specifiedP = specifiedP_$111;
        }
        else if (cb_query.NIL != inference_datastructures_enumerated_types.problem_store_dynamic_property_p(query_property)) {
            thread.resetMultipleValues();
            final SubLObject value_$111 = scaled_property_default_spec_lookup(query_property, cb_query.$cb_advanced_problem_store_dynamic_properties$.getGlobalValue());
            final SubLObject specifiedP_$112 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$111;
            specifiedP = specifiedP_$112;
        }
        else if (cb_query.NIL != inference_datastructures_enumerated_types.problem_store_static_property_p(query_property)) {
            thread.resetMultipleValues();
            final SubLObject value_$112 = scaled_property_default_spec_lookup(query_property, cb_query.$cb_advanced_problem_store_static_properties$.getGlobalValue());
            final SubLObject specifiedP_$113 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            value = value_$112;
            specifiedP = specifiedP_$113;
        }
        return Values.values(value, specifiedP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 160530L)
    public static SubLObject scaled_property_default_spec_lookup(final SubLObject query_property, final SubLObject alist) {
        SubLObject value = (SubLObject)cb_query.NIL;
        SubLObject specifiedP = (SubLObject)cb_query.NIL;
        final SubLObject default_spec = conses_high.assoc(query_property, alist, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != default_spec) {
            value = possibly_scale_value_on_input(conses_high.second(default_spec), query_property);
            specifiedP = (SubLObject)cb_query.T;
        }
        else {
            value = (SubLObject)cb_query.NIL;
            specifiedP = (SubLObject)cb_query.NIL;
        }
        return Values.values(value, specifiedP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 160893L)
    public static SubLObject cb_transformation_rule_statistics(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        SubLObject current;
        final SubLObject datum = current = args;
        final SubLObject verbosity_string = (SubLObject)(current.isCons() ? current.first() : cb_query.NIL);
        cdestructuring_bind.destructuring_bind_must_listp(current, datum, (SubLObject)cb_query.$list823);
        current = current.rest();
        if (cb_query.NIL == current) {
            SubLObject verbosity_level = (SubLObject)cb_query.NIL;
            if (cb_query.NIL != verbosity_string) {
                verbosity_level = reader.read_from_string_ignoring_errors(verbosity_string, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            }
            else {
                verbosity_level = (SubLObject)cb_query.$kw824$TERSE;
            }
            if (!verbosity_level.isKeyword()) {
                verbosity_level = (SubLObject)cb_query.$kw824$TERSE;
            }
            return cb_transformation_rule_statistics_int(verbosity_level);
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list823);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 161444L)
    public static SubLObject cb_transformation_rule_statistics_int(final SubLObject verbosity_level) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject title_var;
        final SubLObject title = title_var = (SubLObject)cb_query.$str826$Experience_Control_Panel;
        final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
            html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$120 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (cb_query.NIL != title_var) {
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$121 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (cb_query.NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str235$yui_skin_sam);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$122 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str547$reloadFrameButton);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$123 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str548$button);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str549$reload);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ((SubLObject)cb_query.$str550$Refresh_Frames);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$123, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (cb_query.NIL != title_var) {
                            html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ(title_var);
                            html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        }
                        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.NIL);
                        html_utilities.html_markup(html_macros.$html_form_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_form_action$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(system_parameters.$cyc_cgi_program$.getDynamicValue(thread));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_form_method$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str236$post);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        if (cb_query.NIL != frame_name_var) {
                            html_utilities.html_markup(html_macros.$html_form_target$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(frame_name_var);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        }
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$124 = html_macros.$html_safe_print$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = html_macros.$within_html_form$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = html_macros.$html_form_field_uniquifier_code$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_macros.$within_html_form$.bind((SubLObject)cb_query.T, thread);
                            html_macros.$html_form_field_uniquifier_code$.bind(html_macros.next_html_form_field_uniquifier_code(), thread);
                            html_utilities.html_hidden_input((SubLObject)cb_query.$str827$cb_handle_transformation_rule_sta, (SubLObject)cb_query.T, (SubLObject)cb_query.UNPROVIDED);
                            cb_utilities.cb_link((SubLObject)cb_query.$kw828$TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$str244$_Refresh_, verbosity_level, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                            cb_utilities.cb_link((SubLObject)cb_query.$kw829$CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$str830$_Clear_All_Experience_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$125 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$126 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$127 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ((SubLObject)cb_query.$str831$Load_experience_from_file___);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$127, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$128 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$128, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$129 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_filename_input((SubLObject)cb_query.$str832$load_filename, (SubLObject)cb_query.$str6$, (SubLObject)cb_query.$int331$80);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$129, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$130 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$130, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$131 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_submit_input((SubLObject)cb_query.$str833$Load_Experience, (SubLObject)cb_query.$str834$load, (SubLObject)cb_query.UNPROVIDED);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$131, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$126, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$132 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$133 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ((SubLObject)cb_query.$str835$Save_experience_to_file___);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$133, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$134 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$134, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$135 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_filename_input((SubLObject)cb_query.$str836$save_filename, (SubLObject)cb_query.$str6$, (SubLObject)cb_query.$int331$80);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$135, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$136 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$136, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$137 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_submit_input((SubLObject)cb_query.$str837$Save_Experience, (SubLObject)cb_query.$str838$save, (SubLObject)cb_query.UNPROVIDED);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$137, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$132, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$125, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                            cb_show_transformation_rule_statistics(verbosity_level, (SubLObject)cb_query.UNPROVIDED);
                            html_macros.embed_form_field_code(html_macros.$html_form_field_uniquifier_code$.getDynamicValue(thread));
                        }
                        finally {
                            html_macros.$html_form_field_uniquifier_code$.rebind(_prev_bind_3, thread);
                            html_macros.$within_html_form$.rebind(_prev_bind_2, thread);
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$124, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_form_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$122, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$121, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            }
            finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$120, thread);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 162647L)
    public static SubLObject cb_link_transformation_rule_statistics(SubLObject linktext, SubLObject verbosity_level) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        if (verbosity_level == cb_query.UNPROVIDED) {
            verbosity_level = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str839$Transformation_Rule_Statistics;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str840$cb_transformation_rule_statistics, verbosity_level);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 163115L)
    public static SubLObject cb_show_transformation_rule_statistics(SubLObject verbosity_level, SubLObject order) {
        if (verbosity_level == cb_query.UNPROVIDED) {
            verbosity_level = (SubLObject)cb_query.$kw824$TERSE;
        }
        if (order == cb_query.UNPROVIDED) {
            order = (SubLObject)cb_query.$kw844$HISTORICAL_UTILITY;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject rules = inference_analysis.transformation_rules_with_statistics(order, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject rule_count = Sequences.length(rules);
        final SubLObject recent_rule_count = inference_analysis.transformation_rules_with_recent_statistics_count();
        final SubLObject received_rule_count = inference_analysis.transformation_rules_with_received_statistics_count();
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            SubLObject enabledP = inference_analysis.transformation_rule_statistics_update_enabledP();
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$138 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$139 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ((SubLObject)cb_query.$str845$Gather_during_inference___);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$139, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$140 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                    cb_utilities.cb_show_boolean(enabledP);
                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$140, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$141 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    cb_utilities.cb_link((SubLObject)((cb_query.NIL != enabledP) ? cb_query.$kw846$DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE : cb_query.$kw847$ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE), (SubLObject)((cb_query.NIL != enabledP) ? cb_query.$str848$_Disable_ : cb_query.$str849$_Enable_), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$141, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$138, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            enabledP = inference_strategic_heuristics.strategic_heuristic_rule_historical_utility_enabledP();
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$142 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$143 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ((SubLObject)cb_query.$str850$Use_for_sorting_during_inference_);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$143, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$144 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                    cb_utilities.cb_show_boolean(enabledP);
                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$144, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$145 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    cb_utilities.cb_link((SubLObject)((cb_query.NIL != enabledP) ? cb_query.$kw851$DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY : cb_query.$kw852$ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY), (SubLObject)((cb_query.NIL != enabledP) ? cb_query.$str848$_Disable_ : cb_query.$str849$_Enable_), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$145, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$142, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            enabledP = Equality.eql((SubLObject)cb_query.ONE_INTEGER, inference_analysis.$transformation_rule_historical_success_pruning_threshold$.getDynamicValue(thread));
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$146 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$147 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ((SubLObject)cb_query.$str853$Prune_never_before_successful_rul);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$147, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$148 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                    cb_utilities.cb_show_boolean(enabledP);
                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$148, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$149 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    cb_utilities.cb_link((SubLObject)((cb_query.NIL != enabledP) ? cb_query.$kw854$DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING : cb_query.$kw855$ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING), (SubLObject)((cb_query.NIL != enabledP) ? cb_query.$str848$_Disable_ : cb_query.$str849$_Enable_), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$149, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$146, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        if (!rule_count.isPositive()) {
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_princ((SubLObject)cb_query.$str856$No_rules);
            return (SubLObject)cb_query.ZERO_INTEGER;
        }
        final SubLObject load_history = inference_analysis.transformation_rule_statistics_filename_load_history();
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != load_history) {
            html_utilities.html_princ((SubLObject)cb_query.$str857$Experience_files_that_have_been_l);
            SubLObject cdolist_list_var = load_history;
            SubLObject filename = (SubLObject)cb_query.NIL;
            filename = cdolist_list_var.first();
            while (cb_query.NIL != cdolist_list_var) {
                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                html_utilities.html_princ(filename);
                cdolist_list_var = cdolist_list_var.rest();
                filename = cdolist_list_var.first();
            }
        }
        else {
            html_utilities.html_princ((SubLObject)cb_query.$str858$No_experience_files_have_been_loa);
        }
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        final SubLObject received_history = inference_analysis.transformation_rule_statistics_received_filename_load_history();
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != received_history) {
            html_utilities.html_princ((SubLObject)cb_query.$str859$Experience_files_that_have_been_r);
            SubLObject cdolist_list_var = received_history;
            SubLObject filename = (SubLObject)cb_query.NIL;
            filename = cdolist_list_var.first();
            while (cb_query.NIL != cdolist_list_var) {
                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                html_utilities.html_princ(filename);
                cdolist_list_var = cdolist_list_var.rest();
                filename = cdolist_list_var.first();
            }
        }
        else {
            html_utilities.html_princ((SubLObject)cb_query.$str860$No_experience_files_have_been_rec);
        }
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        final SubLObject total_considered_count = inference_analysis.total_transformation_rule_considered_count();
        final SubLObject total_success_count = inference_analysis.total_transformation_rule_success_count();
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_princ((SubLObject)cb_query.$str861$Total_experience_);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str862$_S_rule_considerations, total_considered_count);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str863$_S_rule_successes, total_success_count);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str864$_S_rules, rule_count);
        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
        if (cb_query.$kw415$ALL == verbosity_level) {
            html_utilities.html_princ((SubLObject)cb_query.$str865$_see_below_);
        }
        else {
            cb_utilities.cb_link((SubLObject)cb_query.$kw828$TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$str866$_Show_Rule_Details_, (SubLObject)cb_query.$kw415$ALL, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        final SubLObject recent_considered_count = inference_analysis.total_transformation_rule_recent_considered_count();
        final SubLObject recent_success_count = inference_analysis.total_transformation_rule_recent_success_count();
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_princ((SubLObject)cb_query.$str867$Experience_acquired_by_this_image);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str862$_S_rule_considerations, recent_considered_count);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str863$_S_rule_successes, recent_success_count);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str864$_S_rules, recent_rule_count);
        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
        if (cb_query.$kw868$IMAGE_SPECIFIC == verbosity_level) {
            html_utilities.html_princ((SubLObject)cb_query.$str865$_see_below_);
        }
        else {
            cb_utilities.cb_link((SubLObject)cb_query.$kw828$TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$str866$_Show_Rule_Details_, (SubLObject)cb_query.$kw868$IMAGE_SPECIFIC, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        final SubLObject received_considered_count = inference_analysis.total_transformation_rule_received_considered_count();
        final SubLObject received_success_count = inference_analysis.total_transformation_rule_received_success_count();
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_princ((SubLObject)cb_query.$str869$Experience_received_from_other_im);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str862$_S_rule_considerations, received_considered_count);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str863$_S_rule_successes, received_success_count);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str864$_S_rules, received_rule_count);
        html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
        if (cb_query.$kw868$IMAGE_SPECIFIC == verbosity_level) {
            html_utilities.html_princ((SubLObject)cb_query.$str865$_see_below_);
        }
        else {
            cb_utilities.cb_link((SubLObject)cb_query.$kw828$TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$str866$_Show_Rule_Details_, (SubLObject)cb_query.$kw868$IMAGE_SPECIFIC, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        cb_system_tools.possibly_insert_experience_options();
        final SubLObject utility_histogram = conses_high.copy_tree((SubLObject)cb_query.$list870);
        SubLObject cdolist_list_var = rules;
        SubLObject rule = (SubLObject)cb_query.NIL;
        rule = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            final SubLObject utility = inference_analysis.transformation_rule_historical_utility(rule);
            final SubLObject entry = Sequences.find(utility, utility_histogram, Symbols.symbol_function((SubLObject)cb_query.$sym871$__), Symbols.symbol_function((SubLObject)cb_query.$sym872$CAR), (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            ConsesLow.rplacd(entry, Numbers.add(entry.rest(), (SubLObject)cb_query.ONE_INTEGER));
            cdolist_list_var = cdolist_list_var.rest();
            rule = cdolist_list_var.first();
        }
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.ONE_INTEGER);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$150 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.FOUR_INTEGER);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$151 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str873$Rule_Utility_Histogram);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$151, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$150, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$152 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$153 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str875$Utility);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$153, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$154 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str876$Count);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$154, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$155 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str877$Percent);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$155, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$152, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            final SubLObject max_bucket_count = number_utilities.maximum(Mapping.mapcar(Symbols.symbol_function((SubLObject)cb_query.$sym878$CDR), utility_histogram), (SubLObject)cb_query.UNPROVIDED);
            SubLObject cdolist_list_var2 = utility_histogram;
            SubLObject histogram_entry = (SubLObject)cb_query.NIL;
            histogram_entry = cdolist_list_var2.first();
            while (cb_query.NIL != cdolist_list_var2) {
                SubLObject current;
                final SubLObject datum = current = histogram_entry;
                SubLObject bucket = (SubLObject)cb_query.NIL;
                SubLObject bucket_count = (SubLObject)cb_query.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list879);
                bucket = current.first();
                current = (bucket_count = current.rest());
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$156 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$157 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ(bucket);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$157, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$158 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ(bucket_count);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$158, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$159 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str880$_A__, number_utilities.significant_digits(Numbers.divide(Numbers.truncate(Numbers.multiply((SubLObject)cb_query.$int213$1000, Numbers.divide(bucket_count, rule_count)), (SubLObject)cb_query.UNPROVIDED), (SubLObject)cb_query.TEN_INTEGER), (SubLObject)cb_query.THREE_INTEGER));
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$159, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$160 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_percent_progress_bar(bucket_count, max_bucket_count, (SubLObject)cb_query.$int881$40, html_macros.$html_color_sat_green$.getGlobalValue(), (SubLObject)cb_query.NIL);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$160, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$156, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                cdolist_list_var2 = cdolist_list_var2.rest();
                histogram_entry = cdolist_list_var2.first();
            }
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        final SubLObject pcase_var = verbosity_level;
        if (pcase_var.eql((SubLObject)cb_query.$kw868$IMAGE_SPECIFIC)) {
            final SubLObject recent_rules = inference_analysis.transformation_rules_with_statistics(order, (SubLObject)cb_query.T, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str882$_S_rules_with_image_specific_expe, recent_rule_count, order);
            html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
            html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
            cb_utilities.cb_link((SubLObject)cb_query.$kw828$TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$str883$_Hide_Rule_Details_, (SubLObject)cb_query.$kw824$TERSE, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            SubLObject cdolist_list_var3 = recent_rules;
            SubLObject rule2 = (SubLObject)cb_query.NIL;
            rule2 = cdolist_list_var3.first();
            while (cb_query.NIL != cdolist_list_var3) {
                cb_show_transformation_rule_statistics_int(rule2);
                cdolist_list_var3 = cdolist_list_var3.rest();
                rule2 = cdolist_list_var3.first();
            }
        }
        else if (pcase_var.eql((SubLObject)cb_query.$kw415$ALL)) {
            html_utilities.html_markup(html_macros.$html_strong_head$.getGlobalValue());
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str884$_S_rules__sorted_by__A, rule_count, order);
            html_utilities.html_markup(html_macros.$html_strong_tail$.getGlobalValue());
            html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
            cb_utilities.cb_link((SubLObject)cb_query.$kw828$TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$str883$_Hide_Rule_Details_, (SubLObject)cb_query.$kw824$TERSE, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            cdolist_list_var = rules;
            rule = (SubLObject)cb_query.NIL;
            rule = cdolist_list_var.first();
            while (cb_query.NIL != cdolist_list_var) {
                cb_show_transformation_rule_statistics_int(rule);
                cdolist_list_var = cdolist_list_var.rest();
                rule = cdolist_list_var.first();
            }
        }
        return Sequences.length(rules);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 170480L)
    public static SubLObject cb_show_transformation_rule_statistics_int(final SubLObject rule) {
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        cb_show_transformation_rule_statistics_for_rule(rule, (SubLObject)cb_query.$kw824$TERSE);
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        cb_utilities.cb_show_assertion_readably(rule, (SubLObject)cb_query.T, (SubLObject)cb_query.T);
        return rule;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 170701L)
    public static SubLObject cb_show_transformation_rule_statistics_for_rule(final SubLObject rule, final SubLObject verbosity) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject considered = inference_analysis.transformation_rule_considered_count(rule);
        final SubLObject success = inference_analysis.transformation_rule_success_count(rule);
        final SubLObject probability = inference_analysis.transformation_rule_success_probability(rule, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject utility = inference_analysis.transformation_rule_historical_utility(rule);
        if (verbosity.eql((SubLObject)cb_query.$kw824$TERSE)) {
            cb_show_transformation_rule_utility_keyword(utility);
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str885$__S__S___S_____utility____S, new SubLObject[] { success, considered, number_utilities.significant_digits(Numbers.multiply((SubLObject)cb_query.$int137$100, probability), (SubLObject)cb_query.FOUR_INTEGER), utility });
        }
        else {
            cb_show_transformation_rule_utility_keyword(utility);
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str886$__S_utility, utility);
            if (considered.isZero()) {
                html_utilities.html_princ((SubLObject)cb_query.$str887$__never_considered);
            }
            else {
                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str888$__due_to__S___success___S__S_, new SubLObject[] { number_utilities.significant_digits(Numbers.multiply((SubLObject)cb_query.$int137$100, probability), (SubLObject)cb_query.FOUR_INTEGER), success, considered });
            }
        }
        return rule;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 171599L)
    public static SubLObject cb_show_transformation_rule_utility_keyword(final SubLObject utility) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        thread.resetMultipleValues();
        final SubLObject color = transformation_rule_utility_color_and_keyword(utility);
        final SubLObject keyword = thread.secondMultipleValue();
        thread.resetMultipleValues();
        final SubLObject string = Sequences.cconcatenate(keyword, (SubLObject)cb_query.$str889$__);
        final SubLObject explanation = Sequences.cconcatenate(format_nil.format_nil_a_no_copy(keyword), (SubLObject)cb_query.$str890$_mode_is_the_least_powerful_infer);
        html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
        if (cb_query.NIL != color) {
            html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_utilities.html_color(color));
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            cb_princ_strong_with_explanation(string, explanation, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 172043L)
    public static SubLObject transformation_rule_utility_color_and_keyword(final SubLObject utility) {
        final SubLObject min_shallow_utility = inference_parameters.min_rule_utility_for_inference_mode((SubLObject)cb_query.$kw891$SHALLOW);
        final SubLObject min_extended_utility = inference_parameters.min_rule_utility_for_inference_mode((SubLObject)cb_query.$kw892$EXTENDED);
        final SubLObject min_maximal_utility = inference_parameters.min_rule_utility_for_inference_mode((SubLObject)cb_query.$kw893$MAXIMAL);
        if (utility.numGE(min_shallow_utility)) {
            return Values.values((SubLObject)cb_query.$kw894$BLUE, (SubLObject)cb_query.$str895$Shallow);
        }
        if (utility.numGE(min_extended_utility)) {
            return Values.values((SubLObject)cb_query.$kw896$MAGENTA, (SubLObject)cb_query.$str897$Extended);
        }
        if (utility.numGE(min_maximal_utility)) {
            return Values.values((SubLObject)cb_query.$kw303$RED, (SubLObject)cb_query.$str898$Maximal);
        }
        return Values.values((SubLObject)cb_query.$kw303$RED, (SubLObject)cb_query.$str422$Forbidden);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 172625L)
    public static SubLObject cb_disable_strategic_heuristic_rule_historical_utility(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        inference_strategic_heuristics.disable_strategic_heuristic_rule_historical_utility();
        return cb_transformation_rule_statistics((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 172858L)
    public static SubLObject cb_link_disable_strategic_heuristic_rule_historical_utility(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str848$_Disable_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str900$cb_disable_strategic_heuristic_ru);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 173145L)
    public static SubLObject cb_enable_strategic_heuristic_rule_historical_utility(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        inference_strategic_heuristics.enable_strategic_heuristic_rule_historical_utility();
        return cb_transformation_rule_statistics((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 173375L)
    public static SubLObject cb_link_enable_strategic_heuristic_rule_historical_utility(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str849$_Enable_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str903$cb_enable_strategic_heuristic_rul);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 173659L)
    public static SubLObject cb_disable_transformation_rule_statistics_update(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        inference_analysis.disable_transformation_rule_statistics_update();
        return cb_transformation_rule_statistics((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 173880L)
    public static SubLObject cb_link_disable_transformation_rule_statistics_update(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str848$_Disable_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str906$cb_disable_transformation_rule_st);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 174155L)
    public static SubLObject cb_enable_transformation_rule_statistics_update(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        inference_analysis.enable_transformation_rule_statistics_update();
        return cb_transformation_rule_statistics((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 174373L)
    public static SubLObject cb_link_enable_transformation_rule_statistics_update(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str849$_Enable_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str909$cb_enable_transformation_rule_sta);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 174645L)
    public static SubLObject cb_disable_transformation_rule_historical_success_pruning(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        inference_analysis.$transformation_rule_historical_success_pruning_threshold$.setDynamicValue((SubLObject)cb_query.ZERO_INTEGER);
        return cb_transformation_rule_statistics((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 174902L)
    public static SubLObject cb_link_disable_transformation_rule_historical_success_pruning(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str848$_Disable_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str912$cb_disable_transformation_rule_hi);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 175195L)
    public static SubLObject cb_enable_transformation_rule_historical_success_pruning(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        inference_analysis.$transformation_rule_historical_success_pruning_threshold$.setDynamicValue((SubLObject)cb_query.ONE_INTEGER);
        return cb_transformation_rule_statistics((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 175450L)
    public static SubLObject cb_link_enable_transformation_rule_historical_success_pruning(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str849$_Enable_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str915$cb_enable_transformation_rule_his);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 175740L)
    public static SubLObject cb_clear_transformation_rule_statistics(final SubLObject args) {
        SubLObject assertion_id = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list917);
        assertion_id = args.first();
        final SubLObject current = args.rest();
        if (cb_query.NIL != current) {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list917);
            return (SubLObject)cb_query.NIL;
        }
        final SubLObject rule = cb_utilities.cb_guess_assertion(assertion_id);
        if (cb_query.NIL == rule) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str918$Could_not_determine_an_assertion_, assertion_id, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        inference_analysis.clear_transformation_rule_statistics(rule);
        return cb_utilities.cb_simple_message_page((SubLObject)cb_query.$str919$The_transformation_statistics_hav, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 176151L)
    public static SubLObject cb_link_clear_transformation_rule_statistics(final SubLObject rule, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str921$_Clear_;
        }
        final SubLObject id = assertion_handles.assertion_id(rule);
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str922$cb_clear_transformation_rule_stat, id);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return rule;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 176463L)
    public static SubLObject cb_clear_all_transformation_rule_statistics(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        inference_analysis.clear_all_transformation_rule_statistics();
        return cb_transformation_rule_statistics((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 176666L)
    public static SubLObject cb_link_clear_all_transformation_rule_statistics(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str926$_Clear_All_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str927$cb_clear_all_transformation_rule_);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 176933L)
    public static SubLObject cb_handle_transformation_rule_statistics(final SubLObject args) {
        final SubLObject loadP = list_utilities.sublisp_boolean(html_utilities.html_extract_input((SubLObject)cb_query.$str834$load, args));
        final SubLObject saveP = list_utilities.sublisp_boolean(html_utilities.html_extract_input((SubLObject)cb_query.$str838$save, args));
        if (loadP.eql(saveP)) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str929$Must_specify_either_load_or_save_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != loadP) {
            return cb_handle_transformation_rule_statistics_load(args);
        }
        if (cb_query.NIL != saveP) {
            return cb_handle_transformation_rule_statistics_save(args);
        }
        return cb_utilities.cb_error((SubLObject)cb_query.$str930$Unexpected_args__s, args, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 177431L)
    public static SubLObject cb_handle_transformation_rule_statistics_load(final SubLObject args) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject load_filename = html_utilities.html_extract_input((SubLObject)cb_query.$str832$load_filename, args);
        SubLObject non_existentP = (SubLObject)cb_query.NIL;
        if (cb_query.NIL != load_filename) {
            load_filename = string_utilities.trim_whitespace(load_filename);
            if (cb_query.NIL != string_utilities.empty_stringP(load_filename)) {
                load_filename = (SubLObject)cb_query.NIL;
            }
        }
        if (cb_query.NIL != load_filename) {
            non_existentP = (SubLObject)SubLObjectFactory.makeBoolean(cb_query.NIL == Filesys.probe_file(load_filename));
        }
        if (cb_query.NIL != non_existentP) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str932$The_specified_filename__S_could_n, load_filename, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL == load_filename) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str933$No_filename_was_specified_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        final SubLObject _prev_bind_0 = inference_analysis.$transformation_rule_statistics_update_enabledP$.currentBinding(thread);
        try {
            inference_analysis.$transformation_rule_statistics_update_enabledP$.bind((SubLObject)cb_query.T, thread);
            inference_analysis.load_transformation_rule_statistics(load_filename, (SubLObject)cb_query.T, (SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            inference_analysis.$transformation_rule_statistics_update_enabledP$.rebind(_prev_bind_0, thread);
        }
        return cb_transformation_rule_statistics_int((SubLObject)cb_query.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 178348L)
    public static SubLObject cb_handle_transformation_rule_statistics_save(final SubLObject args) {
        SubLObject save_filename = html_utilities.html_extract_input((SubLObject)cb_query.$str836$save_filename, args);
        SubLObject invalid_for_writingP = (SubLObject)cb_query.NIL;
        if (cb_query.NIL != save_filename) {
            save_filename = string_utilities.trim_whitespace(save_filename);
            if (cb_query.NIL != string_utilities.empty_stringP(save_filename)) {
                save_filename = (SubLObject)cb_query.NIL;
            }
        }
        if (cb_query.NIL != save_filename) {
            invalid_for_writingP = (SubLObject)SubLObjectFactory.makeBoolean(cb_query.NIL == file_utilities.file_valid_for_writing_p(save_filename));
        }
        if (cb_query.NIL != invalid_for_writingP) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str935$The_specified_filename__S_could_n, save_filename, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL == save_filename) {
            return cb_utilities.cb_error((SubLObject)cb_query.$str933$No_filename_was_specified_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        inference_analysis.save_transformation_rule_statistics(save_filename, (SubLObject)cb_query.NIL);
        return cb_utilities.cb_message_page_with_history((SubLObject)cb_query.$str936$Experience_saved_, (SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 179175L)
    public static SubLObject cb_forward_inference_metrics(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject title_var = (SubLObject)cb_query.$str938$Forward_Inference_Metrics;
        final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
            html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$161 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                dhtml_macros.html_basic_cb_scripts();
                if (cb_query.NIL != title_var) {
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$162 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (cb_query.NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str235$yui_skin_sam);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$163 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str547$reloadFrameButton);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$164 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str548$button);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str549$reload);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ((SubLObject)cb_query.$str550$Refresh_Frames);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$164, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        if (cb_query.NIL != title_var) {
                            html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ(title_var);
                            html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                            html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        }
                        dhtml_macros.dhtml_with_toggle_visibility_support();
                        cb_show_forward_inference_metrics((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$163, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$162, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            }
            finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$161, thread);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 179502L)
    public static SubLObject cb_link_forward_inference_metrics(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str938$Forward_Inference_Metrics;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str940$cb_forward_inference_metrics);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 179910L)
    public static SubLObject cb_rule_forward_inference_metrics(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        final SubLObject datum = current = args;
        SubLObject id = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list943);
        id = current.first();
        current = current.rest();
        if (cb_query.NIL == current) {
            final SubLObject rule = cb_utilities.cb_guess_assertion(id);
            final SubLObject global_info = inference_metrics.forward_inference_metrics_info((SubLObject)cb_query.UNPROVIDED);
            final SubLObject rule_info = inference_metrics.rule_forward_inference_metrics_info(rule);
            final SubLObject global_statistics = inference_metrics.global_statistics_from_forward_inference_metrics_info(global_info);
            final SubLObject title_var = (SubLObject)cb_query.$str944$Rule_Forward_Inference_Metrics;
            final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
            try {
                html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
                html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
                if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
                }
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$165 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
                try {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                    html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                    html_macros.html_head_content_type();
                    cb_parameters.cb_head_shortcut_icon();
                    html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                    cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                    dhtml_macros.html_basic_cb_scripts();
                    if (cb_query.NIL != title_var) {
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                        html_utilities.html_princ(title_var);
                        html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                    }
                    html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$166 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                    try {
                        html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                        if (cb_query.NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                            html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str235$yui_skin_sam);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$167 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str547$reloadFrameButton);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$168 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.$str548$button);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.$str549$reload);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ((SubLObject)cb_query.$str550$Refresh_Frames);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                    html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                                }
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$168, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                            if (cb_query.NIL != title_var) {
                                html_utilities.html_markup(html_macros.$html_heading_head$.getGlobalValue());
                                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_princ(title_var);
                                html_utilities.html_markup(html_macros.$html_heading_tail$.getGlobalValue());
                                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            }
                            cb_utilities.cb_link((SubLObject)cb_query.$kw945$RULE_FORWARD_INFERENCE_METRICS, rule, (SubLObject)cb_query.$str244$_Refresh_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                            cb_utilities.cb_link((SubLObject)cb_query.$kw941$FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$str946$_All_Forward_Inference_Metrics_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                            cb_show_rule_forward_inference_metrics(rule_info, (SubLObject)cb_query.$kw947$VERBOSE, global_statistics, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_copyright_notice();
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$167, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    }
                    finally {
                        html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$166, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
                }
                finally {
                    cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$165, thread);
                }
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            }
            finally {
                html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list943);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 180606L)
    public static SubLObject cb_link_rule_forward_inference_metrics(final SubLObject rule, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str949$_Forward_Inference_Metrics_;
        }
        if (cb_query.NIL != assertions_high.rule_assertionP(rule)) {
            final SubLObject id = assertion_handles.assertion_id(rule);
            final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str950$cb_rule_forward_inference_metrics, id);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        else {
            final SubLObject frame_name_var2 = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
            html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            cb_parameters.cyc_cgi_url_int();
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str951$cb_rule_forward_inference_metrics);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != frame_name_var2) {
                html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(frame_name_var2);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_2 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_princ(linktext);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_2, thread);
            }
            html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        }
        return rule;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 181065L)
    public static SubLObject cb_clear_forward_inference_metrics(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        inference_metrics.clear_forward_inference_metrics();
        return cb_forward_inference_metrics((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 181232L)
    public static SubLObject cb_link_clear_forward_inference_metrics(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str954$_Clear_Forward_Metrics_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str955$cb_clear_forward_inference_metric);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 181493L)
    public static SubLObject cb_start_gathering_forward_inference_metrics(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        inference_metrics.$gathering_forward_inference_metricsP$.setDynamicValue((SubLObject)cb_query.T);
        return cb_forward_inference_metrics((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 181685L)
    public static SubLObject cb_link_start_gathering_forward_inference_metrics(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str959$_Start_Gathering_Metrics_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str960$cb_start_gathering_forward_infere);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 181968L)
    public static SubLObject cb_stop_gathering_forward_inference_metrics(SubLObject args) {
        if (args == cb_query.UNPROVIDED) {
            args = (SubLObject)cb_query.NIL;
        }
        inference_metrics.$gathering_forward_inference_metricsP$.setDynamicValue((SubLObject)cb_query.NIL);
        return cb_forward_inference_metrics((SubLObject)cb_query.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 182161L)
    public static SubLObject cb_link_stop_gathering_forward_inference_metrics(SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str964$_Stop_Gathering_Metrics_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw11$SELF);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        html_utilities.html_princ((SubLObject)cb_query.$str965$cb_stop_gathering_forward_inferen);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 182532L)
    public static SubLObject cb_show_forward_inference_metrics(SubLObject threshold) {
        if (threshold == cb_query.UNPROVIDED) {
            threshold = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject info = inference_metrics.forward_inference_metrics_info(threshold);
        final SubLObject global_statistics = inference_metrics.global_statistics_from_forward_inference_metrics_info(info);
        final SubLObject success_statistics = inference_metrics.forward_inference_success_metrics_from_info(info);
        final SubLObject metric_time_totals_statistics = inference_metrics.forward_inference_metrics_time_totals();
        final SubLObject metric_count_totals_statistics = inference_metrics.forward_inference_metrics_count_totals();
        cb_utilities.cb_link((SubLObject)cb_query.$kw941$FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$str244$_Refresh_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != info) {
            cb_utilities.cb_link((SubLObject)cb_query.$kw956$CLEAR_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$str954$_Clear_Forward_Metrics_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL != inference_metrics.$gathering_forward_inference_metricsP$.getDynamicValue(thread)) {
            cb_utilities.cb_link((SubLObject)cb_query.$kw966$STOP_GATHERING_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$str964$_Stop_Gathering_Metrics_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        else {
            cb_utilities.cb_link((SubLObject)cb_query.$kw961$START_GATHERING_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$str959$_Start_Gathering_Metrics_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        }
        if (cb_query.NIL == info) {
            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
            if (cb_query.NIL != inference_metrics.$gathering_forward_inference_metricsP$.getDynamicValue(thread)) {
                html_utilities.html_princ((SubLObject)cb_query.$str968$_No_forward_inference_metrics_hav);
            }
            else {
                html_utilities.html_princ((SubLObject)cb_query.$str969$No_forward_inference_metrics_have);
            }
        }
        else {
            final SubLObject current;
            final SubLObject datum = current = global_statistics;
            final SubLObject total_time_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw970$TOTAL_TIME, current);
            final SubLObject total_time = (SubLObject)((cb_query.NIL != total_time_tail) ? conses_high.cadr(total_time_tail) : cb_query.NIL);
            final SubLObject total_inference_time_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw971$TOTAL_INFERENCE_TIME, current);
            final SubLObject total_inference_time = (SubLObject)((cb_query.NIL != total_inference_time_tail) ? conses_high.cadr(total_inference_time_tail) : cb_query.NIL);
            final SubLObject total_inferences_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw972$TOTAL_INFERENCES, current);
            final SubLObject total_inferences = (SubLObject)((cb_query.NIL != total_inferences_tail) ? conses_high.cadr(total_inferences_tail) : cb_query.NIL);
            final SubLObject total_triggers_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw973$TOTAL_TRIGGERS, current);
            final SubLObject total_triggers = (SubLObject)((cb_query.NIL != total_triggers_tail) ? conses_high.cadr(total_triggers_tail) : cb_query.NIL);
            final SubLObject total_rules_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw974$TOTAL_RULES, current);
            final SubLObject total_rules = (SubLObject)((cb_query.NIL != total_rules_tail) ? conses_high.cadr(total_rules_tail) : cb_query.NIL);
            final SubLObject average_inferences_per_rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw975$AVERAGE_INFERENCES_PER_RULE, current);
            final SubLObject average_inferences_per_rule = (SubLObject)((cb_query.NIL != average_inferences_per_rule_tail) ? conses_high.cadr(average_inferences_per_rule_tail) : cb_query.NIL);
            final SubLObject stdev_inferences_per_rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw976$STDEV_INFERENCES_PER_RULE, current);
            final SubLObject stdev_inferences_per_rule = (SubLObject)((cb_query.NIL != stdev_inferences_per_rule_tail) ? conses_high.cadr(stdev_inferences_per_rule_tail) : cb_query.NIL);
            final SubLObject average_trigger_per_rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw977$AVERAGE_TRIGGER_PER_RULE, current);
            final SubLObject average_trigger_per_rule = (SubLObject)((cb_query.NIL != average_trigger_per_rule_tail) ? conses_high.cadr(average_trigger_per_rule_tail) : cb_query.NIL);
            final SubLObject stdev_trigger_per_rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw978$STDEV_TRIGGER_PER_RULE, current);
            final SubLObject stdev_trigger_per_rule = (SubLObject)((cb_query.NIL != stdev_trigger_per_rule_tail) ? conses_high.cadr(stdev_trigger_per_rule_tail) : cb_query.NIL);
            final SubLObject average_time_per_rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw979$AVERAGE_TIME_PER_RULE, current);
            final SubLObject average_time_per_rule = (SubLObject)((cb_query.NIL != average_time_per_rule_tail) ? conses_high.cadr(average_time_per_rule_tail) : cb_query.NIL);
            final SubLObject stdev_time_per_rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw980$STDEV_TIME_PER_RULE, current);
            final SubLObject stdev_time_per_rule = (SubLObject)((cb_query.NIL != stdev_time_per_rule_tail) ? conses_high.cadr(stdev_time_per_rule_tail) : cb_query.NIL);
            final SubLObject average_time_per_inference_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw981$AVERAGE_TIME_PER_INFERENCE, current);
            final SubLObject average_time_per_inference = (SubLObject)((cb_query.NIL != average_time_per_inference_tail) ? conses_high.cadr(average_time_per_inference_tail) : cb_query.NIL);
            final SubLObject stdev_time_per_inference_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw982$STDEV_TIME_PER_INFERENCE, current);
            final SubLObject stdev_time_per_inference = (SubLObject)((cb_query.NIL != stdev_time_per_inference_tail) ? conses_high.cadr(stdev_time_per_inference_tail) : cb_query.NIL);
            final SubLObject average_time_per_trigger_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw983$AVERAGE_TIME_PER_TRIGGER, current);
            final SubLObject average_time_per_trigger = (SubLObject)((cb_query.NIL != average_time_per_trigger_tail) ? conses_high.cadr(average_time_per_trigger_tail) : cb_query.NIL);
            final SubLObject stdev_time_per_trigger_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw984$STDEV_TIME_PER_TRIGGER, current);
            final SubLObject stdev_time_per_trigger = (SubLObject)((cb_query.NIL != stdev_time_per_trigger_tail) ? conses_high.cadr(stdev_time_per_trigger_tail) : cb_query.NIL);
            final SubLObject current_$170;
            final SubLObject datum_$169 = current_$170 = success_statistics;
            final SubLObject success_rule_count_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw985$SUCCESS_RULE_COUNT, current_$170);
            final SubLObject success_rule_count = (SubLObject)((cb_query.NIL != success_rule_count_tail) ? conses_high.cadr(success_rule_count_tail) : cb_query.NIL);
            final SubLObject success_trigger_count_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw986$SUCCESS_TRIGGER_COUNT, current_$170);
            final SubLObject success_trigger_count = (SubLObject)((cb_query.NIL != success_trigger_count_tail) ? conses_high.cadr(success_trigger_count_tail) : cb_query.NIL);
            final SubLObject success_time_estimate_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw987$SUCCESS_TIME_ESTIMATE, current_$170);
            final SubLObject success_time_estimate = (SubLObject)((cb_query.NIL != success_time_estimate_tail) ? conses_high.cadr(success_time_estimate_tail) : cb_query.NIL);
            final SubLObject success_rule_ratio_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw988$SUCCESS_RULE_RATIO, current_$170);
            final SubLObject success_rule_ratio = (SubLObject)((cb_query.NIL != success_rule_ratio_tail) ? conses_high.cadr(success_rule_ratio_tail) : cb_query.NIL);
            final SubLObject success_trigger_ratio_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw989$SUCCESS_TRIGGER_RATIO, current_$170);
            final SubLObject success_trigger_ratio = (SubLObject)((cb_query.NIL != success_trigger_ratio_tail) ? conses_high.cadr(success_trigger_ratio_tail) : cb_query.NIL);
            final SubLObject success_time_ratio_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw990$SUCCESS_TIME_RATIO, current_$170);
            final SubLObject success_time_ratio = (SubLObject)((cb_query.NIL != success_time_ratio_tail) ? conses_high.cadr(success_time_ratio_tail) : cb_query.NIL);
            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
            html_utilities.html_princ((SubLObject)cb_query.$str991$Total_time__);
            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
            html_utilities.html_princ(numeric_date_utilities.readable_elapsed_time_string_ms(total_time));
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
            html_utilities.html_princ((SubLObject)cb_query.$str992$Inference_time__);
            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
            html_utilities.html_princ(numeric_date_utilities.readable_elapsed_time_string_ms(total_inference_time));
            PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str993$___A__, number_utilities.significant_digits(Numbers.multiply((SubLObject)cb_query.$int137$100, number_utilities.safe_X(total_inference_time, total_time)), (SubLObject)cb_query.THREE_INTEGER));
            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
            html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellpadding$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(html_macros.$html_table_cellspacing$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$171 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$172 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str994$Successful);
                        html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$173 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$174 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                SubLObject current_$171;
                                final SubLObject datum_$170 = current_$171 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(success_time_estimate), (SubLObject)cb_query.UNPROVIDED);
                                SubLObject time = (SubLObject)cb_query.NIL;
                                SubLObject units = (SubLObject)cb_query.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$171, datum_$170, (SubLObject)cb_query.$list995);
                                time = current_$171.first();
                                current_$171 = current_$171.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$171, datum_$170, (SubLObject)cb_query.$list995);
                                units = current_$171.first();
                                current_$171 = current_$171.rest();
                                if (cb_query.NIL == current_$171) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$175 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(time);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$175, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$176 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_italic_head$.getGlobalValue());
                                        html_utilities.html_princ((SubLObject)cb_query.$str996$__est_);
                                        html_utilities.html_markup(html_macros.$html_italic_tail$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$176, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$170, (SubLObject)cb_query.$list995);
                                }
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$174, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$177 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$178 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(success_trigger_count);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$178, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$179 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str997$_inference_P, success_trigger_count);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$179, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$177, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$180 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$181 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(success_rule_count);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$181, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$182 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str998$_rule_P);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$182, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$180, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$183 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$184 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(success_trigger_count);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$184, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$185 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str999$_trigger_P, success_trigger_count);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$185, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$183, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$186 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$187 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$187, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$188 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$188, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$186, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$173, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$172, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$189 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$189, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$190 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str1000$Total);
                        html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$191 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$192 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                SubLObject current_$172;
                                final SubLObject datum_$171 = current_$172 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(total_inference_time), (SubLObject)cb_query.UNPROVIDED);
                                SubLObject time = (SubLObject)cb_query.NIL;
                                SubLObject units = (SubLObject)cb_query.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$172, datum_$171, (SubLObject)cb_query.$list995);
                                time = current_$172.first();
                                current_$172 = current_$172.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$172, datum_$171, (SubLObject)cb_query.$list995);
                                units = current_$172.first();
                                current_$172 = current_$172.rest();
                                if (cb_query.NIL == current_$172) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$193 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(time);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$193, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$194 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(units);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$194, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$171, (SubLObject)cb_query.$list995);
                                }
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$192, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$195 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$196 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(total_inferences);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$196, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$197 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str997$_inference_P, total_inferences);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$197, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$195, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$198 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$199 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(total_rules);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$199, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$200 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str998$_rule_P, total_rules);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$200, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$198, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$201 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$202 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(total_triggers);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$202, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$203 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str999$_trigger_P, total_triggers);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$203, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$201, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$204 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$205 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$205, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$206 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$206, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$204, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$191, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$190, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$207 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$207, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$208 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str1001$Success__);
                        html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$209 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$210 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$211 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(number_utilities.safe_percent(success_time_ratio, (SubLObject)cb_query.ONE_INTEGER, (SubLObject)cb_query.THREE_INTEGER));
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$211, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$212 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ((SubLObject)cb_query.$str1002$__);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$212, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$210, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$213 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$214 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(number_utilities.safe_percent(success_trigger_ratio, (SubLObject)cb_query.ONE_INTEGER, (SubLObject)cb_query.THREE_INTEGER));
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$214, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$215 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ((SubLObject)cb_query.$str1002$__);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$215, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$213, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$216 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$217 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(number_utilities.safe_percent(success_rule_ratio, (SubLObject)cb_query.ONE_INTEGER, (SubLObject)cb_query.THREE_INTEGER));
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$217, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$218 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ((SubLObject)cb_query.$str1002$__);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$218, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$216, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$219 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$220 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(number_utilities.safe_percent(success_trigger_ratio, (SubLObject)cb_query.ONE_INTEGER, (SubLObject)cb_query.THREE_INTEGER));
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$220, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$221 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ((SubLObject)cb_query.$str1002$__);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$221, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$219, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$222 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$223 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$223, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$224 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_glyph((SubLObject)cb_query.$kw747$NBSP, (SubLObject)cb_query.UNPROVIDED);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$224, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$222, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$209, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$208, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$225 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$225, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$226 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str1003$Averages);
                        html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$227 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$228 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                SubLObject current_$173;
                                final SubLObject datum_$172 = current_$173 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(average_time_per_rule), (SubLObject)cb_query.UNPROVIDED);
                                SubLObject time = (SubLObject)cb_query.NIL;
                                SubLObject units = (SubLObject)cb_query.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$173, datum_$172, (SubLObject)cb_query.$list995);
                                time = current_$173.first();
                                current_$173 = current_$173.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$173, datum_$172, (SubLObject)cb_query.$list995);
                                units = current_$173.first();
                                current_$173 = current_$173.rest();
                                if (cb_query.NIL == current_$173) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$229 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(time);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$229, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$230 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ((SubLObject)cb_query.$str1004$___rule);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$230, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$172, (SubLObject)cb_query.$list995);
                                }
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$228, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$231 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$232 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(number_utilities.significant_digits(average_inferences_per_rule, (SubLObject)cb_query.THREE_INTEGER));
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$232, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$233 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ((SubLObject)cb_query.$str1005$_inferences___rule);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$233, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$231, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$234 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                SubLObject current_$174;
                                final SubLObject datum_$173 = current_$174 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(average_time_per_inference), (SubLObject)cb_query.UNPROVIDED);
                                SubLObject time = (SubLObject)cb_query.NIL;
                                SubLObject units = (SubLObject)cb_query.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$174, datum_$173, (SubLObject)cb_query.$list995);
                                time = current_$174.first();
                                current_$174 = current_$174.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$174, datum_$173, (SubLObject)cb_query.$list995);
                                units = current_$174.first();
                                current_$174 = current_$174.rest();
                                if (cb_query.NIL == current_$174) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$235 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(time);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$235, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$236 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ((SubLObject)cb_query.$str1006$___inference);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$236, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$173, (SubLObject)cb_query.$list995);
                                }
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$234, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$237 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$238 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(number_utilities.significant_digits(average_trigger_per_rule, (SubLObject)cb_query.THREE_INTEGER));
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$238, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$239 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ((SubLObject)cb_query.$str1007$_triggers___rule);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$239, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$237, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$240 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                SubLObject current_$175;
                                final SubLObject datum_$174 = current_$175 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(average_time_per_trigger), (SubLObject)cb_query.UNPROVIDED);
                                SubLObject time = (SubLObject)cb_query.NIL;
                                SubLObject units = (SubLObject)cb_query.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$175, datum_$174, (SubLObject)cb_query.$list995);
                                time = current_$175.first();
                                current_$175 = current_$175.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$175, datum_$174, (SubLObject)cb_query.$list995);
                                units = current_$175.first();
                                current_$175 = current_$175.rest();
                                if (cb_query.NIL == current_$175) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$241 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(time);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$241, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$242 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ((SubLObject)cb_query.$str1008$___trigger);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$242, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$174, (SubLObject)cb_query.$list995);
                                }
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$240, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$227, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$226, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$243 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$243, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$244 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ_strong((SubLObject)cb_query.$str1009$Standard_Deviations);
                        html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$245 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$246 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                SubLObject current_$176;
                                final SubLObject datum_$175 = current_$176 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(stdev_time_per_rule), (SubLObject)cb_query.UNPROVIDED);
                                SubLObject time = (SubLObject)cb_query.NIL;
                                SubLObject units = (SubLObject)cb_query.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$176, datum_$175, (SubLObject)cb_query.$list995);
                                time = current_$176.first();
                                current_$176 = current_$176.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$176, datum_$175, (SubLObject)cb_query.$list995);
                                units = current_$176.first();
                                current_$176 = current_$176.rest();
                                if (cb_query.NIL == current_$176) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$247 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(time);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$247, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$248 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ((SubLObject)cb_query.$str1004$___rule);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$248, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$175, (SubLObject)cb_query.$list995);
                                }
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$246, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$249 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$250 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(number_utilities.significant_digits(stdev_inferences_per_rule, (SubLObject)cb_query.THREE_INTEGER));
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$250, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$251 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ((SubLObject)cb_query.$str1005$_inferences___rule);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$251, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$249, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$252 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                SubLObject current_$177;
                                final SubLObject datum_$176 = current_$177 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(stdev_time_per_inference), (SubLObject)cb_query.UNPROVIDED);
                                SubLObject time = (SubLObject)cb_query.NIL;
                                SubLObject units = (SubLObject)cb_query.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$177, datum_$176, (SubLObject)cb_query.$list995);
                                time = current_$177.first();
                                current_$177 = current_$177.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$177, datum_$176, (SubLObject)cb_query.$list995);
                                units = current_$177.first();
                                current_$177 = current_$177.rest();
                                if (cb_query.NIL == current_$177) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$253 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(time);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$253, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$254 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ((SubLObject)cb_query.$str1006$___inference);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$254, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$176, (SubLObject)cb_query.$list995);
                                }
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$252, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$255 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$256 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(number_utilities.significant_digits(stdev_trigger_per_rule, (SubLObject)cb_query.THREE_INTEGER));
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$256, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$257 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ((SubLObject)cb_query.$str1007$_triggers___rule);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$257, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$255, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$258 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                SubLObject current_$178;
                                final SubLObject datum_$177 = current_$178 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(stdev_time_per_trigger), (SubLObject)cb_query.UNPROVIDED);
                                SubLObject time = (SubLObject)cb_query.NIL;
                                SubLObject units = (SubLObject)cb_query.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$178, datum_$177, (SubLObject)cb_query.$list995);
                                time = current_$178.first();
                                current_$178 = current_$178.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$178, datum_$177, (SubLObject)cb_query.$list995);
                                units = current_$178.first();
                                current_$178 = current_$178.rest();
                                if (cb_query.NIL == current_$178) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$259 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(time);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$259, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$260 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(units);
                                        html_utilities.html_princ((SubLObject)cb_query.$str1008$___trigger);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$260, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$177, (SubLObject)cb_query.$list995);
                                }
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$258, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$245, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$244, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$171, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str259$other_inferences, (SubLObject)cb_query.$str1010$_Show_Metric_Histogram_, (SubLObject)cb_query.$str1011$_Hide_Metric_Histogram_);
            dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str259$other_inferences, (SubLObject)cb_query.$kw241$INVISIBLE, (SubLObject)cb_query.$kw399$TEXT);
            html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
            html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup((SubLObject)cb_query.$str259$other_inferences);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                cb_forward_inference_metrics_times_and_counts_table(metric_time_totals_statistics, metric_count_totals_statistics);
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
            }
            html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
            SubLObject cumulative_time = (SubLObject)cb_query.ZERO_INTEGER;
            SubLObject list_var = (SubLObject)cb_query.NIL;
            SubLObject rule_info = (SubLObject)cb_query.NIL;
            SubLObject index = (SubLObject)cb_query.NIL;
            list_var = info;
            rule_info = list_var.first();
            for (index = (SubLObject)cb_query.ZERO_INTEGER; cb_query.NIL != list_var; list_var = list_var.rest(), rule_info = list_var.first(), index = Numbers.add((SubLObject)cb_query.ONE_INTEGER, index)) {
                if (cb_query.NIL == threshold || index.numL(threshold)) {
                    final SubLObject time2 = conses_high.getf(rule_info, (SubLObject)cb_query.$kw1012$TIME, (SubLObject)cb_query.UNPROVIDED);
                    cumulative_time = Numbers.add(cumulative_time, time2);
                    html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                    cb_show_rule_forward_inference_metrics(rule_info, cb_query.$cb_show_forward_inference_metrics_verbosity$.getDynamicValue(thread), global_statistics, cumulative_time);
                }
            }
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 192995L)
    public static SubLObject extend_metric_plist_with_totals(SubLObject metric_plist) {
        SubLObject remainder;
        SubLObject key;
        SubLObject value;
        for (remainder = (SubLObject)cb_query.NIL, remainder = metric_plist; cb_query.NIL != remainder; remainder = conses_high.cddr(remainder)) {
            key = remainder.first();
            value = conses_high.cadr(remainder);
            if (key.isCons()) {
                metric_plist = conses_high.putf(metric_plist, key.first(), Numbers.add(list_utilities.plist_lookup(metric_plist, key.first(), (SubLObject)cb_query.ZERO_INTEGER), value));
            }
        }
        return metric_plist;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 193282L)
    public static SubLObject cb_forward_inference_metrics_times_and_counts_table(SubLObject time_plist, SubLObject count_plist) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject total_time = Functions.apply((SubLObject)cb_query.$sym1013$_, list_utilities.plist_values(time_plist));
        time_plist = extend_metric_plist_with_totals(time_plist);
        time_plist = list_utilities.sort_plist_by_values(time_plist, (SubLObject)cb_query.$sym1014$SAFE__);
        count_plist = extend_metric_plist_with_totals(count_plist);
        count_plist = list_utilities.sort_plist_by_values(count_plist, (SubLObject)cb_query.$sym1014$SAFE__);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$277 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$278 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str876$Count);
                    html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$278, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$279 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str1015$Metric);
                    html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$279, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$280 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str1016$Total_time);
                    html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$280, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$281 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str1017$_);
                    html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$281, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$282 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_princ_strong((SubLObject)cb_query.$str1018$Time___call);
                    html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$282, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$277, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            SubLObject row_num = (SubLObject)cb_query.ZERO_INTEGER;
            SubLObject bgcolor = (SubLObject)cb_query.NIL;
            SubLObject remainder;
            SubLObject metric;
            SubLObject time;
            SubLObject count;
            SubLObject _prev_bind_0_$283;
            SubLObject _prev_bind_0_$284;
            SubLObject _prev_bind_0_$285;
            SubLObject current;
            SubLObject datum;
            SubLObject just_time;
            SubLObject units;
            SubLObject _prev_bind_0_$286;
            SubLObject _prev_bind_0_$287;
            SubLObject _prev_bind_0_$288;
            SubLObject _prev_bind_0_$289;
            SubLObject time_$290;
            SubLObject _prev_bind_0_$290;
            SubLObject _prev_bind_0_$291;
            for (remainder = (SubLObject)cb_query.NIL, remainder = time_plist; cb_query.NIL != remainder; remainder = conses_high.cddr(remainder)) {
                metric = remainder.first();
                time = conses_high.cadr(remainder);
                if (metric.isCons()) {
                    row_num = Numbers.add(row_num, (SubLObject)cb_query.ONE_INTEGER);
                    bgcolor = ConsesLow.nth(Numbers.mod(row_num, (SubLObject)cb_query.TWO_INTEGER), (SubLObject)ConsesLow.list(html_macros.$html_color_lighter_grey$.getGlobalValue(), html_macros.$html_color_lightest_grey$.getGlobalValue()));
                }
                else {
                    row_num = (SubLObject)cb_query.ZERO_INTEGER;
                    bgcolor = html_macros.$html_color_light_grey$.getGlobalValue();
                }
                count = conses_high.getf(count_plist, metric, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                if (cb_query.NIL != bgcolor) {
                    html_utilities.html_markup(html_macros.$html_table_row_bgcolor$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(bgcolor);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                }
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                _prev_bind_0_$283 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    _prev_bind_0_$284 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ(count);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$284, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    _prev_bind_0_$285 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        if (metric.isCons()) {
                            cb_utilities.cb_form(metric, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                        }
                        else {
                            html_utilities.html_markup(html_macros.$html_bold_head$.getGlobalValue());
                            cb_utilities.cb_form(metric, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_bold_tail$.getGlobalValue());
                        }
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$285, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    datum = (current = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(time), (SubLObject)cb_query.UNPROVIDED));
                    just_time = (SubLObject)cb_query.NIL;
                    units = (SubLObject)cb_query.NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list1019);
                    just_time = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list1019);
                    units = current.first();
                    current = current.rest();
                    if (cb_query.NIL == current) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        _prev_bind_0_$286 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_princ(just_time);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$286, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        _prev_bind_0_$287 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_princ(units);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$287, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    else {
                        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list1019);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    _prev_bind_0_$288 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ(number_utilities.safe_percent(time, total_time, (SubLObject)cb_query.THREE_INTEGER));
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$288, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    _prev_bind_0_$289 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_princ((SubLObject)cb_query.$str1002$__);
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$289, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    datum = (current = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(number_utilities.safe_X(time, count)), (SubLObject)cb_query.UNPROVIDED));
                    time_$290 = (SubLObject)cb_query.NIL;
                    units = (SubLObject)cb_query.NIL;
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list995);
                    time_$290 = current.first();
                    current = current.rest();
                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)cb_query.$list995);
                    units = current.first();
                    current = current.rest();
                    if (cb_query.NIL == current) {
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        _prev_bind_0_$290 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_princ(time_$290);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$290, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        _prev_bind_0_$291 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_princ(units);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$291, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                    }
                    else {
                        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)cb_query.$list995);
                    }
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$283, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            }
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 195641L)
    public static SubLObject cb_show_rule_forward_inference_metrics(final SubLObject rule_info, final SubLObject verbosity, SubLObject global_statistics, SubLObject cumulative_time) {
        if (global_statistics == cb_query.UNPROVIDED) {
            global_statistics = (SubLObject)cb_query.NIL;
        }
        if (cumulative_time == cb_query.UNPROVIDED) {
            cumulative_time = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject current;
        final SubLObject datum = current = global_statistics;
        final SubLObject total_time_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw970$TOTAL_TIME, current);
        final SubLObject total_time = (SubLObject)((cb_query.NIL != total_time_tail) ? conses_high.cadr(total_time_tail) : cb_query.NIL);
        final SubLObject average_time_per_rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw979$AVERAGE_TIME_PER_RULE, current);
        final SubLObject average_time_per_rule = (SubLObject)((cb_query.NIL != average_time_per_rule_tail) ? conses_high.cadr(average_time_per_rule_tail) : cb_query.NIL);
        final SubLObject stdev_time_per_rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw980$STDEV_TIME_PER_RULE, current);
        final SubLObject stdev_time_per_rule = (SubLObject)((cb_query.NIL != stdev_time_per_rule_tail) ? conses_high.cadr(stdev_time_per_rule_tail) : cb_query.NIL);
        final SubLObject average_inferences_per_rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw975$AVERAGE_INFERENCES_PER_RULE, current);
        final SubLObject average_inferences_per_rule = (SubLObject)((cb_query.NIL != average_inferences_per_rule_tail) ? conses_high.cadr(average_inferences_per_rule_tail) : cb_query.NIL);
        final SubLObject stdev_inferences_per_rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw976$STDEV_INFERENCES_PER_RULE, current);
        final SubLObject stdev_inferences_per_rule = (SubLObject)((cb_query.NIL != stdev_inferences_per_rule_tail) ? conses_high.cadr(stdev_inferences_per_rule_tail) : cb_query.NIL);
        final SubLObject average_time_per_inference_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw981$AVERAGE_TIME_PER_INFERENCE, current);
        final SubLObject average_time_per_inference = (SubLObject)((cb_query.NIL != average_time_per_inference_tail) ? conses_high.cadr(average_time_per_inference_tail) : cb_query.NIL);
        final SubLObject stdev_time_per_inference_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw982$STDEV_TIME_PER_INFERENCE, current);
        final SubLObject stdev_time_per_inference = (SubLObject)((cb_query.NIL != stdev_time_per_inference_tail) ? conses_high.cadr(stdev_time_per_inference_tail) : cb_query.NIL);
        final SubLObject average_time_per_trigger_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw983$AVERAGE_TIME_PER_TRIGGER, current);
        final SubLObject average_time_per_trigger = (SubLObject)((cb_query.NIL != average_time_per_trigger_tail) ? conses_high.cadr(average_time_per_trigger_tail) : cb_query.NIL);
        final SubLObject stdev_time_per_trigger_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw984$STDEV_TIME_PER_TRIGGER, current);
        final SubLObject stdev_time_per_trigger = (SubLObject)((cb_query.NIL != stdev_time_per_trigger_tail) ? conses_high.cadr(stdev_time_per_trigger_tail) : cb_query.NIL);
        SubLObject allow_other_keys_p = (SubLObject)cb_query.NIL;
        SubLObject rest = rule_info;
        SubLObject bad = (SubLObject)cb_query.NIL;
        SubLObject current_$295 = (SubLObject)cb_query.NIL;
        while (cb_query.NIL != rest) {
            cdestructuring_bind.destructuring_bind_must_consp(rest, rule_info, (SubLObject)cb_query.$list1020);
            current_$295 = rest.first();
            rest = rest.rest();
            cdestructuring_bind.destructuring_bind_must_consp(rest, rule_info, (SubLObject)cb_query.$list1020);
            if (cb_query.NIL == conses_high.member(current_$295, (SubLObject)cb_query.$list1021, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED)) {
                bad = (SubLObject)cb_query.T;
            }
            if (current_$295 == cb_query.$kw36$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        }
        if (cb_query.NIL != bad && cb_query.NIL == allow_other_keys_p) {
            cdestructuring_bind.cdestructuring_bind_error(rule_info, (SubLObject)cb_query.$list1020);
        }
        final SubLObject rule_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1022$RULE, rule_info);
        final SubLObject rule = (SubLObject)((cb_query.NIL != rule_tail) ? conses_high.cadr(rule_tail) : cb_query.NIL);
        final SubLObject time_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1012$TIME, rule_info);
        final SubLObject time = (SubLObject)((cb_query.NIL != time_tail) ? conses_high.cadr(time_tail) : cb_query.NIL);
        final SubLObject inference_time_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1023$INFERENCE_TIME, rule_info);
        final SubLObject inference_time = (SubLObject)((cb_query.NIL != inference_time_tail) ? conses_high.cadr(inference_time_tail) : cb_query.NIL);
        final SubLObject time_plist_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1024$TIME_PLIST, rule_info);
        final SubLObject time_plist = (SubLObject)((cb_query.NIL != time_plist_tail) ? conses_high.cadr(time_plist_tail) : cb_query.NIL);
        final SubLObject count_plist_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1025$COUNT_PLIST, rule_info);
        final SubLObject count_plist = (SubLObject)((cb_query.NIL != count_plist_tail) ? conses_high.cadr(count_plist_tail) : cb_query.NIL);
        final SubLObject trigger_gafs_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1026$TRIGGER_GAFS, rule_info);
        final SubLObject trigger_gafs = (SubLObject)((cb_query.NIL != trigger_gafs_tail) ? conses_high.cadr(trigger_gafs_tail) : cb_query.NIL);
        final SubLObject inference_count_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1027$INFERENCE_COUNT, rule_info);
        final SubLObject inference_count = (SubLObject)((cb_query.NIL != inference_count_tail) ? conses_high.cadr(inference_count_tail) : cb_query.NIL);
        final SubLObject inferences_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1028$INFERENCES, rule_info);
        final SubLObject inferences = (SubLObject)((cb_query.NIL != inferences_tail) ? conses_high.cadr(inferences_tail) : cb_query.NIL);
        html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.ONE_INTEGER);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup(html_macros.$html_table_width$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str595$100_);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$296 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str395$_);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$297 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_border$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.ZERO_INTEGER);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$298 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        if (cb_query.NIL != global_statistics && cb_query.NIL != cumulative_time) {
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$299 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$300 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    final SubLObject cumulative_percent = (SubLObject)(cumulative_time.numE(total_time) ? cb_query.$int137$100 : number_utilities.safe_percent(cumulative_time, total_time, (SubLObject)cb_query.THREE_INTEGER));
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1029$cumulative_time__S_, cumulative_percent);
                                    html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$300, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$299, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        }
                        html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$301 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            SubLObject current_$296;
                            final SubLObject datum_$302 = current_$296 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(time), (SubLObject)cb_query.UNPROVIDED);
                            SubLObject just_time = (SubLObject)cb_query.NIL;
                            SubLObject units = (SubLObject)cb_query.NIL;
                            cdestructuring_bind.destructuring_bind_must_consp(current_$296, datum_$302, (SubLObject)cb_query.$list1019);
                            just_time = current_$296.first();
                            current_$296 = current_$296.rest();
                            cdestructuring_bind.destructuring_bind_must_consp(current_$296, datum_$302, (SubLObject)cb_query.$list1019);
                            units = current_$296.first();
                            current_$296 = current_$296.rest();
                            if (cb_query.NIL == current_$296) {
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$302 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(just_time);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$302, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$303 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(units);
                                    if (total_time.isPositive()) {
                                        final SubLObject stdevs = (SubLObject)(stdev_time_per_rule.isZero() ? cb_query.NIL : number_utilities.standard_deviations_above_mean(time, average_time_per_rule, stdev_time_per_rule));
                                        if (cb_query.NIL != stdevs && stdevs.numG((SubLObject)cb_query.ONE_INTEGER)) {
                                            final SubLObject backgrond_color = (SubLObject)(stdevs.numG((SubLObject)cb_query.TWO_INTEGER) ? cb_query.$kw303$RED : cb_query.$kw394$YELLOW);
                                            final SubLObject text_color = (SubLObject)(stdevs.numG((SubLObject)cb_query.TWO_INTEGER) ? cb_query.$kw1030$WHITE : cb_query.$kw1031$BLACK);
                                            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                            cb_show_warning_icon(backgrond_color, text_color, Numbers.truncate(stdevs, (SubLObject)cb_query.UNPROVIDED));
                                        }
                                    }
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$303, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            else {
                                cdestructuring_bind.cdestructuring_bind_error(datum_$302, (SubLObject)cb_query.$list1019);
                            }
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$301, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        if (cb_query.NIL != trigger_gafs) {
                            final SubLObject trigger_count = Sequences.length(trigger_gafs);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$304 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$305 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$305, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$304, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$306 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$307 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(trigger_count);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$307, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$308 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str999$_trigger_P, trigger_count);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$308, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$306, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            final SubLObject rule_average_time_per_trigger = number_utilities.safe_X(time, trigger_count);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$309 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                SubLObject current_$297;
                                final SubLObject datum_$303 = current_$297 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(rule_average_time_per_trigger), (SubLObject)cb_query.UNPROVIDED);
                                SubLObject just_time2 = (SubLObject)cb_query.NIL;
                                SubLObject units2 = (SubLObject)cb_query.NIL;
                                cdestructuring_bind.destructuring_bind_must_consp(current_$297, datum_$303, (SubLObject)cb_query.$list1019);
                                just_time2 = current_$297.first();
                                current_$297 = current_$297.rest();
                                cdestructuring_bind.destructuring_bind_must_consp(current_$297, datum_$303, (SubLObject)cb_query.$list1019);
                                units2 = current_$297.first();
                                current_$297 = current_$297.rest();
                                if (cb_query.NIL == current_$297) {
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$310 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(just_time2);
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$310, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                    final SubLObject _prev_bind_0_$311 = html_macros.$html_safe_print$.currentBinding(thread);
                                    try {
                                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                        html_utilities.html_princ(units2);
                                        html_utilities.html_princ((SubLObject)cb_query.$str1008$___trigger);
                                        if (total_time.isPositive()) {
                                            final SubLObject stdevs2 = (SubLObject)(stdev_time_per_trigger.isZero() ? cb_query.NIL : number_utilities.standard_deviations_above_mean(rule_average_time_per_trigger, average_time_per_trigger, stdev_time_per_trigger));
                                            if (cb_query.NIL != stdevs2 && stdevs2.numG((SubLObject)cb_query.ONE_INTEGER)) {
                                                html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                                cb_show_warning_icon((SubLObject)cb_query.$kw303$RED, (SubLObject)cb_query.$kw1030$WHITE, Numbers.truncate(stdevs2, (SubLObject)cb_query.UNPROVIDED));
                                            }
                                        }
                                    }
                                    finally {
                                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$311, thread);
                                    }
                                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                }
                                else {
                                    cdestructuring_bind.cdestructuring_bind_error(datum_$303, (SubLObject)cb_query.$list1019);
                                }
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$309, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        }
                        if (inference_count.isPositive()) {
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$312 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$313 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_hr((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$313, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$312, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                            final SubLObject _prev_bind_0_$314 = html_macros.$html_safe_print$.currentBinding(thread);
                            try {
                                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$315 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    html_utilities.html_princ(inference_count);
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$315, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$316 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str997$_inference_P, inference_count);
                                    if (total_time.isPositive()) {
                                        final SubLObject stdevs3 = (SubLObject)(stdev_inferences_per_rule.isZero() ? cb_query.NIL : number_utilities.standard_deviations_above_mean(inference_count, average_inferences_per_rule, stdev_inferences_per_rule));
                                        if (cb_query.NIL != stdevs3 && stdevs3.numG((SubLObject)cb_query.ONE_INTEGER)) {
                                            html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                            cb_show_warning_icon((SubLObject)cb_query.$kw394$YELLOW, (SubLObject)cb_query.$kw1031$BLACK, Numbers.truncate(stdevs3, (SubLObject)cb_query.UNPROVIDED));
                                        }
                                    }
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$316, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                            }
                            finally {
                                html_macros.$html_safe_print$.rebind(_prev_bind_0_$314, thread);
                            }
                            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            if (cb_query.NIL != inference_time) {
                                final SubLObject rule_average_time_per_inference = number_utilities.safe_X(inference_time, inference_count);
                                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                final SubLObject _prev_bind_0_$317 = html_macros.$html_safe_print$.currentBinding(thread);
                                try {
                                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                    SubLObject current_$298;
                                    final SubLObject datum_$304 = current_$298 = string_utilities.split_string(numeric_date_utilities.readable_elapsed_time_string_ms(rule_average_time_per_inference), (SubLObject)cb_query.UNPROVIDED);
                                    SubLObject just_time3 = (SubLObject)cb_query.NIL;
                                    SubLObject units3 = (SubLObject)cb_query.NIL;
                                    cdestructuring_bind.destructuring_bind_must_consp(current_$298, datum_$304, (SubLObject)cb_query.$list1019);
                                    just_time3 = current_$298.first();
                                    current_$298 = current_$298.rest();
                                    cdestructuring_bind.destructuring_bind_must_consp(current_$298, datum_$304, (SubLObject)cb_query.$list1019);
                                    units3 = current_$298.first();
                                    current_$298 = current_$298.rest();
                                    if (cb_query.NIL == current_$298) {
                                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw874$RIGHT));
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                        final SubLObject _prev_bind_0_$318 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                            html_utilities.html_princ(just_time3);
                                        }
                                        finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$318, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                                        html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                                        final SubLObject _prev_bind_0_$319 = html_macros.$html_safe_print$.currentBinding(thread);
                                        try {
                                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                                            html_utilities.html_princ(units3);
                                            html_utilities.html_princ((SubLObject)cb_query.$str1006$___inference);
                                            if (total_time.isPositive()) {
                                                final SubLObject stdevs4 = (SubLObject)(stdev_time_per_inference.isZero() ? cb_query.NIL : number_utilities.standard_deviations_above_mean(rule_average_time_per_inference, average_time_per_inference, stdev_time_per_inference));
                                                if (cb_query.NIL != stdevs4 && stdevs4.numG((SubLObject)cb_query.ONE_INTEGER)) {
                                                    html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
                                                    cb_show_warning_icon((SubLObject)cb_query.$kw303$RED, (SubLObject)cb_query.$kw1030$WHITE, Numbers.truncate(stdevs4, (SubLObject)cb_query.UNPROVIDED));
                                                }
                                            }
                                        }
                                        finally {
                                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$319, thread);
                                        }
                                        html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                                    }
                                    else {
                                        cdestructuring_bind.cdestructuring_bind_error(datum_$304, (SubLObject)cb_query.$list1019);
                                    }
                                }
                                finally {
                                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$317, thread);
                                }
                                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                            }
                        }
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$298, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$297, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw420$CENTER));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_macros.$html_table_data_width$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str1032$80_);
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$320 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    if (cb_query.NIL != assertion_handles.assertion_p(rule)) {
                        cb_utilities.cb_show_assertion_readably(rule, (SubLObject)cb_query.T, (SubLObject)cb_query.T);
                    }
                    else {
                        html_utilities.html_princ((SubLObject)cb_query.$str1033$Overhead);
                    }
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$320, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$296, thread);
            }
            html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            if (cb_query.NIL != inferences || cb_query.NIL != trigger_gafs || cb_query.NIL != time_plist) {
                html_utilities.html_markup(html_macros.$html_table_row_head$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$321 = html_macros.$html_safe_print$.currentBinding(thread);
                try {
                    html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_table_data_head$.getGlobalValue());
                    html_utilities.html_markup(html_macros.$html_table_data_colspan$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.TWO_INTEGER);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_align$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw265$LEFT));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_table_data_valign$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_utilities.html_align((SubLObject)cb_query.$kw266$TOP));
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$322 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        if (cb_query.$kw947$VERBOSE != verbosity) {
                            cb_utilities.cb_link((SubLObject)cb_query.$kw945$RULE_FORWARD_INFERENCE_METRICS, rule, (SubLObject)cb_query.$str1034$_Show_Detail_, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_indent((SubLObject)cb_query.TWO_INTEGER);
                        }
                        if (cb_query.NIL != inferences) {
                            thread.resetMultipleValues();
                            final SubLObject good_inferences = categorize_inferences_by_provability_status(inferences);
                            final SubLObject neutral_inferences = thread.secondMultipleValue();
                            final SubLObject no_good_inferences = thread.thirdMultipleValue();
                            thread.resetMultipleValues();
                            html_utilities.html_princ((SubLObject)cb_query.$str1035$Inferences_);
                            if (cb_query.NIL != good_inferences) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1036$__S_good, Sequences.length(good_inferences));
                            }
                            if (cb_query.NIL != neutral_inferences) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1037$__S_neutral, Sequences.length(neutral_inferences));
                            }
                            if (cb_query.NIL != no_good_inferences) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1038$__S_no_good, Sequences.length(no_good_inferences));
                            }
                            if (cb_query.$kw947$VERBOSE == verbosity) {
                                if (cb_query.NIL != good_inferences) {
                                    html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                    if (cb_query.NIL != neutral_inferences || cb_query.NIL != no_good_inferences) {
                                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1039$Good__);
                                    }
                                    SubLObject cdolist_list_var = good_inferences;
                                    SubLObject inference = (SubLObject)cb_query.NIL;
                                    inference = cdolist_list_var.first();
                                    while (cb_query.NIL != cdolist_list_var) {
                                        cb_show_inference_link_and_time(inference);
                                        cdolist_list_var = cdolist_list_var.rest();
                                        inference = cdolist_list_var.first();
                                    }
                                }
                                if (cb_query.NIL != neutral_inferences) {
                                    html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                    if (cb_query.NIL != good_inferences || cb_query.NIL != no_good_inferences) {
                                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1040$Neutral__);
                                    }
                                    SubLObject cdolist_list_var = neutral_inferences;
                                    SubLObject inference = (SubLObject)cb_query.NIL;
                                    inference = cdolist_list_var.first();
                                    while (cb_query.NIL != cdolist_list_var) {
                                        cb_show_inference_link_and_time(inference);
                                        cdolist_list_var = cdolist_list_var.rest();
                                        inference = cdolist_list_var.first();
                                    }
                                }
                                if (cb_query.NIL != no_good_inferences) {
                                    html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                    if (cb_query.NIL != good_inferences || cb_query.NIL != neutral_inferences) {
                                        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1041$No_Good__);
                                    }
                                    SubLObject cdolist_list_var = no_good_inferences;
                                    SubLObject inference = (SubLObject)cb_query.NIL;
                                    inference = cdolist_list_var.first();
                                    while (cb_query.NIL != cdolist_list_var) {
                                        cb_show_inference_link_and_time(inference);
                                        cdolist_list_var = cdolist_list_var.rest();
                                        inference = cdolist_list_var.first();
                                    }
                                }
                            }
                        }
                        thread.resetMultipleValues();
                        final SubLObject triggers_with_dependent = categorize_reified_supports_by_dependent_involving_support(trigger_gafs, rule);
                        final SubLObject triggers_without_dependent = thread.secondMultipleValue();
                        final SubLObject unreifiable_triggers = thread.thirdMultipleValue();
                        thread.resetMultipleValues();
                        if (cb_query.NIL != inferences) {
                            if (cb_query.$kw947$VERBOSE == verbosity) {
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                            }
                            else {
                                html_utilities.html_indent((SubLObject)cb_query.FOUR_INTEGER);
                            }
                        }
                        if (cb_query.NIL != trigger_gafs && (cb_query.NIL != triggers_with_dependent || cb_query.NIL != triggers_without_dependent || cb_query.NIL != unreifiable_triggers)) {
                            html_utilities.html_princ((SubLObject)cb_query.$str1042$Triggers_);
                            if (cb_query.NIL != triggers_with_dependent) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1043$__S_successful, Sequences.length(triggers_with_dependent));
                            }
                            if (cb_query.NIL != triggers_without_dependent) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1044$__S_failed, Sequences.length(triggers_without_dependent));
                            }
                            if (cb_query.NIL != unreifiable_triggers) {
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1045$__S_unknown, Sequences.length(unreifiable_triggers));
                            }
                        }
                        if ((cb_query.NIL != time_plist || cb_query.NIL != count_plist) && cb_query.$kw947$VERBOSE == verbosity) {
                            html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                            cb_forward_inference_metrics_times_and_counts_table(time_plist, count_plist);
                            if (cb_query.NIL != triggers_with_dependent) {
                                html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1046$Successful__);
                                SubLObject invalid_count = (SubLObject)cb_query.ZERO_INTEGER;
                                SubLObject cdolist_list_var2 = triggers_with_dependent;
                                SubLObject trigger = (SubLObject)cb_query.NIL;
                                trigger = cdolist_list_var2.first();
                                while (cb_query.NIL != cdolist_list_var2) {
                                    if (cb_query.NIL != assertion_handles.valid_assertionP(trigger, (SubLObject)cb_query.UNPROVIDED)) {
                                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                        cb_utilities.cb_show_assertion_readably(trigger, (SubLObject)cb_query.T, (SubLObject)cb_query.T);
                                    }
                                    else if (cb_query.NIL != arguments.support_p(trigger)) {
                                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                        cb_utilities.cb_form(trigger, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                    }
                                    else {
                                        invalid_count = Numbers.add(invalid_count, (SubLObject)cb_query.ONE_INTEGER);
                                    }
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    trigger = cdolist_list_var2.first();
                                }
                                if (!invalid_count.isZero()) {
                                    html_utilities.html_newline(PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1047$_A_successful_trigger__P_now_inva, invalid_count));
                                }
                            }
                            if (cb_query.NIL != triggers_without_dependent) {
                                html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1048$Failed__);
                                SubLObject invalid_count = (SubLObject)cb_query.ZERO_INTEGER;
                                SubLObject cdolist_list_var2 = triggers_without_dependent;
                                SubLObject trigger = (SubLObject)cb_query.NIL;
                                trigger = cdolist_list_var2.first();
                                while (cb_query.NIL != cdolist_list_var2) {
                                    if (cb_query.NIL != assertion_handles.valid_assertionP(trigger, (SubLObject)cb_query.UNPROVIDED)) {
                                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                        cb_utilities.cb_show_assertion_readably(trigger, (SubLObject)cb_query.T, (SubLObject)cb_query.T);
                                    }
                                    else if (cb_query.NIL != arguments.support_p(trigger)) {
                                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                        cb_utilities.cb_form(trigger, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                    }
                                    else {
                                        invalid_count = Numbers.add(invalid_count, (SubLObject)cb_query.ONE_INTEGER);
                                    }
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    trigger = cdolist_list_var2.first();
                                }
                                if (!invalid_count.isZero()) {
                                    html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1049$_A_failed_trigger__P_now_invalid_, invalid_count);
                                }
                            }
                            if (cb_query.NIL != unreifiable_triggers) {
                                html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
                                PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1050$Unknown__unreifiable___);
                                SubLObject invalid_count = (SubLObject)cb_query.ZERO_INTEGER;
                                SubLObject cdolist_list_var2 = unreifiable_triggers;
                                SubLObject trigger = (SubLObject)cb_query.NIL;
                                trigger = cdolist_list_var2.first();
                                while (cb_query.NIL != cdolist_list_var2) {
                                    if (cb_query.NIL != assertion_handles.valid_assertionP(trigger, (SubLObject)cb_query.UNPROVIDED)) {
                                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                        cb_utilities.cb_show_assertion_readably(trigger, (SubLObject)cb_query.T, (SubLObject)cb_query.T);
                                    }
                                    else if (cb_query.NIL != arguments.support_p(trigger)) {
                                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                        cb_utilities.cb_form(trigger, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
                                    }
                                    else {
                                        invalid_count = Numbers.add(invalid_count, (SubLObject)cb_query.ONE_INTEGER);
                                    }
                                    cdolist_list_var2 = cdolist_list_var2.rest();
                                    trigger = cdolist_list_var2.first();
                                }
                                if (!invalid_count.isZero()) {
                                    html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                                    PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1049$_A_failed_trigger__P_now_invalid_, invalid_count);
                                }
                            }
                        }
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$322, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_table_data_tail$.getGlobalValue());
                }
                finally {
                    html_macros.$html_safe_print$.rebind(_prev_bind_0_$321, thread);
                }
                html_utilities.html_markup(html_macros.$html_table_row_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            }
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_table_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 204439L)
    public static SubLObject cb_show_inference_link_and_time(final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        cb_utilities.cb_link((SubLObject)cb_query.$kw272$INFERENCE, inference, (SubLObject)cb_query.$kw1051$VERY_VERBOSE, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1052$___as_, inference_datastructures_inference.inference_cumulative_time(inference));
        html_utilities.html_indent((SubLObject)cb_query.UNPROVIDED);
        return inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 204646L)
    public static SubLObject cb_show_forward_inference_statistics_for_rule(final SubLObject rule) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject rule_info = inference_metrics.rule_forward_inference_metrics_info(rule);
        final SubLObject current;
        final SubLObject datum = current = rule_info;
        final SubLObject time_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1012$TIME, current);
        final SubLObject time = (SubLObject)((cb_query.NIL != time_tail) ? conses_high.cadr(time_tail) : cb_query.NIL);
        final SubLObject inference_time_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1023$INFERENCE_TIME, current);
        final SubLObject inference_time = (SubLObject)((cb_query.NIL != inference_time_tail) ? conses_high.cadr(inference_time_tail) : cb_query.NIL);
        final SubLObject time_plist_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1024$TIME_PLIST, current);
        final SubLObject time_plist = (SubLObject)((cb_query.NIL != time_plist_tail) ? conses_high.cadr(time_plist_tail) : cb_query.NIL);
        final SubLObject count_plist_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1025$COUNT_PLIST, current);
        final SubLObject count_plist = (SubLObject)((cb_query.NIL != count_plist_tail) ? conses_high.cadr(count_plist_tail) : cb_query.NIL);
        final SubLObject inference_count_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1027$INFERENCE_COUNT, current);
        final SubLObject inference_count = (SubLObject)((cb_query.NIL != inference_count_tail) ? conses_high.cadr(inference_count_tail) : cb_query.NIL);
        final SubLObject trigger_gafs_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1026$TRIGGER_GAFS, current);
        final SubLObject trigger_gafs = (SubLObject)((cb_query.NIL != trigger_gafs_tail) ? conses_high.cadr(trigger_gafs_tail) : cb_query.NIL);
        final SubLObject inferences_tail = cdestructuring_bind.property_list_member((SubLObject)cb_query.$kw1028$INFERENCES, current);
        final SubLObject inferences = (SubLObject)((cb_query.NIL != inferences_tail) ? conses_high.cadr(inferences_tail) : cb_query.NIL);
        html_utilities.html_princ((SubLObject)cb_query.$str991$Total_time__);
        html_utilities.html_princ(numeric_date_utilities.readable_elapsed_time_string_ms(time));
        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
        dhtml_macros.dhtml_switch_visibility_links((SubLObject)cb_query.$str1053$inference_metrics, (SubLObject)cb_query.$str1054$_Show_metrics_, (SubLObject)cb_query.$str1055$_Hide_metrics_);
        dhtml_macros.dhtml_set_switched_visibility((SubLObject)cb_query.$str1053$inference_metrics, (SubLObject)cb_query.$kw241$INVISIBLE, (SubLObject)cb_query.$kw240$PARAGRAPH);
        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_markup((SubLObject)cb_query.$str1053$inference_metrics);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            cb_forward_inference_metrics_times_and_counts_table(time_plist, count_plist);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 205425L)
    public static SubLObject categorize_inferences_by_provability_status(final SubLObject inferences) {
        SubLObject good_inferences = (SubLObject)cb_query.NIL;
        SubLObject neutral_inferences = (SubLObject)cb_query.NIL;
        SubLObject no_good_inferences = (SubLObject)cb_query.NIL;
        SubLObject cdolist_list_var = inferences;
        SubLObject inference = (SubLObject)cb_query.NIL;
        inference = cdolist_list_var.first();
        while (cb_query.NIL != cdolist_list_var) {
            final SubLObject pcase_var = inference_datastructures_inference.inference_provability_status(inference);
            if (pcase_var.eql((SubLObject)cb_query.$kw1056$GOOD)) {
                good_inferences = (SubLObject)ConsesLow.cons(inference, good_inferences);
            }
            else if (pcase_var.eql((SubLObject)cb_query.$kw1057$NEUTRAL)) {
                neutral_inferences = (SubLObject)ConsesLow.cons(inference, neutral_inferences);
            }
            else if (pcase_var.eql((SubLObject)cb_query.$kw1058$NO_GOOD)) {
                no_good_inferences = (SubLObject)ConsesLow.cons(inference, no_good_inferences);
            }
            cdolist_list_var = cdolist_list_var.rest();
            inference = cdolist_list_var.first();
        }
        return Values.values(good_inferences, neutral_inferences, no_good_inferences);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 205945L)
    public static SubLObject categorize_reified_supports_by_dependent_involving_support(final SubLObject reified_supports, final SubLObject support) {
        if (cb_query.NIL != support) {
            SubLObject reified_supports_with_dependent = (SubLObject)cb_query.NIL;
            SubLObject reified_supports_without_dependent = (SubLObject)cb_query.NIL;
            SubLObject unreifiable_supports = (SubLObject)cb_query.NIL;
            SubLObject cdolist_list_var = reified_supports;
            SubLObject reified_support = (SubLObject)cb_query.NIL;
            reified_support = cdolist_list_var.first();
            while (cb_query.NIL != cdolist_list_var) {
                if (cb_query.NIL != arguments.reified_support_has_dependent_with_supportP_kb_hl_support_aware_version(reified_support, support)) {
                    reified_supports_with_dependent = (SubLObject)ConsesLow.cons(reified_support, reified_supports_with_dependent);
                }
                else if (cb_query.NIL != assertion_handles.assertion_p(reified_support) || cb_query.NIL != kb_hl_supports_high.find_kb_hl_support(reified_support)) {
                    reified_supports_without_dependent = (SubLObject)ConsesLow.cons(reified_support, reified_supports_without_dependent);
                }
                else {
                    unreifiable_supports = (SubLObject)ConsesLow.cons(reified_support, unreifiable_supports);
                }
                cdolist_list_var = cdolist_list_var.rest();
                reified_support = cdolist_list_var.first();
            }
            return Values.values(reified_supports_with_dependent, reified_supports_without_dependent, unreifiable_supports);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 206771L)
    public static SubLObject cb_show_warning_icon(SubLObject background_color, SubLObject text_color, SubLObject repeat) {
        if (background_color == cb_query.UNPROVIDED) {
            background_color = (SubLObject)cb_query.$kw303$RED;
        }
        if (text_color == cb_query.UNPROVIDED) {
            text_color = (SubLObject)cb_query.$kw1031$BLACK;
        }
        if (repeat == cb_query.UNPROVIDED) {
            repeat = (SubLObject)cb_query.ONE_INTEGER;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        html_utilities.html_markup(html_macros.$html_big_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_teletype_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_span_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_span_style$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_style_background_color(background_color);
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            final SubLObject color_val = text_color;
            html_utilities.html_markup(html_macros.$html_font_head$.getGlobalValue());
            if (cb_query.NIL != color_val) {
                html_utilities.html_markup(html_macros.$html_font_color$.getGlobalValue());
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup(html_utilities.html_color(color_val));
                html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            }
            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$329 = html_macros.$html_safe_print$.currentBinding(thread);
            try {
                html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                SubLObject i;
                for (i = (SubLObject)cb_query.NIL, i = (SubLObject)cb_query.ZERO_INTEGER; i.numL(repeat); i = Numbers.add(i, (SubLObject)cb_query.ONE_INTEGER)) {
                    html_utilities.html_princ((SubLObject)cb_query.$str1059$_);
                }
            }
            finally {
                html_macros.$html_safe_print$.rebind(_prev_bind_0_$329, thread);
            }
            html_utilities.html_markup(html_macros.$html_font_tail$.getGlobalValue());
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_span_tail$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_teletype_tail$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_big_tail$.getGlobalValue());
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 207050L)
    public static SubLObject cb_link_inference_graph(final SubLObject inference, SubLObject linktext) {
        if (linktext == cb_query.UNPROVIDED) {
            linktext = (SubLObject)cb_query.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (cb_query.NIL == linktext) {
            linktext = (SubLObject)cb_query.$str300$_Query_Graph_;
        }
        final SubLObject frame_name_var = cb_utilities.cb_frame_name((SubLObject)cb_query.$kw1060$CONTENT);
        html_utilities.html_markup(html_macros.$html_anchor_head$.getGlobalValue());
        html_utilities.html_markup(html_macros.$html_anchor_href$.getGlobalValue());
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        cb_parameters.cyc_cgi_url_int();
        PrintLow.format(html_macros.$html_stream$.getDynamicValue(thread), (SubLObject)cb_query.$str1061$cb_inference_graph__A__A, inference_datastructures_inference.inference_problem_store_suid(inference), inference_datastructures_inference.inference_suid(inference));
        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        if (cb_query.NIL != frame_name_var) {
            html_utilities.html_markup(html_macros.$html_anchor_target$.getGlobalValue());
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
            html_utilities.html_markup(frame_name_var);
            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
        }
        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
        final SubLObject _prev_bind_0 = html_macros.$html_safe_print$.currentBinding(thread);
        try {
            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
            html_utilities.html_princ(linktext);
        }
        finally {
            html_macros.$html_safe_print$.rebind(_prev_bind_0, thread);
        }
        html_utilities.html_markup(html_macros.$html_anchor_tail$.getGlobalValue());
        return inference;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 207050L)
    public static SubLObject cb_inference_graph(final SubLObject args) {
        SubLObject store_id_string = (SubLObject)cb_query.NIL;
        SubLObject inference_id_string = (SubLObject)cb_query.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(args, args, (SubLObject)cb_query.$list3);
        store_id_string = args.first();
        SubLObject current = args.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, args, (SubLObject)cb_query.$list3);
        inference_id_string = current.first();
        current = current.rest();
        if (cb_query.NIL == current) {
            final SubLObject inference = cb_guess_inference(store_id_string, inference_id_string);
            if (cb_query.NIL != inference_datastructures_inference.inference_p(inference)) {
                cb_inference_graph_internal(inference);
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(args, (SubLObject)cb_query.$list3);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 207050L)
    public static SubLObject cb_inference_graph_internal(final SubLObject inference) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject title_var;
        final SubLObject title = title_var = (SubLObject)cb_query.$str1064$Graph_of_a_query_formula;
        final SubLObject _prev_bind_0 = html_macros.$html_id_space_id_generator$.currentBinding(thread);
        try {
            html_macros.$html_id_space_id_generator$.bind((cb_query.NIL != integer_sequence_generator.integer_sequence_generator_p(html_macros.$html_id_space_id_generator$.getDynamicValue(thread))) ? html_macros.$html_id_space_id_generator$.getDynamicValue(thread) : integer_sequence_generator.new_integer_sequence_generator((SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED), thread);
            html_utilities.html_markup((SubLObject)cb_query.$str231$__DOCTYPE_html_PUBLIC_____W3C__DT);
            if (cb_query.NIL != html_macros.$html_force_ie_standards_mode$.getDynamicValue(thread)) {
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                html_utilities.html_markup((SubLObject)cb_query.$str232$_meta_http_equiv__X_UA_Compatible);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
            final SubLObject _prev_bind_0_$330 = cyc_file_dependencies.$html_emitted_file_dependencies$.currentBinding(thread);
            try {
                cyc_file_dependencies.$html_emitted_file_dependencies$.bind((SubLObject)((cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread) == cb_query.$kw233$UNINITIALIZED) ? ConsesLow.list(cb_query.EMPTY_SUBL_OBJECT_ARRAY) : cyc_file_dependencies.$html_emitted_file_dependencies$.getDynamicValue(thread)), thread);
                html_utilities.html_markup(html_macros.$html_html_head$.getGlobalValue());
                html_utilities.html_markup(html_macros.$html_head_head$.getGlobalValue());
                html_macros.html_head_content_type();
                cb_parameters.cb_head_shortcut_icon();
                html_utilities.html_meta_robot_instructions(cb_parameters.$cb_permit_robots_to_indexP$.getDynamicValue(thread), cb_parameters.$cb_permit_robots_to_followP$.getDynamicValue(thread));
                cyc_file_dependencies.css((SubLObject)cb_query.$kw234$CB_CYC);
                if (cb_query.NIL != title_var) {
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup(html_macros.$html_title_head$.getGlobalValue());
                    html_utilities.html_princ(title_var);
                    html_utilities.html_markup(html_macros.$html_title_tail$.getGlobalValue());
                }
                dhtml_macros.html_basic_cb_scripts();
                html_utilities.html_markup(html_macros.$html_head_tail$.getGlobalValue());
                html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                final SubLObject _prev_bind_0_$331 = html_macros.$html_inside_bodyP$.currentBinding(thread);
                try {
                    html_macros.$html_inside_bodyP$.bind((SubLObject)cb_query.T, thread);
                    html_utilities.html_markup(html_macros.$html_body_head$.getGlobalValue());
                    if (cb_query.NIL != html_macros.$html_default_bgcolor$.getDynamicValue(thread)) {
                        html_utilities.html_markup(html_macros.$html_body_bgcolor$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup(html_utilities.html_color(html_macros.$html_default_bgcolor$.getDynamicValue(thread)));
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    }
                    html_utilities.html_markup(html_macros.$html_body_class$.getGlobalValue());
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_markup((SubLObject)cb_query.$str235$yui_skin_sam);
                    html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                    html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                    final SubLObject _prev_bind_0_$332 = html_macros.$html_safe_print$.currentBinding(thread);
                    try {
                        html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                        html_utilities.html_markup(html_macros.$html_div_head$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_attribute_id$.getGlobalValue());
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_markup((SubLObject)cb_query.$str547$reloadFrameButton);
                        html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        final SubLObject _prev_bind_0_$333 = html_macros.$html_safe_print$.currentBinding(thread);
                        try {
                            html_macros.$html_safe_print$.bind((SubLObject)cb_query.T, thread);
                            html_utilities.html_markup(html_macros.$html_input_head$.getGlobalValue());
                            html_utilities.html_markup(html_macros.$html_input_type$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str548$button);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_name$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str549$reload);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_input_value$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_princ((SubLObject)cb_query.$str1065$Refresh);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup(html_macros.$html_event_attribute_onclick$.getGlobalValue());
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            html_utilities.html_markup((SubLObject)cb_query.$str1066$reloadCurrentFrame__reloadFrameBu);
                            html_utilities.html_char((SubLObject)Characters.CHAR_quotation, (SubLObject)cb_query.UNPROVIDED);
                            if (cb_query.NIL != html_macros.$html_input_disabledP$.getDynamicValue(thread)) {
                                html_utilities.html_simple_attribute(html_macros.$html_input_disabled$.getGlobalValue());
                            }
                            html_utilities.html_char((SubLObject)Characters.CHAR_greater, (SubLObject)cb_query.UNPROVIDED);
                        }
                        finally {
                            html_macros.$html_safe_print$.rebind(_prev_bind_0_$333, thread);
                        }
                        html_utilities.html_markup(html_macros.$html_div_tail$.getGlobalValue());
                        html_utilities.html_markup(html_macros.$html_small_head$.getGlobalValue());
                        html_utilities.html_princ((SubLObject)cb_query.$str1067$Graph_for_);
                        html_utilities.html_newline((SubLObject)cb_query.UNPROVIDED);
                        cb_utilities.cb_form(inference_datastructures_inference.inference_el_query(inference), (SubLObject)cb_query.NIL, (SubLObject)cb_query.T);
                        html_utilities.html_markup(html_macros.$html_small_tail$.getGlobalValue());
                        cb_inference_print_graph_of_inference(inference);
                        html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                        html_utilities.html_copyright_notice();
                    }
                    finally {
                        html_macros.$html_safe_print$.rebind(_prev_bind_0_$332, thread);
                    }
                    html_utilities.html_markup(html_macros.$html_body_tail$.getGlobalValue());
                    html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
                }
                finally {
                    html_macros.$html_inside_bodyP$.rebind(_prev_bind_0_$331, thread);
                }
                html_utilities.html_markup(html_macros.$html_html_tail$.getGlobalValue());
            }
            finally {
                cyc_file_dependencies.$html_emitted_file_dependencies$.rebind(_prev_bind_0_$330, thread);
            }
            html_utilities.html_source_readability_terpri((SubLObject)cb_query.UNPROVIDED);
        }
        finally {
            html_macros.$html_id_space_id_generator$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)cb_query.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/inference/browser/cb-query.lisp", position = 207050L)
    public static SubLObject cb_inference_print_graph_of_inference(final SubLObject inference) {
        html_utilities.html_newline((SubLObject)cb_query.TWO_INTEGER);
        final SubLObject signature = PrintLow.format((SubLObject)cb_query.NIL, (SubLObject)cb_query.$str1068$_a, random.random(Numbers.expt((SubLObject)cb_query.TWO_INTEGER, (SubLObject)cb_query.$int1069$30)));
        final SubLObject mt = inference_datastructures_inference.inference_mt(inference);
        blue_grapher_utilities.blue_event(signature, (SubLObject)ConsesLow.list(cb_blue_grapher.$cb_blue_cyc_graph_command_add_graph_string$.getGlobalValue(), (SubLObject)ConsesLow.list((SubLObject)cb_query.$kw703$BUILDER_FN, (SubLObject)cb_query.$sym1070$BBF_INFERENCE, (SubLObject)cb_query.$kw704$PARAMS, (SubLObject)ConsesLow.list((SubLObject)cb_query.$kw1071$STORE_SUID, inference_datastructures_inference.inference_problem_store_suid(inference), (SubLObject)cb_query.$kw1072$INFERENCE_SUID, inference_datastructures_inference.inference_suid(inference)), (SubLObject)cb_query.$kw227$MT, mt)));
        cb_blue_grapher.cb_blue_applet((SubLObject)ConsesLow.list((SubLObject)cb_query.$kw334$WIDTH, (SubLObject)cb_query.$int592$800, (SubLObject)cb_query.$kw335$HEIGHT, (SubLObject)cb_query.$int808$600, (SubLObject)cb_query.$kw697$SIGNATURE, signature));
        return (SubLObject)cb_query.NIL;
    }
    
    public static SubLObject declare_cb_query_file() {
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_identifier", "CB-INFERENCE-IDENTIFIER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_guess_inference_from_identifier", "CB-GUESS-INFERENCE-FROM-IDENTIFIER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_guess_inference", "CB-GUESS-INFERENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "html_princ_with_explanation", "HTML-PRINC-WITH-EXPLANATION", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "html_princ_strong_with_explanation", "HTML-PRINC-STRONG-WITH-EXPLANATION", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_princ_with_explanation", "CB-PRINC-WITH-EXPLANATION", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_princ_strong_with_explanation", "CB-PRINC-STRONG-WITH-EXPLANATION", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_princ_with_target_reference_and_explanation", "CB-PRINC-WITH-TARGET-REFERENCE-AND-EXPLANATION", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_submit_input_with_explanation", "CB-SUBMIT-INPUT-WITH-EXPLANATION", 0, 7, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_submit_input_with_explanation_and_inference_doc_more_link", "CB-SUBMIT-INPUT-WITH-EXPLANATION-AND-INFERENCE-DOC-MORE-LINK", 0, 7, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_princ_with_explanation_and_inference_doc_more_link", "CB-PRINC-WITH-EXPLANATION-AND-INFERENCE-DOC-MORE-LINK", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_princ_strong_with_explanation_and_inference_doc_more_link", "CB-PRINC-STRONG-WITH-EXPLANATION-AND-INFERENCE-DOC-MORE-LINK", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_princ_with_inference_doc_more_link", "CB-PRINC-WITH-INFERENCE-DOC-MORE-LINK", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_princ_strong_with_inference_doc_more_link", "CB-PRINC-STRONG-WITH-INFERENCE-DOC-MORE-LINK", 2, 2, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_frame_link_with_explanation", "CB-FRAME-LINK-WITH-EXPLANATION");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_inference_doc", "CB-LINK-INFERENCE-DOC", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_inference_answer_counts", "CB-SHOW-INFERENCE-ANSWER-COUNTS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_show_inference_status", "CB-QUERY-SHOW-INFERENCE-STATUS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_more_link_string", "CB-INFERENCE-MORE-LINK-STRING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_help_directory", "CB-INFERENCE-HELP-DIRECTORY", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_link_specification_string_to_full_pathname_and_anchor", "INFERENCE-LINK-SPECIFICATION-STRING-TO-FULL-PATHNAME-AND-ANCHOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_parameter_p", "INFERENCE-PARAMETER-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_parameter_fancy_name", "INFERENCE-PARAMETER-FANCY-NAME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_parameter_description", "INFERENCE-PARAMETER-DESCRIPTION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_parameter_settings", "INFERENCE-PARAMETER-SETTINGS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_parameter_scaling_factor", "INFERENCE-PARAMETER-SCALING-FACTOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_parameter_round_on_inputP", "INFERENCE-PARAMETER-ROUND-ON-INPUT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "possibly_scale_value_on_input", "POSSIBLY-SCALE-VALUE-ON-INPUT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "possibly_scale_value_for_output", "POSSIBLY-SCALE-VALUE-FOR-OUTPUT", 2, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.inference.browser.cb_query", "declare_inference_parameter", "DECLARE-INFERENCE-PARAMETER");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "declare_inference_parameter_internal", "DECLARE-INFERENCE-PARAMETER-INTERNAL", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_parameter_value_matches_setting", "INFERENCE-PARAMETER-VALUE-MATCHES-SETTING", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_new_followup", "CB-QUERY-NEW-FOLLOWUP", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_new", "CB-QUERY-NEW", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_continue", "CB-QUERY-CONTINUE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "new_cb_query_special_variable_state", "NEW-CB-QUERY-SPECIAL-VARIABLE-STATE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_continue_thread", "CB-QUERY-CONTINUE-THREAD", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inferences", "CB-INFERENCES", 0, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.inference.browser.cb_query", "do_cb_inferences", "DO-CB-INFERENCES");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.inference.browser.cb_query", "with_cb_inferences", "WITH-CB-INFERENCES");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_focal_inference", "CB-FOCAL-INFERENCE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_note_focal_inference", "CB-NOTE-FOCAL-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_note_no_focal_inference", "CB-NOTE-NO-FOCAL-INFERENCE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_steal_inferences_by_problem_store_ids", "CB-STEAL-INFERENCES-BY-PROBLEM-STORE-IDS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_act_forget_inference", "CB-ACT-FORGET-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_act_forget_invalid_inferences", "CB-ACT-FORGET-INVALID-INFERENCES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_act_destroy_inference", "CB-ACT-DESTROY-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_destroy_all_inferences_but_last_n", "CB-DESTROY-ALL-INFERENCES-BUT-LAST-N", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_destroy_all_inferences_but_last_n_int", "CB-DESTROY-ALL-INFERENCES-BUT-LAST-N-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_act_reinforce_inference", "CB-ACT-REINFORCE-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query", "CB-QUERY", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_query", "CB-LINK-QUERY", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_internal", "CB-QUERY-INTERNAL", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_query_header_top", "CB-SHOW-QUERY-HEADER-TOP", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_query_header_links", "CB-SHOW-QUERY-HEADER-LINKS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_inference_sharedP", "CB-QUERY-INFERENCE-SHARED?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_any_inferences_sharedP", "CB-QUERY-ANY-INFERENCES-SHARED?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_other_inferences_section", "CB-QUERY-OTHER-INFERENCES-SECTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_focal_inference_section", "CB-QUERY-FOCAL-INFERENCE-SECTION", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_new_inference_section", "CB-QUERY-NEW-INFERENCE-SECTION", 5, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_new_inference_submit_section", "CB-QUERY-NEW-INFERENCE-SUBMIT-SECTION", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "default_new_inference_monad_mt", "DEFAULT-NEW-INFERENCE-MONAD-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "default_new_inference_mt", "DEFAULT-NEW-INFERENCE-MT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "set_default_new_inference_mt", "SET-DEFAULT-NEW-INFERENCE-MT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_new_inference_mt_section", "CB-QUERY-NEW-INFERENCE-MT-SECTION", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_new_inference_sentence_section", "CB-QUERY-NEW-INFERENCE-SENTENCE-SECTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_new_inference_non_explanatory_sentence_section", "CB-QUERY-NEW-INFERENCE-NON-EXPLANATORY-SENTENCE-SECTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_sentence", "CB-QUERY-SENTENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_non_explanatory_sentence", "CB-QUERY-NON-EXPLANATORY-SENTENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_select_sentence", "CB-QUERY-SELECT-SENTENCE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_parameters_section", "CB-QUERY-PARAMETERS-SECTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_save_inference_parameter_defaults", "CB-SAVE-INFERENCE-PARAMETER-DEFAULTS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "get_saved_inference_parameter_default", "GET-SAVED-INFERENCE-PARAMETER-DEFAULT", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_inference_resource_constraints_section", "CB-QUERY-INFERENCE-RESOURCE-CONSTRAINTS-SECTION", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_basic_inference_resource_constraints_section", "CB-QUERY-BASIC-INFERENCE-RESOURCE-CONSTRAINTS-SECTION", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_advanced_inference_parameters_section", "CB-QUERY-ADVANCED-INFERENCE-PARAMETERS-SECTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_mode_property_p", "CB-INFERENCE-MODE-PROPERTY-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_mode_property_datum_p", "CB-INFERENCE-MODE-PROPERTY-DATUM-P", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_possibly_filter_out_inference_mode_properties", "CB-POSSIBLY-FILTER-OUT-INFERENCE-MODE-PROPERTIES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_mode_properties_data", "CB-INFERENCE-MODE-PROPERTIES-DATA", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_advanced_inference_mode_properties", "CB-QUERY-ADVANCED-INFERENCE-MODE-PROPERTIES", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_advanced_inference_dynamic_properties", "CB-QUERY-ADVANCED-INFERENCE-DYNAMIC-PROPERTIES", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_advanced_inference_static_properties", "CB-QUERY-ADVANCED-INFERENCE-STATIC-PROPERTIES", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_advanced_problem_store_static_properties", "CB-QUERY-ADVANCED-PROBLEM-STORE-STATIC-PROPERTIES", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_all_inference_parameters", "CB-ALL-INFERENCE-PARAMETERS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_show_inference_properties", "CB-QUERY-SHOW-INFERENCE-PROPERTIES", 5, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_property_for_inference_mode", "CB-QUERY-PROPERTY-FOR-INFERENCE-MODE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_default_property_value", "CB-DEFAULT-PROPERTY-VALUE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_property_value_from_properties_or_focal_inference", "CB-QUERY-PROPERTY-VALUE-FROM-PROPERTIES-OR-FOCAL-INFERENCE", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_property_value_from_properties_or_focal_inference_int", "CB-QUERY-PROPERTY-VALUE-FROM-PROPERTIES-OR-FOCAL-INFERENCE-INT", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_show_inference_parameter", "CB-QUERY-SHOW-INFERENCE-PARAMETER", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_show_inference_parameter_settings", "CB-QUERY-SHOW-INFERENCE-PARAMETER-SETTINGS", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_default_inference_mode", "CB-DEFAULT-INFERENCE-MODE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_show_inference_parameter_setting", "CB-QUERY-SHOW-INFERENCE-PARAMETER-SETTING", 10, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_set_radio_buttons_script", "CB-SET-RADIO-BUTTONS-SCRIPT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_set_radio_button_script", "CB-SET-RADIO-BUTTON-SCRIPT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_setting_number_for_parameter_value", "INFERENCE-SETTING-NUMBER-FOR-PARAMETER-VALUE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_set_all_inference_mode_properties_to_defaults_script", "CB-SET-ALL-INFERENCE-MODE-PROPERTIES-TO-DEFAULTS-SCRIPT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_set_all_inference_mode_parameters_to_cb_default_radio_input", "CB-SET-ALL-INFERENCE-MODE-PARAMETERS-TO-CB-DEFAULT-RADIO-INPUT", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "get_big_radio_field_name_regexp", "GET-BIG-RADIO-FIELD-NAME-REGEXP", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "get_one_radio_field_name_regexp", "GET-ONE-RADIO-FIELD-NAME-REGEXP", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "get_one_entry_field_name_regexp", "GET-ONE-ENTRY-FIELD-NAME-REGEXP", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_set_inference_mode_radio_to_custom_radio_input", "CB-SET-INFERENCE-MODE-RADIO-TO-CUSTOM-RADIO-INPUT", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_clear_and_set_inference_mode_radio_to_custom_radio_input", "CB-CLEAR-AND-SET-INFERENCE-MODE-RADIO-TO-CUSTOM-RADIO-INPUT", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_focus_and_set_inference_mode_radio_to_custom_radio_input", "CB-FOCUS-AND-SET-INFERENCE-MODE-RADIO-TO-CUSTOM-RADIO-INPUT", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_proof_checker_section_relevantP", "CB-QUERY-PROOF-CHECKER-SECTION-RELEVANT?", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_extract_specified_proof_checker_rules", "CB-EXTRACT-SPECIFIED-PROOF-CHECKER-RULES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_possibly_add_rules_to_proof_checker", "CB-POSSIBLY-ADD-RULES-TO-PROOF-CHECKER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_proof_checker_setup_section", "CB-QUERY-PROOF-CHECKER-SETUP-SECTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_proof_checker_input_name", "CB-QUERY-PROOF-CHECKER-INPUT-NAME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_proof_checker_rule_status", "CB-PROOF-CHECKER-RULE-STATUS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_extract_proof_checker_parameters", "CB-QUERY-EXTRACT-PROOF-CHECKER-PARAMETERS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_problem_store_properties", "CB-SHOW-PROBLEM-STORE-PROPERTIES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_proof_checker_drop", "CB-QUERY-PROOF-CHECKER-DROP", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_query_proof_checker_drop", "CB-LINK-QUERY-PROOF-CHECKER-DROP", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_proof_checker_drop_all", "CB-QUERY-PROOF-CHECKER-DROP-ALL", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_query_proof_checker_drop_all", "CB-LINK-QUERY-PROOF-CHECKER-DROP-ALL", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_handle_query", "CB-HANDLE-QUERY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_extract_query_sentence_input", "CB-EXTRACT-QUERY-SENTENCE-INPUT", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_preprocess_arguments", "CB-QUERY-PREPROCESS-ARGUMENTS", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_extract_inference_method", "CB-QUERY-EXTRACT-INFERENCE-METHOD", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_extract_inference", "CB-QUERY-EXTRACT-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_extract_parameters", "CB-QUERY-EXTRACT-PARAMETERS", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_extract_inference_parameters_from_args_or_focal_inference", "CB-QUERY-EXTRACT-INFERENCE-PARAMETERS-FROM-ARGS-OR-FOCAL-INFERENCE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_extract_inference_parameter_value", "CB-QUERY-EXTRACT-INFERENCE-PARAMETER-VALUE", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_query_extract_query_or_test_spec", "CB-QUERY-EXTRACT-QUERY-OR-TEST-SPEC", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_new_cyc_query", "CB-NEW-CYC-QUERY", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_socratic_query", "CB-SOCRATIC-QUERY", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_similar_query", "CB-SIMILAR-QUERY", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_assertion_similar_query", "CB-LINK-ASSERTION-SIMILAR-QUERY", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_assertion_similar_query", "CB-ASSERTION-SIMILAR-QUERY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_antecedent_query", "CB-ANTECEDENT-QUERY", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_antecedent_query", "CB-LINK-ANTECEDENT-QUERY", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_assertion_antecedent_query", "CB-ASSERTION-ANTECEDENT-QUERY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "rule_pragmatic_query_formula", "RULE-PRAGMATIC-QUERY-FORMULA", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_known_extent_query", "CB-KNOWN-EXTENT-QUERY", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_rule_known_extent_query", "CB-LINK-RULE-KNOWN-EXTENT-QUERY", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_rule_known_extent_query", "CB-RULE-KNOWN-EXTENT-QUERY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_unknown_extent_query", "CB-UNKNOWN-EXTENT-QUERY", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_rule_unknown_extent_query", "CB-LINK-RULE-UNKNOWN-EXTENT-QUERY", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_rule_unknown_extent_query", "CB-RULE-UNKNOWN-EXTENT-QUERY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_kb_query", "CB-KB-QUERY", 4, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_parameter_strengthened_query", "CB-PARAMETER-STRENGTHENED-QUERY", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_literal_query", "CB-LITERAL-QUERY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_lq", "CB-LQ", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_print_literal_query_internal", "CB-PRINT-LITERAL-QUERY-INTERNAL", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_literal_query_internal", "CB-LITERAL-QUERY-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_new_literal_query", "CB-NEW-LITERAL-QUERY", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_literal_query_internal_arg1_isa", "CB-LITERAL-QUERY-INTERNAL-ARG1-ISA", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_include_literal_query_linkP", "CB-INCLUDE-LITERAL-QUERY-LINK?", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "possible_to_conclude", "POSSIBLE-TO-CONCLUDE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_query", "CB-SHOW-QUERY", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_focal_inference_progress_section", "CB-SHOW-FOCAL-INFERENCE-PROGRESS-SECTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_progress_page", "CB-INFERENCE-PROGRESS-PAGE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_progress_page_guts", "CB-INFERENCE-PROGRESS-PAGE-GUTS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_inference_status_section", "CB-SHOW-INFERENCE-STATUS-SECTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_query_answer_section", "CB-SHOW-QUERY-ANSWER-SECTION", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_auto_refresh_query", "CB-AUTO-REFRESH-QUERY", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_auto_refresh_query", "CB-LINK-AUTO-REFRESH-QUERY", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_auto_refresh_query_internal", "CB-AUTO-REFRESH-QUERY-INTERNAL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_all_inference_answers", "CB-LINK-ALL-INFERENCE-ANSWERS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_all_inference_answers", "CB-ALL-INFERENCE-ANSWERS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_inference_with_status_and_all_answers", "CB-SHOW-INFERENCE-WITH-STATUS-AND-ALL-ANSWERS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_focus_inference", "CB-FOCUS-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_focus_inference", "CB-LINK-FOCUS-INFERENCE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_defocus_inference", "CB-DEFOCUS-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_defocus_inference", "CB-LINK-DEFOCUS-INFERENCE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_interrupt_inference", "CB-INTERRUPT-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_interrupt_inference", "CB-LINK-INTERRUPT-INFERENCE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_abort_inference", "CB-ABORT-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_abort_inference", "CB-LINK-ABORT-INFERENCE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_forget_inference", "CB-FORGET-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_forget_inference", "CB-LINK-FORGET-INFERENCE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_forget_all_inferences", "CB-FORGET-ALL-INFERENCES", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_forget_all_inferences", "CB-LINK-FORGET-ALL-INFERENCES", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_forget_all_other_inferences", "CB-FORGET-ALL-OTHER-INFERENCES", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_forget_all_other_inferences", "CB-LINK-FORGET-ALL-OTHER-INFERENCES", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_reinforce_inference", "CB-REINFORCE-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_reinforce_inference", "CB-LINK-REINFORCE-INFERENCE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_reinforcement_applicableP", "INFERENCE-REINFORCEMENT-APPLICABLE?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_destroy_inference", "CB-DESTROY-INFERENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_destroy_inference", "CB-LINK-DESTROY-INFERENCE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_destroy_all_inferences", "CB-DESTROY-ALL-INFERENCES", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_destroy_all_inferences", "CB-LINK-DESTROY-ALL-INFERENCES", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_destroy_all_other_inferences", "CB-DESTROY-ALL-OTHER-INFERENCES", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_destroy_all_other_inferences", "CB-LINK-DESTROY-ALL-OTHER-INFERENCES", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_inference_to_subl_query", "CB-LINK-INFERENCE-TO-SUBL-QUERY", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_to_subl_query", "CB-INFERENCE-TO-SUBL-QUERY", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_graph_inference_answers", "CB-LINK-GRAPH-INFERENCE-ANSWERS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_graph_inference_answers", "CB-GRAPH-INFERENCE-ANSWERS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_graph_inference_answers_int", "CB-GRAPH-INFERENCE-ANSWERS-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_graph_inference_answers_window", "CB-GRAPH-INFERENCE-ANSWERS-WINDOW", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_save_inference_answers_int", "CB-SAVE-INFERENCE-ANSWERS-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_output_answers_to_html_stream_or_file", "CB-INFERENCE-OUTPUT-ANSWERS-TO-HTML-STREAM-OR-FILE", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_save_inference_answers", "CB-SAVE-INFERENCE-ANSWERS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_save_inference_answers", "CB-LINK-SAVE-INFERENCE-ANSWERS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_save_inference_answers_as_queries", "CB-SAVE-INFERENCE-ANSWERS-AS-QUERIES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_save_inference_answers_as_queries_int", "CB-SAVE-INFERENCE-ANSWERS-AS-QUERIES-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "save_inference_answers_as_queries", "SAVE-INFERENCE-ANSWERS-AS-QUERIES", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_save_inference_answers_as_queries", "CB-LINK-SAVE-INFERENCE-ANSWERS-AS-QUERIES", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_answer_timeline", "CB-INFERENCE-ANSWER-TIMELINE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_inference_answer_timeline", "CB-LINK-INFERENCE-ANSWER-TIMELINE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_inference_answer_timeline_image", "CB-SHOW-INFERENCE-ANSWER-TIMELINE-IMAGE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "inference_answer_tuples_for_chart", "INFERENCE-ANSWER-TUPLES-FOR-CHART", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_strengthen_properties", "CB-INFERENCE-STRENGTHEN-PROPERTIES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_inference_strengthen_properties", "CB-LINK-INFERENCE-STRENGTHEN-PROPERTIES", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "query_tool_default_for_property", "QUERY-TOOL-DEFAULT-FOR-PROPERTY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "scaled_property_default_spec_lookup", "SCALED-PROPERTY-DEFAULT-SPEC-LOOKUP", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_transformation_rule_statistics", "CB-TRANSFORMATION-RULE-STATISTICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_transformation_rule_statistics_int", "CB-TRANSFORMATION-RULE-STATISTICS-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_transformation_rule_statistics", "CB-LINK-TRANSFORMATION-RULE-STATISTICS", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_transformation_rule_statistics", "CB-SHOW-TRANSFORMATION-RULE-STATISTICS", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_transformation_rule_statistics_int", "CB-SHOW-TRANSFORMATION-RULE-STATISTICS-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_transformation_rule_statistics_for_rule", "CB-SHOW-TRANSFORMATION-RULE-STATISTICS-FOR-RULE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_transformation_rule_utility_keyword", "CB-SHOW-TRANSFORMATION-RULE-UTILITY-KEYWORD", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "transformation_rule_utility_color_and_keyword", "TRANSFORMATION-RULE-UTILITY-COLOR-AND-KEYWORD", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_disable_strategic_heuristic_rule_historical_utility", "CB-DISABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_disable_strategic_heuristic_rule_historical_utility", "CB-LINK-DISABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_enable_strategic_heuristic_rule_historical_utility", "CB-ENABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_enable_strategic_heuristic_rule_historical_utility", "CB-LINK-ENABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_disable_transformation_rule_statistics_update", "CB-DISABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_disable_transformation_rule_statistics_update", "CB-LINK-DISABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_enable_transformation_rule_statistics_update", "CB-ENABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_enable_transformation_rule_statistics_update", "CB-LINK-ENABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_disable_transformation_rule_historical_success_pruning", "CB-DISABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_disable_transformation_rule_historical_success_pruning", "CB-LINK-DISABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_enable_transformation_rule_historical_success_pruning", "CB-ENABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_enable_transformation_rule_historical_success_pruning", "CB-LINK-ENABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_clear_transformation_rule_statistics", "CB-CLEAR-TRANSFORMATION-RULE-STATISTICS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_clear_transformation_rule_statistics", "CB-LINK-CLEAR-TRANSFORMATION-RULE-STATISTICS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_clear_all_transformation_rule_statistics", "CB-CLEAR-ALL-TRANSFORMATION-RULE-STATISTICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_clear_all_transformation_rule_statistics", "CB-LINK-CLEAR-ALL-TRANSFORMATION-RULE-STATISTICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_handle_transformation_rule_statistics", "CB-HANDLE-TRANSFORMATION-RULE-STATISTICS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_handle_transformation_rule_statistics_load", "CB-HANDLE-TRANSFORMATION-RULE-STATISTICS-LOAD", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_handle_transformation_rule_statistics_save", "CB-HANDLE-TRANSFORMATION-RULE-STATISTICS-SAVE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_forward_inference_metrics", "CB-FORWARD-INFERENCE-METRICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_forward_inference_metrics", "CB-LINK-FORWARD-INFERENCE-METRICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_rule_forward_inference_metrics", "CB-RULE-FORWARD-INFERENCE-METRICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_rule_forward_inference_metrics", "CB-LINK-RULE-FORWARD-INFERENCE-METRICS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_clear_forward_inference_metrics", "CB-CLEAR-FORWARD-INFERENCE-METRICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_clear_forward_inference_metrics", "CB-LINK-CLEAR-FORWARD-INFERENCE-METRICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_start_gathering_forward_inference_metrics", "CB-START-GATHERING-FORWARD-INFERENCE-METRICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_start_gathering_forward_inference_metrics", "CB-LINK-START-GATHERING-FORWARD-INFERENCE-METRICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_stop_gathering_forward_inference_metrics", "CB-STOP-GATHERING-FORWARD-INFERENCE-METRICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_stop_gathering_forward_inference_metrics", "CB-LINK-STOP-GATHERING-FORWARD-INFERENCE-METRICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_forward_inference_metrics", "CB-SHOW-FORWARD-INFERENCE-METRICS", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "extend_metric_plist_with_totals", "EXTEND-METRIC-PLIST-WITH-TOTALS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_forward_inference_metrics_times_and_counts_table", "CB-FORWARD-INFERENCE-METRICS-TIMES-AND-COUNTS-TABLE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_rule_forward_inference_metrics", "CB-SHOW-RULE-FORWARD-INFERENCE-METRICS", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_inference_link_and_time", "CB-SHOW-INFERENCE-LINK-AND-TIME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_forward_inference_statistics_for_rule", "CB-SHOW-FORWARD-INFERENCE-STATISTICS-FOR-RULE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "categorize_inferences_by_provability_status", "CATEGORIZE-INFERENCES-BY-PROVABILITY-STATUS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "categorize_reified_supports_by_dependent_involving_support", "CATEGORIZE-REIFIED-SUPPORTS-BY-DEPENDENT-INVOLVING-SUPPORT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_show_warning_icon", "CB-SHOW-WARNING-ICON", 0, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_link_inference_graph", "CB-LINK-INFERENCE-GRAPH", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_graph", "CB-INFERENCE-GRAPH", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_graph_internal", "CB-INFERENCE-GRAPH-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.inference.browser.cb_query", "cb_inference_print_graph_of_inference", "CB-INFERENCE-PRINT-GRAPH-OF-INFERENCE", 1, 0, false);
        return (SubLObject)cb_query.NIL;
    }
    
    public static SubLObject init_cb_query_file() {
        cb_query.$cb_inference_progress_frame_enabledP$ = SubLFiles.deflexical("*CB-INFERENCE-PROGRESS-FRAME-ENABLED?*", (SubLObject)cb_query.T);
        cb_query.$cb_inference_help_filename$ = SubLFiles.deflexical("*CB-INFERENCE-HELP-FILENAME*", (SubLObject)cb_query.$str26$inference_overview);
        cb_query.$inference_parameter_table$ = SubLFiles.deflexical("*INFERENCE-PARAMETER-TABLE*", (cb_query.NIL != Symbols.boundp((SubLObject)cb_query.$sym28$_INFERENCE_PARAMETER_TABLE_)) ? cb_query.$inference_parameter_table$.getGlobalValue() : dictionary.new_dictionary((SubLObject)cb_query.EQ, (SubLObject)cb_query.UNPROVIDED));
        cb_query.$inference_mode_custom_value_number$ = SubLFiles.deflexical("*INFERENCE-MODE-CUSTOM-VALUE-NUMBER*", (SubLObject)cb_query.FOUR_INTEGER);
        cb_query.$cb_inferences$ = SubLFiles.defvar("*CB-INFERENCES*", (SubLObject)cb_query.NIL);
        cb_query.$cb_cyc_editor_enabledP$ = SubLFiles.defvar("*CB-CYC-EDITOR-ENABLED?*", (SubLObject)cb_query.NIL);
        cb_query.$default_new_inference_monad_mt$ = SubLFiles.defparameter("*DEFAULT-NEW-INFERENCE-MONAD-MT*", cb_query.$const319$CurrentWorldDataCollectorMt_NonHo);
        cb_query.$default_new_inference_mt$ = SubLFiles.defparameter("*DEFAULT-NEW-INFERENCE-MT*", (SubLObject)ConsesLow.listS(cb_query.$const321$MtSpace, cb_query.$default_new_inference_monad_mt$.getDynamicValue(), (SubLObject)cb_query.$list322));
        cb_query.$cb_query_default_mt_monad_choices$ = SubLFiles.deflexical("*CB-QUERY-DEFAULT-MT-MONAD-CHOICES*", (SubLObject)cb_query.$list325);
        cb_query.$cb_default_query_parameters$ = SubLFiles.defparameter("*CB-DEFAULT-QUERY-PARAMETERS*", (SubLObject)cb_query.NIL);
        cb_query.$cb_basic_inference_resource_constraints$ = SubLFiles.deflexical("*CB-BASIC-INFERENCE-RESOURCE-CONSTRAINTS*", (SubLObject)cb_query.$list371);
        cb_query.$cb_inference_mode_properties$ = SubLFiles.deflexical("*CB-INFERENCE-MODE-PROPERTIES*", (SubLObject)cb_query.$list377);
        cb_query.$cb_advanced_inference_dynamic_properties$ = SubLFiles.deflexical("*CB-ADVANCED-INFERENCE-DYNAMIC-PROPERTIES*", (SubLObject)cb_query.$list382);
        cb_query.$cb_advanced_inference_static_properties$ = SubLFiles.deflexical("*CB-ADVANCED-INFERENCE-STATIC-PROPERTIES*", (SubLObject)cb_query.$list384);
        cb_query.$cb_advanced_strategy_dynamic_properties$ = SubLFiles.deflexical("*CB-ADVANCED-STRATEGY-DYNAMIC-PROPERTIES*", (SubLObject)ConsesLow.list((SubLObject)ConsesLow.listS((SubLObject)cb_query.$kw133$PRODUCTIVITY_LIMIT, Numbers.integerDivide(inference_datastructures_enumerated_types.$default_productivity_limit$.getGlobalValue(), (SubLObject)cb_query.$int137$100), (SubLObject)cb_query.$list387)));
        cb_query.$cb_advanced_strategy_static_properties$ = SubLFiles.deflexical("*CB-ADVANCED-STRATEGY-STATIC-PROPERTIES*", (SubLObject)ConsesLow.list((SubLObject)ConsesLow.listS((SubLObject)cb_query.$kw138$REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT, Numbers.integerDivide(inference_datastructures_enumerated_types.$default_removal_backtracking_productivity_limit$.getGlobalValue(), (SubLObject)cb_query.$int137$100), (SubLObject)cb_query.$list387)));
        cb_query.$cb_advanced_problem_store_dynamic_properties$ = SubLFiles.deflexical("*CB-ADVANCED-PROBLEM-STORE-DYNAMIC-PROPERTIES*", (SubLObject)cb_query.NIL);
        cb_query.$cb_advanced_problem_store_static_properties$ = SubLFiles.deflexical("*CB-ADVANCED-PROBLEM-STORE-STATIC-PROPERTIES*", (SubLObject)cb_query.$list388);
        cb_query.$cb_all_inference_properties$ = SubLFiles.deflexical("*CB-ALL-INFERENCE-PROPERTIES*", ConsesLow.append(new SubLObject[] { cb_query.$cb_basic_inference_resource_constraints$.getGlobalValue(), cb_query.$cb_advanced_inference_dynamic_properties$.getGlobalValue(), cb_query.$cb_advanced_inference_static_properties$.getGlobalValue(), cb_query.$cb_advanced_strategy_dynamic_properties$.getGlobalValue(), cb_query.$cb_advanced_strategy_static_properties$.getGlobalValue(), cb_query.$cb_advanced_problem_store_static_properties$.getGlobalValue() }));
        cb_query.$cb_all_inference_parameters$ = SubLFiles.deflexical("*CB-ALL-INFERENCE-PARAMETERS*", Mapping.mapcar(Symbols.symbol_function((SubLObject)cb_query.$sym379$FIRST), cb_query.$cb_all_inference_properties$.getGlobalValue()));
        cb_query.$html_js_on_click_preamble$ = SubLFiles.deflexical("*HTML-JS-ON-CLICK-PREAMBLE*", (SubLObject)cb_query.$str400$onClick__);
        cb_query.$html_js_on_click_postamble$ = SubLFiles.deflexical("*HTML-JS-ON-CLICK-POSTAMBLE*", (SubLObject)cb_query.$str401$_);
        cb_query.$cb_set_all_radio_buttons_body$ = SubLFiles.deflexical("*CB-SET-ALL-RADIO-BUTTONS-BODY*", (SubLObject)cb_query.$str402$set_all_radio_buttons_document_fo);
        cb_query.$cb_set_field_value_body$ = SubLFiles.deflexical("*CB-SET-FIELD-VALUE-BODY*", (SubLObject)cb_query.$str403$with__this_form_elements___A____v);
        cb_query.$cb_focus_and_set_all_radio_buttons_script$ = SubLFiles.deflexical("*CB-FOCUS-AND-SET-ALL-RADIO-BUTTONS-SCRIPT*", (SubLObject)cb_query.$str412$onClick__with__this_form_elements);
        cb_query.$cb_default_unspecified_query_mt$ = SubLFiles.deflexical("*CB-DEFAULT-UNSPECIFIED-QUERY-MT*", cb_query.$const535$EverythingPSC);
        cb_query.$cb_literal_query_variables$ = SubLFiles.deflexical("*CB-LITERAL-QUERY-VARIABLES*", (SubLObject)cb_query.$list541);
        cb_query.$cb_literal_query_time_cutoff$ = SubLFiles.deflexical("*CB-LITERAL-QUERY-TIME-CUTOFF*", (SubLObject)cb_query.NIL);
        cb_query.$sort_literal_query_terms_by_generality_estimateP$ = SubLFiles.defparameter("*SORT-LITERAL-QUERY-TERMS-BY-GENERALITY-ESTIMATE?*", (SubLObject)cb_query.NIL);
        cb_query.$cb_query_auto_refresh_rate$ = SubLFiles.deflexical("*CB-QUERY-AUTO-REFRESH-RATE*", (SubLObject)cb_query.THREE_INTEGER);
        cb_query.$cb_open_inference_progress_frame_height$ = SubLFiles.deflexical("*CB-OPEN-INFERENCE-PROGRESS-FRAME-HEIGHT*", (SubLObject)cb_query.$int592$800);
        cb_query.$cb_closed_inference_progress_frame_height$ = SubLFiles.deflexical("*CB-CLOSED-INFERENCE-PROGRESS-FRAME-HEIGHT*", (SubLObject)cb_query.$int331$80);
        cb_query.$cb_inference_answer_section_limit$ = SubLFiles.deflexical("*CB-INFERENCE-ANSWER-SECTION-LIMIT*", (SubLObject)cb_query.TEN_INTEGER);
        cb_query.$cb_show_forward_inference_metrics_verbosity$ = SubLFiles.defparameter("*CB-SHOW-FORWARD-INFERENCE-METRICS-VERBOSITY*", (SubLObject)cb_query.$kw824$TERSE);
        return (SubLObject)cb_query.NIL;
    }
    
    public static SubLObject setup_cb_query_file() {
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw12$INFERENCE_DOC, (SubLObject)cb_query.$sym13$CB_LINK_INFERENCE_DOC, (SubLObject)cb_query.TWO_INTEGER);
        subl_macro_promotions.declare_defglobal((SubLObject)cb_query.$sym28$_INFERENCE_PARAMETER_TABLE_);
        meta_macros.declare_indention_pattern((SubLObject)cb_query.$sym39$DECLARE_INFERENCE_PARAMETER, (SubLObject)cb_query.$list40);
        access_macros.register_macro_helper((SubLObject)cb_query.$sym37$DECLARE_INFERENCE_PARAMETER_INTERNAL, (SubLObject)cb_query.$sym39$DECLARE_INFERENCE_PARAMETER);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw46$MAX_NUMBER, (SubLObject)cb_query.$str47$Number_cutoff, (SubLObject)cb_query.$str48$This_controls_how_many_answers_we, (SubLObject)cb_query.$list49, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw50$MAX_TIME, (SubLObject)cb_query.$str51$Time_cutoff, (SubLObject)cb_query.$str52$This_controls_how_long_we_allow_a, (SubLObject)cb_query.$list53, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw54$MAX_STEP, (SubLObject)cb_query.$str55$Step_cutoff, (SubLObject)cb_query.$str56$This_controls_how_many_inference_, (SubLObject)cb_query.$list57, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw58$INFERENCE_MODE, (SubLObject)cb_query.$str59$Inference_engine_mode, (SubLObject)cb_query.$str60$This_controls_what_mode_the_infer, (SubLObject)cb_query.$list61, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw62$FORWARD_MAX_TIME, (SubLObject)cb_query.$str63$Forward_time_cutoff, (SubLObject)cb_query.$str64$This_controls_how_long_we_allow_f, (SubLObject)cb_query.$list53, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw65$MAX_TRANSFORMATION_DEPTH, (SubLObject)cb_query.$str66$Transformation_cutoff, (SubLObject)cb_query.$str67$This_specifies_the_maximum_allowa, (SubLObject)cb_query.$list68, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw69$MIN_RULE_UTILITY, (SubLObject)cb_query.$str70$Rule_utility_threshold, (SubLObject)cb_query.$str71$This_specifies_the_minimum_allowa, (SubLObject)cb_query.$list72, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw73$MAX_PROOF_DEPTH, (SubLObject)cb_query.$str74$Proof_complexity_cutoff, (SubLObject)cb_query.$str75$This_specifies_the_maximum_allowa, (SubLObject)cb_query.$list76, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw77$PROBABLY_APPROXIMATELY_DONE, (SubLObject)cb_query.$str78$Probably_Done_cutoff, (SubLObject)cb_query.$str79$Probably_Approximately_Done__This, (SubLObject)cb_query.$list80, (SubLObject)cb_query.$float81$0_01, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw82$BLOCK_, (SubLObject)cb_query.$str83$Step_by_step, (SubLObject)cb_query.$str84$This_controls_whether_the_inferen, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw86$CACHE_INFERENCE_RESULTS_, (SubLObject)cb_query.$str87$Cache_backward_query_results, (SubLObject)cb_query.$str88$This_controls_whether_or_not_the_, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw89$ANSWER_LANGUAGE, (SubLObject)cb_query.$str90$Answer_language, (SubLObject)cb_query.$str91$This_controls_the_CycL_language_u, (SubLObject)cb_query.$list92, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw93$CONTINUABLE_, (SubLObject)cb_query.$str94$Continuable, (SubLObject)cb_query.$str95$This_controls_whether_the_inferen, (SubLObject)cb_query.$list96, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw97$METRICS, (SubLObject)cb_query.$str98$Metrics, (SubLObject)cb_query.$str99$This_controls_which_metrics_are_g, (SubLObject)cb_query.$list100, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw101$ALLOW_HL_PREDICATE_TRANSFORMATION_, (SubLObject)cb_query.$str102$Allow_HL_predicate_transformation, (SubLObject)cb_query.$str103$Whether_transformation_is_allowed, (SubLObject)cb_query.$list104, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw105$ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_, (SubLObject)cb_query.$str106$Allow_unbound_predicate_rule_back, (SubLObject)cb_query.$str107$Whether_it_is_permissible_to_use_, (SubLObject)cb_query.$list104, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw108$ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_, (SubLObject)cb_query.$str109$Allow_evaluatable_predicate_trans, (SubLObject)cb_query.$str110$Whether_transformation_is_allowed, (SubLObject)cb_query.$list104, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw111$ALLOW_INDETERMINATE_RESULTS_, (SubLObject)cb_query.$str112$Allow_result_bindings_to_indeterm, (SubLObject)cb_query.$str113$Whether_it_is_permissible_to_use_, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw114$ALLOW_ABNORMALITY_CHECKING_, (SubLObject)cb_query.$str115$Allow_abnormality_checking_, (SubLObject)cb_query.$str116$Whether_to_check_for_exceptions_t, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw117$TRANSITIVE_CLOSURE_MODE, (SubLObject)cb_query.$str118$Transitive_closure_mode, (SubLObject)cb_query.$str119$The_degree_to_which_modules__such, (SubLObject)cb_query.$list120, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw121$RESULT_UNIQUENESS, (SubLObject)cb_query.$str122$Result_uniqueness_is_based_on, (SubLObject)cb_query.$str123$If_result_uniqueness_is_based_on_, (SubLObject)cb_query.$list124, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw125$DISJUNCTION_FREE_EL_VARS_POLICY, (SubLObject)cb_query.$str126$If_disjuncts_have_different_free_, (SubLObject)cb_query.$str127$What_to_do_if_different_top_level, (SubLObject)cb_query.$list128, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw129$ALLOWED_MODULES, (SubLObject)cb_query.$str130$Allowed_HL_Modules, (SubLObject)cb_query.$str131$An_HL_module_specification_which_, (SubLObject)cb_query.$list132, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw133$PRODUCTIVITY_LIMIT, (SubLObject)cb_query.$str134$Productivity_limit, (SubLObject)cb_query.$str135$If_a_tactic_is_estimated_to_have_, (SubLObject)cb_query.$list136, (SubLObject)cb_query.$int137$100, (SubLObject)cb_query.T);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw138$REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT, (SubLObject)cb_query.$str139$Removal_backtracking_productivity, (SubLObject)cb_query.$str140$If_a_tactic_is_estimated_to_have_, (SubLObject)cb_query.$list141, (SubLObject)cb_query.$int137$100, (SubLObject)cb_query.T);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw142$EQUALITY_REASONING_METHOD, (SubLObject)cb_query.$str143$Canonicalize_problems, (SubLObject)cb_query.$str144$Whether_to_canonicalize_problem_q, (SubLObject)cb_query.$list145, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw146$EQUALITY_REASONING_DOMAIN, (SubLObject)cb_query.$str147$Allow_problem_reuse_for, (SubLObject)cb_query.$str148$Which_problems_are_permitted_to_b, (SubLObject)cb_query.$list149, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw150$INTERMEDIATE_STEP_VALIDATION_LEVEL, (SubLObject)cb_query.$str151$Intermediate_proof_validation, (SubLObject)cb_query.$str152$How_carefully_to_check_the_interm, (SubLObject)cb_query.$list153, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw154$MAX_PROBLEM_COUNT, (SubLObject)cb_query.$str155$Space_cutoff, (SubLObject)cb_query.$str156$The_maximum_number_of_subproblems, (SubLObject)cb_query.$list157, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw158$TRANSFORMATION_ALLOWED_, (SubLObject)cb_query.$str159$Allow_transformation_at_all, (SubLObject)cb_query.$str160$Even_stronger_than_setting_the_in, (SubLObject)cb_query.$list161, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw162$ADD_RESTRICTION_LAYER_OF_INDIRECTION_, (SubLObject)cb_query.$str163$Add_restriction_layer_of_indirect, (SubLObject)cb_query.$str164$When_solving_an_open_problem__the, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw165$NEGATION_BY_FAILURE_, (SubLObject)cb_query.$str166$Enable_negation_by_failure, (SubLObject)cb_query.$str167$This_controls_whether_or_not_we_a, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw168$COMPLETENESS_MINIMIZATION_ALLOWED_, (SubLObject)cb_query.$str169$Enable_use_of_completeness_meta_k, (SubLObject)cb_query.$str170$This_controls_whether_or_not_we_a, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw171$DIRECTION, (SubLObject)cb_query.$str172$Inference_Direction, (SubLObject)cb_query.$str173$This_controls_whether_inferences_, (SubLObject)cb_query.$list174, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw175$EVALUATE_SUBL_ALLOWED_, (SubLObject)cb_query.$str176$Enable_evaluation_of_SubL_perform, (SubLObject)cb_query.$str177$This_controls_whether_or_not_we_a, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw178$REWRITE_ALLOWED_, (SubLObject)cb_query.$str179$Enable_sidechaining, (SubLObject)cb_query.$str180$This_controls_whether_or_not_we_a, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw181$ABDUCTION_ALLOWED_, (SubLObject)cb_query.$str182$Enable_abduction, (SubLObject)cb_query.$str183$This_controls_whether_or_not_we_a, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw184$NEW_TERMS_ALLOWED_, (SubLObject)cb_query.$str185$Introduce_new_terms, (SubLObject)cb_query.$str186$This_controls_whether_or_not_we_a, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        declare_inference_parameter_internal((SubLObject)cb_query.$kw187$COMPUTE_ANSWER_JUSTIFICATIONS_, (SubLObject)cb_query.$str188$Compute_Answer_Justifications, (SubLObject)cb_query.$str189$This_controls_whether_or_not_we_c, (SubLObject)cb_query.$list85, (SubLObject)cb_query.NIL, (SubLObject)cb_query.NIL);
        utilities_macros.register_html_state_variable((SubLObject)cb_query.$sym199$_CB_INFERENCES_);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym214$CB_QUERY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        Hashtables.sethash((SubLObject)cb_query.$kw216$QUERY, cyc_file_dependencies.$cb_icon_definitions$.getGlobalValue(), (SubLObject)ConsesLow.list((SubLObject)cb_query.$str217$query_tool_gif, (SubLObject)cb_query.NIL));
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw216$QUERY, (SubLObject)cb_query.$sym220$CB_LINK_QUERY, (SubLObject)cb_query.ONE_INTEGER);
        cb_utilities.declare_cb_tool((SubLObject)cb_query.$kw216$QUERY, (SubLObject)cb_query.$str218$Query, (SubLObject)cb_query.$str218$Query, (SubLObject)cb_query.$str221$Ask_a_Query);
        Hashtables.sethash((SubLObject)cb_query.$kw242$CB_QUERY, cyc_file_dependencies.$cb_help_definitions$.getGlobalValue(), (SubLObject)ConsesLow.list((SubLObject)cb_query.$str243$cb_query_html, (SubLObject)cb_query.NIL));
        utilities_macros.register_html_state_variable((SubLObject)cb_query.$sym320$_DEFAULT_NEW_INFERENCE_MONAD_MT_);
        utilities_macros.register_html_interface_variable((SubLObject)cb_query.$sym320$_DEFAULT_NEW_INFERENCE_MONAD_MT_);
        utilities_macros.register_html_state_variable((SubLObject)cb_query.$sym323$_DEFAULT_NEW_INFERENCE_MT_);
        utilities_macros.register_html_interface_variable((SubLObject)cb_query.$sym323$_DEFAULT_NEW_INFERENCE_MT_);
        utilities_macros.register_html_state_variable((SubLObject)cb_query.$sym352$_CB_DEFAULT_QUERY_PARAMETERS_);
        utilities_macros.register_html_interface_variable((SubLObject)cb_query.$sym352$_CB_DEFAULT_QUERY_PARAMETERS_);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym459$CB_QUERY_PROOF_CHECKER_DROP, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw444$QUERY_PROOF_CHECKER_DROP, (SubLObject)cb_query.$sym464$CB_LINK_QUERY_PROOF_CHECKER_DROP, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym465$CB_QUERY_PROOF_CHECKER_DROP_ALL, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw433$QUERY_PROOF_CHECKER_DROP_ALL, (SubLObject)cb_query.$sym468$CB_LINK_QUERY_PROOF_CHECKER_DROP_ALL, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym484$CB_HANDLE_QUERY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw506$ASSERTION_SIMILAR_QUERY, (SubLObject)cb_query.$sym507$CB_LINK_ASSERTION_SIMILAR_QUERY, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym509$CB_ASSERTION_SIMILAR_QUERY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw516$ANTECEDENT_QUERY, (SubLObject)cb_query.$sym517$CB_LINK_ANTECEDENT_QUERY, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym518$CB_ASSERTION_ANTECEDENT_QUERY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw523$RULE_KNOWN_EXTENT_QUERY, (SubLObject)cb_query.$sym524$CB_LINK_RULE_KNOWN_EXTENT_QUERY, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym526$CB_RULE_KNOWN_EXTENT_QUERY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw530$RULE_UNKNOWN_EXTENT_QUERY, (SubLObject)cb_query.$sym531$CB_LINK_RULE_UNKNOWN_EXTENT_QUERY, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym532$CB_RULE_UNKNOWN_EXTENT_QUERY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym539$CB_LITERAL_QUERY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym540$CB_LQ, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        Hashtables.sethash((SubLObject)cb_query.$kw542$CB_LITERAL_QUERY, cyc_file_dependencies.$cb_help_definitions$.getGlobalValue(), (SubLObject)ConsesLow.list((SubLObject)cb_query.$str543$cb_literal_query_html, (SubLObject)cb_query.NIL));
        Hashtables.sethash((SubLObject)cb_query.$kw542$CB_LITERAL_QUERY, cyc_file_dependencies.$cb_help_definitions$.getGlobalValue(), (SubLObject)ConsesLow.list((SubLObject)cb_query.$str543$cb_literal_query_html, (SubLObject)cb_query.NIL));
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym601$CB_INFERENCE_PROGRESS_PAGE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym623$CB_AUTO_REFRESH_QUERY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw605$AUTO_REFRESH_QUERY, (SubLObject)cb_query.$sym626$CB_LINK_AUTO_REFRESH_QUERY, (SubLObject)cb_query.TWO_INTEGER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw615$ALL_INFERENCE_ANSWERS, (SubLObject)cb_query.$sym629$CB_LINK_ALL_INFERENCE_ANSWERS, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym631$CB_ALL_INFERENCE_ANSWERS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym634$CB_FOCUS_INFERENCE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw274$FOCUS_INFERENCE, (SubLObject)cb_query.$sym637$CB_LINK_FOCUS_INFERENCE, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym638$CB_DEFOCUS_INFERENCE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw287$DEFOCUS_INFERENCE, (SubLObject)cb_query.$sym641$CB_LINK_DEFOCUS_INFERENCE, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym642$CB_INTERRUPT_INFERENCE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw607$INTERRUPT_INFERENCE, (SubLObject)cb_query.$sym644$CB_LINK_INTERRUPT_INFERENCE, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym645$CB_ABORT_INFERENCE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw609$ABORT_INFERENCE, (SubLObject)cb_query.$sym647$CB_LINK_ABORT_INFERENCE, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym648$CB_FORGET_INFERENCE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw651$FORGET_INFERENCE, (SubLObject)cb_query.$sym652$CB_LINK_FORGET_INFERENCE, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym653$CB_FORGET_ALL_INFERENCES, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw656$FORGET_ALL_INFERENCES, (SubLObject)cb_query.$sym657$CB_LINK_FORGET_ALL_INFERENCES, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym658$CB_FORGET_ALL_OTHER_INFERENCES, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw660$FORGET_ALL_OTHER_INFERENCES, (SubLObject)cb_query.$sym661$CB_LINK_FORGET_ALL_OTHER_INFERENCES, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym664$CB_REINFORCE_INFERENCE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw285$REINFORCE_INFERENCE, (SubLObject)cb_query.$sym667$CB_LINK_REINFORCE_INFERENCE, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym668$CB_DESTROY_INFERENCE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw276$DESTROY_INFERENCE, (SubLObject)cb_query.$sym671$CB_LINK_DESTROY_INFERENCE, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym672$CB_DESTROY_ALL_INFERENCES, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw675$DESTROY_ALL_INFERENCES, (SubLObject)cb_query.$sym676$CB_LINK_DESTROY_ALL_INFERENCES, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym678$CB_DESTROY_ALL_OTHER_INFERENCES, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw268$DESTROY_ALL_OTHER_INFERENCES, (SubLObject)cb_query.$sym681$CB_LINK_DESTROY_ALL_OTHER_INFERENCES, (SubLObject)cb_query.ONE_INTEGER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw297$INFERENCE_TO_SUBL_QUERY, (SubLObject)cb_query.$sym684$CB_LINK_INFERENCE_TO_SUBL_QUERY, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym686$CB_INFERENCE_TO_SUBL_QUERY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw618$GRAPH_INFERENCE_ANSWERS, (SubLObject)cb_query.$sym695$CB_LINK_GRAPH_INFERENCE_ANSWERS, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym696$CB_GRAPH_INFERENCE_ANSWERS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym725$CB_SAVE_INFERENCE_ANSWERS_INT, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        Hashtables.sethash((SubLObject)cb_query.$kw729$CB_SAVE_INFERENCE_ANSWERS, cyc_file_dependencies.$cb_help_definitions$.getGlobalValue(), (SubLObject)ConsesLow.list((SubLObject)cb_query.$str730$cb_save_inference_answers_html, (SubLObject)cb_query.NIL));
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym755$CB_SAVE_INFERENCE_ANSWERS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw617$SAVE_INFERENCE_ANSWERS, (SubLObject)cb_query.$sym758$CB_LINK_SAVE_INFERENCE_ANSWERS, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym760$CB_SAVE_INFERENCE_ANSWERS_AS_QUERIES, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw619$SAVE_INFERENCE_ANSWERS_AS_QUERIES, (SubLObject)cb_query.$sym779$CB_LINK_SAVE_INFERENCE_ANSWERS_AS_QUERIES, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym784$CB_INFERENCE_ANSWER_TIMELINE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw621$INFERENCE_ANSWER_TIMELINE, (SubLObject)cb_query.$sym787$CB_LINK_INFERENCE_ANSWER_TIMELINE, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym815$CB_INFERENCE_STRENGTHEN_PROPERTIES, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw820$INFERENCE_STRENGTHEN_PROPERTIES, (SubLObject)cb_query.$sym821$CB_LINK_INFERENCE_STRENGTHEN_PROPERTIES, (SubLObject)cb_query.THREE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym825$CB_TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw828$TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$sym841$CB_LINK_TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.TWO_INTEGER);
        cyc_navigator_internals.def_navigator_link((SubLObject)cb_query.$kw828$TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$kw399$TEXT, (SubLObject)cb_query.$list842, (SubLObject)cb_query.$str843$cb_transformation_rule_statistics, (SubLObject)cb_query.ZERO_INTEGER, (SubLObject)cb_query.$kw8$MAIN, (SubLObject)cb_query.$str826$Experience_Control_Panel, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym899$CB_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw851$DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, (SubLObject)cb_query.$sym901$CB_LINK_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym902$CB_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw852$ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, (SubLObject)cb_query.$sym904$CB_LINK_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym905$CB_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw846$DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, (SubLObject)cb_query.$sym907$CB_LINK_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym908$CB_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw847$ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, (SubLObject)cb_query.$sym910$CB_LINK_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym911$CB_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw854$DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, (SubLObject)cb_query.$sym913$CB_LINK_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym914$CB_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw855$ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, (SubLObject)cb_query.$sym916$CB_LINK_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym920$CB_CLEAR_TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw923$CLEAR_TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$sym924$CB_LINK_CLEAR_TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym925$CB_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw829$CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$sym928$CB_LINK_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym931$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym934$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_LOAD, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym937$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_SAVE, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym939$CB_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw941$FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$sym942$CB_LINK_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.ONE_INTEGER);
        cyc_navigator_internals.def_navigator_link((SubLObject)cb_query.$kw941$FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$kw399$TEXT, (SubLObject)cb_query.$list842, (SubLObject)cb_query.$str940$cb_forward_inference_metrics, (SubLObject)cb_query.ZERO_INTEGER, (SubLObject)cb_query.$kw8$MAIN, (SubLObject)cb_query.$str938$Forward_Inference_Metrics, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED, (SubLObject)cb_query.UNPROVIDED);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym948$CB_RULE_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw945$RULE_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$sym952$CB_LINK_RULE_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym953$CB_CLEAR_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw956$CLEAR_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$sym957$CB_LINK_CLEAR_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym958$CB_START_GATHERING_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw961$START_GATHERING_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$sym962$CB_LINK_START_GATHERING_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.ONE_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym963$CB_STOP_GATHERING_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw966$STOP_GATHERING_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.$sym967$CB_LINK_STOP_GATHERING_FORWARD_INFERENCE_METRICS, (SubLObject)cb_query.ONE_INTEGER);
        cb_utilities.setup_cb_link_method((SubLObject)cb_query.$kw299$INFERENCE_GRAPH, (SubLObject)cb_query.$sym1062$CB_LINK_INFERENCE_GRAPH, (SubLObject)cb_query.TWO_INTEGER);
        html_macros.note_cgi_handler_function((SubLObject)cb_query.$sym1063$CB_INFERENCE_GRAPH, (SubLObject)cb_query.$kw215$HTML_HANDLER);
        return (SubLObject)cb_query.NIL;
    }
    
    public void declareFunctions() {
        declare_cb_query_file();
    }
    
    public void initializeVariables() {
        init_cb_query_file();
    }
    
    public void runTopLevelForms() {
        setup_cb_query_file();
    }
    
    static {
        me = (SubLFile)new cb_query();
        cb_query.$cb_inference_progress_frame_enabledP$ = null;
        cb_query.$cb_inference_help_filename$ = null;
        cb_query.$inference_parameter_table$ = null;
        cb_query.$inference_mode_custom_value_number$ = null;
        cb_query.$cb_inferences$ = null;
        cb_query.$cb_cyc_editor_enabledP$ = null;
        cb_query.$default_new_inference_monad_mt$ = null;
        cb_query.$default_new_inference_mt$ = null;
        cb_query.$cb_query_default_mt_monad_choices$ = null;
        cb_query.$cb_default_query_parameters$ = null;
        cb_query.$cb_basic_inference_resource_constraints$ = null;
        cb_query.$cb_inference_mode_properties$ = null;
        cb_query.$cb_advanced_inference_dynamic_properties$ = null;
        cb_query.$cb_advanced_inference_static_properties$ = null;
        cb_query.$cb_advanced_strategy_dynamic_properties$ = null;
        cb_query.$cb_advanced_strategy_static_properties$ = null;
        cb_query.$cb_advanced_problem_store_dynamic_properties$ = null;
        cb_query.$cb_advanced_problem_store_static_properties$ = null;
        cb_query.$cb_all_inference_properties$ = null;
        cb_query.$cb_all_inference_parameters$ = null;
        cb_query.$html_js_on_click_preamble$ = null;
        cb_query.$html_js_on_click_postamble$ = null;
        cb_query.$cb_set_all_radio_buttons_body$ = null;
        cb_query.$cb_set_field_value_body$ = null;
        cb_query.$cb_focus_and_set_all_radio_buttons_script$ = null;
        cb_query.$cb_default_unspecified_query_mt$ = null;
        cb_query.$cb_literal_query_variables$ = null;
        cb_query.$cb_literal_query_time_cutoff$ = null;
        cb_query.$sort_literal_query_terms_by_generality_estimateP$ = null;
        cb_query.$cb_query_auto_refresh_rate$ = null;
        cb_query.$cb_open_inference_progress_frame_height$ = null;
        cb_query.$cb_closed_inference_progress_frame_height$ = null;
        cb_query.$cb_inference_answer_section_limit$ = null;
        cb_query.$cb_show_forward_inference_metrics_verbosity$ = null;
        $sym0$INFERENCE_P = SubLObjectFactory.makeSymbol("INFERENCE-P");
        $str1$_ = SubLObjectFactory.makeString("-");
        $list2 = ConsesLow.list((SubLObject)Characters.CHAR_hyphen);
        $list3 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("STORE-ID-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("INFERENCE-ID-STRING"));
        $str4$nd___ = SubLObjectFactory.makeString("nd();");
        $str5$__ = SubLObjectFactory.makeString("  ");
        $str6$ = SubLObjectFactory.makeString("");
        $list7 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("URL-BODY"), (SubLObject)SubLObjectFactory.makeSymbol("LINK-BODY"), (SubLObject)SubLObjectFactory.makeSymbol("&OPTIONAL"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("TARGET"), (SubLObject)SubLObjectFactory.makeKeyword("MAIN")), (SubLObject)SubLObjectFactory.makeSymbol("EXPLANATION"), (SubLObject)SubLObjectFactory.makeSymbol("CAPTION"), (SubLObject)SubLObjectFactory.makeSymbol("WIDTH"), (SubLObject)SubLObjectFactory.makeSymbol("STICKY"));
        $kw8$MAIN = SubLObjectFactory.makeKeyword("MAIN");
        $sym9$FRAME_LINK_HOVEROVER = SubLObjectFactory.makeSymbol("FRAME-LINK-HOVEROVER");
        $kw10$DOC = SubLObjectFactory.makeKeyword("DOC");
        $kw11$SELF = SubLObjectFactory.makeKeyword("SELF");
        $kw12$INFERENCE_DOC = SubLObjectFactory.makeKeyword("INFERENCE-DOC");
        $sym13$CB_LINK_INFERENCE_DOC = SubLObjectFactory.makeSymbol("CB-LINK-INFERENCE-DOC");
        $str14$None = SubLObjectFactory.makeString("None");
        $str15$_D_total = SubLObjectFactory.makeString("~D total");
        $str16$__ = SubLObjectFactory.makeString(", ");
        $str17$_D_new = SubLObjectFactory.makeString("~D new");
        $str18$_D_new_justification_P = SubLObjectFactory.makeString("~D new justification~P");
        $kw19$TAUTOLOGY = SubLObjectFactory.makeKeyword("TAUTOLOGY");
        $kw20$CONTRADICTION = SubLObjectFactory.makeKeyword("CONTRADICTION");
        $kw21$SUSPENDED_INITIAL_JUSTIFICATION = SubLObjectFactory.makeKeyword("SUSPENDED-INITIAL-JUSTIFICATION");
        $str22$_Explain_ = SubLObjectFactory.makeString("[Explain]");
        $kw23$SUSPENDED = SubLObjectFactory.makeKeyword("SUSPENDED");
        $str24$More___ = SubLObjectFactory.makeString("More...");
        $str25$help_inference_ = SubLObjectFactory.makeString("help/inference/");
        $str26$inference_overview = SubLObjectFactory.makeString("inference-overview");
        $str27$_html_ = SubLObjectFactory.makeString(".html#");
        $sym28$_INFERENCE_PARAMETER_TABLE_ = SubLObjectFactory.makeSymbol("*INFERENCE-PARAMETER-TABLE*");
        $kw29$FANCY_NAME = SubLObjectFactory.makeKeyword("FANCY-NAME");
        $kw30$DESCRIPTION = SubLObjectFactory.makeKeyword("DESCRIPTION");
        $kw31$SETTINGS = SubLObjectFactory.makeKeyword("SETTINGS");
        $kw32$SCALING_FACTOR = SubLObjectFactory.makeKeyword("SCALING-FACTOR");
        $kw33$ROUND_ON_INPUT_ = SubLObjectFactory.makeKeyword("ROUND-ON-INPUT?");
        $list34 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PARAMETER"), (SubLObject)SubLObjectFactory.makeSymbol("&KEY"), (SubLObject)SubLObjectFactory.makeSymbol("FANCY-NAME"), (SubLObject)SubLObjectFactory.makeSymbol("DESCRIPTION"), (SubLObject)SubLObjectFactory.makeSymbol("SETTINGS"), (SubLObject)SubLObjectFactory.makeSymbol("SCALING-FACTOR"), (SubLObject)SubLObjectFactory.makeSymbol("ROUND-ON-INPUT?"));
        $list35 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("FANCY-NAME"), (SubLObject)SubLObjectFactory.makeKeyword("DESCRIPTION"), (SubLObject)SubLObjectFactory.makeKeyword("SETTINGS"), (SubLObject)SubLObjectFactory.makeKeyword("SCALING-FACTOR"), (SubLObject)SubLObjectFactory.makeKeyword("ROUND-ON-INPUT?"));
        $kw36$ALLOW_OTHER_KEYS = SubLObjectFactory.makeKeyword("ALLOW-OTHER-KEYS");
        $sym37$DECLARE_INFERENCE_PARAMETER_INTERNAL = SubLObjectFactory.makeSymbol("DECLARE-INFERENCE-PARAMETER-INTERNAL");
        $sym38$QUOTE = SubLObjectFactory.makeSymbol("QUOTE");
        $sym39$DECLARE_INFERENCE_PARAMETER = SubLObjectFactory.makeSymbol("DECLARE-INFERENCE-PARAMETER");
        $list40 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PARAMETER"), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym41$KEYWORDP = SubLObjectFactory.makeSymbol("KEYWORDP");
        $list42 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("TRUE"), (SubLObject)SubLObjectFactory.makeString("")));
        $list43 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("METHOD"), (SubLObject)SubLObjectFactory.makeSymbol("DATA"), (SubLObject)SubLObjectFactory.makeSymbol("EXPLANATION"));
        $kw44$VALUE = SubLObjectFactory.makeKeyword("VALUE");
        $kw45$ENTRY = SubLObjectFactory.makeKeyword("ENTRY");
        $kw46$MAX_NUMBER = SubLObjectFactory.makeKeyword("MAX-NUMBER");
        $str47$Number_cutoff = SubLObjectFactory.makeString("Number cutoff");
        $str48$This_controls_how_many_answers_we = SubLObjectFactory.makeString("This controls how many answers we want to find before suspending.");
        $list49 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P"), (SubLObject)SubLObjectFactory.makeString("answers")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.NIL, (SubLObject)SubLObjectFactory.makeString("Get everything")));
        $kw50$MAX_TIME = SubLObjectFactory.makeKeyword("MAX-TIME");
        $str51$Time_cutoff = SubLObjectFactory.makeString("Time cutoff");
        $str52$This_controls_how_long_we_allow_a = SubLObjectFactory.makeString("This controls how long we allow an inference to run before suspending.");
        $list53 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P"), (SubLObject)SubLObjectFactory.makeString("seconds")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.NIL, (SubLObject)SubLObjectFactory.makeString("Run forever")));
        $kw54$MAX_STEP = SubLObjectFactory.makeKeyword("MAX-STEP");
        $str55$Step_cutoff = SubLObjectFactory.makeString("Step cutoff");
        $str56$This_controls_how_many_inference_ = SubLObjectFactory.makeString("This controls how many inference steps we allow before suspending.");
        $list57 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P"), (SubLObject)SubLObjectFactory.makeString("steps")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.NIL, (SubLObject)SubLObjectFactory.makeString("No limit")));
        $kw58$INFERENCE_MODE = SubLObjectFactory.makeKeyword("INFERENCE-MODE");
        $str59$Inference_engine_mode = SubLObjectFactory.makeString("Inference engine mode");
        $str60$This_controls_what_mode_the_infer = SubLObjectFactory.makeString("This controls what mode the inference engine will operate under; roughly, how deep it will search for an answer before giving up.  This is a meta-property that controls many other low-level inference settings.");
        $list61 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("MINIMAL"), (SubLObject)SubLObjectFactory.makeString("Minimal")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("SHALLOW"), (SubLObject)SubLObjectFactory.makeString("Shallow")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("EXTENDED"), (SubLObject)SubLObjectFactory.makeString("Extended")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("MAXIMAL"), (SubLObject)SubLObjectFactory.makeString("Maximal")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("CUSTOM"), (SubLObject)SubLObjectFactory.makeString("Debug")));
        $kw62$FORWARD_MAX_TIME = SubLObjectFactory.makeKeyword("FORWARD-MAX-TIME");
        $str63$Forward_time_cutoff = SubLObjectFactory.makeString("Forward time cutoff");
        $str64$This_controls_how_long_we_allow_f = SubLObjectFactory.makeString("This controls how long we allow forward inference in the mt of an inference to run before starting the backward inference.  This is usually only used for hypothetical queries.");
        $kw65$MAX_TRANSFORMATION_DEPTH = SubLObjectFactory.makeKeyword("MAX-TRANSFORMATION-DEPTH");
        $str66$Transformation_cutoff = SubLObjectFactory.makeString("Transformation cutoff");
        $str67$This_specifies_the_maximum_allowa = SubLObjectFactory.makeString("This specifies the maximum allowable number of transformation steps in answers.");
        $list68 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P"), (SubLObject)SubLObjectFactory.makeString("transformation steps (at most)")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.NIL, (SubLObject)SubLObjectFactory.makeString("Unlimited transformation")));
        $kw69$MIN_RULE_UTILITY = SubLObjectFactory.makeKeyword("MIN-RULE-UTILITY");
        $str70$Rule_utility_threshold = SubLObjectFactory.makeString("Rule utility threshold");
        $str71$This_specifies_the_minimum_allowa = SubLObjectFactory.makeString("This specifies the minimum allowable utility of a rule used in transformation, from -100 to +100.");
        $list72 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("RULE-UTILITY-P"), (SubLObject)SubLObjectFactory.makeString("minimum rule utility")));
        $kw73$MAX_PROOF_DEPTH = SubLObjectFactory.makeKeyword("MAX-PROOF-DEPTH");
        $str74$Proof_complexity_cutoff = SubLObjectFactory.makeString("Proof complexity cutoff");
        $str75$This_specifies_the_maximum_allowa = SubLObjectFactory.makeString("This specifies the maximum allowable number of steps in proofs for answers.");
        $list76 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P"), (SubLObject)SubLObjectFactory.makeString("proof steps (at most)")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.NIL, (SubLObject)SubLObjectFactory.makeString("No limit")));
        $kw77$PROBABLY_APPROXIMATELY_DONE = SubLObjectFactory.makeKeyword("PROBABLY-APPROXIMATELY-DONE");
        $str78$Probably_Done_cutoff = SubLObjectFactory.makeString("Probably Done cutoff");
        $str79$Probably_Approximately_Done__This = SubLObjectFactory.makeString("Probably Approximately Done: This controls how sure the Strategist must be that an inference will yield no more results before terminating it.  The Strategist uses past experience to make this determination.");
        $list80 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("PERCENTAGE-P"), (SubLObject)SubLObjectFactory.makeString("%")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)SubLObjectFactory.makeString("100 %")));
        $float81$0_01 = (SubLFloat)SubLObjectFactory.makeDouble(0.01);
        $kw82$BLOCK_ = SubLObjectFactory.makeKeyword("BLOCK?");
        $str83$Step_by_step = SubLObjectFactory.makeString("Step by step");
        $str84$This_controls_whether_the_inferen = SubLObjectFactory.makeString("This controls whether the inference will be run one step at a time, waiting for the user to click between each step.\nYou'll probably want to turn the time cutoff to 'run forever' if you want to go step by step.");
        $list85 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.NIL, (SubLObject)SubLObjectFactory.makeString("No")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.T, (SubLObject)SubLObjectFactory.makeString("Yes")));
        $kw86$CACHE_INFERENCE_RESULTS_ = SubLObjectFactory.makeKeyword("CACHE-INFERENCE-RESULTS?");
        $str87$Cache_backward_query_results = SubLObjectFactory.makeString("Cache backward query results");
        $str88$This_controls_whether_or_not_the_ = SubLObjectFactory.makeString("This controls whether or not the proofs for successful inference answers are cached\nas deductions for assertions in the KB.");
        $kw89$ANSWER_LANGUAGE = SubLObjectFactory.makeKeyword("ANSWER-LANGUAGE");
        $str90$Answer_language = SubLObjectFactory.makeString("Answer language");
        $str91$This_controls_the_CycL_language_u = SubLObjectFactory.makeString("This controls the CycL language used to express answers.");
        $list92 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("HL"), (SubLObject)SubLObjectFactory.makeString("HL")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("EL"), (SubLObject)SubLObjectFactory.makeString("EL")));
        $kw93$CONTINUABLE_ = SubLObjectFactory.makeKeyword("CONTINUABLE?");
        $str94$Continuable = SubLObjectFactory.makeString("Continuable");
        $str95$This_controls_whether_the_inferen = SubLObjectFactory.makeString("This controls whether the inference is continuable or not.");
        $list96 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.NIL, (SubLObject)SubLObjectFactory.makeString("No (allows strengthening)")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.T, (SubLObject)SubLObjectFactory.makeString("Yes")));
        $kw97$METRICS = SubLObjectFactory.makeKeyword("METRICS");
        $str98$Metrics = SubLObjectFactory.makeString("Metrics");
        $str99$This_controls_which_metrics_are_g = SubLObjectFactory.makeString("This controls which metrics are gathered while the inference is running.");
        $list100 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.NIL, (SubLObject)SubLObjectFactory.makeString("None")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("NON-EMPTY-LIST-P"), (SubLObject)SubLObjectFactory.makeString("")));
        $kw101$ALLOW_HL_PREDICATE_TRANSFORMATION_ = SubLObjectFactory.makeKeyword("ALLOW-HL-PREDICATE-TRANSFORMATION?");
        $str102$Allow_HL_predicate_transformation = SubLObjectFactory.makeString("Allow HL predicate transformation");
        $str103$Whether_transformation_is_allowed = SubLObjectFactory.makeString("Whether transformation is allowed on literals with HL predicates (e.g. #$isa, #$genls, #$equals, etc.)");
        $list104 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.NIL, (SubLObject)SubLObjectFactory.makeString("No")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.T, (SubLObject)SubLObjectFactory.makeString("Yes (expensive)")));
        $kw105$ALLOW_UNBOUND_PREDICATE_TRANSFORMATION_ = SubLObjectFactory.makeKeyword("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?");
        $str106$Allow_unbound_predicate_rule_back = SubLObjectFactory.makeString("Allow unbound predicate rule backchaining");
        $str107$Whether_it_is_permissible_to_use_ = SubLObjectFactory.makeString("Whether it is permissible to use rules that conclude to literals with variable predicates.");
        $kw108$ALLOW_EVALUATABLE_PREDICATE_TRANSFORMATION_ = SubLObjectFactory.makeKeyword("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?");
        $str109$Allow_evaluatable_predicate_trans = SubLObjectFactory.makeString("Allow evaluatable predicate transformation");
        $str110$Whether_transformation_is_allowed = SubLObjectFactory.makeString("Whether transformation is allowed on literals with evaluatable predicates (e.g. #$different, #$greaterThan, #$substring, etc.)");
        $kw111$ALLOW_INDETERMINATE_RESULTS_ = SubLObjectFactory.makeKeyword("ALLOW-INDETERMINATE-RESULTS?");
        $str112$Allow_result_bindings_to_indeterm = SubLObjectFactory.makeString("Allow result bindings to indeterminates");
        $str113$Whether_it_is_permissible_to_use_ = SubLObjectFactory.makeString("Whether it is permissible to use quoted instances of #$IndeterminateTerm for result bindings.\n   Note that quoted instances of #$IndeterminateTerm will always be used for explicitly scoped variables \n   (e.g. scoped by #$thereExists, etc.).");
        $kw114$ALLOW_ABNORMALITY_CHECKING_ = SubLObjectFactory.makeKeyword("ALLOW-ABNORMALITY-CHECKING?");
        $str115$Allow_abnormality_checking_ = SubLObjectFactory.makeString("Allow abnormality checking?");
        $str116$Whether_to_check_for_exceptions_t = SubLObjectFactory.makeString("Whether to check for exceptions to top-level proofs, e.g. exceptions to rules in transformation proofs.");
        $kw117$TRANSITIVE_CLOSURE_MODE = SubLObjectFactory.makeKeyword("TRANSITIVE-CLOSURE-MODE");
        $str118$Transitive_closure_mode = SubLObjectFactory.makeString("Transitive closure mode");
        $str119$The_degree_to_which_modules__such = SubLObjectFactory.makeString("The degree to which modules (such as transitiveViaArg) should generate transitive closures. ");
        $list120 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("NONE"), (SubLObject)SubLObjectFactory.makeString("No closures")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("FOCUSED"), (SubLObject)SubLObjectFactory.makeString("Focused closures (expensive)")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("ALL"), (SubLObject)SubLObjectFactory.makeString("Full closures (very expensive)")));
        $kw121$RESULT_UNIQUENESS = SubLObjectFactory.makeKeyword("RESULT-UNIQUENESS");
        $str122$Result_uniqueness_is_based_on = SubLObjectFactory.makeString("Result uniqueness is based on");
        $str123$If_result_uniqueness_is_based_on_ = SubLObjectFactory.makeString("If result uniqueness is based on different bindings, it won't bother to prove the same thing using different methods.");
        $list124 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("BINDINGS"), (SubLObject)SubLObjectFactory.makeString("different bindings")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("PROOF"), (SubLObject)SubLObjectFactory.makeString("different proofs")));
        $kw125$DISJUNCTION_FREE_EL_VARS_POLICY = SubLObjectFactory.makeKeyword("DISJUNCTION-FREE-EL-VARS-POLICY");
        $str126$If_disjuncts_have_different_free_ = SubLObjectFactory.makeString("If disjuncts have different free EL variables, ");
        $str127$What_to_do_if_different_top_level = SubLObjectFactory.makeString("What to do if different top-level disjuncts in the query have different sets of free EL variables,\ne.g. (or (isa ?X Dog) (isa ?Y Cat)).");
        $list128 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("REQUIRE-EQUAL"), (SubLObject)SubLObjectFactory.makeString("deem the query ill-formed")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("COMPUTE-INTERSECTION"), (SubLObject)SubLObjectFactory.makeString("use their intersection")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("COMPUTE-UNION"), (SubLObject)SubLObjectFactory.makeString("use their union")));
        $kw129$ALLOWED_MODULES = SubLObjectFactory.makeKeyword("ALLOWED-MODULES");
        $str130$Allowed_HL_Modules = SubLObjectFactory.makeString("Allowed HL Modules");
        $str131$An_HL_module_specification_which_ = SubLObjectFactory.makeString("An HL module specification which limits the Strategist's ability to use certain HL modules.");
        $list132 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("NON-UNIVERSAL-ALLOWED-MODULES-SPEC-P"), (SubLObject)SubLObjectFactory.makeString("")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("ALL"), (SubLObject)SubLObjectFactory.makeString("All HL Modules")));
        $kw133$PRODUCTIVITY_LIMIT = SubLObjectFactory.makeKeyword("PRODUCTIVITY-LIMIT");
        $str134$Productivity_limit = SubLObjectFactory.makeString("Productivity limit");
        $str135$If_a_tactic_is_estimated_to_have_ = SubLObjectFactory.makeString("If a tactic is estimated to have more than this productivity, it will be ignored instead of executed.\nProductivity is (roughly) the expected number of answers generated.");
        $list136 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-NUMBER-P"), (SubLObject)SubLObjectFactory.makeString("(at most)")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("POSITIVE-INFINITY"), (SubLObject)SubLObjectFactory.makeString("No limit")));
        $int137$100 = SubLObjectFactory.makeInteger(100);
        $kw138$REMOVAL_BACKTRACKING_PRODUCTIVITY_LIMIT = SubLObjectFactory.makeKeyword("REMOVAL-BACKTRACKING-PRODUCTIVITY-LIMIT");
        $str139$Removal_backtracking_productivity = SubLObjectFactory.makeString("Removal backtracking productivity limit");
        $str140$If_a_tactic_is_estimated_to_have_ = SubLObjectFactory.makeString("If a tactic is estimated to have more than this productivity, it will not be considered for Removal Backtracking\nProductivity is (roughly) 100 * the expected number of answers generated.  Note that in the Inference Browser,\ndisplayed productivities are divided by 100.");
        $list141 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P"), (SubLObject)SubLObjectFactory.makeString("(at most)")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("POSITIVE-INFINITY"), (SubLObject)SubLObjectFactory.makeString("No limit")));
        $kw142$EQUALITY_REASONING_METHOD = SubLObjectFactory.makeKeyword("EQUALITY-REASONING-METHOD");
        $str143$Canonicalize_problems = SubLObjectFactory.makeString("Canonicalize problems");
        $str144$Whether_to_canonicalize_problem_q = SubLObjectFactory.makeString("Whether to canonicalize problem queries wrt literal order and HL variable order.\nWARNING: results may be unpredictable if canonicalization is disabled.");
        $list145 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("CZER-EQUAL"), (SubLObject)SubLObjectFactory.makeString("Yes")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("EQUAL"), (SubLObject)SubLObjectFactory.makeString("No")));
        $kw146$EQUALITY_REASONING_DOMAIN = SubLObjectFactory.makeKeyword("EQUALITY-REASONING-DOMAIN");
        $str147$Allow_problem_reuse_for = SubLObjectFactory.makeString("Allow problem reuse for");
        $str148$Which_problems_are_permitted_to_b = SubLObjectFactory.makeString("Which problems are permitted to be reused by the Worker.\nWARNING: results may be unpredictable if this is set to anything other than 'all problems'.");
        $list149 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("ALL"), (SubLObject)SubLObjectFactory.makeString("all problems")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("SINGLE-LITERAL"), (SubLObject)SubLObjectFactory.makeString("only single-literal problems")));
        $kw150$INTERMEDIATE_STEP_VALIDATION_LEVEL = SubLObjectFactory.makeKeyword("INTERMEDIATE-STEP-VALIDATION-LEVEL");
        $str151$Intermediate_proof_validation = SubLObjectFactory.makeString("Intermediate proof validation");
        $str152$How_carefully_to_check_the_interm = SubLObjectFactory.makeString("How carefully to check the intermediate proofs that are used in inference\nfor semantic well-formedness.");
        $list153 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("ALL"), (SubLObject)SubLObjectFactory.makeString("full (most expensive)")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("ARG-TYPE"), (SubLObject)SubLObjectFactory.makeString("only arg-type")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("MINIMAL"), (SubLObject)SubLObjectFactory.makeString("only HL validations")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("NONE"), (SubLObject)SubLObjectFactory.makeString("none (least expensive)")));
        $kw154$MAX_PROBLEM_COUNT = SubLObjectFactory.makeKeyword("MAX-PROBLEM-COUNT");
        $str155$Space_cutoff = SubLObjectFactory.makeString("Space cutoff");
        $str156$The_maximum_number_of_subproblems = SubLObjectFactory.makeString("The maximum number of subproblems the Worker can create before being forced to suspend.\nIf this limit is exceeded, it will try to prune dead-end and unnecessary problems before suspending.\nSetting this to a higher number (or unlimited) is dangerous; it allows a single inference to use more memory,\nwhich may result in a crash if the machine's memory capacity is exceeded.");
        $list157 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ENTRY"), (SubLObject)SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P"), (SubLObject)SubLObjectFactory.makeString("problems (at most)")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("POSITIVE-INFINITY"), (SubLObject)SubLObjectFactory.makeString("Unlimited number of problems")));
        $kw158$TRANSFORMATION_ALLOWED_ = SubLObjectFactory.makeKeyword("TRANSFORMATION-ALLOWED?");
        $str159$Allow_transformation_at_all = SubLObjectFactory.makeString("Allow transformation at all");
        $str160$Even_stronger_than_setting_the_in = SubLObjectFactory.makeString("Even stronger than setting the inference resource constraints to allow transformation,\nthis precludes any followup inference from ever allowing transformation.");
        $list161 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.T, (SubLObject)SubLObjectFactory.makeString("Yes")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)cb_query.NIL, (SubLObject)SubLObjectFactory.makeString("No (faster)")));
        $kw162$ADD_RESTRICTION_LAYER_OF_INDIRECTION_ = SubLObjectFactory.makeKeyword("ADD-RESTRICTION-LAYER-OF-INDIRECTION?");
        $str163$Add_restriction_layer_of_indirect = SubLObjectFactory.makeString("Add restriction layer of indirection");
        $str164$When_solving_an_open_problem__the = SubLObjectFactory.makeString("When solving an open problem, the Worker can either add a removal link straight from the open problem\nto goal, or it can add the restricted form of that problem (which will be closed), and then add the\nremoval link from the restricted problem to goal.  This maximizes problem reuse but increases the\noverhead of the Worker.");
        $kw165$NEGATION_BY_FAILURE_ = SubLObjectFactory.makeKeyword("NEGATION-BY-FAILURE?");
        $str166$Enable_negation_by_failure = SubLObjectFactory.makeString("Enable negation by failure");
        $str167$This_controls_whether_or_not_we_a = SubLObjectFactory.makeString("This controls whether or not we allow the inability to prove a proposition to be an\nargument for that proposition not being true.");
        $kw168$COMPLETENESS_MINIMIZATION_ALLOWED_ = SubLObjectFactory.makeKeyword("COMPLETENESS-MINIMIZATION-ALLOWED?");
        $str169$Enable_use_of_completeness_meta_k = SubLObjectFactory.makeString("Enable use of completeness meta-knowledge");
        $str170$This_controls_whether_or_not_we_a = SubLObjectFactory.makeString("This controls whether or not we allow the use of completeness meta-knowledge\nto provide arguments for negated propositions.");
        $kw171$DIRECTION = SubLObjectFactory.makeKeyword("DIRECTION");
        $str172$Inference_Direction = SubLObjectFactory.makeString("Inference Direction");
        $str173$This_controls_whether_inferences_ = SubLObjectFactory.makeString("This controls whether inferences in this problem store are treated as backward inferences (the default) or forward inferences.");
        $list174 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("BACKWARD"), (SubLObject)SubLObjectFactory.makeString("Backward")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("VALUE"), (SubLObject)SubLObjectFactory.makeKeyword("FORWARD"), (SubLObject)SubLObjectFactory.makeString("Forward")));
        $kw175$EVALUATE_SUBL_ALLOWED_ = SubLObjectFactory.makeKeyword("EVALUATE-SUBL-ALLOWED?");
        $str176$Enable_evaluation_of_SubL_perform = SubLObjectFactory.makeString("Enable evaluation of SubL performatives");
        $str177$This_controls_whether_or_not_we_a = SubLObjectFactory.makeString("This controls whether or not we allow the SubL performatives (which may cause side effects) to be evaluated during inference.  #$performSubL and #$EvaluateSubLFn are the entry points into SubL from CycL");
        $kw178$REWRITE_ALLOWED_ = SubLObjectFactory.makeKeyword("REWRITE-ALLOWED?");
        $str179$Enable_sidechaining = SubLObjectFactory.makeString("Enable sidechaining");
        $str180$This_controls_whether_or_not_we_a = SubLObjectFactory.makeString("This controls whether or not we allow the use of sidechaining to rewrite problems into other problems.  Sidechaining is designed to be more focused than backchaining, will not increase the complexity of the current problem, and does not require a transformation step (i.e. a backchain).");
        $kw181$ABDUCTION_ALLOWED_ = SubLObjectFactory.makeKeyword("ABDUCTION-ALLOWED?");
        $str182$Enable_abduction = SubLObjectFactory.makeString("Enable abduction");
        $str183$This_controls_whether_or_not_we_a = SubLObjectFactory.makeString("This controls whether or not we allow abductive solutions for problems in this problem store.");
        $kw184$NEW_TERMS_ALLOWED_ = SubLObjectFactory.makeKeyword("NEW-TERMS-ALLOWED?");
        $str185$Introduce_new_terms = SubLObjectFactory.makeString("Introduce new terms");
        $str186$This_controls_whether_or_not_we_a = SubLObjectFactory.makeString("This controls whether or not we allow the introduction of new terms during inference.  If this is set to no, we assume that the set of reified and unrepresented terms comprises the entire universe of discourse.");
        $kw187$COMPUTE_ANSWER_JUSTIFICATIONS_ = SubLObjectFactory.makeKeyword("COMPUTE-ANSWER-JUSTIFICATIONS?");
        $str188$Compute_Answer_Justifications = SubLObjectFactory.makeString("Compute Answer Justifications");
        $str189$This_controls_whether_or_not_we_c = SubLObjectFactory.makeString("This controls whether or not we compute and remember the justifications for answers during inference.  If this is set to no, we only compute and remember bindings for free variables.");
        $kw190$PROBLEM_STORE = SubLObjectFactory.makeKeyword("PROBLEM-STORE");
        $kw191$NON_EXPLANATORY_SENTENCE = SubLObjectFactory.makeKeyword("NON-EXPLANATORY-SENTENCE");
        $kw192$CONDITIONAL_SENTENCE_ = SubLObjectFactory.makeKeyword("CONDITIONAL-SENTENCE?");
        $str193$CB_QUERY = SubLObjectFactory.makeString("CB QUERY");
        $str194$CB_Query = SubLObjectFactory.makeString("CB Query");
        $sym195$CB_QUERY_CONTINUE_THREAD = SubLObjectFactory.makeSymbol("CB-QUERY-CONTINUE-THREAD");
        $str196$CYC = SubLObjectFactory.makeString("CYC");
        $sym197$SPECIAL_VARIABLE_STATE_P = SubLObjectFactory.makeSymbol("SPECIAL-VARIABLE-STATE-P");
        $sym198$CONTINUE_INFERENCE = SubLObjectFactory.makeSymbol("CONTINUE-INFERENCE");
        $sym199$_CB_INFERENCES_ = SubLObjectFactory.makeSymbol("*CB-INFERENCES*");
        $list200 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("INFERENCE")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym201$DO_LIST = SubLObjectFactory.makeSymbol("DO-LIST");
        $list202 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CB-INFERENCES")));
        $sym203$PWHEN = SubLObjectFactory.makeSymbol("PWHEN");
        $list204 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FOCAL-INFERENCE"), (SubLObject)SubLObjectFactory.makeSymbol("OTHER-INFERENCES")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym205$CDESTRUCTURING_BIND = SubLObjectFactory.makeSymbol("CDESTRUCTURING-BIND");
        $sym206$_OPTIONAL = SubLObjectFactory.makeSymbol("&OPTIONAL");
        $sym207$_REST = SubLObjectFactory.makeSymbol("&REST");
        $list208 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CB-INFERENCES"));
        $list209 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("&OPTIONAL"), (SubLObject)SubLObjectFactory.makeSymbol("FOCAL-INFERENCE"), (SubLObject)SubLObjectFactory.makeSymbol("&REST"), (SubLObject)SubLObjectFactory.makeSymbol("OTHER-INFERENCES"));
        $sym210$VALID_INFERENCE_P = SubLObjectFactory.makeSymbol("VALID-INFERENCE-P");
        $kw211$IGNORE_ERRORS_TARGET = SubLObjectFactory.makeKeyword("IGNORE-ERRORS-TARGET");
        $sym212$IGNORE_ERRORS_HANDLER = SubLObjectFactory.makeSymbol("IGNORE-ERRORS-HANDLER", "SUBLISP");
        $int213$1000 = SubLObjectFactory.makeInteger(1000);
        $sym214$CB_QUERY = SubLObjectFactory.makeSymbol("CB-QUERY");
        $kw215$HTML_HANDLER = SubLObjectFactory.makeKeyword("HTML-HANDLER");
        $kw216$QUERY = SubLObjectFactory.makeKeyword("QUERY");
        $str217$query_tool_gif = SubLObjectFactory.makeString("query-tool.gif");
        $str218$Query = SubLObjectFactory.makeString("Query");
        $str219$cb_query = SubLObjectFactory.makeString("cb-query");
        $sym220$CB_LINK_QUERY = SubLObjectFactory.makeSymbol("CB-LINK-QUERY");
        $str221$Ask_a_Query = SubLObjectFactory.makeString("Ask a Query");
        $kw222$TITLE = SubLObjectFactory.makeKeyword("TITLE");
        $str223$Query_Tool = SubLObjectFactory.makeString("Query Tool");
        $kw224$REFRESH = SubLObjectFactory.makeKeyword("REFRESH");
        $kw225$SENTENCE = SubLObjectFactory.makeKeyword("SENTENCE");
        $kw226$UNSPECIFIED = SubLObjectFactory.makeKeyword("UNSPECIFIED");
        $kw227$MT = SubLObjectFactory.makeKeyword("MT");
        $kw228$PROPERTIES = SubLObjectFactory.makeKeyword("PROPERTIES");
        $kw229$QUERY_SPEC = SubLObjectFactory.makeKeyword("QUERY-SPEC");
        $kw230$TEST_SPEC = SubLObjectFactory.makeKeyword("TEST-SPEC");
        $str231$__DOCTYPE_html_PUBLIC_____W3C__DT = SubLObjectFactory.makeString("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
        $str232$_meta_http_equiv__X_UA_Compatible = SubLObjectFactory.makeString("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" >");
        $kw233$UNINITIALIZED = SubLObjectFactory.makeKeyword("UNINITIALIZED");
        $kw234$CB_CYC = SubLObjectFactory.makeKeyword("CB-CYC");
        $str235$yui_skin_sam = SubLObjectFactory.makeString("yui-skin-sam");
        $str236$post = SubLObjectFactory.makeString("post");
        $str237$cb_handle_query = SubLObjectFactory.makeString("cb-handle-query");
        $str238$non_explanatory = SubLObjectFactory.makeString("non-explanatory");
        $kw239$VISIBLE = SubLObjectFactory.makeKeyword("VISIBLE");
        $kw240$PARAGRAPH = SubLObjectFactory.makeKeyword("PARAGRAPH");
        $kw241$INVISIBLE = SubLObjectFactory.makeKeyword("INVISIBLE");
        $kw242$CB_QUERY = SubLObjectFactory.makeKeyword("CB-QUERY");
        $str243$cb_query_html = SubLObjectFactory.makeString("cb-query.html");
        $str244$_Refresh_ = SubLObjectFactory.makeString("[Refresh]");
        $str245$Go_to_section__ = SubLObjectFactory.makeString("Go to section :");
        $str246$Shortcut_links_to_sections_that_a = SubLObjectFactory.makeString("Shortcut links to sections that appear further down on this page.");
        $str247$focal_inference_section = SubLObjectFactory.makeString("focal-inference-section");
        $str248$_Focal_Inference_ = SubLObjectFactory.makeString("[Focal Inference]");
        $str249$The_inference_you_are_currently_e = SubLObjectFactory.makeString("The inference you are currently examining.  Usually the most recent query asked.");
        $str250$new_inference_section = SubLObjectFactory.makeString("new-inference-section");
        $str251$_New_Inference_ = SubLObjectFactory.makeString("[New Inference]");
        $str252$Start_a_new_inference_ = SubLObjectFactory.makeString("Start a new inference.");
        $str253$parameters_section = SubLObjectFactory.makeString("parameters-section");
        $str254$_Inference_Parameters_ = SubLObjectFactory.makeString("[Inference Parameters]");
        $str255$Adjust_the_inference_parameters_a = SubLObjectFactory.makeString("Adjust the inference parameters and resource constraints that will be used for starting a new inference or continuing the focal inference.");
        $str256$proof_checker_section = SubLObjectFactory.makeString("proof-checker-section");
        $str257$_Proof_Checker_Setup_ = SubLObjectFactory.makeString("[Proof Checker Setup]");
        $str258$Specify_an_exact_set_of_rules__an = SubLObjectFactory.makeString("Specify an exact set of rules, and constrain the inference engine to only use those rules.");
        $str259$other_inferences = SubLObjectFactory.makeString("other-inferences");
        $str260$Show = SubLObjectFactory.makeString("Show");
        $str261$Hide = SubLObjectFactory.makeString("Hide");
        $str262$Other_Inferences = SubLObjectFactory.makeString("Other Inferences");
        $str263$Examine__continue__or_destroy_pas = SubLObjectFactory.makeString("Examine, continue, or destroy past inferences you have asked.");
        $str264$__A_total_ = SubLObjectFactory.makeString("(~A total)");
        $kw265$LEFT = SubLObjectFactory.makeKeyword("LEFT");
        $kw266$TOP = SubLObjectFactory.makeKeyword("TOP");
        $str267$Actions = SubLObjectFactory.makeString("Actions");
        $kw268$DESTROY_ALL_OTHER_INFERENCES = SubLObjectFactory.makeKeyword("DESTROY-ALL-OTHER-INFERENCES");
        $str269$_Destroy_All_ = SubLObjectFactory.makeString("[Destroy All]");
        $kw270$DEBUG_INFERENCE = SubLObjectFactory.makeKeyword("DEBUG-INFERENCE");
        $str271$_Debug_ = SubLObjectFactory.makeString("[Debug]");
        $kw272$INFERENCE = SubLObjectFactory.makeKeyword("INFERENCE");
        $str273$_Examine_ = SubLObjectFactory.makeString("[Examine]");
        $kw274$FOCUS_INFERENCE = SubLObjectFactory.makeKeyword("FOCUS-INFERENCE");
        $str275$_Focus_ = SubLObjectFactory.makeString("[Focus]");
        $kw276$DESTROY_INFERENCE = SubLObjectFactory.makeKeyword("DESTROY-INFERENCE");
        $str277$_Destroy_ = SubLObjectFactory.makeString("[Destroy]");
        $str278$Status = SubLObjectFactory.makeString("Status");
        $str279$Answers = SubLObjectFactory.makeString("Answers");
        $str280$focal_problem_store = SubLObjectFactory.makeString("focal-problem-store");
        $str281$focal_inference = SubLObjectFactory.makeString("focal-inference");
        $str282$Focal_Inference = SubLObjectFactory.makeString("Focal Inference");
        $str283$Actions__ = SubLObjectFactory.makeString("Actions :");
        $kw284$MONITOR_INFERENCE = SubLObjectFactory.makeKeyword("MONITOR-INFERENCE");
        $kw285$REINFORCE_INFERENCE = SubLObjectFactory.makeKeyword("REINFORCE-INFERENCE");
        $str286$_Reinforce_ = SubLObjectFactory.makeString("[Reinforce]");
        $kw287$DEFOCUS_INFERENCE = SubLObjectFactory.makeKeyword("DEFOCUS-INFERENCE");
        $str288$_Defocus_ = SubLObjectFactory.makeString("[Defocus]");
        $kw289$TEMPLATE_OE_INFERENCE = SubLObjectFactory.makeKeyword("TEMPLATE-OE-INFERENCE");
        $str290$_Template_OE_ = SubLObjectFactory.makeString("[Template OE]");
        $kw291$CB_OWL_EXPORT_INFERENCE_ANSWERS = SubLObjectFactory.makeKeyword("CB-OWL-EXPORT-INFERENCE-ANSWERS");
        $str292$_OWL_Export_ = SubLObjectFactory.makeString("[OWL Export]");
        $kw293$KBQ_SAVE = SubLObjectFactory.makeKeyword("KBQ-SAVE");
        $str294$_Save_As_Query_ = SubLObjectFactory.makeString("[Save As Query]");
        $kw295$KCT_SAVE = SubLObjectFactory.makeKeyword("KCT-SAVE");
        $str296$_Save_As_Test_ = SubLObjectFactory.makeString("[Save As Test]");
        $kw297$INFERENCE_TO_SUBL_QUERY = SubLObjectFactory.makeKeyword("INFERENCE-TO-SUBL-QUERY");
        $str298$_SubL_Query_ = SubLObjectFactory.makeString("[SubL Query]");
        $kw299$INFERENCE_GRAPH = SubLObjectFactory.makeKeyword("INFERENCE-GRAPH");
        $str300$_Query_Graph_ = SubLObjectFactory.makeString("[Query Graph]");
        $str301$Asking_query__ = SubLObjectFactory.makeString("Asking query: ");
        $const302$UnrunnableQuery_SubstitutionOfInd = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("UnrunnableQuery-SubstitutionOfIndexicalsRequired"));
        $kw303$RED = SubLObjectFactory.makeKeyword("RED");
        $str304$WARNING__This_query_is_not_intend = SubLObjectFactory.makeString("WARNING: This query is not intended to be run without the appropriate substitution of indexical terms.");
        $str305$new_inference = SubLObjectFactory.makeString("new-inference");
        $str306$New_Inference = SubLObjectFactory.makeString("New Inference");
        $kw307$RUNNING = SubLObjectFactory.makeKeyword("RUNNING");
        $str308$Reset_All_Fields = SubLObjectFactory.makeString("Reset All Fields");
        $str309$Start_as_a_Followup_to_Focal = SubLObjectFactory.makeString("Start as a Followup to Focal");
        $str310$Starts_a_new_inference_as_a_follo = SubLObjectFactory.makeString("Starts a new inference as a followup query to the focal inference.\nThis means that this inference will reuse the problem store used by the focal inference,\nso it will not have to reprove problems already proven by the focal inference.");
        $str311$sharing_a_problem_store = SubLObjectFactory.makeString("sharing_a_problem_store");
        $str312$followup = SubLObjectFactory.makeString("followup");
        $str313$Start_as_New = SubLObjectFactory.makeString("Start as New");
        $str314$Starts_a_new_inference_with_a_fre = SubLObjectFactory.makeString("Starts a new inference with a fresh problem store (the default).");
        $str315$new = SubLObjectFactory.makeString("new");
        $str316$Start_Inference = SubLObjectFactory.makeString("Start Inference");
        $str317$query_spec = SubLObjectFactory.makeString("query-spec");
        $str318$test_spec = SubLObjectFactory.makeString("test-spec");
        $const319$CurrentWorldDataCollectorMt_NonHo = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CurrentWorldDataCollectorMt-NonHomocentric"));
        $sym320$_DEFAULT_NEW_INFERENCE_MONAD_MT_ = SubLObjectFactory.makeSymbol("*DEFAULT-NEW-INFERENCE-MONAD-MT*");
        $const321$MtSpace = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtSpace"));
        $list322 = ConsesLow.list((SubLObject)ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("MtTimeDimFn")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("Now"))));
        $sym323$_DEFAULT_NEW_INFERENCE_MT_ = SubLObjectFactory.makeSymbol("*DEFAULT-NEW-INFERENCE-MT*");
        $const324$InferencePSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InferencePSC"));
        $list325 = ConsesLow.list(constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("UniversalVocabularyMt")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BaseKB")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CurrentWorldDataCollectorMt-NonHomocentric")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("InferencePSC")), constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC")));
        $str326$mt_section = SubLObjectFactory.makeString("mt-section");
        $str327$cb_query_inference_mt = SubLObjectFactory.makeString("cb-query-inference-mt");
        $str328$Query_Context = SubLObjectFactory.makeString("Query Context");
        $kw329$MONAD_CHOICES = SubLObjectFactory.makeKeyword("MONAD-CHOICES");
        $str330$sentence_section = SubLObjectFactory.makeString("sentence-section");
        $int331$80 = SubLObjectFactory.makeInteger(80);
        $kw332$INPUT_NAME = SubLObjectFactory.makeKeyword("INPUT-NAME");
        $str333$sentence = SubLObjectFactory.makeString("sentence");
        $kw334$WIDTH = SubLObjectFactory.makeKeyword("WIDTH");
        $kw335$HEIGHT = SubLObjectFactory.makeKeyword("HEIGHT");
        $kw336$COMPLETE_LABEL = SubLObjectFactory.makeKeyword("COMPLETE-LABEL");
        $str337$Complete = SubLObjectFactory.makeString("Complete");
        $kw338$CYCLIFY_LABEL = SubLObjectFactory.makeKeyword("CYCLIFY-LABEL");
        $str339$Cyclify = SubLObjectFactory.makeString("Cyclify");
        $kw340$CLEAR_LABEL = SubLObjectFactory.makeKeyword("CLEAR-LABEL");
        $str341$Clear_Sentence = SubLObjectFactory.makeString("Clear Sentence");
        $kw342$MODE = SubLObjectFactory.makeKeyword("MODE");
        $str343$editor_ = SubLObjectFactory.makeString("editor_");
        $str344$CycEditor = SubLObjectFactory.makeString("CycEditor");
        $list345 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeUninternedSymbol("ATTRIBUTE"), (SubLObject)SubLObjectFactory.makeUninternedSymbol("VALUE"));
        $list346 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeString(" name="), (SubLObject)SubLObjectFactory.makeString("sentence"));
        $str347$_cols_ = SubLObjectFactory.makeString(" cols=");
        $str348$_rows_ = SubLObjectFactory.makeString(" rows=");
        $str349$Pragmatics = SubLObjectFactory.makeString("Pragmatics");
        $str350$An_optional_sentence_that_will_fu = SubLObjectFactory.makeString("An optional sentence that will further constrain the query for pragmatic reasons.  Justifications for answers will not include this sentence.");
        $str351$non_exp_sentence = SubLObjectFactory.makeString("non_exp_sentence");
        $sym352$_CB_DEFAULT_QUERY_PARAMETERS_ = SubLObjectFactory.makeSymbol("*CB-DEFAULT-QUERY-PARAMETERS*");
        $str353$inference_parameters = SubLObjectFactory.makeString("inference-parameters");
        $str354$Inference_Parameters = SubLObjectFactory.makeString("Inference Parameters");
        $str355$The_inference_parameters_and_reso = SubLObjectFactory.makeString("The inference parameters and resource constraints that will be used when starting a new inference or continuing the focal inference.");
        $str356$Continue_the_Focal_Inference = SubLObjectFactory.makeString("Continue the Focal Inference");
        $str357$Continues_running_the_focal_infer = SubLObjectFactory.makeString("Continues running the focal inference for a while longer, with more resources if the inference parameters have changed since the last time it was run.");
        $str358$continue = SubLObjectFactory.makeString("continue");
        $str359$Save_Parameters = SubLObjectFactory.makeString("Save Parameters");
        $str360$Saves_the_current_inference_param = SubLObjectFactory.makeString("Saves the current inference parameters as default for the user");
        $str361$save_parameters = SubLObjectFactory.makeString("save-parameters");
        $str362$Load_Parameters = SubLObjectFactory.makeString("Load Parameters");
        $str363$Loads_user_saved_default_inferenc = SubLObjectFactory.makeString("Loads user saved default inference parameters");
        $str364$load_parameters = SubLObjectFactory.makeString("load-parameters");
        $str365$Reset_Parameters = SubLObjectFactory.makeString("Reset Parameters");
        $str366$Resets_all_the_inference_paramete = SubLObjectFactory.makeString("Resets all the inference parameters to tool default.  If focal inference is available then inference parameters are set to that of focal inference.");
        $str367$reset_parameters = SubLObjectFactory.makeString("reset-parameters");
        $str368$Strengthen_Parameters = SubLObjectFactory.makeString("Strengthen Parameters");
        $str369$Sets_the_inference_parameters_to_ = SubLObjectFactory.makeString("Sets the inference parameters to the strongest values that should still admit all the current answers of the focal inference.");
        $str370$strengthen_parameters = SubLObjectFactory.makeString("strengthen-parameters");
        $list371 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MAX-NUMBER"), (SubLObject)cb_query.NIL, (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.THREE_INTEGER)), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MAX-TIME"), (SubLObject)SubLObjectFactory.makeInteger(30), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.FOUR_INTEGER)), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MAX-STEP"), (SubLObject)cb_query.NIL, (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.FOUR_INTEGER)), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INFERENCE-MODE"), (SubLObject)SubLObjectFactory.makeKeyword("SHALLOW")));
        $str372$Inference_Resource_Constraints = SubLObjectFactory.makeString("Inference Resource Constraints");
        $str373$Properties_that_can_change_while_ = SubLObjectFactory.makeString("Properties that can change while an inference is suspended, and be respected when that same inference is continued.");
        $str374$advanced_parameters = SubLObjectFactory.makeString("advanced-parameters");
        $str375$Inference_Debugging_Parameters = SubLObjectFactory.makeString("Inference Debugging Parameters");
        $str376$The_advanced_inference_parameters = SubLObjectFactory.makeString("The advanced inference parameters that can be manipulated for debugging inference.  These are used when starting a new inference or continuing the focal inference.");
        $list377 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeKeyword("MAX-TRANSFORMATION-DEPTH"), SubLObjectFactory.makeKeyword("NEW-TERMS-ALLOWED?"), SubLObjectFactory.makeKeyword("MAX-PROOF-DEPTH"), SubLObjectFactory.makeKeyword("ALLOW-HL-PREDICATE-TRANSFORMATION?"), SubLObjectFactory.makeKeyword("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"), SubLObjectFactory.makeKeyword("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"), SubLObjectFactory.makeKeyword("TRANSFORMATION-ALLOWED?"), SubLObjectFactory.makeKeyword("REMOVAL-BACKTRACKING-PRODUCTIVITY-LIMIT"), SubLObjectFactory.makeKeyword("PRODUCTIVITY-LIMIT"), SubLObjectFactory.makeKeyword("MAX-PROBLEM-COUNT"), SubLObjectFactory.makeKeyword("TRANSITIVE-CLOSURE-MODE"), SubLObjectFactory.makeKeyword("ADD-RESTRICTION-LAYER-OF-INDIRECTION?"), SubLObjectFactory.makeKeyword("MIN-RULE-UTILITY") });
        $sym378$CB_INFERENCE_MODE_PROPERTY_DATUM_P = SubLObjectFactory.makeSymbol("CB-INFERENCE-MODE-PROPERTY-DATUM-P");
        $sym379$FIRST = SubLObjectFactory.makeSymbol("FIRST");
        $str380$Inference_Engine_Mode_Properties = SubLObjectFactory.makeString("Inference Engine Mode Properties");
        $str381$Properties_determined_by_the_choi = SubLObjectFactory.makeString("Properties determined by the choice of inference engine mode, unless Debug is chosen.");
        $list382 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MAX-TRANSFORMATION-DEPTH"), (SubLObject)cb_query.ZERO_INTEGER, (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.TWO_INTEGER)), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MIN-RULE-UTILITY"), (SubLObject)SubLObjectFactory.makeInteger(-20), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.THREE_INTEGER)), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("PROBABLY-APPROXIMATELY-DONE"), (SubLObject)SubLObjectFactory.makeInteger(100), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.THREE_INTEGER)), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("FORWARD-MAX-TIME"), (SubLObject)cb_query.ZERO_INTEGER, (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.FOUR_INTEGER)), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("BLOCK?"), (SubLObject)cb_query.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MAX-PROOF-DEPTH"), (SubLObject)cb_query.NIL, (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.TWO_INTEGER)), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CACHE-INFERENCE-RESULTS?"), (SubLObject)cb_query.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ANSWER-LANGUAGE"), (SubLObject)SubLObjectFactory.makeKeyword("HL")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("CONTINUABLE?"), (SubLObject)cb_query.T), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("METRICS"), (SubLObject)cb_query.NIL) });
        $str383$Inference_Dynamic_Properties = SubLObjectFactory.makeString("Inference Dynamic Properties");
        $list384 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ALLOW-HL-PREDICATE-TRANSFORMATION?"), (SubLObject)cb_query.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ALLOW-UNBOUND-PREDICATE-TRANSFORMATION?"), (SubLObject)cb_query.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ALLOW-EVALUATABLE-PREDICATE-TRANSFORMATION?"), (SubLObject)cb_query.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ALLOW-INDETERMINATE-RESULTS?"), (SubLObject)cb_query.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ALLOW-ABNORMALITY-CHECKING?"), (SubLObject)cb_query.T), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("RESULT-UNIQUENESS"), (SubLObject)SubLObjectFactory.makeKeyword("BINDINGS")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("DISJUNCTION-FREE-EL-VARS-POLICY"), (SubLObject)SubLObjectFactory.makeKeyword("COMPUTE-INTERSECTION")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ALLOWED-MODULES"), (SubLObject)SubLObjectFactory.makeKeyword("ALL"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.TWENTY_INTEGER)), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TRANSITIVE-CLOSURE-MODE"), (SubLObject)SubLObjectFactory.makeKeyword("NONE")) });
        $str385$Inference_Static_Properties = SubLObjectFactory.makeString("Inference Static Properties");
        $str386$Properties_that_can_vary_between_ = SubLObjectFactory.makeString("Properties that can vary between different inferences (which may be sharing the same problem store),\nbut which must remain consistent throughout the life of a given inference.");
        $list387 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.SEVEN_INTEGER));
        $list388 = ConsesLow.list(new SubLObject[] { ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("NEGATION-BY-FAILURE?"), (SubLObject)cb_query.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("COMPLETENESS-MINIMIZATION-ALLOWED?"), (SubLObject)cb_query.T), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("DIRECTION"), (SubLObject)SubLObjectFactory.makeKeyword("BACKWARD")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("EQUALITY-REASONING-METHOD"), (SubLObject)SubLObjectFactory.makeKeyword("CZER-EQUAL")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("EQUALITY-REASONING-DOMAIN"), (SubLObject)SubLObjectFactory.makeKeyword("ALL")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INTERMEDIATE-STEP-VALIDATION-LEVEL"), (SubLObject)SubLObjectFactory.makeKeyword("NONE")), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("MAX-PROBLEM-COUNT"), (SubLObject)SubLObjectFactory.makeInteger(100000), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.SIX_INTEGER)), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TRANSFORMATION-ALLOWED?"), (SubLObject)cb_query.T), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ADD-RESTRICTION-LAYER-OF-INDIRECTION?"), (SubLObject)cb_query.T), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("EVALUATE-SUBL-ALLOWED?"), (SubLObject)cb_query.T), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("REWRITE-ALLOWED?"), (SubLObject)cb_query.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ABDUCTION-ALLOWED?"), (SubLObject)cb_query.NIL), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("NEW-TERMS-ALLOWED?"), (SubLObject)cb_query.T), ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("COMPUTE-ANSWER-JUSTIFICATIONS?"), (SubLObject)cb_query.T) });
        $str389$Problem_Store_Static_Properties = SubLObjectFactory.makeString("Problem Store Static Properties");
        $str390$Properties_of_a_problem_store_tha = SubLObjectFactory.makeString("Properties of a problem store that cannot change.  These properties affect all inferences using that problem store.");
        $list391 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PROPERTY"), (SubLObject)SubLObjectFactory.makeSymbol("CB-DEFAULT"), (SubLObject)SubLObjectFactory.makeSymbol("&OPTIONAL"), (SubLObject)SubLObjectFactory.makeSymbol("ENTRY-SPEC")), (SubLObject)SubLObjectFactory.makeSymbol("&REST"), (SubLObject)SubLObjectFactory.makeSymbol("REMAINING-CB-PROPERTIES"));
        $list392 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PROPERTY"), (SubLObject)SubLObjectFactory.makeSymbol("CB-DEFAULT"), (SubLObject)SubLObjectFactory.makeSymbol("&OPTIONAL"), (SubLObject)SubLObjectFactory.makeSymbol("ENTRY-SPEC"));
        $kw393$NO_MODE_VALUE_SPECIFIED = SubLObjectFactory.makeKeyword("NO-MODE-VALUE-SPECIFIED");
        $kw394$YELLOW = SubLObjectFactory.makeKeyword("YELLOW");
        $str395$_ = SubLObjectFactory.makeString("*");
        $str396$This_parameter_has_been_modified_ = SubLObjectFactory.makeString("This parameter has been modified.");
        $list397 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("TEXT"), (SubLObject)cb_query.NIL);
        $list398 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("TYPE"), (SubLObject)SubLObjectFactory.makeSymbol("SIZE"));
        $kw399$TEXT = SubLObjectFactory.makeKeyword("TEXT");
        $str400$onClick__ = SubLObjectFactory.makeString("onClick=\"");
        $str401$_ = SubLObjectFactory.makeString("\"");
        $str402$set_all_radio_buttons_document_fo = SubLObjectFactory.makeString("set_all_radio_buttons(document.forms[0], '~a', ~a);");
        $str403$with__this_form_elements___A____v = SubLObjectFactory.makeString("with (this.form.elements['~A']){value = '~A';};");
        $list404 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("RADIO-FIELD-NAME"), (SubLObject)SubLObjectFactory.makeSymbol("VALUE"));
        $list405 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("RADIO-VALUE"), (SubLObject)SubLObjectFactory.makeSymbol("ENTRY-FIELD-NAME"), (SubLObject)SubLObjectFactory.makeSymbol("ENTRY-VALUE"));
        $str406$No_setting_for__s_matched_the_val = SubLObjectFactory.makeString("No setting for ~s matched the value ~s");
        $kw407$DEFAULT_UNSPECIFIED = SubLObjectFactory.makeKeyword("DEFAULT-UNSPECIFIED");
        $str408$Unexpected_inference_parameter_se = SubLObjectFactory.makeString("Unexpected inference parameter setting type ~s");
        $str409$_ = SubLObjectFactory.makeString("|");
        $str410$_ = SubLObjectFactory.makeString(".");
        $str411$_ = SubLObjectFactory.makeString("?");
        $str412$onClick__with__this_form_elements = SubLObjectFactory.makeString("onClick=\"with (this.form.elements['~A']){focus();}; set_all_radio_buttons(document.forms[0], '~a', ~a); \"");
        $kw413$ALLOWED_RULES = SubLObjectFactory.makeKeyword("ALLOWED-RULES");
        $kw414$FORBIDDEN_RULES = SubLObjectFactory.makeKeyword("FORBIDDEN-RULES");
        $kw415$ALL = SubLObjectFactory.makeKeyword("ALL");
        $kw416$NONE = SubLObjectFactory.makeKeyword("NONE");
        $str417$proof_checker = SubLObjectFactory.makeString("proof-checker");
        $str418$Proof_Checker_Setup = SubLObjectFactory.makeString("Proof Checker Setup");
        $str419$Specify_an_exact_set_of_rules_all = SubLObjectFactory.makeString("Specify an exact set of rules allowed to be used in inference.");
        $kw420$CENTER = SubLObjectFactory.makeKeyword("CENTER");
        $str421$_FFDFDF = SubLObjectFactory.makeString("#FFDFDF");
        $str422$Forbidden = SubLObjectFactory.makeString("Forbidden");
        $str423$Forbid_the_use_of_this_rule_in_in = SubLObjectFactory.makeString("Forbid the use of this rule in inference");
        $str424$_Forbid_All_ = SubLObjectFactory.makeString("[Forbid All]");
        $str425$this_document_forms_0_ = SubLObjectFactory.makeString("this.document.forms[0]");
        $str426$_rule___ = SubLObjectFactory.makeString("^rule_.*");
        $str427$forbidden = SubLObjectFactory.makeString("forbidden");
        $str428$_FFFFDF = SubLObjectFactory.makeString("#FFFFDF");
        $str429$Unused = SubLObjectFactory.makeString("Unused");
        $str430$Neither_forbid_nor_allow__treat_l = SubLObjectFactory.makeString("Neither forbid nor allow; treat like any other rule in the KB.");
        $str431$_Unuse_All_ = SubLObjectFactory.makeString("[Unuse All]");
        $str432$unused = SubLObjectFactory.makeString("unused");
        $kw433$QUERY_PROOF_CHECKER_DROP_ALL = SubLObjectFactory.makeKeyword("QUERY-PROOF-CHECKER-DROP-ALL");
        $str434$_Drop_All_ = SubLObjectFactory.makeString("[Drop All]");
        $str435$_DFFFDF = SubLObjectFactory.makeString("#DFFFDF");
        $str436$Allowed = SubLObjectFactory.makeString("Allowed");
        $str437$Allow_the_use_of_this_rule_in_inf = SubLObjectFactory.makeString("Allow the use of this rule in inference, but forbid the use of all \n                  other rules except those which are explicitly allowed.");
        $str438$_Allow_All_ = SubLObjectFactory.makeString("[Allow All]");
        $str439$allowed = SubLObjectFactory.makeString("allowed");
        $str440$_FFFFFF = SubLObjectFactory.makeString("#FFFFFF");
        $str441$Proof_Checker_Rules = SubLObjectFactory.makeString("Proof Checker Rules");
        $kw442$FORBIDDEN = SubLObjectFactory.makeKeyword("FORBIDDEN");
        $kw443$UNUSED = SubLObjectFactory.makeKeyword("UNUSED");
        $kw444$QUERY_PROOF_CHECKER_DROP = SubLObjectFactory.makeKeyword("QUERY-PROOF-CHECKER-DROP");
        $str445$_Drop_ = SubLObjectFactory.makeString("[Drop]");
        $kw446$ALLOWED = SubLObjectFactory.makeKeyword("ALLOWED");
        $str447$rule_ = SubLObjectFactory.makeString("rule_");
        $str448$Properties_which_must_remain_cons = SubLObjectFactory.makeString("Properties which must remain consistent throughout the life of a given problem store.");
        $str449$Other_Problem_Store_Properties = SubLObjectFactory.makeString("Other Problem Store Properties");
        $str450$Destruction_Imminent__ = SubLObjectFactory.makeString("Destruction Imminent? ");
        $str451$Memoization_state___ = SubLObjectFactory.makeString("Memoization state : ");
        $kw452$PROBLEM_STORE_MEMOIZATION_STATE = SubLObjectFactory.makeKeyword("PROBLEM-STORE-MEMOIZATION-STATE");
        $str453$Janitor___ = SubLObjectFactory.makeString("Janitor : ");
        $kw454$PROBLEM_STORE_JANITOR = SubLObjectFactory.makeKeyword("PROBLEM-STORE-JANITOR");
        $kw455$RECOMPUTE_DESTRUCTIBLES = SubLObjectFactory.makeKeyword("RECOMPUTE-DESTRUCTIBLES");
        $kw456$REMOVE_DESTRUCTIBLES = SubLObjectFactory.makeKeyword("REMOVE-DESTRUCTIBLES");
        $str457$_a_does_not_specify_an_assertion = SubLObjectFactory.makeString("~a does not specify an assertion");
        $str458$Assertion_specified_was_not_a_rul = SubLObjectFactory.makeString("Assertion specified was not a rule");
        $sym459$CB_QUERY_PROOF_CHECKER_DROP = SubLObjectFactory.makeSymbol("CB-QUERY-PROOF-CHECKER-DROP");
        $sym460$ASSERTION_P = SubLObjectFactory.makeSymbol("ASSERTION-P");
        $kw461$OVERLIB = SubLObjectFactory.makeKeyword("OVERLIB");
        $str462$No_longer_consider_this_rule_as_b = SubLObjectFactory.makeString("No longer consider this rule as being either forbidden or allowed.");
        $str463$cb_query_proof_checker_drop__A = SubLObjectFactory.makeString("cb-query-proof-checker-drop&~A");
        $sym464$CB_LINK_QUERY_PROOF_CHECKER_DROP = SubLObjectFactory.makeSymbol("CB-LINK-QUERY-PROOF-CHECKER-DROP");
        $sym465$CB_QUERY_PROOF_CHECKER_DROP_ALL = SubLObjectFactory.makeSymbol("CB-QUERY-PROOF-CHECKER-DROP-ALL");
        $str466$No_longer_consider_any_of_these_r = SubLObjectFactory.makeString("No longer consider any of these rules as being either forbidden or allowed.");
        $str467$cb_query_proof_checker_drop_all = SubLObjectFactory.makeString("cb-query-proof-checker-drop-all");
        $sym468$CB_LINK_QUERY_PROOF_CHECKER_DROP_ALL = SubLObjectFactory.makeSymbol("CB-LINK-QUERY-PROOF-CHECKER-DROP-ALL");
        $kw469$CONTINUE = SubLObjectFactory.makeKeyword("CONTINUE");
        $kw470$FOLLOWUP = SubLObjectFactory.makeKeyword("FOLLOWUP");
        $kw471$NEW = SubLObjectFactory.makeKeyword("NEW");
        $kw472$SAVE_PARAMETERS = SubLObjectFactory.makeKeyword("SAVE-PARAMETERS");
        $kw473$LOAD_PARAMETERS = SubLObjectFactory.makeKeyword("LOAD-PARAMETERS");
        $kw474$RESET_PARAMETERS = SubLObjectFactory.makeKeyword("RESET-PARAMETERS");
        $kw475$STRENGTHEN_PARAMETERS = SubLObjectFactory.makeKeyword("STRENGTHEN-PARAMETERS");
        $str476$Unknown_inference_method__how_did = SubLObjectFactory.makeString("Unknown inference method (how did this happen?)");
        $str477$_A = SubLObjectFactory.makeString("~A");
        $str478$That_inference_is_no_longer_conti = SubLObjectFactory.makeString("That inference is no longer continuable.");
        $list479 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("PROPERTIES"), (SubLObject)cb_query.NIL);
        $list480 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INPUT-NAME"), (SubLObject)SubLObjectFactory.makeString("sentence"));
        $list481 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("LOCATION"), (SubLObject)SubLObjectFactory.makeString("New Inference"));
        $list482 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INPUT-NAME"), (SubLObject)SubLObjectFactory.makeString("non_exp_sentence"), (SubLObject)SubLObjectFactory.makeKeyword("REQUIRED?"), (SubLObject)cb_query.NIL);
        $list483 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("LOCATION"), (SubLObject)SubLObjectFactory.makeString("Pragmatics"));
        $sym484$CB_HANDLE_QUERY = SubLObjectFactory.makeSymbol("CB-HANDLE-QUERY");
        $sym485$_TRUTH = SubLObjectFactory.makeSymbol("?TRUTH");
        $const486$sentenceTruth = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("sentenceTruth"));
        $kw487$UNKNOWN = SubLObjectFactory.makeKeyword("UNKNOWN");
        $str488$_is_not_an_inference_parameter_ = SubLObjectFactory.makeString(" is not an inference parameter.");
        $list489 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("METHOD"), (SubLObject)SubLObjectFactory.makeSymbol("DATUM"), (SubLObject)SubLObjectFactory.makeSymbol("&OPTIONAL"), (SubLObject)SubLObjectFactory.makeSymbol("EXPLANATION"));
        $str490$No_value_was_entered_for__ = SubLObjectFactory.makeString("No value was entered for '");
        $str491$__ = SubLObjectFactory.makeString("'.");
        $str492$The_value_entered_for__ = SubLObjectFactory.makeString("The value entered for '");
        $str493$__was_not_valid_ = SubLObjectFactory.makeString("' was not valid.");
        $str494$No_choice_was_made_for__ = SubLObjectFactory.makeString("No choice was made for '");
        $str495$The_ID__ = SubLObjectFactory.makeString("The ID, ");
        $str496$__does_not_denote_a_CycLQuerySpec = SubLObjectFactory.makeString(", does not denote a CycLQuerySpecification.");
        $str497$The_query_spec_ID__ = SubLObjectFactory.makeString("The query spec ID, ");
        $str498$__does_not_denote_a_FORT_ = SubLObjectFactory.makeString(", does not denote a FORT.");
        $str499$__does_not_denote_a_KBContentTest = SubLObjectFactory.makeString(", does not denote a KBContentTest-FullySpecified.");
        $str500$The_test_spec_ID__ = SubLObjectFactory.makeString("The test spec ID, ");
        $kw501$BROWSABLE_ = SubLObjectFactory.makeKeyword("BROWSABLE?");
        $str502$Socratic_Query = SubLObjectFactory.makeString("Socratic Query");
        $str503$Similar_Query = SubLObjectFactory.makeString("Similar Query");
        $str504$_Query_Similar_ = SubLObjectFactory.makeString("[Query Similar]");
        $str505$cb_assertion_similar_query__A = SubLObjectFactory.makeString("cb-assertion-similar-query&~A");
        $kw506$ASSERTION_SIMILAR_QUERY = SubLObjectFactory.makeKeyword("ASSERTION-SIMILAR-QUERY");
        $sym507$CB_LINK_ASSERTION_SIMILAR_QUERY = SubLObjectFactory.makeSymbol("CB-LINK-ASSERTION-SIMILAR-QUERY");
        $str508$The_assertion_is_not_available_ = SubLObjectFactory.makeString("The assertion is not available.");
        $sym509$CB_ASSERTION_SIMILAR_QUERY = SubLObjectFactory.makeSymbol("CB-ASSERTION-SIMILAR-QUERY");
        $kw510$CUSTOM = SubLObjectFactory.makeKeyword("CUSTOM");
        $kw511$FORWARD = SubLObjectFactory.makeKeyword("FORWARD");
        $kw512$PROOF = SubLObjectFactory.makeKeyword("PROOF");
        $str513$Antecedent_Query = SubLObjectFactory.makeString("Antecedent Query");
        $str514$_Antecedent_Query_ = SubLObjectFactory.makeString("[Antecedent Query]");
        $str515$cb_assertion_antecedent_query__A = SubLObjectFactory.makeString("cb-assertion-antecedent-query&~A");
        $kw516$ANTECEDENT_QUERY = SubLObjectFactory.makeKeyword("ANTECEDENT-QUERY");
        $sym517$CB_LINK_ANTECEDENT_QUERY = SubLObjectFactory.makeSymbol("CB-LINK-ANTECEDENT-QUERY");
        $sym518$CB_ASSERTION_ANTECEDENT_QUERY = SubLObjectFactory.makeSymbol("CB-ASSERTION-ANTECEDENT-QUERY");
        $str519$Known_Extent_Query = SubLObjectFactory.makeString("Known Extent Query");
        $str520$_Known_Extent_Query_ = SubLObjectFactory.makeString("[Known Extent Query]");
        $sym521$RULE_ASSERTION_ = SubLObjectFactory.makeSymbol("RULE-ASSERTION?");
        $str522$cb_rule_known_extent_query__A = SubLObjectFactory.makeString("cb-rule-known-extent-query&~A");
        $kw523$RULE_KNOWN_EXTENT_QUERY = SubLObjectFactory.makeKeyword("RULE-KNOWN-EXTENT-QUERY");
        $sym524$CB_LINK_RULE_KNOWN_EXTENT_QUERY = SubLObjectFactory.makeSymbol("CB-LINK-RULE-KNOWN-EXTENT-QUERY");
        $str525$The_rule_is_not_available_ = SubLObjectFactory.makeString("The rule is not available.");
        $sym526$CB_RULE_KNOWN_EXTENT_QUERY = SubLObjectFactory.makeSymbol("CB-RULE-KNOWN-EXTENT-QUERY");
        $str527$Unknown_Extent_Query = SubLObjectFactory.makeString("Unknown Extent Query");
        $str528$_Unknown_Extent_Query_ = SubLObjectFactory.makeString("[Unknown Extent Query]");
        $str529$cb_rule_unknown_extent_query__A = SubLObjectFactory.makeString("cb-rule-unknown-extent-query&~A");
        $kw530$RULE_UNKNOWN_EXTENT_QUERY = SubLObjectFactory.makeKeyword("RULE-UNKNOWN-EXTENT-QUERY");
        $sym531$CB_LINK_RULE_UNKNOWN_EXTENT_QUERY = SubLObjectFactory.makeSymbol("CB-LINK-RULE-UNKNOWN-EXTENT-QUERY");
        $sym532$CB_RULE_UNKNOWN_EXTENT_QUERY = SubLObjectFactory.makeSymbol("CB-RULE-UNKNOWN-EXTENT-QUERY");
        $str533$KB_Query = SubLObjectFactory.makeString("KB Query");
        $str534$Parameter_Strengthened_Query = SubLObjectFactory.makeString("Parameter Strengthened Query");
        $const535$EverythingPSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC"));
        $list536 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FORT-SPEC"), (SubLObject)SubLObjectFactory.makeSymbol("ARG-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("PRED-SPEC"), (SubLObject)SubLObjectFactory.makeSymbol("&OPTIONAL"), (SubLObject)SubLObjectFactory.makeSymbol("MT-SPEC"));
        $str537$Could_not_determine_a_term_from__ = SubLObjectFactory.makeString("Could not determine a term from ~a");
        $str538$Could_not_determine_an_arg_from__ = SubLObjectFactory.makeString("Could not determine an arg from ~a");
        $sym539$CB_LITERAL_QUERY = SubLObjectFactory.makeSymbol("CB-LITERAL-QUERY");
        $sym540$CB_LQ = SubLObjectFactory.makeSymbol("CB-LQ");
        $list541 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?ARG0"), (SubLObject)SubLObjectFactory.makeSymbol("?ARG1"), (SubLObject)SubLObjectFactory.makeSymbol("?ARG2"), (SubLObject)SubLObjectFactory.makeSymbol("?ARG3"), (SubLObject)SubLObjectFactory.makeSymbol("?ARG4"), (SubLObject)SubLObjectFactory.makeSymbol("?ARG5"));
        $kw542$CB_LITERAL_QUERY = SubLObjectFactory.makeKeyword("CB-LITERAL-QUERY");
        $str543$cb_literal_query_html = SubLObjectFactory.makeString("cb-literal-query.html");
        $str544$Literal_Query = SubLObjectFactory.makeString("Literal Query");
        $kw545$SAM_AUTOCOMPLETE_CSS = SubLObjectFactory.makeKeyword("SAM-AUTOCOMPLETE-CSS");
        $kw546$SHA1 = SubLObjectFactory.makeKeyword("SHA1");
        $str547$reloadFrameButton = SubLObjectFactory.makeString("reloadFrameButton");
        $str548$button = SubLObjectFactory.makeString("button");
        $str549$reload = SubLObjectFactory.makeString("reload");
        $str550$Refresh_Frames = SubLObjectFactory.makeString("Refresh Frames");
        $kw551$SENTENCE_QUERY_SIMILAR = SubLObjectFactory.makeKeyword("SENTENCE-QUERY-SIMILAR");
        $str552$_Query_Tool_ = SubLObjectFactory.makeString("[Query Tool]");
        $str553$Last_query = SubLObjectFactory.makeString("Last query");
        $kw554$EXHAUST = SubLObjectFactory.makeKeyword("EXHAUST");
        $kw555$EXHAUST_TOTAL = SubLObjectFactory.makeKeyword("EXHAUST-TOTAL");
        $str556$Query_halted_because___ = SubLObjectFactory.makeString("Query halted because : ");
        $str557$No_answers_were_proven = SubLObjectFactory.makeString("No answers were proven");
        $str558$One_answer = SubLObjectFactory.makeString("One answer");
        $str559$_S_answers = SubLObjectFactory.makeString("~S answers");
        $str560$_for__S__ = SubLObjectFactory.makeString(" for ~S :");
        $str561$Substituted_Results__ = SubLObjectFactory.makeString("Substituted Results :");
        $str562$Could_not_determine_the_arity_of_ = SubLObjectFactory.makeString("Could not determine the arity of ~A in ~A");
        $kw563$BINDINGS = SubLObjectFactory.makeKeyword("BINDINGS");
        $kw564$HL = SubLObjectFactory.makeKeyword("HL");
        $kw565$RETURN = SubLObjectFactory.makeKeyword("RETURN");
        $kw566$POSITIVE_INFINITY = SubLObjectFactory.makeKeyword("POSITIVE-INFINITY");
        $float567$1_0 = (SubLFloat)SubLObjectFactory.makeDouble(1.0);
        $int568$64 = SubLObjectFactory.makeInteger(64);
        $sym569$GENERALITY_ESTIMATE_ = SubLObjectFactory.makeSymbol("GENERALITY-ESTIMATE>");
        $str570$Simulated_query_over_all_mts__ = SubLObjectFactory.makeString("Simulated query over all mts :");
        $const571$isa = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("isa"));
        $list572 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("?ARG2"));
        $str573$Answers_in_ = SubLObjectFactory.makeString("Answers in ");
        $str574$_ = SubLObjectFactory.makeString(":");
        $str575$__inherits_from = SubLObjectFactory.makeString(" (inherits from");
        $str576$_ = SubLObjectFactory.makeString(" ");
        $str577$_ = SubLObjectFactory.makeString(")");
        $str578$__ = SubLObjectFactory.makeString("( ");
        $sym579$GENERALITY_ESTIMATE_ = SubLObjectFactory.makeSymbol("GENERALITY-ESTIMATE<");
        $kw580$INDEX = SubLObjectFactory.makeKeyword("INDEX");
        $list581 = ConsesLow.list((SubLObject)cb_query.ONE_INTEGER, (SubLObject)cb_query.TWO_INTEGER);
        $kw582$LIKELY = SubLObjectFactory.makeKeyword("LIKELY");
        $kw583$POSSIBLE = SubLObjectFactory.makeKeyword("POSSIBLE");
        $kw584$INDEX_DISPLAY = SubLObjectFactory.makeKeyword("INDEX-DISPLAY");
        $kw585$NORMAL = SubLObjectFactory.makeKeyword("NORMAL");
        $kw586$KNOWN = SubLObjectFactory.makeKeyword("KNOWN");
        $kw587$POS = SubLObjectFactory.makeKeyword("POS");
        $const588$genlPreds = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genlPreds"));
        $str589$Current_query = SubLObjectFactory.makeString("Current query");
        $str590$_in_ = SubLObjectFactory.makeString(" in ");
        $str591$__ = SubLObjectFactory.makeString(" :");
        $int592$800 = SubLObjectFactory.makeInteger(800);
        $str593$cb_inference_progress_page__A__A = SubLObjectFactory.makeString("cb-inference-progress-page&~A&~A");
        $str594$inference_progress = SubLObjectFactory.makeString("inference_progress");
        $str595$100_ = SubLObjectFactory.makeString("100%");
        $kw596$ON = SubLObjectFactory.makeKeyword("ON");
        $kw597$OFF = SubLObjectFactory.makeKeyword("OFF");
        $str598$Inference__A_in_problem_store__A_ = SubLObjectFactory.makeString("Inference ~A in problem store ~A is no longer available.");
        $str599$Inference__A__A_Progress = SubLObjectFactory.makeString("Inference ~A.~A Progress");
        $kw600$DISABLED = SubLObjectFactory.makeKeyword("DISABLED");
        $sym601$CB_INFERENCE_PROGRESS_PAGE = SubLObjectFactory.makeSymbol("CB-INFERENCE-PROGRESS-PAGE");
        $str602$_Refresh_Page_ = SubLObjectFactory.makeString("[Refresh Page]");
        $str603$Status__ = SubLObjectFactory.makeString("Status :");
        $str604$_Halt_Auto_Refresh_ = SubLObjectFactory.makeString("[Halt Auto Refresh]");
        $kw605$AUTO_REFRESH_QUERY = SubLObjectFactory.makeKeyword("AUTO-REFRESH-QUERY");
        $str606$_Auto_Refresh_ = SubLObjectFactory.makeString("[Auto Refresh]");
        $kw607$INTERRUPT_INFERENCE = SubLObjectFactory.makeKeyword("INTERRUPT-INFERENCE");
        $str608$_Interrupt_ = SubLObjectFactory.makeString("[Interrupt]");
        $kw609$ABORT_INFERENCE = SubLObjectFactory.makeKeyword("ABORT-INFERENCE");
        $str610$_Abort_ = SubLObjectFactory.makeString("[Abort]");
        $str611$Max_time_remaining__ = SubLObjectFactory.makeString("Max time remaining: ");
        $str612$Time_over_budget__ = SubLObjectFactory.makeString("Time over budget: ");
        $str613$inference_answers = SubLObjectFactory.makeString("inference-answers");
        $str614$_ = SubLObjectFactory.makeString("(");
        $kw615$ALL_INFERENCE_ANSWERS = SubLObjectFactory.makeKeyword("ALL-INFERENCE-ANSWERS");
        $str616$_All_Answers_ = SubLObjectFactory.makeString("[All Answers]");
        $kw617$SAVE_INFERENCE_ANSWERS = SubLObjectFactory.makeKeyword("SAVE-INFERENCE-ANSWERS");
        $kw618$GRAPH_INFERENCE_ANSWERS = SubLObjectFactory.makeKeyword("GRAPH-INFERENCE-ANSWERS");
        $kw619$SAVE_INFERENCE_ANSWERS_AS_QUERIES = SubLObjectFactory.makeKeyword("SAVE-INFERENCE-ANSWERS-AS-QUERIES");
        $str620$_Save_Answers_as_Queries_ = SubLObjectFactory.makeString("[Save Answers as Queries]");
        $kw621$INFERENCE_ANSWER_TIMELINE = SubLObjectFactory.makeKeyword("INFERENCE-ANSWER-TIMELINE");
        $str622$_Timeline_ = SubLObjectFactory.makeString("[Timeline]");
        $sym623$CB_AUTO_REFRESH_QUERY = SubLObjectFactory.makeSymbol("CB-AUTO-REFRESH-QUERY");
        $str624$Starts_up_an_auto_refresh_loop_th = SubLObjectFactory.makeString("Starts up an auto-refresh loop that will automatically refresh\nthis page every few seconds, showing new inference answers (if any).");
        $str625$cb_auto_refresh_query__A__A = SubLObjectFactory.makeString("cb-auto-refresh-query&~A&~A");
        $sym626$CB_LINK_AUTO_REFRESH_QUERY = SubLObjectFactory.makeSymbol("CB-LINK-AUTO-REFRESH-QUERY");
        $str627$_More_____ = SubLObjectFactory.makeString("[More ...]");
        $str628$cb_all_inference_answers__A__A = SubLObjectFactory.makeString("cb-all-inference-answers&~A&~A");
        $sym629$CB_LINK_ALL_INFERENCE_ANSWERS = SubLObjectFactory.makeSymbol("CB-LINK-ALL-INFERENCE-ANSWERS");
        $str630$Inference__A__A = SubLObjectFactory.makeString("Inference ~A.~A");
        $sym631$CB_ALL_INFERENCE_ANSWERS = SubLObjectFactory.makeSymbol("CB-ALL-INFERENCE-ANSWERS");
        $str632$Inference_Answers = SubLObjectFactory.makeString("Inference Answers");
        $str633$_Examine_Inference_ = SubLObjectFactory.makeString("[Examine Inference]");
        $sym634$CB_FOCUS_INFERENCE = SubLObjectFactory.makeSymbol("CB-FOCUS-INFERENCE");
        $str635$Make_this_inference_the_focal_inf = SubLObjectFactory.makeString("Make this inference the focal inference,\nso that it can be examined in more detail.");
        $str636$cb_focus_inference__A__A = SubLObjectFactory.makeString("cb-focus-inference&~A&~A");
        $sym637$CB_LINK_FOCUS_INFERENCE = SubLObjectFactory.makeSymbol("CB-LINK-FOCUS-INFERENCE");
        $sym638$CB_DEFOCUS_INFERENCE = SubLObjectFactory.makeSymbol("CB-DEFOCUS-INFERENCE");
        $str639$Make_this_inference_no_longer_the = SubLObjectFactory.makeString("Make this inference no longer the focal inference,\nand demote it into the 'Other Inferences' section.");
        $str640$cb_defocus_inference__A__A = SubLObjectFactory.makeString("cb-defocus-inference&~A&~A");
        $sym641$CB_LINK_DEFOCUS_INFERENCE = SubLObjectFactory.makeSymbol("CB-LINK-DEFOCUS-INFERENCE");
        $sym642$CB_INTERRUPT_INFERENCE = SubLObjectFactory.makeSymbol("CB-INTERRUPT-INFERENCE");
        $str643$cb_interrupt_inference__A__A = SubLObjectFactory.makeString("cb-interrupt-inference&~A&~A");
        $sym644$CB_LINK_INTERRUPT_INFERENCE = SubLObjectFactory.makeSymbol("CB-LINK-INTERRUPT-INFERENCE");
        $sym645$CB_ABORT_INFERENCE = SubLObjectFactory.makeSymbol("CB-ABORT-INFERENCE");
        $str646$cb_abort_inference__A__A = SubLObjectFactory.makeString("cb-abort-inference&~A&~A");
        $sym647$CB_LINK_ABORT_INFERENCE = SubLObjectFactory.makeSymbol("CB-LINK-ABORT-INFERENCE");
        $sym648$CB_FORGET_INFERENCE = SubLObjectFactory.makeSymbol("CB-FORGET-INFERENCE");
        $str649$_Forget_ = SubLObjectFactory.makeString("[Forget]");
        $str650$cb_forget_inference__A__A = SubLObjectFactory.makeString("cb-forget-inference&~A&~A");
        $kw651$FORGET_INFERENCE = SubLObjectFactory.makeKeyword("FORGET-INFERENCE");
        $sym652$CB_LINK_FORGET_INFERENCE = SubLObjectFactory.makeSymbol("CB-LINK-FORGET-INFERENCE");
        $sym653$CB_FORGET_ALL_INFERENCES = SubLObjectFactory.makeSymbol("CB-FORGET-ALL-INFERENCES");
        $str654$_Forget_All_ = SubLObjectFactory.makeString("[Forget All]");
        $str655$cb_forget_all_inferences = SubLObjectFactory.makeString("cb-forget-all-inferences");
        $kw656$FORGET_ALL_INFERENCES = SubLObjectFactory.makeKeyword("FORGET-ALL-INFERENCES");
        $sym657$CB_LINK_FORGET_ALL_INFERENCES = SubLObjectFactory.makeSymbol("CB-LINK-FORGET-ALL-INFERENCES");
        $sym658$CB_FORGET_ALL_OTHER_INFERENCES = SubLObjectFactory.makeSymbol("CB-FORGET-ALL-OTHER-INFERENCES");
        $str659$cb_forget_all_other_inferences = SubLObjectFactory.makeString("cb-forget-all-other-inferences");
        $kw660$FORGET_ALL_OTHER_INFERENCES = SubLObjectFactory.makeKeyword("FORGET-ALL-OTHER-INFERENCES");
        $sym661$CB_LINK_FORGET_ALL_OTHER_INFERENCES = SubLObjectFactory.makeSymbol("CB-LINK-FORGET-ALL-OTHER-INFERENCES");
        $str662$Inference_heuristics_are_being_re = SubLObjectFactory.makeString("Inference heuristics are being reinforced.");
        $int663$2000 = SubLObjectFactory.makeInteger(2000);
        $sym664$CB_REINFORCE_INFERENCE = SubLObjectFactory.makeSymbol("CB-REINFORCE-INFERENCE");
        $str665$Reinforce_the_inference_heuristic = SubLObjectFactory.makeString("Reinforce the inference heuristics based on this inference,\nso as to help answer similar inferences in the future.");
        $str666$cb_reinforce_inference__A__A = SubLObjectFactory.makeString("cb-reinforce-inference&~A&~A");
        $sym667$CB_LINK_REINFORCE_INFERENCE = SubLObjectFactory.makeSymbol("CB-LINK-REINFORCE-INFERENCE");
        $sym668$CB_DESTROY_INFERENCE = SubLObjectFactory.makeSymbol("CB-DESTROY-INFERENCE");
        $str669$Destroy_this_inference__reclaimin = SubLObjectFactory.makeString("Destroy this inference, reclaiming the memory used to store it.\nOnce an inference is destroyed, it can no longer be examined or continued.");
        $str670$cb_destroy_inference__A__A = SubLObjectFactory.makeString("cb-destroy-inference&~A&~A");
        $sym671$CB_LINK_DESTROY_INFERENCE = SubLObjectFactory.makeSymbol("CB-LINK-DESTROY-INFERENCE");
        $sym672$CB_DESTROY_ALL_INFERENCES = SubLObjectFactory.makeSymbol("CB-DESTROY-ALL-INFERENCES");
        $str673$Destroy_all_inferences__including = SubLObjectFactory.makeString("Destroy all inferences (including the focal inference),\nreclaiming the memory used to store them.");
        $str674$cb_destroy_all_inferences = SubLObjectFactory.makeString("cb-destroy-all-inferences");
        $kw675$DESTROY_ALL_INFERENCES = SubLObjectFactory.makeKeyword("DESTROY-ALL-INFERENCES");
        $sym676$CB_LINK_DESTROY_ALL_INFERENCES = SubLObjectFactory.makeSymbol("CB-LINK-DESTROY-ALL-INFERENCES");
        $list677 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("&OPTIONAL"), (SubLObject)SubLObjectFactory.makeSymbol("FOCAL-INFERENCES"), (SubLObject)SubLObjectFactory.makeSymbol("&REST"), (SubLObject)SubLObjectFactory.makeSymbol("OTHER-INFERENCES"));
        $sym678$CB_DESTROY_ALL_OTHER_INFERENCES = SubLObjectFactory.makeSymbol("CB-DESTROY-ALL-OTHER-INFERENCES");
        $str679$Destroy_all_inferences_other_than = SubLObjectFactory.makeString("Destroy all inferences other than the focal inference,\nreclaiming the memory used to store them.");
        $str680$cb_destroy_all_other_inferences = SubLObjectFactory.makeString("cb-destroy-all-other-inferences");
        $sym681$CB_LINK_DESTROY_ALL_OTHER_INFERENCES = SubLObjectFactory.makeSymbol("CB-LINK-DESTROY-ALL-OTHER-INFERENCES");
        $str682$Convert_this_inference_to_an_equi = SubLObjectFactory.makeString("Convert this inference to an equivalent SubL query (using new-cyc-query). Leads to SubL Interactor.");
        $str683$cb_inference_to_subl_query__A__A = SubLObjectFactory.makeString("cb-inference-to-subl-query&~A&~A");
        $sym684$CB_LINK_INFERENCE_TO_SUBL_QUERY = SubLObjectFactory.makeSymbol("CB-LINK-INFERENCE-TO-SUBL-QUERY");
        $str685$input_string = SubLObjectFactory.makeString("input-string");
        $sym686$CB_INFERENCE_TO_SUBL_QUERY = SubLObjectFactory.makeSymbol("CB-INFERENCE-TO-SUBL-QUERY");
        $str687$_Graph_Answers_ = SubLObjectFactory.makeString("[Graph Answers]");
        $str688$cb_graph_inference_answers__A__A = SubLObjectFactory.makeString("cb-graph-inference-answers&~A&~A");
        $str689$window_open__ = SubLObjectFactory.makeString("window.open('");
        $str690$__ = SubLObjectFactory.makeString("',");
        $str691$__A_ = SubLObjectFactory.makeString("'~A'");
        $str692$null = SubLObjectFactory.makeString("null");
        $str693$___A____ = SubLObjectFactory.makeString(",'~A'); ");
        $str694$return_false_ = SubLObjectFactory.makeString("return false;");
        $sym695$CB_LINK_GRAPH_INFERENCE_ANSWERS = SubLObjectFactory.makeSymbol("CB-LINK-GRAPH-INFERENCE-ANSWERS");
        $sym696$CB_GRAPH_INFERENCE_ANSWERS = SubLObjectFactory.makeSymbol("CB-GRAPH-INFERENCE-ANSWERS");
        $kw697$SIGNATURE = SubLObjectFactory.makeKeyword("SIGNATURE");
        $kw698$INFERENCE_STORE_ID = SubLObjectFactory.makeKeyword("INFERENCE-STORE-ID");
        $kw699$INFERENCE_ID = SubLObjectFactory.makeKeyword("INFERENCE-ID");
        $str700$cb_graph_inference_answers_window = SubLObjectFactory.makeString("cb-graph-inference-answers-window");
        $sym701$CB_GRAPH_INFERENCE_ANSWERS_WINDOW = SubLObjectFactory.makeSymbol("CB-GRAPH-INFERENCE-ANSWERS-WINDOW");
        $kw702$BBF_INFERENCE_ANSWERS = SubLObjectFactory.makeKeyword("BBF-INFERENCE-ANSWERS");
        $kw703$BUILDER_FN = SubLObjectFactory.makeKeyword("BUILDER-FN");
        $kw704$PARAMS = SubLObjectFactory.makeKeyword("PARAMS");
        $str705$store_id = SubLObjectFactory.makeString("store-id");
        $str706$inference_id = SubLObjectFactory.makeString("inference-id");
        $str707$_ans_format = SubLObjectFactory.makeString(":ans-format");
        $str708$_destination = SubLObjectFactory.makeString(":destination");
        $str709$_filename = SubLObjectFactory.makeString(":filename");
        $str710$cycl_prefix = SubLObjectFactory.makeString("cycl-prefix");
        $kw711$FILE = SubLObjectFactory.makeKeyword("FILE");
        $str712$Please_enter_a_filename_to_save_t = SubLObjectFactory.makeString("Please enter a filename to save the results to.");
        $kw713$TAB_DELIMITED = SubLObjectFactory.makeKeyword("TAB-DELIMITED");
        $kw714$XML = SubLObjectFactory.makeKeyword("XML");
        $kw715$ALCHEMY = SubLObjectFactory.makeKeyword("ALCHEMY");
        $sym716$CATCH_ERROR_MESSAGE_HANDLER = SubLObjectFactory.makeSymbol("CATCH-ERROR-MESSAGE-HANDLER");
        $str717$Attempt_to_save_answers_failed___ = SubLObjectFactory.makeString("Attempt to save answers failed:~%~%~A");
        $kw718$CUSTOM_XML = SubLObjectFactory.makeKeyword("CUSTOM-XML");
        $str719$_spec = SubLObjectFactory.makeString(":spec");
        $str720$Error__Operation_failed = SubLObjectFactory.makeString("Error: Operation failed");
        $str721$The_query_results_were_not_transf = SubLObjectFactory.makeString("The query results were not transformed into XML. \n                          Please check the input XML specifications.");
        $str722$Back = SubLObjectFactory.makeString("Back");
        $str723$Error__Invalid_input = SubLObjectFactory.makeString("Error: Invalid input");
        $str724$Please_select_one_of_the_output_f = SubLObjectFactory.makeString("Please select one of the output formats for saving the \n                      query results.");
        $sym725$CB_SAVE_INFERENCE_ANSWERS_INT = SubLObjectFactory.makeSymbol("CB-SAVE-INFERENCE-ANSWERS-INT");
        $kw726$HTML_STREAM = SubLObjectFactory.makeKeyword("HTML-STREAM");
        $kw727$OUTPUT = SubLObjectFactory.makeKeyword("OUTPUT");
        $str728$Answers_were_saved_to_ = SubLObjectFactory.makeString("Answers were saved to ");
        $kw729$CB_SAVE_INFERENCE_ANSWERS = SubLObjectFactory.makeKeyword("CB-SAVE-INFERENCE-ANSWERS");
        $str730$cb_save_inference_answers_html = SubLObjectFactory.makeString("cb-save-inference-answers.html");
        $str731$Save_Query_Results_as_Text_XML = SubLObjectFactory.makeString("Save Query Results as Text/XML");
        $str732$cb_save_inference_answers_int = SubLObjectFactory.makeString("cb-save-inference-answers-int");
        $str733$Save_query_results_as_ = SubLObjectFactory.makeString("Save query results as:");
        $str734$_tab_delimited = SubLObjectFactory.makeString(":tab-delimited");
        $str735$Text = SubLObjectFactory.makeString("Text");
        $str736$_xml = SubLObjectFactory.makeString(":xml");
        $str737$Default_XML = SubLObjectFactory.makeString("Default XML");
        $str738$_custom_xml = SubLObjectFactory.makeString(":custom-xml");
        $str739$User_defined_XML = SubLObjectFactory.makeString("User-defined XML");
        $str740$_alchemy = SubLObjectFactory.makeString(":alchemy");
        $str741$Alchemy_text__bindings_must_be_se = SubLObjectFactory.makeString("Alchemy text (bindings must be sentences)");
        $str742$Destination_ = SubLObjectFactory.makeString("Destination:");
        $str743$_html_stream = SubLObjectFactory.makeString(":html-stream");
        $str744$Show_results_in_this_browser = SubLObjectFactory.makeString("Show results in this browser");
        $str745$_file = SubLObjectFactory.makeString(":file");
        $str746$Save_results_in_file_ = SubLObjectFactory.makeString("Save results in file:");
        $kw747$NBSP = SubLObjectFactory.makeKeyword("NBSP");
        $int748$60 = SubLObjectFactory.makeInteger(60);
        $str749$Clear = SubLObjectFactory.makeString("Clear");
        $str750$Optional_Parameters_ = SubLObjectFactory.makeString("Optional Parameters:");
        $str751$cycl_prefix_enabled = SubLObjectFactory.makeString("cycl-prefix-enabled");
        $str752$Include______prefix_on_CycL_terms = SubLObjectFactory.makeString("Include '#$' prefix on CycL terms");
        $str753$Please_enter_XML_specifications_i = SubLObjectFactory.makeString("Please enter XML specifications if you selected ");
        $str754$Submit = SubLObjectFactory.makeString("Submit");
        $sym755$CB_SAVE_INFERENCE_ANSWERS = SubLObjectFactory.makeSymbol("CB-SAVE-INFERENCE-ANSWERS");
        $str756$_Save_Answers_ = SubLObjectFactory.makeString("[Save Answers]");
        $str757$cb_save_inference_answers__A__A = SubLObjectFactory.makeString("cb-save-inference-answers&~A&~A");
        $sym758$CB_LINK_SAVE_INFERENCE_ANSWERS = SubLObjectFactory.makeSymbol("CB-LINK-SAVE-INFERENCE-ANSWERS");
        $kw759$STORE_ID = SubLObjectFactory.makeKeyword("STORE-ID");
        $sym760$CB_SAVE_INFERENCE_ANSWERS_AS_QUERIES = SubLObjectFactory.makeSymbol("CB-SAVE-INFERENCE-ANSWERS-AS-QUERIES");
        $str761$Save_Inference_Answers_as_Queries = SubLObjectFactory.makeString("Save Inference Answers as Queries");
        $kw762$SUBMIT = SubLObjectFactory.makeKeyword("SUBMIT");
        $kw763$EL_VARIABLES = SubLObjectFactory.makeKeyword("EL-VARIABLES");
        $str764$Please_select_one_or_more_EL_vari = SubLObjectFactory.makeString("Please select one or more EL variables");
        $kw765$ANSWER_IDS = SubLObjectFactory.makeKeyword("ANSWER-IDS");
        $str766$Please_select_one_or_more_answers = SubLObjectFactory.makeString("Please select one or more answers");
        $sym767$_EXIT = SubLObjectFactory.makeSymbol("%EXIT");
        $str768$cb_save_inference_answers_as_quer = SubLObjectFactory.makeString("cb-save-inference-answers-as-queries");
        $str769$Inference__A_in_problem_store__A_ = SubLObjectFactory.makeString("Inference ~A in problem store ~A has no answers.");
        $str770$Inference__A_in_problem_store__A_ = SubLObjectFactory.makeString("Inference ~A in problem store ~A hos no free variables.");
        $str771$Which_variables_should_be_filled_ = SubLObjectFactory.makeString("Which variables should be filled in with bindings in the saved queries?");
        $str772$Which_answers_should_be_used_to_g = SubLObjectFactory.makeString("Which answers should be used to generate queries?");
        $str773$Answer = SubLObjectFactory.makeString("Answer");
        $sym774$MAKE_EL_VAR = SubLObjectFactory.makeSymbol("MAKE-EL-VAR");
        $str775$Reifying_query_for__ = SubLObjectFactory.makeString("Reifying query for: ");
        $str776$query_about = SubLObjectFactory.makeString("query about");
        $str777$New_Constant__ = SubLObjectFactory.makeString("New Constant: ");
        $str778$cb_save_inference_answers_as_quer = SubLObjectFactory.makeString("cb-save-inference-answers-as-queries&~A&~A");
        $sym779$CB_LINK_SAVE_INFERENCE_ANSWERS_AS_QUERIES = SubLObjectFactory.makeSymbol("CB-LINK-SAVE-INFERENCE-ANSWERS-AS-QUERIES");
        $str780$Inference__A__A_Answer_Timeline = SubLObjectFactory.makeString("Inference ~A.~A Answer Timeline");
        $str781$Inference_Answer_Timeline = SubLObjectFactory.makeString("Inference Answer Timeline");
        $str782$_for_ = SubLObjectFactory.makeString(" for ");
        $list783 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("IMAGE-WIDTH"), (SubLObject)SubLObjectFactory.makeInteger(600), (SubLObject)SubLObjectFactory.makeKeyword("IMAGE-HEIGHT"), (SubLObject)SubLObjectFactory.makeInteger(450), (SubLObject)SubLObjectFactory.makeKeyword("PLOT-COLOR"), (SubLObject)SubLObjectFactory.makeString("#0000ff"));
        $sym784$CB_INFERENCE_ANSWER_TIMELINE = SubLObjectFactory.makeSymbol("CB-INFERENCE-ANSWER-TIMELINE");
        $str785$_Answer_Timeline_ = SubLObjectFactory.makeString("[Answer Timeline]");
        $str786$cb_inference_answer_timeline__A__ = SubLObjectFactory.makeString("cb-inference-answer-timeline&~A&~A");
        $sym787$CB_LINK_INFERENCE_ANSWER_TIMELINE = SubLObjectFactory.makeSymbol("CB-LINK-INFERENCE-ANSWER-TIMELINE");
        $sym788$DOUBLE_FLOAT = SubLObjectFactory.makeSymbol("DOUBLE-FLOAT");
        $str789$http___chart_apis_google_com_char = SubLObjectFactory.makeString("http://chart.apis.google.com/chart?");
        $str790$cht_s = SubLObjectFactory.makeString("cht=s");
        $str791$_chs_600x450 = SubLObjectFactory.makeString("&chs=600x450");
        $str792$Inference_ = SubLObjectFactory.makeString("Inference ");
        $str793$_Answer_Timeline = SubLObjectFactory.makeString(" Answer Timeline");
        $str794$_chtt__A = SubLObjectFactory.makeString("&chtt=~A");
        $str795$_chds__S__S__S__S = SubLObjectFactory.makeString("&chds=~S,~S,~S,~S");
        $str796$_chxt_x_y_x_y = SubLObjectFactory.makeString("&chxt=x,y,x,y");
        $str797$_chxr_0__S__S_1__S__S = SubLObjectFactory.makeString("&chxr=0,~S,~S|1,~S,~S");
        $str798$milliseconds = SubLObjectFactory.makeString("milliseconds");
        $str799$seconds = SubLObjectFactory.makeString("seconds");
        $str800$Time__ = SubLObjectFactory.makeString("Time (");
        $str801$Answer__ = SubLObjectFactory.makeString("Answer #");
        $str802$_chxl_2___A_3___A = SubLObjectFactory.makeString("&chxl=2:|~A|3:|~A");
        $str803$_chxp_2__S_3__S = SubLObjectFactory.makeString("&chxp=2,~S|3,~S");
        $int804$50 = SubLObjectFactory.makeInteger(50);
        $str805$_chd_t_ = SubLObjectFactory.makeString("&chd=t:");
        $str806$_ = SubLObjectFactory.makeString(",");
        $int807$450 = SubLObjectFactory.makeInteger(450);
        $int808$600 = SubLObjectFactory.makeInteger(600);
        $int809$120 = SubLObjectFactory.makeInteger(120);
        $sym810$_ = SubLObjectFactory.makeSymbol("<");
        $sym811$SECOND = SubLObjectFactory.makeSymbol("SECOND");
        $list812 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("STORE-ID-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("INFERENCE-ID-STRING"), (SubLObject)SubLObjectFactory.makeSymbol("MODE-STRING"));
        $kw813$SOME = SubLObjectFactory.makeKeyword("SOME");
        $str814$Unexpected_mode__A = SubLObjectFactory.makeString("Unexpected mode ~A");
        $sym815$CB_INFERENCE_STRENGTHEN_PROPERTIES = SubLObjectFactory.makeSymbol("CB-INFERENCE-STRENGTHEN-PROPERTIES");
        $str816$_Strengthen_Parameters_ = SubLObjectFactory.makeString("[Strengthen Parameters]");
        $list817 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ALL"), (SubLObject)SubLObjectFactory.makeKeyword("SOME"));
        $str818$_S_was_an_invalid_mode = SubLObjectFactory.makeString("~S was an invalid mode");
        $str819$cb_inference_strengthen_propertie = SubLObjectFactory.makeString("cb-inference-strengthen-properties&~A&~A&~S");
        $kw820$INFERENCE_STRENGTHEN_PROPERTIES = SubLObjectFactory.makeKeyword("INFERENCE-STRENGTHEN-PROPERTIES");
        $sym821$CB_LINK_INFERENCE_STRENGTHEN_PROPERTIES = SubLObjectFactory.makeSymbol("CB-LINK-INFERENCE-STRENGTHEN-PROPERTIES");
        $sym822$QUERY_PROPERTY_P = SubLObjectFactory.makeSymbol("QUERY-PROPERTY-P");
        $list823 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("&OPTIONAL"), (SubLObject)SubLObjectFactory.makeSymbol("VERBOSITY-STRING"));
        $kw824$TERSE = SubLObjectFactory.makeKeyword("TERSE");
        $sym825$CB_TRANSFORMATION_RULE_STATISTICS = SubLObjectFactory.makeSymbol("CB-TRANSFORMATION-RULE-STATISTICS");
        $str826$Experience_Control_Panel = SubLObjectFactory.makeString("Experience Control Panel");
        $str827$cb_handle_transformation_rule_sta = SubLObjectFactory.makeString("cb-handle-transformation-rule-statistics");
        $kw828$TRANSFORMATION_RULE_STATISTICS = SubLObjectFactory.makeKeyword("TRANSFORMATION-RULE-STATISTICS");
        $kw829$CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS = SubLObjectFactory.makeKeyword("CLEAR-ALL-TRANSFORMATION-RULE-STATISTICS");
        $str830$_Clear_All_Experience_ = SubLObjectFactory.makeString("[Clear All Experience]");
        $str831$Load_experience_from_file___ = SubLObjectFactory.makeString("Load experience from file : ");
        $str832$load_filename = SubLObjectFactory.makeString("load_filename");
        $str833$Load_Experience = SubLObjectFactory.makeString("Load Experience");
        $str834$load = SubLObjectFactory.makeString("load");
        $str835$Save_experience_to_file___ = SubLObjectFactory.makeString("Save experience to file : ");
        $str836$save_filename = SubLObjectFactory.makeString("save_filename");
        $str837$Save_Experience = SubLObjectFactory.makeString("Save Experience");
        $str838$save = SubLObjectFactory.makeString("save");
        $str839$Transformation_Rule_Statistics = SubLObjectFactory.makeString("Transformation Rule Statistics");
        $str840$cb_transformation_rule_statistics = SubLObjectFactory.makeString("cb-transformation-rule-statistics&~S");
        $sym841$CB_LINK_TRANSFORMATION_RULE_STATISTICS = SubLObjectFactory.makeSymbol("CB-LINK-TRANSFORMATION-RULE-STATISTICS");
        $list842 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INFERENCE"));
        $str843$cb_transformation_rule_statistics = SubLObjectFactory.makeString("cb-transformation-rule-statistics");
        $kw844$HISTORICAL_UTILITY = SubLObjectFactory.makeKeyword("HISTORICAL-UTILITY");
        $str845$Gather_during_inference___ = SubLObjectFactory.makeString("Gather during inference : ");
        $kw846$DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = SubLObjectFactory.makeKeyword("DISABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $kw847$ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = SubLObjectFactory.makeKeyword("ENABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $str848$_Disable_ = SubLObjectFactory.makeString("[Disable]");
        $str849$_Enable_ = SubLObjectFactory.makeString("[Enable]");
        $str850$Use_for_sorting_during_inference_ = SubLObjectFactory.makeString("Use for sorting during inference : ");
        $kw851$DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = SubLObjectFactory.makeKeyword("DISABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $kw852$ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = SubLObjectFactory.makeKeyword("ENABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $str853$Prune_never_before_successful_rul = SubLObjectFactory.makeString("Prune never-before-successful rules during inference : ");
        $kw854$DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = SubLObjectFactory.makeKeyword("DISABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $kw855$ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = SubLObjectFactory.makeKeyword("ENABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $str856$No_rules = SubLObjectFactory.makeString("No rules");
        $str857$Experience_files_that_have_been_l = SubLObjectFactory.makeString("Experience files that have been loaded into this image:");
        $str858$No_experience_files_have_been_loa = SubLObjectFactory.makeString("No experience files have been loaded into this image.");
        $str859$Experience_files_that_have_been_r = SubLObjectFactory.makeString("Experience files that have been received by this image:");
        $str860$No_experience_files_have_been_rec = SubLObjectFactory.makeString("No experience files have been received by this image.");
        $str861$Total_experience_ = SubLObjectFactory.makeString("Total experience:");
        $str862$_S_rule_considerations = SubLObjectFactory.makeString("~S rule considerations");
        $str863$_S_rule_successes = SubLObjectFactory.makeString("~S rule successes");
        $str864$_S_rules = SubLObjectFactory.makeString("~S rules");
        $str865$_see_below_ = SubLObjectFactory.makeString("(see below)");
        $str866$_Show_Rule_Details_ = SubLObjectFactory.makeString("[Show Rule Details]");
        $str867$Experience_acquired_by_this_image = SubLObjectFactory.makeString("Experience acquired by this image's inferences:");
        $kw868$IMAGE_SPECIFIC = SubLObjectFactory.makeKeyword("IMAGE-SPECIFIC");
        $str869$Experience_received_from_other_im = SubLObjectFactory.makeString("Experience received from other images:");
        $list870 = ConsesLow.list(new SubLObject[] { ConsesLow.cons((SubLObject)SubLObjectFactory.makeInteger(80), (SubLObject)cb_query.ZERO_INTEGER), ConsesLow.cons((SubLObject)SubLObjectFactory.makeInteger(60), (SubLObject)cb_query.ZERO_INTEGER), ConsesLow.cons((SubLObject)SubLObjectFactory.makeInteger(40), (SubLObject)cb_query.ZERO_INTEGER), ConsesLow.cons((SubLObject)cb_query.TWENTY_INTEGER, (SubLObject)cb_query.ZERO_INTEGER), ConsesLow.cons((SubLObject)cb_query.ZERO_INTEGER, (SubLObject)cb_query.ZERO_INTEGER), ConsesLow.cons((SubLObject)SubLObjectFactory.makeInteger(-20), (SubLObject)cb_query.ZERO_INTEGER), ConsesLow.cons((SubLObject)SubLObjectFactory.makeInteger(-40), (SubLObject)cb_query.ZERO_INTEGER), ConsesLow.cons((SubLObject)SubLObjectFactory.makeInteger(-60), (SubLObject)cb_query.ZERO_INTEGER), ConsesLow.cons((SubLObject)SubLObjectFactory.makeInteger(-80), (SubLObject)cb_query.ZERO_INTEGER), ConsesLow.cons((SubLObject)SubLObjectFactory.makeInteger(-100), (SubLObject)cb_query.ZERO_INTEGER) });
        $sym871$__ = SubLObjectFactory.makeSymbol(">=");
        $sym872$CAR = SubLObjectFactory.makeSymbol("CAR");
        $str873$Rule_Utility_Histogram = SubLObjectFactory.makeString("Rule Utility Histogram");
        $kw874$RIGHT = SubLObjectFactory.makeKeyword("RIGHT");
        $str875$Utility = SubLObjectFactory.makeString("Utility");
        $str876$Count = SubLObjectFactory.makeString("Count");
        $str877$Percent = SubLObjectFactory.makeString("Percent");
        $sym878$CDR = SubLObjectFactory.makeSymbol("CDR");
        $list879 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("BUCKET"), (SubLObject)SubLObjectFactory.makeSymbol("BUCKET-COUNT"));
        $str880$_A__ = SubLObjectFactory.makeString("~A %");
        $int881$40 = SubLObjectFactory.makeInteger(40);
        $str882$_S_rules_with_image_specific_expe = SubLObjectFactory.makeString("~S rules with image-specific experience, sorted by ~A");
        $str883$_Hide_Rule_Details_ = SubLObjectFactory.makeString("[Hide Rule Details]");
        $str884$_S_rules__sorted_by__A = SubLObjectFactory.makeString("~S rules, sorted by ~A");
        $str885$__S__S___S_____utility____S = SubLObjectFactory.makeString(" ~S/~S (~S %)  utility : ~S");
        $str886$__S_utility = SubLObjectFactory.makeString(" ~S utility");
        $str887$__never_considered = SubLObjectFactory.makeString(", never considered");
        $str888$__due_to__S___success___S__S_ = SubLObjectFactory.makeString(", due to ~S % success (~S/~S)");
        $str889$__ = SubLObjectFactory.makeString(": ");
        $str890$_mode_is_the_least_powerful_infer = SubLObjectFactory.makeString(" mode is the least powerful inference mode in which this rule will be used.");
        $kw891$SHALLOW = SubLObjectFactory.makeKeyword("SHALLOW");
        $kw892$EXTENDED = SubLObjectFactory.makeKeyword("EXTENDED");
        $kw893$MAXIMAL = SubLObjectFactory.makeKeyword("MAXIMAL");
        $kw894$BLUE = SubLObjectFactory.makeKeyword("BLUE");
        $str895$Shallow = SubLObjectFactory.makeString("Shallow");
        $kw896$MAGENTA = SubLObjectFactory.makeKeyword("MAGENTA");
        $str897$Extended = SubLObjectFactory.makeString("Extended");
        $str898$Maximal = SubLObjectFactory.makeString("Maximal");
        $sym899$CB_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = SubLObjectFactory.makeSymbol("CB-DISABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $str900$cb_disable_strategic_heuristic_ru = SubLObjectFactory.makeString("cb-disable-strategic-heuristic-rule-historical-utility");
        $sym901$CB_LINK_DISABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = SubLObjectFactory.makeSymbol("CB-LINK-DISABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $sym902$CB_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = SubLObjectFactory.makeSymbol("CB-ENABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $str903$cb_enable_strategic_heuristic_rul = SubLObjectFactory.makeString("cb-enable-strategic-heuristic-rule-historical-utility");
        $sym904$CB_LINK_ENABLE_STRATEGIC_HEURISTIC_RULE_HISTORICAL_UTILITY = SubLObjectFactory.makeSymbol("CB-LINK-ENABLE-STRATEGIC-HEURISTIC-RULE-HISTORICAL-UTILITY");
        $sym905$CB_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = SubLObjectFactory.makeSymbol("CB-DISABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $str906$cb_disable_transformation_rule_st = SubLObjectFactory.makeString("cb-disable-transformation-rule-statistics-update");
        $sym907$CB_LINK_DISABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = SubLObjectFactory.makeSymbol("CB-LINK-DISABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $sym908$CB_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = SubLObjectFactory.makeSymbol("CB-ENABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $str909$cb_enable_transformation_rule_sta = SubLObjectFactory.makeString("cb-enable-transformation-rule-statistics-update");
        $sym910$CB_LINK_ENABLE_TRANSFORMATION_RULE_STATISTICS_UPDATE = SubLObjectFactory.makeSymbol("CB-LINK-ENABLE-TRANSFORMATION-RULE-STATISTICS-UPDATE");
        $sym911$CB_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = SubLObjectFactory.makeSymbol("CB-DISABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $str912$cb_disable_transformation_rule_hi = SubLObjectFactory.makeString("cb-disable-transformation-rule-historical-success-pruning");
        $sym913$CB_LINK_DISABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = SubLObjectFactory.makeSymbol("CB-LINK-DISABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $sym914$CB_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = SubLObjectFactory.makeSymbol("CB-ENABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $str915$cb_enable_transformation_rule_his = SubLObjectFactory.makeString("cb-enable-transformation-rule-historical-success-pruning");
        $sym916$CB_LINK_ENABLE_TRANSFORMATION_RULE_HISTORICAL_SUCCESS_PRUNING = SubLObjectFactory.makeSymbol("CB-LINK-ENABLE-TRANSFORMATION-RULE-HISTORICAL-SUCCESS-PRUNING");
        $list917 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("ASSERTION-ID"));
        $str918$Could_not_determine_an_assertion_ = SubLObjectFactory.makeString("Could not determine an assertion from ~a");
        $str919$The_transformation_statistics_hav = SubLObjectFactory.makeString("The transformation statistics have been cleared.");
        $sym920$CB_CLEAR_TRANSFORMATION_RULE_STATISTICS = SubLObjectFactory.makeSymbol("CB-CLEAR-TRANSFORMATION-RULE-STATISTICS");
        $str921$_Clear_ = SubLObjectFactory.makeString("[Clear]");
        $str922$cb_clear_transformation_rule_stat = SubLObjectFactory.makeString("cb-clear-transformation-rule-statistics&~A");
        $kw923$CLEAR_TRANSFORMATION_RULE_STATISTICS = SubLObjectFactory.makeKeyword("CLEAR-TRANSFORMATION-RULE-STATISTICS");
        $sym924$CB_LINK_CLEAR_TRANSFORMATION_RULE_STATISTICS = SubLObjectFactory.makeSymbol("CB-LINK-CLEAR-TRANSFORMATION-RULE-STATISTICS");
        $sym925$CB_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS = SubLObjectFactory.makeSymbol("CB-CLEAR-ALL-TRANSFORMATION-RULE-STATISTICS");
        $str926$_Clear_All_ = SubLObjectFactory.makeString("[Clear All]");
        $str927$cb_clear_all_transformation_rule_ = SubLObjectFactory.makeString("cb-clear-all-transformation-rule-statistics");
        $sym928$CB_LINK_CLEAR_ALL_TRANSFORMATION_RULE_STATISTICS = SubLObjectFactory.makeSymbol("CB-LINK-CLEAR-ALL-TRANSFORMATION-RULE-STATISTICS");
        $str929$Must_specify_either_load_or_save_ = SubLObjectFactory.makeString("Must specify either load or save.");
        $str930$Unexpected_args__s = SubLObjectFactory.makeString("Unexpected args ~s");
        $sym931$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS = SubLObjectFactory.makeSymbol("CB-HANDLE-TRANSFORMATION-RULE-STATISTICS");
        $str932$The_specified_filename__S_could_n = SubLObjectFactory.makeString("The specified filename ~S could not be found.");
        $str933$No_filename_was_specified_ = SubLObjectFactory.makeString("No filename was specified.");
        $sym934$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_LOAD = SubLObjectFactory.makeSymbol("CB-HANDLE-TRANSFORMATION-RULE-STATISTICS-LOAD");
        $str935$The_specified_filename__S_could_n = SubLObjectFactory.makeString("The specified filename ~S could not be opened for writing.");
        $str936$Experience_saved_ = SubLObjectFactory.makeString("Experience saved.");
        $sym937$CB_HANDLE_TRANSFORMATION_RULE_STATISTICS_SAVE = SubLObjectFactory.makeSymbol("CB-HANDLE-TRANSFORMATION-RULE-STATISTICS-SAVE");
        $str938$Forward_Inference_Metrics = SubLObjectFactory.makeString("Forward Inference Metrics");
        $sym939$CB_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeSymbol("CB-FORWARD-INFERENCE-METRICS");
        $str940$cb_forward_inference_metrics = SubLObjectFactory.makeString("cb-forward-inference-metrics");
        $kw941$FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeKeyword("FORWARD-INFERENCE-METRICS");
        $sym942$CB_LINK_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeSymbol("CB-LINK-FORWARD-INFERENCE-METRICS");
        $list943 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("ID"));
        $str944$Rule_Forward_Inference_Metrics = SubLObjectFactory.makeString("Rule Forward Inference Metrics");
        $kw945$RULE_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeKeyword("RULE-FORWARD-INFERENCE-METRICS");
        $str946$_All_Forward_Inference_Metrics_ = SubLObjectFactory.makeString("[All Forward Inference Metrics]");
        $kw947$VERBOSE = SubLObjectFactory.makeKeyword("VERBOSE");
        $sym948$CB_RULE_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeSymbol("CB-RULE-FORWARD-INFERENCE-METRICS");
        $str949$_Forward_Inference_Metrics_ = SubLObjectFactory.makeString("[Forward Inference Metrics]");
        $str950$cb_rule_forward_inference_metrics = SubLObjectFactory.makeString("cb-rule-forward-inference-metrics&~A");
        $str951$cb_rule_forward_inference_metrics = SubLObjectFactory.makeString("cb-rule-forward-inference-metrics&NIL");
        $sym952$CB_LINK_RULE_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeSymbol("CB-LINK-RULE-FORWARD-INFERENCE-METRICS");
        $sym953$CB_CLEAR_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeSymbol("CB-CLEAR-FORWARD-INFERENCE-METRICS");
        $str954$_Clear_Forward_Metrics_ = SubLObjectFactory.makeString("[Clear Forward Metrics]");
        $str955$cb_clear_forward_inference_metric = SubLObjectFactory.makeString("cb-clear-forward-inference-metrics");
        $kw956$CLEAR_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeKeyword("CLEAR-FORWARD-INFERENCE-METRICS");
        $sym957$CB_LINK_CLEAR_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeSymbol("CB-LINK-CLEAR-FORWARD-INFERENCE-METRICS");
        $sym958$CB_START_GATHERING_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeSymbol("CB-START-GATHERING-FORWARD-INFERENCE-METRICS");
        $str959$_Start_Gathering_Metrics_ = SubLObjectFactory.makeString("[Start Gathering Metrics]");
        $str960$cb_start_gathering_forward_infere = SubLObjectFactory.makeString("cb-start-gathering-forward-inference-metrics");
        $kw961$START_GATHERING_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeKeyword("START-GATHERING-FORWARD-INFERENCE-METRICS");
        $sym962$CB_LINK_START_GATHERING_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeSymbol("CB-LINK-START-GATHERING-FORWARD-INFERENCE-METRICS");
        $sym963$CB_STOP_GATHERING_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeSymbol("CB-STOP-GATHERING-FORWARD-INFERENCE-METRICS");
        $str964$_Stop_Gathering_Metrics_ = SubLObjectFactory.makeString("[Stop Gathering Metrics]");
        $str965$cb_stop_gathering_forward_inferen = SubLObjectFactory.makeString("cb-stop-gathering-forward-inference-metrics");
        $kw966$STOP_GATHERING_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeKeyword("STOP-GATHERING-FORWARD-INFERENCE-METRICS");
        $sym967$CB_LINK_STOP_GATHERING_FORWARD_INFERENCE_METRICS = SubLObjectFactory.makeSymbol("CB-LINK-STOP-GATHERING-FORWARD-INFERENCE-METRICS");
        $str968$_No_forward_inference_metrics_hav = SubLObjectFactory.makeString(" No forward inference metrics have been gathered yet.");
        $str969$No_forward_inference_metrics_have = SubLObjectFactory.makeString("No forward inference metrics have been gathered.");
        $kw970$TOTAL_TIME = SubLObjectFactory.makeKeyword("TOTAL-TIME");
        $kw971$TOTAL_INFERENCE_TIME = SubLObjectFactory.makeKeyword("TOTAL-INFERENCE-TIME");
        $kw972$TOTAL_INFERENCES = SubLObjectFactory.makeKeyword("TOTAL-INFERENCES");
        $kw973$TOTAL_TRIGGERS = SubLObjectFactory.makeKeyword("TOTAL-TRIGGERS");
        $kw974$TOTAL_RULES = SubLObjectFactory.makeKeyword("TOTAL-RULES");
        $kw975$AVERAGE_INFERENCES_PER_RULE = SubLObjectFactory.makeKeyword("AVERAGE-INFERENCES-PER-RULE");
        $kw976$STDEV_INFERENCES_PER_RULE = SubLObjectFactory.makeKeyword("STDEV-INFERENCES-PER-RULE");
        $kw977$AVERAGE_TRIGGER_PER_RULE = SubLObjectFactory.makeKeyword("AVERAGE-TRIGGER-PER-RULE");
        $kw978$STDEV_TRIGGER_PER_RULE = SubLObjectFactory.makeKeyword("STDEV-TRIGGER-PER-RULE");
        $kw979$AVERAGE_TIME_PER_RULE = SubLObjectFactory.makeKeyword("AVERAGE-TIME-PER-RULE");
        $kw980$STDEV_TIME_PER_RULE = SubLObjectFactory.makeKeyword("STDEV-TIME-PER-RULE");
        $kw981$AVERAGE_TIME_PER_INFERENCE = SubLObjectFactory.makeKeyword("AVERAGE-TIME-PER-INFERENCE");
        $kw982$STDEV_TIME_PER_INFERENCE = SubLObjectFactory.makeKeyword("STDEV-TIME-PER-INFERENCE");
        $kw983$AVERAGE_TIME_PER_TRIGGER = SubLObjectFactory.makeKeyword("AVERAGE-TIME-PER-TRIGGER");
        $kw984$STDEV_TIME_PER_TRIGGER = SubLObjectFactory.makeKeyword("STDEV-TIME-PER-TRIGGER");
        $kw985$SUCCESS_RULE_COUNT = SubLObjectFactory.makeKeyword("SUCCESS-RULE-COUNT");
        $kw986$SUCCESS_TRIGGER_COUNT = SubLObjectFactory.makeKeyword("SUCCESS-TRIGGER-COUNT");
        $kw987$SUCCESS_TIME_ESTIMATE = SubLObjectFactory.makeKeyword("SUCCESS-TIME-ESTIMATE");
        $kw988$SUCCESS_RULE_RATIO = SubLObjectFactory.makeKeyword("SUCCESS-RULE-RATIO");
        $kw989$SUCCESS_TRIGGER_RATIO = SubLObjectFactory.makeKeyword("SUCCESS-TRIGGER-RATIO");
        $kw990$SUCCESS_TIME_RATIO = SubLObjectFactory.makeKeyword("SUCCESS-TIME-RATIO");
        $str991$Total_time__ = SubLObjectFactory.makeString("Total time: ");
        $str992$Inference_time__ = SubLObjectFactory.makeString("Inference time: ");
        $str993$___A__ = SubLObjectFactory.makeString(" (~A%)");
        $str994$Successful = SubLObjectFactory.makeString("Successful");
        $list995 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("TIME"), (SubLObject)SubLObjectFactory.makeSymbol("UNITS"));
        $str996$__est_ = SubLObjectFactory.makeString(" (est)");
        $str997$_inference_P = SubLObjectFactory.makeString(" inference~P");
        $str998$_rule_P = SubLObjectFactory.makeString(" rule~P");
        $str999$_trigger_P = SubLObjectFactory.makeString(" trigger~P");
        $str1000$Total = SubLObjectFactory.makeString("Total");
        $str1001$Success__ = SubLObjectFactory.makeString("Success %");
        $str1002$__ = SubLObjectFactory.makeString(" %");
        $str1003$Averages = SubLObjectFactory.makeString("Averages");
        $str1004$___rule = SubLObjectFactory.makeString(" / rule");
        $str1005$_inferences___rule = SubLObjectFactory.makeString(" inferences / rule");
        $str1006$___inference = SubLObjectFactory.makeString(" / inference");
        $str1007$_triggers___rule = SubLObjectFactory.makeString(" triggers / rule");
        $str1008$___trigger = SubLObjectFactory.makeString(" / trigger");
        $str1009$Standard_Deviations = SubLObjectFactory.makeString("Standard Deviations");
        $str1010$_Show_Metric_Histogram_ = SubLObjectFactory.makeString("[Show Metric Histogram]");
        $str1011$_Hide_Metric_Histogram_ = SubLObjectFactory.makeString("[Hide Metric Histogram]");
        $kw1012$TIME = SubLObjectFactory.makeKeyword("TIME");
        $sym1013$_ = SubLObjectFactory.makeSymbol("+");
        $sym1014$SAFE__ = SubLObjectFactory.makeSymbol("SAFE->");
        $str1015$Metric = SubLObjectFactory.makeString("Metric");
        $str1016$Total_time = SubLObjectFactory.makeString("Total time");
        $str1017$_ = SubLObjectFactory.makeString("%");
        $str1018$Time___call = SubLObjectFactory.makeString("Time / call");
        $list1019 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("JUST-TIME"), (SubLObject)SubLObjectFactory.makeSymbol("UNITS"));
        $list1020 = ConsesLow.list(new SubLObject[] { SubLObjectFactory.makeSymbol("&KEY"), SubLObjectFactory.makeSymbol("RULE"), SubLObjectFactory.makeSymbol("TIME"), SubLObjectFactory.makeSymbol("INFERENCE-TIME"), SubLObjectFactory.makeSymbol("TIME-PLIST"), SubLObjectFactory.makeSymbol("COUNT-PLIST"), SubLObjectFactory.makeSymbol("TRIGGER-GAFS"), SubLObjectFactory.makeSymbol("INFERENCE-COUNT"), SubLObjectFactory.makeSymbol("INFERENCES") });
        $list1021 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("RULE"), (SubLObject)SubLObjectFactory.makeKeyword("TIME"), (SubLObject)SubLObjectFactory.makeKeyword("INFERENCE-TIME"), (SubLObject)SubLObjectFactory.makeKeyword("TIME-PLIST"), (SubLObject)SubLObjectFactory.makeKeyword("COUNT-PLIST"), (SubLObject)SubLObjectFactory.makeKeyword("TRIGGER-GAFS"), (SubLObject)SubLObjectFactory.makeKeyword("INFERENCE-COUNT"), (SubLObject)SubLObjectFactory.makeKeyword("INFERENCES"));
        $kw1022$RULE = SubLObjectFactory.makeKeyword("RULE");
        $kw1023$INFERENCE_TIME = SubLObjectFactory.makeKeyword("INFERENCE-TIME");
        $kw1024$TIME_PLIST = SubLObjectFactory.makeKeyword("TIME-PLIST");
        $kw1025$COUNT_PLIST = SubLObjectFactory.makeKeyword("COUNT-PLIST");
        $kw1026$TRIGGER_GAFS = SubLObjectFactory.makeKeyword("TRIGGER-GAFS");
        $kw1027$INFERENCE_COUNT = SubLObjectFactory.makeKeyword("INFERENCE-COUNT");
        $kw1028$INFERENCES = SubLObjectFactory.makeKeyword("INFERENCES");
        $str1029$cumulative_time__S_ = SubLObjectFactory.makeString("cumulative time ~S%");
        $kw1030$WHITE = SubLObjectFactory.makeKeyword("WHITE");
        $kw1031$BLACK = SubLObjectFactory.makeKeyword("BLACK");
        $str1032$80_ = SubLObjectFactory.makeString("80%");
        $str1033$Overhead = SubLObjectFactory.makeString("Overhead");
        $str1034$_Show_Detail_ = SubLObjectFactory.makeString("[Show Detail]");
        $str1035$Inferences_ = SubLObjectFactory.makeString("Inferences:");
        $str1036$__S_good = SubLObjectFactory.makeString(" ~S good");
        $str1037$__S_neutral = SubLObjectFactory.makeString(" ~S neutral");
        $str1038$__S_no_good = SubLObjectFactory.makeString(" ~S no-good");
        $str1039$Good__ = SubLObjectFactory.makeString("Good: ");
        $str1040$Neutral__ = SubLObjectFactory.makeString("Neutral: ");
        $str1041$No_Good__ = SubLObjectFactory.makeString("No-Good: ");
        $str1042$Triggers_ = SubLObjectFactory.makeString("Triggers:");
        $str1043$__S_successful = SubLObjectFactory.makeString(" ~S successful");
        $str1044$__S_failed = SubLObjectFactory.makeString(" ~S failed");
        $str1045$__S_unknown = SubLObjectFactory.makeString(" ~S unknown");
        $str1046$Successful__ = SubLObjectFactory.makeString("Successful: ");
        $str1047$_A_successful_trigger__P_now_inva = SubLObjectFactory.makeString("~A successful trigger~:P now invalid.");
        $str1048$Failed__ = SubLObjectFactory.makeString("Failed: ");
        $str1049$_A_failed_trigger__P_now_invalid_ = SubLObjectFactory.makeString("~A failed trigger~:P now invalid.");
        $str1050$Unknown__unreifiable___ = SubLObjectFactory.makeString("Unknown (unreifiable): ");
        $kw1051$VERY_VERBOSE = SubLObjectFactory.makeKeyword("VERY-VERBOSE");
        $str1052$___as_ = SubLObjectFactory.makeString(" (~as)");
        $str1053$inference_metrics = SubLObjectFactory.makeString("inference-metrics");
        $str1054$_Show_metrics_ = SubLObjectFactory.makeString("[Show metrics]");
        $str1055$_Hide_metrics_ = SubLObjectFactory.makeString("[Hide metrics]");
        $kw1056$GOOD = SubLObjectFactory.makeKeyword("GOOD");
        $kw1057$NEUTRAL = SubLObjectFactory.makeKeyword("NEUTRAL");
        $kw1058$NO_GOOD = SubLObjectFactory.makeKeyword("NO-GOOD");
        $str1059$_ = SubLObjectFactory.makeString("!");
        $kw1060$CONTENT = SubLObjectFactory.makeKeyword("CONTENT");
        $str1061$cb_inference_graph__A__A = SubLObjectFactory.makeString("cb-inference-graph&~A&~A");
        $sym1062$CB_LINK_INFERENCE_GRAPH = SubLObjectFactory.makeSymbol("CB-LINK-INFERENCE-GRAPH");
        $sym1063$CB_INFERENCE_GRAPH = SubLObjectFactory.makeSymbol("CB-INFERENCE-GRAPH");
        $str1064$Graph_of_a_query_formula = SubLObjectFactory.makeString("Graph of a query formula");
        $str1065$Refresh = SubLObjectFactory.makeString("Refresh");
        $str1066$reloadCurrentFrame__reloadFrameBu = SubLObjectFactory.makeString("reloadCurrentFrame('reloadFrameButton');");
        $str1067$Graph_for_ = SubLObjectFactory.makeString("Graph for:");
        $str1068$_a = SubLObjectFactory.makeString("~a");
        $int1069$30 = SubLObjectFactory.makeInteger(30);
        $sym1070$BBF_INFERENCE = SubLObjectFactory.makeSymbol("BBF-INFERENCE");
        $kw1071$STORE_SUID = SubLObjectFactory.makeKeyword("STORE-SUID");
        $kw1072$INFERENCE_SUID = SubLObjectFactory.makeKeyword("INFERENCE-SUID");
    }
}

/*

	Total time: 21480 ms
	
*/