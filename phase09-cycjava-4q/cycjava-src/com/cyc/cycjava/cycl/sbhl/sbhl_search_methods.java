package com.cyc.cycjava.cycl.sbhl;

import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.cycjava.cycl.constant_handles;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory;
import com.cyc.cycjava.cycl.set_contents;
import com.cyc.cycjava.cycl.inference.harness.inference_metrics;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import java.util.Map;
import java.util.Iterator;
import com.cyc.cycjava.cycl.keyhash_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables;
import com.cyc.cycjava.cycl.set;
import com.cyc.cycjava.cycl.cardinality_estimates;
import com.cyc.cycjava.cycl.subl_promotions;
import com.cyc.cycjava.cycl.list_utilities;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high;
import com.cyc.cycjava.cycl.queues;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ReadWriteLocks;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.cycjava.cycl.mt_relevance_macros;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public final class sbhl_search_methods extends SubLTranslatedFile
{
    public static final SubLFile me;
    public static final String myName = "com.cyc.cycjava.cycl.sbhl.sbhl_search_methods";
    public static final String myFingerPrint = "55fd079ab2c6dbeff49df8e29e91919188d878f301bfa4448696e90657bb041c";
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 623L)
    public static SubLSymbol $sbhl_search_self_incompatibility_check_disabledP$;
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 52973L)
    private static SubLSymbol $debug_sbhl_cache_inconsistency_problemP$;
    private static final SubLSymbol $sym0$SBHL_MODULE_P;
    private static final SubLSymbol $sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV;
    private static final SubLSymbol $kw2$ERROR;
    private static final SubLString $str3$_A_is_not_a__A;
    private static final SubLSymbol $sym4$SBHL_TRUE_TV_P;
    private static final SubLSymbol $kw5$CERROR;
    private static final SubLString $str6$continue_anyway;
    private static final SubLSymbol $kw7$WARN;
    private static final SubLString $str8$_A_is_not_a_valid__sbhl_type_erro;
    private static final SubLObject $const9$True_JustificationTruth;
    private static final SubLSymbol $kw10$OLD;
    private static final SubLSymbol $sym11$SBHL_PUSH_ONTO_RESULT;
    private static final SubLSymbol $kw12$RESOURCE;
    private static final SubLSymbol $sym13$SBHL_FALSE_TV_P;
    private static final SubLObject $const14$False_JustificationTruth;
    private static final SubLString $str15$Node__a_does_not_pass_sbhl_type_t;
    private static final SubLSymbol $sym16$SBHL_PUSH_ONTO_RESULT_WITH_PRUNE;
    private static final SubLSymbol $kw17$CLOSURE;
    private static final SubLSymbol $sym18$SBHL_GATHER_DEAD_END_NODES;
    private static final SubLSymbol $sym19$SBHL_GATHER_FIRST_NON_NIL_RESULT;
    private static final SubLSymbol $sym20$SBHL_LEAF_INSTANCES_SWEEP;
    private static final SubLSymbol $sym21$SBHL_SIMPLE_TRUE_SEARCH_AND_UNWIND;
    private static final SubLSymbol $sym22$QUEUE_EMPTY_P;
    private static final SubLSymbol $sym23$FUNCTION_SPEC_P;
    private static final SubLSymbol $sym24$SBHL_APPLY_COMPOSE_FN;
    private static final SubLSymbol $sym25$SBHL_APPLY_COMPOSE_FN_IF;
    private static final SubLSymbol $sym26$SBHL_PUSH_UNWIND_ONTO_RESULT;
    private static final SubLSymbol $sym27$SBHL_APPLY_COMPOSE_FN_AND_COMBINE_WITH_RESULT;
    private static final SubLSymbol $sym28$SBHL_GATHER_FIRST_NON_NIL_RESULT_WITH_PRUNE;
    private static final SubLSymbol $sym29$SBHL_PUSH_ONTO_RESULT_IF;
    private static final SubLSymbol $sym30$SBHL_PUSH_ONTO_RESULT_IF_AND_STOP_UNLESS;
    private static final SubLSymbol $sym31$SBHL_MARKED_IN_TARGET_SPACE_P;
    private static final SubLSymbol $sym32$MEMBER_;
    private static final SubLSymbol $kw33$FORWARD;
    private static final SubLSymbol $kw34$BACKWARD;
    private static final SubLSymbol $sym35$SBHL_STOP_AT_HORIZON;
    private static final SubLObject $const36$genlInverse;
    private static final SubLSymbol $sym37$FORT_P;
    private static final SubLSymbol $sym38$_;
    private static final SubLSymbol $sym39$GENL_CARDINALITY;
    private static final SubLSymbol $sym40$SBHL_PUSH_DEPENDENT_NODES_ONTO_RESULT;
    private static final SubLSymbol $sym41$SBHL_CHECK_TARGET_MARKING_FOR_DEPENDENCE;
    private static final SubLString $str42$__sbhl_predicate_relation_p__cach;
    private static final SubLString $str43$_______cached___S__clet__cached_r;
    private static final SubLString $str44$___non_cached___S__clet__non_cach;
    private static final SubLSymbol $sym45$SBHL_MARK_NODE_IN_PRECOMPUTE_SPACE;
    private static final SubLSymbol $kw46$BOOLEAN;
    private static final SubLSymbol $sym47$SBHL_NODE_IS_GOAL_NODE;
    private static final SubLObject $const48$negationInverse;
    private static final SubLSymbol $sym49$SBHL_NODE_MARKED_AS_GOAL_NODE;
    private static final SubLSymbol $sym50$SBHL_PREDICATE_RELATION_P;
    private static final SubLSymbol $sym51$SBHL_FALSE_PREDICATE_RELATION_P;
    private static final SubLSymbol $sym52$SBHL_IMPLIED_DISJOINS_RELATION_P;
    private static final SubLSymbol $sym53$SBHL_IMPLIED_FALSE_PREDICATE_RELATION_P;
    private static final SubLString $str54$Invalid_TV_argument__a__or__sbhl_;
    private static final SubLSymbol $sym55$SBHL_PREDICATE_RELATION_WITH_ANY_P;
    private static final SubLString $str56$_A_is_neither_SET_P_nor_LISTP_;
    private static final SubLObject $const57$incompatibleMt;
    private static final SubLObject $const58$intensionallyIncompatibleMt;
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 828L)
    public static SubLObject sbhl_all_forward_true_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$2 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$3 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$3 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$4 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$4 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$4 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$5 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$6 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$5 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$5 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$14 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$15 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$7 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$6 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$6 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym11$SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_transitive_closure(node);
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$6, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$6, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$7, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$15, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$14, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$5, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$5, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$6, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$5, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$4, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$4, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$4, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$3, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$3, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$2, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 1267L)
    public static SubLObject sbhl_all_forward_false_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$19 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$20 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$21 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$20 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$21 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$21 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$22 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$22 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const14$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$22 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$23 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$24 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$23 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$23 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$32 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$33 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$25 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$24 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$24 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym11$SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_transitive_closure(node);
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$24, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$24, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$25, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$33, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$32, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$23, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$23, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$24, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$23, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$22, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$22, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$22, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$21, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$21, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$20, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$21, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$20, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$19, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 1708L)
    public static SubLObject sbhl_all_backward_true_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$37 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$38 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$39 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$38 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$39 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$39 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$40 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$40 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$40 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$41 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$42 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$41 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$41 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$50 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$51 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$43 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$42 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$42 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym11$SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_transitive_closure(node);
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$42, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$42, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$43, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$51, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$50, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$41, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$41, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$42, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$41, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$40, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$40, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$40, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$39, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$39, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$38, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$39, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$38, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$37, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 2147L)
    public static SubLObject sbhl_all_backward_false_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$55 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$56 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$57 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$56 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$57 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$57 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$58 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$58 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const14$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$58 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$59 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$60 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$59 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$59 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$68 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$69 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$61 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$60 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$60 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym11$SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_transitive_closure(node);
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$60, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$60, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$61, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$69, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$68, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$59, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$59, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$60, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$59, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$58, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$58, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$58, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$57, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$57, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$56, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$57, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$56, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$55, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 2589L)
    public static SubLObject sbhl_transitive_closure(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            try {
                if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                    final SubLObject _prev_bind_0_$73 = sbhl_search_vars.$sbhl_unmarking_search_p$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_unmarking_search_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                        sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                    }
                    finally {
                        sbhl_search_vars.$sbhl_unmarking_search_p$.rebind(_prev_bind_0_$73, thread);
                    }
                }
                else {
                    sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$74 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$74, thread);
                }
            }
        }
        finally {
            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 2936L)
    public static SubLObject sbhl_all_forward_true_nodes_with_prune(final SubLObject module, final SubLObject node, final SubLObject compose_fn, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$75 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$76 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$77 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$76 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$77 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$77 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$78 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$78 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$78 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$79 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$80 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$79 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$79 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$88 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$89 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$81 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$80 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$80 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$89 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym16$SBHL_PUSH_ONTO_RESULT_WITH_PRUNE, thread);
                                            result = sbhl_transitive_closure(node);
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$89, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$80, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$80, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$81, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$89, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$88, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$79, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$79, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$80, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$79, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$78, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$78, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$78, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$77, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$77, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$76, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$77, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$76, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$75, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 3448L)
    public static SubLObject sbhl_all_backward_true_nodes_with_prune(final SubLObject module, final SubLObject node, final SubLObject compose_fn, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$94 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$95 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$96 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$95 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$96 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$96 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$97 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$97 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$97 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$98 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$99 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$98 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$98 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$107 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$108 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$100 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$99 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$99 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$108 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym16$SBHL_PUSH_ONTO_RESULT_WITH_PRUNE, thread);
                                            result = sbhl_transitive_closure(node);
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$108, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$99, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$99, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$100, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$108, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$107, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$98, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$98, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$99, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$98, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$97, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$97, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$97, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$96, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$96, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$95, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$96, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$95, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$94, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 3963L)
    public static SubLObject sbhl_union_all_forward_true_nodes(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$113 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$114 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$115 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$114 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$115 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$115 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$116 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$116 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$116 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$117 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$118 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$117 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$117 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$126 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$127 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$119 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$118 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$118 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym11$SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_union_nodes_transitive_closures(nodes);
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$118, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$118, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$119, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$127, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$126, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$117, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$117, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$118, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$117, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$116, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$116, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$116, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$115, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$115, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$114, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$115, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$114, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$113, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 4498L)
    public static SubLObject sbhl_union_all_backward_true_nodes(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$131 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$132 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$133 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$132 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$133 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$133 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$134 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$134 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$134 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$135 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$136 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$135 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$135 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$144 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$145 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$137 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$136 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$136 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym11$SBHL_PUSH_ONTO_RESULT, thread);
                                            result = sbhl_union_nodes_transitive_closures(nodes);
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$136, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$136, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$137, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$145, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$144, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$135, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$135, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$136, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$135, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$134, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$134, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$134, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$133, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$133, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$132, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$133, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$132, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$131, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 4978L)
    public static SubLObject sbhl_union_nodes_transitive_closures(final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw17$CLOSURE, thread);
            sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            try {
                SubLObject cdolist_list_var = nodes;
                SubLObject node = (SubLObject)sbhl_search_methods.NIL;
                node = cdolist_list_var.first();
                while (sbhl_search_methods.NIL != cdolist_list_var) {
                    if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                        final SubLObject _prev_bind_0_$149 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$150 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                            sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                            sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                        }
                        finally {
                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_1_$150, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$149, thread);
                        }
                    }
                    else {
                        sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    node = cdolist_list_var.first();
                }
            }
            finally {
                final SubLObject _prev_bind_0_$150 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$150, thread);
                }
            }
        }
        finally {
            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 5430L)
    public static SubLObject sbhl_gather_dead_end_nodes(final SubLObject node) {
        if (sbhl_search_methods.NIL != sbhl_link_methods.no_accessible_sbhl_nodes_p(node)) {
            sbhl_search_utilities.sbhl_push_onto_result(node);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 5795L)
    public static SubLObject sbhl_extremes(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym18$SBHL_GATHER_DEAD_END_NODES, thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            result = sbhl_transitive_closure(node);
        }
        finally {
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 6079L)
    public static SubLObject sbhl_leaf_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$152 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$153 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$154 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$153 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$154 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$154 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$155 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$155 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$155 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$156 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$157 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$156 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$156 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$165 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$166 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_extremes(node);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$166, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$165, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$156, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$156, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$157, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$156, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$155, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$155, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$155, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$154, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$154, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$153, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$154, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$153, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$152, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 6385L)
    public static SubLObject sbhl_root_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$167 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$168 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$169 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$168 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$169 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$169 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$170 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$170 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$170 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$171 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$172 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$171 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$171 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$180 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$181 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_extremes(node);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$181, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$180, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$171, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$171, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$172, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$171, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$170, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$170, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$170, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$169, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$169, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$168, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$169, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$168, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$167, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 6728L)
    public static SubLObject sbhl_max_true_disjoins(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$182 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$183 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$184 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$183 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$184 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$184 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$185 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$185 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$185 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$186 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$187 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$186 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$186 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$195 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$196 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$188 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$187 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym11$SBHL_PUSH_ONTO_RESULT, thread);
                                            sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            try {
                                                if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                    result = sbhl_search_utilities.sbhl_sweep_and_gather_disjoins(node);
                                                }
                                                else {
                                                    sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$189 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                                    final SubLObject _values = Values.getValuesAsVector();
                                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                    Values.restoreValuesFromVector(_values);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$189, thread);
                                                }
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_1_$187, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0_$188, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$196, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$195, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$186, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$186, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$187, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$186, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$185, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$185, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$185, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$184, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$184, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$183, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$184, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$183, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$182, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        result = sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), result, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 7308L)
    public static SubLObject sbhl_min_asserted_false_disjoins(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$200 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$201 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$202 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$201 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$202 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$202 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$203 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$203 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const14$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$203 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$204 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$205 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$204 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$204 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$213 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$214 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$206 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$205 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym11$SBHL_PUSH_ONTO_RESULT, thread);
                                            sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            try {
                                                if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                    result = sbhl_search_utilities.sbhl_sweep_and_gather_disjoins(node);
                                                }
                                                else {
                                                    sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$207 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                                    final SubLObject _values = Values.getValuesAsVector();
                                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                    Values.restoreValuesFromVector(_values);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$207, thread);
                                                }
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_1_$205, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0_$206, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$214, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$213, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$204, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$204, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$205, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$204, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$203, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$203, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$203, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$202, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$202, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$201, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$202, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$201, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$200, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        result = sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), result, mt, tv);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 7917L)
    public static SubLObject sbhl_min_implied_false_disjoins(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject reductions_module = sbhl_module_utilities.get_sbhl_reductions_module(module);
        SubLObject min_asserted_false_disjoins = (SubLObject)sbhl_search_methods.NIL;
        SubLObject leaf_nodes = (SubLObject)sbhl_search_methods.NIL;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        leaf_nodes = sbhl_leaf_nodes(reductions_module, node, mt, tv);
        min_asserted_false_disjoins = sbhl_min_asserted_false_disjoins(module, node, mt, tv);
        result = sbhl_min_nodes(reductions_module, ConsesLow.append(leaf_nodes, min_asserted_false_disjoins), mt, tv);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 8579L)
    public static SubLObject sbhl_implied_min_false_disjoins(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        return sbhl_min_implied_false_disjoins(module, node, mt, tv);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 8814L)
    public static SubLObject sbhl_gather_first_true_disjoin(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$218 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$219 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$220 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$219 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$220 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$220 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$221 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$221 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$221 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$222 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$223 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$222 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$222 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$231 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$232 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$224 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$223 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$223 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(Symbols.symbol_function((SubLObject)sbhl_search_methods.IDENTITY), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym19$SBHL_GATHER_FIRST_NON_NIL_RESULT, thread);
                                            sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            try {
                                                if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                    result = sbhl_search_utilities.sbhl_sweep_and_gather_first_disjoin(node);
                                                }
                                                else {
                                                    sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$225 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                                    final SubLObject _values = Values.getValuesAsVector();
                                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                    Values.restoreValuesFromVector(_values);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$225, thread);
                                                }
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_2_$223, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_$223, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0_$224, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$232, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$231, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$222, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$222, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$223, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$222, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$221, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$221, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$221, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$220, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$220, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$219, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$220, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$219, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$218, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 9420L)
    public static SubLObject sbhl_sample_leaf_nodes(final SubLObject module, final SubLObject start_node, SubLObject samples, SubLObject mt, SubLObject tv) {
        if (samples == sbhl_search_methods.UNPROVIDED) {
            samples = (SubLObject)sbhl_search_methods.ONE_INTEGER;
        }
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$237 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$238 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$239 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$238 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$239 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$239 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$240 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$240 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$240 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$241 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$242 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$241 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$241 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$250 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$251 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(start_node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                            result = sbhl_sample_extremal_nodes(start_node, samples, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                        }
                                        else {
                                            sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, start_node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$251, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$250, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$241, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$241, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$242, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$241, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$240, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$240, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$240, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$239, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$239, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$238, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$239, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$238, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$237, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 9940L)
    public static SubLObject sbhl_sample_different_leaf_nodes(final SubLObject module, final SubLObject dif_node, final SubLObject start_node, SubLObject samples, SubLObject mt, SubLObject tv) {
        if (samples == sbhl_search_methods.UNPROVIDED) {
            samples = (SubLObject)sbhl_search_methods.ONE_INTEGER;
        }
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$252 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$253 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$254 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$253 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$254 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$254 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$255 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$255 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$255 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$256 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$257 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$256 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$256 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$265 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$266 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(start_node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                            final SubLObject _prev_bind_0_$258 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                                            try {
                                                sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                try {
                                                    sbhl_marking_methods.sbhl_mark_forward_true_nodes_between_and_all_their_inherited_nodes(module, dif_node, start_node, mt, tv);
                                                    final SubLObject _prev_bind_0_$259 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$257 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                    final SubLObject _prev_bind_2_$257 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                    final SubLObject _prev_bind_3_$266 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    final SubLObject _prev_bind_4_$267 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_reductions_module(module), thread);
                                                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_reductions_module(module)), thread);
                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_reductions_module(module)), thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                        sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_reductions_module(module), thread);
                                                        sbhl_marking_methods.sbhl_unmark_cyclic_closure(start_node);
                                                    }
                                                    finally {
                                                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_4_$267, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_3_$266, thread);
                                                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_2_$257, thread);
                                                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_1_$257, thread);
                                                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$259, thread);
                                                    }
                                                    result = sbhl_sample_extremal_nodes(start_node, samples, (SubLObject)sbhl_search_methods.T);
                                                }
                                                finally {
                                                    final SubLObject _prev_bind_0_$260 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                                        final SubLObject _values = Values.getValuesAsVector();
                                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                                                        Values.restoreValuesFromVector(_values);
                                                    }
                                                    finally {
                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$260, thread);
                                                    }
                                                }
                                            }
                                            finally {
                                                sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_$258, thread);
                                            }
                                        }
                                        else {
                                            sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, start_node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$266, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$265, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$256, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$256, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$257, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$256, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$255, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$255, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$255, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$254, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$254, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$253, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$254, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$253, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$252, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 10794L)
    public static SubLObject sbhl_sample_extremal_nodes(final SubLObject start_node, final SubLObject samples, SubLObject different_leavesP) {
        if (different_leavesP == sbhl_search_methods.UNPROVIDED) {
            different_leavesP = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_consider_node_fn$.bind(sbhl_search_utilities.determine_sbhl_sample_leaf_consider_fn(different_leavesP), thread);
            final SubLObject queue = queues.enqueue(start_node, queues.create_queue((SubLObject)sbhl_search_methods.UNPROVIDED));
            final SubLObject _prev_bind_0_$274 = sbhl_search_vars.$sbhl_sample_leaf_queues$.currentBinding(thread);
            final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
            final SubLObject _prev_bind_3 = sbhl_link_vars.$sbhl_randomize_lists_p$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_sample_leaf_queues$.bind((SubLObject)ConsesLow.list(queue), thread);
                sbhl_search_vars.$sbhl_search_behavior$.bind((SubLObject)((sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) ? sbhl_search_methods.$sym20$SBHL_LEAF_INSTANCES_SWEEP : sbhl_search_methods.$sym21$SBHL_SIMPLE_TRUE_SEARCH_AND_UNWIND), thread);
                sbhl_link_vars.$sbhl_randomize_lists_p$.bind((SubLObject)sbhl_search_methods.T, thread);
                SubLObject n;
                SubLObject _prev_bind_0_$275;
                SubLObject leaf;
                SubLObject queue_$276;
                SubLObject node;
                SubLObject _prev_bind_0_$276;
                for (n = (SubLObject)sbhl_search_methods.NIL, n = (SubLObject)sbhl_search_methods.ZERO_INTEGER; n.numL(samples); n = Numbers.add(n, (SubLObject)sbhl_search_methods.ONE_INTEGER)) {
                    _prev_bind_0_$275 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                        leaf = (SubLObject)sbhl_search_methods.NIL;
                        while (sbhl_search_methods.NIL != sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread) && sbhl_search_methods.NIL == leaf) {
                            queue_$276 = sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread).first();
                            node = queues.queue_elements(queue_$276).first();
                            _prev_bind_0_$276 = sbhl_search_vars.$sbhl_current_leaf_queue$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_current_leaf_queue$.bind(queues.create_queue((SubLObject)sbhl_search_methods.UNPROVIDED), thread);
                                sbhl_marking_utilities.sbhl_mark_node_unmarked(node, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                leaf = sbhl_transitive_closure(node);
                                if (sbhl_search_methods.NIL != leaf) {
                                    result = (SubLObject)ConsesLow.cons(leaf, result);
                                }
                                if (sbhl_search_methods.NIL != leaf) {
                                    ConsesLow.rplacd(conses_high.last(sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread), (SubLObject)sbhl_search_methods.UNPROVIDED), (SubLObject)ConsesLow.list(queue_$276, sbhl_search_vars.$sbhl_current_leaf_queue$.getDynamicValue(thread)));
                                    sbhl_search_vars.$sbhl_sample_leaf_queues$.setDynamicValue(sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread).rest(), thread);
                                }
                                else {
                                    queues.dequeue(queue_$276);
                                }
                            }
                            finally {
                                sbhl_search_vars.$sbhl_current_leaf_queue$.rebind(_prev_bind_0_$276, thread);
                            }
                            sbhl_search_vars.$sbhl_sample_leaf_queues$.setDynamicValue(Sequences.remove_if((SubLObject)sbhl_search_methods.$sym22$QUEUE_EMPTY_P, sbhl_search_vars.$sbhl_sample_leaf_queues$.getDynamicValue(thread), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED), thread);
                        }
                    }
                    finally {
                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$275, thread);
                    }
                }
            }
            finally {
                sbhl_link_vars.$sbhl_randomize_lists_p$.rebind(_prev_bind_3, thread);
                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_2, thread);
                sbhl_search_vars.$sbhl_sample_leaf_queues$.rebind(_prev_bind_0_$274, thread);
            }
        }
        finally {
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 11546L)
    public static SubLObject sbhl_map_all_forward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$278 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$279 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$280 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$279 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$280 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$280 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$281 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$281 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$281 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$282 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$283 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$282 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$282 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$291 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$292 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !function.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$284 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$283 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$283 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$292 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$293 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym24$SBHL_APPLY_COMPOSE_FN, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw17$CLOSURE, thread);
                                            if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                            }
                                            else {
                                                sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$293, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$292, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$283, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$283, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$284, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$292, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$291, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$282, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$282, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$283, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$282, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$281, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$281, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$281, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$280, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$280, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$279, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$280, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$279, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$278, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 12188L)
    public static SubLObject sbhl_map_all_forward_true_nodes_if(final SubLObject module, final SubLObject node, final SubLObject fn, final SubLObject test_fn, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$298 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$299 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$300 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$299 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$300 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$300 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$301 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$301 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$301 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$302 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$303 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$302 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$302 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$311 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$312 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !test_fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, test_fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, test_fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, test_fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, test_fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$304 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$303 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$303 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$312 = sbhl_search_vars.$sbhl_map_test_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$313 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(fn, thread);
                                            sbhl_search_vars.$sbhl_map_test_fn$.bind(test_fn, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym25$SBHL_APPLY_COMPOSE_FN_IF, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw17$CLOSURE, thread);
                                            if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                            }
                                            else {
                                                sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_6, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_4_$313, thread);
                                            sbhl_search_vars.$sbhl_map_test_fn$.rebind(_prev_bind_3_$312, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$303, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$303, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$304, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$312, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$311, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$302, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$302, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$303, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$302, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$301, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$301, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$301, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$300, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$300, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$299, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$300, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$299, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$298, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 12887L)
    public static SubLObject sbhl_map_and_mark_forward_true_nodes_in_space(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject space, SubLObject gather_space) {
        if (space == sbhl_search_methods.UNPROVIDED) {
            space = sbhl_marking_vars.$sbhl_space$.getDynamicValue();
        }
        if (gather_space == sbhl_search_methods.UNPROVIDED) {
            gather_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_space$.bind(space, thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(gather_space, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind((SubLObject)sbhl_search_methods.T, thread);
            sbhl_map_all_forward_true_nodes(module, node, fn, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
        }
        finally {
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 13366L)
    public static SubLObject sbhl_map_all_backward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$318 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$319 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$320 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$319 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$320 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$320 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$321 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$321 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$321 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$322 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$323 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$322 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$322 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$331 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$332 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !function.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$324 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$323 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$323 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$332 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$333 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym24$SBHL_APPLY_COMPOSE_FN, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw17$CLOSURE, thread);
                                            if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                            }
                                            else {
                                                sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$333, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$332, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$323, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$323, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$324, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$332, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$331, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$322, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$322, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$323, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$322, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$321, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$321, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$321, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$320, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$320, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$319, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$320, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$319, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$318, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 13969L)
    public static SubLObject sbhl_simply_map_all_backward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$338 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$339 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$340 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$339 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$340 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$340 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$341 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$341 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$341 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$342 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$343 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$342 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$342 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$351 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$352 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !function.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$344 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$343 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$343 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$352 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$353 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym24$SBHL_APPLY_COMPOSE_FN, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw17$CLOSURE, thread);
                                            if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                sbhl_search_utilities.apply_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_behavior(), node);
                                            }
                                            else {
                                                sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_6, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_4_$353, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_3_$352, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$343, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$343, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$344, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$352, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$351, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$342, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$342, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$343, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$342, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$341, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$341, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$341, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$340, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$340, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$339, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$340, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$339, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$338, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 14722L)
    public static SubLObject sbhl_map_union_all_forward_true_nodes(final SubLObject module, final SubLObject nodes, final SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$358 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$359 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$360 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$359 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$360 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$360 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$361 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$361 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$361 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$362 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$363 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$362 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$362 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$371 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$372 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !function.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$364 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$363 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$363 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$372 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$373 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym24$SBHL_APPLY_COMPOSE_FN, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw17$CLOSURE, thread);
                                            final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                            SubLObject cdolist_list_var = nodes;
                                            SubLObject node = (SubLObject)sbhl_search_methods.NIL;
                                            node = cdolist_list_var.first();
                                            while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                    final SubLObject _prev_bind_0_$365 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$364 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                        sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                    }
                                                    finally {
                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_1_$364, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$365, thread);
                                                    }
                                                }
                                                else {
                                                    sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$373, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$372, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$363, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$363, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$364, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$372, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$371, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$362, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$362, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$363, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$362, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$361, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$361, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$361, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$360, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$360, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$359, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$360, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$359, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$358, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 15474L)
    public static SubLObject sbhl_map_union_all_backward_true_nodes(final SubLObject module, final SubLObject nodes, final SubLObject function, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$380 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$381 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$382 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$381 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$382 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$382 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$383 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$383 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$383 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$384 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$385 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$384 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$384 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$393 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$394 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !function.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$386 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$385 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$385 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$394 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$395 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym24$SBHL_APPLY_COMPOSE_FN, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw17$CLOSURE, thread);
                                            final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                            SubLObject cdolist_list_var = nodes;
                                            SubLObject node = (SubLObject)sbhl_search_methods.NIL;
                                            node = cdolist_list_var.first();
                                            while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                    final SubLObject _prev_bind_0_$387 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$386 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                    try {
                                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                        sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                    }
                                                    finally {
                                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_1_$386, thread);
                                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$387, thread);
                                                    }
                                                }
                                                else {
                                                    sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$395, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$394, thread);
                                            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2_$385, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$385, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$386, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$394, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$393, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$384, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$384, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$385, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$384, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$383, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$383, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$383, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$382, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$382, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$381, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$382, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$381, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$380, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 16225L)
    public static SubLObject sbhl_simply_union_all_backward_true_nodes(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$402 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$403 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$404 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$403 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$404 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$404 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$405 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$405 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$405 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$406 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$407 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$406 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$406 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$415 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$416 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$408 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$407 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$407 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$416 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$417 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym11$SBHL_PUSH_ONTO_RESULT, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw17$CLOSURE, thread);
                                            final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                            SubLObject cdolist_list_var = nodes;
                                            SubLObject node = (SubLObject)sbhl_search_methods.NIL;
                                            node = cdolist_list_var.first();
                                            while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                    sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                }
                                                else {
                                                    sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$417, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$416, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$407, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$407, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$408, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$416, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$415, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$406, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$406, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$407, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$406, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$405, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$405, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$405, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$404, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$404, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$403, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$404, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$403, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$402, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 16771L)
    public static SubLObject sbhl_union_simply_all_backward_true_edges(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$422 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$423 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$424 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$423 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$424 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$424 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$425 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$425 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$425 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$426 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$427 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$426 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$426 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$435 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$436 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$428 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$427 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$427 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$436 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$437 = sbhl_search_vars.$sbhl_apply_unwind_function_p$.currentBinding(thread);
                                        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_unwind_function$.currentBinding(thread);
                                        final SubLObject _prev_bind_7 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_apply_unwind_function_p$.bind((SubLObject)sbhl_search_methods.T, thread);
                                            sbhl_search_vars.$sbhl_unwind_function$.bind((SubLObject)sbhl_search_methods.$sym26$SBHL_PUSH_UNWIND_ONTO_RESULT, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw17$CLOSURE, thread);
                                            final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                            SubLObject cdolist_list_var = nodes;
                                            SubLObject node = (SubLObject)sbhl_search_methods.NIL;
                                            node = cdolist_list_var.first();
                                            while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                    sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                }
                                                else {
                                                    sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_7, thread);
                                            sbhl_search_vars.$sbhl_unwind_function$.rebind(_prev_bind_6, thread);
                                            sbhl_search_vars.$sbhl_apply_unwind_function_p$.rebind(_prev_bind_4_$437, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$436, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$427, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$427, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$428, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$436, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$435, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$426, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$426, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$427, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$426, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$425, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$425, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$425, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$424, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$424, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$423, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$424, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$423, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$422, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 17398L)
    public static SubLObject sbhl_simply_union_all_backward_true_nodes_such_that(final SubLObject module, final SubLObject nodes, final SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$442 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$443 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$444 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$443 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$444 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$444 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$445 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$445 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$445 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$446 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$447 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$446 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$446 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$455 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$456 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$448 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$447 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$447 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$456 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$457 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(fn, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym11$SBHL_PUSH_ONTO_RESULT, thread);
                                            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw17$CLOSURE, thread);
                                            final SubLObject behavior = sbhl_search_vars.get_sbhl_search_behavior();
                                            SubLObject cdolist_list_var = nodes;
                                            SubLObject node = (SubLObject)sbhl_search_methods.NIL;
                                            node = cdolist_list_var.first();
                                            while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                if (sbhl_search_methods.NIL != sbhl_paranoia.suspend_sbhl_type_checkingP() || sbhl_search_methods.NIL != sbhl_module_utilities.apply_sbhl_module_type_test(node, sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED))) {
                                                    sbhl_search_utilities.apply_sbhl_search_behavior(behavior, node);
                                                }
                                                else {
                                                    sbhl_paranoia.sbhl_warn((SubLObject)sbhl_search_methods.TWO_INTEGER, (SubLObject)sbhl_search_methods.$str15$Node__a_does_not_pass_sbhl_type_t, node, sbhl_module_utilities.get_sbhl_type_test(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4_$457, thread);
                                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3_$456, thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$447, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$447, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$448, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$456, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$455, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$446, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$446, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$447, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$446, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$445, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$445, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$445, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$444, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$444, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$443, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$444, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$443, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$442, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 18093L)
    public static SubLObject sbhl_gather_all_forward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject function, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (combine_fn == sbhl_search_methods.UNPROVIDED) {
            combine_fn = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject combiner = (sbhl_search_methods.NIL != combine_fn) ? combine_fn : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$462 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$463 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$464 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$463 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$464 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$464 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$465 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$465 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$465 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$466 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$467 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$466 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$466 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$475 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$476 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !function.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$468 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$467 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_closure(node, function, combiner);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$467, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$468, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$476, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$475, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$466, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$466, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$467, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$466, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$465, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$465, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$465, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$464, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$464, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$463, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$464, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$463, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$462, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 18762L)
    public static SubLObject sbhl_gather_all_backward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject function, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (combine_fn == sbhl_search_methods.UNPROVIDED) {
            combine_fn = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject combiner = (sbhl_search_methods.NIL != combine_fn) ? combine_fn : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$479 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$480 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$481 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$480 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$481 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$481 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$482 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$482 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$482 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$483 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$484 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$483 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$483 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$492 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$493 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !function.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, function, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$485 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$484 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_closure(node, function, combiner);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$484, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$485, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$493, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$492, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$483, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$483, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$484, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$483, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$482, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$482, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$482, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$481, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$481, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$480, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$481, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$480, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$479, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 19383L)
    public static SubLObject sbhl_gather_closure(final SubLObject node, final SubLObject function, final SubLObject combine_fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_combine_fn$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_compose_fn$.bind(function, thread);
            sbhl_search_vars.$sbhl_combine_fn$.bind(combine_fn, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym27$SBHL_APPLY_COMPOSE_FN_AND_COMBINE_WITH_RESULT, thread);
            result = sbhl_transitive_closure(node);
        }
        finally {
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_combine_fn$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 19874L)
    public static SubLObject sbhl_gather_first_among_all_forward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (combine_fn == sbhl_search_methods.UNPROVIDED) {
            combine_fn = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject combiner = (sbhl_search_methods.NIL != combine_fn) ? combine_fn : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$496 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$497 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$498 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$497 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$498 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$498 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$499 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$499 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$499 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$500 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$501 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$500 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$500 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$509 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$510 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$502 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$501 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure(node, fn, combiner);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$501, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$502, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$510, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$509, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$500, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$500, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$501, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$500, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$499, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$499, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$499, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$498, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$498, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$497, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$498, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$497, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$496, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 20475L)
    public static SubLObject sbhl_gather_first_among_forward_true_nodes_in_space(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject space, SubLObject gather_space, SubLObject combine_fn) {
        if (space == sbhl_search_methods.UNPROVIDED) {
            space = sbhl_marking_vars.$sbhl_space$.getDynamicValue();
        }
        if (gather_space == sbhl_search_methods.UNPROVIDED) {
            gather_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue();
        }
        if (combine_fn == sbhl_search_methods.UNPROVIDED) {
            combine_fn = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject combiner = (sbhl_search_methods.NIL != combine_fn) ? combine_fn : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        final SubLObject _prev_bind_7 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        final SubLObject _prev_bind_8 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
        final SubLObject _prev_bind_9 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
        final SubLObject _prev_bind_10 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
        final SubLObject _prev_bind_11 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
        final SubLObject _prev_bind_12 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
        final SubLObject _prev_bind_13 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
        final SubLObject _prev_bind_14 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
        final SubLObject _prev_bind_15 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            sbhl_marking_vars.$sbhl_space$.bind(space, thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(gather_space, thread);
            sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
            sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
            SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
            try {
                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                final SubLObject _prev_bind_0_$513 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                final SubLObject _prev_bind_1_$514 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                    result = sbhl_gather_first_among_closure(node, fn, combiner);
                }
                finally {
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$514, thread);
                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$513, thread);
                }
            }
            finally {
                if (sbhl_search_methods.NIL != needs_to_releaseP) {
                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                }
            }
        }
        finally {
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_15, thread);
            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_14, thread);
            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_13, thread);
            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_12, thread);
            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_11, thread);
            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_10, thread);
            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_9, thread);
            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_8, thread);
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_7, thread);
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_6, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 21224L)
    public static SubLObject sbhl_gather_first_among_all_backward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (combine_fn == sbhl_search_methods.UNPROVIDED) {
            combine_fn = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject combiner = (sbhl_search_methods.NIL != combine_fn) ? combine_fn : sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue(thread);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$515 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$516 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$517 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$516 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$517 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$517 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$518 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$518 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$518 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$519 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$520 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$519 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$519 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$528 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$529 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$521 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$520 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure(node, fn, combiner);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$520, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$521, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$529, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$528, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$519, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$519, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$520, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$519, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$518, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$518, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$518, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$517, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$517, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$516, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$517, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$516, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$515, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 21827L)
    public static SubLObject sbhl_simply_gather_first_among_all_forward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (combine_fn == sbhl_search_methods.UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$532 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$533 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$534 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$533 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$534 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$534 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$535 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$535 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$535 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$536 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$537 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$536 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$536 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$545 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$546 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$538 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$537 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$537 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure(node, fn, combine_fn);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$537, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$537, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$538, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$546, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$545, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$536, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$536, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$537, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$536, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$535, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$535, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$535, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$534, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$534, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$533, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$534, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$533, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$532, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 22306L)
    public static SubLObject sbhl_simply_gather_first_among_all_backward_true_nodes(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (combine_fn == sbhl_search_methods.UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$550 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$551 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$552 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$551 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$552 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$552 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$553 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$553 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$553 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$554 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$555 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$554 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$554 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$563 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$564 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$556 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$555 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$555 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure(node, fn, combine_fn);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$555, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$555, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$556, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$564, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$563, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$554, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$554, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$555, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$554, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$553, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$553, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$553, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$552, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$552, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$551, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$552, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$551, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$550, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 22787L)
    public static SubLObject sbhl_gather_first_among_closure(final SubLObject node, final SubLObject compose_fn, final SubLObject combine_fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_combine_fn$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
            sbhl_search_vars.$sbhl_combine_fn$.bind(combine_fn, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym19$SBHL_GATHER_FIRST_NON_NIL_RESULT, thread);
            result = sbhl_transitive_closure(node);
        }
        finally {
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_combine_fn$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 23094L)
    public static SubLObject sbhl_simply_gather_first_among_all_forward_true_nodes_with_prune(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (combine_fn == sbhl_search_methods.UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$568 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$569 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$570 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$569 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$570 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$570 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$571 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$571 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$571 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$572 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$573 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$572 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$572 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$581 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$582 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$574 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$573 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$573 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure_with_prune(node, fn, combine_fn);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$573, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$573, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$574, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$582, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$581, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$572, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$572, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$573, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$572, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$571, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$571, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$571, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$570, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$570, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$569, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$570, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$569, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$568, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 23595L)
    public static SubLObject sbhl_simply_gather_first_among_all_backward_true_nodes_with_prune(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv, SubLObject combine_fn) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (combine_fn == sbhl_search_methods.UNPROVIDED) {
            combine_fn = sbhl_search_vars.$sbhl_combine_fn$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$586 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$587 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$588 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$587 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$588 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$588 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$589 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$589 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$589 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$590 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$591 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$590 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$590 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$599 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$600 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$592 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$591 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$591 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_gather_first_among_closure_with_prune(node, fn, combine_fn);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2_$591, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_1_$591, thread);
                                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_0_$592, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$600, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$599, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$590, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$590, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$591, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$590, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$589, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$589, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$589, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$588, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$588, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$587, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$588, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$587, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$586, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 24098L)
    public static SubLObject sbhl_gather_first_among_closure_with_prune(final SubLObject node, final SubLObject compose_fn, final SubLObject combine_fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_combine_fn$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_compose_fn$.bind(compose_fn, thread);
            sbhl_search_vars.$sbhl_combine_fn$.bind(combine_fn, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym28$SBHL_GATHER_FIRST_NON_NIL_RESULT_WITH_PRUNE, thread);
            result = sbhl_transitive_closure(node);
        }
        finally {
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_combine_fn$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 24427L)
    public static SubLObject sbhl_all_forward_true_nodes_if(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$604 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$605 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$606 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$605 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$606 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$606 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$607 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$607 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$607 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$608 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$609 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$608 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$608 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$617 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$618 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$610 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$609 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_closure_if(node, fn);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$609, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$610, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$618, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$617, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$608, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$608, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$609, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$608, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$607, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$607, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$607, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$606, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$606, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$605, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$606, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$605, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$604, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 24900L)
    public static SubLObject sbhl_all_backward_true_nodes_if(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$621 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$622 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$623 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$622 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$623 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$623 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$624 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$624 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$624 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$625 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$626 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$625 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$625 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$634 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$635 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$627 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$626 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_closure_if(node, fn);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$626, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$627, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$635, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$634, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$625, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$625, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$626, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$625, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$624, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$624, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$624, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$623, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$623, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$622, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$623, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$622, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$621, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 25347L)
    public static SubLObject sbhl_closure_if(final SubLObject node, final SubLObject fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym29$SBHL_PUSH_ONTO_RESULT_IF, thread);
            sbhl_search_vars.$sbhl_compose_fn$.bind(fn, thread);
            result = sbhl_transitive_closure(node);
        }
        finally {
            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 25717L)
    public static SubLObject sbhl_all_forward_true_nodes_if_with_pruning(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$638 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$639 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$640 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$639 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$640 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$640 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$641 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$641 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$641 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$642 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$643 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$642 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$642 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$651 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$652 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$644 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$643 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_closure_if_and_stop_unless(node, fn);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$643, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$644, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$652, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$651, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$642, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$642, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$643, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$642, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$641, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$641, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$641, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$640, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$640, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$639, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$640, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$639, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$638, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 26191L)
    public static SubLObject sbhl_all_backward_true_nodes_if_with_pruning(final SubLObject module, final SubLObject node, final SubLObject fn, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$655 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$656 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$657 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$656 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$657 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$657 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$658 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$658 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$658 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$659 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$660 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$659 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$659 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$668 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$669 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        if (sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && !fn.isFunctionSpec()) {
                                            final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                            if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                            else {
                                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, fn, (SubLObject)sbhl_search_methods.$sym23$FUNCTION_SPEC_P);
                                            }
                                        }
                                        final SubLObject _prev_bind_0_$661 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$660 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_closure_if_and_stop_unless(node, fn);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$660, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$661, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$669, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$668, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$659, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$659, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$660, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$659, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$658, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$658, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$658, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$657, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$657, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$656, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$657, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$656, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$655, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 26667L)
    public static SubLObject sbhl_closure_if_and_stop_unless(final SubLObject node, final SubLObject fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym30$SBHL_PUSH_ONTO_RESULT_IF_AND_STOP_UNLESS, thread);
            sbhl_search_vars.$sbhl_compose_fn$.bind(fn, thread);
            result = sbhl_transitive_closure(node);
        }
        finally {
            sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 27069L)
    public static SubLObject sbhl_extremal_nodes(final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject unique_nodes = list_utilities.fast_delete_duplicates(nodes, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        SubLObject cdolist_list_var = unique_nodes;
        SubLObject node = (SubLObject)sbhl_search_methods.NIL;
        node = cdolist_list_var.first();
        while (sbhl_search_methods.NIL != cdolist_list_var) {
            if (sbhl_search_methods.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                    final SubLObject _prev_bind_0 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                        sbhl_marking_methods.sbhl_unmark_marked_closure(node);
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0, thread);
                    }
                }
            }
            cdolist_list_var = cdolist_list_var.rest();
            node = cdolist_list_var.first();
        }
        cdolist_list_var = unique_nodes;
        node = (SubLObject)sbhl_search_methods.NIL;
        node = cdolist_list_var.first();
        while (sbhl_search_methods.NIL != cdolist_list_var) {
            if (sbhl_search_methods.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(node, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                result = (SubLObject)ConsesLow.cons(node, result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            node = cdolist_list_var.first();
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 28095L)
    public static SubLObject max_nodes_backward(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL != list_utilities.lengthLE(nodes, (SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
            return nodes;
        }
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$672 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$673 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$674 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$673 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$674 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$674 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$675 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$675 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$675 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$676 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$677 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$676 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$676 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$685 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$686 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$678 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$677 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_extremal_nodes(nodes);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$677, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$678, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$686, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$685, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$676, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$676, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$677, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$676, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$675, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$675, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$675, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$674, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$674, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$673, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$674, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$673, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$672, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 28505L)
    public static SubLObject sbhl_independent_cycles(final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject cycles = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$689 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        sbhl_marking_utilities.sbhl_mark_nodes_in_target_space(nodes);
                        SubLObject cdolist_list_var = nodes;
                        SubLObject node = (SubLObject)sbhl_search_methods.NIL;
                        node = cdolist_list_var.first();
                        while (sbhl_search_methods.NIL != cdolist_list_var) {
                            if (sbhl_search_methods.NIL == list_utilities.tree_find(node, cycles, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                                final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                final SubLObject _prev_bind_0_$690 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$691 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                        final SubLObject _prev_bind_0_$692 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_5 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                            SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                            try {
                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                                                if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                                                    final SubLObject _prev_bind_0_$693 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                                        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
                                                        final SubLObject _prev_bind_0_$694 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                            try {
                                                                sbhl_marking_methods.sbhl_unmark_marked_closure_and_gather_if(node, (SubLObject)sbhl_search_methods.$sym31$SBHL_MARKED_IN_TARGET_SPACE_P);
                                                            }
                                                            finally {
                                                                final SubLObject _prev_bind_0_$695 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                                try {
                                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                                                    final SubLObject _values = Values.getValuesAsVector();
                                                                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                                    Values.restoreValuesFromVector(_values);
                                                                }
                                                                finally {
                                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$695, thread);
                                                                }
                                                            }
                                                        }
                                                        finally {
                                                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0_$694, thread);
                                                        }
                                                        if (sbhl_search_methods.NIL != result) {
                                                            cycles = (SubLObject)ConsesLow.cons(result, cycles);
                                                        }
                                                    }
                                                    finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$693, thread);
                                                    }
                                                }
                                            }
                                            finally {
                                                if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                }
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_5, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_4, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_3, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_2, thread);
                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$692, thread);
                                        }
                                        if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                        }
                                    }
                                    finally {
                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$691, thread);
                                    }
                                    if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                }
                                finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$690, thread);
                                }
                            }
                            cdolist_list_var = cdolist_list_var.rest();
                            node = cdolist_list_var.first();
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$696 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$696, thread);
                        }
                    }
                }
                finally {
                    sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_$689, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$697 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$697, thread);
                }
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
        }
        return cycles;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 29195L)
    public static SubLObject max_nodes_forward(final SubLObject module, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject unique_nodes = list_utilities.fast_delete_duplicates(nodes, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
        SubLObject cycles = (SubLObject)sbhl_search_methods.NIL;
        SubLObject visited_nodes = (SubLObject)sbhl_search_methods.NIL;
        SubLObject max_nodes = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL != list_utilities.lengthLE(unique_nodes, (SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
            return unique_nodes;
        }
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$698 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$699 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$700 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$699 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$700 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$700 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$701 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$701 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$701 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$702 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$703 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$702 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$702 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$711 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$712 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$704 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$703 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            cycles = sbhl_independent_cycles(unique_nodes);
                                            SubLObject cdolist_list_var = unique_nodes;
                                            SubLObject node = (SubLObject)sbhl_search_methods.NIL;
                                            node = cdolist_list_var.first();
                                            while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                final SubLObject source_$715 = sbhl_marking_vars.sbhl_new_space_source();
                                                final SubLObject _prev_bind_0_$705 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                try {
                                                    sbhl_marking_vars.$sbhl_space$.bind((source_$715 == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source_$715), thread);
                                                    final SubLObject _prev_bind_0_$706 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                                    try {
                                                        sbhl_marking_vars.$sbhl_gather_space$.bind((source_$715 == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source_$715), thread);
                                                        final SubLObject _prev_bind_0_$707 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                        final SubLObject _prev_bind_1_$704 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                        final SubLObject _prev_bind_2_$703 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                        final SubLObject _prev_bind_3_$712 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                        final SubLObject _prev_bind_4_$713 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                        try {
                                                            sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                            final SubLObject rw_lock_var_$723 = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                            SubLObject needs_to_releaseP_$724 = (SubLObject)sbhl_search_methods.NIL;
                                                            try {
                                                                needs_to_releaseP_$724 = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var_$723);
                                                                final SubLObject cyclic_nodes = conses_high.member(node, cycles, (SubLObject)sbhl_search_methods.$sym32$MEMBER_, (SubLObject)sbhl_search_methods.UNPROVIDED).first();
                                                                SubLObject other_nodes = (SubLObject)sbhl_search_methods.NIL;
                                                                other_nodes = ((sbhl_search_methods.NIL != cyclic_nodes) ? conses_high.set_difference(unique_nodes, cyclic_nodes, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED) : Sequences.remove(node, unique_nodes, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED));
                                                                if (sbhl_search_methods.NIL == subl_promotions.memberP(node, visited_nodes, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                                                                    visited_nodes = ConsesLow.nconc(conses_high.copy_list(cyclic_nodes), visited_nodes);
                                                                    if (sbhl_search_methods.NIL == sbhl_path_from_node_to_any_of_nodes_p(node, other_nodes)) {
                                                                        if (sbhl_search_methods.NIL != cyclic_nodes) {
                                                                            max_nodes = ConsesLow.nconc(conses_high.copy_list(cyclic_nodes), max_nodes);
                                                                        }
                                                                        else {
                                                                            max_nodes = (SubLObject)ConsesLow.cons(node, max_nodes);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            finally {
                                                                if (sbhl_search_methods.NIL != needs_to_releaseP_$724) {
                                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var_$723);
                                                                }
                                                            }
                                                        }
                                                        finally {
                                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$713, thread);
                                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$712, thread);
                                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$703, thread);
                                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$704, thread);
                                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$707, thread);
                                                        }
                                                        if (source_$715 == sbhl_search_methods.$kw12$RESOURCE) {
                                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                        }
                                                    }
                                                    finally {
                                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$706, thread);
                                                    }
                                                    if (source_$715 == sbhl_search_methods.$kw12$RESOURCE) {
                                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                    }
                                                }
                                                finally {
                                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$705, thread);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                node = cdolist_list_var.first();
                                            }
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$703, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$704, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$712, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$711, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$702, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$702, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$703, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$702, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$701, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$701, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$701, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$700, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$700, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$699, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$700, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$699, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$698, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return max_nodes;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 30521L)
    public static SubLObject max_nodes_direction(final SubLObject nodes) {
        final SubLObject others = Numbers.subtract(Sequences.length(nodes), (SubLObject)sbhl_search_methods.ONE_INTEGER);
        SubLObject up_cost = (SubLObject)sbhl_search_methods.ZERO_INTEGER;
        SubLObject down_cost = (SubLObject)sbhl_search_methods.ZERO_INTEGER;
        SubLObject cdolist_list_var = nodes;
        SubLObject node = (SubLObject)sbhl_search_methods.NIL;
        node = cdolist_list_var.first();
        while (sbhl_search_methods.NIL != cdolist_list_var) {
            down_cost = Numbers.add(down_cost, cardinality_estimates.spec_cardinality(node));
            up_cost = Numbers.add(up_cost, others, cardinality_estimates.genl_cardinality(node));
            cdolist_list_var = cdolist_list_var.rest();
            node = cdolist_list_var.first();
        }
        if (up_cost.numL(down_cost)) {
            return (SubLObject)sbhl_search_methods.$kw33$FORWARD;
        }
        return (SubLObject)sbhl_search_methods.$kw34$BACKWARD;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 30927L)
    public static SubLObject sbhl_min_nodes(final SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        nodes = list_utilities.fast_delete_duplicates(nodes, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
        if (sbhl_search_methods.NIL != list_utilities.lengthLE(nodes, (SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
            return nodes;
        }
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$725 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$726 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$727 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$726 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$727 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$727 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$728 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$728 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$728 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$729 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$730 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$729 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$729 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$738 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$739 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$731 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$730 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_extremal_nodes(nodes);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$730, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$731, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$739, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$738, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$729, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$729, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$730, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$729, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$728, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$728, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$728, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$727, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$727, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$726, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$727, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$726, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$725, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 31369L)
    public static SubLObject sbhl_max_nodes(final SubLObject module, SubLObject nodes, SubLObject mt, SubLObject tv, SubLObject direction) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (direction == sbhl_search_methods.UNPROVIDED) {
            direction = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        nodes = list_utilities.fast_delete_duplicates(nodes, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
        if (sbhl_search_methods.NIL != list_utilities.singletonP(nodes)) {
            return nodes;
        }
        final SubLObject pcase_var;
        final SubLObject dir = pcase_var = ((sbhl_search_methods.NIL != direction) ? direction : max_nodes_direction(nodes));
        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw34$BACKWARD)) {
            return max_nodes_backward(module, nodes, mt, tv);
        }
        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw33$FORWARD)) {
            return max_nodes_forward(module, nodes, mt, tv);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 31969L)
    public static SubLObject sbhl_min_forward_true_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLObject local_forwards = sbhl_link_methods.sbhl_forward_true_link_nodes(module, node, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        if (sbhl_search_methods.NIL == local_forwards) {
            final SubLObject root = sbhl_module_utilities.get_sbhl_module_root(module);
            return (SubLObject)((sbhl_search_methods.NIL != root) ? ConsesLow.list(root) : sbhl_search_methods.NIL);
        }
        return sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_forwards, mt, tv);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 32545L)
    public static SubLObject sbhl_max_forward_true_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLObject local_forwards = sbhl_link_methods.sbhl_forward_true_link_nodes(module, node, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        return sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_forwards, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 32973L)
    public static SubLObject sbhl_min_forward_false_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLObject local_not_forwards = sbhl_link_methods.sbhl_forward_false_link_nodes(module, node, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        return sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_forwards, mt, tv);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 33394L)
    public static SubLObject sbhl_max_forward_false_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLObject local_not_forwards = sbhl_link_methods.sbhl_forward_false_link_nodes(module, node, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        return sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_forwards, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 33833L)
    public static SubLObject sbhl_min_backward_true_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLObject local_backwards = sbhl_link_methods.sbhl_backward_true_link_nodes(module, node, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        return sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_backwards, mt, tv);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 34248L)
    public static SubLObject sbhl_max_backward_true_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLObject local_backwards = sbhl_link_methods.sbhl_backward_true_link_nodes(module, node, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        return sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_backwards, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 34681L)
    public static SubLObject sbhl_min_backward_false_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLObject local_not_backwards = sbhl_link_methods.sbhl_backward_false_link_nodes(module, node, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        return sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_backwards, mt, tv);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 35107L)
    public static SubLObject sbhl_max_backward_false_link_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL == sbhl_module_utilities.apply_sbhl_module_type_test(node, module)) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLObject local_not_backwards = sbhl_link_methods.sbhl_backward_false_link_nodes(module, node, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        return sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), local_not_backwards, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 35551L)
    public static SubLObject sbhl_stop_at_horizon(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread), thread);
            if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                sbhl_search_vars.$sbhl_result$.setDynamicValue((SubLObject)ConsesLow.cons(node, sbhl_search_vars.$sbhl_result$.getDynamicValue(thread)), thread);
                sbhl_search_vars.sbhl_stop_search_path();
            }
            else {
                sbhl_search_vars.sbhl_continue_search_path();
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 36104L)
    public static SubLObject sbhl_mark_closure_up_to_horizon(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject intersection = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym35$SBHL_STOP_AT_HORIZON, thread);
            intersection = sbhl_transitive_closure(node);
        }
        finally {
            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
        }
        return intersection;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 36457L)
    public static SubLObject sbhl_common_horizon(SubLObject nodes, SubLObject candidates) {
        if (candidates == sbhl_search_methods.UNPROVIDED) {
            candidates = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (sbhl_search_methods.NIL != set.set_p(nodes)) {
            nodes = set.set_element_list(nodes);
        }
        if (sbhl_search_methods.NIL != set.set_p(candidates)) {
            candidates = set.set_element_list(candidates);
        }
        final SubLObject transfers_through_searchP = sbhl_module_utilities.sbhl_transfers_through_module_p(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED));
        final SubLObject initial_node = nodes.first();
        final SubLObject redux_module = (sbhl_search_methods.NIL != transfers_through_searchP) ? sbhl_module_utilities.get_sbhl_reductions_module(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)) : sbhl_module_vars.$sbhl_module$.getDynamicValue(thread);
        final SubLObject redux_behavior = sbhl_search_utilities.determine_sbhl_search_behavior(redux_module, sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv());
        SubLObject minimal_intersection = (SubLObject)sbhl_search_methods.NIL;
        SubLObject empty_intersectionP = (SubLObject)sbhl_search_methods.NIL;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL == list_utilities.singletonP(nodes)) {
            final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
            try {
                sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                try {
                    final SubLObject _prev_bind_0_$742 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                        sbhl_marking_methods.sbhl_mark_closure_as_marked(initial_node);
                        final SubLObject _prev_bind_0_$743 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                            try {
                                if (sbhl_search_methods.NIL == empty_intersectionP) {
                                    SubLObject csome_list_var = nodes.rest();
                                    SubLObject node = (SubLObject)sbhl_search_methods.NIL;
                                    node = csome_list_var.first();
                                    while (sbhl_search_methods.NIL == empty_intersectionP && sbhl_search_methods.NIL != csome_list_var) {
                                        minimal_intersection = sbhl_mark_closure_up_to_horizon(node);
                                        final SubLObject _prev_bind_0_$744 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            if (sbhl_search_methods.NIL != minimal_intersection) {
                                                final SubLObject _prev_bind_0_$745 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                                                final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                                                final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                                                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                                                final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_module$.bind(redux_module, thread);
                                                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(redux_module), thread);
                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(redux_module), thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                    sbhl_module_vars.$sbhl_module$.bind(redux_module, thread);
                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(redux_behavior, thread);
                                                    sbhl_marking_utilities.clear_sbhl_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                                                    final SubLObject _prev_bind_0_$746 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                    try {
                                                        sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                                        SubLObject cdolist_list_var = minimal_intersection;
                                                        SubLObject min_node = (SubLObject)sbhl_search_methods.NIL;
                                                        min_node = cdolist_list_var.first();
                                                        while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                            final SubLObject _prev_bind_0_$747 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                            try {
                                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                                sbhl_marking_methods.sbhl_mark_closure_as_marked(min_node);
                                                            }
                                                            finally {
                                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$747, thread);
                                                            }
                                                            cdolist_list_var = cdolist_list_var.rest();
                                                            min_node = cdolist_list_var.first();
                                                        }
                                                    }
                                                    finally {
                                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$746, thread);
                                                    }
                                                    final SubLObject _prev_bind_0_$748 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                    try {
                                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                                        SubLObject cdolist_list_var = minimal_intersection;
                                                        SubLObject min_node = (SubLObject)sbhl_search_methods.NIL;
                                                        min_node = cdolist_list_var.first();
                                                        while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                            sbhl_marking_methods.sbhl_unmark_marked_closure(min_node);
                                                            cdolist_list_var = cdolist_list_var.rest();
                                                            min_node = cdolist_list_var.first();
                                                        }
                                                    }
                                                    finally {
                                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$748, thread);
                                                    }
                                                }
                                                finally {
                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_6, thread);
                                                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                                                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                                                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                                                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$745, thread);
                                                }
                                            }
                                            else {
                                                empty_intersectionP = (SubLObject)sbhl_search_methods.T;
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_0_$744, thread);
                                        }
                                        csome_list_var = csome_list_var.rest();
                                        node = csome_list_var.first();
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$749 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$749, thread);
                                }
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$743, thread);
                        }
                        if (sbhl_search_methods.NIL == empty_intersectionP) {
                            final SubLObject cdohash_table = sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread);
                            SubLObject node2 = (SubLObject)sbhl_search_methods.NIL;
                            SubLObject node_marking = (SubLObject)sbhl_search_methods.NIL;
                            final Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                            try {
                                while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                                    final Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                                    node2 = Hashtables.getEntryKey(cdohash_entry);
                                    node_marking = Hashtables.getEntryValue(cdohash_entry);
                                    if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node2, sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread))) {
                                        result = (SubLObject)ConsesLow.cons(node2, result);
                                    }
                                }
                            }
                            finally {
                                Hashtables.releaseEntrySetIterator(cdohash_iterator);
                            }
                            if (sbhl_search_methods.NIL != candidates) {
                                result = keyhash_utilities.fast_intersection(candidates, result, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                            }
                        }
                    }
                    finally {
                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$742, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$750 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$750, thread);
                    }
                }
            }
            finally {
                sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
            }
            return result;
        }
        if (sbhl_search_methods.NIL != candidates) {
            return conses_high.intersection(nodes, candidates, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
        }
        return nodes;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 38908L)
    public static SubLObject sbhl_min_ceilings(final SubLObject module, final SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == sbhl_search_methods.UNPROVIDED) {
            candidates = (SubLObject)sbhl_search_methods.NIL;
        }
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject ceilings = sbhl_ceilings(module, nodes, candidates, mt, tv);
        return sbhl_min_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), ceilings, mt, tv);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 39288L)
    public static SubLObject sbhl_max_floors(final SubLObject module, final SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv, SubLObject direction) {
        if (candidates == sbhl_search_methods.UNPROVIDED) {
            candidates = (SubLObject)sbhl_search_methods.NIL;
        }
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (direction == sbhl_search_methods.UNPROVIDED) {
            direction = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject min_nodes = sbhl_min_nodes(module, nodes, mt, tv);
        final SubLObject floors = sbhl_floors(module, min_nodes, candidates, mt, tv);
        return sbhl_max_nodes(sbhl_module_utilities.get_sbhl_reductions_module(module), floors, mt, tv, direction);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 39745L)
    public static SubLObject sbhl_max_floors_pruning_cycles(final SubLObject module, final SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == sbhl_search_methods.UNPROVIDED) {
            candidates = (SubLObject)sbhl_search_methods.NIL;
        }
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject max_floors = sbhl_max_floors(module, nodes, candidates, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        final SubLObject cycle_preferred_members = ConsesLow.append(nodes, candidates);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        result = sbhl_prune_unwanted_extremal_cycles(module, max_floors, cycle_preferred_members, mt, tv);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 40383L)
    public static SubLObject sbhl_prune_unwanted_extremal_cycles(final SubLObject module, final SubLObject nodes, final SubLObject cycle_preferred_members, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL == list_utilities.lengthG(nodes, (SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
            return nodes;
        }
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_table$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_table$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$751 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                final SubLObject _prev_bind_6 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject mt_var = mt;
                    final SubLObject _prev_bind_0_$752 = mt_relevance_macros.$mt$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$753 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$754 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        final SubLObject tv_var = tv;
                        final SubLObject _prev_bind_0_$753 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$754 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                            if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                    sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                }
                                else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                    sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                }
                                else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                    Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                                }
                                else {
                                    Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                                }
                            }
                            final SubLObject _prev_bind_0_$754 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$755 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                            final SubLObject _prev_bind_2_$755 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                                final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                final SubLObject _prev_bind_0_$755 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$756 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                        final SubLObject _prev_bind_0_$757 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$756 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$756 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$765 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$766 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                            SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                            try {
                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                final SubLObject _prev_bind_0_$758 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$757 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                    SubLObject cdolist_list_var = nodes;
                                                    SubLObject node = (SubLObject)sbhl_search_methods.NIL;
                                                    node = cdolist_list_var.first();
                                                    while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                        if (sbhl_search_methods.NIL == sbhl_marking_methods.sbhl_recorded_node_p(node, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                                                            final SubLObject _prev_bind_0_$759 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                                            try {
                                                                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                                                try {
                                                                    sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                                                                    if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                                                                        SubLObject cycle = (SubLObject)sbhl_search_methods.NIL;
                                                                        SubLObject pushedP = (SubLObject)sbhl_search_methods.NIL;
                                                                        final SubLObject _prev_bind_0_$760 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                                                                        try {
                                                                            sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                                            try {
                                                                                final SubLObject _prev_bind_0_$761 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                                                                try {
                                                                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                                                                                    sbhl_marking_methods.sbhl_unmark_marked_closure_and_gather(node);
                                                                                }
                                                                                finally {
                                                                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$761, thread);
                                                                                }
                                                                            }
                                                                            finally {
                                                                                final SubLObject _prev_bind_0_$762 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                                                try {
                                                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                                                                    final SubLObject _values = Values.getValuesAsVector();
                                                                                    cycle = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                                                                                    Values.restoreValuesFromVector(_values);
                                                                                }
                                                                                finally {
                                                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$762, thread);
                                                                                }
                                                                            }
                                                                        }
                                                                        finally {
                                                                            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0_$760, thread);
                                                                        }
                                                                        SubLObject cdolist_list_var_$773 = cycle;
                                                                        SubLObject cycle_node = (SubLObject)sbhl_search_methods.NIL;
                                                                        cycle_node = cdolist_list_var_$773.first();
                                                                        while (sbhl_search_methods.NIL != cdolist_list_var_$773) {
                                                                            sbhl_marking_methods.sbhl_record_node(cycle_node, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                                                            if (sbhl_search_methods.NIL != subl_promotions.memberP(cycle_node, cycle_preferred_members, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                                                                                pushedP = (SubLObject)sbhl_search_methods.T;
                                                                                result = (SubLObject)ConsesLow.cons(cycle_node, result);
                                                                            }
                                                                            cdolist_list_var_$773 = cdolist_list_var_$773.rest();
                                                                            cycle_node = cdolist_list_var_$773.first();
                                                                        }
                                                                        if (sbhl_search_methods.NIL == pushedP) {
                                                                            result = (SubLObject)ConsesLow.cons(node, result);
                                                                        }
                                                                    }
                                                                    else {
                                                                        result = (SubLObject)ConsesLow.cons(node, result);
                                                                    }
                                                                }
                                                                finally {
                                                                    final SubLObject _prev_bind_0_$763 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                                    try {
                                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                                                        final SubLObject _values2 = Values.getValuesAsVector();
                                                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                                                        Values.restoreValuesFromVector(_values2);
                                                                    }
                                                                    finally {
                                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$763, thread);
                                                                    }
                                                                }
                                                            }
                                                            finally {
                                                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$759, thread);
                                                            }
                                                        }
                                                        cdolist_list_var = cdolist_list_var.rest();
                                                        node = cdolist_list_var.first();
                                                    }
                                                }
                                                finally {
                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$757, thread);
                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$758, thread);
                                                }
                                            }
                                            finally {
                                                if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                }
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$766, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$765, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$756, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$756, thread);
                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$757, thread);
                                        }
                                        if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                        }
                                    }
                                    finally {
                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$756, thread);
                                    }
                                    if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                }
                                finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$755, thread);
                                }
                            }
                            finally {
                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$755, thread);
                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$755, thread);
                                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$754, thread);
                            }
                        }
                        finally {
                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$754, thread);
                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$753, thread);
                        }
                    }
                    finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$754, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$753, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0_$752, thread);
                    }
                }
                finally {
                    sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_6, thread);
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$751, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$764 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_table$.getDynamicValue(thread));
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$764, thread);
                }
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_table$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 41546L)
    public static SubLObject sbhl_ceilings(final SubLObject module, SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == sbhl_search_methods.UNPROVIDED) {
            candidates = (SubLObject)sbhl_search_methods.NIL;
        }
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        nodes = list_utilities.fast_delete_duplicates(nodes, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL == nodes) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        if (sbhl_search_methods.NIL == list_utilities.singletonP(nodes)) {
            final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
            final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
            final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
            final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                final SubLObject mt_var = mt;
                final SubLObject _prev_bind_0_$776 = mt_relevance_macros.$mt$.currentBinding(thread);
                final SubLObject _prev_bind_1_$777 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_2_$778 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                try {
                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                    final SubLObject tv_var = tv;
                    final SubLObject _prev_bind_0_$777 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$778 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                        if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                            if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                            }
                            else {
                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                            }
                        }
                        final SubLObject _prev_bind_0_$778 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$779 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$779 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                            final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                            final SubLObject _prev_bind_0_$779 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$780 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$781 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$780 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$780 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$789 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_4_$790 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                        SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                        try {
                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                            final SubLObject _prev_bind_0_$782 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$781 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                result = sbhl_common_horizon(nodes, candidates);
                                            }
                                            finally {
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$781, thread);
                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$782, thread);
                                            }
                                        }
                                        finally {
                                            if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                            }
                                        }
                                    }
                                    finally {
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$790, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$789, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$780, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$780, thread);
                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$781, thread);
                                    }
                                    if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    }
                                }
                                finally {
                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$780, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$779, thread);
                            }
                        }
                        finally {
                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$779, thread);
                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$779, thread);
                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$778, thread);
                        }
                    }
                    finally {
                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$778, thread);
                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$777, thread);
                    }
                }
                finally {
                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$778, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$777, thread);
                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$776, thread);
                }
            }
            finally {
                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
            }
        }
        else if (sbhl_search_methods.NIL == candidates) {
            if (sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module)) {
                result = sbhl_min_forward_true_link_nodes(module, nodes.first(), mt, tv);
            }
            else {
                result = nodes;
            }
        }
        else {
            result = sbhl_predicate_relation_to_which(module, nodes.first(), candidates, mt, tv, (SubLObject)sbhl_search_methods.UNPROVIDED);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 42539L)
    public static SubLObject sbhl_floors(final SubLObject module, SubLObject nodes, SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (candidates == sbhl_search_methods.UNPROVIDED) {
            candidates = (SubLObject)sbhl_search_methods.NIL;
        }
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        nodes = list_utilities.fast_delete_duplicates(nodes, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
        if (sbhl_search_methods.NIL == nodes) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        if (sbhl_search_methods.NIL == list_utilities.singletonP(nodes)) {
            final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
            final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
            final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
            final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                final SubLObject mt_var = mt;
                final SubLObject _prev_bind_0_$793 = mt_relevance_macros.$mt$.currentBinding(thread);
                final SubLObject _prev_bind_1_$794 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_2_$795 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                try {
                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                    final SubLObject tv_var = tv;
                    final SubLObject _prev_bind_0_$794 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$795 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                        if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                            if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                            }
                            else {
                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                            }
                        }
                        final SubLObject _prev_bind_0_$795 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$796 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$796 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                            final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                            final SubLObject _prev_bind_0_$796 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$797 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$798 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$797 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$797 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$806 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_4_$807 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                        SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                        try {
                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                            final SubLObject _prev_bind_0_$799 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$798 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                result = sbhl_common_horizon(nodes, candidates);
                                            }
                                            finally {
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$798, thread);
                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$799, thread);
                                            }
                                        }
                                        finally {
                                            if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                            }
                                        }
                                    }
                                    finally {
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$807, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$806, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$797, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$797, thread);
                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$798, thread);
                                    }
                                    if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    }
                                }
                                finally {
                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$797, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$796, thread);
                            }
                        }
                        finally {
                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$796, thread);
                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$796, thread);
                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$795, thread);
                        }
                    }
                    finally {
                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$795, thread);
                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$794, thread);
                    }
                }
                finally {
                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$795, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$794, thread);
                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$793, thread);
                }
            }
            finally {
                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
            }
        }
        else if (sbhl_search_methods.NIL == candidates) {
            if (sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module)) {
                result = sbhl_max_backward_true_link_nodes(module, nodes.first(), mt, tv);
            }
            else {
                result = nodes;
            }
        }
        else {
            result = sbhl_inverse_relation_to_which(module, nodes.first(), candidates, mt, tv);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 43532L)
    public static SubLObject sbhl_predicate_relation_to_which(final SubLObject module, final SubLObject node, final SubLObject candidates, SubLObject mt, SubLObject tv, SubLObject excl_link_node) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (excl_link_node == sbhl_search_methods.UNPROVIDED) {
            excl_link_node = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$810 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$811 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$812 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$811 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$812 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$812 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$813 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$813 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$813 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$814 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$815 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$814 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$814 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$823 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$824 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$816 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$815 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            if (sbhl_search_methods.NIL != excl_link_node) {
                                                sbhl_marking_utilities.sbhl_mark_node_marked(excl_link_node, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                                            if (sbhl_search_methods.NIL != excl_link_node) {
                                                sbhl_marking_utilities.sbhl_mark_node_unmarked(excl_link_node, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                            }
                                            SubLObject cdolist_list_var = candidates;
                                            SubLObject candidate = (SubLObject)sbhl_search_methods.NIL;
                                            candidate = cdolist_list_var.first();
                                            while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                final SubLObject _prev_bind_0_$817 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)(sbhl_module_vars.get_sbhl_module_link_pred(module).eql(sbhl_search_methods.$const36$genlInverse) ? sbhl_search_methods.T : sbhl_search_methods.NIL), thread);
                                                    if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                                                        result = (SubLObject)ConsesLow.cons(candidate, result);
                                                    }
                                                }
                                                finally {
                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$817, thread);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                candidate = cdolist_list_var.first();
                                            }
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$815, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$816, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$824, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$823, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$814, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$814, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$815, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$814, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$813, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$813, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$813, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$812, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$812, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$811, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$812, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$811, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$810, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 44462L)
    public static SubLObject sbhl_which_with_predicate_relation(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 44742L)
    public static SubLObject sbhl_predicate_relation_to_which_excluding_link_node(final SubLObject module, final SubLObject node, final SubLObject candidates, final SubLObject excl_link_node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        return sbhl_predicate_relation_to_which(module, node, candidates, mt, tv, excl_link_node);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 44994L)
    public static SubLObject sbhl_inverse_relation_to_which(final SubLObject module, final SubLObject node, final SubLObject candidates, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$828 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$829 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$830 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$829 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$830 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$830 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$831 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$831 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$831 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$832 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$833 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$832 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$832 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$841 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$842 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$834 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$833 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                                            SubLObject cdolist_list_var = candidates;
                                            SubLObject candidate = (SubLObject)sbhl_search_methods.NIL;
                                            candidate = cdolist_list_var.first();
                                            while (sbhl_search_methods.NIL != cdolist_list_var) {
                                                if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                                                    result = (SubLObject)ConsesLow.cons(candidate, result);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                candidate = cdolist_list_var.first();
                                            }
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$833, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$834, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$842, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$841, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$832, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$832, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$833, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$832, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$831, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$831, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$831, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$830, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$830, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$829, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$830, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$829, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$828, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 45509L)
    public static SubLObject sbhl_gather_first_target_marked_node(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            try {
                final SubLObject _prev_bind_0_$845 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_compose_fn$.currentBinding(thread);
                final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                    sbhl_search_vars.$sbhl_compose_fn$.bind((SubLObject)sbhl_search_methods.$sym31$SBHL_MARKED_IN_TARGET_SPACE_P, thread);
                    sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym19$SBHL_GATHER_FIRST_NON_NIL_RESULT, thread);
                    result = sbhl_transitive_closure(node);
                }
                finally {
                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$sbhl_compose_fn$.rebind(_prev_bind_3, thread);
                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$845, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$846 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$846, thread);
                }
            }
        }
        finally {
            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 45982L)
    public static SubLObject sbhl_first_common_horizon(final SubLObject node1, final SubLObject node2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$847 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject _prev_bind_0_$848 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread), thread);
                            sbhl_marking_methods.sbhl_mark_closure_as_marked(node1);
                            final SubLObject _prev_bind_0_$849 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                try {
                                    final SubLObject _prev_bind_0_$850 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                                        try {
                                            result = sbhl_gather_first_target_marked_node(node2);
                                        }
                                        finally {
                                            final SubLObject _prev_bind_0_$851 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                                final SubLObject _values = Values.getValuesAsVector();
                                                sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                Values.restoreValuesFromVector(_values);
                                            }
                                            finally {
                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$851, thread);
                                            }
                                        }
                                    }
                                    finally {
                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$850, thread);
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$852 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                        final SubLObject _values2 = Values.getValuesAsVector();
                                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        Values.restoreValuesFromVector(_values2);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$852, thread);
                                    }
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$849, thread);
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_2, thread);
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$848, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$853 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                            final SubLObject _values3 = Values.getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            Values.restoreValuesFromVector(_values3);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$853, thread);
                        }
                    }
                }
                finally {
                    sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_$847, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$854 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$854, thread);
                }
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 46327L)
    public static SubLObject sbhl_first_floor_of_node_pair(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$855 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$856 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$857 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$856 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$857 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$857 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$858 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$858 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$858 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$859 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$860 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$859 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$859 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$868 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$869 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_first_common_horizon(node1, node2);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$869, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$868, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$859, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$859, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$860, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$859, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$858, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$858, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$858, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$857, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$857, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$856, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$857, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$856, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$855, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 46728L)
    public static SubLObject sbhl_first_ceiling_of_node_pair(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$870 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$871 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$872 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$871 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$872 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$872 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$873 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$873 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$873 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$874 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$875 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$874 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$874 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$883 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$884 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_first_common_horizon(node1, node2);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$884, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$883, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$874, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$874, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$875, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$874, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$873, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$873, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$873, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$872, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$872, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$871, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$872, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$871, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$870, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 47093L)
    public static SubLObject sbhl_forward_true_goals_with_no_path_from_nodes(final SubLObject module, final SubLObject nodes, final SubLObject goals, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$885 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$886 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$887 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$886 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$887 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$887 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$888 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$888 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$888 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$889 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$890 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$889 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$889 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$898 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$899 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$891 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$890 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_all_goals_with_no_path_from_nodes(nodes, goals);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$890, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$891, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$899, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$898, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$889, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$889, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$890, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$889, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$888, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$888, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$888, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$887, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$887, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$886, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$887, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$886, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$885, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 47597L)
    public static SubLObject sbhl_all_goals_with_no_path_from_nodes(final SubLObject nodes, final SubLObject goals) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        SubLObject cdolist_list_var = nodes;
        SubLObject node = (SubLObject)sbhl_search_methods.NIL;
        node = cdolist_list_var.first();
        while (sbhl_search_methods.NIL != cdolist_list_var) {
            final SubLObject _prev_bind_0 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
            try {
                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
            }
            finally {
                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0, thread);
            }
            cdolist_list_var = cdolist_list_var.rest();
            node = cdolist_list_var.first();
        }
        cdolist_list_var = goals;
        SubLObject goal = (SubLObject)sbhl_search_methods.NIL;
        goal = cdolist_list_var.first();
        while (sbhl_search_methods.NIL != cdolist_list_var) {
            if (sbhl_search_methods.NIL == sbhl_marking_utilities.sbhl_search_path_termination_p(goal, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                result = (SubLObject)ConsesLow.cons(goal, result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            goal = cdolist_list_var.first();
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 48028L)
    public static SubLObject sbhl_all_forward_true_nodes_between(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$902 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$903 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$904 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$903 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$904 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$904 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$905 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$905 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$905 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$906 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$907 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$906 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$906 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$915 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$916 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$908 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$907 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_closure_between(node1, node2);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$907, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$908, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$916, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$915, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$906, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$906, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$907, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$906, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$905, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$905, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$905, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$904, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$904, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$903, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$904, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$903, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$902, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 48500L)
    public static SubLObject sbhl_closure_between(final SubLObject node1, final SubLObject node2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        sbhl_marking_methods.sbhl_mark_closure_as_marked(node1);
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            try {
                final SubLObject _prev_bind_0_$919 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                try {
                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                    sbhl_marking_methods.sbhl_unmark_marked_closure_and_gather(node2);
                }
                finally {
                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$919, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$920 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$920, thread);
                }
            }
        }
        finally {
            sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 48892L)
    public static SubLObject sbhl_all_forward_true_nodes_among(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL != nodes) {
            final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
            final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
            final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
            final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                final SubLObject mt_var = mt;
                final SubLObject _prev_bind_0_$921 = mt_relevance_macros.$mt$.currentBinding(thread);
                final SubLObject _prev_bind_1_$922 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_2_$923 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                try {
                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                    final SubLObject tv_var = tv;
                    final SubLObject _prev_bind_0_$922 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$923 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                        if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                            if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                            }
                            else {
                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                            }
                        }
                        final SubLObject _prev_bind_0_$923 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$924 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$924 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                            final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                            final SubLObject _prev_bind_0_$924 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$925 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$926 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$925 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$925 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$934 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_4_$935 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                        SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                        try {
                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                            final SubLObject _prev_bind_0_$927 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$926 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                result = sbhl_closure_among(node, nodes);
                                            }
                                            finally {
                                                sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$926, thread);
                                                sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$927, thread);
                                            }
                                        }
                                        finally {
                                            if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                            }
                                        }
                                    }
                                    finally {
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$935, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$934, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$925, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$925, thread);
                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$926, thread);
                                    }
                                    if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    }
                                }
                                finally {
                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$925, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$924, thread);
                            }
                        }
                        finally {
                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$924, thread);
                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$924, thread);
                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$923, thread);
                        }
                    }
                    finally {
                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$923, thread);
                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$922, thread);
                    }
                }
                finally {
                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$923, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$922, thread);
                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$921, thread);
                }
            }
            finally {
                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 49344L)
    public static SubLObject sbhl_all_backward_true_nodes_among(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL != nodes) {
            if (sbhl_search_methods.NIL != list_utilities.every_in_list((SubLObject)sbhl_search_methods.$sym37$FORT_P, nodes, (SubLObject)sbhl_search_methods.UNPROVIDED) && Functions.apply((SubLObject)sbhl_search_methods.$sym38$_, Mapping.mapcar((SubLObject)sbhl_search_methods.$sym39$GENL_CARDINALITY, nodes)).numL(cardinality_estimates.spec_cardinality(node))) {
                SubLObject cdolist_list_var = nodes;
                SubLObject backward_node = (SubLObject)sbhl_search_methods.NIL;
                backward_node = cdolist_list_var.first();
                while (sbhl_search_methods.NIL != cdolist_list_var) {
                    if (sbhl_search_methods.NIL != sbhl_predicate_relation_p(module, backward_node, node, mt, tv)) {
                        result = (SubLObject)ConsesLow.cons(backward_node, result);
                    }
                    cdolist_list_var = cdolist_list_var.rest();
                    backward_node = cdolist_list_var.first();
                }
            }
            else {
                final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                    sbhl_module_vars.$sbhl_module$.bind(module, thread);
                    final SubLObject mt_var = mt;
                    final SubLObject _prev_bind_0_$938 = mt_relevance_macros.$mt$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$939 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$940 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                    try {
                        mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                        mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                        mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                        final SubLObject tv_var = tv;
                        final SubLObject _prev_bind_0_$939 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$940 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                            sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                            if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                    sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                }
                                else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                    sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                }
                                else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                    Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                                }
                                else {
                                    Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                    Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                                }
                            }
                            final SubLObject _prev_bind_0_$940 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$941 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                            final SubLObject _prev_bind_2_$941 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                                final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                final SubLObject _prev_bind_0_$941 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$942 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                        final SubLObject _prev_bind_0_$943 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$942 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$942 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$951 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                        final SubLObject _prev_bind_4_$952 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                            final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                            SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                            try {
                                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                final SubLObject _prev_bind_0_$944 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$943 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                                    result = sbhl_closure_among(node, nodes);
                                                }
                                                finally {
                                                    sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$943, thread);
                                                    sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$944, thread);
                                                }
                                            }
                                            finally {
                                                if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                }
                                            }
                                        }
                                        finally {
                                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$952, thread);
                                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$951, thread);
                                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$942, thread);
                                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$942, thread);
                                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$943, thread);
                                        }
                                        if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                        }
                                    }
                                    finally {
                                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$942, thread);
                                    }
                                    if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                    }
                                }
                                finally {
                                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$941, thread);
                                }
                            }
                            finally {
                                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$941, thread);
                                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$941, thread);
                                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$940, thread);
                            }
                        }
                        finally {
                            sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$940, thread);
                            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$939, thread);
                        }
                    }
                    finally {
                        mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$940, thread);
                        mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$939, thread);
                        mt_relevance_macros.$mt$.rebind(_prev_bind_0_$938, thread);
                    }
                }
                finally {
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
                    sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                    sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
                }
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 50126L)
    public static SubLObject sbhl_closure_among(final SubLObject node, final SubLObject nodes) {
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL != nodes) {
            sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
            SubLObject cdolist_list_var = nodes;
            SubLObject candidate = (SubLObject)sbhl_search_methods.NIL;
            candidate = cdolist_list_var.first();
            while (sbhl_search_methods.NIL != cdolist_list_var) {
                if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                    result = (SubLObject)ConsesLow.cons(candidate, result);
                }
                cdolist_list_var = cdolist_list_var.rest();
                candidate = cdolist_list_var.first();
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 50453L)
    public static SubLObject sbhl_gather_dependent_nodes(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        sbhl_search_utilities.sbhl_sweep(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED), sbhl_link_vars.get_sbhl_link_direction(), sbhl_search_vars.get_sbhl_tv(), sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread), (SubLObject)sbhl_search_methods.$sym40$SBHL_PUSH_DEPENDENT_NODES_ONTO_RESULT, node, (SubLObject)sbhl_search_methods.UNPROVIDED);
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 50775L)
    public static SubLObject sbhl_push_dependent_nodes_onto_result(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        sbhl_search_vars.sbhl_continue_search_path();
        SubLObject dependentP = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL == sbhl_search_vars.sbhl_dependents_cut_node_p(node)) {
            final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                try {
                    final SubLObject _prev_bind_0_$955 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                        sbhl_search_utilities.sbhl_sweep(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED), sbhl_link_vars.get_sbhl_opposite_link_direction(), sbhl_search_vars.get_sbhl_tv(), sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread), (SubLObject)sbhl_search_methods.$sym41$SBHL_CHECK_TARGET_MARKING_FOR_DEPENDENCE, node, (SubLObject)sbhl_search_methods.UNPROVIDED);
                    }
                    finally {
                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$955, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$956 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        dependentP = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$956, thread);
                    }
                }
            }
            finally {
                sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_0, thread);
            }
        }
        if (sbhl_search_methods.NIL != dependentP) {
            sbhl_search_vars.sbhl_stop_search_path();
        }
        else {
            sbhl_search_vars.$sbhl_result$.setDynamicValue((SubLObject)ConsesLow.cons(node, sbhl_search_vars.$sbhl_result$.getDynamicValue(thread)), thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 51407L)
    public static SubLObject sbhl_check_target_marking_for_dependence(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        sbhl_search_vars.sbhl_continue_search_path();
        if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread))) {
            sbhl_search_vars.$sbhl_result$.setDynamicValue((SubLObject)sbhl_search_methods.T, thread);
            sbhl_search_vars.$sbhl_finishedP$.setDynamicValue((SubLObject)sbhl_search_methods.T, thread);
        }
        else if (sbhl_search_methods.NIL != sbhl_search_vars.sbhl_dependents_cut_node_p(node)) {
            sbhl_search_vars.sbhl_stop_search_path();
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 51847L)
    public static SubLObject sbhl_dependent_nodes(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$957 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                    final SubLObject _prev_bind_0_$958 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                        sbhl_marking_methods.sbhl_mark_proper_closure_as_marked(node);
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$958, thread);
                    }
                    if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_search_path_termination_p(node, (SubLObject)sbhl_search_methods.UNPROVIDED)) {
                        sbhl_marking_methods.sbhl_unmark_marked_closure(node);
                    }
                }
                finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$957, thread);
                }
                final SubLObject _prev_bind_0_$959 = sbhl_search_vars.$sbhl_dependents_cut_node$.currentBinding(thread);
                final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_result$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_dependents_cut_node$.bind(node, thread);
                    sbhl_search_vars.$sbhl_result$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                    try {
                        sbhl_gather_dependent_nodes(node);
                    }
                    finally {
                        final SubLObject _prev_bind_0_$960 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            result = sbhl_search_vars.$sbhl_result$.getDynamicValue(thread);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$960, thread);
                        }
                    }
                }
                finally {
                    sbhl_search_vars.$sbhl_result$.rebind(_prev_bind_2, thread);
                    sbhl_search_vars.$sbhl_dependents_cut_node$.rebind(_prev_bind_0_$959, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$961 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$961, thread);
                }
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 52497L)
    public static SubLObject sbhl_all_dependent_backward_true_nodes(final SubLObject module, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$962 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$963 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$964 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$963 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$964 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$964 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$965 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$965 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$965 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$966 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$967 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$966 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$966 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$975 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$976 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        final SubLObject _prev_bind_0_$968 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$967 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
                                        try {
                                            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
                                            result = sbhl_dependent_nodes(node);
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_1_$967, thread);
                                            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0_$968, thread);
                                        }
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$976, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$975, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$966, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$966, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$967, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$966, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$965, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$965, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$965, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$964, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$964, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$963, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$964, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$963, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$962, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 53709L)
    public static SubLObject sbhl_predicate_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject pred = sbhl_module_vars.get_sbhl_module_link_pred(module);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL != sbhl_cache.sbhl_cache_use_possible_p(pred, node1, node2)) {
            final SubLObject mt_var = mt;
            SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                result = sbhl_cache.sbhl_cached_predicate_relation_p(pred, node1, node2, (SubLObject)sbhl_search_methods.UNPROVIDED);
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
            if (sbhl_search_methods.NIL != sbhl_search_methods.$debug_sbhl_cache_inconsistency_problemP$.getDynamicValue(thread)) {
                SubLObject non_cached_result = (SubLObject)sbhl_search_methods.NIL;
                _prev_bind_0 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject _prev_bind_0_$979 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                        final SubLObject _prev_bind_6 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        final SubLObject _prev_bind_7 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                            sbhl_module_vars.$sbhl_module$.bind(module, thread);
                            final SubLObject mt_var2 = mt;
                            final SubLObject _prev_bind_0_$980 = mt_relevance_macros.$mt$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$981 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                            final SubLObject _prev_bind_2_$982 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                            try {
                                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var2), thread);
                                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var2), thread);
                                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var2), thread);
                                final SubLObject tv_var = tv;
                                final SubLObject _prev_bind_0_$981 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$982 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                        }
                                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                        }
                                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                                        }
                                        else {
                                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                                        }
                                    }
                                    final SubLObject _prev_bind_0_$982 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$983 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$983 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                                        final SubLObject _prev_bind_0_$983 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                        try {
                                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                            final SubLObject _prev_bind_0_$984 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                            try {
                                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                                final SubLObject _prev_bind_0_$985 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$984 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                                final SubLObject _prev_bind_2_$984 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                                final SubLObject _prev_bind_3_$993 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                                final SubLObject _prev_bind_4_$994 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                                try {
                                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                                    try {
                                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                                        non_cached_result = sbhl_path_from_node_to_node_p(node1, node2);
                                                    }
                                                    finally {
                                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                                        }
                                                    }
                                                }
                                                finally {
                                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$994, thread);
                                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$993, thread);
                                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$984, thread);
                                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$984, thread);
                                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$985, thread);
                                                }
                                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                                }
                                            }
                                            finally {
                                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$984, thread);
                                            }
                                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                            }
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$983, thread);
                                        }
                                    }
                                    finally {
                                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$983, thread);
                                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$983, thread);
                                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$982, thread);
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$982, thread);
                                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$981, thread);
                                }
                            }
                            finally {
                                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$982, thread);
                                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$981, thread);
                                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$980, thread);
                            }
                        }
                        finally {
                            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_7, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_6, thread);
                            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_5, thread);
                            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$979, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$986 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$986, thread);
                        }
                    }
                }
                finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0, thread);
                }
                if (!result.equal(non_cached_result)) {
                    PrintLow.format((SubLObject)sbhl_search_methods.T, (SubLObject)sbhl_search_methods.$str42$__sbhl_predicate_relation_p__cach, result, non_cached_result);
                    PrintLow.format((SubLObject)sbhl_search_methods.T, (SubLObject)sbhl_search_methods.$str43$_______cached___S__clet__cached_r, new SubLObject[] { result, mt, pred, node1, node2 });
                    PrintLow.format((SubLObject)sbhl_search_methods.T, (SubLObject)sbhl_search_methods.$str44$___non_cached___S__clet__non_cach, new SubLObject[] { non_cached_result, pred, mt, tv, node1, node2 });
                }
            }
        }
        else {
            final SubLObject _prev_bind_8 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
            try {
                sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                try {
                    final SubLObject _prev_bind_0_$987 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    final SubLObject _prev_bind_10 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                        sbhl_module_vars.$sbhl_module$.bind(module, thread);
                        final SubLObject mt_var3 = mt;
                        final SubLObject _prev_bind_0_$988 = mt_relevance_macros.$mt$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$985 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$985 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                        try {
                            mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var3), thread);
                            mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var3), thread);
                            mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var3), thread);
                            final SubLObject tv_var2 = tv;
                            final SubLObject _prev_bind_0_$989 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$986 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                            try {
                                sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var2) ? tv_var2 : sbhl_search_vars.get_sbhl_true_tv(), thread);
                                sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var2) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                                if (sbhl_search_methods.NIL != tv_var2 && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var2)) {
                                    final SubLObject pcase_var2 = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                                    if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                        sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var2, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                    }
                                    else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                        sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var2, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                    }
                                    else if (pcase_var2.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                        Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var2, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                                    }
                                    else {
                                        Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                        Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var2, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                                    }
                                }
                                final SubLObject _prev_bind_0_$990 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$987 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$986 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                                    sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                                    sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                                    final SubLObject source2 = sbhl_marking_vars.sbhl_new_space_source();
                                    final SubLObject _prev_bind_0_$991 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                                    try {
                                        sbhl_marking_vars.$sbhl_space$.bind((source2 == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source2), thread);
                                        final SubLObject _prev_bind_0_$992 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                        try {
                                            sbhl_marking_vars.$sbhl_gather_space$.bind((source2 == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source2), thread);
                                            final SubLObject _prev_bind_0_$993 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$988 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                            final SubLObject _prev_bind_2_$987 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                            final SubLObject _prev_bind_3_$994 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                            final SubLObject _prev_bind_4_$995 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                            try {
                                                sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                                final SubLObject rw_lock_var2 = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                                SubLObject needs_to_releaseP2 = (SubLObject)sbhl_search_methods.NIL;
                                                try {
                                                    needs_to_releaseP2 = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var2);
                                                    result = sbhl_path_from_node_to_node_p(node1, node2);
                                                }
                                                finally {
                                                    if (sbhl_search_methods.NIL != needs_to_releaseP2) {
                                                        ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var2);
                                                    }
                                                }
                                            }
                                            finally {
                                                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$995, thread);
                                                sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$994, thread);
                                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$987, thread);
                                                sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$988, thread);
                                                sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$993, thread);
                                            }
                                            if (source2 == sbhl_search_methods.$kw12$RESOURCE) {
                                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                            }
                                        }
                                        finally {
                                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$992, thread);
                                        }
                                        if (source2 == sbhl_search_methods.$kw12$RESOURCE) {
                                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                        }
                                    }
                                    finally {
                                        sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$991, thread);
                                    }
                                }
                                finally {
                                    sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$986, thread);
                                    sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$987, thread);
                                    sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$990, thread);
                                }
                            }
                            finally {
                                sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$986, thread);
                                sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$989, thread);
                            }
                        }
                        finally {
                            mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$985, thread);
                            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$985, thread);
                            mt_relevance_macros.$mt$.rebind(_prev_bind_0_$988, thread);
                        }
                    }
                    finally {
                        sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_10, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_9, thread);
                        sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
                        sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
                        sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0_$987, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$994 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$994, thread);
                    }
                }
            }
            finally {
                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_8, thread);
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 55278L)
    public static SubLObject sbhl_predicate_relation_in_space_p(final SubLObject module, final SubLObject node, final SubLObject goal, SubLObject space, SubLObject gather_space) {
        if (space == sbhl_search_methods.UNPROVIDED) {
            space = sbhl_marking_vars.$sbhl_space$.getDynamicValue();
        }
        if (gather_space == sbhl_search_methods.UNPROVIDED) {
            gather_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        final SubLObject _prev_bind_7 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
        final SubLObject _prev_bind_8 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
        final SubLObject _prev_bind_9 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
        final SubLObject _prev_bind_10 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
        final SubLObject _prev_bind_11 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            sbhl_marking_vars.$sbhl_space$.bind(space, thread);
            sbhl_marking_vars.$sbhl_gather_space$.bind(gather_space, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind((SubLObject)sbhl_search_methods.T, thread);
            sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
            final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
            final SubLObject _prev_bind_0_$1013 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
            try {
                sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                final SubLObject _prev_bind_0_$1014 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                    final SubLObject _prev_bind_0_$1015 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1016 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1017 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                    final SubLObject _prev_bind_3_$1018 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                    final SubLObject _prev_bind_4_$1019 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                        sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                        final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                        SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                        try {
                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                            result = sbhl_path_from_node_to_node_p(node, goal);
                        }
                        finally {
                            if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                            }
                        }
                    }
                    finally {
                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1019, thread);
                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1018, thread);
                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1017, thread);
                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1016, thread);
                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1015, thread);
                    }
                    if (source == sbhl_search_methods.$kw12$RESOURCE) {
                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                    }
                }
                finally {
                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1014, thread);
                }
                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                }
            }
            finally {
                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1013, thread);
            }
        }
        finally {
            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_11, thread);
            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_10, thread);
            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_9, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_8, thread);
            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_7, thread);
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_6, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 55931L)
    public static SubLObject sbhl_non_justifying_predicate_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_justification_search_p$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_apply_unwind_function_p$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_justification_search_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_search_vars.$sbhl_apply_unwind_function_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            result = sbhl_predicate_relation_p(module, node1, node2, mt, tv);
        }
        finally {
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_apply_unwind_function_p$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_justification_search_p$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 56388L)
    public static SubLObject sbhl_predicate_relation_within_multiple_searches_p(final SubLObject module, final SubLObject node, final SubLObject goal, final SubLObject fail_space, final SubLObject goal_space) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_precomputed_goal_space$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_suspend_new_spacesP$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_7 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_8 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_precomputed_goal_space$.bind(goal_space, thread);
            sbhl_marking_vars.$sbhl_space$.bind(fail_space, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.bind((SubLObject)sbhl_search_methods.T, thread);
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject _prev_bind_0_$1020 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1021 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1022 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                final SubLObject _prev_bind_0_$1021 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                    final SubLObject _prev_bind_0_$1022 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                        final SubLObject _prev_bind_0_$1023 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$1022 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$1023 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                        final SubLObject _prev_bind_3_$1028 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                        final SubLObject _prev_bind_4_$1029 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                            sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                            sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                            sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                            final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                            SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                            try {
                                needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                final SubLObject _prev_bind_0_$1024 = sbhl_search_vars.$sbhl_check_for_goal_marking_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_check_for_goal_marking_p$.bind((SubLObject)sbhl_search_methods.T, thread);
                                    result = sbhl_path_from_node_to_node_p(node, goal);
                                }
                                finally {
                                    sbhl_search_vars.$sbhl_check_for_goal_marking_p$.rebind(_prev_bind_0_$1024, thread);
                                }
                            }
                            finally {
                                if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                    ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                }
                            }
                        }
                        finally {
                            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1029, thread);
                            sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1028, thread);
                            sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1023, thread);
                            sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1022, thread);
                            sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1023, thread);
                        }
                        if (source == sbhl_search_methods.$kw12$RESOURCE) {
                            sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                        }
                    }
                    finally {
                        sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1022, thread);
                    }
                    if (source == sbhl_search_methods.$kw12$RESOURCE) {
                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                    }
                }
                finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1021, thread);
                }
            }
            finally {
                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1022, thread);
                sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1021, thread);
                sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1020, thread);
            }
            if (sbhl_search_methods.NIL != result) {
                if (sbhl_search_methods.NIL != sbhl_link_vars.sbhl_node_object_p(result) && sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_node_marked_precompute_goal_p(result)) {
                    sbhl_marking_utilities.sbhl_mark_node_marked(result, fail_space);
                }
                sbhl_marking_methods.sbhl_unmark_all_backward_true_nodes_and_map((SubLObject)sbhl_search_methods.$sym45$SBHL_MARK_NODE_IN_PRECOMPUTE_SPACE, goal);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_8, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_7, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_6, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_4, thread);
            sbhl_marking_vars.$sbhl_suspend_new_spacesP$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_precomputed_goal_space$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 57349L)
    public static SubLObject sbhl_inverse_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1031 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1032 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1033 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1032 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1033 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1033 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1034 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1034 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1034 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1035 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1036 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1035 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1035 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1044 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1045 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_node_p(node1, node2);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1045, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1044, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1035, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1035, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1036, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1035, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1034, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1034, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1034, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1033, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1033, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1032, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1033, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1032, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1031, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 57724L)
    public static SubLObject sbhl_false_predicate_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_methods.$sbhl_search_self_incompatibility_check_disabledP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_methods.$sbhl_search_self_incompatibility_check_disabledP$.bind(incompatible_mt_related_moduleP(module), thread);
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1046 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1047 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1048 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1047 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1048 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1048 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1049 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1049 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const14$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1049 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1050 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1051 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1050 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1050 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1059 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1060 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_node_p(node1, node2);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1060, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1059, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1050, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1050, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1051, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1050, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1049, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1049, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1049, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1048, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1048, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1047, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1048, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1047, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1046, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_6, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_2, thread);
            sbhl_search_methods.$sbhl_search_self_incompatibility_check_disabledP$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 58243L)
    public static SubLObject sbhl_false_inverse_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1061 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1062 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1063 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1062 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1063 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1063 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1064 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1064 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const14$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1064 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1065 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1066 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1065 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1065 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1074 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1075 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_node_p(node1, node2);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1075, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1074, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1065, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1065, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1066, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1065, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1064, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1064, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1064, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1063, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1063, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1062, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1063, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1062, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1061, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 58627L)
    public static SubLObject sbhl_path_from_node_to_node_p(final SubLObject node1, final SubLObject node2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        inference_metrics.increment_sbhl_graph_attempt_historical_count();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw46$BOOLEAN, thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            final SubLObject premarkingP = sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p();
            SubLObject goal_fn = (SubLObject)sbhl_search_methods.$sym47$SBHL_NODE_IS_GOAL_NODE;
            SubLObject goal_space = sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread);
            if (sbhl_search_methods.NIL != premarkingP) {
                final SubLObject _prev_bind_0_$1076 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1077 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                try {
                    sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_transfers_through_module(sbhl_search_vars.get_sbhl_search_module()), thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)(sbhl_module_utilities.get_sbhl_link_pred(sbhl_search_vars.get_sbhl_search_module()).eql(sbhl_search_methods.$const48$negationInverse) ? sbhl_search_methods.T : sbhl_search_vars.$genl_inverse_mode_p$.getDynamicValue(thread)), thread);
                    sbhl_marking_methods.sbhl_premark_gather_nodes(node2);
                }
                finally {
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$1077, thread);
                    sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_0_$1076, thread);
                }
                goal_fn = (SubLObject)sbhl_search_methods.$sym49$SBHL_NODE_MARKED_AS_GOAL_NODE;
                goal_space = sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread);
            }
            final SubLObject _prev_bind_0_$1077 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1078 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1080 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
            final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
            final SubLObject _prev_bind_5 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
            final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_unmarking_search_p$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                sbhl_search_vars.$sbhl_consider_node_fn$.bind(goal_fn, thread);
                sbhl_search_vars.$sbhl_goal_node$.bind(node2, thread);
                sbhl_marking_vars.$sbhl_goal_space$.bind(goal_space, thread);
                sbhl_search_vars.$sbhl_unmarking_search_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                result = sbhl_transitive_closure(node1);
            }
            finally {
                sbhl_search_vars.$sbhl_unmarking_search_p$.rebind(_prev_bind_6, thread);
                sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_5, thread);
                sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_4, thread);
                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$1080, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$1078, thread);
                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0_$1077, thread);
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
        }
        if (sbhl_search_methods.NIL != result) {
            inference_metrics.increment_sbhl_graph_success_historical_count();
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 59097L)
    public static SubLObject sbhl_disjoins_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject disjoins_module = sbhl_module_utilities.get_sbhl_disjoins_module(module);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        result = sbhl_predicate_relation_p(disjoins_module, node1, node2, mt, tv);
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 59499L)
    public static SubLObject why_sbhl_predicate_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (behavior == sbhl_search_methods.UNPROVIDED) {
            behavior = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        return sbhl_search_utilities.sbhl_handle_justification((SubLObject)sbhl_search_methods.$sym50$SBHL_PREDICATE_RELATION_P, module, node1, node2, mt, tv, behavior, (SubLObject)sbhl_search_methods.T);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 59808L)
    public static SubLObject why_sbhl_false_predicate_relation_p(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (behavior == sbhl_search_methods.UNPROVIDED) {
            behavior = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        return sbhl_search_utilities.sbhl_handle_justification((SubLObject)sbhl_search_methods.$sym51$SBHL_FALSE_PREDICATE_RELATION_P, module, node1, node2, mt, tv, behavior, (SubLObject)sbhl_search_methods.NIL);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 60292L)
    public static SubLObject why_sbhl_relationP(final SubLObject module, final SubLObject node1, final SubLObject node2, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (behavior == sbhl_search_methods.UNPROVIDED) {
            behavior = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject bool_fn = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL != sbhl_search_vars.sbhl_true_tv_p(tv) || (sbhl_search_methods.NIL == tv && sbhl_search_methods.NIL != sbhl_search_vars.sbhl_true_tv_p(sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread)))) {
            if (sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_simple_module_p(module) || sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module)) {
                bool_fn = (SubLObject)sbhl_search_methods.$sym50$SBHL_PREDICATE_RELATION_P;
            }
            else if (sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_disjoins_module_p(module)) {
                bool_fn = (SubLObject)sbhl_search_methods.$sym52$SBHL_IMPLIED_DISJOINS_RELATION_P;
            }
            else if (sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_time_module_p(module)) {}
        }
        else if (sbhl_search_methods.NIL != sbhl_search_vars.sbhl_false_tv_p(tv) || (sbhl_search_methods.NIL == tv && sbhl_search_methods.NIL != sbhl_search_vars.sbhl_false_tv_p(sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread)))) {
            if (sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_simple_module_p(module) || sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_transfers_through_module_p(module)) {
                bool_fn = (SubLObject)sbhl_search_methods.$sym53$SBHL_IMPLIED_FALSE_PREDICATE_RELATION_P;
            }
            else if (sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_disjoins_module_p(module)) {
                bool_fn = (SubLObject)sbhl_search_methods.$sym51$SBHL_FALSE_PREDICATE_RELATION_P;
            }
            else if (sbhl_search_methods.NIL != sbhl_module_utilities.sbhl_time_module_p(module)) {}
        }
        else {
            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.THREE_INTEGER, (SubLObject)sbhl_search_methods.$str54$Invalid_TV_argument__a__or__sbhl_, tv, sbhl_search_vars.$sbhl_tv$.getDynamicValue(thread), (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
        }
        if (sbhl_search_methods.NIL != bool_fn) {
            return sbhl_search_utilities.sbhl_handle_justification(bool_fn, module, node1, node2, mt, tv, behavior, (SubLObject)sbhl_search_methods.UNPROVIDED);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 61404L)
    public static SubLObject sbhl_predicate_relation_with_any_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        if (sbhl_search_methods.NIL == nodes) {
            return (SubLObject)sbhl_search_methods.NIL;
        }
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1081 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1082 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1083 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1082 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1083 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1083 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1084 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1084 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1084 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1085 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1086 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1085 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1085 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1094 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1095 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_any_of_nodes_p(node, nodes);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1095, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1094, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1085, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1085, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1086, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1085, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1084, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1084, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1084, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1083, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1083, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1082, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1083, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1082, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1081, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 61897L)
    public static SubLObject why_some_sbhl_predicate_relation_among_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv, SubLObject behavior) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        if (behavior == sbhl_search_methods.UNPROVIDED) {
            behavior = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        return sbhl_search_utilities.sbhl_handle_justification((SubLObject)sbhl_search_methods.$sym55$SBHL_PREDICATE_RELATION_WITH_ANY_P, module, node, nodes, mt, tv, behavior, (SubLObject)sbhl_search_methods.T);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 62146L)
    public static SubLObject sbhl_inverse_relation_with_any_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1096 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1097 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1098 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1097 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1098 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1098 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1099 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1099 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1099 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1100 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1101 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1100 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1100 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1109 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1110 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_any_of_nodes_p(node, nodes);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1110, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1109, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1100, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1100, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1101, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1100, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1099, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1099, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1099, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1098, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1098, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1097, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1098, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1097, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1096, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 62547L)
    public static SubLObject sbhl_false_predicate_relation_with_any_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1111 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1112 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1113 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1112 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1113 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1113 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1114 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1114 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const14$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1114 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1115 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1116 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1115 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1115 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1124 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1125 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_any_of_nodes_p(node, nodes);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1125, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1124, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1115, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1115, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1116, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1115, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1114, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1114, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1114, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1113, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1113, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1112, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1113, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1112, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1111, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 62915L)
    public static SubLObject sbhl_premark_union_nodes_closures(final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
        final SubLObject _prev_bind_7 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
        final SubLObject _prev_bind_8 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_9 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_10 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
            SubLObject cdolist_list_var = nodes;
            SubLObject node = (SubLObject)sbhl_search_methods.NIL;
            node = cdolist_list_var.first();
            while (sbhl_search_methods.NIL != cdolist_list_var) {
                final SubLObject _prev_bind_0_$1126 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                try {
                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                    sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
                }
                finally {
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$1126, thread);
                }
                cdolist_list_var = cdolist_list_var.rest();
                node = cdolist_list_var.first();
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_10, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_9, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_8, thread);
            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_7, thread);
            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_6, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 63450L)
    public static SubLObject sbhl_path_from_node_to_any_of_nodes_p(final SubLObject node, final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                final SubLObject _prev_bind_0_$1127 = sbhl_marking_vars.$sbhl_target_gather_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_target_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        if (sbhl_search_methods.NIL != sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p()) {
                            sbhl_premark_union_nodes_closures(nodes);
                        }
                        else {
                            sbhl_marking_utilities.sbhl_mark_nodes_in_target_space_gp(nodes);
                        }
                        final SubLObject _prev_bind_0_$1128 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$1129 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$1130 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                            sbhl_search_vars.$sbhl_goal_node$.bind(nodes, thread);
                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym49$SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw46$BOOLEAN, thread);
                            result = sbhl_transitive_closure(node);
                        }
                        finally {
                            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_4, thread);
                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_2_$1130, thread);
                            sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_1_$1129, thread);
                            sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_$1128, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$1129 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_gather_space$.getDynamicValue(thread));
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1129, thread);
                        }
                    }
                }
                finally {
                    sbhl_marking_vars.$sbhl_target_gather_space$.rebind(_prev_bind_0_$1127, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$1130 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1130, thread);
                }
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_3, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 64062L)
    public static SubLObject sbhl_disjoins_relation_with_any_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        return sbhl_predicate_relation_with_any_p(sbhl_module_utilities.get_sbhl_disjoins_module(module), node, nodes, mt, tv);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 64420L)
    public static SubLObject sbhl_predicate_relation_with_all_p(final SubLObject module, final SubLObject node, final SubLObject nodes, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1133 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1134 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1135 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1134 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1135 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1135 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1136 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1136 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1136 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1137 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1138 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1137 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1137 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1146 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1147 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_node_to_all_of_nodes_p(node, nodes);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1147, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1146, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1137, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1137, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1138, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1137, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1136, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1136, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1136, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1135, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1135, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1134, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1135, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1134, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1133, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 64867L)
    public static SubLObject sbhl_path_from_node_to_all_of_nodes_p(final SubLObject node, final SubLObject nodes) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject not_all_nodesP = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
            final SubLObject _prev_bind_0_$1148 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                if (sbhl_search_methods.NIL != set.set_p(nodes)) {
                    final SubLObject set_contents_var = set.do_set_internal(nodes);
                    SubLObject basis_object;
                    SubLObject state;
                    SubLObject goal;
                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)sbhl_search_methods.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); sbhl_search_methods.NIL == not_all_nodesP && sbhl_search_methods.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                        goal = set_contents.do_set_contents_next(basis_object, state);
                        if (sbhl_search_methods.NIL != set_contents.do_set_contents_element_validP(state, goal) && sbhl_search_methods.NIL == sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(goal)) {
                            not_all_nodesP = (SubLObject)sbhl_search_methods.T;
                        }
                    }
                }
                else if (nodes.isList()) {
                    if (sbhl_search_methods.NIL == not_all_nodesP) {
                        SubLObject csome_list_var = nodes;
                        SubLObject goal2 = (SubLObject)sbhl_search_methods.NIL;
                        goal2 = csome_list_var.first();
                        while (sbhl_search_methods.NIL == not_all_nodesP && sbhl_search_methods.NIL != csome_list_var) {
                            if (sbhl_search_methods.NIL == sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(goal2)) {
                                not_all_nodesP = (SubLObject)sbhl_search_methods.T;
                            }
                            csome_list_var = csome_list_var.rest();
                            goal2 = csome_list_var.first();
                        }
                    }
                }
                else {
                    Errors.error((SubLObject)sbhl_search_methods.$str56$_A_is_neither_SET_P_nor_LISTP_, nodes);
                }
            }
            finally {
                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0_$1148, thread);
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(sbhl_search_methods.NIL == not_all_nodesP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 65309L)
    public static SubLObject sbhl_any_with_predicate_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        final SubLObject pred = sbhl_module_vars.get_sbhl_module_link_pred(module);
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL != sbhl_cache.sbhl_cache_use_possible_for_nodes_p(pred, nodes, node)) {
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_2 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_3 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                if (sbhl_search_methods.NIL != set.set_p(nodes)) {
                    final SubLObject set_contents_var = set.do_set_internal(nodes);
                    SubLObject basis_object;
                    SubLObject state;
                    SubLObject subnode;
                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)sbhl_search_methods.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); sbhl_search_methods.NIL == result && sbhl_search_methods.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                        subnode = set_contents.do_set_contents_next(basis_object, state);
                        if (sbhl_search_methods.NIL != set_contents.do_set_contents_element_validP(state, subnode)) {
                            result = sbhl_cache.sbhl_cached_predicate_relation_p(pred, subnode, node, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                    }
                }
                else if (nodes.isList()) {
                    if (sbhl_search_methods.NIL == result) {
                        SubLObject csome_list_var;
                        SubLObject subnode2;
                        for (csome_list_var = nodes, subnode2 = (SubLObject)sbhl_search_methods.NIL, subnode2 = csome_list_var.first(); sbhl_search_methods.NIL == result && sbhl_search_methods.NIL != csome_list_var; result = sbhl_cache.sbhl_cached_predicate_relation_p(pred, subnode2, node, (SubLObject)sbhl_search_methods.UNPROVIDED), csome_list_var = csome_list_var.rest(), subnode2 = csome_list_var.first()) {}
                    }
                }
                else {
                    Errors.error((SubLObject)sbhl_search_methods.$str56$_A_is_neither_SET_P_nor_LISTP_, nodes);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_3, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_2, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0, thread);
            }
        }
        else {
            final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
            final SubLObject _prev_bind_5 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
            final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
            final SubLObject _prev_bind_7 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
            final SubLObject _prev_bind_8 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
            try {
                sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
                sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
                sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                sbhl_module_vars.$sbhl_module$.bind(module, thread);
                final SubLObject mt_var2 = mt;
                final SubLObject _prev_bind_0_$1149 = mt_relevance_macros.$mt$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1150 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
                final SubLObject _prev_bind_2_$1151 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
                try {
                    mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var2), thread);
                    mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var2), thread);
                    mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var2), thread);
                    final SubLObject tv_var = tv;
                    final SubLObject _prev_bind_0_$1150 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1151 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                        sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                        if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                            final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                            if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                                sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                                sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                            }
                            else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                                Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                            }
                            else {
                                Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                                Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                            }
                        }
                        final SubLObject _prev_bind_0_$1151 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$1152 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$1152 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                        try {
                            sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                            final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                            final SubLObject _prev_bind_0_$1152 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1153 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                                try {
                                    sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                    final SubLObject _prev_bind_0_$1154 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$1153 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$1153 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$1162 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                    final SubLObject _prev_bind_4_$1163 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                    try {
                                        sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                        final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                        SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                        try {
                                            needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                            result = sbhl_path_from_any_of_nodes_to_node_p(nodes, node);
                                        }
                                        finally {
                                            if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                                ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                            }
                                        }
                                    }
                                    finally {
                                        sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1163, thread);
                                        sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1162, thread);
                                        sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1153, thread);
                                        sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1153, thread);
                                        sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1154, thread);
                                    }
                                    if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                        sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    }
                                }
                                finally {
                                    sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1153, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1152, thread);
                            }
                        }
                        finally {
                            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1152, thread);
                            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1152, thread);
                            sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1151, thread);
                        }
                    }
                    finally {
                        sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1151, thread);
                        sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1150, thread);
                    }
                }
                finally {
                    mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1151, thread);
                    mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1150, thread);
                    mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1149, thread);
                }
            }
            finally {
                sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_8, thread);
                sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_7, thread);
                sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_6, thread);
                sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_5, thread);
                sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_4, thread);
            }
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 66036L)
    public static SubLObject sbhl_any_with_false_inverse_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1164 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1165 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1166 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1165 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1166 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1166 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1167 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1167 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const14$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1167 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1168 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1169 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1168 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1168 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1177 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1178 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_any_of_nodes_to_node_p(nodes, node);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1178, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1177, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1168, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1168, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1169, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1168, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1167, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1167, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1167, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1166, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1166, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1165, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1166, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1165, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1164, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 66440L)
    public static SubLObject sbhl_premark_node_closure(final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        final SubLObject _prev_bind_6 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
        final SubLObject _prev_bind_7 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
        final SubLObject _prev_bind_8 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
        final SubLObject _prev_bind_9 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_10 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_11 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module())), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(sbhl_module_utilities.get_sbhl_premark_module(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_tv$.bind(sbhl_search_vars.sbhl_search_true_tv(), thread);
            sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
            sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_search_vars.get_sbhl_search_module()), thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
            sbhl_marking_methods.sbhl_mark_closure_as_marked(node);
        }
        finally {
            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_11, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_10, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_9, thread);
            sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_8, thread);
            sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_7, thread);
            sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_6, thread);
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 66925L)
    public static SubLObject sbhl_path_from_any_of_nodes_to_node_p(final SubLObject nodes, final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw46$BOOLEAN, thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_search_vars.$sbhl_goal_node$.bind(node, thread);
            if (sbhl_search_methods.NIL != sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p()) {
                final SubLObject _prev_bind_0_$1179 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        sbhl_premark_node_closure(node);
                        final SubLObject _prev_bind_0_$1180 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$1181 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                            sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym49$SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                            if (sbhl_search_methods.NIL != set.set_p(nodes)) {
                                final SubLObject set_contents_var = set.do_set_internal(nodes);
                                SubLObject basis_object;
                                SubLObject state;
                                SubLObject start;
                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)sbhl_search_methods.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); sbhl_search_methods.NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread) && sbhl_search_methods.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                    start = set_contents.do_set_contents_next(basis_object, state);
                                    if (sbhl_search_methods.NIL != set_contents.do_set_contents_element_validP(state, start)) {
                                        result = sbhl_transitive_closure(start);
                                    }
                                }
                            }
                            else if (nodes.isList()) {
                                if (sbhl_search_methods.NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                                    SubLObject csome_list_var = nodes;
                                    SubLObject start2 = (SubLObject)sbhl_search_methods.NIL;
                                    start2 = csome_list_var.first();
                                    while (sbhl_search_methods.NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread) && sbhl_search_methods.NIL != csome_list_var) {
                                        result = sbhl_transitive_closure(start2);
                                        csome_list_var = csome_list_var.rest();
                                        start2 = csome_list_var.first();
                                    }
                                }
                            }
                            else {
                                Errors.error((SubLObject)sbhl_search_methods.$str56$_A_is_neither_SET_P_nor_LISTP_, nodes);
                            }
                        }
                        finally {
                            sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_$1181, thread);
                            sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_$1180, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$1181 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1181, thread);
                        }
                    }
                }
                finally {
                    sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_0_$1179, thread);
                }
            }
            else {
                final SubLObject _prev_bind_0_$1182 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym47$SBHL_NODE_IS_GOAL_NODE, thread);
                    if (sbhl_search_methods.NIL != set.set_p(nodes)) {
                        final SubLObject set_contents_var2 = set.do_set_internal(nodes);
                        SubLObject start2;
                        SubLObject basis_object2;
                        SubLObject state2;
                        for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)sbhl_search_methods.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); sbhl_search_methods.NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread) && sbhl_search_methods.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                            start2 = set_contents.do_set_contents_next(basis_object2, state2);
                            if (sbhl_search_methods.NIL != set_contents.do_set_contents_element_validP(state2, start2)) {
                                result = sbhl_transitive_closure(start2);
                            }
                        }
                    }
                    else if (nodes.isList()) {
                        if (sbhl_search_methods.NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                            SubLObject csome_list_var2 = nodes;
                            SubLObject start3 = (SubLObject)sbhl_search_methods.NIL;
                            start3 = csome_list_var2.first();
                            while (sbhl_search_methods.NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread) && sbhl_search_methods.NIL != csome_list_var2) {
                                result = sbhl_transitive_closure(start3);
                                csome_list_var2 = csome_list_var2.rest();
                                start3 = csome_list_var2.first();
                            }
                        }
                    }
                    else {
                        Errors.error((SubLObject)sbhl_search_methods.$str56$_A_is_neither_SET_P_nor_LISTP_, nodes);
                    }
                }
                finally {
                    sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_0_$1182, thread);
                }
            }
        }
        finally {
            sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_4, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 67765L)
    public static SubLObject sbhl_any_with_disjoins_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        return sbhl_any_with_predicate_relation_p(sbhl_module_utilities.get_sbhl_disjoins_module(module), nodes, node, mt, tv);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 68123L)
    public static SubLObject sbhl_all_with_predicate_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1184 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1185 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1186 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1185 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1186 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1186 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1187 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1187 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1187 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1188 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1189 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1188 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1188 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1197 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1198 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_all_of_nodes_to_node_p(nodes, node);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1198, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1197, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1188, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1188, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1189, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1188, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1187, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1187, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1187, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1186, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1186, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1185, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1186, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1185, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1184, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 68579L)
    public static SubLObject sbhl_all_with_false_predicate_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1199 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1200 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1201 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1200 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1201 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1201 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1202 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1202 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const14$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1202 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1203 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1204 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1203 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1203 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1212 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1213 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_all_of_nodes_to_node_p(nodes, node);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1213, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1212, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1203, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1203, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1204, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1203, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1202, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1202, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1202, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1201, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1201, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1200, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1201, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1200, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1199, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 68984L)
    public static SubLObject sbhl_all_with_false_inverse_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1214 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1215 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1216 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1215 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1216 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_false_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_false_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym13$SBHL_FALSE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1216 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1217 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1217 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const14$False_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_backward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_backward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1217 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1218 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1219 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1218 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1218 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1227 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1228 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_all_of_nodes_to_node_p(nodes, node);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1228, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1227, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1218, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1218, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1219, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1218, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1217, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1217, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1217, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1216, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1216, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1215, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1216, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1215, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1214, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 69443L)
    public static SubLObject sbhl_path_from_all_of_nodes_to_node_p(final SubLObject nodes, final SubLObject node) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject any_missedP = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            SubLObject cdolist_list_var = nodes;
            SubLObject start = (SubLObject)sbhl_search_methods.NIL;
            start = cdolist_list_var.first();
            while (sbhl_search_methods.NIL != cdolist_list_var) {
                final SubLObject _prev_bind_0_$1229 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1230 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                    sbhl_marking_methods.sbhl_mark_closure_as_marked(start);
                }
                finally {
                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_1_$1230, thread);
                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_0_$1229, thread);
                }
                cdolist_list_var = cdolist_list_var.rest();
                start = cdolist_list_var.first();
            }
            final SubLObject _prev_bind_0_$1230 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
            try {
                sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_link_vars.get_sbhl_opposite_link_direction(), thread);
                sbhl_marking_methods.sbhl_unmark_marked_closure(node);
            }
            finally {
                sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_0_$1230, thread);
            }
            if (sbhl_search_methods.NIL != set.set_p(nodes)) {
                final SubLObject set_contents_var = set.do_set_internal(nodes);
                SubLObject basis_object;
                SubLObject state;
                SubLObject start2;
                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)sbhl_search_methods.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); sbhl_search_methods.NIL == any_missedP && sbhl_search_methods.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                    start2 = set_contents.do_set_contents_next(basis_object, state);
                    if (sbhl_search_methods.NIL != set_contents.do_set_contents_element_validP(state, start2) && sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(start2)) {
                        any_missedP = (SubLObject)sbhl_search_methods.T;
                    }
                }
            }
            else if (nodes.isList()) {
                if (sbhl_search_methods.NIL == any_missedP) {
                    SubLObject csome_list_var = nodes;
                    SubLObject start3 = (SubLObject)sbhl_search_methods.NIL;
                    start3 = csome_list_var.first();
                    while (sbhl_search_methods.NIL == any_missedP && sbhl_search_methods.NIL != csome_list_var) {
                        if (sbhl_search_methods.NIL != sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(start3)) {
                            any_missedP = (SubLObject)sbhl_search_methods.T;
                        }
                        csome_list_var = csome_list_var.rest();
                        start3 = csome_list_var.first();
                    }
                }
            }
            else {
                Errors.error((SubLObject)sbhl_search_methods.$str56$_A_is_neither_SET_P_nor_LISTP_, nodes);
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)SubLObjectFactory.makeBoolean(sbhl_search_methods.NIL == any_missedP);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 70036L)
    public static SubLObject sbhl_all_with_disjoins_relation_p(final SubLObject module, final SubLObject nodes, final SubLObject node, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        return sbhl_all_with_predicate_relation_p(sbhl_module_utilities.get_sbhl_disjoins_module(module), nodes, node, mt, tv);
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 70258L)
    public static SubLObject sbhl_predicate_relation_between_any_p(final SubLObject module, final SubLObject nodes1, final SubLObject nodes2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1232 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1233 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1234 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1233 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1234 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1234 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1235 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1235 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1235 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1236 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1237 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1236 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1236 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1245 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1246 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_any_of_nodes_to_any_of_nodes_p(nodes1, nodes2);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1246, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1245, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1236, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1236, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1237, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1236, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1235, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1235, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1235, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1234, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1234, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1233, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1234, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1233, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1232, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 70756L)
    public static SubLObject sbhl_path_from_any_of_nodes_to_any_of_nodes_p(final SubLObject nodes1, final SubLObject nodes2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_type$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$sbhl_goal_node$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_marking_vars.$sbhl_target_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_type$.bind((SubLObject)sbhl_search_methods.$kw46$BOOLEAN, thread);
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            sbhl_search_vars.$sbhl_goal_node$.bind(nodes2, thread);
            sbhl_marking_vars.$sbhl_target_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
            try {
                if (sbhl_search_methods.NIL != sbhl_search_utilities.sbhl_module_premarks_gather_nodes_p()) {
                    sbhl_premark_union_nodes_closures(nodes2);
                }
                else {
                    sbhl_marking_utilities.sbhl_mark_nodes_in_target_space(nodes2);
                }
                if (sbhl_search_methods.NIL != set.set_p(nodes1)) {
                    final SubLObject set_contents_var = set.do_set_internal(nodes1);
                    SubLObject basis_object;
                    SubLObject state;
                    SubLObject node;
                    SubLObject _prev_bind_0_$1247;
                    SubLObject _prev_bind_1_$1248;
                    SubLObject _prev_bind_2_$1249;
                    for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)sbhl_search_methods.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); sbhl_search_methods.NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread) && sbhl_search_methods.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                        node = set_contents.do_set_contents_next(basis_object, state);
                        if (sbhl_search_methods.NIL != set_contents.do_set_contents_element_validP(state, node)) {
                            _prev_bind_0_$1247 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                            _prev_bind_1_$1248 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                            _prev_bind_2_$1249 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym49$SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                                sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                result = sbhl_transitive_closure(node);
                            }
                            finally {
                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1249, thread);
                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_$1248, thread);
                                sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_$1247, thread);
                            }
                        }
                    }
                }
                else if (nodes1.isList()) {
                    if (sbhl_search_methods.NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread)) {
                        SubLObject csome_list_var = nodes1;
                        SubLObject node2 = (SubLObject)sbhl_search_methods.NIL;
                        node2 = csome_list_var.first();
                        while (sbhl_search_methods.NIL == sbhl_search_vars.$sbhl_finishedP$.getDynamicValue(thread) && sbhl_search_methods.NIL != csome_list_var) {
                            final SubLObject _prev_bind_0_$1248 = sbhl_marking_vars.$sbhl_goal_space$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$1249 = sbhl_search_vars.$sbhl_consider_node_fn$.currentBinding(thread);
                            final SubLObject _prev_bind_2_$1250 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_goal_space$.bind(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread), thread);
                                sbhl_search_vars.$sbhl_consider_node_fn$.bind((SubLObject)sbhl_search_methods.$sym49$SBHL_NODE_MARKED_AS_GOAL_NODE, thread);
                                sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                result = sbhl_transitive_closure(node2);
                            }
                            finally {
                                sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1250, thread);
                                sbhl_search_vars.$sbhl_consider_node_fn$.rebind(_prev_bind_1_$1249, thread);
                                sbhl_marking_vars.$sbhl_goal_space$.rebind(_prev_bind_0_$1248, thread);
                            }
                            csome_list_var = csome_list_var.rest();
                            node2 = csome_list_var.first();
                        }
                    }
                }
                else {
                    Errors.error((SubLObject)sbhl_search_methods.$str56$_A_is_neither_SET_P_nor_LISTP_, nodes1);
                }
            }
            finally {
                final SubLObject _prev_bind_0_$1249 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_target_space$.getDynamicValue(thread));
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1249, thread);
                }
            }
        }
        finally {
            sbhl_marking_vars.$sbhl_target_space$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$sbhl_goal_node$.rebind(_prev_bind_4, thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_type$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 71488L)
    public static SubLObject sbhl_all_with_predicate_relation_with_any_p(final SubLObject module, final SubLObject nodes1, final SubLObject nodes2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_module$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_search_vars.$sbhl_search_module_type$.currentBinding(thread);
        final SubLObject _prev_bind_3 = sbhl_search_vars.$sbhl_add_node_to_result_test$.currentBinding(thread);
        final SubLObject _prev_bind_4 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
        final SubLObject _prev_bind_5 = sbhl_module_vars.$sbhl_module$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_module$.bind(module, thread);
            sbhl_search_vars.$sbhl_search_module_type$.bind(sbhl_module_utilities.get_sbhl_module_type(module), thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.bind(sbhl_module_utilities.get_sbhl_add_node_to_result_test(module), thread);
            sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
            sbhl_module_vars.$sbhl_module$.bind(module, thread);
            final SubLObject mt_var = mt;
            final SubLObject _prev_bind_0_$1254 = mt_relevance_macros.$mt$.currentBinding(thread);
            final SubLObject _prev_bind_1_$1255 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
            final SubLObject _prev_bind_2_$1256 = mt_relevance_macros.$relevant_mts$.currentBinding(thread);
            try {
                mt_relevance_macros.$mt$.bind(mt_relevance_macros.update_inference_mt_relevance_mt(mt_var), thread);
                mt_relevance_macros.$relevant_mt_function$.bind(mt_relevance_macros.update_inference_mt_relevance_function(mt_var), thread);
                mt_relevance_macros.$relevant_mts$.bind(mt_relevance_macros.update_inference_mt_relevance_mt_list(mt_var), thread);
                final SubLObject tv_var = tv;
                final SubLObject _prev_bind_0_$1255 = sbhl_search_vars.$sbhl_tv$.currentBinding(thread);
                final SubLObject _prev_bind_1_$1256 = sbhl_search_vars.$relevant_sbhl_tv_function$.currentBinding(thread);
                try {
                    sbhl_search_vars.$sbhl_tv$.bind((sbhl_search_methods.NIL != tv_var) ? tv_var : sbhl_search_vars.get_sbhl_true_tv(), thread);
                    sbhl_search_vars.$relevant_sbhl_tv_function$.bind((SubLObject)((sbhl_search_methods.NIL != tv_var) ? sbhl_search_methods.$sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV : sbhl_search_vars.$relevant_sbhl_tv_function$.getDynamicValue(thread)), thread);
                    if (sbhl_search_methods.NIL != tv_var && sbhl_search_methods.NIL != sbhl_paranoia.sbhl_object_type_checking_p() && sbhl_search_methods.NIL == sbhl_search_vars.sbhl_true_tv_p(tv_var)) {
                        final SubLObject pcase_var = sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread);
                        if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw2$ERROR)) {
                            sbhl_paranoia.sbhl_error((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw5$CERROR)) {
                            sbhl_paranoia.sbhl_cerror((SubLObject)sbhl_search_methods.ONE_INTEGER, (SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                        }
                        else if (pcase_var.eql((SubLObject)sbhl_search_methods.$kw7$WARN)) {
                            Errors.warn((SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                        else {
                            Errors.warn((SubLObject)sbhl_search_methods.$str8$_A_is_not_a_valid__sbhl_type_erro, sbhl_paranoia.$sbhl_type_error_action$.getDynamicValue(thread));
                            Errors.cerror((SubLObject)sbhl_search_methods.$str6$continue_anyway, (SubLObject)sbhl_search_methods.$str3$_A_is_not_a__A, tv_var, (SubLObject)sbhl_search_methods.$sym4$SBHL_TRUE_TV_P);
                        }
                    }
                    final SubLObject _prev_bind_0_$1256 = sbhl_search_vars.$sbhl_search_truth$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$1257 = sbhl_search_vars.$sbhl_search_direction$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$1257 = sbhl_link_vars.$sbhl_link_direction$.currentBinding(thread);
                    try {
                        sbhl_search_vars.$sbhl_search_truth$.bind(sbhl_search_methods.$const9$True_JustificationTruth, thread);
                        sbhl_search_vars.$sbhl_search_direction$.bind(sbhl_search_vars.get_sbhl_forward_search_direction(), thread);
                        sbhl_link_vars.$sbhl_link_direction$.bind(sbhl_module_utilities.get_sbhl_module_forward_direction(sbhl_module_vars.get_sbhl_module((SubLObject)sbhl_search_methods.UNPROVIDED)), thread);
                        final SubLObject source = sbhl_marking_vars.sbhl_new_space_source();
                        final SubLObject _prev_bind_0_$1257 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                            final SubLObject _prev_bind_0_$1258 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                            try {
                                sbhl_marking_vars.$sbhl_gather_space$.bind((source == sbhl_search_methods.$kw10$OLD) ? sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread) : sbhl_marking_vars.sbhl_get_new_space(source), thread);
                                final SubLObject _prev_bind_0_$1259 = sbhl_search_vars.$sbhl_finishedP$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$1258 = sbhl_search_vars.$sbhl_stop_search_pathP$.currentBinding(thread);
                                final SubLObject _prev_bind_2_$1258 = sbhl_search_vars.$sbhl_search_parent_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_3_$1267 = sbhl_search_vars.$sbhl_nodes_previous_marking$.currentBinding(thread);
                                final SubLObject _prev_bind_4_$1268 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$sbhl_finishedP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    final SubLObject rw_lock_var = sbhl_link_vars.$sbhl_rw_lock$.getGlobalValue();
                                    SubLObject needs_to_releaseP = (SubLObject)sbhl_search_methods.NIL;
                                    try {
                                        needs_to_releaseP = ReadWriteLocks.rw_lock_seize_read_lock(rw_lock_var);
                                        result = sbhl_path_from_all_of_nodes_to_any_of_nodes_p(nodes1, nodes2);
                                    }
                                    finally {
                                        if (sbhl_search_methods.NIL != needs_to_releaseP) {
                                            ReadWriteLocks.rw_lock_release_read_lock(rw_lock_var);
                                        }
                                    }
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4_$1268, thread);
                                    sbhl_search_vars.$sbhl_nodes_previous_marking$.rebind(_prev_bind_3_$1267, thread);
                                    sbhl_search_vars.$sbhl_search_parent_marking$.rebind(_prev_bind_2_$1258, thread);
                                    sbhl_search_vars.$sbhl_stop_search_pathP$.rebind(_prev_bind_1_$1258, thread);
                                    sbhl_search_vars.$sbhl_finishedP$.rebind(_prev_bind_0_$1259, thread);
                                }
                                if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                    sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1258, thread);
                            }
                            if (source == sbhl_search_methods.$kw12$RESOURCE) {
                                sbhl_marking_vars.update_sbhl_resourced_spaces(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1257, thread);
                        }
                    }
                    finally {
                        sbhl_link_vars.$sbhl_link_direction$.rebind(_prev_bind_2_$1257, thread);
                        sbhl_search_vars.$sbhl_search_direction$.rebind(_prev_bind_1_$1257, thread);
                        sbhl_search_vars.$sbhl_search_truth$.rebind(_prev_bind_0_$1256, thread);
                    }
                }
                finally {
                    sbhl_search_vars.$relevant_sbhl_tv_function$.rebind(_prev_bind_1_$1256, thread);
                    sbhl_search_vars.$sbhl_tv$.rebind(_prev_bind_0_$1255, thread);
                }
            }
            finally {
                mt_relevance_macros.$relevant_mts$.rebind(_prev_bind_2_$1256, thread);
                mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_1_$1255, thread);
                mt_relevance_macros.$mt$.rebind(_prev_bind_0_$1254, thread);
            }
        }
        finally {
            sbhl_module_vars.$sbhl_module$.rebind(_prev_bind_5, thread);
            sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_4, thread);
            sbhl_search_vars.$sbhl_add_node_to_result_test$.rebind(_prev_bind_3, thread);
            sbhl_search_vars.$sbhl_search_module_type$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_module$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 72009L)
    public static SubLObject sbhl_path_from_all_of_nodes_to_any_of_nodes_p(final SubLObject nodes1, final SubLObject nodes2) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject goals = nodes2;
        SubLObject result = (SubLObject)sbhl_search_methods.NIL;
        final SubLObject _prev_bind_0 = sbhl_search_vars.$sbhl_search_behavior$.currentBinding(thread);
        final SubLObject _prev_bind_2 = sbhl_marking_vars.$sbhl_terminating_marking_space$.currentBinding(thread);
        try {
            sbhl_search_vars.$sbhl_search_behavior$.bind(sbhl_search_utilities.determine_sbhl_search_behavior(sbhl_search_vars.get_sbhl_search_module(), sbhl_search_vars.get_sbhl_search_direction(), sbhl_search_vars.get_sbhl_tv()), thread);
            sbhl_marking_vars.$sbhl_terminating_marking_space$.bind(sbhl_search_utilities.determine_sbhl_terminating_marking_space(sbhl_search_vars.$sbhl_search_behavior$.getDynamicValue(thread)), thread);
            SubLObject cdolist_list_var = nodes1;
            SubLObject start = (SubLObject)sbhl_search_methods.NIL;
            start = cdolist_list_var.first();
            while (sbhl_search_methods.NIL != cdolist_list_var) {
                final SubLObject _prev_bind_0_$1269 = sbhl_marking_vars.$sbhl_space$.currentBinding(thread);
                try {
                    sbhl_marking_vars.$sbhl_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                    try {
                        final SubLObject _prev_bind_0_$1270 = sbhl_marking_vars.$sbhl_gather_space$.currentBinding(thread);
                        try {
                            sbhl_marking_vars.$sbhl_gather_space$.bind(sbhl_marking_vars.get_sbhl_marking_space(), thread);
                            try {
                                final SubLObject _prev_bind_0_$1271 = sbhl_search_vars.$genl_inverse_mode_p$.currentBinding(thread);
                                try {
                                    sbhl_search_vars.$genl_inverse_mode_p$.bind((SubLObject)sbhl_search_methods.NIL, thread);
                                    sbhl_marking_methods.sbhl_mark_closure_as_marked(start);
                                }
                                finally {
                                    sbhl_search_vars.$genl_inverse_mode_p$.rebind(_prev_bind_0_$1271, thread);
                                }
                                SubLObject cdolist_list_var_$1272 = nodes2;
                                SubLObject candidate = (SubLObject)sbhl_search_methods.NIL;
                                candidate = cdolist_list_var_$1272.first();
                                while (sbhl_search_methods.NIL != cdolist_list_var_$1272) {
                                    if (sbhl_search_methods.NIL == sbhl_marking_utilities.sbhl_marked_in_terminating_space_p(candidate)) {
                                        goals = Sequences.remove(candidate, goals, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED, (SubLObject)sbhl_search_methods.UNPROVIDED);
                                    }
                                    cdolist_list_var_$1272 = cdolist_list_var_$1272.rest();
                                    candidate = cdolist_list_var_$1272.first();
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$1272 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_gather_space$.getDynamicValue(thread));
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1272, thread);
                                }
                            }
                        }
                        finally {
                            sbhl_marking_vars.$sbhl_gather_space$.rebind(_prev_bind_0_$1270, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$1273 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)sbhl_search_methods.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            sbhl_marking_vars.free_sbhl_marking_space(sbhl_marking_vars.$sbhl_space$.getDynamicValue(thread));
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$1273, thread);
                        }
                    }
                }
                finally {
                    sbhl_marking_vars.$sbhl_space$.rebind(_prev_bind_0_$1269, thread);
                }
                cdolist_list_var = cdolist_list_var.rest();
                start = cdolist_list_var.first();
            }
            result = list_utilities.sublisp_boolean(goals);
        }
        finally {
            sbhl_marking_vars.$sbhl_terminating_marking_space$.rebind(_prev_bind_2, thread);
            sbhl_search_vars.$sbhl_search_behavior$.rebind(_prev_bind_0, thread);
        }
        return result;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 72622L)
    public static SubLObject sbhl_any_predicate_relation_with_all_p(final SubLObject module, final SubLObject nodes1, final SubLObject nodes2, SubLObject mt, SubLObject tv) {
        if (mt == sbhl_search_methods.UNPROVIDED) {
            mt = (SubLObject)sbhl_search_methods.NIL;
        }
        if (tv == sbhl_search_methods.UNPROVIDED) {
            tv = (SubLObject)sbhl_search_methods.NIL;
        }
        assert sbhl_search_methods.NIL != sbhl_module_vars.sbhl_module_p(module) : module;
        SubLObject path_to_allP = (SubLObject)sbhl_search_methods.NIL;
        if (sbhl_search_methods.NIL != set.set_p(nodes1)) {
            final SubLObject set_contents_var = set.do_set_internal(nodes1);
            SubLObject basis_object;
            SubLObject state;
            SubLObject node1;
            for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)sbhl_search_methods.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); sbhl_search_methods.NIL == path_to_allP && sbhl_search_methods.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                node1 = set_contents.do_set_contents_next(basis_object, state);
                if (sbhl_search_methods.NIL != set_contents.do_set_contents_element_validP(state, node1) && sbhl_search_methods.NIL != sbhl_predicate_relation_with_all_p(module, node1, nodes2, mt, tv)) {
                    path_to_allP = (SubLObject)sbhl_search_methods.T;
                }
            }
        }
        else if (nodes1.isList()) {
            if (sbhl_search_methods.NIL == path_to_allP) {
                SubLObject csome_list_var = nodes1;
                SubLObject node2 = (SubLObject)sbhl_search_methods.NIL;
                node2 = csome_list_var.first();
                while (sbhl_search_methods.NIL == path_to_allP && sbhl_search_methods.NIL != csome_list_var) {
                    if (sbhl_search_methods.NIL != sbhl_predicate_relation_with_all_p(module, node2, nodes2, mt, tv)) {
                        path_to_allP = (SubLObject)sbhl_search_methods.T;
                    }
                    csome_list_var = csome_list_var.rest();
                    node2 = csome_list_var.first();
                }
            }
        }
        else {
            Errors.error((SubLObject)sbhl_search_methods.$str56$_A_is_neither_SET_P_nor_LISTP_, nodes1);
        }
        return path_to_allP;
    }
    
    @SubLTranslatedFile.SubL(source = "cycl/sbhl/sbhl-search-methods.lisp", position = 73135L)
    public static SubLObject incompatible_mt_related_moduleP(final SubLObject module) {
        final SubLObject pred = sbhl_module_vars.get_sbhl_module_link_pred(module);
        if (pred.eql(sbhl_search_methods.$const57$incompatibleMt) || pred.eql(sbhl_search_methods.$const58$intensionallyIncompatibleMt)) {
            return (SubLObject)sbhl_search_methods.T;
        }
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    public static SubLObject declare_sbhl_search_methods_file() {
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_forward_true_nodes", "SBHL-ALL-FORWARD-TRUE-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_forward_false_nodes", "SBHL-ALL-FORWARD-FALSE-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_backward_true_nodes", "SBHL-ALL-BACKWARD-TRUE-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_backward_false_nodes", "SBHL-ALL-BACKWARD-FALSE-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_transitive_closure", "SBHL-TRANSITIVE-CLOSURE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_forward_true_nodes_with_prune", "SBHL-ALL-FORWARD-TRUE-NODES-WITH-PRUNE", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_backward_true_nodes_with_prune", "SBHL-ALL-BACKWARD-TRUE-NODES-WITH-PRUNE", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_union_all_forward_true_nodes", "SBHL-UNION-ALL-FORWARD-TRUE-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_union_all_backward_true_nodes", "SBHL-UNION-ALL-BACKWARD-TRUE-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_union_nodes_transitive_closures", "SBHL-UNION-NODES-TRANSITIVE-CLOSURES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_dead_end_nodes", "SBHL-GATHER-DEAD-END-NODES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_extremes", "SBHL-EXTREMES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_leaf_nodes", "SBHL-LEAF-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_root_nodes", "SBHL-ROOT-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_max_true_disjoins", "SBHL-MAX-TRUE-DISJOINS", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_min_asserted_false_disjoins", "SBHL-MIN-ASSERTED-FALSE-DISJOINS", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_min_implied_false_disjoins", "SBHL-MIN-IMPLIED-FALSE-DISJOINS", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_implied_min_false_disjoins", "SBHL-IMPLIED-MIN-FALSE-DISJOINS", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_first_true_disjoin", "SBHL-GATHER-FIRST-TRUE-DISJOIN", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_sample_leaf_nodes", "SBHL-SAMPLE-LEAF-NODES", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_sample_different_leaf_nodes", "SBHL-SAMPLE-DIFFERENT-LEAF-NODES", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_sample_extremal_nodes", "SBHL-SAMPLE-EXTREMAL-NODES", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_map_all_forward_true_nodes", "SBHL-MAP-ALL-FORWARD-TRUE-NODES", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_map_all_forward_true_nodes_if", "SBHL-MAP-ALL-FORWARD-TRUE-NODES-IF", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_map_and_mark_forward_true_nodes_in_space", "SBHL-MAP-AND-MARK-FORWARD-TRUE-NODES-IN-SPACE", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_map_all_backward_true_nodes", "SBHL-MAP-ALL-BACKWARD-TRUE-NODES", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_simply_map_all_backward_true_nodes", "SBHL-SIMPLY-MAP-ALL-BACKWARD-TRUE-NODES", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_map_union_all_forward_true_nodes", "SBHL-MAP-UNION-ALL-FORWARD-TRUE-NODES", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_map_union_all_backward_true_nodes", "SBHL-MAP-UNION-ALL-BACKWARD-TRUE-NODES", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_simply_union_all_backward_true_nodes", "SBHL-SIMPLY-UNION-ALL-BACKWARD-TRUE-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_union_simply_all_backward_true_edges", "SBHL-UNION-SIMPLY-ALL-BACKWARD-TRUE-EDGES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_simply_union_all_backward_true_nodes_such_that", "SBHL-SIMPLY-UNION-ALL-BACKWARD-TRUE-NODES-SUCH-THAT", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_all_forward_true_nodes", "SBHL-GATHER-ALL-FORWARD-TRUE-NODES", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_all_backward_true_nodes", "SBHL-GATHER-ALL-BACKWARD-TRUE-NODES", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_closure", "SBHL-GATHER-CLOSURE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_first_among_all_forward_true_nodes", "SBHL-GATHER-FIRST-AMONG-ALL-FORWARD-TRUE-NODES", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_first_among_forward_true_nodes_in_space", "SBHL-GATHER-FIRST-AMONG-FORWARD-TRUE-NODES-IN-SPACE", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_first_among_all_backward_true_nodes", "SBHL-GATHER-FIRST-AMONG-ALL-BACKWARD-TRUE-NODES", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_simply_gather_first_among_all_forward_true_nodes", "SBHL-SIMPLY-GATHER-FIRST-AMONG-ALL-FORWARD-TRUE-NODES", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_simply_gather_first_among_all_backward_true_nodes", "SBHL-SIMPLY-GATHER-FIRST-AMONG-ALL-BACKWARD-TRUE-NODES", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_first_among_closure", "SBHL-GATHER-FIRST-AMONG-CLOSURE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_simply_gather_first_among_all_forward_true_nodes_with_prune", "SBHL-SIMPLY-GATHER-FIRST-AMONG-ALL-FORWARD-TRUE-NODES-WITH-PRUNE", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_simply_gather_first_among_all_backward_true_nodes_with_prune", "SBHL-SIMPLY-GATHER-FIRST-AMONG-ALL-BACKWARD-TRUE-NODES-WITH-PRUNE", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_first_among_closure_with_prune", "SBHL-GATHER-FIRST-AMONG-CLOSURE-WITH-PRUNE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_forward_true_nodes_if", "SBHL-ALL-FORWARD-TRUE-NODES-IF", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_backward_true_nodes_if", "SBHL-ALL-BACKWARD-TRUE-NODES-IF", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_closure_if", "SBHL-CLOSURE-IF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_forward_true_nodes_if_with_pruning", "SBHL-ALL-FORWARD-TRUE-NODES-IF-WITH-PRUNING", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_backward_true_nodes_if_with_pruning", "SBHL-ALL-BACKWARD-TRUE-NODES-IF-WITH-PRUNING", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_closure_if_and_stop_unless", "SBHL-CLOSURE-IF-AND-STOP-UNLESS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_extremal_nodes", "SBHL-EXTREMAL-NODES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "max_nodes_backward", "MAX-NODES-BACKWARD", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_independent_cycles", "SBHL-INDEPENDENT-CYCLES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "max_nodes_forward", "MAX-NODES-FORWARD", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "max_nodes_direction", "MAX-NODES-DIRECTION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_min_nodes", "SBHL-MIN-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_max_nodes", "SBHL-MAX-NODES", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_min_forward_true_link_nodes", "SBHL-MIN-FORWARD-TRUE-LINK-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_max_forward_true_link_nodes", "SBHL-MAX-FORWARD-TRUE-LINK-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_min_forward_false_link_nodes", "SBHL-MIN-FORWARD-FALSE-LINK-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_max_forward_false_link_nodes", "SBHL-MAX-FORWARD-FALSE-LINK-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_min_backward_true_link_nodes", "SBHL-MIN-BACKWARD-TRUE-LINK-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_max_backward_true_link_nodes", "SBHL-MAX-BACKWARD-TRUE-LINK-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_min_backward_false_link_nodes", "SBHL-MIN-BACKWARD-FALSE-LINK-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_max_backward_false_link_nodes", "SBHL-MAX-BACKWARD-FALSE-LINK-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_stop_at_horizon", "SBHL-STOP-AT-HORIZON", 1, 0, false);
        new $sbhl_stop_at_horizon$UnaryFunction();
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_mark_closure_up_to_horizon", "SBHL-MARK-CLOSURE-UP-TO-HORIZON", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_common_horizon", "SBHL-COMMON-HORIZON", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_min_ceilings", "SBHL-MIN-CEILINGS", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_max_floors", "SBHL-MAX-FLOORS", 2, 4, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_max_floors_pruning_cycles", "SBHL-MAX-FLOORS-PRUNING-CYCLES", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_prune_unwanted_extremal_cycles", "SBHL-PRUNE-UNWANTED-EXTREMAL-CYCLES", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_ceilings", "SBHL-CEILINGS", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_floors", "SBHL-FLOORS", 2, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_predicate_relation_to_which", "SBHL-PREDICATE-RELATION-TO-WHICH", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_which_with_predicate_relation", "SBHL-WHICH-WITH-PREDICATE-RELATION", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_predicate_relation_to_which_excluding_link_node", "SBHL-PREDICATE-RELATION-TO-WHICH-EXCLUDING-LINK-NODE", 4, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_inverse_relation_to_which", "SBHL-INVERSE-RELATION-TO-WHICH", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_first_target_marked_node", "SBHL-GATHER-FIRST-TARGET-MARKED-NODE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_first_common_horizon", "SBHL-FIRST-COMMON-HORIZON", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_first_floor_of_node_pair", "SBHL-FIRST-FLOOR-OF-NODE-PAIR", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_first_ceiling_of_node_pair", "SBHL-FIRST-CEILING-OF-NODE-PAIR", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_forward_true_goals_with_no_path_from_nodes", "SBHL-FORWARD-TRUE-GOALS-WITH-NO-PATH-FROM-NODES", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_goals_with_no_path_from_nodes", "SBHL-ALL-GOALS-WITH-NO-PATH-FROM-NODES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_forward_true_nodes_between", "SBHL-ALL-FORWARD-TRUE-NODES-BETWEEN", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_closure_between", "SBHL-CLOSURE-BETWEEN", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_forward_true_nodes_among", "SBHL-ALL-FORWARD-TRUE-NODES-AMONG", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_backward_true_nodes_among", "SBHL-ALL-BACKWARD-TRUE-NODES-AMONG", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_closure_among", "SBHL-CLOSURE-AMONG", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_gather_dependent_nodes", "SBHL-GATHER-DEPENDENT-NODES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_push_dependent_nodes_onto_result", "SBHL-PUSH-DEPENDENT-NODES-ONTO-RESULT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_check_target_marking_for_dependence", "SBHL-CHECK-TARGET-MARKING-FOR-DEPENDENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_dependent_nodes", "SBHL-DEPENDENT-NODES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_dependent_backward_true_nodes", "SBHL-ALL-DEPENDENT-BACKWARD-TRUE-NODES", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_predicate_relation_p", "SBHL-PREDICATE-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_predicate_relation_in_space_p", "SBHL-PREDICATE-RELATION-IN-SPACE-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_non_justifying_predicate_relation_p", "SBHL-NON-JUSTIFYING-PREDICATE-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_predicate_relation_within_multiple_searches_p", "SBHL-PREDICATE-RELATION-WITHIN-MULTIPLE-SEARCHES-P", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_inverse_relation_p", "SBHL-INVERSE-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_false_predicate_relation_p", "SBHL-FALSE-PREDICATE-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_false_inverse_relation_p", "SBHL-FALSE-INVERSE-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_path_from_node_to_node_p", "SBHL-PATH-FROM-NODE-TO-NODE-P", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_disjoins_relation_p", "SBHL-DISJOINS-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "why_sbhl_predicate_relation_p", "WHY-SBHL-PREDICATE-RELATION-P", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "why_sbhl_false_predicate_relation_p", "WHY-SBHL-FALSE-PREDICATE-RELATION-P", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "why_sbhl_relationP", "WHY-SBHL-RELATION?", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_predicate_relation_with_any_p", "SBHL-PREDICATE-RELATION-WITH-ANY-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "why_some_sbhl_predicate_relation_among_p", "WHY-SOME-SBHL-PREDICATE-RELATION-AMONG-P", 3, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_inverse_relation_with_any_p", "SBHL-INVERSE-RELATION-WITH-ANY-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_false_predicate_relation_with_any_p", "SBHL-FALSE-PREDICATE-RELATION-WITH-ANY-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_premark_union_nodes_closures", "SBHL-PREMARK-UNION-NODES-CLOSURES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_path_from_node_to_any_of_nodes_p", "SBHL-PATH-FROM-NODE-TO-ANY-OF-NODES-P", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_disjoins_relation_with_any_p", "SBHL-DISJOINS-RELATION-WITH-ANY-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_predicate_relation_with_all_p", "SBHL-PREDICATE-RELATION-WITH-ALL-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_path_from_node_to_all_of_nodes_p", "SBHL-PATH-FROM-NODE-TO-ALL-OF-NODES-P", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_any_with_predicate_relation_p", "SBHL-ANY-WITH-PREDICATE-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_any_with_false_inverse_relation_p", "SBHL-ANY-WITH-FALSE-INVERSE-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_premark_node_closure", "SBHL-PREMARK-NODE-CLOSURE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_path_from_any_of_nodes_to_node_p", "SBHL-PATH-FROM-ANY-OF-NODES-TO-NODE-P", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_any_with_disjoins_relation_p", "SBHL-ANY-WITH-DISJOINS-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_with_predicate_relation_p", "SBHL-ALL-WITH-PREDICATE-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_with_false_predicate_relation_p", "SBHL-ALL-WITH-FALSE-PREDICATE-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_with_false_inverse_relation_p", "SBHL-ALL-WITH-FALSE-INVERSE-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_path_from_all_of_nodes_to_node_p", "SBHL-PATH-FROM-ALL-OF-NODES-TO-NODE-P", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_with_disjoins_relation_p", "SBHL-ALL-WITH-DISJOINS-RELATION-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_predicate_relation_between_any_p", "SBHL-PREDICATE-RELATION-BETWEEN-ANY-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_path_from_any_of_nodes_to_any_of_nodes_p", "SBHL-PATH-FROM-ANY-OF-NODES-TO-ANY-OF-NODES-P", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_all_with_predicate_relation_with_any_p", "SBHL-ALL-WITH-PREDICATE-RELATION-WITH-ANY-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_path_from_all_of_nodes_to_any_of_nodes_p", "SBHL-PATH-FROM-ALL-OF-NODES-TO-ANY-OF-NODES-P", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "sbhl_any_predicate_relation_with_all_p", "SBHL-ANY-PREDICATE-RELATION-WITH-ALL-P", 3, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.sbhl.sbhl_search_methods", "incompatible_mt_related_moduleP", "INCOMPATIBLE-MT-RELATED-MODULE?", 1, 0, false);
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    public static SubLObject init_sbhl_search_methods_file() {
        sbhl_search_methods.$sbhl_search_self_incompatibility_check_disabledP$ = SubLFiles.defparameter("*SBHL-SEARCH-SELF-INCOMPATIBILITY-CHECK-DISABLED?*", (SubLObject)sbhl_search_methods.NIL);
        sbhl_search_methods.$debug_sbhl_cache_inconsistency_problemP$ = SubLFiles.defparameter("*DEBUG-SBHL-CACHE-INCONSISTENCY-PROBLEM?*", (SubLObject)sbhl_search_methods.NIL);
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    public static SubLObject setup_sbhl_search_methods_file() {
        return (SubLObject)sbhl_search_methods.NIL;
    }
    
    public void declareFunctions() {
        declare_sbhl_search_methods_file();
    }
    
    public void initializeVariables() {
        init_sbhl_search_methods_file();
    }
    
    public void runTopLevelForms() {
        setup_sbhl_search_methods_file();
    }
    
    static {
        me = (SubLFile)new sbhl_search_methods();
        sbhl_search_methods.$sbhl_search_self_incompatibility_check_disabledP$ = null;
        sbhl_search_methods.$debug_sbhl_cache_inconsistency_problemP$ = null;
        $sym0$SBHL_MODULE_P = SubLObjectFactory.makeSymbol("SBHL-MODULE-P");
        $sym1$RELEVANT_SBHL_TV_IS_GENERAL_TV = SubLObjectFactory.makeSymbol("RELEVANT-SBHL-TV-IS-GENERAL-TV");
        $kw2$ERROR = SubLObjectFactory.makeKeyword("ERROR");
        $str3$_A_is_not_a__A = SubLObjectFactory.makeString("~A is not a ~A");
        $sym4$SBHL_TRUE_TV_P = SubLObjectFactory.makeSymbol("SBHL-TRUE-TV-P");
        $kw5$CERROR = SubLObjectFactory.makeKeyword("CERROR");
        $str6$continue_anyway = SubLObjectFactory.makeString("continue anyway");
        $kw7$WARN = SubLObjectFactory.makeKeyword("WARN");
        $str8$_A_is_not_a_valid__sbhl_type_erro = SubLObjectFactory.makeString("~A is not a valid *sbhl-type-error-action* value");
        $const9$True_JustificationTruth = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("True-JustificationTruth"));
        $kw10$OLD = SubLObjectFactory.makeKeyword("OLD");
        $sym11$SBHL_PUSH_ONTO_RESULT = SubLObjectFactory.makeSymbol("SBHL-PUSH-ONTO-RESULT");
        $kw12$RESOURCE = SubLObjectFactory.makeKeyword("RESOURCE");
        $sym13$SBHL_FALSE_TV_P = SubLObjectFactory.makeSymbol("SBHL-FALSE-TV-P");
        $const14$False_JustificationTruth = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("False-JustificationTruth"));
        $str15$Node__a_does_not_pass_sbhl_type_t = SubLObjectFactory.makeString("Node ~a does not pass sbhl-type-test ~a~%");
        $sym16$SBHL_PUSH_ONTO_RESULT_WITH_PRUNE = SubLObjectFactory.makeSymbol("SBHL-PUSH-ONTO-RESULT-WITH-PRUNE");
        $kw17$CLOSURE = SubLObjectFactory.makeKeyword("CLOSURE");
        $sym18$SBHL_GATHER_DEAD_END_NODES = SubLObjectFactory.makeSymbol("SBHL-GATHER-DEAD-END-NODES");
        $sym19$SBHL_GATHER_FIRST_NON_NIL_RESULT = SubLObjectFactory.makeSymbol("SBHL-GATHER-FIRST-NON-NIL-RESULT");
        $sym20$SBHL_LEAF_INSTANCES_SWEEP = SubLObjectFactory.makeSymbol("SBHL-LEAF-INSTANCES-SWEEP");
        $sym21$SBHL_SIMPLE_TRUE_SEARCH_AND_UNWIND = SubLObjectFactory.makeSymbol("SBHL-SIMPLE-TRUE-SEARCH-AND-UNWIND");
        $sym22$QUEUE_EMPTY_P = SubLObjectFactory.makeSymbol("QUEUE-EMPTY-P");
        $sym23$FUNCTION_SPEC_P = SubLObjectFactory.makeSymbol("FUNCTION-SPEC-P");
        $sym24$SBHL_APPLY_COMPOSE_FN = SubLObjectFactory.makeSymbol("SBHL-APPLY-COMPOSE-FN");
        $sym25$SBHL_APPLY_COMPOSE_FN_IF = SubLObjectFactory.makeSymbol("SBHL-APPLY-COMPOSE-FN-IF");
        $sym26$SBHL_PUSH_UNWIND_ONTO_RESULT = SubLObjectFactory.makeSymbol("SBHL-PUSH-UNWIND-ONTO-RESULT");
        $sym27$SBHL_APPLY_COMPOSE_FN_AND_COMBINE_WITH_RESULT = SubLObjectFactory.makeSymbol("SBHL-APPLY-COMPOSE-FN-AND-COMBINE-WITH-RESULT");
        $sym28$SBHL_GATHER_FIRST_NON_NIL_RESULT_WITH_PRUNE = SubLObjectFactory.makeSymbol("SBHL-GATHER-FIRST-NON-NIL-RESULT-WITH-PRUNE");
        $sym29$SBHL_PUSH_ONTO_RESULT_IF = SubLObjectFactory.makeSymbol("SBHL-PUSH-ONTO-RESULT-IF");
        $sym30$SBHL_PUSH_ONTO_RESULT_IF_AND_STOP_UNLESS = SubLObjectFactory.makeSymbol("SBHL-PUSH-ONTO-RESULT-IF-AND-STOP-UNLESS");
        $sym31$SBHL_MARKED_IN_TARGET_SPACE_P = SubLObjectFactory.makeSymbol("SBHL-MARKED-IN-TARGET-SPACE-P");
        $sym32$MEMBER_ = SubLObjectFactory.makeSymbol("MEMBER?");
        $kw33$FORWARD = SubLObjectFactory.makeKeyword("FORWARD");
        $kw34$BACKWARD = SubLObjectFactory.makeKeyword("BACKWARD");
        $sym35$SBHL_STOP_AT_HORIZON = SubLObjectFactory.makeSymbol("SBHL-STOP-AT-HORIZON");
        $const36$genlInverse = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("genlInverse"));
        $sym37$FORT_P = SubLObjectFactory.makeSymbol("FORT-P");
        $sym38$_ = SubLObjectFactory.makeSymbol("+");
        $sym39$GENL_CARDINALITY = SubLObjectFactory.makeSymbol("GENL-CARDINALITY");
        $sym40$SBHL_PUSH_DEPENDENT_NODES_ONTO_RESULT = SubLObjectFactory.makeSymbol("SBHL-PUSH-DEPENDENT-NODES-ONTO-RESULT");
        $sym41$SBHL_CHECK_TARGET_MARKING_FOR_DEPENDENCE = SubLObjectFactory.makeSymbol("SBHL-CHECK-TARGET-MARKING-FOR-DEPENDENCE");
        $str42$__sbhl_predicate_relation_p__cach = SubLObjectFactory.makeString("~&sbhl-predicate-relation-p: cache ~S differs from sbhl ~S!~%");
        $str43$_______cached___S__clet__cached_r = SubLObjectFactory.makeString("~&     cached: ~S (clet (cached-result) (possibly-with-sbhl-mt-relevance ~S (csetq cached-result (sbhl-cached-predicate-relation-p ~S ~S ~S))) cached-result)~%");
        $str44$___non_cached___S__clet__non_cach = SubLObjectFactory.makeString("~& non-cached: ~S (clet (non-cached-result) (with-new-sbhl-space (with-sbhl-search-module (get-sbhl-module ~S) (with-sbhl-forward-true-search ~S ~S (csetq non-cached-result (sbhl-path-from-node-to-node-p ~S ~S))))) non-cached-result)~%");
        $sym45$SBHL_MARK_NODE_IN_PRECOMPUTE_SPACE = SubLObjectFactory.makeSymbol("SBHL-MARK-NODE-IN-PRECOMPUTE-SPACE");
        $kw46$BOOLEAN = SubLObjectFactory.makeKeyword("BOOLEAN");
        $sym47$SBHL_NODE_IS_GOAL_NODE = SubLObjectFactory.makeSymbol("SBHL-NODE-IS-GOAL-NODE");
        $const48$negationInverse = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("negationInverse"));
        $sym49$SBHL_NODE_MARKED_AS_GOAL_NODE = SubLObjectFactory.makeSymbol("SBHL-NODE-MARKED-AS-GOAL-NODE");
        $sym50$SBHL_PREDICATE_RELATION_P = SubLObjectFactory.makeSymbol("SBHL-PREDICATE-RELATION-P");
        $sym51$SBHL_FALSE_PREDICATE_RELATION_P = SubLObjectFactory.makeSymbol("SBHL-FALSE-PREDICATE-RELATION-P");
        $sym52$SBHL_IMPLIED_DISJOINS_RELATION_P = SubLObjectFactory.makeSymbol("SBHL-IMPLIED-DISJOINS-RELATION-P");
        $sym53$SBHL_IMPLIED_FALSE_PREDICATE_RELATION_P = SubLObjectFactory.makeSymbol("SBHL-IMPLIED-FALSE-PREDICATE-RELATION-P");
        $str54$Invalid_TV_argument__a__or__sbhl_ = SubLObjectFactory.makeString("Invalid TV argument ~a, or *sbhl-tv* ~a");
        $sym55$SBHL_PREDICATE_RELATION_WITH_ANY_P = SubLObjectFactory.makeSymbol("SBHL-PREDICATE-RELATION-WITH-ANY-P");
        $str56$_A_is_neither_SET_P_nor_LISTP_ = SubLObjectFactory.makeString("~A is neither SET-P nor LISTP.");
        $const57$incompatibleMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("incompatibleMt"));
        $const58$intensionallyIncompatibleMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("intensionallyIncompatibleMt"));
    }
    
    public static final class $sbhl_stop_at_horizon$UnaryFunction extends UnaryFunction
    {
        public $sbhl_stop_at_horizon$UnaryFunction() {
            super(SubLTranslatedFile.extractFunctionNamed("SBHL-STOP-AT-HORIZON"));
        }
        
        public SubLObject processItem(final SubLObject arg1) {
            return sbhl_search_methods.sbhl_stop_at_horizon(arg1);
        }
    }
}

/*

	Total time: 9308 ms
	
*/