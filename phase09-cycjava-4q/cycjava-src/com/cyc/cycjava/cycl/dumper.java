
package com.cyc.cycjava.cycl;

import com.cyc.tool.subl.jrtl.nativeCode.subLisp.UnaryFunction;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDecl;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.CommonSymbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLStructDeclNative;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLStructNative;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.BinaryFunction;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.visitation;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLSpecialOperatorDeclarations;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Structures;
import com.cyc.tool.subl.util.SubLFiles;
import com.cyc.cycjava.cycl.inference.harness.forward;
import com.cyc.cycjava.cycl.cyc_testing.kb_content_test.kct_utils;
import com.cyc.cycjava.cycl.rtp.rtp_initialize;
import com.cyc.cycjava.cycl.wordnet_import.wordnet_import;
import com.cyc.cycjava.cycl.inference.open_cyc_inference_api;
import java.util.Map;
import java.util.Iterator;
import com.cyc.cycjava.cycl.rtp.rtp_datastructures;
import com.cyc.cycjava.cycl.sbhl.sbhl_time_dates;
import com.cyc.cycjava.cycl.sbhl.sbhl_time_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_cache;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_time_modules;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_declarations;
import com.cyc.cycjava.cycl.sbhl.sbhl_time_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_graphs;
import com.cyc.cycjava.cycl.sbhl.sbhl_module_vars;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Eval;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Symbols;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Locks;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.print_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Hashtables;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Vectors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sort;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObjectFactory;
import com.cyc.cycjava.cycl.sksi.sksi_infrastructure.sksi_infrastructure_utilities;
import com.cyc.cycjava.cycl.sbhl.sbhl_marking_vars;
import com.cyc.cycjava.cycl.sbhl.sbhl_link_methods;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.compatibility;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.stream_macros;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Equality;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.streams_high;
import com.cyc.cycjava.cycl.sbhl.sbhl_caching_policies;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.time_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.PrintLow;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Functions;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Dynamic;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapping;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.conses_high;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Values;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Threads;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Mapper;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.StreamsLow;
import com.cyc.cycjava.cycl.inference.harness.inference_analysis;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Storage;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Time;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.SubLThread;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Errors;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Filesys;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLProcess;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Numbers;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Strings;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Sequences;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Characters;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.Types;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.cdestructuring_bind;
import com.cyc.tool.subl.jrtl.translatedCode.sublisp.reader;
import com.cyc.tool.subl.jrtl.nativeCode.subLisp.ConsesLow;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLObject;
import com.cyc.tool.subl.jrtl.nativeCode.type.number.SubLInteger;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLString;
import com.cyc.tool.subl.jrtl.nativeCode.type.core.SubLList;
import com.cyc.tool.subl.jrtl.nativeCode.type.symbol.SubLSymbol;
import com.cyc.tool.subl.util.SubLFile;
import com.cyc.tool.subl.util.SubLTranslatedFile;

public final class dumper extends SubLTranslatedFile
{
    public static final SubLFile me;
    public static final String myName = "com.cyc.cycjava.cycl.dumper";
    public static final String myFingerPrint = "8a2e3d11b93fd2a55db610403cef846ea4709247bc806d2a7b912cace3d84f44";
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 1029L)
    private static SubLSymbol $force_monolithic_kb_assumption$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 4654L)
    public static SubLSymbol $separate_file_for_complex_indexingP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 5047L)
    private static SubLSymbol $default_dump_path$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 5488L)
    private static SubLSymbol $default_dump_extension$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 5602L)
    private static SubLSymbol $default_dump_product_extension$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 6153L)
    public static SubLSymbol $kb_dump_fvector_wide_mark_tag$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 7134L)
    private static SubLSymbol $dump_bytes_per_assertion$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 7853L)
    public static SubLSymbol $dump_verify$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 9107L)
    private static SubLSymbol $kb_load_gc_checkpoints_enabledP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 10185L)
    private static SubLSymbol $perform_standard_pre_dump_kb_cleanups_completeP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 19492L)
    public static SubLSymbol $assertion_tile_size$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 30706L)
    public static SubLSymbol $dump_verbose$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 30803L)
    public static SubLSymbol $dump_verbose_detail$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 33675L)
    private static SubLSymbol $auto_increment_kb_number_on_dumpP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 33815L)
    private static SubLSymbol $snapshot_tombstoning_mode$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 36136L)
    private static SubLSymbol $kb_manifest$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 38103L)
    public static SubLSymbol $kb_units_fvector_descriptions$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 72789L)
    public static SubLSymbol $kb_dump_default_common_symbols$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 75115L)
    private static SubLSymbol $kb_dump_common_symbols$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLSymbol $dtp_index_writer$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 188375L)
    public static SubLSymbol $compute_arg_type_cache_on_dumpP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 190307L)
    public static SubLSymbol $cyc_alexandria_defns_dump_load_supportedP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 221526L)
    public static SubLSymbol $bootstrapping_constantsP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 221578L)
    public static SubLSymbol $bootstrapping_nartsP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 221625L)
    public static SubLSymbol $bootstrapping_assertionsP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 221677L)
    public static SubLSymbol $bootstrapping_kb_hl_supportsP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 221733L)
    public static SubLSymbol $bootstrapping_deductionsP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 221785L)
    public static SubLSymbol $bootstrapping_bookkeeping_gafsP$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 221843L)
    private static SubLSymbol $essential_kb_evaluatable_file_type$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 234193L)
    private static SubLSymbol $dump_invalid_constants$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 234257L)
    private static SubLSymbol $dump_invalid_narts$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 234316L)
    private static SubLSymbol $dump_invalid_assertions$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 234380L)
    private static SubLSymbol $dump_invalid_kb_hl_supports$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 234448L)
    private static SubLSymbol $dump_invalid_deductions$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 234512L)
    private static SubLSymbol $dump_invalid_bookkeeping_gafs$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240049L)
    private static SubLSymbol $exportable_mtP_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240434L)
    private static SubLSymbol $exportable_deduction_supportP_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240770L)
    private static SubLSymbol $exportable_deduction_supported_objectP_caching_state$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 254261L)
    public static SubLSymbol $current_dump_assertion$;
    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 254306L)
    public static SubLSymbol $last_invalid_assertion$;
    private static final SubLSymbol $sym0$_FORCE_MONOLITHIC_KB_ASSUMPTION_;
    private static final SubLSymbol $sym1$WITH_CONSTANT_DUMP_ID_TABLE;
    private static final SubLSymbol $sym2$WITH_NART_DUMP_ID_TABLE;
    private static final SubLSymbol $sym3$WITH_UNREPRESENTED_TERM_DUMP_ID_TABLE;
    private static final SubLSymbol $sym4$WITH_ASSERTION_DUMP_ID_TABLE;
    private static final SubLSymbol $sym5$WITH_DEDUCTION_DUMP_ID_TABLE;
    private static final SubLSymbol $sym6$WITH_KB_HL_SUPPORT_DUMP_ID_TABLE;
    private static final SubLSymbol $sym7$WITH_CLAUSE_STRUC_DUMP_ID_TABLE;
    private static final SubLSymbol $sym8$CLET;
    private static final SubLList $list9;
    private static final SubLList $list10;
    private static final SubLList $list11;
    private static final SubLList $list12;
    private static final SubLSymbol $sym13$DISCARD_DUMP_FILENAME;
    private static final SubLList $list14;
    private static final SubLSymbol $sym15$FILENAME_VAR;
    private static final SubLSymbol $sym16$WITH_KB_DUMP_FILENAME;
    private static final SubLSymbol $sym17$WITH_PRIVATE_BINARY_FILE;
    private static final SubLSymbol $sym18$PWHEN;
    private static final SubLList $list19;
    private static final SubLSymbol $sym20$CSETQ;
    private static final SubLSymbol $sym21$ENABLE_FILE_STREAM_MEMORY_MAPPING;
    private static final SubLSymbol $sym22$CUNWIND_PROTECT;
    private static final SubLSymbol $sym23$PROGN;
    private static final SubLSymbol $sym24$CLOSE;
    private static final SubLSymbol $sym25$FILENAME_VAR;
    private static final SubLSymbol $sym26$WITH_PRIVATE_TEXT_FILE;
    private static final SubLSymbol $sym27$STRINGP;
    private static final SubLList $list28;
    private static final SubLList $list29;
    private static final SubLList $list30;
    private static final SubLString $str31$cfasl;
    private static final SubLString $str32$fht;
    private static final SubLString $str33$_wide_mark;
    private static final SubLInteger $int34$192;
    private static final SubLString $str35$file__s_not_found;
    private static final SubLString $str36$Directory__S_does_not_exist_;
    private static final SubLString $str37$Directory__S_is_not_different_fro;
    private static final SubLString $str38$Directory__S_cannot_be_written_to;
    private static final SubLString $str39$Directory__S_does_not_have_enough;
    private static final SubLString $str40$KB_Load_GC_checkpoint_reached____;
    private static final SubLString $str41$rule_utility_experience;
    private static final SubLSymbol $sym42$CONSTANT_DUMP_ID;
    private static final SubLSymbol $sym43$NART_DUMP_ID;
    private static final SubLSymbol $sym44$ASSERTION_DUMP_ID;
    private static final SubLSymbol $sym45$DEDUCTION_DUMP_ID;
    private static final SubLSymbol $sym46$KB_HL_SUPPORT_DUMP_ID;
    private static final SubLSymbol $sym47$CLAUSE_STRUC_DUMP_ID;
    private static final SubLSymbol $sym48$FIND_CONSTANT_BY_DUMP_ID;
    private static final SubLSymbol $sym49$FIND_NART_BY_DUMP_ID;
    private static final SubLSymbol $sym50$FIND_ASSERTION_BY_DUMP_ID;
    private static final SubLSymbol $sym51$FIND_DEDUCTION_BY_DUMP_ID;
    private static final SubLSymbol $sym52$FIND_KB_HL_SUPPORT_BY_DUMP_ID;
    private static final SubLSymbol $sym53$FIND_CLAUSE_STRUC_BY_DUMP_ID;
    private static final SubLSymbol $sym54$LOAD_NON_COMPUTABLE_KB_PLUS_REBUILD_AND_DUMP_COMPUTABLE_KB;
    private static final SubLSymbol $sym55$REBUILD_AND_RECONNECT_COMPUTABLE_KB;
    private static final SubLInteger $int56$2048;
    private static final SubLInteger $int57$256;
    private static final SubLSymbol $sym58$_ASSERTION_TILE_SIZE_;
    private static final SubLInteger $int59$1000000;
    private static final SubLString $str60$Re_Indexing_KB_in_;
    private static final SubLString $str61$_parts__of_;
    private static final SubLString $str62$_assertions_;
    private static final SubLString $str63$cdolist;
    private static final SubLString $str64$Reserving_known_TOP_N_indices;
    private static final SubLList $list65;
    private static final SubLString $str66$Indexing_assertion_range__;
    private static final SubLString $str67$_;
    private static final SubLString $str68$_;
    private static final SubLString $str69$Dumping_partial_index_to_;
    private static final SubLSymbol $sym70$NEW_NINIVEH_CONSTANT_INDICES_ITERATOR;
    private static final SubLSymbol $kw71$EQUAL_SIZED;
    private static final SubLString $str72$Building_constant_indices_from_pa;
    private static final SubLSymbol $sym73$NEW_NINIVEH_NART_INDICES_ITERATOR;
    private static final SubLString $str74$Building_NART_indices_from_partia;
    private static final SubLSymbol $sym75$NEW_NINIVEH_UNREPRESENTED_TERM_INDICES_ITERATOR;
    private static final SubLSymbol $sym76$FIND_UNREPRESENTED_TERM_BY_SUID;
    private static final SubLString $str77$Building_unrepresented_term_indic;
    private static final SubLString $str78$Building_index_from_partial_resul;
    private static final SubLSymbol $kw79$ERROR;
    private static final SubLSymbol $kw80$TERM_ID;
    private static final SubLString $str81$Iterator__A_was_done_at_ID__A_of_;
    private static final SubLList $list82;
    private static final SubLString $str83$Expected_index_for__A__got__A_ins;
    private static final SubLList $list84;
    private static final SubLSymbol $sym85$ITERATION_FINALIZE;
    private static final SubLString $str86$_part;
    private static final SubLString $str87$_;
    private static final SubLString $str88$Cannot_create_part_directory__A__;
    private static final SubLString $str89$Cleaning_up_;
    private static final SubLSymbol $kw90$CLEAN;
    private static final SubLSymbol $sym91$CYC_DUMP_KB;
    private static final SubLSymbol $kw92$AGENDA_TIMEOUT;
    private static final SubLString $str93$Setting_up_safe_KB_dump_environme;
    private static final SubLString $str94$Agenda_was_not_successfully_halte;
    private static final SubLSymbol $kw95$UNKNOWN;
    private static final SubLString $str96$Restoring_pre_dump_environment;
    private static final SubLSymbol $sym97$CYC_DUMP_KB_UNSAFE;
    private static final SubLString $str98$Dump__A_KB_trivially_finished__du;
    private static final SubLSymbol $kw99$OVERWRITE_UNITS_;
    private static final SubLString $str100$done_txt;
    private static final SubLString $str101$Cyc_units_aready_exist_in_directo;
    private static final SubLSymbol $kw102$FORCE_DIRECTORY_CREATE_;
    private static final SubLSymbol $kw103$STANDARD;
    private static final SubLSymbol $kw104$INCREMENTAL;
    private static final SubLSymbol $kw105$INCREMENTAL_STANDARD;
    private static final SubLSymbol $kw106$SNAPSHOT;
    private static final SubLSymbol $kw107$SNAPSHOT_MINIMAL;
    private static final SubLSymbol $kw108$MINIMAL;
    private static final SubLSymbol $kw109$RAW;
    private static final SubLSymbol $kw110$INCREMENTAL_RAW;
    private static final SubLSymbol $kw111$FULL;
    private static final SubLSymbol $kw112$INCREMENTAL_ESSENTIAL;
    private static final SubLSymbol $kw113$ESSENTIAL;
    private static final SubLSymbol $kw114$SNAPSHOT_MEDIUM;
    private static final SubLSymbol $kw115$MEDIUM;
    private static final SubLSymbol $kw116$SNAPSHOT_MAXIMAL;
    private static final SubLSymbol $kw117$MAXIMAL;
    private static final SubLString $str118$Valid_DUMP_TYPE_not_specified;
    private static final SubLList $list119;
    private static final SubLSymbol $sym120$OP_TIME;
    private static final SubLSymbol $sym121$_DUMP_VERBOSE_;
    private static final SubLSymbol $sym122$FORMAT;
    private static final SubLString $str123$_________A_KB;
    private static final SubLList $list124;
    private static final SubLString $str125$__A__A_at__A__;
    private static final SubLList $list126;
    private static final SubLSymbol $sym127$CTIME;
    private static final SubLSymbol $sym128$FORCE_FORMAT;
    private static final SubLString $str129$_________A_of_KB__A_completed___A;
    private static final SubLList $list130;
    private static final SubLSymbol $sym131$ELAPSED_TIME_ABBREVIATION_STRING;
    private static final SubLString $str132$Dumping;
    private static final SubLString $str133$__A;
    private static final SubLString $str134$to;
    private static final SubLString $str135$Dump;
    private static final SubLSymbol $kw136$LOAD_KB;
    private static final SubLString $str137$Loading;
    private static final SubLString $str138$from;
    private static final SubLSymbol $kw139$POLICIES;
    private static final SubLString $str140$Load;
    private static final SubLSymbol $kw141$SNAPSHOT_KB;
    private static final SubLString $str142$Snapshotting;
    private static final SubLString $str143$Snapshot;
    private static final SubLString $str144$Create_directory_and_continue_;
    private static final SubLString $str145$_____S_transcript_operations_proc;
    private static final SubLSymbol $sym146$_KB_MANIFEST_;
    private static final SubLSymbol $sym147$CATCH_ERROR_MESSAGE_HANDLER;
    private static final SubLString $str148$Could_not_load_KB_manifest_from__;
    private static final SubLSymbol $kw149$ID;
    private static final SubLString $str150$manifest;
    private static final SubLSymbol $kw151$INPUT;
    private static final SubLString $str152$Unable_to_open__S;
    private static final SubLSymbol $kw153$DATA_FILE;
    private static final SubLSymbol $kw154$INDEX_FILE;
    private static final SubLString $str155$_index;
    private static final SubLSymbol $kw156$TYPE;
    private static final SubLSymbol $kw157$KNOWLEDGE;
    private static final SubLString $str158$constant;
    private static final SubLString $str159$indices;
    private static final SubLString $str160$_indices;
    private static final SubLList $list161;
    private static final SubLList $list162;
    private static final SubLSymbol $kw163$ALLOW_OTHER_KEYS;
    private static final SubLString $str164$_complex_indices;
    private static final SubLSymbol $kw165$COMPLEX_DATA_FILE;
    private static final SubLSymbol $kw166$COMPLEX_INDEX_FILE;
    private static final SubLSymbol $kw167$INDEXING;
    private static final SubLString $str168$assertion;
    private static final SubLString $str169$deduction;
    private static final SubLString $str170$kb_hl_support;
    private static final SubLString $str171$nart_hl_formula;
    private static final SubLString $str172$nat;
    private static final SubLString $str173$unrepresented_term;
    private static final SubLSymbol $sym174$GET_KB_UNITS_FILE_VECTOR_DESCRIPTIONS;
    private static final SubLSymbol $sym175$GET_KB_UNITS_FILE_VECTOR_CATEGORIES;
    private static final SubLSymbol $kw176$NOT_FOUND;
    private static final SubLString $str177$;
    private static final SubLString $str178$File_Vector_category_description_;
    private static final SubLString $str179$Skipping_unknown_File_Vector_cate;
    private static final SubLSymbol $kw180$COMPUTABLE;
    private static final SubLString $str181$________Dumping_essential_KB__;
    private static final SubLString $str182$________Snapshotting_essential_KB;
    private static final SubLSymbol $kw183$CONSTANT_SHELLS;
    private static final SubLSymbol $kw184$NART_SHELLS;
    private static final SubLSymbol $kw185$ASSERTION_SHELLS;
    private static final SubLSymbol $kw186$DEDUCTION_DEFS;
    private static final SubLSymbol $kw187$KB_HL_SUPPORT_SHELLS;
    private static final SubLSymbol $kw188$CLAUSE_STRUC_DEFS;
    private static final SubLSymbol $kw189$ASSERTION_DEFS;
    private static final SubLSymbol $kw190$KB_HL_SUPPORT_DEFS;
    private static final SubLSymbol $kw191$BOOKEEPING_ASSERTIONS;
    private static final SubLSymbol $kw192$EXPERIENCE;
    private static final SubLString $str193$________Loading_essential_KB_at__;
    private static final SubLSymbol $kw194$SETUP;
    private static final SubLSymbol $kw195$UNREPRESENTED_TERMS;
    private static final SubLSymbol $kw196$KB_INDEXING;
    private static final SubLSymbol $kw197$RULE_SET;
    private static final SubLSymbol $kw198$NON_TRUE_ASSERTION_TV_CACHE;
    private static final SubLString $str199$________Loading_computable_KB_at_;
    private static final SubLString $str200$done;
    private static final SubLString $str201$text;
    private static final SubLSymbol $kw202$OUTPUT;
    private static final SubLString $str203$________Loading_computable_remain;
    private static final SubLSymbol $kw204$NART_HL_FORMULAS;
    private static final SubLSymbol $kw205$MISC;
    private static final SubLSymbol $kw206$SBHL_DATA;
    private static final SubLSymbol $kw207$SBHL_CACHE;
    private static final SubLSymbol $kw208$CARDINALITY_ESTIMATES;
    private static final SubLSymbol $kw209$ARG_TYPE_CACHE;
    private static final SubLSymbol $kw210$DEFNS_CACHE;
    private static final SubLSymbol $kw211$SOMEWHERE_CACHE;
    private static final SubLSymbol $kw212$ARITY_CACHE;
    private static final SubLSymbol $kw213$TVA_CACHE;
    private static final SubLSymbol $kw214$REFORMULATOR_RULES;
    private static final SubLSymbol $kw215$LEXICON_CACHE;
    private static final SubLSymbol $kw216$RTP_RULES;
    private static final SubLSymbol $kw217$PARAPHRASE_CACHE;
    private static final SubLSymbol $kw218$ENGLISH_UOM;
    private static final SubLSymbol $kw219$CAE_QUERY_SEARCH_TABLES;
    private static final SubLString $str220$Cannot_initialize_reformulator_du;
    private static final SubLString $str221$Cannot_initialize_lexicon_cache_d;
    private static final SubLString $str222$________Rebuilding_computable_but;
    private static final SubLString $str223$Cannot_initialize_paraphrase_code;
    private static final SubLString $str224$Cannot_initialize_SKSI_due_to_mis;
    private static final SubLSymbol $sym225$SYMBOLP;
    private static final SubLSymbol $kw226$EOF;
    private static final SubLString $str227$_d_bytes_of_unread_stuff_in__S;
    private static final SubLString $str228$_a__;
    private static final SubLSymbol $sym229$NON_NEGATIVE_INTEGER_P;
    private static final SubLString $str230$id;
    private static final SubLString $str231$_was;
    private static final SubLString $str232$s_were;
    private static final SubLString $str233$Noting_that_;
    private static final SubLString $str234$_;
    private static final SubLString $str235$_deleted;
    private static final SubLString $str236$Deleted_IDs_file__A_contained_no_;
    private static final SubLList $list237;
    private static final SubLString $str238$__Dump_ID_regressed_from__A_to__A;
    private static final SubLString $str239$______writing__S____A__index__i_e;
    private static final SubLSymbol $sym240$_;
    private static final SubLString $str241$____tombstoning_companion_complex;
    private static final SubLSymbol $kw242$UNPROVIDED;
    private static final SubLString $str243$ID_ordering_regressed_from__A_to_;
    private static final SubLString $str244$______tombstoning____A__index__i_;
    private static final SubLString $str245$______appending__S____A__index__i;
    private static final SubLSymbol $kw246$OVERFLOW;
    private static final SubLSymbol $kw247$COMPLEX;
    private static final SubLSymbol $kw248$FVECTOR;
    private static final SubLString $str249$Inconsistent_state____already_for;
    private static final SubLString $str250$__Redoing__A_index_snap_shot_with;
    private static final SubLString $str251$Inconsistent_state____already_for;
    private static final SubLString $str252$__Redoing__A_index_snap_shot_with;
    private static final SubLString $str253$Unexpected_snapshot_state__A_____;
    private static final SubLString $str254$Redoing_;
    private static final SubLString $str255$_snapshot_with_wide_index_____;
    private static final SubLSymbol $kw256$WIDEN_INDEX;
    private static final SubLString $str257$Cannot_find_required_file__A_;
    private static final SubLList $list258;
    private static final SubLString $str259$Dumping_special_objects_at__A____;
    private static final SubLString $str260$special;
    private static final SubLString $str261$Loading_special_objects____;
    private static final SubLSymbol $sym262$INTEGERP;
    private static final SubLString $str263$constant_count;
    private static final SubLString $str264$constant_shell;
    private static final SubLString $str265$Dumping_constant_shells;
    private static final SubLSymbol $kw266$SKIP;
    private static final SubLString $str267$deleted_constant_ids;
    private static final SubLString $str268$Loading_constant_shells;
    private static final SubLString $str269$The_specified_file_position__A_is;
    private static final SubLString $str270$_A_lies_within_the_file_header__0;
    private static final SubLString $str271$_A_specifies_a_file_position_in_t;
    private static final SubLString $str272$_A_should_have_been_found_but_was;
    private static final SubLString $str273$nart_count;
    private static final SubLString $str274$deleted_nart_ids;
    private static final SubLString $str275$NART;
    private static final SubLString $str276$nat_shell;
    private static final SubLString $str277$Loading_NART_shells;
    private static final SubLString $str278$assertion_count;
    private static final SubLString $str279$deleted_assertion_ids;
    private static final SubLString $str280$Enabling_lazy_assertion_handle_su;
    private static final SubLString $str281$assertion_shell;
    private static final SubLString $str282$Loading_assertion_shells;
    private static final SubLString $str283$kb_hl_support_count;
    private static final SubLString $str284$deleted_kb_hl_support_ids;
    private static final SubLString $str285$KB_HL_support;
    private static final SubLString $str286$Enabling_lazy_KB_HL_support_handl;
    private static final SubLString $str287$kb_hl_support_shell;
    private static final SubLString $str288$Loading_KB_HL_support_shells;
    private static final SubLString $str289$unrepresented_term_count;
    private static final SubLString $str290$unrepresented_terms;
    private static final SubLString $str291$Dumping_KB_unrepresented_terms;
    private static final SubLString $str292$____Old_Space;
    private static final SubLString $str293$____New_Space;
    private static final SubLString $str294$Reconnecting_to_unrepresented_ter;
    private static final SubLString $str295$Could_not_locate__A__faling_back_;
    private static final SubLString $str296$Loading_KB_unrepresented_terms;
    private static final SubLInteger $int297$500;
    private static final SubLString $str298$clause_struc_count;
    private static final SubLString $str299$There_are__A_gaps_in_the_clause_s;
    private static final SubLString $str300$clause_struc;
    private static final SubLString $str301$Dumping_clause_struc_definitions;
    private static final SubLString $str302$deleted_clause_struc_ids;
    private static final SubLString $str303$shared_clauses;
    private static final SubLString $str304$Loading_clause_struc_definitions;
    private static final SubLString $str305$__The__A_size_is_larger_than_4GB_;
    private static final SubLString $str306$Persisting_wide_index_entry_suppo;
    private static final SubLString $str307$deduction_count;
    private static final SubLString $str308$deduction_index;
    private static final SubLString $str309$Dumping_deduction_definitions;
    private static final SubLString $str310$deduction_defs;
    private static final SubLSymbol $sym311$SNAPSHOT_DEDUCTION_DEFS_INTERNAL;
    private static final SubLList $list312;
    private static final SubLList $list313;
    private static final SubLString $str314$Copying_deduction_definitions_fro;
    private static final SubLList $list315;
    private static final SubLString $str316$Tombstoning_deleted_deduction_def;
    private static final SubLSymbol $kw317$END;
    private static final SubLSymbol $sym318$DEDUCTION_ID;
    private static final SubLSymbol $sym319$DUMP_DEDUCTION_DEF;
    private static final SubLString $str320$Appending_new_deduction_definitio;
    private static final SubLString $str321$__Deduction_definitions_will_be_s;
    private static final SubLString $str322$Determining_deduction_max_ID_usin;
    private static final SubLString $str323$Determining_deduction_max_ID_from;
    private static final SubLString $str324$Enabling_lazy_deduction_handle_su;
    private static final SubLString $str325$___Deduction_definitions_use_wide;
    private static final SubLString $str326$Not_yet_implemented_;
    private static final SubLString $str327$Loading_deduction_definitions;
    private static final SubLString $str328$deleted_deduction_ids;
    private static final SubLSymbol $sym329$LOAD_DEDUCTION_DEF_FROM_CACHE;
    private static final SubLString $str330$assertion_index;
    private static final SubLString $str331$Dumping_assertion_definitions;
    private static final SubLString $str332$assertion_defs;
    private static final SubLSymbol $sym333$SNAPSHOT_ASSERTION_DEFS_INTERNAL;
    private static final SubLList $list334;
    private static final SubLList $list335;
    private static final SubLString $str336$Copying_assertion_definitions_fro;
    private static final SubLList $list337;
    private static final SubLString $str338$Tombstoning_deleted_assertion_def;
    private static final SubLSymbol $kw339$NO_COMPLEX_FVECTOR;
    private static final SubLSymbol $sym340$FIND_ASSERTION_BY_ID;
    private static final SubLSymbol $sym341$SNAPSHOT_ASSERTION_DEF;
    private static final SubLString $str342$Updating_changed_assertion_defini;
    private static final SubLSymbol $sym343$ASSERTION_ID;
    private static final SubLSymbol $sym344$DUMP_ASSERTION_DEF;
    private static final SubLString $str345$Appending_new_assertion_definitio;
    private static final SubLString $str346$__Assertion_definitions_will_be_s;
    private static final SubLString $str347$___Assertion_definitions_use_wide;
    private static final SubLString $str348$Loading_assertion_definitions;
    private static final SubLSymbol $sym349$LOAD_ASSERTION_DEF_FROM_CACHE;
    private static final SubLString $str350$kb_hl_support_index;
    private static final SubLString $str351$Dumping_KB_HL_support_definitions;
    private static final SubLString $str352$__KB_HL_supports_will_be_swapped_;
    private static final SubLString $str353$Loading_KB_HL_support_definitions;
    private static final SubLSymbol $sym354$LOAD_KB_HL_SUPPORT_DEF_FROM_CACHE;
    private static final SubLString $str355$kb_hl_support_indexing;
    private static final SubLString $str356$Dumping_KB_HL_support_indexing___;
    private static final SubLString $str357$Loading_KB_HL_support_indexing___;
    private static final SubLString $str358$bookkeeping_assertions;
    private static final SubLString $str359$Dumping_bookkeeping_assertions___;
    private static final SubLList $list360;
    private static final SubLString $str361$Loading_bookkeeping_assertions___;
    private static final SubLString $str362$Dumping_rule_utility_experience__;
    private static final SubLString $str363$Loading_rule_utility_experience__;
    private static final SubLString $str364$Cannot_locate__A_;
    private static final SubLString $str365$Cannot_open__A_for_reading___;
    private static final SubLSymbol $sym366$NINIVEH_INDEX_ITERATOR_DONE_;
    private static final SubLSymbol $sym367$NINIVEH_INDEX_ITERATOR_NEXT;
    private static final SubLSymbol $sym368$NINIVEH_INDEX_ITERATOR_FINALIZE;
    private static final SubLSymbol $kw369$STUB;
    private static final SubLList $list370;
    private static final SubLList $list371;
    private static final SubLSymbol $kw372$IGNORE_ERRORS_TARGET;
    private static final SubLSymbol $sym373$IGNORE_ERRORS_HANDLER;
    private static final SubLSymbol $kw374$CONSTANT_INDEX;
    private static final SubLSymbol $kw375$NART_INDEX;
    private static final SubLSymbol $kw376$UNREPRESENTED_TERM_INDEX;
    private static final SubLSymbol $kw377$ASSERTION_INDEX;
    private static final SubLSymbol $kw378$AUXILIARY_INDEX;
    private static final SubLSymbol $kw379$BOOKKEEPPING_INDEX;
    private static final SubLSymbol $kw380$KB_HL_SUPPORT_INDEX;
    private static final SubLSymbol $sym381$INDEX_WRITER;
    private static final SubLSymbol $sym382$INDEX_WRITER_P;
    private static final SubLList $list383;
    private static final SubLList $list384;
    private static final SubLList $list385;
    private static final SubLList $list386;
    private static final SubLSymbol $sym387$DEFAULT_STRUCT_PRINT_FUNCTION;
    private static final SubLSymbol $sym388$INDEX_WRITER_PRINT_FUNCTION_TRAMPOLINE;
    private static final SubLList $list389;
    private static final SubLSymbol $sym390$IDXWRITER_DIRECTORY;
    private static final SubLSymbol $sym391$_CSETF_IDXWRITER_DIRECTORY;
    private static final SubLSymbol $sym392$IDXWRITER_FVECTOR;
    private static final SubLSymbol $sym393$_CSETF_IDXWRITER_FVECTOR;
    private static final SubLSymbol $sym394$IDXWRITER_INDEX_FILE;
    private static final SubLSymbol $sym395$_CSETF_IDXWRITER_INDEX_FILE;
    private static final SubLSymbol $sym396$IDXWRITER_INDEX_LABEL;
    private static final SubLSymbol $sym397$_CSETF_IDXWRITER_INDEX_LABEL;
    private static final SubLSymbol $sym398$IDXWRITER_COMPLEX_FVECTOR;
    private static final SubLSymbol $sym399$_CSETF_IDXWRITER_COMPLEX_FVECTOR;
    private static final SubLSymbol $sym400$IDXWRITER_COMPLEX_INDEX_FILE;
    private static final SubLSymbol $sym401$_CSETF_IDXWRITER_COMPLEX_INDEX_FILE;
    private static final SubLSymbol $sym402$IDXWRITER_COMPLEX_INDEX_LABEL;
    private static final SubLSymbol $sym403$_CSETF_IDXWRITER_COMPLEX_INDEX_LABEL;
    private static final SubLSymbol $sym404$IDXWRITER_DUMP_FN;
    private static final SubLSymbol $sym405$_CSETF_IDXWRITER_DUMP_FN;
    private static final SubLSymbol $kw406$DIRECTORY;
    private static final SubLSymbol $kw407$INDEX_LABEL;
    private static final SubLSymbol $kw408$COMPLEX_FVECTOR;
    private static final SubLSymbol $kw409$COMPLEX_INDEX_LABEL;
    private static final SubLSymbol $kw410$DUMP_FN;
    private static final SubLString $str411$Invalid_slot__S_for_construction_;
    private static final SubLSymbol $kw412$BEGIN;
    private static final SubLSymbol $sym413$MAKE_INDEX_WRITER;
    private static final SubLSymbol $kw414$SLOT;
    private static final SubLSymbol $sym415$VISIT_DEFSTRUCT_OBJECT_INDEX_WRITER_METHOD;
    private static final SubLString $str416$indices_index;
    private static final SubLString $str417$constant_indices;
    private static final SubLString $str418$constant_complex_indices;
    private static final SubLString $str419$constant_complex_indices_index;
    private static final SubLString $str420$constant_complex_indices;
    private static final SubLSymbol $sym421$DUMP_CONSTANT_INDEX;
    private static final SubLString $str422$Dumping_constant_indices;
    private static final SubLString $str423$complex_constant_indices;
    private static final SubLString $str424$Cleaning_up_empty_complex_indexin;
    private static final SubLSymbol $sym425$SNAPSHOT_CONSTANT_INDICES_INTERNAL;
    private static final SubLList $list426;
    private static final SubLList $list427;
    private static final SubLString $str428$Copying_constant_indices_from_;
    private static final SubLList $list429;
    private static final SubLString $str430$Tombstoning_deleted_constant_indi;
    private static final SubLSymbol $sym431$FIND_CONSTANT_BY_SUID;
    private static final SubLSymbol $sym432$SNAPSHOT_CONSTANT_INDEX;
    private static final SubLString $str433$Updating_changed_constant_indices;
    private static final SubLSymbol $sym434$CONSTANT_SUID;
    private static final SubLString $str435$Appending_new_constant_indices;
    private static final SubLString $str436$__Constant_indexing_will_be_swapp;
    private static final SubLString $str437$__Constant_complex_indexing_will_;
    private static final SubLString $str438$___Constant_indices_use_wide_inde;
    private static final SubLString $str439$___Constant_complex_indices_use_w;
    private static final SubLString $str440$Loading_constant_indices;
    private static final SubLString $str441$Could_not_dump_the__A_index_for__;
    private static final SubLString $str442$Could_not_dump_the_constant_index;
    private static final SubLSymbol $sym443$LOAD_CONSTANT_INDEX_FROM_CACHE;
    private static final SubLString $str444$nat_indices;
    private static final SubLString $str445$nat_indices_index;
    private static final SubLString $str446$NART_indices;
    private static final SubLString $str447$nat_complex_indices;
    private static final SubLString $str448$nat_complex_indices_index;
    private static final SubLString $str449$complex_NART_indices;
    private static final SubLSymbol $sym450$DUMP_NART_INDEX;
    private static final SubLString $str451$Dumping_NART_indices;
    private static final SubLString $str452$nart_complex_indices_index;
    private static final SubLSymbol $sym453$SNAPSHOT_NART_INDICES_INTERNAL;
    private static final SubLString $str454$NAT;
    private static final SubLList $list455;
    private static final SubLList $list456;
    private static final SubLString $str457$Copying_NAT_indices_from_;
    private static final SubLString $str458$Tombstoning_deleted_NAT_indices;
    private static final SubLSymbol $sym459$FIND_NART_BY_ID;
    private static final SubLSymbol $sym460$SNAPSHOT_NART_INDEX;
    private static final SubLString $str461$Updating_changed_NAT_indices;
    private static final SubLSymbol $sym462$NART_ID;
    private static final SubLString $str463$Appending_new_NAT_indices;
    private static final SubLString $str464$NAT_indices;
    private static final SubLString $str465$complex_NAT_indices;
    private static final SubLString $str466$__NART_indexing_will_be_swapped_i;
    private static final SubLString $str467$__NART_complex_indexing_will_be_s;
    private static final SubLString $str468$___NART_indices_use_wide_index_en;
    private static final SubLString $str469$___NART_complex_indices_use_wide_;
    private static final SubLString $str470$Loading_NART_indices;
    private static final SubLString $str471$Could_not_dump_the_NART_index_for;
    private static final SubLSymbol $sym472$LOAD_NART_INDEX_FROM_CACHE;
    private static final SubLString $str473$unrepresented_term_indices;
    private static final SubLString $str474$unrepresented_term_indices_index;
    private static final SubLString $str475$unrepresented_term_indices;
    private static final SubLString $str476$unrepresented_term_complex_indice;
    private static final SubLString $str477$unrepresented_term_complex_indice;
    private static final SubLString $str478$complex_unrepresented_term_indice;
    private static final SubLSymbol $sym479$DUMP_UNREPRESENTED_TERM_INDEX;
    private static final SubLString $str480$Dumping_unrepresented_term_indice;
    private static final SubLSymbol $sym481$SNAPSHOT_UNREPRESENTED_TERM_INDICES_INTERNAL;
    private static final SubLString $str482$unrepresented_term;
    private static final SubLList $list483;
    private static final SubLList $list484;
    private static final SubLString $str485$Copying_unrepresented_term_indice;
    private static final SubLString $str486$Tombstoning_deleted_unrepresented;
    private static final SubLSymbol $sym487$SNAPSHOT_UNREPRESENTED_TERM_INDEX;
    private static final SubLString $str488$Updating_changed_unrepresented_te;
    private static final SubLSymbol $sym489$UNREPRESENTED_TERM_SUID;
    private static final SubLString $str490$Appending_new_unrepresented_term_;
    private static final SubLString $str491$__Unrepresented_term_indexing_wil;
    private static final SubLString $str492$__Unrepresented_complex_term_inde;
    private static final SubLString $str493$___Unrepresented_term_indices_use;
    private static final SubLString $str494$___Unrepresented_term_complex_ind;
    private static final SubLString $str495$Loading_unrepresented_term_indice;
    private static final SubLString $str496$Could_not_dump_the_unrepresented_;
    private static final SubLSymbol $sym497$LOAD_UNREPRESENTED_TERM_INDEX_FROM_CACHE;
    private static final SubLString $str498$assertion_indices;
    private static final SubLString $str499$Dumping_assertion_indices;
    private static final SubLString $str500$Loading_assertion_indices;
    private static final SubLString $str501$auxiliary_indices;
    private static final SubLString $str502$Dumping_auxiliary_indices____;
    private static final SubLString $str503$Loading_auxiliary_indices;
    private static final SubLString $str504$bookkeeping_indices;
    private static final SubLString $str505$Dumping_bookkeeping_indices;
    private static final SubLSymbol $sym506$LOAD_BOOKKEEPING_INDICES;
    private static final SubLString $str507$Loading_bookkeeping_indices____;
    private static final SubLString $str508$rule_set;
    private static final SubLString $str509$Dumping_rule_set____;
    private static final SubLSymbol $sym510$LOAD_RULE_SET_FROM_STREAM;
    private static final SubLString $str511$Loading_rule_set____;
    private static final SubLString $str512$non_true_assertion_tv_cache;
    private static final SubLString $str513$Dumping_non_true_assertion_tv_cac;
    private static final SubLSymbol $sym514$LOAD_NON_TRUE_ASSERTION_TV_CACHE_FROM_STREAM;
    private static final SubLString $str515$Loading_non_true_assertion_tv_cac;
    private static final SubLString $str516$nart_hl_formula_index;
    private static final SubLSymbol $sym517$_APPEND_STACK_TRACES_TO_ERROR_MESSAGES__;
    private static final SubLList $list518;
    private static final SubLString $str519$Dumping_NART_HL_formulas;
    private static final SubLString $str520$_A;
    private static final SubLString $str521$__NART_HL_formulas_will_be_swappe;
    private static final SubLString $str522$Loading_nart_hl_formula_definitio;
    private static final SubLString $str523$misc;
    private static final SubLString $str524$Dumping_miscellaneous_stuff____;
    private static final SubLString $str525$Loading_miscellaneous_stuff____;
    private static final SubLString $str526$sbhl_modules;
    private static final SubLString $str527$sbhl_module_graphs;
    private static final SubLString $str528$sbhl_module_graphs_index;
    private static final SubLString $str529$Dumping_SBHL_modules_and_graphs__;
    private static final SubLSymbol $kw530$SWAPPED_OUT;
    private static final SubLSymbol $kw531$COMPACT;
    private static final SubLSymbol $kw532$WARN_ONLY;
    private static final SubLString $str533$Loading_SBHL_graphs____;
    private static final SubLInteger $int534$30;
    private static final SubLSymbol $kw535$GRAPH;
    private static final SubLString $str536$Cannot_initialize_SBHL_Time_due_t;
    private static final SubLSymbol $sym537$RELEVANT_MT_IS_EVERYTHING;
    private static final SubLObject $const538$EverythingPSC;
    private static final SubLList $list539;
    private static final SubLSymbol $kw540$ISA_ARG2_NAUT_TABLE;
    private static final SubLSymbol $kw541$NON_FORT_ISA_TABLE;
    private static final SubLSymbol $kw542$NON_FORT_INSTANCE_TABLE;
    private static final SubLString $str543$Could_not_handle_SBHL_miscellany_;
    private static final SubLString $str544$sbhl_cache;
    private static final SubLString $str545$Dumping_SBHL_cache____;
    private static final SubLString $str546$Loading_SBHL_cache____;
    private static final SubLString $str547$cardinality_estimates;
    private static final SubLString $str548$Dumping_cardinality_estimates____;
    private static final SubLSymbol $sym549$LOAD_CARDINALITY_ESTIMATES_FROM_STREAM;
    private static final SubLString $str550$Loading_cardinality_estimates____;
    private static final SubLList $list551;
    private static final SubLString $str552$arg_type_cache;
    private static final SubLString $str553$Dumping_arg_type_cache____;
    private static final SubLString $str554$Loading_arg_type_cache____;
    private static final SubLString $str555$Rebuilding_arg_type_cache;
    private static final SubLSymbol $sym556$_CYC_ALEXANDRIA_DEFNS_DUMP_LOAD_SUPPORTED__;
    private static final SubLString $str557$defns_cache;
    private static final SubLString $str558$Dumping_defns_cache____;
    private static final SubLString $str559$Loading_defns_cache____;
    private static final SubLString $str560$rule_connectivity_graph;
    private static final SubLString $str561$Dumping_rule_connectivity_graph__;
    private static final SubLSymbol $sym562$LOAD_RULE_CONNECTIVITY_GRAPH_FROM_STREAM;
    private static final SubLString $str563$Loading_rule_connectivity_graph__;
    private static final SubLString $str564$tva_cache;
    private static final SubLString $str565$Dumping_TVA_cache____;
    private static final SubLSymbol $sym566$LOAD_TVA_CACHE_FROM_STREAM;
    private static final SubLString $str567$Loading_TVA_cache____;
    private static final SubLString $str568$reformulator_rules;
    private static final SubLString $str569$Dumping_reformulator_rules____;
    private static final SubLSymbol $sym570$LOAD_REFORMULATOR_RULES_FROM_STREAM;
    private static final SubLString $str571$Loading_reformulator_rules____;
    private static final SubLString $str572$Dumping_English_units_of_measure_;
    private static final SubLString $str573$english_units_of_measure;
    private static final SubLSymbol $sym574$LOAD_ENGLISH_UNITS_OF_MEASURE_FROM_STREAM;
    private static final SubLString $str575$Loading_English_units_of_measure_;
    private static final SubLString $str576$Dumping_CAE_query_search_tables__;
    private static final SubLString $str577$cae_query_search_tables;
    private static final SubLSymbol $sym578$LOAD_CAE_QUERY_SEARCH_TABLES_FROM_STREAM;
    private static final SubLString $str579$Loading_CAE_Query_Search_Tables__;
    private static final SubLString $str580$sbhl_time;
    private static final SubLString $str581$Dumping_sbhl_time_state____;
    private static final SubLString $str582$sbhl;
    private static final SubLString $str583$Loading_SBHL_time_state____;
    private static final SubLString $str584$_d_bytes_of_unread_sbhl_time_stat;
    private static final SubLString $str585$rtp_rules_cache;
    private static final SubLString $str586$Dumping_RTP_rules_cache____;
    private static final SubLString $str587$Loading_RTP_rules_cache____;
    private static final SubLString $str588$somewhere_cache;
    private static final SubLString $str589$Dumping_somewhere_rules_cache____;
    private static final SubLString $str590$Loading_somewhere_cache____;
    private static final SubLString $str591$arity_cache;
    private static final SubLString $str592$Dumping_arity_cache____;
    private static final SubLString $str593$Loading_arity_cache____;
    private static final SubLString $str594$pph_phrase_count;
    private static final SubLString $str595$pph_phrase_shell;
    private static final SubLString $str596$Dumping_pph_phrase_shells;
    private static final SubLString $str597$PPH_phrase__A_indexed_incorrectly;
    private static final SubLString $str598$Loading_pph_phrase_shells;
    private static final SubLString $str599$pph_phrase;
    private static final SubLString $str600$pph_phrase_index;
    private static final SubLString $str601$Dumping_pph_phrase_definitions;
    private static final SubLString $str602$Loading_pph_phrase_definitions;
    private static final SubLString $str603$pph_phrase_definitions_out_of_syn;
    private static final SubLString $str604$gen_template_store;
    private static final SubLString $str605$Dumping___genTemplate_store____;
    private static final SubLString $str606$Loading___genTemplate_store____;
    private static final SubLString $str607$pph_name_string_preds;
    private static final SubLSymbol $kw608$DUMPED;
    private static final SubLString $str609$pph_phrase_fns;
    private static final SubLSymbol $kw610$LOADED;
    private static final SubLString $str611$Initializing_minor_paraphrase_Cyc;
    private static final SubLString $str612$________Performing_other_KB_dump_;
    private static final SubLString $str613$________Performing_KB_initializat;
    private static final SubLString $str614$Reformulator___A__;
    private static final SubLString $str615$Paraphrase___A__;
    private static final SubLString $str616$Cyc_Task_Scheduler___A__;
    private static final SubLString $str617$SKSI___A__;
    private static final SubLString $str618$Quant___A__;
    private static final SubLString $str619$Date___A__;
    private static final SubLString $str620$Time___A__;
    private static final SubLString $str621$Lexicon___A__;
    private static final SubLString $str622$NL___A__;
    private static final SubLString $str623$RTP___A__;
    private static final SubLString $str624$RKF___A__;
    private static final SubLString $str625$Thesaurus___A__;
    private static final SubLString $str626$Wordnet___A__;
    private static final SubLString $str627$Planner___A__;
    private static final SubLString $str628$Secure___A__;
    private static final SubLString $str629$_scratch_;
    private static final SubLString $str630$load_all_constants_lisp;
    private static final SubLString $str631$load_all_narts_lisp;
    private static final SubLString $str632$load_all_assertions_lisp;
    private static final SubLString $str633$load_all_kb_hl_supports_lisp;
    private static final SubLString $str634$load_all_kb_hl_supports_just_lisp;
    private static final SubLString $str635$load_all_deductions_lisp;
    private static final SubLString $str636$load_all_bookkeeping_gafs_lisp;
    private static final SubLSymbol $sym637$ESSENTIAL_KB_EVALUATABLE_FILE_TYPE;
    private static final SubLList $list638;
    private static final SubLSymbol $kw639$ALL;
    private static final SubLInteger $int640$250;
    private static final SubLString $str641$________Loading_evaluatable_essen;
    private static final SubLString $str642$Loading_constants;
    private static final SubLString $str643$Loading_narts;
    private static final SubLString $str644$Loading_assertions;
    private static final SubLString $str645$Loading_definitions_for_KB_HL_sup;
    private static final SubLString $str646$Loading_justifications_for_KB_HL_;
    private static final SubLString $str647$Loading_deductions;
    private static final SubLString $str648$Loading_bookkeeping_data;
    private static final SubLSymbol $kw649$STRICT;
    private static final SubLSymbol $sym650$_EXIT;
    private static final SubLString $str651$________Rebuilding_Computable_KB_;
    private static final SubLSymbol $kw652$ASSERTIVE;
    private static final SubLString $str653$________Dumping_Computable_KB_at_;
    private static final SubLString $str654$Dumping_rule_utility_experience;
    private static final SubLString $str655$rule_utility_experience_cfasl;
    private static final SubLString $str656$Dumping_sbhl_caching_policies;
    private static final SubLString $str657$standard_kb_sbhl_caching_policies;
    private static final SubLInteger $int658$4000000;
    private static final SubLInteger $int659$15000000;
    private static final SubLInteger $int660$2000000000;
    private static final SubLInteger $int661$32000000;
    private static final SubLInteger $int662$20000;
    private static final SubLString $str663$__Error_with_operation___A___A__;
    private static final SubLString $str664$Processed___A__A_operations_from_;
    private static final SubLString $str665$Operation__S__;
    private static final SubLSymbol $sym666$QUOTIFY;
    private static final SubLSymbol $kw667$ACCESSOR;
    private static final SubLString $str668$Failed_operation___S__Got___S__;
    private static final SubLInteger $int669$8000000;
    private static final SubLSymbol $sym670$_DUMP_INVALID_CONSTANTS_;
    private static final SubLSymbol $sym671$_DUMP_INVALID_NARTS_;
    private static final SubLSymbol $sym672$_DUMP_INVALID_ASSERTIONS_;
    private static final SubLSymbol $sym673$_DUMP_INVALID_KB_HL_SUPPORTS_;
    private static final SubLSymbol $sym674$_DUMP_INVALID_DEDUCTIONS_;
    private static final SubLSymbol $sym675$_DUMP_INVALID_BOOKKEEPING_GAFS_;
    private static final SubLString $str676$Dumping_forms_to_create_all_const;
    private static final SubLString $str677$Found_unfindable_constant___A_wit;
    private static final SubLString $str678$_kb_create_constant__A__A___;
    private static final SubLInteger $int679$150000;
    private static final SubLString $str680$Dumping_forms_to_create_all_narts;
    private static final SubLString $str681$Found_unfindable_nart___A_with_id;
    private static final SubLString $str682$_kb_create_nart__A___;
    private static final SubLSymbol $sym683$EXPORTABLE_MT_;
    private static final SubLSymbol $sym684$_EXPORTABLE_MT__CACHING_STATE_;
    private static final SubLInteger $int685$16000;
    private static final SubLSymbol $sym686$EXPORTABLE_DEDUCTION_SUPPORT_;
    private static final SubLSymbol $sym687$_EXPORTABLE_DEDUCTION_SUPPORT__CACHING_STATE_;
    private static final SubLInteger $int688$300000;
    private static final SubLSymbol $sym689$EXPORTABLE_DEDUCTION_SUPPORTED_OBJECT_;
    private static final SubLSymbol $sym690$_EXPORTABLE_DEDUCTION_SUPPORTED_OBJECT__CACHING_STATE_;
    private static final SubLInteger $int691$350000;
    private static final SubLString $str692$Dumping_forms_to_create_all_asser;
    private static final SubLString $str693$Found_unfindable_assertion___A_wi;
    private static final SubLString $str694$_progn__;
    private static final SubLString $str695$_csetq__last_assertion___kb_creat;
    private static final SubLString $str696$_kb_timestamp_asserted_assertion_;
    private static final SubLString $str697$Found_unfindable_assertion2___A_w;
    private static final SubLString $str698$Dumping_forms_to_create_all_KB_HL;
    private static final SubLString $str699$Found_unfindable_kb_hl_support__A;
    private static final SubLString $str700$_create_kb_hl_support__A_NIL___;
    private static final SubLString $str701$_kb_hl_support_reset_justificatio;
    private static final SubLString $str702$_;
    private static final SubLString $str703$Dumping_forms_to_create_all_deduc;
    private static final SubLString $str704$Found_unfindable_deduction__A_wit;
    private static final SubLString $str705$_kb_create_deduction__A__A__A__A_;
    private static final SubLList $list706;
    private static final SubLString $str707$Got_bad_bookkeeping_gaf__S____S__;
    private static final SubLString $str708$_hl_assert_bookkeeping_binary_gaf;
    private static final SubLObject $const709$BookkeepingMt;
    private static final SubLSymbol $sym710$NART_P;
    private static final SubLString $str711$Testing_that_narts_are_findable__;
    private static final SubLString $str712$Unfindable_nart__S___S;
    private static final SubLString $str713$Testing_that_assertions_are_finda;
    private static final SubLString $str714$__S__Unfindable_assertion_id__S__;
    private static final SubLString $str715$Testing_that_deductions_are_finda;
    private static final SubLString $str716$__S__Unfindable_deduction_id__S__;
    private static final SubLObject $const717$CycAdministrator;
    private static final SubLSymbol $sym718$IGNORE_ERRORS;
    private static final SubLSymbol $sym719$POSSIBLE_NART;
    private static final SubLList $list720;
    private static final SubLSymbol $sym721$EVAL;
    private static final SubLSymbol $sym722$READ_FROM_STRING;
    private static final SubLList $list723;
    private static final SubLSymbol $sym724$POSSIBLE_ASSERTION;
    private static final SubLSymbol $sym725$CAND;
    private static final SubLList $list726;
    private static final SubLList $list727;
    private static final SubLList $list728;
    private static final SubLString $str729$Deleting_potentially_bad_assertio;
    private static final SubLString $str730$Recanonicalized__A___A;
    private static final SubLString $str731$Finding_assertions_____;
    private static final SubLString $str732$Expected_a_deduction_got___S__;
    private static final SubLString $str733$Finding_cnf_with_non_trivial_term;
    private static final SubLString $str734$Found_cnf__A;
    private static final SubLString $str735$Found_mt__A;
    private static final SubLString $str736$Found_id__A;

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 1701L)
    public static SubLObject force_monolithic_kb_assumptionP() {
        return dumper.$force_monolithic_kb_assumption$.getGlobalValue();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 1796L)
    public static SubLObject with_kb_dump_ids(final SubLObject macroform, final SubLObject environment) {
        final SubLObject datum = macroform.rest();
        final SubLObject body;
        final SubLObject current = body = datum;
        return (SubLObject)ConsesLow.list((SubLObject)dumper.$sym1$WITH_CONSTANT_DUMP_ID_TABLE, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym2$WITH_NART_DUMP_ID_TABLE, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym3$WITH_UNREPRESENTED_TERM_DUMP_ID_TABLE, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym4$WITH_ASSERTION_DUMP_ID_TABLE, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym5$WITH_DEDUCTION_DUMP_ID_TABLE, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym6$WITH_KB_HL_SUPPORT_DUMP_ID_TABLE, reader.bq_cons((SubLObject)dumper.$sym7$WITH_CLAUSE_STRUC_DUMP_ID_TABLE, ConsesLow.append(body, (SubLObject)dumper.NIL))))))));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 2155L)
    public static SubLObject with_kb_load_ids(final SubLObject macroform, final SubLObject environment) {
        final SubLObject datum = macroform.rest();
        final SubLObject body;
        final SubLObject current = body = datum;
        return (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym8$CLET, (SubLObject)dumper.$list9, ConsesLow.append(body, (SubLObject)dumper.NIL));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 2694L)
    public static SubLObject with_kb_load_area_allocation(final SubLObject macroform, final SubLObject environment) {
        final SubLObject datum = macroform.rest();
        final SubLObject body;
        final SubLObject current = body = datum;
        return (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym8$CLET, (SubLObject)dumper.$list10, ConsesLow.append(body, (SubLObject)dumper.NIL));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 3002L)
    public static SubLObject without_kb_load_area_allocation(final SubLObject macroform, final SubLObject environment) {
        final SubLObject datum = macroform.rest();
        final SubLObject body;
        final SubLObject current = body = datum;
        return (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym8$CLET, (SubLObject)dumper.$list11, ConsesLow.append(body, (SubLObject)dumper.NIL));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 3326L)
    public static SubLObject with_kb_dump_filename(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list12);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject filename_var = (SubLObject)dumper.NIL;
        SubLObject filename = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list12);
        filename_var = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list12);
        filename = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            return (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym8$CLET, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list(filename_var, filename)), ConsesLow.append(body, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)dumper.$sym13$DISCARD_DUMP_FILENAME, filename_var))));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list12);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 3517L)
    public static SubLObject with_kb_dump_binary_file(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list14);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject stream = (SubLObject)dumper.NIL;
        SubLObject filename = (SubLObject)dumper.NIL;
        SubLObject direction = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list14);
        stream = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list14);
        filename = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list14);
        direction = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            final SubLObject filename_var = (SubLObject)dumper.$sym15$FILENAME_VAR;
            return (SubLObject)ConsesLow.list((SubLObject)dumper.$sym16$WITH_KB_DUMP_FILENAME, (SubLObject)ConsesLow.list(filename_var, filename), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym17$WITH_PRIVATE_BINARY_FILE, (SubLObject)ConsesLow.list(stream, filename_var, direction), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym18$PWHEN, (SubLObject)ConsesLow.listS((SubLObject)dumper.EQ, direction, (SubLObject)dumper.$list19), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym20$CSETQ, stream, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym21$ENABLE_FILE_STREAM_MEMORY_MAPPING, stream))), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym22$CUNWIND_PROTECT, reader.bq_cons((SubLObject)dumper.$sym23$PROGN, ConsesLow.append(body, (SubLObject)dumper.NIL)), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym24$CLOSE, stream))));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list14);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 4034L)
    public static SubLObject with_kb_dump_text_file(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list14);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject stream = (SubLObject)dumper.NIL;
        SubLObject filename = (SubLObject)dumper.NIL;
        SubLObject direction = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list14);
        stream = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list14);
        filename = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list14);
        direction = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            final SubLObject filename_var = (SubLObject)dumper.$sym25$FILENAME_VAR;
            return (SubLObject)ConsesLow.list((SubLObject)dumper.$sym16$WITH_KB_DUMP_FILENAME, (SubLObject)ConsesLow.list(filename_var, filename), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym26$WITH_PRIVATE_TEXT_FILE, (SubLObject)ConsesLow.list(stream, filename_var, direction), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym18$PWHEN, (SubLObject)ConsesLow.listS((SubLObject)dumper.EQ, direction, (SubLObject)dumper.$list19), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym20$CSETQ, stream, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym21$ENABLE_FILE_STREAM_MEMORY_MAPPING, stream))), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym22$CUNWIND_PROTECT, reader.bq_cons((SubLObject)dumper.$sym23$PROGN, ConsesLow.append(body, (SubLObject)dumper.NIL)), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym24$CLOSE, stream))));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list14);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 4537L)
    public static SubLObject discard_dump_filename(final SubLObject filename) {
        assert dumper.NIL != Types.stringp(filename) : filename;
        return Sequences.fill(filename, (SubLObject)Characters.CHAR_space, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 4775L)
    public static SubLObject with_pergamom_style_units(final SubLObject macroform, final SubLObject environment) {
        final SubLObject datum = macroform.rest();
        final SubLObject body;
        final SubLObject current = body = datum;
        return (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym8$CLET, (SubLObject)dumper.$list28, ConsesLow.append(body, (SubLObject)dumper.NIL));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 4913L)
    public static SubLObject with_kelsos_style_units(final SubLObject macroform, final SubLObject environment) {
        final SubLObject datum = macroform.rest();
        final SubLObject body;
        final SubLObject current = body = datum;
        return (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym8$CLET, (SubLObject)dumper.$list29, ConsesLow.append(body, (SubLObject)dumper.NIL));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 5730L)
    public static SubLObject kb_dump_directory(SubLObject dump_name, SubLObject units_path) {
        if (dump_name == dumper.UNPROVIDED) {
            dump_name = control_vars.kb_loaded();
        }
        if (units_path == dumper.UNPROVIDED) {
            units_path = dumper.$default_dump_path$.getDynamicValue();
        }
        final SubLObject dump_directory_name = dump_name.isInteger() ? operation_communication.kb_number_string(dump_name) : Strings.string(dump_name);
        final SubLObject directory_path = ConsesLow.append(units_path, (SubLObject)ConsesLow.list(dump_directory_name));
        return file_utilities.cyc_home_filename(directory_path, (SubLObject)dumper.NIL, (SubLObject)dumper.NIL);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 6364L)
    public static SubLObject get_wide_mark_basename_from_index_basename(final SubLObject index_base_name) {
        return Sequences.cconcatenate(index_base_name, dumper.$kb_dump_fvector_wide_mark_tag$.getGlobalValue());
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 6638L)
    public static SubLObject kb_dump_file(final SubLObject name, final SubLObject directory_path, SubLObject extension) {
        if (extension == dumper.UNPROVIDED) {
            extension = dumper.$default_dump_extension$.getDynamicValue();
        }
        return file_utilities.relative_filename(directory_path, name, extension);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 6875L)
    public static SubLObject kb_dump_product_file(final SubLObject name, final SubLObject directory_path, SubLObject extension) {
        if (extension == dumper.UNPROVIDED) {
            extension = dumper.$default_dump_product_extension$.getDynamicValue();
        }
        return file_utilities.relative_filename(directory_path, name, extension);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 7602L)
    public static SubLObject dump_estimated_size(SubLObject assertion_count) {
        if (assertion_count == dumper.UNPROVIDED) {
            assertion_count = assertion_handles.assertion_count();
        }
        return Numbers.multiply(dumper.$dump_bytes_per_assertion$.getGlobalValue(), assertion_count);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 7952L)
    public static SubLObject verify_file_existence(final SubLObject filename, SubLObject warn_onlyP) {
        if (warn_onlyP == dumper.UNPROVIDED) {
            warn_onlyP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert dumper.NIL != Types.stringp(filename) : filename;
        if (dumper.NIL != dumper.$dump_verify$.getDynamicValue(thread) && dumper.NIL == Filesys.probe_file(filename)) {
            if (dumper.NIL != warn_onlyP) {
                Errors.warn((SubLObject)dumper.$str35$file__s_not_found, filename);
            }
            else {
                Errors.error((SubLObject)dumper.$str35$file__s_not_found, filename);
            }
            return (SubLObject)dumper.NIL;
        }
        return (SubLObject)dumper.T;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 8376L)
    public static SubLObject validate_dump_directory(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert dumper.NIL != Types.stringp(directory_path) : directory_path;
        if (dumper.NIL != dumper.$dump_verify$.getDynamicValue(thread)) {
            if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && dumper.NIL == Filesys.directory_p(directory_path)) {
                Errors.error((SubLObject)dumper.$str36$Directory__S_does_not_exist_, directory_path);
            }
            if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && directory_path.equalp(misc_utilities.hl_store_caches_directory())) {
                Errors.error((SubLObject)dumper.$str37$Directory__S_is_not_different_fro, directory_path);
            }
            if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && dumper.NIL == file_utilities.directory_writeable_p(directory_path, (SubLObject)dumper.UNPROVIDED)) {
                Errors.error((SubLObject)dumper.$str38$Directory__S_cannot_be_written_to, directory_path);
            }
            final SubLObject dump_estimated_size = dump_estimated_size((SubLObject)dumper.UNPROVIDED);
            if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && dumper.NIL == file_utilities.directory_writeable_p(directory_path, dump_estimated_size)) {
                Errors.error((SubLObject)dumper.$str39$Directory__S_does_not_have_enough, directory_path, dump_estimated_size);
            }
        }
        return (SubLObject)dumper.T;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 9412L)
    public static SubLObject kb_load_gc_checkpoint() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$kb_load_gc_checkpoints_enabledP$.getDynamicValue(thread)) {
            final SubLObject str = (SubLObject)dumper.$str40$KB_Load_GC_checkpoint_reached____;
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                Storage.gc_dynamic();
                Storage.room((SubLObject)dumper.UNPROVIDED);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 9651L)
    public static SubLObject preprocess_experience_and_dump_standard_kb(SubLObject directory_path, SubLObject old_experience_file, SubLObject new_experience_directory) {
        if (directory_path == dumper.UNPROVIDED) {
            directory_path = (SubLObject)dumper.NIL;
        }
        if (old_experience_file == dumper.UNPROVIDED) {
            old_experience_file = (SubLObject)dumper.NIL;
        }
        if (new_experience_directory == dumper.UNPROVIDED) {
            new_experience_directory = (SubLObject)dumper.NIL;
        }
        preprocess_experience(old_experience_file, new_experience_directory);
        return dump_standard_kb(directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 9957L)
    public static SubLObject dump_standard_kb(SubLObject directory_path) {
        if (directory_path == dumper.UNPROVIDED) {
            directory_path = (SubLObject)dumper.NIL;
        }
        perform_standard_pre_dump_kb_cleanups();
        return dump_kb(directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 10360L)
    public static SubLObject perform_standard_pre_dump_kb_cleanups() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return (dumper.NIL != dumper.$perform_standard_pre_dump_kb_cleanups_completeP$.getDynamicValue(thread)) ? perform_standard_pre_dump_kb_cleanups_complete() : perform_standard_pre_dump_kb_cleanups_partial();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 10592L)
    public static SubLObject perform_standard_pre_dump_kb_cleanups_complete() {
        perform_kb_cleanups();
        rebuild_computable_kb();
        rebuild_computable_remaining_hl((SubLObject)dumper.UNPROVIDED);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 10828L)
    public static SubLObject perform_standard_pre_dump_kb_cleanups_partial() {
        perform_kb_cleanups();
        assertions_low.rebuild_rule_set();
        assertions_low.rebuild_non_true_assertion_tv_cache();
        rebuild_kb_indexing();
        rebuild_sbhl_data();
        rebuild_sbhl_cache();
        cardinality_estimates.rebuild_cardinality_estimates();
        tva_cache.rebuild_tva_cache();
        reformulator_rule_unifier_datastructures.rebuild_reformulator_rules();
        lexicon_cache.initialize_lexicon_from_kb();
        rebuild_pph_phrases();
        skolems.reset_skolem_defn_table((SubLObject)dumper.T, (SubLObject)dumper.NIL);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 11586L)
    public static SubLObject perform_kb_cleanups() {
        assertions_high.remove_broken_assertions();
        kb_cleanup.reconsider_assertions_with_no_arguments((SubLObject)dumper.UNPROVIDED);
        kb_cleanup.forget_unneeded_knowledge((SubLObject)dumper.UNPROVIDED);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 11793L)
    public static SubLObject preprocess_experience(SubLObject old_experience_file, SubLObject new_experience_directory) {
        if (old_experience_file == dumper.UNPROVIDED) {
            old_experience_file = (SubLObject)dumper.NIL;
        }
        if (new_experience_directory == dumper.UNPROVIDED) {
            new_experience_directory = (SubLObject)dumper.NIL;
        }
        if (dumper.NIL == old_experience_file) {
            final SubLObject previous_dump_directory = kb_dump_directory(control_vars.build_kb_loaded(), (SubLObject)dumper.UNPROVIDED);
            old_experience_file = kb_dump_file((SubLObject)dumper.$str41$rule_utility_experience, previous_dump_directory, (SubLObject)dumper.UNPROVIDED);
        }
        if (dumper.NIL == new_experience_directory) {
            new_experience_directory = transcript_utilities.transcript_directory();
        }
        inference_analysis.replace_and_collate_experience(old_experience_file, new_experience_directory);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 12466L)
    public static SubLObject preprocess_experience_and_dump_non_computable_kb(SubLObject non_computable_directory_path, SubLObject old_experience_file, SubLObject new_experience_directory) {
        if (non_computable_directory_path == dumper.UNPROVIDED) {
            non_computable_directory_path = (SubLObject)dumper.NIL;
        }
        if (old_experience_file == dumper.UNPROVIDED) {
            old_experience_file = (SubLObject)dumper.NIL;
        }
        if (new_experience_directory == dumper.UNPROVIDED) {
            new_experience_directory = (SubLObject)dumper.NIL;
        }
        preprocess_experience(old_experience_file, new_experience_directory);
        dump_non_computable_kb(non_computable_directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 13762L)
    public static SubLObject dump_non_computable_kb(final SubLObject non_computable_directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            dump_special_objects(non_computable_directory_path);
            final SubLObject _prev_bind_0_$1 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
            try {
                cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
                cfasl.cfasl_set_common_symbols(kb_dump_common_symbols());
                final SubLObject _prev_bind_0_$2 = constants_high.$constant_dump_id_table$.currentBinding(thread);
                final SubLObject _prev_bind_1_$3 = api_control_vars.$cfasl_constant_handle_func$.currentBinding(thread);
                final SubLObject _prev_bind_3 = narts_high.$nart_dump_id_table$.currentBinding(thread);
                final SubLObject _prev_bind_4 = api_control_vars.$cfasl_nart_handle_func$.currentBinding(thread);
                final SubLObject _prev_bind_5 = unrepresented_terms.$unrepresented_term_dump_id_table$.currentBinding(thread);
                final SubLObject _prev_bind_6 = assertions_high.$assertion_dump_id_table$.currentBinding(thread);
                final SubLObject _prev_bind_7 = api_control_vars.$cfasl_assertion_handle_func$.currentBinding(thread);
                final SubLObject _prev_bind_8 = deductions_high.$deduction_dump_id_table$.currentBinding(thread);
                final SubLObject _prev_bind_9 = api_control_vars.$cfasl_deduction_handle_func$.currentBinding(thread);
                final SubLObject _prev_bind_10 = kb_hl_supports_high.$kb_hl_support_dump_id_table$.currentBinding(thread);
                final SubLObject _prev_bind_11 = api_control_vars.$cfasl_kb_hl_support_handle_func$.currentBinding(thread);
                final SubLObject _prev_bind_12 = clause_strucs.$clause_struc_dump_id_table$.currentBinding(thread);
                final SubLObject _prev_bind_13 = api_control_vars.$cfasl_clause_struc_handle_func$.currentBinding(thread);
                try {
                    constants_high.$constant_dump_id_table$.bind(constant_handles.create_constant_dump_id_table(), thread);
                    api_control_vars.$cfasl_constant_handle_func$.bind((SubLObject)dumper.$sym42$CONSTANT_DUMP_ID, thread);
                    narts_high.$nart_dump_id_table$.bind(nart_handles.create_nart_dump_id_table(), thread);
                    api_control_vars.$cfasl_nart_handle_func$.bind((SubLObject)dumper.$sym43$NART_DUMP_ID, thread);
                    unrepresented_terms.$unrepresented_term_dump_id_table$.bind(unrepresented_terms.create_unrepresented_term_dump_id_table(), thread);
                    assertions_high.$assertion_dump_id_table$.bind(assertion_handles.create_assertion_dump_id_table(), thread);
                    api_control_vars.$cfasl_assertion_handle_func$.bind((SubLObject)dumper.$sym44$ASSERTION_DUMP_ID, thread);
                    deductions_high.$deduction_dump_id_table$.bind(deduction_handles.create_deduction_dump_id_table(), thread);
                    api_control_vars.$cfasl_deduction_handle_func$.bind((SubLObject)dumper.$sym45$DEDUCTION_DUMP_ID, thread);
                    kb_hl_supports_high.$kb_hl_support_dump_id_table$.bind(kb_hl_support_handles.create_kb_hl_support_dump_id_table(), thread);
                    api_control_vars.$cfasl_kb_hl_support_handle_func$.bind((SubLObject)dumper.$sym46$KB_HL_SUPPORT_DUMP_ID, thread);
                    clause_strucs.$clause_struc_dump_id_table$.bind(clause_strucs.create_clause_struc_dump_id_table(), thread);
                    api_control_vars.$cfasl_clause_struc_handle_func$.bind((SubLObject)dumper.$sym47$CLAUSE_STRUC_DUMP_ID, thread);
                    dump_kb_ids(non_computable_directory_path);
                    dump_essential_kb(non_computable_directory_path);
                }
                finally {
                    api_control_vars.$cfasl_clause_struc_handle_func$.rebind(_prev_bind_13, thread);
                    clause_strucs.$clause_struc_dump_id_table$.rebind(_prev_bind_12, thread);
                    api_control_vars.$cfasl_kb_hl_support_handle_func$.rebind(_prev_bind_11, thread);
                    kb_hl_supports_high.$kb_hl_support_dump_id_table$.rebind(_prev_bind_10, thread);
                    api_control_vars.$cfasl_deduction_handle_func$.rebind(_prev_bind_9, thread);
                    deductions_high.$deduction_dump_id_table$.rebind(_prev_bind_8, thread);
                    api_control_vars.$cfasl_assertion_handle_func$.rebind(_prev_bind_7, thread);
                    assertions_high.$assertion_dump_id_table$.rebind(_prev_bind_6, thread);
                    unrepresented_terms.$unrepresented_term_dump_id_table$.rebind(_prev_bind_5, thread);
                    api_control_vars.$cfasl_nart_handle_func$.rebind(_prev_bind_4, thread);
                    narts_high.$nart_dump_id_table$.rebind(_prev_bind_3, thread);
                    api_control_vars.$cfasl_constant_handle_func$.rebind(_prev_bind_1_$3, thread);
                    constants_high.$constant_dump_id_table$.rebind(_prev_bind_0_$2, thread);
                }
            }
            finally {
                cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0_$1, thread);
            }
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 14163L)
    public static SubLObject load_non_computable_kb_and_rebuild_computable_kb_and_write_image(final SubLObject kb_loaded, final SubLObject non_computable_directory_path, final SubLObject pre_non_computable_dump_image_filename) {
        load_non_computable_kb_and_rebuild_computable_kb(kb_loaded, non_computable_directory_path);
        return Mapper.write_image(pre_non_computable_dump_image_filename, (SubLObject)dumper.UNPROVIDED);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 14490L)
    public static SubLObject load_non_computable_kb(final SubLObject non_computable_directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject common_symbols = load_special_objects(non_computable_directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue()) {
            misc_utilities.initialize_hl_store_cache_directory_and_shared_symbols(non_computable_directory_path, common_symbols);
        }
        final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols(common_symbols);
            final SubLObject _prev_bind_0_$4 = api_control_vars.$cfasl_constant_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_2 = api_control_vars.$cfasl_nart_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_3 = api_control_vars.$cfasl_assertion_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_4 = api_control_vars.$cfasl_deduction_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_5 = api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_6 = api_control_vars.$cfasl_clause_struc_handle_lookup_func$.currentBinding(thread);
            try {
                api_control_vars.$cfasl_constant_handle_lookup_func$.bind((SubLObject)dumper.$sym48$FIND_CONSTANT_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_nart_handle_lookup_func$.bind((SubLObject)dumper.$sym49$FIND_NART_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_assertion_handle_lookup_func$.bind((SubLObject)dumper.$sym50$FIND_ASSERTION_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_deduction_handle_lookup_func$.bind((SubLObject)dumper.$sym51$FIND_DEDUCTION_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.bind((SubLObject)dumper.$sym52$FIND_KB_HL_SUPPORT_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_clause_struc_handle_lookup_func$.bind((SubLObject)dumper.$sym53$FIND_CLAUSE_STRUC_BY_DUMP_ID, thread);
                load_essential_kb(non_computable_directory_path);
            }
            finally {
                api_control_vars.$cfasl_clause_struc_handle_lookup_func$.rebind(_prev_bind_6, thread);
                api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.rebind(_prev_bind_5, thread);
                api_control_vars.$cfasl_deduction_handle_lookup_func$.rebind(_prev_bind_4, thread);
                api_control_vars.$cfasl_assertion_handle_lookup_func$.rebind(_prev_bind_3, thread);
                api_control_vars.$cfasl_nart_handle_lookup_func$.rebind(_prev_bind_2, thread);
                api_control_vars.$cfasl_constant_handle_lookup_func$.rebind(_prev_bind_0_$4, thread);
            }
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 14943L)
    public static SubLObject load_non_computable_kb_and_rebuild_computable_kb(final SubLObject kb_loaded, final SubLObject non_computable_directory_path) {
        load_non_computable_kb(non_computable_directory_path);
        control_vars.set_kb_loaded(kb_loaded);
        rebuild_computable_content_dumpable((SubLObject)dumper.UNPROVIDED);
        return kb_loaded;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 15200L)
    public static SubLObject dump_computable_kb_and_content(final SubLObject non_computable_directory_path, final SubLObject computable_directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject common_symbols = load_special_objects(non_computable_directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols(common_symbols);
            final SubLObject _prev_bind_0_$5 = constants_high.$constant_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_2 = api_control_vars.$cfasl_constant_handle_func$.currentBinding(thread);
            final SubLObject _prev_bind_3 = narts_high.$nart_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_4 = api_control_vars.$cfasl_nart_handle_func$.currentBinding(thread);
            final SubLObject _prev_bind_5 = unrepresented_terms.$unrepresented_term_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_6 = assertions_high.$assertion_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_7 = api_control_vars.$cfasl_assertion_handle_func$.currentBinding(thread);
            final SubLObject _prev_bind_8 = deductions_high.$deduction_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_9 = api_control_vars.$cfasl_deduction_handle_func$.currentBinding(thread);
            final SubLObject _prev_bind_10 = kb_hl_supports_high.$kb_hl_support_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_11 = api_control_vars.$cfasl_kb_hl_support_handle_func$.currentBinding(thread);
            final SubLObject _prev_bind_12 = clause_strucs.$clause_struc_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_13 = api_control_vars.$cfasl_clause_struc_handle_func$.currentBinding(thread);
            try {
                constants_high.$constant_dump_id_table$.bind(constant_handles.create_constant_dump_id_table(), thread);
                api_control_vars.$cfasl_constant_handle_func$.bind((SubLObject)dumper.$sym42$CONSTANT_DUMP_ID, thread);
                narts_high.$nart_dump_id_table$.bind(nart_handles.create_nart_dump_id_table(), thread);
                api_control_vars.$cfasl_nart_handle_func$.bind((SubLObject)dumper.$sym43$NART_DUMP_ID, thread);
                unrepresented_terms.$unrepresented_term_dump_id_table$.bind(unrepresented_terms.create_unrepresented_term_dump_id_table(), thread);
                assertions_high.$assertion_dump_id_table$.bind(assertion_handles.create_assertion_dump_id_table(), thread);
                api_control_vars.$cfasl_assertion_handle_func$.bind((SubLObject)dumper.$sym44$ASSERTION_DUMP_ID, thread);
                deductions_high.$deduction_dump_id_table$.bind(deduction_handles.create_deduction_dump_id_table(), thread);
                api_control_vars.$cfasl_deduction_handle_func$.bind((SubLObject)dumper.$sym45$DEDUCTION_DUMP_ID, thread);
                kb_hl_supports_high.$kb_hl_support_dump_id_table$.bind(kb_hl_support_handles.create_kb_hl_support_dump_id_table(), thread);
                api_control_vars.$cfasl_kb_hl_support_handle_func$.bind((SubLObject)dumper.$sym46$KB_HL_SUPPORT_DUMP_ID, thread);
                clause_strucs.$clause_struc_dump_id_table$.bind(clause_strucs.create_clause_struc_dump_id_table(), thread);
                api_control_vars.$cfasl_clause_struc_handle_func$.bind((SubLObject)dumper.$sym47$CLAUSE_STRUC_DUMP_ID, thread);
                dump_computable_content(computable_directory_path);
            }
            finally {
                api_control_vars.$cfasl_clause_struc_handle_func$.rebind(_prev_bind_13, thread);
                clause_strucs.$clause_struc_dump_id_table$.rebind(_prev_bind_12, thread);
                api_control_vars.$cfasl_kb_hl_support_handle_func$.rebind(_prev_bind_11, thread);
                kb_hl_supports_high.$kb_hl_support_dump_id_table$.rebind(_prev_bind_10, thread);
                api_control_vars.$cfasl_deduction_handle_func$.rebind(_prev_bind_9, thread);
                deductions_high.$deduction_dump_id_table$.rebind(_prev_bind_8, thread);
                api_control_vars.$cfasl_assertion_handle_func$.rebind(_prev_bind_7, thread);
                assertions_high.$assertion_dump_id_table$.rebind(_prev_bind_6, thread);
                unrepresented_terms.$unrepresented_term_dump_id_table$.rebind(_prev_bind_5, thread);
                api_control_vars.$cfasl_nart_handle_func$.rebind(_prev_bind_4, thread);
                narts_high.$nart_dump_id_table$.rebind(_prev_bind_3, thread);
                api_control_vars.$cfasl_constant_handle_func$.rebind(_prev_bind_2, thread);
                constants_high.$constant_dump_id_table$.rebind(_prev_bind_0_$5, thread);
            }
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 15644L)
    public static SubLObject load_non_computable_kb_plus_rebuild_and_dump_computable_kb(final SubLObject kb_loaded, final SubLObject non_computable_directory_path, SubLObject computable_directory_path) {
        if (computable_directory_path == dumper.UNPROVIDED) {
            computable_directory_path = (SubLObject)dumper.NIL;
        }
        load_non_computable_kb_and_rebuild_computable_kb(kb_loaded, non_computable_directory_path);
        misc_utilities.system_code_initializations((SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == computable_directory_path) {
            computable_directory_path = non_computable_directory_path;
        }
        dump_computable_kb_and_content(non_computable_directory_path, computable_directory_path);
        return kb_loaded;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 17030L)
    public static SubLObject rebuild_and_reconnect_computable_kb(final SubLObject kb_loaded, final SubLObject non_computable_directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        load_non_computable_kb(non_computable_directory_path);
        control_vars.set_kb_loaded(kb_loaded);
        kb_utilities.resize_kb_object_manager_lru_caches_for_rebuild();
        final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols(misc_utilities.get_hl_store_caches_shared_symbols());
            rebuild_and_reconnect_kb_indexing();
            final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
            final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
                final SubLObject manager_$6 = deduction_manager.$deduction_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$7 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$6);
                final SubLObject memory_mappedP_$8 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$6);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$6);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$6);
                    final SubLObject manager_$7 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$8 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$7);
                    final SubLObject memory_mappedP_$9 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$7);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$7);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$7);
                        final SubLObject manager_$8 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$9 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$8);
                        final SubLObject memory_mappedP_$10 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$8);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$8);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$8);
                            final SubLObject manager_$9 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                            final SubLObject maintaining_countsP_$10 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$9);
                            final SubLObject memory_mappedP_$11 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$9);
                            try {
                                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$9);
                                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$9);
                                final SubLObject _prev_bind_0_$18 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                                try {
                                    control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                    rebuild_computable_remaining_hl((SubLObject)dumper.UNPROVIDED);
                                    dump_computable_remaining_hl(non_computable_directory_path, (SubLObject)dumper.UNPROVIDED);
                                }
                                finally {
                                    control_vars.$save_asked_queriesP$.rebind(_prev_bind_0_$18, thread);
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$19 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    if (dumper.NIL != maintaining_countsP_$10) {
                                        kb_object_manager.maintain_kb_object_usage_counts(manager_$9);
                                    }
                                    if (dumper.NIL == memory_mappedP_$11) {
                                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$9, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                    }
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$19, thread);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$20 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values2 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$9) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$8);
                                }
                                if (dumper.NIL == memory_mappedP_$10) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$8, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values2);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$20, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$21 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values3 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$8) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$7);
                            }
                            if (dumper.NIL == memory_mappedP_$9) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$7, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values3);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$21, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$22 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values4 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$7) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$6);
                        }
                        if (dumper.NIL == memory_mappedP_$8) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$6, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values4);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$22, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$23 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values5 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager);
                    }
                    if (dumper.NIL == memory_mappedP) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values5);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$23, thread);
                }
            }
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        return kb_loaded;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 17873L)
    public static SubLObject rebuild_and_reconnect_kb_indexing() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assertions_low.rebuild_rule_set();
        dump_rule_set(misc_utilities.generic_caches_directory());
        assertions_low.rebuild_non_true_assertion_tv_cache();
        dump_non_true_assertion_tv_cache(misc_utilities.generic_caches_directory());
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$24 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$25 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$24);
            final SubLObject memory_mappedP_$26 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$24);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$24);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$24);
                final SubLObject manager_$25 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$26 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$25);
                final SubLObject memory_mappedP_$27 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$25);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$25);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$25);
                    final SubLObject manager_$26 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$27 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$26);
                    final SubLObject memory_mappedP_$28 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$26);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$26);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$26);
                        final SubLObject manager_$27 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$28 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$27);
                        final SubLObject memory_mappedP_$29 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$27);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$27);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$27);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                rebuild_assertion_indexing_for_reconnect();
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$28) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$27);
                                }
                                if (dumper.NIL == memory_mappedP_$29) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$27, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$27) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$26);
                            }
                            if (dumper.NIL == memory_mappedP_$28) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$26, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$26) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$25);
                        }
                        if (dumper.NIL == memory_mappedP_$27) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$25, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$25) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$24);
                    }
                    if (dumper.NIL == memory_mappedP_$26) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$24, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        final SubLObject directory_path = misc_utilities.generic_caches_directory();
        unrepresented_terms.clear_unrepresented_term_table();
        load_kb_unrepresented_terms(directory_path);
        constant_index_manager.setup_constant_index_table(constant_handles.constant_count(), (SubLObject)dumper.NIL);
        nart_index_manager.setup_nart_index_table(nart_handles.nart_count(), (SubLObject)dumper.NIL);
        unrepresented_term_index_manager.setup_unrepresented_term_index_table(unrepresented_terms.kb_unrepresented_term_count(), (SubLObject)dumper.NIL);
        kb_utilities.resize_kb_object_manager_lru_caches_for_rebuild();
        load_kb_assertion_indexing(directory_path);
        SubLObject manager2 = assertion_manager.$assertion_content_manager$.getGlobalValue();
        SubLObject maintaining_countsP2 = kb_object_manager.kb_object_usage_counts_enabledP(manager2);
        SubLObject memory_mappedP2 = kb_object_manager.kb_object_manager_memory_mappedP(manager2);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager2);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager2);
            final SubLObject manager_$28 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$29 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$28);
            final SubLObject memory_mappedP_$30 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$28);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$28);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$28);
                final SubLObject manager_$29 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$30 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$29);
                final SubLObject memory_mappedP_$31 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$29);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$29);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$29);
                    final SubLObject manager_$30 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$31 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$30);
                    final SubLObject memory_mappedP_$32 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$30);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$30);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$30);
                        final SubLObject manager_$31 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$32 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$31);
                        final SubLObject memory_mappedP_$33 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$31);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$31);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$31);
                            final SubLObject _prev_bind_7 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                bookkeeping_store.reindex_all_bookkeeping_assertions();
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_7, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values6 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$32) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$31);
                                }
                                if (dumper.NIL == memory_mappedP_$33) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$31, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values6);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values7 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$31) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$30);
                            }
                            if (dumper.NIL == memory_mappedP_$32) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$30, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values7);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values8 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$30) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$29);
                        }
                        if (dumper.NIL == memory_mappedP_$31) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$29, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values8);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values9 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$29) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$28);
                    }
                    if (dumper.NIL == memory_mappedP_$30) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$28, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values9);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_12 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values10 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP2) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager2);
                }
                if (dumper.NIL == memory_mappedP2) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager2, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values10);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_12, thread);
            }
        }
        dump_bookkeeping_indices_file(directory_path);
        manager2 = assertion_manager.$assertion_content_manager$.getGlobalValue();
        maintaining_countsP2 = kb_object_manager.kb_object_usage_counts_enabledP(manager2);
        memory_mappedP2 = kb_object_manager.kb_object_manager_memory_mappedP(manager2);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager2);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager2);
            final SubLObject manager_$32 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$33 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$32);
            final SubLObject memory_mappedP_$34 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$32);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$32);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$32);
                final SubLObject manager_$33 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$34 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$33);
                final SubLObject memory_mappedP_$35 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$33);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$33);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$33);
                    final SubLObject manager_$34 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$35 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$34);
                    final SubLObject memory_mappedP_$36 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$34);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$34);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$34);
                        final SubLObject manager_$35 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$36 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$35);
                        final SubLObject memory_mappedP_$37 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$35);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$35);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$35);
                            final SubLObject _prev_bind_7 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                kb_hl_supports_low.reindex_all_kb_hl_supports();
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_7, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_13 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values11 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$36) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$35);
                                }
                                if (dumper.NIL == memory_mappedP_$37) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$35, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values11);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_13, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_14 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values12 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$35) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$34);
                            }
                            if (dumper.NIL == memory_mappedP_$36) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$34, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values12);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_14, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_15 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values13 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$34) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$33);
                        }
                        if (dumper.NIL == memory_mappedP_$35) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$33, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values13);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_15, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_16 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values14 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$33) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$32);
                    }
                    if (dumper.NIL == memory_mappedP_$34) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$32, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values14);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_16, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_17 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values15 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP2) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager2);
                }
                if (dumper.NIL == memory_mappedP2) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager2, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values15);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_17, thread);
            }
        }
        dump_kb_hl_support_indexing(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 19676L)
    public static SubLObject rebuild_assertion_indexing_for_reconnect() {
        kb_indexing.clear_all_existing_indexing();
        final SubLObject part_dirs = rebuild_and_dump_assertion_indexing();
        merge_and_redump_assertion_indexing(part_dirs);
        cleanup_rebuild_part_dirs(part_dirs);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 19937L)
    public static SubLObject rebuild_and_dump_assertion_indexing() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject max_tile_size = dumper.$assertion_tile_size$.getGlobalValue();
        final SubLObject num_of_tiles = Numbers.ceiling(assertion_handles.assertion_count(), max_tile_size);
        final SubLObject tile_size = Numbers.ceiling(assertion_handles.assertion_count(), num_of_tiles);
        final SubLObject outer_message = Sequences.cconcatenate((SubLObject)dumper.$str60$Re_Indexing_KB_in_, new SubLObject[] { format_nil.format_nil_a_no_copy(num_of_tiles), dumper.$str61$_parts__of_, format_nil.format_nil_a_no_copy(tile_size), dumper.$str62$_assertions_ });
        final SubLObject part_dirs = compute_rebuild_part_dirs(num_of_tiles);
        SubLObject ass_id = (SubLObject)dumper.ZERO_INTEGER;
        SubLObject known_top_n_indices = (SubLObject)dumper.NIL;
        final SubLObject list_var = part_dirs;
        final SubLObject _prev_bind_0 = utilities_macros.$progress_note$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
        try {
            utilities_macros.$progress_note$.bind((SubLObject)((dumper.NIL != outer_message) ? outer_message : dumper.$str63$cdolist), thread);
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
            utilities_macros.$progress_sofar$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
            try {
                utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                SubLObject csome_list_var = list_var;
                SubLObject part_dir = (SubLObject)dumper.NIL;
                part_dir = csome_list_var.first();
                while (dumper.NIL != csome_list_var) {
                    kb_indexing.clear_large_existing_indexing();
                    if (dumper.NIL != known_top_n_indices) {
                        final SubLObject list_var_$60 = known_top_n_indices;
                        final SubLObject _prev_bind_0_$61 = utilities_macros.$progress_note$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$62 = utilities_macros.$progress_start_time$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$63 = utilities_macros.$progress_total$.currentBinding(thread);
                        final SubLObject _prev_bind_3_$64 = utilities_macros.$progress_sofar$.currentBinding(thread);
                        final SubLObject _prev_bind_4_$65 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                        final SubLObject _prev_bind_5_$66 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                        final SubLObject _prev_bind_6_$67 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                        final SubLObject _prev_bind_7_$68 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                        try {
                            utilities_macros.$progress_note$.bind((SubLObject)dumper.$str64$Reserving_known_TOP_N_indices, thread);
                            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                            utilities_macros.$progress_total$.bind(Sequences.length(list_var_$60), thread);
                            utilities_macros.$progress_sofar$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                            try {
                                utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                SubLObject csome_list_var_$69 = list_var_$60;
                                SubLObject top_n_index = (SubLObject)dumper.NIL;
                                top_n_index = csome_list_var_$69.first();
                                while (dumper.NIL != csome_list_var_$69) {
                                    SubLObject current;
                                    final SubLObject datum = current = top_n_index;
                                    SubLObject v_term = (SubLObject)dumper.NIL;
                                    cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list65);
                                    v_term = current.first();
                                    final SubLObject keys;
                                    current = (keys = current.rest());
                                    if (dumper.NIL == kb_indexing_datastructures.term_index(v_term)) {
                                        kb_indexing_datastructures.initialize_term_complex_index(v_term);
                                    }
                                    final SubLObject _prev_bind_0_$62 = kb_indexing_datastructures.$with_final_topn_index_tracking$.currentBinding(thread);
                                    try {
                                        kb_indexing_datastructures.$with_final_topn_index_tracking$.bind((SubLObject)dumper.NIL, thread);
                                        kb_indexing_datastructures.reserve_final_topn_index_for_term(v_term, keys);
                                    }
                                    finally {
                                        kb_indexing_datastructures.$with_final_topn_index_tracking$.rebind(_prev_bind_0_$62, thread);
                                    }
                                    utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)dumper.ONE_INTEGER), thread);
                                    utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                    csome_list_var_$69 = csome_list_var_$69.rest();
                                    top_n_index = csome_list_var_$69.first();
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$63 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    utilities_macros.noting_percent_progress_postamble();
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$63, thread);
                                }
                            }
                        }
                        finally {
                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_7_$68, thread);
                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_6_$67, thread);
                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_5_$66, thread);
                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_4_$65, thread);
                            utilities_macros.$progress_sofar$.rebind(_prev_bind_3_$64, thread);
                            utilities_macros.$progress_total$.rebind(_prev_bind_2_$63, thread);
                            utilities_macros.$progress_start_time$.rebind(_prev_bind_1_$62, thread);
                            utilities_macros.$progress_note$.rebind(_prev_bind_0_$61, thread);
                        }
                    }
                    final SubLObject last_id = Numbers.min(Numbers.add(ass_id, tile_size), assertion_handles.assertion_count());
                    final SubLObject msg = Sequences.cconcatenate((SubLObject)dumper.$str66$Indexing_assertion_range__, new SubLObject[] { format_nil.format_nil_a_no_copy(ass_id), dumper.$str67$_, format_nil.format_nil_a_no_copy(last_id), dumper.$str68$_ });
                    SubLObject new_top_n_indices = (SubLObject)dumper.NIL;
                    final SubLObject _prev_bind_0_$64 = kb_indexing_datastructures.$recent_final_topn_indices$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$63 = kb_indexing_datastructures.$with_final_topn_index_tracking$.currentBinding(thread);
                    try {
                        kb_indexing_datastructures.$recent_final_topn_indices$.bind((SubLObject)dumper.NIL, thread);
                        kb_indexing_datastructures.$with_final_topn_index_tracking$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _prev_bind_0_$65 = utilities_macros.$progress_note$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$64 = utilities_macros.$progress_start_time$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$64 = utilities_macros.$progress_total$.currentBinding(thread);
                        final SubLObject _prev_bind_3_$65 = utilities_macros.$progress_sofar$.currentBinding(thread);
                        final SubLObject _prev_bind_4_$66 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                        final SubLObject _prev_bind_5_$67 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                        final SubLObject _prev_bind_6_$68 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                        final SubLObject _prev_bind_7_$69 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                        try {
                            utilities_macros.$progress_note$.bind(msg, thread);
                            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                            utilities_macros.$progress_total$.bind(tile_size, thread);
                            utilities_macros.$progress_sofar$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                            try {
                                utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                SubLObject i;
                                SubLObject as;
                                SubLObject _prev_bind_0_$66;
                                for (i = (SubLObject)dumper.NIL, i = (SubLObject)dumper.ZERO_INTEGER; i.numL(utilities_macros.$progress_total$.getDynamicValue(thread)); i = Numbers.add(i, (SubLObject)dumper.ONE_INTEGER)) {
                                    as = assertion_handles.find_assertion_by_id(ass_id);
                                    if (dumper.NIL != as) {
                                        _prev_bind_0_$66 = Errors.$continue_cerrorP$.currentBinding(thread);
                                        try {
                                            Errors.$continue_cerrorP$.bind((SubLObject)dumper.T, thread);
                                            kb_indexing.reindex_one_of_all_assertions(as);
                                        }
                                        finally {
                                            Errors.$continue_cerrorP$.rebind(_prev_bind_0_$66, thread);
                                        }
                                    }
                                    ass_id = Numbers.add(ass_id, (SubLObject)dumper.ONE_INTEGER);
                                    utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)dumper.ONE_INTEGER), thread);
                                    utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$67 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values2 = Values.getValuesAsVector();
                                    utilities_macros.noting_percent_progress_postamble();
                                    Values.restoreValuesFromVector(_values2);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$67, thread);
                                }
                            }
                        }
                        finally {
                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_7_$69, thread);
                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_6_$68, thread);
                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_5_$67, thread);
                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_4_$66, thread);
                            utilities_macros.$progress_sofar$.rebind(_prev_bind_3_$65, thread);
                            utilities_macros.$progress_total$.rebind(_prev_bind_2_$64, thread);
                            utilities_macros.$progress_start_time$.rebind(_prev_bind_1_$64, thread);
                            utilities_macros.$progress_note$.rebind(_prev_bind_0_$65, thread);
                        }
                        new_top_n_indices = conses_high.copy_tree(kb_indexing_datastructures.$recent_final_topn_indices$.getDynamicValue(thread));
                    }
                    finally {
                        kb_indexing_datastructures.$with_final_topn_index_tracking$.rebind(_prev_bind_1_$63, thread);
                        kb_indexing_datastructures.$recent_final_topn_indices$.rebind(_prev_bind_0_$64, thread);
                    }
                    known_top_n_indices = ConsesLow.append(known_top_n_indices, new_top_n_indices);
                    final SubLObject str;
                    final SubLObject msg2 = str = Sequences.cconcatenate((SubLObject)dumper.$str69$Dumping_partial_index_to_, format_nil.format_nil_a_no_copy(part_dir));
                    final SubLObject _prev_bind_0_$68 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$65 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_2_$65 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_3_$66 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_4_$67 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_5_$68 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6_$69 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_7_$70 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        final SubLObject _prev_bind_0_$69 = dumper.$separate_file_for_complex_indexingP$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$66 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
                        final SubLObject _prev_bind_2_$66 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
                        final SubLObject _prev_bind_3_$67 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
                        try {
                            dumper.$separate_file_for_complex_indexingP$.bind((SubLObject)dumper.NIL, thread);
                            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
                            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
                            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
                            cfasl.cfasl_set_common_symbols(misc_utilities.get_hl_store_caches_shared_symbols());
                            dump_kb_indexing(part_dir);
                        }
                        finally {
                            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_3_$67, thread);
                            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2_$66, thread);
                            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_1_$66, thread);
                            dumper.$separate_file_for_complex_indexingP$.rebind(_prev_bind_0_$69, thread);
                        }
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_7_$70, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_6_$69, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_5_$68, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_4_$67, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_3_$66, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_2_$65, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$65, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$68, thread);
                    }
                    utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)dumper.ONE_INTEGER), thread);
                    utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                    csome_list_var = csome_list_var.rest();
                    part_dir = csome_list_var.first();
                }
            }
            finally {
                final SubLObject _prev_bind_0_$70 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    utilities_macros.noting_percent_progress_postamble();
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$70, thread);
                }
            }
        }
        finally {
            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_note$.rebind(_prev_bind_0, thread);
        }
        return part_dirs;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 22061L)
    public static SubLObject merge_and_redump_assertion_indexing(final SubLObject part_dirs) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        dump_kb_unrepresented_terms(misc_utilities.generic_caches_directory());
        final SubLObject _prev_bind_0 = dumper.$separate_file_for_complex_indexingP$.currentBinding(thread);
        try {
            dumper.$separate_file_for_complex_indexingP$.bind((SubLObject)dumper.T, thread);
            merge_and_redump_constant_assertion_indexing(part_dirs);
            merge_and_redump_nart_assertion_indexing(part_dirs);
            merge_and_redump_unrepresented_term_assertion_indexing(part_dirs);
        }
        finally {
            dumper.$separate_file_for_complex_indexingP$.rebind(_prev_bind_0, thread);
        }
        final SubLObject final_dir = conses_high.last(part_dirs, (SubLObject)dumper.UNPROVIDED).first();
        replicate_meta_assertion_indexing(final_dir);
        replicate_auxiliary_assertion_indexing(final_dir);
        return part_dirs;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 22576L)
    public static SubLObject merge_and_redump_constant_assertion_indexing(final SubLObject part_dirs) {
        final SubLObject iterators = Mapping.mapcar((SubLObject)dumper.$sym70$NEW_NINIVEH_CONSTANT_INDICES_ITERATOR, part_dirs);
        final SubLObject index_writer = new_constant_indices_writer(misc_utilities.generic_caches_directory());
        try {
            merge_index_from_partial_results((SubLObject)dumper.$sym48$FIND_CONSTANT_BY_DUMP_ID, constant_handles.constant_count(), iterators, index_writer, (SubLObject)dumper.$kw71$EQUAL_SIZED, (SubLObject)dumper.$str72$Building_constant_indices_from_pa);
        }
        finally {
            final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)dumper.T);
                final SubLObject _values = Values.getValuesAsVector();
                close_index_writer(index_writer);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return part_dirs;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 23087L)
    public static SubLObject merge_and_redump_nart_assertion_indexing(final SubLObject part_dirs) {
        final SubLObject iterators = Mapping.mapcar((SubLObject)dumper.$sym73$NEW_NINIVEH_NART_INDICES_ITERATOR, part_dirs);
        final SubLObject index_writer = new_nart_indices_writer(misc_utilities.generic_caches_directory());
        try {
            merge_index_from_partial_results((SubLObject)dumper.$sym49$FIND_NART_BY_DUMP_ID, nart_handles.nart_count(), iterators, index_writer, (SubLObject)dumper.$kw71$EQUAL_SIZED, (SubLObject)dumper.$str74$Building_NART_indices_from_partia);
        }
        finally {
            final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)dumper.T);
                final SubLObject _values = Values.getValuesAsVector();
                close_index_writer(index_writer);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return part_dirs;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 23570L)
    public static SubLObject merge_and_redump_unrepresented_term_assertion_indexing(final SubLObject part_dirs) {
        final SubLObject iterators = Mapping.mapcar((SubLObject)dumper.$sym75$NEW_NINIVEH_UNREPRESENTED_TERM_INDICES_ITERATOR, part_dirs);
        final SubLObject index_writer = new_unrepresented_term_indices_writer(misc_utilities.generic_caches_directory());
        final SubLObject different_sizes = (SubLObject)dumper.NIL;
        try {
            merge_index_from_partial_results((SubLObject)dumper.$sym76$FIND_UNREPRESENTED_TERM_BY_SUID, unrepresented_terms.kb_unrepresented_term_count(), iterators, index_writer, different_sizes, (SubLObject)dumper.$str77$Building_unrepresented_term_indic);
        }
        finally {
            final SubLObject _prev_bind_0 = Dynamic.currentBinding(Threads.$is_thread_performing_cleanupP$);
            try {
                Dynamic.bind(Threads.$is_thread_performing_cleanupP$, (SubLObject)dumper.T);
                final SubLObject _values = Values.getValuesAsVector();
                close_index_writer(index_writer);
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Dynamic.rebind(Threads.$is_thread_performing_cleanupP$, _prev_bind_0);
            }
        }
        return part_dirs;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 24303L)
    public static SubLObject merge_index_from_partial_results(final SubLObject lookup_fn, final SubLObject count, final SubLObject iterators, final SubLObject index_writer, final SubLObject equal_sizedP, SubLObject msg) {
        if (msg == dumper.UNPROVIDED) {
            msg = (SubLObject)dumper.$str78$Building_index_from_partial_resul;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        try {
            final SubLObject partial_indices = (SubLObject)ConsesLow.make_list(Sequences.length(iterators), (SubLObject)dumper.UNPROVIDED);
            final SubLObject cleanup_defs = kb_indexing.get_indexing_pre_dump_cleanup_defs();
            final SubLObject default_value = (SubLObject)((dumper.NIL != equal_sizedP) ? dumper.$kw79$ERROR : ConsesLow.cons((SubLObject)dumper.$kw80$TERM_ID, kb_indexing_datastructures.new_simple_index()));
            final SubLObject _prev_bind_0 = utilities_macros.$progress_note$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
            try {
                utilities_macros.$progress_note$.bind(msg, thread);
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_total$.bind(count, thread);
                utilities_macros.$progress_sofar$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                try {
                    utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                    SubLObject i;
                    SubLObject list_var;
                    SubLObject iterator;
                    SubLObject n;
                    SubLObject item;
                    SubLObject current;
                    SubLObject datum;
                    SubLObject term_id;
                    SubLObject index;
                    SubLObject v_term;
                    SubLObject cdolist_list_var;
                    SubLObject cleanup_def;
                    SubLObject current2;
                    SubLObject datum2;
                    SubLObject members;
                    SubLObject cleanup_fn;
                    for (i = (SubLObject)dumper.NIL, i = (SubLObject)dumper.ZERO_INTEGER; i.numL(utilities_macros.$progress_total$.getDynamicValue(thread)); i = Numbers.add(i, (SubLObject)dumper.ONE_INTEGER)) {
                        list_var = (SubLObject)dumper.NIL;
                        iterator = (SubLObject)dumper.NIL;
                        n = (SubLObject)dumper.NIL;
                        list_var = iterators;
                        iterator = list_var.first();
                        for (n = (SubLObject)dumper.ZERO_INTEGER; dumper.NIL != list_var; list_var = list_var.rest(), iterator = list_var.first(), n = Numbers.add((SubLObject)dumper.ONE_INTEGER, n)) {
                            if (dumper.NIL == equal_sizedP) {
                                ConsesLow.set_nth((SubLObject)dumper.ZERO_INTEGER, default_value, i);
                            }
                            item = iteration.iteration_next_without_values(iterator, default_value);
                            if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && dumper.$kw79$ERROR == item) {
                                Errors.error((SubLObject)dumper.$str81$Iterator__A_was_done_at_ID__A_of_, iterator, i, count);
                            }
                            datum = (current = item);
                            term_id = (SubLObject)dumper.NIL;
                            index = (SubLObject)dumper.NIL;
                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list82);
                            term_id = current.first();
                            current = (index = current.rest());
                            if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !i.numE(term_id)) {
                                Errors.error((SubLObject)dumper.$str83$Expected_index_for__A__got__A_ins, i, term_id, iterator);
                            }
                            ConsesLow.set_nth(n, partial_indices, index);
                        }
                        v_term = Functions.funcall(lookup_fn, i);
                        kb_indexing.merge_term_indices(v_term, partial_indices);
                        cdolist_list_var = cleanup_defs;
                        cleanup_def = (SubLObject)dumper.NIL;
                        cleanup_def = cdolist_list_var.first();
                        while (dumper.NIL != cdolist_list_var) {
                            datum2 = (current2 = cleanup_def);
                            members = (SubLObject)dumper.NIL;
                            cleanup_fn = (SubLObject)dumper.NIL;
                            cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)dumper.$list84);
                            members = current2.first();
                            current2 = current2.rest();
                            cdestructuring_bind.destructuring_bind_must_consp(current2, datum2, (SubLObject)dumper.$list84);
                            cleanup_fn = current2.first();
                            current2 = current2.rest();
                            if (dumper.NIL == current2) {
                                if (dumper.NIL != set.set_memberP(v_term, members)) {
                                    Functions.funcall(cleanup_fn, v_term);
                                }
                            }
                            else {
                                cdestructuring_bind.cdestructuring_bind_error(datum2, (SubLObject)dumper.$list84);
                            }
                            cdolist_list_var = cdolist_list_var.rest();
                            cleanup_def = cdolist_list_var.first();
                        }
                        index_writer_put_index_entry(index_writer, v_term);
                        kb_indexing_datastructures.clear_term_index(v_term);
                        utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)dumper.ONE_INTEGER), thread);
                        utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$97 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        utilities_macros.noting_percent_progress_postamble();
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$97, thread);
                    }
                }
            }
            finally {
                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_note$.rebind(_prev_bind_0, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                Mapping.mapcar((SubLObject)dumper.$sym85$ITERATION_FINALIZE, iterators);
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
            }
        }
        return lookup_fn;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 26355L)
    public static SubLObject compute_rebuild_part_dirs(final SubLObject dirs) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject units_dir = misc_utilities.generic_caches_directory();
        SubLObject parts = (SubLObject)dumper.NIL;
        SubLObject i;
        SubLObject subdir;
        for (i = (SubLObject)dumper.NIL, i = (SubLObject)dumper.ZERO_INTEGER; i.numL(dirs); i = Numbers.add(i, (SubLObject)dumper.ONE_INTEGER)) {
            subdir = Filesys.make_directory(Sequences.cconcatenate(format_nil.format_nil_a_no_copy(units_dir), new SubLObject[] { dumper.$str86$_part, format_nil.format_nil_a_no_copy(i), dumper.$str87$_ }), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
            if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && (!subdir.isString() || dumper.NIL == Filesys.directory_p(subdir))) {
                Errors.error((SubLObject)dumper.$str88$Cannot_create_part_directory__A__, subdir);
            }
            parts = (SubLObject)ConsesLow.cons(subdir, parts);
        }
        return Sequences.nreverse(parts);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 26830L)
    public static SubLObject cleanup_rebuild_part_dirs(final SubLObject dirs) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject cdolist_list_var = dirs;
        SubLObject dir = (SubLObject)dumper.NIL;
        dir = cdolist_list_var.first();
        while (dumper.NIL != cdolist_list_var) {
            final SubLObject str = Sequences.cconcatenate((SubLObject)dumper.$str89$Cleaning_up_, format_nil.format_nil_a_no_copy(dir));
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                file_utilities.recursive_delete_directory(dir);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
            cdolist_list_var = cdolist_list_var.rest();
            dir = cdolist_list_var.first();
        }
        return (SubLObject)dumper.$kw90$CLEAN;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 27051L)
    public static SubLObject cyc_dump_kb(final SubLObject directory_path, final SubLObject dump_type, SubLObject options_plist) {
        if (options_plist == dumper.UNPROVIDED) {
            options_plist = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject agenda_timeout = conses_high.getf(options_plist, (SubLObject)dumper.$kw92$AGENDA_TIMEOUT, (SubLObject)dumper.UNPROVIDED);
        SubLObject result = (SubLObject)dumper.NIL;
        if (dumper.NIL == operation_queues.local_queue_empty()) {
            while (dumper.NIL == operation_queues.local_queue_empty()) {
                operation_queues.run_one_local_op();
            }
        }
        operation_communication.save_transcript_ops();
        inference_analysis.save_recent_experience();
        inference_analysis.save_recent_asked_queries();
        hl_transcript_tracing.flush_hl_transcript_trace();
        final SubLObject agenda_runningP = agenda.agenda_running();
        final SubLObject saved_local_transcript = transcript_utilities.$local_transcript$.getGlobalValue();
        final SubLObject saved_read_transcript = transcript_utilities.$read_transcript$.getGlobalValue();
        final SubLObject saved_communication_mode = control_vars.$communication_mode$.getGlobalValue();
        final SubLObject saved_remote_queue = queues.queue_copy(operation_queues.$remote_queue$.getGlobalValue());
        final SubLObject saved_local_queue = queues.queue_copy(operation_queues.local_queue());
        final SubLObject saved_auxiliary_queue = queues.queue_copy(operation_queues.$auxiliary_queue$.getGlobalValue());
        final SubLObject saved_transcript_queue = queues.queue_copy(operation_queues.$transcript_queue$.getGlobalValue());
        SubLObject disabled_servers = (SubLObject)dumper.NIL;
        try {
            final SubLObject str = (SubLObject)dumper.$str93$Setting_up_safe_KB_dump_environme;
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                Storage.room((SubLObject)dumper.UNPROVIDED);
                disabled_servers = tcp_server_utilities.disable_some_tcp_servers((SubLObject)dumper.UNPROVIDED);
                if (dumper.NIL != agenda_runningP) {
                    operation_communication.ensure_agenda_halted((SubLObject)dumper.NIL);
                }
                if (dumper.NIL != agenda_runningP && dumper.NIL != agenda.agenda_running()) {
                    Errors.warn((SubLObject)dumper.$str94$Agenda_was_not_successfully_halte);
                }
                transcript_utilities.$master_transcript$.setGlobalValue((SubLObject)dumper.NIL);
                transcript_utilities.$local_transcript$.setGlobalValue((SubLObject)dumper.NIL);
                transcript_utilities.set_read_transcript((SubLObject)dumper.NIL);
                control_vars.$communication_mode$.setGlobalValue((SubLObject)dumper.$kw95$UNKNOWN);
                operation_queues.clear_remote_queue();
                operation_queues.clear_local_queue();
                operation_queues.clear_auxiliary_queue();
                operation_queues.clear_transcript_queue();
                kb_utilities.swap_out_all_pristine_kb_objects();
                misc_utilities.flush_all_logs();
                Storage.room((SubLObject)dumper.UNPROVIDED);
                kb_utilities.kb_statistics((SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
            result = cyc_dump_kb_int(directory_path, dump_type, options_plist);
        }
        finally {
            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                final SubLObject str2 = (SubLObject)dumper.$str96$Restoring_pre_dump_environment;
                final SubLObject _prev_bind_0_$98 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_10 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_11 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_12 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_13 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_14 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_15 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_16 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str2) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str2);
                    transcript_utilities.set_master_transcript((SubLObject)dumper.UNPROVIDED);
                    transcript_utilities.$local_transcript$.setGlobalValue(saved_local_transcript);
                    transcript_utilities.set_read_transcript(saved_read_transcript);
                    if (dumper.NIL != operation_communication.communication_modeP(saved_communication_mode)) {
                        operation_communication.set_communication_mode(saved_communication_mode);
                    }
                    operation_queues.$remote_queue$.setGlobalValue(saved_remote_queue);
                    operation_queues.set_local_queue(saved_local_queue);
                    operation_queues.$auxiliary_queue$.setGlobalValue(saved_auxiliary_queue);
                    operation_queues.$transcript_queue$.setGlobalValue(saved_transcript_queue);
                    if (dumper.NIL != agenda_runningP) {
                        agenda.start_agenda((SubLObject)dumper.UNPROVIDED);
                    }
                    tcp_server_utilities.re_enable_disabled_tcp_servers(disabled_servers);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_16, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_15, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_14, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_13, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_12, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_11, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_10, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$98, thread);
                }
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
            }
        }
        return result;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 28225L)
    public static SubLObject cyc_dump_kb_unsafe(final SubLObject directory_path, final SubLObject dump_type, SubLObject options_plist) {
        if (options_plist == dumper.UNPROVIDED) {
            options_plist = (SubLObject)dumper.NIL;
        }
        return cyc_dump_kb_int(directory_path, dump_type, options_plist);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 29108L)
    public static SubLObject cyc_dump_kb_int(final SubLObject directory_path, final SubLObject dump_type, SubLObject options_plist) {
        if (options_plist == dumper.UNPROVIDED) {
            options_plist = (SubLObject)dumper.NIL;
        }
        if (misc_utilities.generic_caches_directory().isString() && dumper.NIL != Strings.stringE(misc_utilities.generic_caches_directory(), directory_path, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)) {
            Errors.warn((SubLObject)dumper.$str98$Dump__A_KB_trivially_finished__du, dump_type, directory_path);
            return directory_path;
        }
        if (dumper.NIL == conses_high.getf(options_plist, (SubLObject)dumper.$kw99$OVERWRITE_UNITS_, (SubLObject)dumper.NIL) && dumper.NIL != Filesys.probe_file(Sequences.cconcatenate(directory_path, (SubLObject)dumper.$str100$done_txt))) {
            Errors.error((SubLObject)dumper.$str101$Cyc_units_aready_exist_in_directo, directory_path);
        }
        if (dumper.NIL != conses_high.getf(options_plist, (SubLObject)dumper.$kw102$FORCE_DIRECTORY_CREATE_, (SubLObject)dumper.T)) {
            file_utilities.make_directory_recursive(directory_path, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        }
        SubLObject result = (SubLObject)dumper.NIL;
        if (dump_type.eql((SubLObject)dumper.$kw103$STANDARD)) {
            result = dump_standard_kb(directory_path);
        }
        else if (dump_type.eql((SubLObject)dumper.$kw104$INCREMENTAL) || dump_type.eql((SubLObject)dumper.$kw105$INCREMENTAL_STANDARD)) {
            result = operation_communication.dump_incremental_kb(directory_path, (SubLObject)dumper.$kw103$STANDARD);
        }
        else if (dump_type.eql((SubLObject)dumper.$kw106$SNAPSHOT) || dump_type.eql((SubLObject)dumper.$kw107$SNAPSHOT_MINIMAL)) {
            result = snapshot_kb(misc_utilities.generic_caches_directory(), directory_path, (SubLObject)dumper.$kw108$MINIMAL);
        }
        else if (dump_type.eql((SubLObject)dumper.$kw109$RAW)) {
            result = dump_kb(directory_path);
        }
        else if (dump_type.eql((SubLObject)dumper.$kw110$INCREMENTAL_RAW)) {
            result = operation_communication.dump_incremental_kb(directory_path, (SubLObject)dumper.$kw111$FULL);
        }
        else if (dump_type.eql((SubLObject)dumper.$kw112$INCREMENTAL_ESSENTIAL)) {
            result = operation_communication.dump_incremental_kb(directory_path, (SubLObject)dumper.$kw113$ESSENTIAL);
        }
        else if (dump_type.eql((SubLObject)dumper.$kw114$SNAPSHOT_MEDIUM)) {
            result = snapshot_kb(misc_utilities.generic_caches_directory(), directory_path, (SubLObject)dumper.$kw115$MEDIUM);
        }
        else if (dump_type.eql((SubLObject)dumper.$kw116$SNAPSHOT_MAXIMAL)) {
            result = snapshot_kb(misc_utilities.generic_caches_directory(), directory_path, (SubLObject)dumper.$kw117$MAXIMAL);
        }
        else {
            Errors.error((SubLObject)dumper.$str118$Valid_DUMP_TYPE_not_specified);
        }
        return result;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 30844L)
    public static SubLObject with_timed_kb_store_operation(final SubLObject macroform, final SubLObject environment) {
        SubLObject current;
        final SubLObject datum = current = macroform.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list119);
        final SubLObject temp = current.rest();
        current = current.first();
        SubLObject start_label = (SubLObject)dumper.NIL;
        SubLObject direction = (SubLObject)dumper.NIL;
        SubLObject end_label = (SubLObject)dumper.NIL;
        SubLObject path = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list119);
        start_label = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list119);
        direction = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list119);
        end_label = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list119);
        path = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            final SubLObject body;
            current = (body = temp);
            final SubLObject op_time = (SubLObject)dumper.$sym120$OP_TIME;
            return (SubLObject)ConsesLow.list((SubLObject)dumper.$sym8$CLET, (SubLObject)ConsesLow.list(op_time), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym18$PWHEN, (SubLObject)dumper.$sym121$_DUMP_VERBOSE_, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym122$FORMAT, (SubLObject)dumper.T, (SubLObject)dumper.$str123$_________A_KB, start_label), (SubLObject)dumper.$list124, (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym122$FORMAT, (SubLObject)dumper.T, (SubLObject)dumper.$str125$__A__A_at__A__, direction, path, (SubLObject)dumper.$list126)), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym127$CTIME, op_time, reader.bq_cons((SubLObject)dumper.$sym23$PROGN, ConsesLow.append(body, (SubLObject)dumper.NIL))), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym18$PWHEN, (SubLObject)dumper.$sym121$_DUMP_VERBOSE_, (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym128$FORCE_FORMAT, new SubLObject[] { dumper.T, dumper.$str129$_________A_of_KB__A_completed___A, end_label, dumper.$list130, ConsesLow.list((SubLObject)dumper.$sym131$ELAPSED_TIME_ABBREVIATION_STRING, op_time), dumper.$list126 })));
        }
        cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list119);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 31644L)
    public static SubLObject dump_kb(SubLObject directory_path) {
        if (directory_path == dumper.UNPROVIDED) {
            directory_path = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        directory_path = ensure_valid_dump_directory(directory_path);
        SubLObject op_time = (SubLObject)dumper.NIL;
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str123$_________A_KB, (SubLObject)dumper.$str132$Dumping);
            if (dumper.NIL != control_vars.kb_loaded()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str133$__A, operation_communication.kb_version_string());
            }
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str125$__A__A_at__A__, new SubLObject[] { dumper.$str134$to, directory_path, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED) });
        }
        final SubLObject time_var = Time.get_internal_real_time();
        possibly_note_transcript_operations_processed();
        dump_special_objects(directory_path);
        final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols(kb_dump_common_symbols());
            final SubLObject _prev_bind_0_$99 = constants_high.$constant_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_2 = api_control_vars.$cfasl_constant_handle_func$.currentBinding(thread);
            final SubLObject _prev_bind_3 = narts_high.$nart_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_4 = api_control_vars.$cfasl_nart_handle_func$.currentBinding(thread);
            final SubLObject _prev_bind_5 = unrepresented_terms.$unrepresented_term_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_6 = assertions_high.$assertion_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_7 = api_control_vars.$cfasl_assertion_handle_func$.currentBinding(thread);
            final SubLObject _prev_bind_8 = deductions_high.$deduction_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_9 = api_control_vars.$cfasl_deduction_handle_func$.currentBinding(thread);
            final SubLObject _prev_bind_10 = kb_hl_supports_high.$kb_hl_support_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_11 = api_control_vars.$cfasl_kb_hl_support_handle_func$.currentBinding(thread);
            final SubLObject _prev_bind_12 = clause_strucs.$clause_struc_dump_id_table$.currentBinding(thread);
            final SubLObject _prev_bind_13 = api_control_vars.$cfasl_clause_struc_handle_func$.currentBinding(thread);
            try {
                constants_high.$constant_dump_id_table$.bind(constant_handles.create_constant_dump_id_table(), thread);
                api_control_vars.$cfasl_constant_handle_func$.bind((SubLObject)dumper.$sym42$CONSTANT_DUMP_ID, thread);
                narts_high.$nart_dump_id_table$.bind(nart_handles.create_nart_dump_id_table(), thread);
                api_control_vars.$cfasl_nart_handle_func$.bind((SubLObject)dumper.$sym43$NART_DUMP_ID, thread);
                unrepresented_terms.$unrepresented_term_dump_id_table$.bind(unrepresented_terms.create_unrepresented_term_dump_id_table(), thread);
                assertions_high.$assertion_dump_id_table$.bind(assertion_handles.create_assertion_dump_id_table(), thread);
                api_control_vars.$cfasl_assertion_handle_func$.bind((SubLObject)dumper.$sym44$ASSERTION_DUMP_ID, thread);
                deductions_high.$deduction_dump_id_table$.bind(deduction_handles.create_deduction_dump_id_table(), thread);
                api_control_vars.$cfasl_deduction_handle_func$.bind((SubLObject)dumper.$sym45$DEDUCTION_DUMP_ID, thread);
                kb_hl_supports_high.$kb_hl_support_dump_id_table$.bind(kb_hl_support_handles.create_kb_hl_support_dump_id_table(), thread);
                api_control_vars.$cfasl_kb_hl_support_handle_func$.bind((SubLObject)dumper.$sym46$KB_HL_SUPPORT_DUMP_ID, thread);
                clause_strucs.$clause_struc_dump_id_table$.bind(clause_strucs.create_clause_struc_dump_id_table(), thread);
                api_control_vars.$cfasl_clause_struc_handle_func$.bind((SubLObject)dumper.$sym47$CLAUSE_STRUC_DUMP_ID, thread);
                kb_dump_to_directory(directory_path);
                dump_computable_remaining_hl(directory_path, (SubLObject)dumper.UNPROVIDED);
            }
            finally {
                api_control_vars.$cfasl_clause_struc_handle_func$.rebind(_prev_bind_13, thread);
                clause_strucs.$clause_struc_dump_id_table$.rebind(_prev_bind_12, thread);
                api_control_vars.$cfasl_kb_hl_support_handle_func$.rebind(_prev_bind_11, thread);
                kb_hl_supports_high.$kb_hl_support_dump_id_table$.rebind(_prev_bind_10, thread);
                api_control_vars.$cfasl_deduction_handle_func$.rebind(_prev_bind_9, thread);
                deductions_high.$deduction_dump_id_table$.rebind(_prev_bind_8, thread);
                api_control_vars.$cfasl_assertion_handle_func$.rebind(_prev_bind_7, thread);
                assertions_high.$assertion_dump_id_table$.rebind(_prev_bind_6, thread);
                unrepresented_terms.$unrepresented_term_dump_id_table$.rebind(_prev_bind_5, thread);
                api_control_vars.$cfasl_nart_handle_func$.rebind(_prev_bind_4, thread);
                narts_high.$nart_dump_id_table$.rebind(_prev_bind_3, thread);
                api_control_vars.$cfasl_constant_handle_func$.rebind(_prev_bind_2, thread);
                constants_high.$constant_dump_id_table$.rebind(_prev_bind_0_$99, thread);
            }
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        op_time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            format_nil.force_format((SubLObject)dumper.T, (SubLObject)dumper.$str129$_________A_of_KB__A_completed___A, (SubLObject)dumper.$str135$Dump, operation_communication.kb_version_string(), numeric_date_utilities.elapsed_time_abbreviation_string(op_time), numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 32359L)
    public static SubLObject load_kb(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = kb_health_statistics.$kb_health_current_component$.currentBinding(thread);
        final SubLObject _prev_bind_2 = cfasl_kb_methods.$report_cfasl_invalid_objectsP$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_component$.bind((SubLObject)dumper.$kw136$LOAD_KB, thread);
            cfasl_kb_methods.$report_cfasl_invalid_objectsP$.bind((SubLObject)dumper.T, thread);
            SubLObject op_time = (SubLObject)dumper.NIL;
            if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str123$_________A_KB, (SubLObject)dumper.$str137$Loading);
                if (dumper.NIL != control_vars.kb_loaded()) {
                    PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str133$__A, operation_communication.kb_version_string());
                }
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str125$__A__A_at__A__, new SubLObject[] { dumper.$str138$from, directory_path, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED) });
            }
            final SubLObject time_var = Time.get_internal_real_time();
            final SubLObject _prev_bind_0_$100 = control_vars.$save_asked_queriesP$.currentBinding(thread);
            try {
                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                kb_store_utils.alexandria_prefetch_kb_content();
                kb_load_from_directory(directory_path);
                load_kb_initializations();
                if (dumper.NIL != force_monolithic_kb_assumptionP()) {
                    sbhl_caching_policies.enforce_monolithic_kb_sbhl_caching_policies();
                    kb_load_gc_checkpoint();
                }
                else {
                    kb_utilities.swap_out_all_pristine_kb_objects();
                    final SubLObject _prev_bind_0_$101 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
                    try {
                        kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw139$POLICIES, thread);
                        sbhl_caching_policies.enforce_standard_kb_sbhl_caching_policies(directory_path);
                    }
                    finally {
                        kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$101, thread);
                    }
                    kb_load_gc_checkpoint();
                }
            }
            finally {
                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0_$100, thread);
            }
            op_time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
            if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
                format_nil.force_format((SubLObject)dumper.T, (SubLObject)dumper.$str129$_________A_of_KB__A_completed___A, (SubLObject)dumper.$str140$Load, operation_communication.kb_version_string(), numeric_date_utilities.elapsed_time_abbreviation_string(op_time), numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
            }
            kb_utilities.kb_statistics(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.UNPROVIDED);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
            research_cyc_init.perform_research_cyc_load_finalizations();
        }
        finally {
            cfasl_kb_methods.$report_cfasl_invalid_objectsP$.rebind(_prev_bind_2, thread);
            kb_health_statistics.$kb_health_current_component$.rebind(_prev_bind_0, thread);
        }
        return control_vars.kb_loaded();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 33962L)
    public static SubLObject minimal_tombstoning_modeP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return Equality.eq((SubLObject)dumper.$kw108$MINIMAL, dumper.$snapshot_tombstoning_mode$.getDynamicValue(thread));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 34061L)
    public static SubLObject medium_tombstoning_modeP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return Equality.eq((SubLObject)dumper.$kw115$MEDIUM, dumper.$snapshot_tombstoning_mode$.getDynamicValue(thread));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 34158L)
    public static SubLObject maximal_tombstoning_modeP() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return Equality.eq((SubLObject)dumper.$kw117$MAXIMAL, dumper.$snapshot_tombstoning_mode$.getDynamicValue(thread));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 34257L)
    public static SubLObject snapshot_kb(final SubLObject active_dir, SubLObject snapshot_dir, SubLObject tomb_stoning_mode) {
        if (snapshot_dir == dumper.UNPROVIDED) {
            snapshot_dir = (SubLObject)dumper.NIL;
        }
        if (tomb_stoning_mode == dumper.UNPROVIDED) {
            tomb_stoning_mode = (SubLObject)dumper.$kw108$MINIMAL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        snapshot_dir = ensure_valid_dump_directory(snapshot_dir);
        final SubLObject _prev_bind_0 = kb_health_statistics.$kb_health_current_component$.currentBinding(thread);
        final SubLObject _prev_bind_2 = cfasl_kb_methods.$report_cfasl_invalid_objectsP$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_component$.bind((SubLObject)dumper.$kw141$SNAPSHOT_KB, thread);
            cfasl_kb_methods.$report_cfasl_invalid_objectsP$.bind((SubLObject)dumper.T, thread);
            SubLObject op_time = (SubLObject)dumper.NIL;
            if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str123$_________A_KB, (SubLObject)dumper.$str142$Snapshotting);
                if (dumper.NIL != control_vars.kb_loaded()) {
                    PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str133$__A, operation_communication.kb_version_string());
                }
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str125$__A__A_at__A__, new SubLObject[] { dumper.$str134$to, snapshot_dir, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED) });
            }
            final SubLObject time_var = Time.get_internal_real_time();
            kb_utilities.show_new_kb_state((SubLObject)dumper.UNPROVIDED);
            possibly_note_transcript_operations_processed();
            dump_special_objects(snapshot_dir);
            final SubLObject _prev_bind_0_$102 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
            try {
                cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
                cfasl.cfasl_set_common_symbols(kb_dump_common_symbols());
                final SubLObject _prev_bind_0_$103 = dumper.$snapshot_tombstoning_mode$.currentBinding(thread);
                try {
                    dumper.$snapshot_tombstoning_mode$.bind(tomb_stoning_mode, thread);
                    kb_snapshot_to_directory(active_dir, snapshot_dir);
                }
                finally {
                    dumper.$snapshot_tombstoning_mode$.rebind(_prev_bind_0_$103, thread);
                }
                final SubLObject _prev_bind_0_$104 = dumper.$auto_increment_kb_number_on_dumpP$.currentBinding(thread);
                try {
                    dumper.$auto_increment_kb_number_on_dumpP$.bind((SubLObject)dumper.NIL, thread);
                    snapshot_computable_remaining_hl(snapshot_dir, (SubLObject)dumper.UNPROVIDED);
                }
                finally {
                    dumper.$auto_increment_kb_number_on_dumpP$.rebind(_prev_bind_0_$104, thread);
                }
            }
            finally {
                cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0_$102, thread);
            }
            operation_communication.dump_incremental_stats_information(snapshot_dir);
            op_time = Numbers.divide(Numbers.subtract(Time.get_internal_real_time(), time_var), time_high.$internal_time_units_per_second$.getGlobalValue());
            if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
                format_nil.force_format((SubLObject)dumper.T, (SubLObject)dumper.$str129$_________A_of_KB__A_completed___A, (SubLObject)dumper.$str143$Snapshot, operation_communication.kb_version_string(), numeric_date_utilities.elapsed_time_abbreviation_string(op_time), numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
            }
        }
        finally {
            cfasl_kb_methods.$report_cfasl_invalid_objectsP$.rebind(_prev_bind_2, thread);
            kb_health_statistics.$kb_health_current_component$.rebind(_prev_bind_0, thread);
        }
        return snapshot_dir;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 35328L)
    public static SubLObject ensure_valid_dump_directory(SubLObject directory_path) {
        if (dumper.NIL == directory_path) {
            final SubLObject next_kb = Numbers.add((SubLObject)dumper.ONE_INTEGER, control_vars.kb_loaded());
            directory_path = kb_dump_directory(next_kb, (SubLObject)dumper.UNPROVIDED);
        }
        if (dumper.NIL == Filesys.probe_file(directory_path)) {
            Errors.cerror((SubLObject)dumper.$str144$Create_directory_and_continue_, (SubLObject)dumper.$str36$Directory__S_does_not_exist_, directory_path);
            file_utilities.make_directory_recursive(directory_path, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        }
        validate_dump_directory(directory_path);
        return directory_path;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 35836L)
    public static SubLObject possibly_note_transcript_operations_processed() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread) && control_vars.kb_loaded().isInteger() && dumper.NIL != subl_promotions.positive_integer_p(operation_communication.kb_op_number())) {
            format_nil.force_format((SubLObject)dumper.T, (SubLObject)dumper.$str145$_____S_transcript_operations_proc, operation_communication.kb_op_number(), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 36240L)
    public static SubLObject kb_manifest() {
        return dumper.$kb_manifest$.getGlobalValue();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 36294L)
    public static SubLObject kb_possibly_load_manifest_from_directory(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject msg = (SubLObject)dumper.NIL;
        try {
            thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
            try {
                Errors.$error_handler$.bind((SubLObject)dumper.$sym147$CATCH_ERROR_MESSAGE_HANDLER, thread);
                try {
                    kb_load_manifest_from_directory(directory_path);
                }
                catch (Throwable catch_var) {
                    Errors.handleThrowable(catch_var, (SubLObject)dumper.NIL);
                }
            }
            finally {
                Errors.$error_handler$.rebind(_prev_bind_0, thread);
            }
        }
        catch (Throwable ccatch_env_var) {
            msg = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
        }
        finally {
            thread.throwStack.pop();
        }
        if (msg.isString()) {
            Errors.warn((SubLObject)dumper.$str148$Could_not_load_KB_manifest_from__, directory_path);
            dumper.$kb_manifest$.setGlobalValue((SubLObject)ConsesLow.list((SubLObject)dumper.$kw149$ID, (SubLObject)dumper.$kw95$UNKNOWN));
        }
        return kb_manifest();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 36740L)
    public static SubLObject kb_load_manifest_from_directory(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manifest_file = kb_dump_file((SubLObject)dumper.$str150$manifest, directory_path, (SubLObject)dumper.NIL);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_text(manifest_file, (SubLObject)dumper.$kw151$INPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, manifest_file);
            }
            final SubLObject s = stream;
            dumper.$kb_manifest$.setGlobalValue(reader.read(s, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
        }
        finally {
            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
            }
        }
        return kb_manifest();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 37059L)
    public static SubLObject describe_knowledge_fvector_files(final SubLObject type_base) {
        return (SubLObject)ConsesLow.list((SubLObject)dumper.$kw153$DATA_FILE, type_base, (SubLObject)dumper.$kw154$INDEX_FILE, Sequences.cconcatenate(type_base, (SubLObject)dumper.$str155$_index), (SubLObject)dumper.$kw156$TYPE, (SubLObject)dumper.$kw157$KNOWLEDGE);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 37275L)
    public static SubLObject describe_index_fvector_files(final SubLObject type_base) {
        SubLObject simple_df = (SubLObject)dumper.NIL;
        SubLObject simple_if = (SubLObject)dumper.NIL;
        SubLObject complex_df = (SubLObject)dumper.NIL;
        SubLObject complex_if = (SubLObject)dumper.NIL;
        final SubLObject current;
        final SubLObject datum = current = describe_knowledge_fvector_files((SubLObject)((dumper.NIL != Strings.stringE((SubLObject)dumper.$str158$constant, type_base, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)) ? dumper.$str159$indices : Sequences.cconcatenate(type_base, (SubLObject)dumper.$str160$_indices)));
        SubLObject allow_other_keys_p = (SubLObject)dumper.NIL;
        SubLObject rest = current;
        SubLObject bad = (SubLObject)dumper.NIL;
        SubLObject current_$105 = (SubLObject)dumper.NIL;
        while (dumper.NIL != rest) {
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)dumper.$list161);
            current_$105 = rest.first();
            rest = rest.rest();
            cdestructuring_bind.destructuring_bind_must_consp(rest, datum, (SubLObject)dumper.$list161);
            if (dumper.NIL == conses_high.member(current_$105, (SubLObject)dumper.$list162, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)) {
                bad = (SubLObject)dumper.T;
            }
            if (current_$105 == dumper.$kw163$ALLOW_OTHER_KEYS) {
                allow_other_keys_p = rest.first();
            }
            rest = rest.rest();
        }
        if (dumper.NIL != bad && dumper.NIL == allow_other_keys_p) {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list161);
        }
        final SubLObject data_file_tail = cdestructuring_bind.property_list_member((SubLObject)dumper.$kw153$DATA_FILE, current);
        final SubLObject data_file = (SubLObject)((dumper.NIL != data_file_tail) ? conses_high.cadr(data_file_tail) : dumper.NIL);
        final SubLObject index_file_tail = cdestructuring_bind.property_list_member((SubLObject)dumper.$kw154$INDEX_FILE, current);
        final SubLObject index_file = (SubLObject)((dumper.NIL != index_file_tail) ? conses_high.cadr(index_file_tail) : dumper.NIL);
        final SubLObject type_tail = cdestructuring_bind.property_list_member((SubLObject)dumper.$kw156$TYPE, current);
        final SubLObject type = (SubLObject)((dumper.NIL != type_tail) ? conses_high.cadr(type_tail) : dumper.NIL);
        simple_df = data_file;
        simple_if = index_file;
        final SubLObject current_$106;
        final SubLObject datum_$106 = current_$106 = describe_knowledge_fvector_files(Sequences.cconcatenate(type_base, (SubLObject)dumper.$str164$_complex_indices));
        SubLObject allow_other_keys_p_$108 = (SubLObject)dumper.NIL;
        SubLObject rest_$109 = current_$106;
        SubLObject bad_$110 = (SubLObject)dumper.NIL;
        SubLObject current_$107 = (SubLObject)dumper.NIL;
        while (dumper.NIL != rest_$109) {
            cdestructuring_bind.destructuring_bind_must_consp(rest_$109, datum_$106, (SubLObject)dumper.$list161);
            current_$107 = rest_$109.first();
            rest_$109 = rest_$109.rest();
            cdestructuring_bind.destructuring_bind_must_consp(rest_$109, datum_$106, (SubLObject)dumper.$list161);
            if (dumper.NIL == conses_high.member(current_$107, (SubLObject)dumper.$list162, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)) {
                bad_$110 = (SubLObject)dumper.T;
            }
            if (current_$107 == dumper.$kw163$ALLOW_OTHER_KEYS) {
                allow_other_keys_p_$108 = rest_$109.first();
            }
            rest_$109 = rest_$109.rest();
        }
        if (dumper.NIL != bad_$110 && dumper.NIL == allow_other_keys_p_$108) {
            cdestructuring_bind.cdestructuring_bind_error(datum_$106, (SubLObject)dumper.$list161);
        }
        final SubLObject data_file_tail2 = cdestructuring_bind.property_list_member((SubLObject)dumper.$kw153$DATA_FILE, current_$106);
        final SubLObject data_file2 = (SubLObject)((dumper.NIL != data_file_tail2) ? conses_high.cadr(data_file_tail2) : dumper.NIL);
        final SubLObject index_file_tail2 = cdestructuring_bind.property_list_member((SubLObject)dumper.$kw154$INDEX_FILE, current_$106);
        final SubLObject index_file2 = (SubLObject)((dumper.NIL != index_file_tail2) ? conses_high.cadr(index_file_tail2) : dumper.NIL);
        final SubLObject type_tail2 = cdestructuring_bind.property_list_member((SubLObject)dumper.$kw156$TYPE, current_$106);
        final SubLObject type2 = (SubLObject)((dumper.NIL != type_tail2) ? conses_high.cadr(type_tail2) : dumper.NIL);
        complex_df = data_file2;
        complex_if = index_file2;
        return (SubLObject)ConsesLow.list(new SubLObject[] { dumper.$kw153$DATA_FILE, simple_df, dumper.$kw154$INDEX_FILE, simple_if, dumper.$kw165$COMPLEX_DATA_FILE, complex_df, dumper.$kw166$COMPLEX_INDEX_FILE, complex_if, dumper.$kw156$TYPE, dumper.$kw167$INDEXING });
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 38667L)
    public static SubLObject get_kb_units_file_vector_descriptions() {
        return conses_high.copy_tree(dumper.$kb_units_fvector_descriptions$.getGlobalValue());
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 38820L)
    public static SubLObject get_kb_units_file_vector_categories() {
        SubLObject categories = (SubLObject)dumper.NIL;
        SubLObject cdolist_list_var = dumper.$kb_units_fvector_descriptions$.getGlobalValue();
        SubLObject description = (SubLObject)dumper.NIL;
        description = cdolist_list_var.first();
        while (dumper.NIL != cdolist_list_var) {
            final SubLObject pcase_var;
            final SubLObject type = pcase_var = conses_high.getf(description, (SubLObject)dumper.$kw156$TYPE, (SubLObject)dumper.$kw176$NOT_FOUND);
            if (pcase_var.eql((SubLObject)dumper.$kw157$KNOWLEDGE)) {
                categories = (SubLObject)ConsesLow.cons(conses_high.getf(description, (SubLObject)dumper.$kw153$DATA_FILE, (SubLObject)dumper.$str177$), categories);
            }
            else if (pcase_var.eql((SubLObject)dumper.$kw167$INDEXING)) {
                categories = (SubLObject)ConsesLow.cons(conses_high.getf(description, (SubLObject)dumper.$kw153$DATA_FILE, (SubLObject)dumper.$str177$), categories);
                categories = (SubLObject)ConsesLow.cons(conses_high.getf(description, (SubLObject)dumper.$kw165$COMPLEX_DATA_FILE, (SubLObject)dumper.$str177$), categories);
            }
            else if (pcase_var.eql((SubLObject)dumper.$kw176$NOT_FOUND)) {
                Errors.error((SubLObject)dumper.$str178$File_Vector_category_description_, description);
            }
            else {
                Errors.warn((SubLObject)dumper.$str179$Skipping_unknown_File_Vector_cate, type);
            }
            cdolist_list_var = cdolist_list_var.rest();
            description = cdolist_list_var.first();
        }
        return Sequences.nreverse(categories);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 39516L)
    public static SubLObject kb_dump_to_directory(final SubLObject directory_path) {
        dump_kb_ids(directory_path);
        dump_essential_kb(directory_path);
        dump_computable_kb(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 39743L)
    public static SubLObject kb_snapshot_to_directory(final SubLObject active_dir, final SubLObject snapshot_dir) {
        snapshot_essential_kb(active_dir, snapshot_dir);
        snapshot_computable_kb(active_dir, snapshot_dir);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 40016L)
    public static SubLObject kb_load_from_directory(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        kb_load_gc_checkpoint();
        final SubLObject common_symbols = load_special_objects(directory_path, (SubLObject)dumper.UNPROVIDED);
        misc_utilities.initialize_hl_store_cache_directory_and_shared_symbols(directory_path, common_symbols);
        kb_load_gc_checkpoint();
        kb_possibly_load_manifest_from_directory(directory_path);
        final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols(common_symbols);
            final SubLObject _prev_bind_0_$112 = api_control_vars.$cfasl_constant_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_2 = api_control_vars.$cfasl_nart_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_3 = api_control_vars.$cfasl_assertion_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_4 = api_control_vars.$cfasl_deduction_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_5 = api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_6 = api_control_vars.$cfasl_clause_struc_handle_lookup_func$.currentBinding(thread);
            try {
                api_control_vars.$cfasl_constant_handle_lookup_func$.bind((SubLObject)dumper.$sym48$FIND_CONSTANT_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_nart_handle_lookup_func$.bind((SubLObject)dumper.$sym49$FIND_NART_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_assertion_handle_lookup_func$.bind((SubLObject)dumper.$sym50$FIND_ASSERTION_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_deduction_handle_lookup_func$.bind((SubLObject)dumper.$sym51$FIND_DEDUCTION_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.bind((SubLObject)dumper.$sym52$FIND_KB_HL_SUPPORT_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_clause_struc_handle_lookup_func$.bind((SubLObject)dumper.$sym53$FIND_CLAUSE_STRUC_BY_DUMP_ID, thread);
                final SubLObject _prev_bind_0_$113 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
                try {
                    kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw113$ESSENTIAL, thread);
                    load_essential_kb(directory_path);
                }
                finally {
                    kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$113, thread);
                }
                final SubLObject _prev_bind_0_$114 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
                try {
                    kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw180$COMPUTABLE, thread);
                    load_computable_content(directory_path);
                }
                finally {
                    kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$114, thread);
                }
            }
            finally {
                api_control_vars.$cfasl_clause_struc_handle_lookup_func$.rebind(_prev_bind_6, thread);
                api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.rebind(_prev_bind_5, thread);
                api_control_vars.$cfasl_deduction_handle_lookup_func$.rebind(_prev_bind_4, thread);
                api_control_vars.$cfasl_assertion_handle_lookup_func$.rebind(_prev_bind_3, thread);
                api_control_vars.$cfasl_nart_handle_lookup_func$.rebind(_prev_bind_2, thread);
                api_control_vars.$cfasl_constant_handle_lookup_func$.rebind(_prev_bind_0_$112, thread);
            }
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 40654L)
    public static SubLObject dump_kb_ids(final SubLObject directory_path) {
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 40831L)
    public static SubLObject dump_essential_kb(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.$str181$________Dumping_essential_KB__);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        dump_constant_shells(directory_path);
        dump_nart_count(directory_path);
        dump_assertion_count(directory_path);
        dump_kb_hl_support_count(directory_path);
        dump_clause_struc_defs(directory_path);
        dump_deduction_defs(directory_path);
        dump_assertion_defs(directory_path);
        dump_kb_hl_support_defs(directory_path);
        dump_bookkeeping_assertions(directory_path);
        dump_experience(directory_path, (SubLObject)dumper.UNPROVIDED);
        sbhl_caching_policies.dump_active_kb_sbhl_caching_policies(directory_path, (SubLObject)dumper.UNPROVIDED);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 41768L)
    public static SubLObject snapshot_essential_kb(final SubLObject active_dir, final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.$str182$________Snapshotting_essential_KB);
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        SubLObject _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw183$CONSTANT_SHELLS, thread);
            snapshot_constant_shells(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw184$NART_SHELLS, thread);
            snapshot_nart_count(directory_path);
            snapshot_deleted_nart_id_set(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw185$ASSERTION_SHELLS, thread);
            snapshot_assertion_count(directory_path);
            snapshot_deleted_assertion_id_set(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw186$DEDUCTION_DEFS, thread);
            snapshot_deleted_deduction_id_set(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw187$KB_HL_SUPPORT_SHELLS, thread);
            snapshot_kb_hl_support_count(directory_path);
            snapshot_deleted_kb_hl_support_id_set(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw188$CLAUSE_STRUC_DEFS, thread);
            snapshot_clause_struc_defs(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw186$DEDUCTION_DEFS, thread);
            snapshot_deduction_count(directory_path);
            snapshot_deduction_defs(active_dir, directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw189$ASSERTION_DEFS, thread);
            snapshot_assertion_defs(active_dir, directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw190$KB_HL_SUPPORT_DEFS, thread);
            snapshot_kb_hl_support_defs(active_dir, directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw191$BOOKEEPING_ASSERTIONS, thread);
            dump_bookkeeping_assertions(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw192$EXPERIENCE, thread);
            dump_experience(directory_path, (SubLObject)dumper.UNPROVIDED);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw139$POLICIES, thread);
            sbhl_caching_policies.dump_active_kb_sbhl_caching_policies(directory_path, (SubLObject)dumper.UNPROVIDED);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 43587L)
    public static SubLObject load_essential_kb(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.$str193$________Loading_essential_KB_at__, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED));
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = utilities_macros.$structure_resourcing_make_static$.currentBinding(thread);
        final SubLObject _prev_bind_2 = cfasl.$cfasl_input_to_static_area$.currentBinding(thread);
        try {
            utilities_macros.$structure_resourcing_make_static$.bind((SubLObject)dumper.T, thread);
            cfasl.$cfasl_input_to_static_area$.bind((SubLObject)dumper.T, thread);
            final SubLObject _prev_bind_0_$115 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw194$SETUP, thread);
                setup_kb_state_from_dump(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$115, thread);
            }
            final SubLObject _prev_bind_0_$116 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw183$CONSTANT_SHELLS, thread);
                load_constant_shells(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$116, thread);
            }
            final SubLObject _prev_bind_0_$117 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw184$NART_SHELLS, thread);
                load_nart_shells(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$117, thread);
            }
            final SubLObject _prev_bind_0_$118 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw185$ASSERTION_SHELLS, thread);
                load_assertion_shells(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$118, thread);
            }
            final SubLObject _prev_bind_0_$119 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw187$KB_HL_SUPPORT_SHELLS, thread);
                load_kb_hl_support_shells(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$119, thread);
            }
            final SubLObject _prev_bind_0_$120 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw188$CLAUSE_STRUC_DEFS, thread);
                load_clause_struc_defs(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$120, thread);
            }
            final SubLObject _prev_bind_0_$121 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw186$DEDUCTION_DEFS, thread);
                load_deduction_defs(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$121, thread);
            }
            final SubLObject _prev_bind_0_$122 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw189$ASSERTION_DEFS, thread);
                load_assertion_defs(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$122, thread);
            }
            final SubLObject _prev_bind_0_$123 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw190$KB_HL_SUPPORT_DEFS, thread);
                load_kb_hl_support_defs(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$123, thread);
            }
            final SubLObject _prev_bind_0_$124 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw191$BOOKEEPING_ASSERTIONS, thread);
                load_bookkeeping_assertions(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$124, thread);
            }
            final SubLObject _prev_bind_0_$125 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw192$EXPERIENCE, thread);
                load_experience(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$125, thread);
            }
        }
        finally {
            cfasl.$cfasl_input_to_static_area$.rebind(_prev_bind_2, thread);
            utilities_macros.$structure_resourcing_make_static$.rebind(_prev_bind_0, thread);
        }
        load_essential_kb_initializations();
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 45389L)
    public static SubLObject load_essential_kb_initializations() {
        initialize_kb_features();
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 45673L)
    public static SubLObject load_computable_kb_initializations() {
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 45892L)
    public static SubLObject load_computable_remaining_hl_low_initializations() {
        subl_identifier.initialize_sublid_mappings();
        somewhere_cache.initialize_somewhere_cached_pred_argnum_dict();
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 46199L)
    public static SubLObject dump_computable_content(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$126 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$127 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$126);
            final SubLObject memory_mappedP_$128 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$126);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$126);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$126);
                final SubLObject manager_$127 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$128 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$127);
                final SubLObject memory_mappedP_$129 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$127);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$127);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$127);
                    final SubLObject manager_$128 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$129 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$128);
                    final SubLObject memory_mappedP_$130 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$128);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$128);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$128);
                        final SubLObject manager_$129 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$130 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$129);
                        final SubLObject memory_mappedP_$131 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$129);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$129);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$129);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                dump_computable_kb(directory_path);
                                dump_computable_remaining_hl(directory_path, (SubLObject)dumper.UNPROVIDED);
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$130) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$129);
                                }
                                if (dumper.NIL == memory_mappedP_$131) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$129, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$129) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$128);
                            }
                            if (dumper.NIL == memory_mappedP_$130) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$128, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$128) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$127);
                        }
                        if (dumper.NIL == memory_mappedP_$129) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$127, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$127) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$126);
                    }
                    if (dumper.NIL == memory_mappedP_$128) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$126, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 46604L)
    public static SubLObject load_computable_content(final SubLObject directory_path) {
        load_computable_kb(directory_path);
        load_computable_remaining_hl(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 46928L)
    public static SubLObject rebuild_computable_content() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$138 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$139 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$138);
            final SubLObject memory_mappedP_$140 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$138);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$138);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$138);
                final SubLObject manager_$139 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$140 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$139);
                final SubLObject memory_mappedP_$141 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$139);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$139);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$139);
                    final SubLObject manager_$140 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$141 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$140);
                    final SubLObject memory_mappedP_$142 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$140);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$140);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$140);
                        final SubLObject manager_$141 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$142 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$141);
                        final SubLObject memory_mappedP_$143 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$141);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$141);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$141);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                rebuild_computable_kb();
                                rebuild_computable_remaining_hl((SubLObject)dumper.UNPROVIDED);
                                rebuild_computable_but_not_dumpable_yet();
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$142) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$141);
                                }
                                if (dumper.NIL == memory_mappedP_$143) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$141, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$141) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$140);
                            }
                            if (dumper.NIL == memory_mappedP_$142) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$140, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$140) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$139);
                        }
                        if (dumper.NIL == memory_mappedP_$141) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$139, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$139) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$138);
                    }
                    if (dumper.NIL == memory_mappedP_$140) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$138, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 47177L)
    public static SubLObject rebuild_computable_content_dumpable(SubLObject rebuild_for_alexandriaP) {
        if (rebuild_for_alexandriaP == dumper.UNPROVIDED) {
            rebuild_for_alexandriaP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$150 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$151 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$150);
            final SubLObject memory_mappedP_$152 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$150);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$150);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$150);
                final SubLObject manager_$151 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$152 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$151);
                final SubLObject memory_mappedP_$153 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$151);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$151);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$151);
                    final SubLObject manager_$152 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$153 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$152);
                    final SubLObject memory_mappedP_$154 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$152);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$152);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$152);
                        final SubLObject manager_$153 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$154 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$153);
                        final SubLObject memory_mappedP_$155 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$153);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$153);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$153);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                if (dumper.NIL == rebuild_for_alexandriaP) {
                                    rebuild_computable_kb();
                                }
                                rebuild_computable_remaining_hl(rebuild_for_alexandriaP);
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$154) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$153);
                                }
                                if (dumper.NIL == memory_mappedP_$155) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$153, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$153) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$152);
                            }
                            if (dumper.NIL == memory_mappedP_$154) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$152, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$152) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$151);
                        }
                        if (dumper.NIL == memory_mappedP_$153) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$151, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$151) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$150);
                    }
                    if (dumper.NIL == memory_mappedP_$152) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$150, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 47456L)
    public static SubLObject rebuild_computable_content_dumpable_low() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$162 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$163 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$162);
            final SubLObject memory_mappedP_$164 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$162);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$162);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$162);
                final SubLObject manager_$163 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$164 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$163);
                final SubLObject memory_mappedP_$165 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$163);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$163);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$163);
                    final SubLObject manager_$164 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$165 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$164);
                    final SubLObject memory_mappedP_$166 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$164);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$164);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$164);
                        final SubLObject manager_$165 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$166 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$165);
                        final SubLObject memory_mappedP_$167 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$165);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$165);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$165);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                rebuild_computable_kb();
                                rebuild_computable_remaining_hl_low((SubLObject)dumper.UNPROVIDED);
                                load_computable_remaining_hl_low_initializations();
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$166) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$165);
                                }
                                if (dumper.NIL == memory_mappedP_$167) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$165, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$165) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$164);
                            }
                            if (dumper.NIL == memory_mappedP_$166) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$164, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$164) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$163);
                        }
                        if (dumper.NIL == memory_mappedP_$165) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$163, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$163) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$162);
                    }
                    if (dumper.NIL == memory_mappedP_$164) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$162, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 47752L)
    public static SubLObject dump_computable_kb(final SubLObject directory_path) {
        dump_kb_unrepresented_terms(directory_path);
        dump_kb_indexing(directory_path);
        dump_rule_set(directory_path);
        dump_non_true_assertion_tv_cache(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 48029L)
    public static SubLObject snapshot_computable_kb(final SubLObject active_dir, final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw195$UNREPRESENTED_TERMS, thread);
            snapshot_kb_unrepresented_terms(active_dir, directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw196$KB_INDEXING, thread);
            snapshot_kb_indexing(active_dir, directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw197$RULE_SET, thread);
            dump_rule_set(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw198$NON_TRUE_ASSERTION_TV_CACHE, thread);
            dump_non_true_assertion_tv_cache(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 48505L)
    public static SubLObject load_computable_kb(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.$str199$________Loading_computable_KB_at_, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED));
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = utilities_macros.$structure_resourcing_make_static$.currentBinding(thread);
        final SubLObject _prev_bind_2 = cfasl.$cfasl_input_to_static_area$.currentBinding(thread);
        try {
            utilities_macros.$structure_resourcing_make_static$.bind((SubLObject)dumper.T, thread);
            cfasl.$cfasl_input_to_static_area$.bind((SubLObject)dumper.T, thread);
            final SubLObject _prev_bind_0_$174 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw195$UNREPRESENTED_TERMS, thread);
                load_kb_unrepresented_terms(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$174, thread);
            }
            final SubLObject _prev_bind_0_$175 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw196$KB_INDEXING, thread);
                load_kb_indexing(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$175, thread);
            }
            final SubLObject _prev_bind_0_$176 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw197$RULE_SET, thread);
                load_rule_set(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$176, thread);
            }
            final SubLObject _prev_bind_0_$177 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw198$NON_TRUE_ASSERTION_TV_CACHE, thread);
                load_non_true_assertion_tv_cache(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$177, thread);
            }
        }
        finally {
            cfasl.$cfasl_input_to_static_area$.rebind(_prev_bind_2, thread);
            utilities_macros.$structure_resourcing_make_static$.rebind(_prev_bind_0, thread);
        }
        load_computable_kb_initializations();
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 49290L)
    public static SubLObject rebuild_computable_kb() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$178 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$179 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$178);
            final SubLObject memory_mappedP_$180 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$178);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$178);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$178);
                final SubLObject manager_$179 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$180 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$179);
                final SubLObject memory_mappedP_$181 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$179);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$179);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$179);
                    final SubLObject manager_$180 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$181 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$180);
                    final SubLObject memory_mappedP_$182 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$180);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$180);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$180);
                        final SubLObject manager_$181 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$182 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$181);
                        final SubLObject memory_mappedP_$183 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$181);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$181);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$181);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                assertions_low.rebuild_rule_set();
                                assertions_low.rebuild_non_true_assertion_tv_cache();
                                rebuild_kb_indexing();
                                load_computable_kb_initializations();
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$182) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$181);
                                }
                                if (dumper.NIL == memory_mappedP_$183) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$181, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$181) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$180);
                            }
                            if (dumper.NIL == memory_mappedP_$182) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$180, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$180) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$179);
                        }
                        if (dumper.NIL == memory_mappedP_$181) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$179, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$179) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$178);
                    }
                    if (dumper.NIL == memory_mappedP_$180) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$178, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 49518L)
    public static SubLObject dump_computable_remaining_hl(final SubLObject directory_path, SubLObject alexandriaP) {
        if (alexandriaP == dumper.UNPROVIDED) {
            alexandriaP = (SubLObject)dumper.NIL;
        }
        if (dumper.NIL == alexandriaP) {
            dump_nart_hl_formulas(directory_path);
        }
        return dump_computable_remaining_hl_shared(directory_path, alexandriaP);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 49772L)
    public static SubLObject dump_computable_remaining_hl_shared(final SubLObject directory_path, final SubLObject alexandriaP) {
        //
        // This method could not be decompiled.
        //
        // Original Bytecode:
        //
        //     0: aload_1
        //     1: getstatic       com/cyc/cycjava/cycl/dumper.UNPROVIDED:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //     4: if_acmpne       11
        //     7: getstatic       com/cyc/cycjava/cycl/dumper.NIL:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLNil;
        //    10: astore_1
        //    11: invokestatic    com/cyc/tool/subl/jrtl/nativeCode/type/core/SubLProcess.currentSubLThread:()Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;
        //    14: astore_2
        //    15: aload_0
        //    16: invokestatic    com/cyc/cycjava/cycl/dumper.dump_miscellaneous:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    19: pop
        //    20: aload_0
        //    21: invokestatic    com/cyc/cycjava/cycl/dumper.dump_sbhl_data:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    24: pop
        //    25: aload_0
        //    26: invokestatic    com/cyc/cycjava/cycl/dumper.dump_sbhl_cache:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    29: pop
        //    30: aload_0
        //    31: invokestatic    com/cyc/cycjava/cycl/dumper.dump_cardinality_estimates:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    34: pop
        //    35: aload_0
        //    36: invokestatic    com/cyc/cycjava/cycl/dumper.dump_arg_type_cache:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    39: pop
        //    40: aload_0
        //    41: invokestatic    com/cyc/cycjava/cycl/dumper.dump_defns_cache:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    44: pop
        //    45: aload_0
        //    46: invokestatic    com/cyc/cycjava/cycl/dumper.dump_somewhere_cache:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    49: pop
        //    50: aload_0
        //    51: invokestatic    com/cyc/cycjava/cycl/dumper.dump_arity_cache:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    54: pop
        //    55: aload_0
        //    56: invokestatic    com/cyc/cycjava/cycl/dumper.dump_tva_cache:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    59: pop
        //    60: aload_0
        //    61: invokestatic    com/cyc/cycjava/cycl/dumper.dump_reformulator_rules:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    64: pop
        //    65: aload_0
        //    66: invokestatic    com/cyc/cycjava/cycl/lexicon_cache.dump_lexicon_cache:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    69: pop
        //    70: aload_0
        //    71: invokestatic    com/cyc/cycjava/cycl/dumper.dump_rtp_rules_cache:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    74: pop
        //    75: aload_0
        //    76: invokestatic    com/cyc/cycjava/cycl/dumper.dump_paraphrase_cycl_caches:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    79: pop
        //    80: aload_0
        //    81: invokestatic    com/cyc/cycjava/cycl/dumper.dump_english_units_of_measure:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    84: pop
        //    85: aload_0
        //    86: invokestatic    com/cyc/cycjava/cycl/lexicon_subword_index.dump_nl_trie_subword_index:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    89: pop
        //    90: getstatic       com/cyc/cycjava/cycl/dumper.NIL:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLNil;
        //    93: aload_1
        //    94: if_acmpeq       110
        //    97: getstatic       com/cyc/cycjava/cycl/dumper.$kb_dump_common_symbols$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   100: aload_2
        //   101: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.getDynamicValue:(Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   106: invokestatic    com/cyc/cycjava/cycl/kb_store_utils.persist_alexandria_special_objects:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   109: pop
        //   110: getstatic       com/cyc/cycjava/cycl/dumper.NIL:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLNil;
        //   113: aload_1
        //   114: if_acmpne       577
        //   117: aload_0
        //   118: invokestatic    com/cyc/cycjava/cycl/dumper.dump_kb_activities:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   121: pop
        //   122: getstatic       com/cyc/cycjava/cycl/dumper.$str200$done:Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLString;
        //   125: aload_0
        //   126: getstatic       com/cyc/cycjava/cycl/dumper.$str201$text:Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLString;
        //   129: invokestatic    com/cyc/cycjava/cycl/dumper.kb_dump_file:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   132: astore_3
        //   133: aload_3
        //   134: astore          filename_var
        //   136: getstatic       com/cyc/cycjava/cycl/dumper.NIL:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLNil;
        //   139: astore          stream
        //   141: getstatic       com/cyc/tool/subl/jrtl/translatedCode/sublisp/stream_macros.$stream_requires_locking$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   144: aload_2
        //   145: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.currentBinding:(Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   150: astore          _prev_bind_0
        //   152: getstatic       com/cyc/tool/subl/jrtl/translatedCode/sublisp/stream_macros.$stream_requires_locking$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   155: getstatic       com/cyc/cycjava/cycl/dumper.NIL:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLNil;
        //   158: aload_2
        //   159: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.bind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   164: aload           filename_var
        //   166: getstatic       com/cyc/cycjava/cycl/dumper.$kw202$OUTPUT:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   169: invokestatic    com/cyc/tool/subl/jrtl/translatedCode/sublisp/compatibility.open_text:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   172: astore          stream
        //   174: getstatic       com/cyc/tool/subl/jrtl/translatedCode/sublisp/stream_macros.$stream_requires_locking$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   177: aload           _prev_bind_0
        //   179: aload_2
        //   180: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.rebind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   185: goto            204
        //   188: astore          7
        //   190: getstatic       com/cyc/tool/subl/jrtl/translatedCode/sublisp/stream_macros.$stream_requires_locking$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   193: aload           _prev_bind_0
        //   195: aload_2
        //   196: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.rebind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   201: aload           7
        //   203: athrow
        //   204: aload           stream
        //   206: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject.isStream:()Z
        //   211: ifne            223
        //   214: getstatic       com/cyc/cycjava/cycl/dumper.$str152$Unable_to_open__S:Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLString;
        //   217: aload           filename_var
        //   219: invokestatic    com/cyc/tool/subl/jrtl/nativeCode/subLisp/Errors.error:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   222: pop
        //   223: aload           stream
        //   225: astore          stream_$190
        //   227: getstatic       com/cyc/cycjava/cycl/dumper.$kw202$OUTPUT:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   230: getstatic       com/cyc/cycjava/cycl/dumper.$kw151$INPUT:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   233: if_acmpne       243
        //   236: aload           stream_$190
        //   238: invokestatic    com/cyc/cycjava/cycl/file_utilities.enable_file_stream_memory_mapping:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   241: astore          stream_$190
        //   243: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   246: aload_2
        //   247: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.currentBinding:(Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   252: astore          _prev_bind_0
        //   254: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   257: getstatic       com/cyc/cycjava/cycl/dumper.T:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLT;
        //   260: aload_2
        //   261: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.bind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   266: invokestatic    com/cyc/tool/subl/jrtl/nativeCode/subLisp/Values.getValuesAsVector:()Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   269: astore          _values
        //   271: aload           stream_$190
        //   273: getstatic       com/cyc/cycjava/cycl/dumper.UNPROVIDED:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   276: invokestatic    com/cyc/tool/subl/jrtl/translatedCode/sublisp/streams_high.close:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   279: pop
        //   280: aload           _values
        //   282: invokestatic    com/cyc/tool/subl/jrtl/nativeCode/subLisp/Values.restoreValuesFromVector:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   285: pop
        //   286: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   289: aload           _prev_bind_0
        //   291: aload_2
        //   292: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.rebind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   297: goto            316
        //   300: astore          9
        //   302: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   305: aload           _prev_bind_0
        //   307: aload_2
        //   308: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.rebind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   313: aload           9
        //   315: athrow
        //   316: goto            397
        //   319: astore          10
        //   321: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   324: aload_2
        //   325: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.currentBinding:(Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   330: astore          _prev_bind_0
        //   332: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   335: getstatic       com/cyc/cycjava/cycl/dumper.T:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLT;
        //   338: aload_2
        //   339: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.bind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   344: invokestatic    com/cyc/tool/subl/jrtl/nativeCode/subLisp/Values.getValuesAsVector:()Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   347: astore          _values
        //   349: aload           stream_$190
        //   351: getstatic       com/cyc/cycjava/cycl/dumper.UNPROVIDED:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   354: invokestatic    com/cyc/tool/subl/jrtl/translatedCode/sublisp/streams_high.close:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   357: pop
        //   358: aload           _values
        //   360: invokestatic    com/cyc/tool/subl/jrtl/nativeCode/subLisp/Values.restoreValuesFromVector:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   363: pop
        //   364: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   367: aload           _prev_bind_0
        //   369: aload_2
        //   370: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.rebind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   375: goto            394
        //   378: astore          13
        //   380: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   383: aload           _prev_bind_0
        //   385: aload_2
        //   386: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.rebind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   391: aload           13
        //   393: athrow
        //   394: aload           10
        //   396: athrow
        //   397: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   400: aload_2
        //   401: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.currentBinding:(Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   406: astore          _prev_bind_0
        //   408: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   411: getstatic       com/cyc/cycjava/cycl/dumper.T:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLT;
        //   414: aload_2
        //   415: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.bind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   420: invokestatic    com/cyc/tool/subl/jrtl/nativeCode/subLisp/Values.getValuesAsVector:()Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   423: astore          _values
        //   425: aload           stream
        //   427: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject.isStream:()Z
        //   432: ifeq            444
        //   435: aload           stream
        //   437: getstatic       com/cyc/cycjava/cycl/dumper.UNPROVIDED:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   440: invokestatic    com/cyc/tool/subl/jrtl/translatedCode/sublisp/streams_high.close:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   443: pop
        //   444: aload           _values
        //   446: invokestatic    com/cyc/tool/subl/jrtl/nativeCode/subLisp/Values.restoreValuesFromVector:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   449: pop
        //   450: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   453: aload           _prev_bind_0
        //   455: aload_2
        //   456: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.rebind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   461: goto            480
        //   464: astore          14
        //   466: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   469: aload           _prev_bind_0
        //   471: aload_2
        //   472: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.rebind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   477: aload           14
        //   479: athrow
        //   480: goto            571
        //   483: astore          15
        //   485: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   488: aload_2
        //   489: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.currentBinding:(Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   494: astore          _prev_bind_0
        //   496: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   499: getstatic       com/cyc/cycjava/cycl/dumper.T:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLT;
        //   502: aload_2
        //   503: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.bind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   508: invokestatic    com/cyc/tool/subl/jrtl/nativeCode/subLisp/Values.getValuesAsVector:()Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   511: astore          _values
        //   513: aload           stream
        //   515: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject.isStream:()Z
        //   520: ifeq            532
        //   523: aload           stream
        //   525: getstatic       com/cyc/cycjava/cycl/dumper.UNPROVIDED:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   528: invokestatic    com/cyc/tool/subl/jrtl/translatedCode/sublisp/streams_high.close:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   531: pop
        //   532: aload           _values
        //   534: invokestatic    com/cyc/tool/subl/jrtl/nativeCode/subLisp/Values.restoreValuesFromVector:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   537: pop
        //   538: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   541: aload           _prev_bind_0
        //   543: aload_2
        //   544: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.rebind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   549: goto            568
        //   552: astore          18
        //   554: getstatic       com/cyc/tool/subl/jrtl/nativeCode/subLisp/Threads.$is_thread_performing_cleanupP$:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol;
        //   557: aload           _prev_bind_0
        //   559: aload_2
        //   560: invokeinterface com/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLSymbol.rebind:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;)V
        //   565: aload           18
        //   567: athrow
        //   568: aload           15
        //   570: athrow
        //   571: aload           filename_var
        //   573: invokestatic    com/cyc/cycjava/cycl/dumper.discard_dump_filename:(Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;)Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //   576: pop
        //   577: getstatic       com/cyc/cycjava/cycl/dumper.NIL:Lcom/cyc/tool/subl/jrtl/nativeCode/type/symbol/SubLNil;
        //   580: areturn
        //    LocalVariableTable:
        //  Start  Length  Slot  Name            Signature
        //  -----  ------  ----  --------------  --------------------------------------------------------
        //  152    52      6     _prev_bind_0    Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  271    15      8     _values         Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  254    62      7     _prev_bind_0    Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  349    15      12    _values         Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  332    62      11    _prev_bind_0    Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  227    170     6     stream_$190     Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  425    25      7     _values         Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  408    72      6     _prev_bind_0    Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  513    25      17    _values         Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  496    72      16    _prev_bind_0    Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  133    444     3     file            Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  136    441     4     filename_var    Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  141    436     5     stream          Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  15     566     2     thread          Lcom/cyc/tool/subl/jrtl/nativeCode/subLisp/SubLThread;
        //  0      581     0     directory_path  Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //  0      581     1     alexandriaP     Lcom/cyc/tool/subl/jrtl/nativeCode/type/core/SubLObject;
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type
        //  -----  -----  -----  -----  ----
        //  152    174    188    204    Any
        //  188    190    188    204    Any
        //  254    286    300    316    Any
        //  300    302    300    316    Any
        //  332    364    378    380    Any
        //  378    380    378    380    Any
        //  319    321    319    321    Any
        //  408    450    464    480    Any
        //  464    466    464    480    Any
        //  141    397    483    571    Any
        //  496    538    552    568    Any
        //  552    554    552    568    Any
        //  483    485    483    571    Any
        //
        // The error that occurred was:
        //
        // java.lang.IndexOutOfBoundsException: Index: 0, Size: 0
        //     at java.util.ArrayList.rangeCheck(ArrayList.java:653)
        //     at java.util.ArrayList.get(ArrayList.java:429)
        //     at com.strobel.decompiler.ast.AstBuilder.convertLocalVariables(AstBuilder.java:3035)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2445)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:210)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at org.sf.feeling.decompiler.actions.ExportSourceAction.exportPackageSources(ExportSourceAction.java:362)
        //     at org.sf.feeling.decompiler.actions.ExportSourceAction.access$0(ExportSourceAction.java:288)
        //     at org.sf.feeling.decompiler.actions.ExportSourceAction$1.run(ExportSourceAction.java:194)
        //     at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:119)
        //
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 51491L)
    public static SubLObject snapshot_computable_remaining_hl(final SubLObject directory_path, SubLObject alexandriaP) {
        if (alexandriaP == dumper.UNPROVIDED) {
            alexandriaP = (SubLObject)dumper.NIL;
        }
        if (dumper.NIL == alexandriaP) {
            snapshot_nart_hl_formulas(directory_path);
        }
        return dump_computable_remaining_hl_shared(directory_path, alexandriaP);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 51725L)
    public static SubLObject load_computable_remaining_hl(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.$str203$________Loading_computable_remain, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED));
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = utilities_macros.$structure_resourcing_make_static$.currentBinding(thread);
        final SubLObject _prev_bind_2 = cfasl.$cfasl_input_to_static_area$.currentBinding(thread);
        try {
            utilities_macros.$structure_resourcing_make_static$.bind((SubLObject)dumper.T, thread);
            cfasl.$cfasl_input_to_static_area$.bind((SubLObject)dumper.T, thread);
            final SubLObject _prev_bind_0_$191 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw204$NART_HL_FORMULAS, thread);
                load_nart_hl_formulas(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$191, thread);
            }
            final SubLObject _prev_bind_0_$192 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw205$MISC, thread);
                load_miscellaneous(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$192, thread);
            }
            final SubLObject _prev_bind_0_$193 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw206$SBHL_DATA, thread);
                load_sbhl_data(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$193, thread);
            }
            final SubLObject _prev_bind_0_$194 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw207$SBHL_CACHE, thread);
                load_sbhl_cache(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$194, thread);
            }
            final SubLObject _prev_bind_0_$195 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw208$CARDINALITY_ESTIMATES, thread);
                load_cardinality_estimates(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$195, thread);
            }
            final SubLObject _prev_bind_0_$196 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw209$ARG_TYPE_CACHE, thread);
                load_arg_type_cache(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$196, thread);
            }
            final SubLObject _prev_bind_0_$197 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw210$DEFNS_CACHE, thread);
                load_defns_cache(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$197, thread);
            }
            final SubLObject _prev_bind_0_$198 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw211$SOMEWHERE_CACHE, thread);
                load_somewhere_cache(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$198, thread);
            }
            final SubLObject _prev_bind_0_$199 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw212$ARITY_CACHE, thread);
                load_arity_cache(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$199, thread);
            }
            alexandria_iterators.clear_alexandria_caches();
            final SubLObject _prev_bind_0_$200 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw213$TVA_CACHE, thread);
                load_tva_cache(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$200, thread);
            }
            load_computable_remaining_hl_low_initializations();
            final SubLObject _prev_bind_0_$201 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw214$REFORMULATOR_RULES, thread);
                load_reformulator_rules(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$201, thread);
            }
            final SubLObject _prev_bind_0_$202 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw215$LEXICON_CACHE, thread);
                lexicon_cache.load_lexicon_cache(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$202, thread);
            }
            final SubLObject _prev_bind_0_$203 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw216$RTP_RULES, thread);
                load_rtp_rules_cache(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$203, thread);
            }
            final SubLObject _prev_bind_0_$204 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw217$PARAPHRASE_CACHE, thread);
                load_paraphrase_cycl_caches(directory_path);
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$204, thread);
            }
            final SubLObject _prev_bind_0_$205 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw218$ENGLISH_UOM, thread);
                load_english_units_of_measure(directory_path);
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$205, thread);
            }
            kb_load_gc_checkpoint();
            final SubLObject _prev_bind_0_$206 = kb_health_statistics.$kb_health_current_context$.currentBinding(thread);
            try {
                kb_health_statistics.$kb_health_current_context$.bind((SubLObject)dumper.$kw219$CAE_QUERY_SEARCH_TABLES, thread);
                load_cae_query_search_tables(directory_path);
                kb_load_gc_checkpoint();
            }
            finally {
                kb_health_statistics.$kb_health_current_context$.rebind(_prev_bind_0_$206, thread);
            }
        }
        finally {
            cfasl.$cfasl_input_to_static_area$.rebind(_prev_bind_2, thread);
            utilities_macros.$structure_resourcing_make_static$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 54645L)
    public static SubLObject rebuild_computable_remaining_hl(SubLObject rebuild_for_alexandriaP) {
        if (rebuild_for_alexandriaP == dumper.UNPROVIDED) {
            rebuild_for_alexandriaP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$207 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$208 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$207);
            final SubLObject memory_mappedP_$209 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$207);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$207);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$207);
                final SubLObject manager_$208 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$209 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$208);
                final SubLObject memory_mappedP_$210 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$208);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$208);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$208);
                    final SubLObject manager_$209 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$210 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$209);
                    final SubLObject memory_mappedP_$211 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$209);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$209);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$209);
                        final SubLObject manager_$210 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$211 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$210);
                        final SubLObject memory_mappedP_$212 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$210);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$210);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$210);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                rebuild_computable_remaining_hl_low(rebuild_for_alexandriaP);
                                load_computable_remaining_hl_low_initializations();
                                rebuild_computable_remaining_hl_high((SubLObject)dumper.UNPROVIDED);
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$211) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$210);
                                }
                                if (dumper.NIL == memory_mappedP_$212) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$210, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$210) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$209);
                            }
                            if (dumper.NIL == memory_mappedP_$211) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$209, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$209) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$208);
                        }
                        if (dumper.NIL == memory_mappedP_$210) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$208, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$208) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$207);
                    }
                    if (dumper.NIL == memory_mappedP_$209) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$207, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 55011L)
    public static SubLObject rebuild_computable_remaining_hl_low(SubLObject rebuild_for_alexandriaP) {
        if (rebuild_for_alexandriaP == dumper.UNPROVIDED) {
            rebuild_for_alexandriaP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$219 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$220 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$219);
            final SubLObject memory_mappedP_$221 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$219);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$219);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$219);
                final SubLObject manager_$220 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$221 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$220);
                final SubLObject memory_mappedP_$222 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$220);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$220);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$220);
                    final SubLObject manager_$221 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$222 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$221);
                    final SubLObject memory_mappedP_$223 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$221);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$221);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$221);
                        final SubLObject manager_$222 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$223 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$222);
                        final SubLObject memory_mappedP_$224 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$222);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$222);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$222);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                if (dumper.NIL == rebuild_for_alexandriaP) {
                                    narts_interface.rebuild_nart_hl_formulas();
                                }
                                arity.rebuild_arity_cache();
                                alexandria_iterators.clear_alexandria_caches();
                                somewhere_cache.rebuild_somewhere_cache();
                                alexandria_iterators.clear_alexandria_caches();
                                rebuild_sbhl_data();
                                alexandria_iterators.clear_alexandria_caches();
                                sbhl_link_methods.rebuild_non_fort_isa_tables();
                                alexandria_iterators.clear_alexandria_caches();
                                rebuild_sbhl_cache();
                                alexandria_iterators.clear_alexandria_caches();
                                cardinality_estimates.rebuild_cardinality_estimates();
                                alexandria_iterators.clear_alexandria_caches();
                                skolems.reset_skolem_defn_table((SubLObject)dumper.T, (SubLObject)dumper.NIL);
                                alexandria_iterators.clear_alexandria_caches();
                                rebuild_arg_type_cache();
                                alexandria_iterators.clear_alexandria_caches();
                                defns.rebuild_defns_cache();
                                alexandria_iterators.clear_alexandria_caches();
                                tva_cache.rebuild_tva_cache();
                                alexandria_iterators.clear_alexandria_caches();
                                if (dumper.NIL != kb_control_vars.reformulator_kb_loaded_p()) {
                                    reformulator_rule_unifier_datastructures.rebuild_reformulator_rules();
                                }
                                else {
                                    Errors.warn((SubLObject)dumper.$str220$Cannot_initialize_reformulator_du);
                                }
                                alexandria_iterators.clear_alexandria_caches();
                                if (dumper.NIL != kb_control_vars.lexicon_kb_loaded_p()) {
                                    lexicon_cache.initialize_lexicon_modules();
                                    if (dumper.NIL == lexicon_cache.lexicon_cache_builtP()) {
                                        lexicon_cache.rebuild_lexicon_cache();
                                    }
                                }
                                else {
                                    Errors.warn((SubLObject)dumper.$str221$Cannot_initialize_lexicon_cache_d);
                                }
                                alexandria_iterators.clear_alexandria_caches();
                                if (dumper.NIL != kb_control_vars.paraphrase_kb_loaded_p()) {
                                    alexandria_iterators.clear_alexandria_caches();
                                    pph_main.initialize_paraphrase_cycl();
                                }
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$223) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$222);
                                }
                                if (dumper.NIL == memory_mappedP_$224) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$222, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$222) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$221);
                            }
                            if (dumper.NIL == memory_mappedP_$223) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$221, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$221) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$220);
                        }
                        if (dumper.NIL == memory_mappedP_$222) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$220, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$220) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$219);
                    }
                    if (dumper.NIL == memory_mappedP_$221) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$219, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        alexandria_iterators.clear_alexandria_caches();
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 56736L)
    public static SubLObject rebuild_computable_remaining_hl_high(SubLObject rebuild_for_alexandriaP) {
        if (rebuild_for_alexandriaP == dumper.UNPROVIDED) {
            rebuild_for_alexandriaP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$231 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$232 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$231);
            final SubLObject memory_mappedP_$233 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$231);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$231);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$231);
                final SubLObject manager_$232 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$233 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$232);
                final SubLObject memory_mappedP_$234 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$232);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$232);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$232);
                    final SubLObject manager_$233 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$234 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$233);
                    final SubLObject memory_mappedP_$235 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$233);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$233);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$233);
                        final SubLObject manager_$234 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$235 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$234);
                        final SubLObject memory_mappedP_$236 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$234);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$234);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$234);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                if (dumper.NIL != kb_control_vars.lexicon_kb_loaded_p() && dumper.NIL != control_vars.lexicon_initialized_p()) {
                                    lexicon_subword_index.build_nl_trie_subword_index();
                                }
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$235) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$234);
                                }
                                if (dumper.NIL == memory_mappedP_$236) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$234, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$234) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$233);
                            }
                            if (dumper.NIL == memory_mappedP_$235) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$233, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$233) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$232);
                        }
                        if (dumper.NIL == memory_mappedP_$234) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$232, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$232) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$231);
                    }
                    if (dumper.NIL == memory_mappedP_$233) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$231, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 57536L)
    public static SubLObject rebuild_computable_but_not_dumpable_yet() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            format_nil.force_format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.$str222$________Rebuilding_computable_but, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        }
        final SubLObject _prev_bind_0 = wff_vars.$wff_memoization_state$.currentBinding(thread);
        try {
            wff_vars.$wff_memoization_state$.bind(wff_macros.possibly_new_wff_memoization_state(), thread);
            final SubLObject local_state = wff_vars.$wff_memoization_state$.getDynamicValue(thread);
            final SubLObject _prev_bind_0_$243 = memoization_state.$memoization_state$.currentBinding(thread);
            try {
                memoization_state.$memoization_state$.bind(local_state, thread);
                final SubLObject original_memoization_process = memoization_state.memoization_state_original_process(local_state);
                try {
                    if (dumper.NIL == wff_macros.within_wffP()) {
                        wff.reset_wff_state();
                    }
                    final SubLObject already_resourcing_p = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.getDynamicValue(thread);
                    final SubLObject _prev_bind_0_$244 = sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = sbhl_marking_vars.$resourced_sbhl_marking_spaces$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.currentBinding(thread);
                    try {
                        sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.bind(sbhl_marking_vars.determine_resource_limit(already_resourcing_p, (SubLObject)dumper.TWELVE_INTEGER), thread);
                        sbhl_marking_vars.$resourced_sbhl_marking_spaces$.bind(sbhl_marking_vars.possibly_new_marking_resource(already_resourcing_p), thread);
                        sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.bind((SubLObject)dumper.T, thread);
                        if (dumper.NIL != kb_control_vars.paraphrase_kb_loaded_p()) {
                            pph_main.ensure_pph_initialized();
                            kb_load_gc_checkpoint();
                        }
                        else {
                            Errors.warn((SubLObject)dumper.$str223$Cannot_initialize_paraphrase_code);
                        }
                        if (dumper.NIL != kb_control_vars.sksi_kb_loaded_p()) {
                            sksi_infrastructure_utilities.initialize_sksi_data_structures();
                            kb_load_gc_checkpoint();
                        }
                        else {
                            Errors.warn((SubLObject)dumper.$str224$Cannot_initialize_SKSI_due_to_mis);
                        }
                    }
                    finally {
                        sbhl_marking_vars.$resourcing_sbhl_marking_spaces_p$.rebind(_prev_bind_3, thread);
                        sbhl_marking_vars.$resourced_sbhl_marking_spaces$.rebind(_prev_bind_2, thread);
                        sbhl_marking_vars.$resourced_sbhl_marking_space_limit$.rebind(_prev_bind_0_$244, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$245 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        memoization_state.memoization_state_possibly_clear_original_process(local_state, original_memoization_process);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$245, thread);
                    }
                }
            }
            finally {
                memoization_state.$memoization_state$.rebind(_prev_bind_0_$243, thread);
            }
        }
        finally {
            wff_vars.$wff_memoization_state$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 59937L)
    public static SubLObject dump_copyright(final SubLObject stream) {
        return cfasl.cfasl_output(misc_utilities.copyright_notice(), stream);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 60052L)
    public static SubLObject kb_dump_stamp_file_vector_for_references(final SubLObject fvector) {
        return file_vector_utilities.stamp_file_vector_for_references(fvector, misc_utilities.copyright_notice(), (SubLObject)dumper.UNPROVIDED);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 60193L)
    public static SubLObject load_copyright(final SubLObject stream) {
        final SubLObject copyright = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        assert dumper.NIL != Types.stringp(copyright) : copyright;
        return copyright;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 60336L)
    public static SubLObject load_unit_file(final SubLObject dump_directory, final SubLObject filename, final SubLObject load_func, final SubLObject progress_message) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert dumper.NIL != Types.stringp(dump_directory) : dump_directory;
        assert dumper.NIL != Types.stringp(filename) : filename;
        assert dumper.NIL != Types.symbolp(load_func) : load_func;
        assert dumper.NIL != Types.stringp(progress_message) : progress_message;
        final SubLObject unit_file = kb_dump_file(filename, dump_directory, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(unit_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var = unit_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$246 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$246 = file_utilities.enable_file_stream_memory_mapping(stream_$246);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$246);
                    load_copyright(stream_$246);
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != progress_message) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(progress_message);
                        Functions.funcall(load_func, stream_$246);
                        if (cfasl.cfasl_input(stream_$246, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                            Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$246)), unit_file);
                        }
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$246, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 61259L)
    public static SubLObject dump_kb_object_count(final SubLObject directory_path, final SubLObject filename, final SubLObject count) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject count_file = filename_var = kb_dump_file(filename, directory_path, (SubLObject)dumper.$str201$text);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_text(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$247 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$247 = file_utilities.enable_file_stream_memory_mapping(stream_$247);
            }
            try {
                PrintLow.format(stream_$247, (SubLObject)dumper.$str228$_a__, count);
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$247, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 61504L)
    public static SubLObject load_kb_object_count(final SubLObject directory_path, final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)dumper.NIL;
        final SubLObject text_file = kb_dump_file(filename, directory_path, (SubLObject)dumper.$str201$text);
        if (dumper.NIL != verify_file_existence(text_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var = text_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_text(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$248 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$248 = file_utilities.enable_file_stream_memory_mapping(stream_$248);
                }
                try {
                    final SubLObject count = reader.read(stream_$248, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                    assert dumper.NIL != subl_promotions.non_negative_integer_p(count) : count;
                    result = count;
                }
                finally {
                    final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$248, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return result;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 61951L)
    public static SubLObject snapshot_kb_object_deleted_id_set(final SubLObject directory_path, final SubLObject filename, final SubLObject deleted_ids, SubLObject id_type) {
        if (id_type == dumper.UNPROVIDED) {
            id_type = (SubLObject)dumper.$str230$id;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject deleted_ids_file = kb_dump_file(filename, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == set.set_emptyP(deleted_ids)) {
            final SubLObject deletions = set.set_size(deleted_ids);
            final SubLObject modification = (SubLObject)(dumper.ONE_INTEGER.numE(deletions) ? dumper.$str231$_was : dumper.$str232$s_were);
            final SubLObject str;
            final SubLObject msg = str = Sequences.cconcatenate((SubLObject)dumper.$str233$Noting_that_, new SubLObject[] { format_nil.format_nil_d_no_copy(deletions), dumper.$str234$_, format_nil.format_nil_a_no_copy(id_type), format_nil.format_nil_a_no_copy(modification), dumper.$str235$_deleted });
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                cfasl_utilities.cfasl_save(deleted_ids, deleted_ids_file);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 62538L)
    public static SubLObject load_kb_object_deleted_id_set(final SubLObject directory_path, final SubLObject filename) {
        final SubLObject deleted_ids_file = kb_dump_file(filename, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != Filesys.probe_file(deleted_ids_file)) {
            final SubLObject deletes = cfasl_utilities.cfasl_load(deleted_ids_file);
            if (dumper.NIL != set.set_p(deletes)) {
                return deletes;
            }
            Errors.warn((SubLObject)dumper.$str236$Deleted_IDs_file__A_contained_no_, deleted_ids_file);
        }
        return set.new_set((SubLObject)dumper.EQL, (SubLObject)dumper.UNPROVIDED);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 62985L)
    public static SubLObject snapshot_changed_managed_objects(final SubLObject fvector, final SubLObject complex_fvector, final SubLObject muted_iterator, final SubLObject id_to_object_fn, final SubLObject snapshot_fn, final SubLObject message) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != message) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(message);
            final SubLObject data_stream = file_vector.get_file_vector_data_stream(fvector);
            final SubLObject complex_index_changes = set.new_set((SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
            SubLObject previous = (SubLObject)dumper.MINUS_ONE_INTEGER;
            final SubLObject _prev_bind_0_$249 = kb_indexing_datastructures.$changed_index_entry_hints$.currentBinding(thread);
            try {
                kb_indexing_datastructures.$changed_index_entry_hints$.bind(complex_index_changes, thread);
                SubLObject valid;
                for (SubLObject done_var = (SubLObject)dumper.NIL; dumper.NIL == done_var; done_var = (SubLObject)SubLObjectFactory.makeBoolean(dumper.NIL == valid)) {
                    thread.resetMultipleValues();
                    final SubLObject tuple = iteration.iteration_next(muted_iterator);
                    valid = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    if (dumper.NIL != valid) {
                        SubLObject current;
                        final SubLObject datum = current = tuple;
                        SubLObject id = (SubLObject)dumper.NIL;
                        SubLObject payload = (SubLObject)dumper.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list237);
                        id = current.first();
                        current = current.rest();
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list237);
                        payload = current.first();
                        current = current.rest();
                        if (dumper.NIL == current) {
                            if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread) && id.numL(previous)) {
                                Errors.warn((SubLObject)dumper.T, (SubLObject)dumper.$str238$__Dump_ID_regressed_from__A_to__A, previous, id);
                            }
                            previous = id;
                            final SubLObject v_object = Functions.funcall(id_to_object_fn, id);
                            file_vector.position_file_vector_index_for_update(fvector, id);
                            if (dumper.NIL != dumper.$dump_verbose_detail$.getDynamicValue(thread)) {
                                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str239$______writing__S____A__index__i_e, new SubLObject[] { v_object, id, streams_high.file_position(file_vector.get_file_vector_index_stream(fvector), (SubLObject)dumper.UNPROVIDED), streams_high.file_position(file_vector.get_file_vector_data_stream(fvector), (SubLObject)dumper.UNPROVIDED) });
                            }
                            file_vector.overwrite_file_vector_index(fvector);
                            final SubLObject _prev_bind_0_$250 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
                            try {
                                kb_health_statistics.$kb_health_current_sub_context$.bind(v_object, thread);
                                Functions.funcall(snapshot_fn, v_object, payload, data_stream, complex_fvector);
                            }
                            finally {
                                kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0_$250, thread);
                            }
                        }
                        else {
                            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list237);
                        }
                    }
                }
                if (dumper.NIL == set.set_emptyP(complex_index_changes)) {
                    final SubLObject change_iterator = iteration.new_list_iterator(Sort.sort(set.set_element_list(complex_index_changes), (SubLObject)dumper.$sym240$_, (SubLObject)dumper.UNPROVIDED));
                    snapshot_deleted_object_tombstones(complex_fvector, change_iterator, (SubLObject)dumper.$str241$____tombstoning_companion_complex);
                }
            }
            finally {
                kb_indexing_datastructures.$changed_index_entry_hints$.rebind(_prev_bind_0_$249, thread);
            }
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
        }
        return fvector;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 64707L)
    public static SubLObject snapshot_new_managed_objects(final SubLObject fvector, final SubLObject new_iterator, final SubLObject id_threshold, final SubLObject object_to_id_fn, final SubLObject snapshot_fn, final SubLObject message, SubLObject complex_fvector) {
        if (complex_fvector == dumper.UNPROVIDED) {
            complex_fvector = (SubLObject)dumper.$kw242$UNPROVIDED;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject expected_id = id_threshold;
        final SubLObject wide_fvectorP = file_vector.wide_file_vectorP(fvector);
        final SubLObject wide_complex_fvectorP = (SubLObject)((dumper.NIL != file_vector.file_vector_p(complex_fvector)) ? file_vector.wide_file_vectorP(complex_fvector) : dumper.NIL);
        final SubLObject data_stream = file_vector.get_file_vector_data_stream(fvector);
        file_vector.position_file_vector_index(fvector, expected_id);
        final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != message) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(message);
            SubLObject valid;
            for (SubLObject done_var = (SubLObject)dumper.NIL; dumper.NIL == done_var; done_var = (SubLObject)SubLObjectFactory.makeBoolean(dumper.NIL == valid)) {
                thread.resetMultipleValues();
                final SubLObject v_object = iteration.iteration_next(new_iterator);
                valid = thread.secondMultipleValue();
                thread.resetMultipleValues();
                if (dumper.NIL != valid) {
                    final SubLObject curr_id = Functions.funcall(object_to_id_fn, v_object);
                    if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && curr_id.numL(expected_id)) {
                        Errors.error((SubLObject)dumper.$str243$ID_ordering_regressed_from__A_to_, expected_id, curr_id);
                    }
                    while (expected_id.numL(curr_id)) {
                        if (dumper.NIL != dumper.$dump_verbose_detail$.getDynamicValue(thread)) {
                            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str244$______tombstoning____A__index__i_, expected_id, streams_high.file_position(file_vector.get_file_vector_index_stream(fvector), (SubLObject)dumper.UNPROVIDED));
                        }
                        file_vector.place_file_vector_index_tombstone_linear(fvector);
                        expected_id = Numbers.add(expected_id, (SubLObject)dumper.ONE_INTEGER);
                    }
                    if (dumper.NIL != dumper.$dump_verbose_detail$.getDynamicValue(thread)) {
                        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str245$______appending__S____A__index__i, new SubLObject[] { v_object, curr_id, streams_high.file_position(file_vector.get_file_vector_index_stream(fvector), (SubLObject)dumper.UNPROVIDED), streams_high.file_position(file_vector.get_file_vector_data_stream(fvector), (SubLObject)dumper.UNPROVIDED) });
                    }
                    file_vector.update_file_vector_index_linear(fvector);
                    if (dumper.NIL != file_vector.file_vector_p(complex_fvector)) {
                        Functions.funcall(snapshot_fn, v_object, data_stream, complex_fvector);
                        if (dumper.NIL == wide_complex_fvectorP && dumper.NIL != file_vector.wide_file_vectorP(complex_fvector)) {
                            Dynamic.sublisp_throw((SubLObject)dumper.$kw246$OVERFLOW, (SubLObject)dumper.$kw247$COMPLEX);
                        }
                    }
                    else {
                        Functions.funcall(snapshot_fn, v_object, data_stream);
                        if (dumper.NIL == wide_fvectorP && dumper.NIL != file_vector.wide_file_vectorP(fvector)) {
                            Dynamic.sublisp_throw((SubLObject)dumper.$kw246$OVERFLOW, (SubLObject)dumper.$kw248$FVECTOR);
                        }
                    }
                    expected_id = Numbers.add((SubLObject)dumper.ONE_INTEGER, curr_id);
                }
            }
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
        }
        return fvector;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 66839L)
    public static SubLObject snapshot_managed_object_simple_complex_index(final SubLObject snapshot_function, final SubLObject index_type, final SubLObject active_dir, final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject widen_fvectorP = (SubLObject)dumper.NIL;
        SubLObject widen_complexP = (SubLObject)dumper.NIL;
        SubLObject result = (SubLObject)dumper.NIL;
        SubLObject doneP = (SubLObject)dumper.NIL;
        while (dumper.NIL == doneP) {
            try {
                thread.throwStack.push(dumper.$kw246$OVERFLOW);
                Functions.funcall(snapshot_function, active_dir, directory_path, widen_fvectorP, widen_complexP);
            }
            catch (Throwable ccatch_env_var) {
                result = Errors.handleThrowable(ccatch_env_var, (SubLObject)dumper.$kw246$OVERFLOW);
            }
            finally {
                thread.throwStack.pop();
            }
            if (dumper.NIL == result) {
                doneP = (SubLObject)dumper.T;
            }
            else if (result == dumper.$kw248$FVECTOR) {
                if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && dumper.NIL != widen_fvectorP) {
                    Errors.error((SubLObject)dumper.$str249$Inconsistent_state____already_for, index_type);
                }
                widen_fvectorP = (SubLObject)dumper.T;
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str250$__Redoing__A_index_snap_shot_with, index_type);
            }
            else if (result == dumper.$kw247$COMPLEX) {
                if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && dumper.NIL != widen_complexP) {
                    Errors.error((SubLObject)dumper.$str251$Inconsistent_state____already_for, index_type);
                }
                widen_complexP = (SubLObject)dumper.T;
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str252$__Redoing__A_index_snap_shot_with, index_type);
            }
            else {
                Errors.error((SubLObject)dumper.$str253$Unexpected_snapshot_state__A_____, result, index_type);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 68123L)
    public static SubLObject snapshot_managed_object_simple_index(final SubLObject snapshot_function, final SubLObject type, final SubLObject active_dir, final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)dumper.NIL;
        try {
            thread.throwStack.push(dumper.$kw246$OVERFLOW);
            Functions.funcall(snapshot_function, active_dir, directory_path);
        }
        catch (Throwable ccatch_env_var) {
            result = Errors.handleThrowable(ccatch_env_var, (SubLObject)dumper.$kw246$OVERFLOW);
        }
        finally {
            thread.throwStack.pop();
        }
        if (dumper.NIL != list_utilities.sublisp_boolean(result)) {
            final SubLObject str = Sequences.cconcatenate((SubLObject)dumper.$str254$Redoing_, new SubLObject[] { format_nil.format_nil_a_no_copy(type), dumper.$str255$_snapshot_with_wide_index_____ });
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                Functions.funcall(snapshot_function, active_dir, directory_path, (SubLObject)dumper.$kw256$WIDEN_INDEX);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 68575L)
    public static SubLObject snapshot_deleted_object_tombstones(final SubLObject fvector, final SubLObject iterator, final SubLObject message) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL == minimal_tombstoning_modeP()) {
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != message) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(message);
                final SubLObject max_id = file_vector.file_vector_length(fvector);
                SubLObject valid;
                for (SubLObject done_var = (SubLObject)dumper.NIL; dumper.NIL == done_var; done_var = (SubLObject)SubLObjectFactory.makeBoolean(dumper.NIL == valid)) {
                    thread.resetMultipleValues();
                    final SubLObject id = iteration.iteration_next(iterator);
                    valid = thread.secondMultipleValue();
                    thread.resetMultipleValues();
                    if (dumper.NIL != valid && id.numL(max_id)) {
                        file_vector.position_file_vector_index_for_update(fvector, id);
                        file_vector.place_file_vector_index_tombstone(fvector);
                    }
                }
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        return fvector;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 69312L)
    public static SubLObject replicate_fv_dump_files(final SubLObject data_files, final SubLObject index_files, final SubLObject wide_mark_files, final SubLObject widen_flags, final SubLObject src_dir, final SubLObject target_dir, final SubLObject message) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject dump_files = (SubLObject)dumper.NIL;
        final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != message) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(message);
            SubLObject list_var = (SubLObject)dumper.NIL;
            SubLObject data_file = (SubLObject)dumper.NIL;
            SubLObject n = (SubLObject)dumper.NIL;
            list_var = data_files;
            data_file = list_var.first();
            for (n = (SubLObject)dumper.ZERO_INTEGER; dumper.NIL != list_var; list_var = list_var.rest(), data_file = list_var.first(), n = Numbers.add((SubLObject)dumper.ONE_INTEGER, n)) {
                dump_files = (SubLObject)ConsesLow.cons(replicate_one_dump_file(data_file, src_dir, target_dir, (SubLObject)dumper.UNPROVIDED), dump_files);
                final SubLObject index_file = ConsesLow.nth(n, index_files);
                final SubLObject wide_mark_file = ConsesLow.nth(n, wide_mark_files);
                final SubLObject widen_flag = ConsesLow.nth(n, widen_flags);
                thread.resetMultipleValues();
                final SubLObject new_index_file = replicate_one_index_file(index_file, wide_mark_file, widen_flag, src_dir, target_dir);
                final SubLObject new_wide_mark_file = thread.secondMultipleValue();
                thread.resetMultipleValues();
                dump_files = (SubLObject)ConsesLow.cons(new_index_file, dump_files);
                dump_files = (SubLObject)ConsesLow.cons(new_wide_mark_file, dump_files);
            }
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
        }
        return Sequences.nreverse(dump_files);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 70542L)
    public static SubLObject replicate_one_dump_file(final SubLObject file_name, final SubLObject src_dir, final SubLObject target_dir, SubLObject optional_file_p) {
        if (optional_file_p == dumper.UNPROVIDED) {
            optional_file_p = (SubLObject)dumper.NIL;
        }
        final SubLObject src_file = kb_dump_file(file_name, src_dir, (SubLObject)dumper.UNPROVIDED);
        final SubLObject trg_file = kb_dump_file(file_name, target_dir, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != Filesys.probe_file(src_file)) {
            file_utilities.copy_file_checked(src_file, trg_file);
        }
        else if (dumper.NIL == list_utilities.sublisp_boolean(optional_file_p)) {
            Errors.error((SubLObject)dumper.$str257$Cannot_find_required_file__A_, src_file);
        }
        return trg_file;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 70953L)
    public static SubLObject replicate_one_index_file(final SubLObject index_file, final SubLObject wide_mark_file, final SubLObject widen_flag, final SubLObject src_dir, final SubLObject target_dir) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject src_index_file = kb_dump_file(index_file, src_dir, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && dumper.NIL == Filesys.probe_file(src_index_file)) {
            Errors.error((SubLObject)dumper.$str257$Cannot_find_required_file__A_, src_index_file);
        }
        final SubLObject src_wide_mark_file = kb_dump_file(wide_mark_file, src_dir, (SubLObject)dumper.UNPROVIDED);
        final SubLObject src_wide_mark = file_vector.possibly_load_file_vector_wide_mark(src_wide_mark_file);
        final SubLObject trg_index_file = kb_dump_file(index_file, target_dir, (SubLObject)dumper.UNPROVIDED);
        final SubLObject trg_wide_mark_file = kb_dump_file(wide_mark_file, target_dir, (SubLObject)dumper.UNPROVIDED);
        if ((dumper.NIL == src_wide_mark && dumper.NIL != widen_flag) || dumper.NIL != subl_promotions.positive_integer_p(src_wide_mark)) {
            file_vector.widen_file_vector_index(trg_index_file, trg_wide_mark_file, src_index_file, (SubLObject)((dumper.NIL != list_utilities.sublisp_boolean(src_wide_mark)) ? src_wide_mark_file : dumper.NIL));
        }
        else {
            file_utilities.copy_file_checked(src_index_file, trg_index_file);
            if (dumper.NIL != list_utilities.sublisp_boolean(src_wide_mark)) {
                file_utilities.copy_file_checked(src_wide_mark_file, trg_wide_mark_file);
            }
        }
        return Values.values(trg_index_file, trg_wide_mark_file);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 75020L)
    public static SubLObject kb_dump_default_common_symbols() {
        return dumper.$kb_dump_default_common_symbols$.getGlobalValue();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 75253L)
    public static SubLObject kb_dump_common_symbols() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        return dumper.$kb_dump_common_symbols$.getDynamicValue(thread);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 75332L)
    public static SubLObject dump_special_objects(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject str = PrintLow.format((SubLObject)dumper.NIL, (SubLObject)dumper.$str259$Dumping_special_objects_at__A____, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED));
        final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(str);
            final SubLObject filename_var;
            final SubLObject special_objects_file = filename_var = kb_dump_file((SubLObject)dumper.$str260$special, directory_path, (SubLObject)dumper.UNPROVIDED);
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$251 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$251, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$252 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$252 = file_utilities.enable_file_stream_memory_mapping(stream_$252);
                }
                try {
                    dump_copyright(stream_$252);
                    dump_special_objects_internal(kb_dump_common_symbols(), stream_$252);
                }
                finally {
                    final SubLObject _prev_bind_0_$252 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$252, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$252, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$253 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$253, thread);
                }
            }
            discard_dump_filename(filename_var);
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 75758L)
    public static SubLObject dump_special_objects_internal(final SubLObject common_symbols, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols((SubLObject)dumper.NIL);
            cfasl.cfasl_output(common_symbols, stream);
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 75919L)
    public static SubLObject load_special_objects(final SubLObject directory_path, SubLObject load_from_alexandria_persistenceP) {
        if (load_from_alexandria_persistenceP == dumper.UNPROVIDED) {
            load_from_alexandria_persistenceP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != load_from_alexandria_persistenceP) {
            return kb_store_utils.load_alexandria_special_objects();
        }
        final SubLObject special_objects_file = kb_dump_file((SubLObject)dumper.$str260$special, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject ans = (SubLObject)dumper.NIL;
        if (dumper.NIL != verify_file_existence(special_objects_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject str = (SubLObject)dumper.$str261$Loading_special_objects____;
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                final SubLObject filename_var = special_objects_file;
                SubLObject stream = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_0_$255 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$255, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                    }
                    SubLObject stream_$256 = stream;
                    if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                        stream_$256 = file_utilities.enable_file_stream_memory_mapping(stream_$256);
                    }
                    try {
                        final SubLObject _prev_bind_0_$256 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
                        try {
                            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
                            cfasl.cfasl_set_common_symbols((SubLObject)dumper.NIL);
                            load_copyright(stream_$256);
                            ans = cfasl.cfasl_input(stream_$256, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        }
                        finally {
                            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0_$256, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$257 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            streams_high.close(stream_$256, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$257, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$258 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$258, thread);
                    }
                }
                discard_dump_filename(filename_var);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        return ans;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 76553L)
    public static SubLObject load_kb_product_shared_symbols(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)dumper.NIL;
        final SubLObject _prev_bind_0 = dumper.$dump_verbose$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            dumper.$dump_verbose$.bind((SubLObject)dumper.NIL, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)dumper.T, thread);
            result = load_special_objects(directory_path, (SubLObject)dumper.UNPROVIDED);
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_2, thread);
            dumper.$dump_verbose$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 76963L)
    public static SubLObject setup_kb_state_from_dump(final SubLObject directory_path) {
        final SubLObject constant_count = load_constant_count(directory_path);
        final SubLObject nart_count = load_nart_count(directory_path);
        final SubLObject assertion_count = load_assertion_count(directory_path);
        final SubLObject deduction_count = load_deduction_count(directory_path);
        final SubLObject kb_hl_support_count = load_kb_hl_support_count(directory_path);
        final SubLObject clause_struc_count = load_clause_struc_count(directory_path);
        final SubLObject kb_unrepresented_term_count = load_kb_unrepresented_term_count(directory_path);
        assert dumper.NIL != Types.integerp(constant_count) : constant_count;
        if (dumper.NIL != nart_count && dumper.NIL != assertion_count && dumper.NIL != deduction_count && dumper.NIL != kb_hl_support_count && dumper.NIL != clause_struc_count) {
            kb_utilities.setup_kb_tables_int((SubLObject)dumper.T, constant_count, nart_count, assertion_count, deduction_count, kb_hl_support_count, clause_struc_count, kb_unrepresented_term_count);
            kb_utilities.clear_kb_state_int();
        }
        else {
            kb_utilities.clear_kb_state(constant_count);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 78189L)
    public static SubLObject get_exclusive_constant_internal_id_limit_for_kb(final SubLObject directory_path) {
        final SubLObject count = load_constant_count(directory_path);
        return count;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 78477L)
    public static SubLObject dump_constant_shells(final SubLObject directory_path) {
        dump_kb_object_count(directory_path, (SubLObject)dumper.$str263$constant_count, constant_handles.constant_count());
        dump_constant_shells_int(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 78715L)
    public static SubLObject dump_constant_shells_int(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject constant_shell_file = filename_var = kb_dump_file((SubLObject)dumper.$str264$constant_shell, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$260 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$260 = file_utilities.enable_file_stream_memory_mapping(stream_$260);
            }
            try {
                dump_copyright(stream_$260);
                cfasl.cfasl_output(constant_handles.constant_count(), stream_$260);
                final SubLObject idx = constant_handles.do_constants_table();
                final SubLObject mess = (SubLObject)dumper.$str265$Dumping_constant_shells;
                final SubLObject total = id_index.id_index_count(idx);
                SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                assert dumper.NIL != Types.stringp(mess) : mess;
                final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                try {
                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                    try {
                        utilities_macros.noting_percent_progress_preamble(mess);
                        final SubLObject idx_$261 = idx;
                        if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$261, (SubLObject)dumper.$kw266$SKIP)) {
                            final SubLObject idx_$262 = idx_$261;
                            if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$262, (SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject vector_var = id_index.id_index_dense_objects(idx_$262);
                                final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                SubLObject length;
                                SubLObject v_iteration;
                                SubLObject id;
                                SubLObject constant;
                                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                    id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                    constant = Vectors.aref(vector_var, id);
                                    if (dumper.NIL == id_index.id_index_tombstone_p(constant) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                        if (dumper.NIL != id_index.id_index_tombstone_p(constant)) {
                                            constant = (SubLObject)dumper.$kw266$SKIP;
                                        }
                                        dump_constant_shell(constant, stream_$260);
                                        sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                }
                            }
                            final SubLObject idx_$263 = idx_$261;
                            if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$263) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject sparse = id_index.id_index_sparse_objects(idx_$263);
                                SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$263);
                                final SubLObject end_id = id_index.id_index_next_id(idx_$263);
                                final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                while (id2.numL(end_id)) {
                                    final SubLObject constant2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                    if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(constant2)) {
                                        dump_constant_shell(constant2, stream_$260);
                                        sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                    id2 = Numbers.add(id2, (SubLObject)dumper.ONE_INTEGER);
                                }
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$264 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            utilities_macros.noting_percent_progress_postamble();
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$264, thread);
                        }
                    }
                }
                finally {
                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    streams_high.close(stream_$260, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values3 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values3);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 79362L)
    public static SubLObject snapshot_constant_shells(final SubLObject directory_path) {
        dump_kb_object_count(directory_path, (SubLObject)dumper.$str263$constant_count, constant_handles.next_constant_suid());
        dump_constant_shells_int(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 79609L)
    public static SubLObject snapshot_deleted_constant_set(final SubLObject directory_path) {
        return snapshot_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str267$deleted_constant_ids, constant_handles.missing_constant_id_set(), (SubLObject)dumper.$str158$constant);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 79955L)
    public static SubLObject has_deleted_constant_id_setP(final SubLObject directory_path) {
        return Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str267$deleted_constant_ids, directory_path, (SubLObject)dumper.UNPROVIDED));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 80093L)
    public static SubLObject load_constant_count(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject count = load_kb_object_count(directory_path, (SubLObject)dumper.$str263$constant_count);
        if (dumper.NIL != count) {
            return Values.values(count, (SubLObject)dumper.T);
        }
        SubLObject result = (SubLObject)dumper.NIL;
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str264$constant_shell, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$265 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$265 = file_utilities.enable_file_stream_memory_mapping(stream_$265);
                }
                try {
                    load_copyright(stream_$265);
                    final SubLObject constant_count = result = cfasl.cfasl_input(stream_$265, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                }
                finally {
                    final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$265, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return Values.values(result, (SubLObject)dumper.NIL);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 80996L)
    public static SubLObject load_constant_shells(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str264$constant_shell, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$266 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$266 = file_utilities.enable_file_stream_memory_mapping(stream_$266);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$266);
                    load_copyright(stream_$266);
                    final SubLObject constant_count = cfasl.cfasl_input(stream_$266, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str268$Loading_constant_shells);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$266, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$266, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$266), total);
                                if (dump_id.isInteger()) {
                                    load_constant_shell(dump_id, stream_$266);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$267 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$267, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$266, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        thread.resetMultipleValues();
        final SubLObject constant_count2 = load_constant_count(directory_path);
        final SubLObject exactP = thread.secondMultipleValue();
        thread.resetMultipleValues();
        constant_handles.finalize_constants((SubLObject)((dumper.NIL != exactP) ? Numbers.subtract(constant_count2, (SubLObject)dumper.ONE_INTEGER) : dumper.NIL));
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 82204L)
    public static SubLObject debug_map_constant_shell_file_position_to_constant_id(final SubLObject directory_path, final SubLObject filepos) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str264$constant_shell, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject id = (SubLObject)dumper.MINUS_ONE_INTEGER;
        SubLObject name = (SubLObject)dumper.NIL;
        SubLObject guid = (SubLObject)dumper.NIL;
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$268 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$268 = file_utilities.enable_file_stream_memory_mapping(stream_$268);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$268);
                    if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && !filepos.numL(total)) {
                        Errors.error((SubLObject)dumper.$str269$The_specified_file_position__A_is, filepos, cfasl_file, total);
                    }
                    load_copyright(stream_$268);
                    final SubLObject constant_count = cfasl.cfasl_input(stream_$268, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                    final SubLObject currpos = compatibility.get_file_position(stream_$268);
                    if (filepos.numL(currpos)) {
                        Errors.error((SubLObject)dumper.$str270$_A_lies_within_the_file_header__0, filepos, currpos);
                    }
                    SubLObject dump_id;
                    for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$268, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF && dumper.NIL == subl_promotions.non_negative_integer_p(id); dump_id = cfasl.cfasl_input(stream_$268, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                        name = cfasl.cfasl_input(stream_$268, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        guid = cfasl.cfasl_input(stream_$268, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        if (filepos.numL(compatibility.get_file_position(stream_$268))) {
                            id = dump_id;
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$268, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        if (dumper.NIL != subl_promotions.non_negative_integer_p(id)) {
            Errors.warn((SubLObject)dumper.$str271$_A_specifies_a_file_position_in_t, new SubLObject[] { filepos, name, id, guid });
            return id;
        }
        Errors.error((SubLObject)dumper.$str272$_A_should_have_been_found_but_was, filepos);
        return (SubLObject)dumper.MINUS_ONE_INTEGER;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 83933L)
    public static SubLObject dump_constant_shell(final SubLObject constant, final SubLObject stream) {
        final SubLObject dump_id = constants_high.constant_dump_id(constant);
        final SubLObject name = constants_high.constant_dump_name(constant);
        final SubLObject guid = constants_high.constant_guid(constant);
        dump_constant_shell_internal(stream, dump_id, name, guid);
        return constant;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 84204L)
    public static SubLObject dump_constant_shell_internal(final SubLObject stream, final SubLObject dump_id, final SubLObject name, final SubLObject guid) {
        cfasl.cfasl_output(dump_id, stream);
        cfasl.cfasl_output(name, stream);
        cfasl.cfasl_output(guid, stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 84386L)
    public static SubLObject load_constant_shell(final SubLObject dump_id, final SubLObject stream) {
        final SubLObject name = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        final SubLObject guid = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        return load_constant_shell_internal(dump_id, name, guid);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 84569L)
    public static SubLObject load_constant_shell_internal(final SubLObject dump_id, final SubLObject name, final SubLObject guid) {
        final SubLObject constant = constant_handles.make_constant_shell(name, (SubLObject)dumper.T);
        constants_low.load_install_constant_ids(constant, dump_id, guid);
        return constant;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 84760L)
    public static SubLObject generate_constant_shell_file(final SubLObject directory) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        assert dumper.NIL != Types.stringp(directory) : directory;
        final SubLObject filename_var;
        final SubLObject constant_shell_file = filename_var = kb_dump_file((SubLObject)dumper.$str264$constant_shell, directory, (SubLObject)dumper.$str201$text);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_text(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$269 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$269 = file_utilities.enable_file_stream_memory_mapping(stream_$269);
            }
            try {
                streams_high.write_char((SubLObject)Characters.CHAR_space, stream_$269);
                print_high.prin1(misc_utilities.copyright_notice(), stream_$269);
                streams_high.terpri(stream_$269);
                streams_high.write_char((SubLObject)Characters.CHAR_space, stream_$269);
                print_high.prin1(constant_handles.constant_count(), stream_$269);
                streams_high.terpri(stream_$269);
                final SubLObject idx = constant_handles.do_constants_table();
                final SubLObject mess = (SubLObject)dumper.$str265$Dumping_constant_shells;
                final SubLObject total = id_index.id_index_count(idx);
                SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                assert dumper.NIL != Types.stringp(mess) : mess;
                final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                try {
                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                    try {
                        utilities_macros.noting_percent_progress_preamble(mess);
                        final SubLObject idx_$270 = idx;
                        if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$270, (SubLObject)dumper.$kw266$SKIP)) {
                            final SubLObject idx_$271 = idx_$270;
                            if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$271, (SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject vector_var = id_index.id_index_dense_objects(idx_$271);
                                final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                SubLObject length;
                                SubLObject v_iteration;
                                SubLObject id;
                                SubLObject constant;
                                SubLObject name;
                                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                    id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                    constant = Vectors.aref(vector_var, id);
                                    if (dumper.NIL == id_index.id_index_tombstone_p(constant) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                        if (dumper.NIL != id_index.id_index_tombstone_p(constant)) {
                                            constant = (SubLObject)dumper.$kw266$SKIP;
                                        }
                                        name = constants_high.constant_dump_name(constant);
                                        if (name.isString()) {
                                            print_high.prin1(name, stream_$269);
                                            streams_high.write_char((SubLObject)Characters.CHAR_space, stream_$269);
                                        }
                                        print_high.prin1(constants_high.constant_dump_id(constant), stream_$269);
                                        streams_high.terpri(stream_$269);
                                        sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                }
                            }
                            final SubLObject idx_$272 = idx_$270;
                            if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$272) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject sparse = id_index.id_index_sparse_objects(idx_$272);
                                SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$272);
                                final SubLObject end_id = id_index.id_index_next_id(idx_$272);
                                final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                while (id2.numL(end_id)) {
                                    final SubLObject constant2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                    if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(constant2)) {
                                        final SubLObject name2 = constants_high.constant_dump_name(constant2);
                                        if (name2.isString()) {
                                            print_high.prin1(name2, stream_$269);
                                            streams_high.write_char((SubLObject)Characters.CHAR_space, stream_$269);
                                        }
                                        print_high.prin1(constants_high.constant_dump_id(constant2), stream_$269);
                                        streams_high.terpri(stream_$269);
                                        sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                    id2 = Numbers.add(id2, (SubLObject)dumper.ONE_INTEGER);
                                }
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$273 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            utilities_macros.noting_percent_progress_postamble();
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$273, thread);
                        }
                    }
                }
                finally {
                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    streams_high.close(stream_$269, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values3 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values3);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 85787L)
    public static SubLObject get_exclusive_nart_internal_id_limit_for_kb(final SubLObject directory_path) {
        final SubLObject count = load_nart_count(directory_path);
        return count;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 86051L)
    public static SubLObject dump_nart_count(final SubLObject directory_path) {
        return dump_kb_object_count(directory_path, (SubLObject)dumper.$str273$nart_count, nart_handles.nart_count());
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 86174L)
    public static SubLObject snapshot_nart_count(final SubLObject directory_path) {
        return dump_kb_object_count(directory_path, (SubLObject)dumper.$str273$nart_count, nart_handles.next_nart_id());
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 86303L)
    public static SubLObject snapshot_deleted_nart_id_set(final SubLObject directory_path) {
        return snapshot_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str274$deleted_nart_ids, nart_handles.missing_nart_id_set(), (SubLObject)dumper.$str275$NART);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 86483L)
    public static SubLObject load_nart_shells(final SubLObject directory_path) {
        final SubLObject nart_count = load_nart_count(directory_path);
        final SubLObject deleted_narts = load_deleted_nart_id_set(directory_path);
        if (dumper.NIL != nart_count) {
            initialize_nart_shells(nart_count, deleted_narts);
        }
        else {
            load_nart_shells_legacy(directory_path);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 86799L)
    public static SubLObject load_nart_count(final SubLObject directory_path) {
        return load_kb_object_count(directory_path, (SubLObject)dumper.$str273$nart_count);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 86918L)
    public static SubLObject load_deleted_nart_id_set(final SubLObject directory_path) {
        return load_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str274$deleted_nart_ids);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 87052L)
    public static SubLObject has_deleted_nart_id_setP(final SubLObject directory_path) {
        return Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str274$deleted_nart_ids, directory_path, (SubLObject)dumper.UNPROVIDED));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 87182L)
    public static SubLObject initialize_nart_shells(final SubLObject nart_count, final SubLObject deleted_nart_ids) {
        SubLObject id;
        for (id = (SubLObject)dumper.NIL, id = (SubLObject)dumper.ZERO_INTEGER; id.numL(nart_count); id = Numbers.add(id, (SubLObject)dumper.ONE_INTEGER)) {
            if (dumper.NIL == set.set_memberP(id, deleted_nart_ids)) {
                nart_handles.make_nart_shell(id);
            }
        }
        return nart_handles.finalize_narts(Numbers.subtract(nart_count, (SubLObject)dumper.ONE_INTEGER));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 87431L)
    public static SubLObject load_nart_shells_legacy(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str276$nat_shell, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$274 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$274 = file_utilities.enable_file_stream_memory_mapping(stream_$274);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$274);
                    load_copyright(stream_$274);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str277$Loading_NART_shells);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$274, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$274, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$274), total);
                                if (dump_id.isInteger()) {
                                    load_nart_shell(dump_id, stream_$274);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$275 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$275, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$274, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        nart_handles.finalize_narts((SubLObject)dumper.UNPROVIDED);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 88118L)
    public static SubLObject dump_nart_shell(final SubLObject nart, final SubLObject stream) {
        cfasl.cfasl_output(narts_high.nart_dump_id(nart), stream);
        return nart;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 88223L)
    public static SubLObject load_nart_shell(final SubLObject dump_id, final SubLObject stream) {
        return nart_handles.make_nart_shell(dump_id);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 88362L)
    public static SubLObject get_exclusive_assertion_internal_id_limit_for_kb(final SubLObject directory_path) {
        final SubLObject count = load_assertion_count(directory_path);
        return count;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 88656L)
    public static SubLObject dump_assertion_count(final SubLObject directory_path) {
        return dump_kb_object_count(directory_path, (SubLObject)dumper.$str278$assertion_count, assertion_handles.assertion_count());
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 88794L)
    public static SubLObject snapshot_assertion_count(final SubLObject directory_path) {
        return dump_kb_object_count(directory_path, (SubLObject)dumper.$str278$assertion_count, assertion_handles.next_assertion_id());
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 88938L)
    public static SubLObject snapshot_deleted_assertion_id_set(final SubLObject directory_path) {
        return snapshot_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str279$deleted_assertion_ids, assertion_handles.missing_assertion_id_set(), (SubLObject)dumper.$str168$assertion);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 89138L)
    public static SubLObject load_assertion_shells(final SubLObject directory_path) {
        final SubLObject assertion_count = load_assertion_count(directory_path);
        final SubLObject deleted_assertion_ids = load_deleted_assertion_id_set(directory_path);
        if (dumper.NIL != assertion_count) {
            initialize_assertion_shells(assertion_count, deleted_assertion_ids);
        }
        else {
            load_assertion_shells_legacy(directory_path);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 89513L)
    public static SubLObject load_assertion_count(final SubLObject directory_path) {
        return load_kb_object_count(directory_path, (SubLObject)dumper.$str278$assertion_count);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 89642L)
    public static SubLObject load_deleted_assertion_id_set(final SubLObject directory_path) {
        return load_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str279$deleted_assertion_ids);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 89786L)
    public static SubLObject has_deleted_assertion_id_setP(final SubLObject directory_path) {
        return Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str279$deleted_assertion_ids, directory_path, (SubLObject)dumper.UNPROVIDED));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 89926L)
    public static SubLObject initialize_assertion_shells(final SubLObject assertion_count, final SubLObject deleted_assertion_ids) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject str = (SubLObject)dumper.$str280$Enabling_lazy_assertion_handle_su;
        final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(str);
            assertion_handles.mark_available_assertions(assertion_count, deleted_assertion_ids);
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
        }
        assertion_handles.finalize_assertions(Numbers.subtract(assertion_count, (SubLObject)dumper.ONE_INTEGER));
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 90238L)
    public static SubLObject load_assertion_shells_legacy(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str281$assertion_shell, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$276 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$276 = file_utilities.enable_file_stream_memory_mapping(stream_$276);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$276);
                    load_copyright(stream_$276);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str282$Loading_assertion_shells);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$276, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$276, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$276), total);
                                if (dump_id.isInteger()) {
                                    load_assertion_shell(dump_id, stream_$276);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$277 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$277, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$276, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        assertion_handles.finalize_assertions((SubLObject)dumper.UNPROVIDED);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 90951L)
    public static SubLObject dump_assertion_shell(final SubLObject assertion, final SubLObject stream) {
        cfasl.cfasl_output(assertions_high.assertion_dump_id(assertion), stream);
        return assertion;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 91081L)
    public static SubLObject load_assertion_shell(final SubLObject dump_id, final SubLObject stream) {
        return assertion_handles.make_assertion_shell(dump_id);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 91235L)
    public static SubLObject get_exclusive_kb_hl_support_internal_id_limit_for_kb(final SubLObject directory_path) {
        final SubLObject count = load_kb_hl_support_count(directory_path);
        return count;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 91553L)
    public static SubLObject dump_kb_hl_support_count(final SubLObject directory_path) {
        return dump_kb_object_count(directory_path, (SubLObject)dumper.$str283$kb_hl_support_count, kb_hl_support_handles.kb_hl_support_count());
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 91703L)
    public static SubLObject snapshot_kb_hl_support_count(final SubLObject directory_path) {
        return dump_kb_object_count(directory_path, (SubLObject)dumper.$str283$kb_hl_support_count, kb_hl_support_handles.next_kb_hl_support_id());
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 91859L)
    public static SubLObject snapshot_deleted_kb_hl_support_id_set(final SubLObject directory_path) {
        return snapshot_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str284$deleted_kb_hl_support_ids, kb_hl_support_handles.missing_kb_hl_support_id_set(), (SubLObject)dumper.$str285$KB_HL_support);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 92083L)
    public static SubLObject load_kb_hl_support_shells(final SubLObject directory_path) {
        final SubLObject kb_hl_support_count = load_kb_hl_support_count(directory_path);
        final SubLObject deleted_hl_support_ids = load_deleted_kb_hl_support_id_set(directory_path);
        if (dumper.NIL != kb_hl_support_count) {
            initialize_kb_hl_support_shells(kb_hl_support_count, deleted_hl_support_ids);
        }
        else {
            load_kb_hl_support_shells_legacy(directory_path);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 92489L)
    public static SubLObject load_kb_hl_support_count(final SubLObject directory_path) {
        return load_kb_object_count(directory_path, (SubLObject)dumper.$str283$kb_hl_support_count);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 92628L)
    public static SubLObject load_deleted_kb_hl_support_id_set(final SubLObject directory_path) {
        return load_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str284$deleted_kb_hl_support_ids);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 92780L)
    public static SubLObject has_deleted_kb_hl_support_id_setP(final SubLObject directory_path) {
        return Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str284$deleted_kb_hl_support_ids, directory_path, (SubLObject)dumper.UNPROVIDED));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 92928L)
    public static SubLObject initialize_kb_hl_support_shells(final SubLObject kb_hl_support_count, final SubLObject deleted_kb_hl_support_ids) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject str = (SubLObject)dumper.$str286$Enabling_lazy_KB_HL_support_handl;
        final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(str);
            kb_hl_support_handles.mark_available_kb_hl_supports(kb_hl_support_count, deleted_kb_hl_support_ids);
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
        }
        return kb_hl_support_handles.finalize_kb_hl_supports(Numbers.subtract(kb_hl_support_count, (SubLObject)dumper.ONE_INTEGER));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 93233L)
    public static SubLObject load_kb_hl_support_shells_legacy(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str287$kb_hl_support_shell, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$278 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$278 = file_utilities.enable_file_stream_memory_mapping(stream_$278);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$278);
                    load_copyright(stream_$278);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str288$Loading_KB_HL_support_shells);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$278, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$278, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$278), total);
                                if (dump_id.isInteger()) {
                                    load_kb_hl_support_shell(dump_id, stream_$278);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$279 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$279, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$278, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        kb_hl_support_handles.finalize_kb_hl_supports((SubLObject)dumper.UNPROVIDED);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 93968L)
    public static SubLObject dump_kb_hl_support_shell(final SubLObject kb_hl_support, final SubLObject stream) {
        cfasl.cfasl_output(kb_hl_supports_high.kb_hl_support_dump_id(kb_hl_support), stream);
        return kb_hl_support;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 94118L)
    public static SubLObject load_kb_hl_support_shell(final SubLObject dump_id, final SubLObject stream) {
        return kb_hl_support_handles.make_kb_hl_support_shell(dump_id);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 94286L)
    public static SubLObject get_exclusive_kb_unrepresented_term_internal_id_limit_for_kb(final SubLObject directory_path) {
        final SubLObject count = load_kb_unrepresented_term_count(directory_path);
        return count;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 94634L)
    public static SubLObject dump_kb_unrepresented_terms(final SubLObject directory_path) {
        dump_kb_object_count(directory_path, (SubLObject)dumper.$str289$unrepresented_term_count, unrepresented_terms.kb_unrepresented_term_count());
        dump_kb_unrepresented_terms_int(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 94917L)
    public static SubLObject dump_kb_unrepresented_terms_int(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject unrepresented_terms_file = kb_dump_file((SubLObject)dumper.$str290$unrepresented_terms, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var = unrepresented_terms_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$280 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$280, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$281 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$281 = file_utilities.enable_file_stream_memory_mapping(stream_$281);
                }
                try {
                    dump_copyright(stream_$281);
                    if (dumper.NIL != unrepresented_terms.use_unrepresented_term_fhtP()) {
                        SubLObject msg = Sequences.cconcatenate((SubLObject)dumper.$str291$Dumping_KB_unrepresented_terms, (SubLObject)dumper.$str292$____Old_Space);
                        SubLObject release = (SubLObject)dumper.NIL;
                        try {
                            release = Locks.seize_lock(unrepresented_terms.$unrepresented_term_fht_lock$.getGlobalValue());
                            final SubLObject table_var = unrepresented_terms.get_unrepresented_term_fht();
                            utilities_macros.$progress_note$.setDynamicValue(msg, thread);
                            utilities_macros.$progress_start_time$.setDynamicValue(Time.get_universal_time(), thread);
                            utilities_macros.$progress_total$.setDynamicValue(file_hash_table.file_hash_table_count(table_var), thread);
                            utilities_macros.$progress_sofar$.setDynamicValue((SubLObject)dumper.ZERO_INTEGER, thread);
                            final SubLObject _prev_bind_0_$281 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$283 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                            try {
                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                try {
                                    utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                    SubLObject continuation = (SubLObject)dumper.NIL;
                                    SubLObject next;
                                    for (SubLObject completeP = (SubLObject)dumper.NIL; dumper.NIL == completeP; completeP = Types.sublisp_null(next)) {
                                        thread.resetMultipleValues();
                                        final SubLObject the_key = file_hash_table.get_file_hash_table_any(table_var, continuation, (SubLObject)dumper.NIL);
                                        final SubLObject the_value = thread.secondMultipleValue();
                                        next = thread.thirdMultipleValue();
                                        thread.resetMultipleValues();
                                        if (dumper.NIL != next) {
                                            final SubLObject key = the_key;
                                            final SubLObject v_term = the_value;
                                            utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                            utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)dumper.ONE_INTEGER), thread);
                                            if (dumper.NIL == unrepresented_terms.deleted_unrepresented_term_itemP(key) && dumper.NIL != unrepresented_terms.fht_suid_item_p(key)) {
                                                final SubLObject id = unrepresented_terms.get_fht_suid_item_suid(key);
                                                dump_kb_unrepresented_term(v_term, stream_$281);
                                            }
                                        }
                                        continuation = next;
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$282 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values = Values.getValuesAsVector();
                                        utilities_macros.noting_percent_progress_postamble();
                                        Values.restoreValuesFromVector(_values);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$282, thread);
                                    }
                                }
                            }
                            finally {
                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$283, thread);
                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$281, thread);
                            }
                        }
                        finally {
                            if (dumper.NIL != release) {
                                Locks.release_lock(unrepresented_terms.$unrepresented_term_fht_lock$.getGlobalValue());
                            }
                        }
                        msg = Sequences.cconcatenate((SubLObject)dumper.$str291$Dumping_KB_unrepresented_terms, (SubLObject)dumper.$str293$____New_Space);
                        if (dumper.NIL != unrepresented_terms.use_unrepresented_term_fhtP()) {
                            final SubLObject list_var = unrepresented_terms.get_unrepresented_term_new_space_ascending_suid_keys();
                            final SubLObject _prev_bind_0_$283 = utilities_macros.$progress_note$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$284 = utilities_macros.$progress_start_time$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
                            final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                            final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                            final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                            final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                            try {
                                utilities_macros.$progress_note$.bind((SubLObject)((dumper.NIL != msg) ? msg : dumper.$str63$cdolist), thread);
                                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                                utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
                                utilities_macros.$progress_sofar$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                try {
                                    utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                    SubLObject csome_list_var = list_var;
                                    SubLObject suid_item = (SubLObject)dumper.NIL;
                                    suid_item = csome_list_var.first();
                                    while (dumper.NIL != csome_list_var) {
                                        final SubLObject id2 = unrepresented_terms.get_fht_suid_item_suid(suid_item);
                                        final SubLObject v_term2 = unrepresented_terms.find_unrepresented_term_by_suid(id2);
                                        dump_kb_unrepresented_term(v_term2, stream_$281);
                                        utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)dumper.ONE_INTEGER), thread);
                                        utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                        csome_list_var = csome_list_var.rest();
                                        suid_item = csome_list_var.first();
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$284 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values2 = Values.getValuesAsVector();
                                        utilities_macros.noting_percent_progress_postamble();
                                        Values.restoreValuesFromVector(_values2);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$284, thread);
                                    }
                                }
                            }
                            finally {
                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                                utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                                utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
                                utilities_macros.$progress_start_time$.rebind(_prev_bind_1_$284, thread);
                                utilities_macros.$progress_note$.rebind(_prev_bind_0_$283, thread);
                            }
                        }
                        else {
                            final SubLObject table_var = unrepresented_terms.do_unrepresented_terms_table();
                            final SubLObject first_id_var = unrepresented_terms.new_unrepresented_term_id_threshold();
                            final SubLObject total = Numbers.subtract(id_index.id_index_next_id(table_var), first_id_var);
                            SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                            final SubLObject _prev_bind_0_$285 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                            final SubLObject _prev_bind_1_$285 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                            final SubLObject _prev_bind_9 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                            final SubLObject _prev_bind_10 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                            try {
                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                try {
                                    utilities_macros.noting_percent_progress_preamble(msg);
                                    SubLObject v_term;
                                    SubLObject end_var;
                                    SubLObject end;
                                    SubLObject id3;
                                    SubLObject id_$290;
                                    for (end = (end_var = id_index.id_index_next_id(table_var)), id3 = (SubLObject)dumper.NIL, id3 = first_id_var; !id3.numGE(end_var); id3 = number_utilities.f_1X(id3)) {
                                        v_term = id_index.id_index_lookup(table_var, id3, (SubLObject)dumper.UNPROVIDED);
                                        if (dumper.NIL != v_term) {
                                            utilities_macros.note_percent_progress(sofar, total);
                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                            id_$290 = unrepresented_terms.unrepresented_term_suid(v_term);
                                            dump_kb_unrepresented_term(v_term, stream_$281);
                                        }
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$286 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values3 = Values.getValuesAsVector();
                                        utilities_macros.noting_percent_progress_postamble();
                                        Values.restoreValuesFromVector(_values3);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$286, thread);
                                    }
                                }
                            }
                            finally {
                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_10, thread);
                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_9, thread);
                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$285, thread);
                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$285, thread);
                            }
                        }
                    }
                    else {
                        final SubLObject idx = unrepresented_terms.do_unrepresented_terms_table();
                        final SubLObject mess = (SubLObject)dumper.$str291$Dumping_KB_unrepresented_terms;
                        final SubLObject total2 = id_index.id_index_count(idx);
                        SubLObject sofar2 = (SubLObject)dumper.ZERO_INTEGER;
                        assert dumper.NIL != Types.stringp(mess) : mess;
                        final SubLObject _prev_bind_0_$287 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$286 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                        final SubLObject _prev_bind_11 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                        final SubLObject _prev_bind_12 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                        try {
                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                            try {
                                utilities_macros.noting_percent_progress_preamble(mess);
                                final SubLObject idx_$294 = idx;
                                if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$294, (SubLObject)dumper.$kw266$SKIP)) {
                                    final SubLObject idx_$295 = idx_$294;
                                    if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$295, (SubLObject)dumper.$kw266$SKIP)) {
                                        final SubLObject vector_var = id_index.id_index_dense_objects(idx_$295);
                                        final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                        SubLObject id;
                                        SubLObject length;
                                        SubLObject v_iteration;
                                        SubLObject v_term3;
                                        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                            id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                            v_term3 = Vectors.aref(vector_var, id);
                                            if (dumper.NIL == id_index.id_index_tombstone_p(v_term3) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                if (dumper.NIL != id_index.id_index_tombstone_p(v_term3)) {
                                                    v_term3 = (SubLObject)dumper.$kw266$SKIP;
                                                }
                                                dump_kb_unrepresented_term(v_term3, stream_$281);
                                                sofar2 = Numbers.add(sofar2, (SubLObject)dumper.ONE_INTEGER);
                                                utilities_macros.note_percent_progress(sofar2, total2);
                                            }
                                        }
                                    }
                                    final SubLObject idx_$296 = idx_$294;
                                    if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$296) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                        final SubLObject sparse = id_index.id_index_sparse_objects(idx_$296);
                                        SubLObject id4 = id_index.id_index_sparse_id_threshold(idx_$296);
                                        final SubLObject end_id = id_index.id_index_next_id(idx_$296);
                                        final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                        while (id4.numL(end_id)) {
                                            final SubLObject v_term2 = Hashtables.gethash_without_values(id4, sparse, v_default);
                                            if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(v_term2)) {
                                                dump_kb_unrepresented_term(v_term2, stream_$281);
                                                sofar2 = Numbers.add(sofar2, (SubLObject)dumper.ONE_INTEGER);
                                                utilities_macros.note_percent_progress(sofar2, total2);
                                            }
                                            id4 = Numbers.add(id4, (SubLObject)dumper.ONE_INTEGER);
                                        }
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$288 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values4 = Values.getValuesAsVector();
                                    utilities_macros.noting_percent_progress_postamble();
                                    Values.restoreValuesFromVector(_values4);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$288, thread);
                                }
                            }
                        }
                        finally {
                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_12, thread);
                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_11, thread);
                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$286, thread);
                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$287, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$289 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values5 = Values.getValuesAsVector();
                        streams_high.close(stream_$281, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values5);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$289, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$290 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values6 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values6);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$290, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 95449L)
    public static SubLObject snapshot_kb_unrepresented_terms(final SubLObject active_dir, final SubLObject directory_path) {
        dump_kb_object_count(directory_path, (SubLObject)dumper.$str289$unrepresented_term_count, unrepresented_terms.next_unrepresented_term_suid());
        return dump_kb_unrepresented_terms_int(directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 95785L)
    public static SubLObject load_kb_unrepresented_terms(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != unrepresented_terms.use_unrepresented_term_fhtP() && dumper.NIL != Filesys.probe_file(kb_dump_product_file((SubLObject)dumper.$str290$unrepresented_terms, directory_path, (SubLObject)dumper.UNPROVIDED))) {
            final SubLObject str = (SubLObject)dumper.$str294$Reconnecting_to_unrepresented_ter;
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                unrepresented_terms.reconnect_unrepresented_term_fht(kb_dump_product_file((SubLObject)dumper.$str290$unrepresented_terms, directory_path, (SubLObject)dumper.UNPROVIDED));
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        else {
            if (dumper.NIL != unrepresented_terms.use_unrepresented_term_fhtP()) {
                Errors.warn((SubLObject)dumper.$str295$Could_not_locate__A__faling_back_, kb_dump_product_file((SubLObject)dumper.$str290$unrepresented_terms, directory_path, (SubLObject)dumper.UNPROVIDED));
            }
            final SubLObject _prev_bind_9 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
            final SubLObject _prev_bind_10 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
            try {
                StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
                StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
                final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str290$unrepresented_terms, directory_path, (SubLObject)dumper.UNPROVIDED);
                final SubLObject term_from_suid_id_index = unrepresented_terms.$unrepresented_term_from_suid$.getGlobalValue();
                final SubLObject term_to_suid_hashtable = unrepresented_terms.$unrepresented_term_to_suid$.getGlobalValue();
                if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
                    final SubLObject filename_var = cfasl_file;
                    SubLObject stream = (SubLObject)dumper.NIL;
                    try {
                        final SubLObject _prev_bind_0_$300 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                            stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$300, thread);
                        }
                        if (!stream.isStream()) {
                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                        }
                        SubLObject stream_$301 = stream;
                        if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                            stream_$301 = file_utilities.enable_file_stream_memory_mapping(stream_$301);
                        }
                        try {
                            final SubLObject id_index_lock = id_index.id_index_lock(term_from_suid_id_index);
                            SubLObject release = (SubLObject)dumper.NIL;
                            try {
                                release = Locks.seize_lock(id_index_lock);
                                final SubLObject total = streams_high.file_length(stream_$301);
                                SubLObject i = (SubLObject)dumper.ZERO_INTEGER;
                                load_copyright(stream_$301);
                                final SubLObject _prev_bind_0_$301 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                final SubLObject _prev_bind_1_$303 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                final SubLObject _prev_bind_11 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                final SubLObject _prev_bind_12 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                try {
                                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                    try {
                                        utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str296$Loading_KB_unrepresented_terms);
                                        SubLObject dump_id;
                                        for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$301, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$301, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                            i = Numbers.add(i, (SubLObject)dumper.ONE_INTEGER);
                                            if (i.numE((SubLObject)dumper.$int297$500)) {
                                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$301), total);
                                                i = (SubLObject)dumper.ZERO_INTEGER;
                                            }
                                            if (dump_id.isInteger()) {
                                                load_kb_unrepresented_term(dump_id, stream_$301, term_from_suid_id_index, term_to_suid_hashtable);
                                            }
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$302 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                            final SubLObject _values = Values.getValuesAsVector();
                                            utilities_macros.noting_percent_progress_postamble();
                                            Values.restoreValuesFromVector(_values);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$302, thread);
                                        }
                                    }
                                }
                                finally {
                                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_12, thread);
                                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_11, thread);
                                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$303, thread);
                                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$301, thread);
                                }
                            }
                            finally {
                                if (dumper.NIL != release) {
                                    Locks.release_lock(id_index_lock);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$303 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values2 = Values.getValuesAsVector();
                                streams_high.close(stream_$301, (SubLObject)dumper.UNPROVIDED);
                                Values.restoreValuesFromVector(_values2);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$303, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$304 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values3 = Values.getValuesAsVector();
                            if (stream.isStream()) {
                                streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values3);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$304, thread);
                        }
                    }
                    discard_dump_filename(filename_var);
                }
            }
            finally {
                StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_10, thread);
                StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_9, thread);
            }
        }
        final SubLObject unrepresented_term_count = load_kb_unrepresented_term_count(directory_path);
        unrepresented_terms.finalize_unrepresented_terms(Numbers.subtract(unrepresented_term_count, (SubLObject)dumper.ONE_INTEGER));
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 97781L)
    public static SubLObject dump_kb_unrepresented_term(final SubLObject v_term, final SubLObject stream) {
        final SubLObject dump_id = unrepresented_terms.unrepresented_term_dump_id(v_term);
        cfasl.cfasl_output(dump_id, stream);
        cfasl.cfasl_output(v_term, stream);
        return v_term;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 97982L)
    public static SubLObject load_kb_unrepresented_term(final SubLObject dump_id, final SubLObject stream, final SubLObject term_from_suid_id_index, final SubLObject term_to_suid_hashtable) {
        final SubLObject v_term = cfasl.cfasl_input(stream, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != kb_indexing_datastructures.indexed_unrepresented_term_p(v_term)) {
            unrepresented_terms.register_unrepresented_term_suid_new(v_term, dump_id, term_from_suid_id_index, term_to_suid_hashtable);
            return v_term;
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 98349L)
    public static SubLObject load_kb_unrepresented_term_count(final SubLObject directory_path) {
        return load_kb_object_count(directory_path, (SubLObject)dumper.$str289$unrepresented_term_count);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 98490L)
    public static SubLObject get_exclusive_clause_struc_internal_id_limit_for_kb(final SubLObject directory_path) {
        final SubLObject count = load_clause_struc_count(directory_path);
        return count;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 98817L)
    public static SubLObject dump_clause_struc_defs(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        dump_kb_object_count(directory_path, (SubLObject)dumper.$str298$clause_struc_count, clause_strucs.clause_struc_count());
        final SubLObject missing_ids = dump_clause_struc_defs_internal(directory_path);
        if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && dumper.NIL == set.set_emptyP(missing_ids)) {
            Errors.error((SubLObject)dumper.$str299$There_are__A_gaps_in_the_clause_s, set.set_size(missing_ids));
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 99194L)
    public static SubLObject dump_clause_struc_defs_internal(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject clause_struc_file = kb_dump_file((SubLObject)dumper.$str300$clause_struc, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject missing_ids = set.new_set((SubLObject)dumper.EQL, (SubLObject)dumper.UNPROVIDED);
        final SubLObject filename_var = clause_struc_file;
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$307 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$307 = file_utilities.enable_file_stream_memory_mapping(stream_$307);
            }
            try {
                dump_copyright(stream_$307);
                SubLObject expected_id = (SubLObject)dumper.ZERO_INTEGER;
                final SubLObject idx = clause_strucs.clause_struc_table();
                final SubLObject mess = (SubLObject)dumper.$str301$Dumping_clause_struc_definitions;
                final SubLObject total = id_index.id_index_count(idx);
                SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                assert dumper.NIL != Types.stringp(mess) : mess;
                final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                try {
                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                    try {
                        utilities_macros.noting_percent_progress_preamble(mess);
                        final SubLObject idx_$308 = idx;
                        if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$308, (SubLObject)dumper.$kw266$SKIP)) {
                            final SubLObject idx_$309 = idx_$308;
                            if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$309, (SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject vector_var = id_index.id_index_dense_objects(idx_$309);
                                final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                SubLObject length;
                                SubLObject v_iteration;
                                SubLObject id;
                                SubLObject clause_struc;
                                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                    id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                    clause_struc = Vectors.aref(vector_var, id);
                                    if (dumper.NIL == id_index.id_index_tombstone_p(clause_struc) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                        if (dumper.NIL != id_index.id_index_tombstone_p(clause_struc)) {
                                            clause_struc = (SubLObject)dumper.$kw266$SKIP;
                                        }
                                        while (expected_id.numL(clause_strucs.clause_struc_dump_id(clause_struc))) {
                                            set.set_add(expected_id, missing_ids);
                                            expected_id = Numbers.add(expected_id, (SubLObject)dumper.ONE_INTEGER);
                                        }
                                        dump_clause_struc_def(clause_struc, stream_$307);
                                        expected_id = Numbers.add((SubLObject)dumper.ONE_INTEGER, clause_strucs.clause_struc_dump_id(clause_struc));
                                        sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                }
                            }
                            final SubLObject idx_$310 = idx_$308;
                            if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$310) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject sparse = id_index.id_index_sparse_objects(idx_$310);
                                SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$310);
                                final SubLObject end_id = id_index.id_index_next_id(idx_$310);
                                final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                while (id2.numL(end_id)) {
                                    final SubLObject clause_struc2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                    if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(clause_struc2)) {
                                        while (expected_id.numL(clause_strucs.clause_struc_dump_id(clause_struc2))) {
                                            set.set_add(expected_id, missing_ids);
                                            expected_id = Numbers.add(expected_id, (SubLObject)dumper.ONE_INTEGER);
                                        }
                                        dump_clause_struc_def(clause_struc2, stream_$307);
                                        expected_id = Numbers.add((SubLObject)dumper.ONE_INTEGER, clause_strucs.clause_struc_dump_id(clause_struc2));
                                        sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                    id2 = Numbers.add(id2, (SubLObject)dumper.ONE_INTEGER);
                                }
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$311 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            utilities_macros.noting_percent_progress_postamble();
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$311, thread);
                        }
                    }
                }
                finally {
                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    streams_high.close(stream_$307, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values3 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values3);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
            }
        }
        discard_dump_filename(filename_var);
        return missing_ids;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 99983L)
    public static SubLObject snapshot_deleted_clause_struc_id_set(final SubLObject directory_path, final SubLObject missing_ids) {
        return snapshot_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str302$deleted_clause_struc_ids, missing_ids, (SubLObject)dumper.$str303$shared_clauses);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 100199L)
    public static SubLObject snapshot_clause_struc_defs(final SubLObject directory_path) {
        dump_kb_object_count(directory_path, (SubLObject)dumper.$str298$clause_struc_count, clause_strucs.next_clause_struc_id());
        final SubLObject missing_ids = dump_clause_struc_defs_internal(directory_path);
        if (dumper.NIL == set.set_emptyP(missing_ids)) {
            snapshot_deleted_clause_struc_id_set(directory_path, missing_ids);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 100583L)
    public static SubLObject load_deleted_clause_struc_id_set(final SubLObject directory_path) {
        return load_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str302$deleted_clause_struc_ids);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 100733L)
    public static SubLObject has_deleted_clause_struc_id_setP(final SubLObject directory_path) {
        return Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str302$deleted_clause_struc_ids, directory_path, (SubLObject)dumper.UNPROVIDED));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 100879L)
    public static SubLObject load_clause_struc_defs(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str300$clause_struc, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$312 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$312 = file_utilities.enable_file_stream_memory_mapping(stream_$312);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$312);
                    load_copyright(stream_$312);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str304$Loading_clause_struc_definitions);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$312, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$312, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$312), total);
                                if (dump_id.isInteger()) {
                                    load_clause_struc_def(dump_id, stream_$312);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$313 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$313, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$312, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        final SubLObject clause_struc_count = load_clause_struc_count(directory_path);
        clause_strucs.finalize_clause_strucs(Numbers.subtract(clause_struc_count, (SubLObject)dumper.ONE_INTEGER));
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 101735L)
    public static SubLObject dump_clause_struc_def(final SubLObject clause_struc, final SubLObject stream) {
        cfasl.cfasl_output(clause_strucs.clause_struc_dump_id(clause_struc), stream);
        cfasl.cfasl_output(clause_strucs.clause_struc_cnf(clause_struc), stream);
        cfasl.cfasl_output(clause_strucs.clause_struc_assertions(clause_struc), stream);
        return clause_struc;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 102006L)
    public static SubLObject load_clause_struc_def(final SubLObject dump_id, final SubLObject stream) {
        final SubLObject cnf = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        final SubLObject clause_struc = clause_strucs.make_clause_struc_shell(cnf, dump_id);
        clause_strucs.reset_clause_struc_assertions(clause_struc, cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
        return clause_struc;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 102293L)
    public static SubLObject load_clause_struc_count(final SubLObject directory_path) {
        return load_kb_object_count(directory_path, (SubLObject)dumper.$str298$clause_struc_count);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 102419L)
    public static SubLObject possibly_persist_wide_fvector_mark(final SubLObject fvector, final SubLObject file_stem, final SubLObject directory_path, final SubLObject kb_object_type) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != file_vector.wide_file_vectorP(fvector)) {
            final SubLObject wide_mark_file = kb_dump_file(get_wide_mark_basename_from_index_basename(file_stem), directory_path, (SubLObject)dumper.UNPROVIDED);
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str305$__The__A_size_is_larger_than_4GB_, kb_object_type);
            final SubLObject str = (SubLObject)dumper.$str306$Persisting_wide_index_entry_suppo;
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                file_vector.persist_file_vector_wide_mark(fvector, wide_mark_file);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        return fvector;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 103020L)
    public static SubLObject get_exclusive_deduction_internal_id_limit_for_kb(final SubLObject directory_path) {
        final SubLObject count = load_deduction_count(directory_path);
        return count;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 103329L)
    public static SubLObject snapshot_deduction_count(final SubLObject directory_path) {
        return dump_kb_object_count(directory_path, (SubLObject)dumper.$str307$deduction_count, deduction_handles.next_deduction_id());
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 103473L)
    public static SubLObject dump_deduction_defs(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$314 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$315 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$314);
            final SubLObject memory_mappedP_$316 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$314);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$314);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$314);
                final SubLObject manager_$315 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$316 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$315);
                final SubLObject memory_mappedP_$317 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$315);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$315);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$315);
                    final SubLObject manager_$316 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$317 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$316);
                    final SubLObject memory_mappedP_$318 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$316);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$316);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$316);
                        final SubLObject manager_$317 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$318 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$317);
                        final SubLObject memory_mappedP_$319 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$317);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$317);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$317);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                dump_kb_object_count(directory_path, (SubLObject)dumper.$str307$deduction_count, deduction_handles.deduction_count());
                                final SubLObject deduction_file = kb_dump_file((SubLObject)dumper.$str169$deduction, directory_path, (SubLObject)dumper.UNPROVIDED);
                                final SubLObject deduction_index_file = kb_dump_file((SubLObject)dumper.$str308$deduction_index, directory_path, (SubLObject)dumper.UNPROVIDED);
                                final SubLObject _prev_bind_0_$326 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
                                final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
                                try {
                                    StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
                                    StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
                                    final SubLObject filename_var = deduction_file;
                                    SubLObject stream = (SubLObject)dumper.NIL;
                                    try {
                                        final SubLObject _prev_bind_0_$327 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                        try {
                                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                            stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                                        }
                                        finally {
                                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$327, thread);
                                        }
                                        if (!stream.isStream()) {
                                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                                        }
                                        SubLObject stream_$328 = stream;
                                        if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                                            stream_$328 = file_utilities.enable_file_stream_memory_mapping(stream_$328);
                                        }
                                        try {
                                            final SubLObject filename_var_$329 = deduction_index_file;
                                            SubLObject stream_$329 = (SubLObject)dumper.NIL;
                                            try {
                                                final SubLObject _prev_bind_0_$328 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                                try {
                                                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                                    stream_$329 = compatibility.open_binary(filename_var_$329, (SubLObject)dumper.$kw202$OUTPUT);
                                                }
                                                finally {
                                                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$328, thread);
                                                }
                                                if (!stream_$329.isStream()) {
                                                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$329);
                                                }
                                                SubLObject index_stream = stream_$329;
                                                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                                                    index_stream = file_utilities.enable_file_stream_memory_mapping(index_stream);
                                                }
                                                try {
                                                    dump_copyright(stream_$328);
                                                    final SubLObject fvector = file_vector.create_file_vector(stream_$328, index_stream);
                                                    final SubLObject idx = deduction_handles.do_deductions_table();
                                                    final SubLObject mess = (SubLObject)dumper.$str309$Dumping_deduction_definitions;
                                                    final SubLObject total = id_index.id_index_count(idx);
                                                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                                    assert dumper.NIL != Types.stringp(mess) : mess;
                                                    final SubLObject _prev_bind_0_$329 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$333 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                                    final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                                    final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                                    try {
                                                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                        try {
                                                            utilities_macros.noting_percent_progress_preamble(mess);
                                                            final SubLObject idx_$334 = idx;
                                                            if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$334, (SubLObject)dumper.$kw266$SKIP)) {
                                                                final SubLObject idx_$335 = idx_$334;
                                                                if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$335, (SubLObject)dumper.$kw266$SKIP)) {
                                                                    final SubLObject vector_var = id_index.id_index_dense_objects(idx_$335);
                                                                    final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                                    SubLObject length;
                                                                    SubLObject v_iteration;
                                                                    SubLObject d_id;
                                                                    SubLObject d_handle;
                                                                    SubLObject deduction;
                                                                    for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                                        d_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                                        d_handle = Vectors.aref(vector_var, d_id);
                                                                        if (dumper.NIL == id_index.id_index_tombstone_p(d_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                            if (dumper.NIL != id_index.id_index_tombstone_p(d_handle)) {
                                                                                d_handle = (SubLObject)dumper.$kw266$SKIP;
                                                                            }
                                                                            deduction = deduction_handles.resolve_deduction_id_value_pair(d_id, d_handle);
                                                                            file_vector.update_file_vector_index_linear(fvector);
                                                                            dump_deduction_def(deduction, stream_$328);
                                                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                            utilities_macros.note_percent_progress(sofar, total);
                                                                        }
                                                                    }
                                                                }
                                                                final SubLObject idx_$336 = idx_$334;
                                                                if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$336) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                    final SubLObject sparse = id_index.id_index_sparse_objects(idx_$336);
                                                                    SubLObject d_id2 = id_index.id_index_sparse_id_threshold(idx_$336);
                                                                    final SubLObject end_id = id_index.id_index_next_id(idx_$336);
                                                                    final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                                    while (d_id2.numL(end_id)) {
                                                                        final SubLObject d_handle2 = Hashtables.gethash_without_values(d_id2, sparse, v_default);
                                                                        if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(d_handle2)) {
                                                                            final SubLObject deduction2 = deduction_handles.resolve_deduction_id_value_pair(d_id2, d_handle2);
                                                                            file_vector.update_file_vector_index_linear(fvector);
                                                                            dump_deduction_def(deduction2, stream_$328);
                                                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                            utilities_macros.note_percent_progress(sofar, total);
                                                                        }
                                                                        d_id2 = Numbers.add(d_id2, (SubLObject)dumper.ONE_INTEGER);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        finally {
                                                            final SubLObject _prev_bind_0_$330 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                                final SubLObject _values = Values.getValuesAsVector();
                                                                utilities_macros.noting_percent_progress_postamble();
                                                                Values.restoreValuesFromVector(_values);
                                                            }
                                                            finally {
                                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$330, thread);
                                                            }
                                                        }
                                                    }
                                                    finally {
                                                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                                                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                                                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$333, thread);
                                                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$329, thread);
                                                    }
                                                    possibly_persist_wide_fvector_mark(fvector, (SubLObject)dumper.$str308$deduction_index, directory_path, (SubLObject)dumper.$str310$deduction_defs);
                                                }
                                                finally {
                                                    final SubLObject _prev_bind_0_$331 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                        final SubLObject _values2 = Values.getValuesAsVector();
                                                        streams_high.close(index_stream, (SubLObject)dumper.UNPROVIDED);
                                                        Values.restoreValuesFromVector(_values2);
                                                    }
                                                    finally {
                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$331, thread);
                                                    }
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$332 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                    final SubLObject _values3 = Values.getValuesAsVector();
                                                    if (stream_$329.isStream()) {
                                                        streams_high.close(stream_$329, (SubLObject)dumper.UNPROVIDED);
                                                    }
                                                    Values.restoreValuesFromVector(_values3);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$332, thread);
                                                }
                                            }
                                            discard_dump_filename(filename_var_$329);
                                        }
                                        finally {
                                            final SubLObject _prev_bind_0_$333 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                final SubLObject _values4 = Values.getValuesAsVector();
                                                streams_high.close(stream_$328, (SubLObject)dumper.UNPROVIDED);
                                                Values.restoreValuesFromVector(_values4);
                                            }
                                            finally {
                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$333, thread);
                                            }
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$334 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                            final SubLObject _values5 = Values.getValuesAsVector();
                                            if (stream.isStream()) {
                                                streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                                            }
                                            Values.restoreValuesFromVector(_values5);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$334, thread);
                                        }
                                    }
                                    discard_dump_filename(filename_var);
                                }
                                finally {
                                    StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
                                    StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0_$326, thread);
                                }
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values6 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$318) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$317);
                                }
                                if (dumper.NIL == memory_mappedP_$319) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$317, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values6);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values7 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$317) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$316);
                            }
                            if (dumper.NIL == memory_mappedP_$318) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$316, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values7);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values8 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$316) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$315);
                        }
                        if (dumper.NIL == memory_mappedP_$317) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$315, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values8);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values9 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$315) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$314);
                    }
                    if (dumper.NIL == memory_mappedP_$316) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$314, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values9);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values10 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values10);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 104578L)
    public static SubLObject snapshot_deduction_defs(final SubLObject active_dir, final SubLObject directory_path) {
        return snapshot_managed_object_simple_index((SubLObject)dumper.$sym311$SNAPSHOT_DEDUCTION_DEFS_INTERNAL, (SubLObject)dumper.$str169$deduction, active_dir, directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 104776L)
    public static SubLObject snapshot_deduction_defs_internal(final SubLObject active_dir, final SubLObject directory_path, SubLObject widen_indexP) {
        if (widen_indexP == dumper.UNPROVIDED) {
            widen_indexP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        final SubLObject datum = current = replicate_fv_dump_files((SubLObject)dumper.$list312, (SubLObject)dumper.$list313, (SubLObject)ConsesLow.list(get_wide_mark_basename_from_index_basename((SubLObject)dumper.$str308$deduction_index)), (SubLObject)ConsesLow.list(widen_indexP), active_dir, directory_path, Sequences.cconcatenate((SubLObject)dumper.$str314$Copying_deduction_definitions_fro, format_nil.format_nil_a_no_copy(active_dir)));
        SubLObject new_dfile = (SubLObject)dumper.NIL;
        SubLObject new_ifile = (SubLObject)dumper.NIL;
        SubLObject new_widemark = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list315);
        new_dfile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list315);
        new_ifile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list315);
        new_widemark = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            final SubLObject bufsize = file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread);
            final SubLObject small_bufsize = file_utilities.$default_small_stream_buffer_size$.getDynamicValue(thread);
            final SubLObject fvector = file_vector.open_file_vector_for_rewrite(new_dfile, new_ifile, new_widemark, bufsize, small_bufsize, (SubLObject)dumper.UNPROVIDED);
            try {
                snapshot_deleted_object_tombstones(fvector, deduction_handles.deleted_deduction_id_iterator(), (SubLObject)dumper.$str316$Tombstoning_deleted_deduction_def);
                compatibility.set_file_position(file_vector.get_file_vector_data_stream(fvector), (SubLObject)dumper.$kw317$END);
                if (dumper.NIL != deduction_handles.has_new_deductionsP()) {
                    file_vector.file_vector_change_stream_buffer_sizes(fvector, bufsize, bufsize);
                    snapshot_new_managed_objects(fvector, deduction_handles.new_new_deductions_iterator(), deduction_manager.get_file_backed_deduction_id_threshold(), (SubLObject)dumper.$sym318$DEDUCTION_ID, (SubLObject)dumper.$sym319$DUMP_DEDUCTION_DEF, (SubLObject)dumper.$str320$Appending_new_deduction_definitio, (SubLObject)dumper.UNPROVIDED);
                }
                possibly_persist_wide_fvector_mark(fvector, (SubLObject)dumper.$str308$deduction_index, directory_path, (SubLObject)dumper.$str310$deduction_defs);
            }
            finally {
                final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    file_vector.close_file_vector(fvector);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                }
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list315);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 106789L)
    public static SubLObject load_deduction_defs(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject deduction_cfasl_file = kb_dump_file((SubLObject)dumper.$str169$deduction, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject deduction_index_file = kb_dump_file((SubLObject)dumper.$str308$deduction_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject deduction_wide_mark_file = kb_dump_file(get_wide_mark_basename_from_index_basename((SubLObject)dumper.$str308$deduction_index), directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject deleted_deduction_ids = load_deleted_deduction_id_set(directory_path);
        if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != Filesys.probe_file(deduction_index_file)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str321$__Deduction_definitions_will_be_s, deduction_cfasl_file, deduction_index_file);
            SubLObject max_dump_id = (SubLObject)dumper.NIL;
            final SubLObject _prev_bind_0 = utilities_macros.$structure_resourcing_make_static$.currentBinding(thread);
            final SubLObject _prev_bind_2 = cfasl.$cfasl_input_to_static_area$.currentBinding(thread);
            try {
                utilities_macros.$structure_resourcing_make_static$.bind((SubLObject)dumper.NIL, thread);
                cfasl.$cfasl_input_to_static_area$.bind((SubLObject)dumper.NIL, thread);
                if (dumper.NIL != Filesys.probe_file(deduction_wide_mark_file)) {
                    final SubLObject str = (SubLObject)dumper.$str322$Determining_deduction_max_ID_usin;
                    final SubLObject _prev_bind_0_$342 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$343 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        max_dump_id = file_vector.wide_file_vector_length_from_index(deduction_index_file, deduction_wide_mark_file);
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$343, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$342, thread);
                    }
                }
                else {
                    final SubLObject str = (SubLObject)dumper.$str323$Determining_deduction_max_ID_from;
                    final SubLObject _prev_bind_0_$343 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$344 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        max_dump_id = file_vector.file_vector_length_from_index(deduction_index_file);
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$344, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$343, thread);
                    }
                }
            }
            finally {
                cfasl.$cfasl_input_to_static_area$.rebind(_prev_bind_2, thread);
                utilities_macros.$structure_resourcing_make_static$.rebind(_prev_bind_0, thread);
            }
            final SubLObject str2 = (SubLObject)dumper.$str324$Enabling_lazy_deduction_handle_su;
            final SubLObject _prev_bind_9 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_10 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_11 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_12 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_13 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_14 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_15 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_16 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str2) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str2);
                deduction_handles.mark_available_deductions(max_dump_id, deleted_deduction_ids);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_16, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_15, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_14, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_13, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_12, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_11, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_10, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_9, thread);
            }
            deduction_manager.initialize_deduction_hl_store_cache();
            if (dumper.NIL != deduction_manager.wide_deduction_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str325$___Deduction_definitions_use_wide);
            }
        }
        else if (dumper.NIL != dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != has_deleted_deduction_id_setP(directory_path)) {
            Errors.error((SubLObject)dumper.$str326$Not_yet_implemented_);
        }
        else if (dumper.NIL != verify_file_existence(deduction_cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var;
            final SubLObject deduction_file = filename_var = deduction_cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_17 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_17, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$346 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$346 = file_utilities.enable_file_stream_memory_mapping(stream_$346);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$346);
                    load_copyright(stream_$346);
                    final SubLObject _prev_bind_18 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_19 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_20 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_21 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str327$Loading_deduction_definitions);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$346, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$346, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$346), total);
                                if (dump_id.isInteger()) {
                                    deduction_handles.make_deduction_shell(dump_id);
                                    load_deduction_def(dump_id, stream_$346);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$344 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$344, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_21, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_20, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_19, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_18, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_22 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$346, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_22, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_23 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_23, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        final SubLObject deduction_count = load_deduction_count(directory_path);
        deduction_handles.finalize_deductions(Numbers.subtract(deduction_count, (SubLObject)dumper.ONE_INTEGER));
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 109969L)
    public static SubLObject dump_deduction_def(final SubLObject deduction, final SubLObject stream) {
        cfasl.cfasl_output(deductions_high.deduction_dump_id(deduction), stream);
        deductions_low.dump_deduction_content(deduction, stream);
        return deduction;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 110151L)
    public static SubLObject snapshot_deleted_deduction_id_set(final SubLObject directory_path) {
        return snapshot_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str328$deleted_deduction_ids, deduction_handles.missing_deduction_id_set(), (SubLObject)dumper.$str169$deduction);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 110351L)
    public static SubLObject load_deduction_def(final SubLObject dump_id, final SubLObject stream) {
        final SubLObject deduction = deductions_high.find_deduction_by_dump_id(dump_id);
        deductions_low.load_deduction_content(deduction, stream);
        return deduction;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 110571L)
    public static SubLObject load_deduction_def_from_cache(final SubLObject dump_id, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject deduction = (SubLObject)dumper.NIL;
        final SubLObject _prev_bind_0 = cfasl.$within_cfasl_externalization$.currentBinding(thread);
        try {
            cfasl.$within_cfasl_externalization$.bind((SubLObject)dumper.NIL, thread);
            deduction = load_deduction_def(dump_id, stream);
        }
        finally {
            cfasl.$within_cfasl_externalization$.rebind(_prev_bind_0, thread);
        }
        return deduction;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 110781L)
    public static SubLObject load_deduction_count(final SubLObject directory_path) {
        return load_kb_object_count(directory_path, (SubLObject)dumper.$str307$deduction_count);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 110901L)
    public static SubLObject load_deleted_deduction_id_set(final SubLObject directory_path) {
        return load_kb_object_deleted_id_set(directory_path, (SubLObject)dumper.$str328$deleted_deduction_ids);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 111045L)
    public static SubLObject has_deleted_deduction_id_setP(final SubLObject directory_path) {
        return Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str328$deleted_deduction_ids, directory_path, (SubLObject)dumper.UNPROVIDED));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 111185L)
    public static SubLObject dump_assertion_defs(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$348 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$349 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$348);
            final SubLObject memory_mappedP_$350 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$348);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$348);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$348);
                final SubLObject manager_$349 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$350 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$349);
                final SubLObject memory_mappedP_$351 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$349);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$349);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$349);
                    final SubLObject manager_$350 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$351 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$350);
                    final SubLObject memory_mappedP_$352 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$350);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$350);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$350);
                        final SubLObject manager_$351 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$352 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$351);
                        final SubLObject memory_mappedP_$353 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$351);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$351);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$351);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                final SubLObject assertion_file = kb_dump_file((SubLObject)dumper.$str168$assertion, directory_path, (SubLObject)dumper.UNPROVIDED);
                                final SubLObject assertion_index_file = kb_dump_file((SubLObject)dumper.$str330$assertion_index, directory_path, (SubLObject)dumper.UNPROVIDED);
                                final SubLObject _prev_bind_0_$360 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
                                final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
                                try {
                                    StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
                                    StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
                                    final SubLObject filename_var = assertion_file;
                                    SubLObject stream = (SubLObject)dumper.NIL;
                                    try {
                                        final SubLObject _prev_bind_0_$361 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                        try {
                                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                            stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                                        }
                                        finally {
                                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$361, thread);
                                        }
                                        if (!stream.isStream()) {
                                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                                        }
                                        SubLObject stream_$362 = stream;
                                        if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                                            stream_$362 = file_utilities.enable_file_stream_memory_mapping(stream_$362);
                                        }
                                        try {
                                            final SubLObject filename_var_$363 = assertion_index_file;
                                            SubLObject stream_$363 = (SubLObject)dumper.NIL;
                                            try {
                                                final SubLObject _prev_bind_0_$362 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                                try {
                                                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                                    stream_$363 = compatibility.open_binary(filename_var_$363, (SubLObject)dumper.$kw202$OUTPUT);
                                                }
                                                finally {
                                                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$362, thread);
                                                }
                                                if (!stream_$363.isStream()) {
                                                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$363);
                                                }
                                                SubLObject index_stream = stream_$363;
                                                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                                                    index_stream = file_utilities.enable_file_stream_memory_mapping(index_stream);
                                                }
                                                try {
                                                    dump_copyright(stream_$362);
                                                    final SubLObject fvector = file_vector.create_file_vector(stream_$362, index_stream);
                                                    final SubLObject idx = assertion_handles.do_assertions_table();
                                                    final SubLObject mess = (SubLObject)dumper.$str331$Dumping_assertion_definitions;
                                                    final SubLObject total = id_index.id_index_count(idx);
                                                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                                    assert dumper.NIL != Types.stringp(mess) : mess;
                                                    final SubLObject _prev_bind_0_$363 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$367 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                                    final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                                    final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                                    try {
                                                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                        try {
                                                            utilities_macros.noting_percent_progress_preamble(mess);
                                                            final SubLObject idx_$368 = idx;
                                                            if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$368, (SubLObject)dumper.$kw266$SKIP)) {
                                                                final SubLObject idx_$369 = idx_$368;
                                                                if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$369, (SubLObject)dumper.$kw266$SKIP)) {
                                                                    final SubLObject vector_var = id_index.id_index_dense_objects(idx_$369);
                                                                    final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                                    SubLObject length;
                                                                    SubLObject v_iteration;
                                                                    SubLObject a_id;
                                                                    SubLObject a_handle;
                                                                    SubLObject assertion;
                                                                    for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                                        a_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                                        a_handle = Vectors.aref(vector_var, a_id);
                                                                        if (dumper.NIL == id_index.id_index_tombstone_p(a_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                            if (dumper.NIL != id_index.id_index_tombstone_p(a_handle)) {
                                                                                a_handle = (SubLObject)dumper.$kw266$SKIP;
                                                                            }
                                                                            assertion = assertion_handles.resolve_assertion_id_value_pair(a_id, a_handle);
                                                                            file_vector.update_file_vector_index_linear(fvector);
                                                                            dump_assertion_def(assertion, stream_$362);
                                                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                            utilities_macros.note_percent_progress(sofar, total);
                                                                        }
                                                                    }
                                                                }
                                                                final SubLObject idx_$370 = idx_$368;
                                                                if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$370) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                    final SubLObject sparse = id_index.id_index_sparse_objects(idx_$370);
                                                                    SubLObject a_id2 = id_index.id_index_sparse_id_threshold(idx_$370);
                                                                    final SubLObject end_id = id_index.id_index_next_id(idx_$370);
                                                                    final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                                    while (a_id2.numL(end_id)) {
                                                                        final SubLObject a_handle2 = Hashtables.gethash_without_values(a_id2, sparse, v_default);
                                                                        if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(a_handle2)) {
                                                                            final SubLObject assertion2 = assertion_handles.resolve_assertion_id_value_pair(a_id2, a_handle2);
                                                                            file_vector.update_file_vector_index_linear(fvector);
                                                                            dump_assertion_def(assertion2, stream_$362);
                                                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                            utilities_macros.note_percent_progress(sofar, total);
                                                                        }
                                                                        a_id2 = Numbers.add(a_id2, (SubLObject)dumper.ONE_INTEGER);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        finally {
                                                            final SubLObject _prev_bind_0_$364 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                                final SubLObject _values = Values.getValuesAsVector();
                                                                utilities_macros.noting_percent_progress_postamble();
                                                                Values.restoreValuesFromVector(_values);
                                                            }
                                                            finally {
                                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$364, thread);
                                                            }
                                                        }
                                                    }
                                                    finally {
                                                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                                                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                                                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$367, thread);
                                                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$363, thread);
                                                    }
                                                    possibly_persist_wide_fvector_mark(fvector, (SubLObject)dumper.$str330$assertion_index, directory_path, (SubLObject)dumper.$str332$assertion_defs);
                                                }
                                                finally {
                                                    final SubLObject _prev_bind_0_$365 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                        final SubLObject _values2 = Values.getValuesAsVector();
                                                        streams_high.close(index_stream, (SubLObject)dumper.UNPROVIDED);
                                                        Values.restoreValuesFromVector(_values2);
                                                    }
                                                    finally {
                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$365, thread);
                                                    }
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$366 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                    final SubLObject _values3 = Values.getValuesAsVector();
                                                    if (stream_$363.isStream()) {
                                                        streams_high.close(stream_$363, (SubLObject)dumper.UNPROVIDED);
                                                    }
                                                    Values.restoreValuesFromVector(_values3);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$366, thread);
                                                }
                                            }
                                            discard_dump_filename(filename_var_$363);
                                        }
                                        finally {
                                            final SubLObject _prev_bind_0_$367 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                final SubLObject _values4 = Values.getValuesAsVector();
                                                streams_high.close(stream_$362, (SubLObject)dumper.UNPROVIDED);
                                                Values.restoreValuesFromVector(_values4);
                                            }
                                            finally {
                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$367, thread);
                                            }
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$368 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                            final SubLObject _values5 = Values.getValuesAsVector();
                                            if (stream.isStream()) {
                                                streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                                            }
                                            Values.restoreValuesFromVector(_values5);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$368, thread);
                                        }
                                    }
                                    discard_dump_filename(filename_var);
                                }
                                finally {
                                    StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
                                    StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0_$360, thread);
                                }
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values6 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$352) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$351);
                                }
                                if (dumper.NIL == memory_mappedP_$353) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$351, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values6);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values7 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$351) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$350);
                            }
                            if (dumper.NIL == memory_mappedP_$352) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$350, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values7);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values8 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$350) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$349);
                        }
                        if (dumper.NIL == memory_mappedP_$351) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$349, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values8);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values9 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$349) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$348);
                    }
                    if (dumper.NIL == memory_mappedP_$350) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$348, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values9);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values10 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values10);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 112232L)
    public static SubLObject snapshot_assertion_defs(final SubLObject active_dir, final SubLObject directory_path) {
        return snapshot_managed_object_simple_index((SubLObject)dumper.$sym333$SNAPSHOT_ASSERTION_DEFS_INTERNAL, (SubLObject)dumper.$str168$assertion, active_dir, directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 112430L)
    public static SubLObject snapshot_assertion_defs_internal(final SubLObject active_dir, final SubLObject directory_path, SubLObject widen_indexP) {
        if (widen_indexP == dumper.UNPROVIDED) {
            widen_indexP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        final SubLObject datum = current = replicate_fv_dump_files((SubLObject)dumper.$list334, (SubLObject)dumper.$list335, (SubLObject)ConsesLow.list(get_wide_mark_basename_from_index_basename((SubLObject)dumper.$str330$assertion_index)), (SubLObject)ConsesLow.list(widen_indexP), active_dir, directory_path, Sequences.cconcatenate((SubLObject)dumper.$str336$Copying_assertion_definitions_fro, format_nil.format_nil_a_no_copy(active_dir)));
        SubLObject new_afile = (SubLObject)dumper.NIL;
        SubLObject new_ifile = (SubLObject)dumper.NIL;
        SubLObject new_widemark = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list337);
        new_afile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list337);
        new_ifile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list337);
        new_widemark = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            final SubLObject bufsize = file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread);
            final SubLObject small_bufsize = file_utilities.$default_small_stream_buffer_size$.getDynamicValue(thread);
            final SubLObject fvector = file_vector.open_file_vector_for_rewrite(new_afile, new_ifile, new_widemark, bufsize, small_bufsize, (SubLObject)dumper.UNPROVIDED);
            try {
                snapshot_deleted_object_tombstones(fvector, assertion_handles.deleted_assertion_id_iterator(), (SubLObject)dumper.$str338$Tombstoning_deleted_assertion_def);
                compatibility.set_file_position(file_vector.get_file_vector_data_stream(fvector), (SubLObject)dumper.$kw317$END);
                snapshot_changed_managed_objects(fvector, (SubLObject)dumper.$kw339$NO_COMPLEX_FVECTOR, assertion_manager.new_muted_assertion_content_iterator(), (SubLObject)dumper.$sym340$FIND_ASSERTION_BY_ID, (SubLObject)dumper.$sym341$SNAPSHOT_ASSERTION_DEF, (SubLObject)dumper.$str342$Updating_changed_assertion_defini);
                if (dumper.NIL != assertion_handles.has_new_assertionsP()) {
                    file_vector.file_vector_change_stream_buffer_sizes(fvector, bufsize, bufsize);
                    snapshot_new_managed_objects(fvector, assertion_handles.new_new_assertions_iterator(), assertion_manager.get_file_backed_assertion_id_threshold(), (SubLObject)dumper.$sym343$ASSERTION_ID, (SubLObject)dumper.$sym344$DUMP_ASSERTION_DEF, (SubLObject)dumper.$str345$Appending_new_assertion_definitio, (SubLObject)dumper.UNPROVIDED);
                }
                possibly_persist_wide_fvector_mark(fvector, (SubLObject)dumper.$str330$assertion_index, directory_path, (SubLObject)dumper.$str332$assertion_defs);
            }
            finally {
                final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    file_vector.close_file_vector(fvector);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                }
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list337);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 114774L)
    public static SubLObject load_assertion_defs(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject assertion_cfasl_file = kb_dump_file((SubLObject)dumper.$str168$assertion, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject assertion_index_file = kb_dump_file((SubLObject)dumper.$str330$assertion_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != Filesys.probe_file(assertion_index_file)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str346$__Assertion_definitions_will_be_s, assertion_cfasl_file, assertion_index_file);
            assertion_manager.initialize_assertion_hl_store_cache();
            if (dumper.NIL != assertion_manager.wide_assertion_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str347$___Assertion_definitions_use_wide);
            }
        }
        else if (dumper.NIL != dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != has_deleted_assertion_id_setP(directory_path)) {
            Errors.error((SubLObject)dumper.$str326$Not_yet_implemented_);
        }
        else if (dumper.NIL != verify_file_existence(assertion_cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var;
            final SubLObject assertion_file = filename_var = assertion_cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$376 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$376 = file_utilities.enable_file_stream_memory_mapping(stream_$376);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$376);
                    load_copyright(stream_$376);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str348$Loading_assertion_definitions);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$376, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$376, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$376), total);
                                if (dump_id.isInteger()) {
                                    load_assertion_def(dump_id, stream_$376);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$377 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$377, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$376, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 116842L)
    public static SubLObject dump_assertion_def(final SubLObject assertion, final SubLObject stream) {
        cfasl.cfasl_output(assertions_high.assertion_dump_id(assertion), stream);
        assertions_low.dump_assertion_content(assertion, stream);
        return assertion;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 117023L)
    public static SubLObject snapshot_assertion_def(final SubLObject assertion, final SubLObject content, final SubLObject data_stream, SubLObject complex_fvector) {
        if (complex_fvector == dumper.UNPROVIDED) {
            complex_fvector = (SubLObject)dumper.NIL;
        }
        return dump_assertion_def(assertion, data_stream);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 117208L)
    public static SubLObject load_assertion_def(final SubLObject dump_id, final SubLObject stream) {
        final SubLObject assertion = assertions_high.find_assertion_by_dump_id(dump_id);
        assertions_low.load_assertion_content(assertion, stream);
        return assertion;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 117387L)
    public static SubLObject load_assertion_def_from_cache(final SubLObject dump_id, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject assertion = (SubLObject)dumper.NIL;
        final SubLObject _prev_bind_0 = cfasl.$within_cfasl_externalization$.currentBinding(thread);
        try {
            cfasl.$within_cfasl_externalization$.bind((SubLObject)dumper.NIL, thread);
            assertion = load_assertion_def(dump_id, stream);
        }
        finally {
            cfasl.$within_cfasl_externalization$.rebind(_prev_bind_0, thread);
        }
        return assertion;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 117597L)
    public static SubLObject dump_kb_hl_support_defs(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject kb_hl_support_file = kb_dump_file((SubLObject)dumper.$str170$kb_hl_support, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject kb_hl_support_index_file = kb_dump_file((SubLObject)dumper.$str350$kb_hl_support_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject filename_var = kb_hl_support_file;
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$378 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$378 = file_utilities.enable_file_stream_memory_mapping(stream_$378);
            }
            try {
                final SubLObject filename_var_$379 = kb_hl_support_index_file;
                SubLObject stream_$379 = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream_$379 = compatibility.open_binary(filename_var_$379, (SubLObject)dumper.$kw202$OUTPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
                    }
                    if (!stream_$379.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$379);
                    }
                    SubLObject index_stream = stream_$379;
                    if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                        index_stream = file_utilities.enable_file_stream_memory_mapping(index_stream);
                    }
                    try {
                        dump_copyright(stream_$378);
                        final SubLObject fvector = file_vector.create_file_vector(stream_$378, index_stream);
                        final SubLObject idx = kb_hl_support_handles.do_kb_hl_supports_table();
                        final SubLObject mess = (SubLObject)dumper.$str351$Dumping_KB_HL_support_definitions;
                        final SubLObject total = id_index.id_index_count(idx);
                        SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                        assert dumper.NIL != Types.stringp(mess) : mess;
                        final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                        final SubLObject _prev_bind_6 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                        try {
                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                            try {
                                utilities_macros.noting_percent_progress_preamble(mess);
                                final SubLObject idx_$381 = idx;
                                if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$381, (SubLObject)dumper.$kw266$SKIP)) {
                                    final SubLObject idx_$382 = idx_$381;
                                    if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$382, (SubLObject)dumper.$kw266$SKIP)) {
                                        final SubLObject vector_var = id_index.id_index_dense_objects(idx_$382);
                                        final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                        SubLObject length;
                                        SubLObject v_iteration;
                                        SubLObject s_id;
                                        SubLObject s_handle;
                                        SubLObject kb_hl_support;
                                        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                            s_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                            s_handle = Vectors.aref(vector_var, s_id);
                                            if (dumper.NIL == id_index.id_index_tombstone_p(s_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                if (dumper.NIL != id_index.id_index_tombstone_p(s_handle)) {
                                                    s_handle = (SubLObject)dumper.$kw266$SKIP;
                                                }
                                                kb_hl_support = kb_hl_support_handles.resolve_kb_hl_support_id_value_pair(s_id, s_handle);
                                                file_vector.update_file_vector_index_linear(fvector);
                                                dump_kb_hl_support_def(kb_hl_support, stream_$378);
                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                utilities_macros.note_percent_progress(sofar, total);
                                            }
                                        }
                                    }
                                    final SubLObject idx_$383 = idx_$381;
                                    if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$383) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                        final SubLObject sparse = id_index.id_index_sparse_objects(idx_$383);
                                        SubLObject s_id2 = id_index.id_index_sparse_id_threshold(idx_$383);
                                        final SubLObject end_id = id_index.id_index_next_id(idx_$383);
                                        final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                        while (s_id2.numL(end_id)) {
                                            final SubLObject s_handle2 = Hashtables.gethash_without_values(s_id2, sparse, v_default);
                                            if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(s_handle2)) {
                                                final SubLObject kb_hl_support2 = kb_hl_support_handles.resolve_kb_hl_support_id_value_pair(s_id2, s_handle2);
                                                file_vector.update_file_vector_index_linear(fvector);
                                                dump_kb_hl_support_def(kb_hl_support2, stream_$378);
                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                utilities_macros.note_percent_progress(sofar, total);
                                            }
                                            s_id2 = Numbers.add(s_id2, (SubLObject)dumper.ONE_INTEGER);
                                        }
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$384 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    utilities_macros.noting_percent_progress_postamble();
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$384, thread);
                                }
                            }
                        }
                        finally {
                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_6, thread);
                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_5, thread);
                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_4, thread);
                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_3, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            streams_high.close(index_stream, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (stream_$379.isStream()) {
                            streams_high.close(stream_$379, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                    }
                }
                discard_dump_filename(filename_var_$379);
            }
            finally {
                final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    streams_high.close(stream_$378, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 118399L)
    public static SubLObject snapshot_kb_hl_support_defs(final SubLObject active_dir, final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject kb_hl_support_file = kb_dump_file((SubLObject)dumper.$str170$kb_hl_support, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject kb_hl_support_index_file = kb_dump_file((SubLObject)dumper.$str350$kb_hl_support_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject filename_var = kb_hl_support_file;
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$385 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$385 = file_utilities.enable_file_stream_memory_mapping(stream_$385);
            }
            try {
                final SubLObject filename_var_$386 = kb_hl_support_index_file;
                SubLObject stream_$386 = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream_$386 = compatibility.open_binary(filename_var_$386, (SubLObject)dumper.$kw202$OUTPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
                    }
                    if (!stream_$386.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$386);
                    }
                    SubLObject index_stream = stream_$386;
                    if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                        index_stream = file_utilities.enable_file_stream_memory_mapping(index_stream);
                    }
                    try {
                        dump_copyright(stream_$385);
                        final SubLObject fvector = file_vector.create_file_vector(stream_$385, index_stream);
                        SubLObject expected_id = (SubLObject)dumper.ZERO_INTEGER;
                        final SubLObject idx = kb_hl_support_handles.do_kb_hl_supports_table();
                        final SubLObject mess = (SubLObject)dumper.$str351$Dumping_KB_HL_support_definitions;
                        final SubLObject total = id_index.id_index_count(idx);
                        SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                        assert dumper.NIL != Types.stringp(mess) : mess;
                        final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                        final SubLObject _prev_bind_6 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                        try {
                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                            try {
                                utilities_macros.noting_percent_progress_preamble(mess);
                                final SubLObject idx_$388 = idx;
                                if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$388, (SubLObject)dumper.$kw266$SKIP)) {
                                    final SubLObject idx_$389 = idx_$388;
                                    if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$389, (SubLObject)dumper.$kw266$SKIP)) {
                                        final SubLObject vector_var = id_index.id_index_dense_objects(idx_$389);
                                        final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                        SubLObject length;
                                        SubLObject v_iteration;
                                        SubLObject s_id;
                                        SubLObject s_handle;
                                        SubLObject kb_hl_support;
                                        SubLObject curr_id;
                                        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                            s_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                            s_handle = Vectors.aref(vector_var, s_id);
                                            if (dumper.NIL == id_index.id_index_tombstone_p(s_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                if (dumper.NIL != id_index.id_index_tombstone_p(s_handle)) {
                                                    s_handle = (SubLObject)dumper.$kw266$SKIP;
                                                }
                                                kb_hl_support = kb_hl_support_handles.resolve_kb_hl_support_id_value_pair(s_id, s_handle);
                                                for (curr_id = kb_hl_supports_high.kb_hl_support_dump_id(kb_hl_support); expected_id.numL(curr_id); expected_id = Numbers.add(expected_id, (SubLObject)dumper.ONE_INTEGER)) {
                                                    file_vector.place_file_vector_index_tombstone(fvector);
                                                }
                                                file_vector.update_file_vector_index_linear(fvector);
                                                dump_kb_hl_support_def(kb_hl_support, stream_$385);
                                                expected_id = Numbers.add((SubLObject)dumper.ONE_INTEGER, curr_id);
                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                utilities_macros.note_percent_progress(sofar, total);
                                            }
                                        }
                                    }
                                    final SubLObject idx_$390 = idx_$388;
                                    if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$390) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                        final SubLObject sparse = id_index.id_index_sparse_objects(idx_$390);
                                        SubLObject s_id2 = id_index.id_index_sparse_id_threshold(idx_$390);
                                        final SubLObject end_id = id_index.id_index_next_id(idx_$390);
                                        final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                        while (s_id2.numL(end_id)) {
                                            final SubLObject s_handle2 = Hashtables.gethash_without_values(s_id2, sparse, v_default);
                                            if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(s_handle2)) {
                                                final SubLObject kb_hl_support2 = kb_hl_support_handles.resolve_kb_hl_support_id_value_pair(s_id2, s_handle2);
                                                SubLObject curr_id2;
                                                for (curr_id2 = kb_hl_supports_high.kb_hl_support_dump_id(kb_hl_support2); expected_id.numL(curr_id2); expected_id = Numbers.add(expected_id, (SubLObject)dumper.ONE_INTEGER)) {
                                                    file_vector.place_file_vector_index_tombstone(fvector);
                                                }
                                                file_vector.update_file_vector_index_linear(fvector);
                                                dump_kb_hl_support_def(kb_hl_support2, stream_$385);
                                                expected_id = Numbers.add((SubLObject)dumper.ONE_INTEGER, curr_id2);
                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                utilities_macros.note_percent_progress(sofar, total);
                                            }
                                            s_id2 = Numbers.add(s_id2, (SubLObject)dumper.ONE_INTEGER);
                                        }
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$391 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    utilities_macros.noting_percent_progress_postamble();
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$391, thread);
                                }
                            }
                        }
                        finally {
                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_6, thread);
                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_5, thread);
                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_4, thread);
                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_3, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            streams_high.close(index_stream, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (stream_$386.isStream()) {
                            streams_high.close(stream_$386, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                    }
                }
                discard_dump_filename(filename_var_$386);
            }
            finally {
                final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    streams_high.close(stream_$385, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 119457L)
    public static SubLObject load_kb_hl_support_defs(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str170$kb_hl_support, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject index_file = kb_dump_file((SubLObject)dumper.$str350$kb_hl_support_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != Filesys.probe_file(index_file)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str352$__KB_HL_supports_will_be_swapped_, cfasl_file, index_file);
            kb_hl_support_manager.initialize_kb_hl_support_hl_store_cache();
        }
        else if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$392 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$392 = file_utilities.enable_file_stream_memory_mapping(stream_$392);
                }
                try {
                    final SubLObject total = kb_hl_support_handles.kb_hl_support_count();
                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                    load_copyright(stream_$392);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str353$Loading_KB_HL_support_definitions);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$392, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$392, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                utilities_macros.note_percent_progress(sofar, total);
                                if (dump_id.isInteger()) {
                                    load_kb_hl_support_def(dump_id, stream_$392);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$393 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$393, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$392, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 120518L)
    public static SubLObject dump_kb_hl_support_def(final SubLObject kb_hl_support, final SubLObject stream) {
        cfasl.cfasl_output(kb_hl_supports_high.kb_hl_support_dump_id(kb_hl_support), stream);
        return kb_hl_supports_low.dump_kb_hl_support_content(kb_hl_support, stream);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 120711L)
    public static SubLObject load_kb_hl_support_def(final SubLObject dump_id, final SubLObject stream) {
        final SubLObject kb_hl_support = kb_hl_supports_high.find_kb_hl_support_by_dump_id(dump_id);
        kb_hl_supports_low.load_kb_hl_support_content(kb_hl_support, stream);
        return kb_hl_support;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 120961L)
    public static SubLObject load_kb_hl_support_def_from_cache(final SubLObject dump_id, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject index = (SubLObject)dumper.NIL;
        final SubLObject _prev_bind_0 = cfasl.$within_cfasl_externalization$.currentBinding(thread);
        try {
            cfasl.$within_cfasl_externalization$.bind((SubLObject)dumper.NIL, thread);
            index = load_kb_hl_support_def(dump_id, stream);
        }
        finally {
            cfasl.$within_cfasl_externalization$.rebind(_prev_bind_0, thread);
        }
        return index;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 121167L)
    public static SubLObject dump_kb_hl_support_indexing(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject index_file = kb_dump_file((SubLObject)dumper.$str355$kb_hl_support_indexing, directory_path, (SubLObject)dumper.UNPROVIDED);
            final SubLObject str = (SubLObject)dumper.$str356$Dumping_KB_HL_support_indexing___;
            final SubLObject _prev_bind_0_$394 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_1_$395 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                kb_hl_supports_high.dump_kb_hl_support_indexing_int(index_file);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$395, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$394, thread);
            }
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 121579L)
    public static SubLObject load_kb_hl_support_indexing(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject index_file = kb_dump_file((SubLObject)dumper.$str355$kb_hl_support_indexing, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(index_file, (SubLObject)dumper.T)) {
            final SubLObject str = (SubLObject)dumper.$str357$Loading_KB_HL_support_indexing___;
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                kb_hl_supports_high.load_kb_hl_support_indexing_int(index_file);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 121889L)
    public static SubLObject dump_bookkeeping_assertions(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str358$bookkeeping_assertions, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject str = (SubLObject)dumper.$str359$Dumping_bookkeeping_assertions___;
        final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(str);
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$396 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$396, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$397 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$397 = file_utilities.enable_file_stream_memory_mapping(stream_$397);
                }
                try {
                    dump_copyright(stream_$397);
                    cfasl.cfasl_output(bookkeeping_store.dumper_num_top_level_index(), stream_$397);
                    SubLObject cdolist_list_var = bookkeeping_store.dumper_bookkeeping_binary_gaf_store();
                    SubLObject cons = (SubLObject)dumper.NIL;
                    cons = cdolist_list_var.first();
                    while (dumper.NIL != cdolist_list_var) {
                        SubLObject current;
                        final SubLObject datum = current = cons;
                        SubLObject pred = (SubLObject)dumper.NIL;
                        SubLObject subindex = (SubLObject)dumper.NIL;
                        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list360);
                        pred = current.first();
                        current = (subindex = current.rest());
                        dump_bookkeeping_assertions_for_pred(pred, subindex, stream_$397);
                        cdolist_list_var = cdolist_list_var.rest();
                        cons = cdolist_list_var.first();
                    }
                    cfasl.cfasl_output((SubLObject)dumper.NIL, stream_$397);
                    cfasl.cfasl_output((SubLObject)dumper.NIL, stream_$397);
                    cfasl.cfasl_output((SubLObject)dumper.NIL, stream_$397);
                }
                finally {
                    final SubLObject _prev_bind_0_$397 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$397, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$397, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$398 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$398, thread);
                }
            }
            discard_dump_filename(filename_var);
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 122686L)
    public static SubLObject dump_bookkeeping_assertions_for_pred(final SubLObject pred, final SubLObject subindex, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        cfasl.cfasl_output(pred, stream);
        cfasl.cfasl_output(bookkeeping_store.dumper_num_intermediate_index(subindex), stream);
        SubLObject iteration_state;
        for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(subindex)); dumper.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
            thread.resetMultipleValues();
            final SubLObject arg1 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
            final SubLObject arg2 = thread.secondMultipleValue();
            thread.resetMultipleValues();
            dump_bookkeeping_assertion(arg1, arg2, stream);
        }
        dictionary_contents.do_dictionary_contents_finalize(iteration_state);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 123077L)
    public static SubLObject dump_bookkeeping_assertion(final SubLObject arg1, final SubLObject arg2, final SubLObject stream) {
        cfasl.cfasl_output(arg1, stream);
        cfasl.cfasl_output(arg2, stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 123211L)
    public static SubLObject load_bookkeeping_assertions(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str358$bookkeeping_assertions, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject str = (SubLObject)dumper.$str361$Loading_bookkeeping_assertions___;
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                final SubLObject filename_var = cfasl_file;
                SubLObject stream = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_0_$400 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$400, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                    }
                    SubLObject stream_$401 = stream;
                    if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                        stream_$401 = file_utilities.enable_file_stream_memory_mapping(stream_$401);
                    }
                    try {
                        final SubLObject total = streams_high.file_length(stream_$401);
                        load_copyright(stream_$401);
                        bookkeeping_store.dumper_clear_bookkeeping_binary_gaf_store();
                        SubLObject num_bookkeeping_preds;
                        SubLObject n;
                        for (num_bookkeeping_preds = cfasl.cfasl_input(stream_$401, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED), n = (SubLObject)dumper.NIL, n = (SubLObject)dumper.ZERO_INTEGER; n.numL(num_bookkeeping_preds); n = Numbers.add(n, (SubLObject)dumper.ONE_INTEGER)) {
                            load_bookkeeping_assertions_for_pred(stream_$401);
                        }
                        cfasl.cfasl_input(stream_$401, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        cfasl.cfasl_input(stream_$401, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        cfasl.cfasl_input(stream_$401, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        if (cfasl.cfasl_input(stream_$401, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                            Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$401)), cfasl_file);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$401 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            streams_high.close(stream_$401, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$401, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$402 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$402, thread);
                    }
                }
                discard_dump_filename(filename_var);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 124274L)
    public static SubLObject load_bookkeeping_assertions_for_pred(final SubLObject stream) {
        final SubLObject pred = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        SubLObject num_assertions;
        SubLObject i;
        for (num_assertions = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED), i = (SubLObject)dumper.NIL, i = (SubLObject)dumper.ZERO_INTEGER; i.numL(num_assertions); i = Numbers.add(i, (SubLObject)dumper.ONE_INTEGER)) {
            load_bookkeeping_assertion(pred, stream);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 124603L)
    public static SubLObject load_bookkeeping_assertion(final SubLObject pred, final SubLObject stream) {
        final SubLObject arg1 = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        final SubLObject arg2 = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        bookkeeping_store.dumper_load_bookkeeping_binary_gaf(pred, arg1, arg2);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 124799L)
    public static SubLObject dump_experience(final SubLObject directory_path, SubLObject internalP) {
        if (internalP == dumper.UNPROVIDED) {
            internalP = (SubLObject)dumper.T;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject str = (SubLObject)dumper.$str362$Dumping_rule_utility_experience__;
        final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(str);
            dump_rule_utility_experience(directory_path, internalP);
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 125205L)
    public static SubLObject dump_rule_utility_experience(final SubLObject directory_path, SubLObject internalP) {
        if (internalP == dumper.UNPROVIDED) {
            internalP = (SubLObject)dumper.T;
        }
        final SubLObject experience_file = kb_dump_file((SubLObject)dumper.$str41$rule_utility_experience, directory_path, (SubLObject)dumper.UNPROVIDED);
        inference_analysis.save_transformation_rule_statistics(experience_file, internalP);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 125460L)
    public static SubLObject load_experience(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject str = (SubLObject)dumper.$str363$Loading_rule_utility_experience__;
        final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(str);
            load_rule_utility_experience(directory_path);
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 125671L)
    public static SubLObject load_rule_utility_experience(final SubLObject directory_path) {
        final SubLObject experience_file = kb_dump_file((SubLObject)dumper.$str41$rule_utility_experience, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(experience_file, (SubLObject)dumper.T)) {
            inference_analysis.load_transformation_rule_statistics(experience_file, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 125952L)
    public static SubLObject reload_experience(SubLObject directory_path) {
        if (directory_path == dumper.UNPROVIDED) {
            directory_path = kb_dump_directory(control_vars.kb_loaded(), (SubLObject)dumper.UNPROVIDED);
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)dumper.NIL;
        final SubLObject common_symbols = load_special_objects(directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols(common_symbols);
            final SubLObject _prev_bind_0_$404 = api_control_vars.$cfasl_constant_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_2 = api_control_vars.$cfasl_nart_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_3 = api_control_vars.$cfasl_assertion_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_4 = api_control_vars.$cfasl_deduction_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_5 = api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_6 = api_control_vars.$cfasl_clause_struc_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$structure_resourcing_make_static$.currentBinding(thread);
            final SubLObject _prev_bind_8 = cfasl.$cfasl_input_to_static_area$.currentBinding(thread);
            try {
                api_control_vars.$cfasl_constant_handle_lookup_func$.bind((SubLObject)dumper.$sym48$FIND_CONSTANT_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_nart_handle_lookup_func$.bind((SubLObject)dumper.$sym49$FIND_NART_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_assertion_handle_lookup_func$.bind((SubLObject)dumper.$sym50$FIND_ASSERTION_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_deduction_handle_lookup_func$.bind((SubLObject)dumper.$sym51$FIND_DEDUCTION_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.bind((SubLObject)dumper.$sym52$FIND_KB_HL_SUPPORT_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_clause_struc_handle_lookup_func$.bind((SubLObject)dumper.$sym53$FIND_CLAUSE_STRUC_BY_DUMP_ID, thread);
                utilities_macros.$structure_resourcing_make_static$.bind((SubLObject)dumper.T, thread);
                cfasl.$cfasl_input_to_static_area$.bind((SubLObject)dumper.T, thread);
                result = load_experience(directory_path);
            }
            finally {
                cfasl.$cfasl_input_to_static_area$.rebind(_prev_bind_8, thread);
                utilities_macros.$structure_resourcing_make_static$.rebind(_prev_bind_7, thread);
                api_control_vars.$cfasl_clause_struc_handle_lookup_func$.rebind(_prev_bind_6, thread);
                api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.rebind(_prev_bind_5, thread);
                api_control_vars.$cfasl_deduction_handle_lookup_func$.rebind(_prev_bind_4, thread);
                api_control_vars.$cfasl_assertion_handle_lookup_func$.rebind(_prev_bind_3, thread);
                api_control_vars.$cfasl_nart_handle_lookup_func$.rebind(_prev_bind_2, thread);
                api_control_vars.$cfasl_constant_handle_lookup_func$.rebind(_prev_bind_0_$404, thread);
            }
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        return result;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 127082L)
    public static SubLObject new_niniveh_index_iterator(final SubLObject filename, final SubLObject dir_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject index_file = kb_dump_file(filename, dir_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && dumper.NIL == Filesys.probe_file(index_file)) {
            Errors.error((SubLObject)dumper.$str364$Cannot_locate__A_, index_file);
        }
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            stream = compatibility.open_binary(index_file, (SubLObject)dumper.$kw151$INPUT);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        if (dumper.NIL == Errors.$ignore_mustsP$.getDynamicValue(thread) && dumper.NIL == list_utilities.sublisp_boolean(stream)) {
            Errors.error((SubLObject)dumper.$str365$Cannot_open__A_for_reading___, index_file);
        }
        load_copyright(stream);
        return iteration.new_iterator(construct_niniveh_iterator_state(stream), (SubLObject)dumper.$sym366$NINIVEH_INDEX_ITERATOR_DONE_, (SubLObject)dumper.$sym367$NINIVEH_INDEX_ITERATOR_NEXT, (SubLObject)dumper.$sym368$NINIVEH_INDEX_ITERATOR_FINALIZE);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 127945L)
    public static SubLObject construct_niniveh_iterator_state(final SubLObject stream) {
        return (SubLObject)ConsesLow.list(stream, (SubLObject)dumper.NIL, (SubLObject)ConsesLow.cons((SubLObject)dumper.$kw369$STUB, (SubLObject)dumper.$kw369$STUB));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 128050L)
    public static SubLObject niniveh_index_iterator_doneP(final SubLObject state) {
        SubLObject stream = (SubLObject)dumper.NIL;
        SubLObject doneP = (SubLObject)dumper.NIL;
        SubLObject cons_cell = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(state, state, (SubLObject)dumper.$list370);
        stream = state.first();
        SubLObject current = state.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, state, (SubLObject)dumper.$list370);
        doneP = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, state, (SubLObject)dumper.$list370);
        cons_cell = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            return doneP;
        }
        cdestructuring_bind.cdestructuring_bind_error(state, (SubLObject)dumper.$list370);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 128270L)
    public static SubLObject niniveh_index_iterator_next(final SubLObject state) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stream = (SubLObject)dumper.NIL;
        SubLObject doneP = (SubLObject)dumper.NIL;
        SubLObject cons_cell = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(state, state, (SubLObject)dumper.$list370);
        stream = state.first();
        SubLObject current = state.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, state, (SubLObject)dumper.$list370);
        doneP = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, state, (SubLObject)dumper.$list370);
        cons_cell = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            SubLObject dump_id = (SubLObject)dumper.NIL;
            SubLObject valid_dump_idP = (SubLObject)dumper.NIL;
            SubLObject index = (SubLObject)dumper.NIL;
            final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
            try {
                cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
                cfasl.cfasl_set_common_symbols(misc_utilities.get_hl_store_caches_shared_symbols());
                dump_id = cfasl.cfasl_input(stream, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF);
                valid_dump_idP = (SubLObject)SubLObjectFactory.makeBoolean(dump_id != dumper.$kw226$EOF);
                index = (SubLObject)((dumper.NIL != valid_dump_idP) ? cfasl.cfasl_input(stream, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) : dumper.NIL);
                ConsesLow.rplaca(cons_cell, dump_id);
                ConsesLow.rplacd(cons_cell, index);
            }
            finally {
                cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
            }
            if (dumper.NIL == valid_dump_idP) {
                ConsesLow.set_nth((SubLObject)dumper.ONE_INTEGER, state, (SubLObject)dumper.T);
                doneP = (SubLObject)dumper.T;
            }
            return Values.values(cons_cell, state, doneP);
        }
        cdestructuring_bind.cdestructuring_bind_error(state, (SubLObject)dumper.$list370);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 128955L)
    public static SubLObject niniveh_index_iterator_finalize(final SubLObject state) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stream = (SubLObject)dumper.NIL;
        SubLObject cache_load_fn = (SubLObject)dumper.NIL;
        SubLObject doneP = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(state, state, (SubLObject)dumper.$list371);
        stream = state.first();
        SubLObject current = state.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, state, (SubLObject)dumper.$list371);
        cache_load_fn = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, state, (SubLObject)dumper.$list371);
        doneP = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            if (dumper.NIL != streams_high.open_stream_p(stream)) {
                SubLObject ignore_errors_tag = (SubLObject)dumper.NIL;
                try {
                    thread.throwStack.push(dumper.$kw372$IGNORE_ERRORS_TARGET);
                    final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                    try {
                        Errors.$error_handler$.bind(Symbols.symbol_function((SubLObject)dumper.$sym373$IGNORE_ERRORS_HANDLER), thread);
                        try {
                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                        }
                        catch (Throwable catch_var) {
                            Errors.handleThrowable(catch_var, (SubLObject)dumper.NIL);
                        }
                    }
                    finally {
                        Errors.$error_handler$.rebind(_prev_bind_0, thread);
                    }
                }
                catch (Throwable ccatch_env_var) {
                    ignore_errors_tag = Errors.handleThrowable(ccatch_env_var, (SubLObject)dumper.$kw372$IGNORE_ERRORS_TARGET);
                }
                finally {
                    thread.throwStack.pop();
                }
            }
            return cache_load_fn;
        }
        cdestructuring_bind.cdestructuring_bind_error(state, (SubLObject)dumper.$list371);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 129201L)
    public static SubLObject dump_kb_indexing(final SubLObject directory_path) {
        dump_constant_indices(directory_path);
        dump_nart_indices(directory_path);
        dump_unrepresented_term_indices(directory_path);
        dump_assertion_indices(directory_path);
        dump_auxiliary_indices_file(directory_path);
        dump_bookkeeping_indices_file(directory_path);
        dump_kb_hl_support_indexing(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 129586L)
    public static SubLObject snapshot_kb_indexing(final SubLObject active_dir, final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw374$CONSTANT_INDEX, thread);
            snapshot_constant_indices(active_dir, directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw375$NART_INDEX, thread);
            snapshot_nart_indices(active_dir, directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw376$UNREPRESENTED_TERM_INDEX, thread);
            snapshot_unrepresented_term_indices(active_dir, directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw377$ASSERTION_INDEX, thread);
            dump_assertion_indices(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw378$AUXILIARY_INDEX, thread);
            dump_auxiliary_indices_file(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw379$BOOKKEEPPING_INDEX, thread);
            dump_bookkeeping_indices_file(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw380$KB_HL_SUPPORT_INDEX, thread);
            dump_kb_hl_support_indexing(directory_path);
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 130398L)
    public static SubLObject load_kb_indexing(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        load_kb_assertion_indexing(directory_path);
        SubLObject _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw379$BOOKKEEPPING_INDEX, thread);
            load_bookkeeping_indices_file(directory_path);
            kb_load_gc_checkpoint();
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw380$KB_HL_SUPPORT_INDEX, thread);
            load_kb_hl_support_indexing(directory_path);
            kb_load_gc_checkpoint();
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 130773L)
    public static SubLObject load_kb_assertion_indexing(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw374$CONSTANT_INDEX, thread);
            load_constant_indices(directory_path);
            kb_load_gc_checkpoint();
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw375$NART_INDEX, thread);
            load_nart_indices(directory_path);
            kb_load_gc_checkpoint();
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw376$UNREPRESENTED_TERM_INDEX, thread);
            load_unrepresented_term_indices(directory_path);
            kb_load_gc_checkpoint();
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw377$ASSERTION_INDEX, thread);
            load_assertion_indices(directory_path);
            kb_load_gc_checkpoint();
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        _prev_bind_0 = kb_health_statistics.$kb_health_current_sub_context$.currentBinding(thread);
        try {
            kb_health_statistics.$kb_health_current_sub_context$.bind((SubLObject)dumper.$kw378$AUXILIARY_INDEX, thread);
            load_auxiliary_indices_file(directory_path);
            kb_load_gc_checkpoint();
        }
        finally {
            kb_health_statistics.$kb_health_current_sub_context$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 131468L)
    public static SubLObject rebuild_kb_indexing() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$405 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$406 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$405);
            final SubLObject memory_mappedP_$407 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$405);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$405);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$405);
                final SubLObject manager_$406 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$407 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$406);
                final SubLObject memory_mappedP_$408 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$406);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$406);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$406);
                    final SubLObject manager_$407 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$408 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$407);
                    final SubLObject memory_mappedP_$409 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$407);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$407);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$407);
                        final SubLObject manager_$408 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$409 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$408);
                        final SubLObject memory_mappedP_$410 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$408);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$408);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$408);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                kb_indexing.reindex_all_assertions();
                                kb_indexing.perform_indexing_pre_dump_cleanup();
                                bookkeeping_store.reindex_all_bookkeeping_assertions();
                                kb_hl_supports_low.reindex_all_kb_hl_supports();
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$409) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$408);
                                }
                                if (dumper.NIL == memory_mappedP_$410) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$408, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$408) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$407);
                            }
                            if (dumper.NIL == memory_mappedP_$409) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$407, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$407) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$406);
                        }
                        if (dumper.NIL == memory_mappedP_$408) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$406, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$406) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$405);
                    }
                    if (dumper.NIL == memory_mappedP_$407) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$405, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 131705L)
    public static SubLObject test_dump_kb_indexing(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols(kb_dump_common_symbols());
            dump_kb_indexing(directory_path);
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 131889L)
    public static SubLObject test_load_kb_indexing(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols(kb_dump_common_symbols());
            final SubLObject _prev_bind_0_$417 = utilities_macros.$structure_resourcing_make_static$.currentBinding(thread);
            final SubLObject _prev_bind_2 = cfasl.$cfasl_input_to_static_area$.currentBinding(thread);
            try {
                utilities_macros.$structure_resourcing_make_static$.bind((SubLObject)dumper.T, thread);
                cfasl.$cfasl_input_to_static_area$.bind((SubLObject)dumper.T, thread);
                load_kb_indexing(directory_path);
            }
            finally {
                cfasl.$cfasl_input_to_static_area$.rebind(_prev_bind_2, thread);
                utilities_macros.$structure_resourcing_make_static$.rebind(_prev_bind_0_$417, thread);
            }
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject index_writer_print_function_trampoline(final SubLObject v_object, final SubLObject stream) {
        compatibility.default_struct_print_function(v_object, stream, (SubLObject)dumper.ZERO_INTEGER);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject index_writer_p(final SubLObject v_object) {
        return (SubLObject)((v_object.getClass() == $index_writer_native.class) ? dumper.T : dumper.NIL);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject idxwriter_directory(final SubLObject v_object) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.getField2();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject idxwriter_fvector(final SubLObject v_object) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.getField3();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject idxwriter_index_file(final SubLObject v_object) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.getField4();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject idxwriter_index_label(final SubLObject v_object) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.getField5();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject idxwriter_complex_fvector(final SubLObject v_object) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.getField6();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject idxwriter_complex_index_file(final SubLObject v_object) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.getField7();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject idxwriter_complex_index_label(final SubLObject v_object) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.getField8();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject idxwriter_dump_fn(final SubLObject v_object) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.getField9();
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject _csetf_idxwriter_directory(final SubLObject v_object, final SubLObject value) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.setField2(value);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject _csetf_idxwriter_fvector(final SubLObject v_object, final SubLObject value) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.setField3(value);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject _csetf_idxwriter_index_file(final SubLObject v_object, final SubLObject value) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.setField4(value);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject _csetf_idxwriter_index_label(final SubLObject v_object, final SubLObject value) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.setField5(value);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject _csetf_idxwriter_complex_fvector(final SubLObject v_object, final SubLObject value) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.setField6(value);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject _csetf_idxwriter_complex_index_file(final SubLObject v_object, final SubLObject value) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.setField7(value);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject _csetf_idxwriter_complex_index_label(final SubLObject v_object, final SubLObject value) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.setField8(value);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject _csetf_idxwriter_dump_fn(final SubLObject v_object, final SubLObject value) {
        assert dumper.NIL != index_writer_p(v_object) : v_object;
        return v_object.setField9(value);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject make_index_writer(SubLObject arglist) {
        if (arglist == dumper.UNPROVIDED) {
            arglist = (SubLObject)dumper.NIL;
        }
        final SubLObject v_new = (SubLObject)new $index_writer_native();
        SubLObject next;
        SubLObject current_arg;
        SubLObject current_value;
        SubLObject pcase_var;
        for (next = (SubLObject)dumper.NIL, next = arglist; dumper.NIL != next; next = conses_high.cddr(next)) {
            current_arg = next.first();
            current_value = conses_high.cadr(next);
            pcase_var = current_arg;
            if (pcase_var.eql((SubLObject)dumper.$kw406$DIRECTORY)) {
                _csetf_idxwriter_directory(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)dumper.$kw248$FVECTOR)) {
                _csetf_idxwriter_fvector(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)dumper.$kw154$INDEX_FILE)) {
                _csetf_idxwriter_index_file(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)dumper.$kw407$INDEX_LABEL)) {
                _csetf_idxwriter_index_label(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)dumper.$kw408$COMPLEX_FVECTOR)) {
                _csetf_idxwriter_complex_fvector(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)dumper.$kw166$COMPLEX_INDEX_FILE)) {
                _csetf_idxwriter_complex_index_file(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)dumper.$kw409$COMPLEX_INDEX_LABEL)) {
                _csetf_idxwriter_complex_index_label(v_new, current_value);
            }
            else if (pcase_var.eql((SubLObject)dumper.$kw410$DUMP_FN)) {
                _csetf_idxwriter_dump_fn(v_new, current_value);
            }
            else {
                Errors.error((SubLObject)dumper.$str411$Invalid_slot__S_for_construction_, current_arg);
            }
        }
        return v_new;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject visit_defstruct_index_writer(final SubLObject obj, final SubLObject visitor_fn) {
        Functions.funcall(visitor_fn, obj, (SubLObject)dumper.$kw412$BEGIN, (SubLObject)dumper.$sym413$MAKE_INDEX_WRITER, (SubLObject)dumper.EIGHT_INTEGER);
        Functions.funcall(visitor_fn, obj, (SubLObject)dumper.$kw414$SLOT, (SubLObject)dumper.$kw406$DIRECTORY, idxwriter_directory(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)dumper.$kw414$SLOT, (SubLObject)dumper.$kw248$FVECTOR, idxwriter_fvector(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)dumper.$kw414$SLOT, (SubLObject)dumper.$kw154$INDEX_FILE, idxwriter_index_file(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)dumper.$kw414$SLOT, (SubLObject)dumper.$kw407$INDEX_LABEL, idxwriter_index_label(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)dumper.$kw414$SLOT, (SubLObject)dumper.$kw408$COMPLEX_FVECTOR, idxwriter_complex_fvector(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)dumper.$kw414$SLOT, (SubLObject)dumper.$kw166$COMPLEX_INDEX_FILE, idxwriter_complex_index_file(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)dumper.$kw414$SLOT, (SubLObject)dumper.$kw409$COMPLEX_INDEX_LABEL, idxwriter_complex_index_label(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)dumper.$kw414$SLOT, (SubLObject)dumper.$kw410$DUMP_FN, idxwriter_dump_fn(obj));
        Functions.funcall(visitor_fn, obj, (SubLObject)dumper.$kw317$END, (SubLObject)dumper.$sym413$MAKE_INDEX_WRITER, (SubLObject)dumper.EIGHT_INTEGER);
        return obj;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132090L)
    public static SubLObject visit_defstruct_object_index_writer_method(final SubLObject obj, final SubLObject visitor_fn) {
        return visit_defstruct_index_writer(obj, visitor_fn);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 132681L)
    public static SubLObject new_index_writer(final SubLObject dir_path, final SubLObject data_file, final SubLObject index_file, final SubLObject index_label, final SubLObject cdata_file, final SubLObject cindex_file, final SubLObject cindex_label, final SubLObject dump_fn) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject fvector = (SubLObject)dumper.NIL;
        SubLObject complex_fvector = (SubLObject)dumper.NIL;
        final SubLObject indices_file = kb_dump_file(data_file, dir_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject indices_index_file = kb_dump_file(index_file, dir_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject complex_file = kb_dump_file(cdata_file, dir_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject complex_index_file = kb_dump_file(cindex_file, dir_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject stream = compatibility.open_binary(indices_file, (SubLObject)dumper.$kw202$OUTPUT);
            final SubLObject index_stream = compatibility.open_binary(indices_index_file, (SubLObject)dumper.$kw202$OUTPUT);
            dump_copyright(stream);
            fvector = file_vector.create_file_vector(stream, index_stream);
            if (dumper.NIL != dumper.$separate_file_for_complex_indexingP$.getDynamicValue(thread)) {
                final SubLObject complex_stream = compatibility.open_binary(complex_file, (SubLObject)dumper.$kw202$OUTPUT);
                final SubLObject compinx_stream = compatibility.open_binary(complex_index_file, (SubLObject)dumper.$kw202$OUTPUT);
                complex_fvector = file_vector.create_file_vector(complex_stream, compinx_stream);
                kb_dump_stamp_file_vector_for_references(complex_fvector);
            }
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return make_index_writer((SubLObject)ConsesLow.list(new SubLObject[] { dumper.$kw406$DIRECTORY, dir_path, dumper.$kw410$DUMP_FN, dump_fn, dumper.$kw248$FVECTOR, fvector, dumper.$kw154$INDEX_FILE, index_file, dumper.$kw407$INDEX_LABEL, index_label, dumper.$kw408$COMPLEX_FVECTOR, complex_fvector, dumper.$kw166$COMPLEX_INDEX_FILE, cindex_file, dumper.$kw409$COMPLEX_INDEX_LABEL, cindex_label }));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 134242L)
    public static SubLObject index_writer_put_index_entry(final SubLObject idx_writer, final SubLObject v_term) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject fvector = idxwriter_fvector(idx_writer);
        final SubLObject complex_fvector = idxwriter_complex_fvector(idx_writer);
        final SubLObject dump_fn = idxwriter_dump_fn(idx_writer);
        file_vector.update_file_vector_index_linear(fvector);
        final SubLObject _prev_bind_0 = dumper.$separate_file_for_complex_indexingP$.currentBinding(thread);
        try {
            dumper.$separate_file_for_complex_indexingP$.bind(file_vector.file_vector_p(complex_fvector), thread);
            Functions.funcall(dump_fn, v_term, file_vector.get_file_vector_data_stream(fvector), complex_fvector);
        }
        finally {
            dumper.$separate_file_for_complex_indexingP$.rebind(_prev_bind_0, thread);
        }
        return v_term;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 134704L)
    public static SubLObject close_index_writer(final SubLObject idx_writer) {
        final SubLObject directory_path = idxwriter_directory(idx_writer);
        final SubLObject fvector = idxwriter_fvector(idx_writer);
        final SubLObject index_file = idxwriter_index_file(idx_writer);
        final SubLObject index_label = idxwriter_index_label(idx_writer);
        possibly_persist_wide_fvector_mark(fvector, index_file, directory_path, index_label);
        file_vector.close_file_vector(fvector);
        final SubLObject complex_fvector = idxwriter_complex_fvector(idx_writer);
        if (dumper.NIL != file_vector.file_vector_p(complex_fvector)) {
            final SubLObject complex_index_file = idxwriter_complex_index_file(idx_writer);
            final SubLObject complex_index_label = idxwriter_complex_index_label(idx_writer);
            possibly_persist_wide_fvector_mark(complex_fvector, complex_index_file, directory_path, complex_index_label);
            file_vector.close_file_vector(complex_fvector);
        }
        return idx_writer;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 135650L)
    public static SubLObject new_constant_indices_writer(final SubLObject directory_path) {
        return new_index_writer(directory_path, (SubLObject)dumper.$str159$indices, (SubLObject)dumper.$str416$indices_index, (SubLObject)dumper.$str417$constant_indices, (SubLObject)dumper.$str418$constant_complex_indices, (SubLObject)dumper.$str419$constant_complex_indices_index, (SubLObject)dumper.$str420$constant_complex_indices, (SubLObject)dumper.$sym421$DUMP_CONSTANT_INDEX);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 136020L)
    public static SubLObject dump_constant_indices(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject indices_file = kb_dump_file((SubLObject)dumper.$str159$indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject indices_index_file = kb_dump_file((SubLObject)dumper.$str416$indices_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject complex_file = kb_dump_file((SubLObject)dumper.$str418$constant_complex_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject compinx_file = kb_dump_file((SubLObject)dumper.$str419$constant_complex_indices_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var = indices_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$418 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$418, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$419 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$419 = file_utilities.enable_file_stream_memory_mapping(stream_$419);
                }
                try {
                    final SubLObject filename_var_$420 = indices_index_file;
                    SubLObject stream_$420 = (SubLObject)dumper.NIL;
                    try {
                        final SubLObject _prev_bind_0_$419 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                            stream_$420 = compatibility.open_binary(filename_var_$420, (SubLObject)dumper.$kw202$OUTPUT);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$419, thread);
                        }
                        if (!stream_$420.isStream()) {
                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$420);
                        }
                        SubLObject index_stream = stream_$420;
                        if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                            index_stream = file_utilities.enable_file_stream_memory_mapping(index_stream);
                        }
                        try {
                            dump_copyright(stream_$419);
                            final SubLObject filename_var_$421 = complex_file;
                            SubLObject stream_$421 = (SubLObject)dumper.NIL;
                            try {
                                final SubLObject _prev_bind_0_$420 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                try {
                                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                    stream_$421 = compatibility.open_binary(filename_var_$421, (SubLObject)dumper.$kw202$OUTPUT);
                                }
                                finally {
                                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$420, thread);
                                }
                                if (!stream_$421.isStream()) {
                                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$421);
                                }
                                SubLObject complex_stream = stream_$421;
                                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                                    complex_stream = file_utilities.enable_file_stream_memory_mapping(complex_stream);
                                }
                                try {
                                    final SubLObject filename_var_$422 = compinx_file;
                                    SubLObject stream_$422 = (SubLObject)dumper.NIL;
                                    try {
                                        final SubLObject _prev_bind_0_$421 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                        try {
                                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                            stream_$422 = compatibility.open_binary(filename_var_$422, (SubLObject)dumper.$kw202$OUTPUT);
                                        }
                                        finally {
                                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$421, thread);
                                        }
                                        if (!stream_$422.isStream()) {
                                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$422);
                                        }
                                        SubLObject compinx_stream = stream_$422;
                                        if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                                            compinx_stream = file_utilities.enable_file_stream_memory_mapping(compinx_stream);
                                        }
                                        try {
                                            final SubLObject fvector = file_vector.create_file_vector(stream_$419, index_stream);
                                            final SubLObject complex_fvector = file_vector.create_file_vector(complex_stream, compinx_stream);
                                            kb_dump_stamp_file_vector_for_references(complex_fvector);
                                            final SubLObject idx = constant_handles.do_constants_table();
                                            final SubLObject mess = (SubLObject)dumper.$str422$Dumping_constant_indices;
                                            final SubLObject total = id_index.id_index_count(idx);
                                            SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                            assert dumper.NIL != Types.stringp(mess) : mess;
                                            final SubLObject _prev_bind_0_$422 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$430 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                            final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                            final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                            try {
                                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                try {
                                                    utilities_macros.noting_percent_progress_preamble(mess);
                                                    final SubLObject idx_$431 = idx;
                                                    if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$431, (SubLObject)dumper.$kw266$SKIP)) {
                                                        final SubLObject idx_$432 = idx_$431;
                                                        if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$432, (SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject vector_var = id_index.id_index_dense_objects(idx_$432);
                                                            final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                            SubLObject length;
                                                            SubLObject v_iteration;
                                                            SubLObject id;
                                                            SubLObject constant;
                                                            for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                                id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                                constant = Vectors.aref(vector_var, id);
                                                                if (dumper.NIL == id_index.id_index_tombstone_p(constant) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                    if (dumper.NIL != id_index.id_index_tombstone_p(constant)) {
                                                                        constant = (SubLObject)dumper.$kw266$SKIP;
                                                                    }
                                                                    file_vector.update_file_vector_index_linear(fvector);
                                                                    dump_constant_index(constant, stream_$419, complex_fvector);
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                }
                                                            }
                                                        }
                                                        final SubLObject idx_$433 = idx_$431;
                                                        if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$433) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject sparse = id_index.id_index_sparse_objects(idx_$433);
                                                            SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$433);
                                                            final SubLObject end_id = id_index.id_index_next_id(idx_$433);
                                                            final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                            while (id2.numL(end_id)) {
                                                                final SubLObject constant2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                                                if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(constant2)) {
                                                                    file_vector.update_file_vector_index_linear(fvector);
                                                                    dump_constant_index(constant2, stream_$419, complex_fvector);
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                }
                                                                id2 = Numbers.add(id2, (SubLObject)dumper.ONE_INTEGER);
                                                            }
                                                        }
                                                    }
                                                }
                                                finally {
                                                    final SubLObject _prev_bind_0_$423 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                        final SubLObject _values = Values.getValuesAsVector();
                                                        utilities_macros.noting_percent_progress_postamble();
                                                        Values.restoreValuesFromVector(_values);
                                                    }
                                                    finally {
                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$423, thread);
                                                    }
                                                }
                                            }
                                            finally {
                                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$430, thread);
                                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$422, thread);
                                            }
                                            possibly_persist_wide_fvector_mark(fvector, (SubLObject)dumper.$str416$indices_index, directory_path, (SubLObject)dumper.$str417$constant_indices);
                                            if (dumper.NIL != dumper.$separate_file_for_complex_indexingP$.getDynamicValue(thread)) {
                                                possibly_persist_wide_fvector_mark(complex_fvector, (SubLObject)dumper.$str419$constant_complex_indices_index, directory_path, (SubLObject)dumper.$str423$complex_constant_indices);
                                            }
                                        }
                                        finally {
                                            final SubLObject _prev_bind_0_$424 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                final SubLObject _values2 = Values.getValuesAsVector();
                                                streams_high.close(compinx_stream, (SubLObject)dumper.UNPROVIDED);
                                                Values.restoreValuesFromVector(_values2);
                                            }
                                            finally {
                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$424, thread);
                                            }
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$425 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                            final SubLObject _values3 = Values.getValuesAsVector();
                                            if (stream_$422.isStream()) {
                                                streams_high.close(stream_$422, (SubLObject)dumper.UNPROVIDED);
                                            }
                                            Values.restoreValuesFromVector(_values3);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$425, thread);
                                        }
                                    }
                                    discard_dump_filename(filename_var_$422);
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$426 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values4 = Values.getValuesAsVector();
                                        streams_high.close(complex_stream, (SubLObject)dumper.UNPROVIDED);
                                        Values.restoreValuesFromVector(_values4);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$426, thread);
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$427 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values5 = Values.getValuesAsVector();
                                    if (stream_$421.isStream()) {
                                        streams_high.close(stream_$421, (SubLObject)dumper.UNPROVIDED);
                                    }
                                    Values.restoreValuesFromVector(_values5);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$427, thread);
                                }
                            }
                            discard_dump_filename(filename_var_$421);
                        }
                        finally {
                            final SubLObject _prev_bind_0_$428 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values6 = Values.getValuesAsVector();
                                streams_high.close(index_stream, (SubLObject)dumper.UNPROVIDED);
                                Values.restoreValuesFromVector(_values6);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$428, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$429 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values7 = Values.getValuesAsVector();
                            if (stream_$420.isStream()) {
                                streams_high.close(stream_$420, (SubLObject)dumper.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values7);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$429, thread);
                        }
                    }
                    discard_dump_filename(filename_var_$420);
                }
                finally {
                    final SubLObject _prev_bind_0_$430 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values8 = Values.getValuesAsVector();
                        streams_high.close(stream_$419, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values8);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$430, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$431 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values9 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values9);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$431, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        if (dumper.NIL == dumper.$separate_file_for_complex_indexingP$.getDynamicValue(thread)) {
            final SubLObject str = (SubLObject)dumper.$str424$Cleaning_up_empty_complex_indexin;
            final SubLObject _prev_bind_5 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_9 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_10 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_11 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_12 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                Threads.sleep((SubLObject)dumper.ONE_INTEGER);
                Filesys.delete_file(complex_file);
                Filesys.delete_file(compinx_file);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_12, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_11, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_10, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_9, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_8, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_5, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 137952L)
    public static SubLObject snapshot_constant_indices(final SubLObject active_dir, final SubLObject directory_path) {
        return snapshot_managed_object_simple_complex_index((SubLObject)dumper.$sym425$SNAPSHOT_CONSTANT_INDICES_INTERNAL, (SubLObject)dumper.$str158$constant, active_dir, directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 138160L)
    public static SubLObject snapshot_constant_indices_internal(final SubLObject active_dir, final SubLObject directory_path, SubLObject widen_fvectorP, SubLObject widen_complexP) {
        if (widen_fvectorP == dumper.UNPROVIDED) {
            widen_fvectorP = (SubLObject)dumper.NIL;
        }
        if (widen_complexP == dumper.UNPROVIDED) {
            widen_complexP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        final SubLObject datum = current = replicate_fv_dump_files((SubLObject)dumper.$list426, (SubLObject)dumper.$list427, (SubLObject)ConsesLow.list(get_wide_mark_basename_from_index_basename((SubLObject)dumper.$str416$indices_index), get_wide_mark_basename_from_index_basename((SubLObject)dumper.$str419$constant_complex_indices_index)), (SubLObject)ConsesLow.list(widen_fvectorP, widen_complexP), active_dir, directory_path, Sequences.cconcatenate((SubLObject)dumper.$str428$Copying_constant_indices_from_, format_nil.format_nil_a_no_copy(active_dir)));
        SubLObject new_dfile = (SubLObject)dumper.NIL;
        SubLObject new_ifile = (SubLObject)dumper.NIL;
        SubLObject new_iwmark = (SubLObject)dumper.NIL;
        SubLObject new_cdfile = (SubLObject)dumper.NIL;
        SubLObject new_cifile = (SubLObject)dumper.NIL;
        SubLObject new_cwmark = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_dfile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_ifile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_iwmark = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_cdfile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_cifile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_cwmark = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            final SubLObject bufsize = file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread);
            final SubLObject small_bufsize = file_utilities.$default_small_stream_buffer_size$.getDynamicValue(thread);
            final SubLObject fvector = file_vector.open_file_vector_for_rewrite(new_dfile, new_ifile, new_iwmark, bufsize, small_bufsize, (SubLObject)dumper.UNPROVIDED);
            final SubLObject complex_fvector = file_vector.open_file_vector_for_append(new_cdfile, new_cifile, new_cwmark, bufsize, bufsize, (SubLObject)dumper.UNPROVIDED);
            try {
                snapshot_deleted_object_tombstones(fvector, constant_handles.deleted_constant_id_iterator(), (SubLObject)dumper.$str430$Tombstoning_deleted_constant_indi);
                compatibility.set_file_position(file_vector.get_file_vector_data_stream(fvector), (SubLObject)dumper.$kw317$END);
                snapshot_changed_managed_objects(fvector, complex_fvector, constant_index_manager.new_muted_constant_index_iterator(), (SubLObject)dumper.$sym431$FIND_CONSTANT_BY_SUID, (SubLObject)dumper.$sym432$SNAPSHOT_CONSTANT_INDEX, (SubLObject)dumper.$str433$Updating_changed_constant_indices);
                if (dumper.NIL != constant_handles.has_new_constantsP()) {
                    file_vector.file_vector_change_stream_buffer_sizes(fvector, bufsize, bufsize);
                    snapshot_new_managed_objects(fvector, constant_handles.new_new_constants_iterator(), constant_index_manager.get_file_backed_constant_internal_id_threshold(), (SubLObject)dumper.$sym434$CONSTANT_SUID, (SubLObject)dumper.$sym421$DUMP_CONSTANT_INDEX, (SubLObject)dumper.$str435$Appending_new_constant_indices, complex_fvector);
                }
                possibly_persist_wide_fvector_mark(fvector, (SubLObject)dumper.$str416$indices_index, directory_path, (SubLObject)dumper.$str417$constant_indices);
                possibly_persist_wide_fvector_mark(complex_fvector, (SubLObject)dumper.$str419$constant_complex_indices_index, directory_path, (SubLObject)dumper.$str423$complex_constant_indices);
            }
            finally {
                final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    file_vector.close_file_vector(fvector);
                    file_vector.close_file_vector(complex_fvector);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                }
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list429);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 141137L)
    public static SubLObject new_niniveh_constant_indices_iterator(final SubLObject directory_path) {
        return new_niniveh_index_iterator((SubLObject)dumper.$str159$indices, directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 141275L)
    public static SubLObject load_constant_indices(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str159$indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject index_file = kb_dump_file((SubLObject)dumper.$str416$indices_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject complex_file = kb_dump_file((SubLObject)dumper.$str418$constant_complex_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject compinx_file = kb_dump_file((SubLObject)dumper.$str419$constant_complex_indices_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != Filesys.probe_file(complex_file)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str436$__Constant_indexing_will_be_swapp, cfasl_file, index_file);
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str437$__Constant_complex_indexing_will_, complex_file, compinx_file);
            constant_index_manager.initialize_constant_index_hl_store_cache();
            if (dumper.NIL != constant_index_manager.wide_constant_index_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str438$___Constant_indices_use_wide_inde);
            }
            if (dumper.NIL != constant_index_manager.wide_constant_complex_index_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str439$___Constant_complex_indices_use_w);
            }
        }
        else if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != Filesys.probe_file(index_file)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str436$__Constant_indexing_will_be_swapp, cfasl_file, index_file);
            constant_index_manager.initialize_constant_index_hl_store_cache();
            if (dumper.NIL != constant_index_manager.wide_constant_index_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str438$___Constant_indices_use_wide_inde);
            }
        }
        else if (dumper.NIL != dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != has_deleted_constant_id_setP(directory_path)) {
            Errors.error((SubLObject)dumper.$str326$Not_yet_implemented_);
        }
        else if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$443 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$443 = file_utilities.enable_file_stream_memory_mapping(stream_$443);
                }
                try {
                    final SubLObject total = constant_handles.constant_count();
                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                    load_copyright(stream_$443);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str440$Loading_constant_indices);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$443, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$443, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                utilities_macros.note_percent_progress(sofar, total);
                                if (dump_id.isInteger()) {
                                    load_constant_index(dump_id, stream_$443);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$444 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$444, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$443, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 143747L)
    public static SubLObject dump_constant_index(final SubLObject constant, final SubLObject stream, final SubLObject fvector) {
        final SubLObject index = constants_low.constant_index(constant);
        final SubLObject id = constants_high.constant_dump_id(constant);
        dump_top_level_index_of_type(constant, id, index, stream, (SubLObject)dumper.$str158$constant, fvector, (SubLObject)dumper.$kw374$CONSTANT_INDEX);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 144014L)
    public static SubLObject dump_top_level_index_of_type(final SubLObject v_object, final SubLObject id, SubLObject index, final SubLObject stream, final SubLObject type_name, final SubLObject fvector, final SubLObject type_code) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$separate_file_for_complex_indexingP$.getDynamicValue(thread) && dumper.NIL != kb_indexing_datastructures.complex_index_p(index)) {
            SubLObject problem = (SubLObject)dumper.NIL;
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)dumper.$sym147$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        index = indexing_utilities.dump_entire_swappable_complex_index(index, fvector, type_code);
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)dumper.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                problem = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
            if (problem.isString()) {
                Errors.error((SubLObject)dumper.$str441$Could_not_dump_the__A_index_for__, new SubLObject[] { type_name, v_object, id, problem });
            }
        }
        cfasl.cfasl_output(id, stream);
        cfasl.cfasl_output(index, stream);
        return v_object;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 144651L)
    public static SubLObject snapshot_constant_index(final SubLObject constant, final SubLObject old_index, final SubLObject data_stream, final SubLObject complex_fvector) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject index = old_index;
        if (dumper.NIL != kb_indexing_datastructures.complex_index_p(index)) {
            SubLObject problem = (SubLObject)dumper.NIL;
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)dumper.$sym147$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        index = indexing_utilities.dump_changed_swappable_complex_index(index, complex_fvector, (SubLObject)dumper.$kw374$CONSTANT_INDEX);
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)dumper.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                problem = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
            if (problem.isString()) {
                Errors.error((SubLObject)dumper.$str442$Could_not_dump_the_constant_index, constant, constant_handles.constant_suid(constant), problem);
            }
        }
        cfasl.cfasl_output(constants_high.constant_dump_id(constant), data_stream);
        cfasl.cfasl_output(index, data_stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 145252L)
    public static SubLObject load_constant_index(final SubLObject dump_id, final SubLObject stream) {
        final SubLObject constant = constants_high.find_constant_by_dump_id(dump_id);
        return constants_low.reset_constant_index(constant, cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 145427L)
    public static SubLObject load_constant_index_from_cache(final SubLObject dump_id, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject index = (SubLObject)dumper.NIL;
        final SubLObject _prev_bind_0 = cfasl.$within_cfasl_externalization$.currentBinding(thread);
        try {
            cfasl.$within_cfasl_externalization$.bind((SubLObject)dumper.NIL, thread);
            index = load_constant_index(dump_id, stream);
        }
        finally {
            cfasl.$within_cfasl_externalization$.rebind(_prev_bind_0, thread);
        }
        return index;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 145627L)
    public static SubLObject new_nart_indices_writer(final SubLObject directory_path) {
        return new_index_writer(directory_path, (SubLObject)dumper.$str444$nat_indices, (SubLObject)dumper.$str445$nat_indices_index, (SubLObject)dumper.$str446$NART_indices, (SubLObject)dumper.$str447$nat_complex_indices, (SubLObject)dumper.$str448$nat_complex_indices_index, (SubLObject)dumper.$str449$complex_NART_indices, (SubLObject)dumper.$sym450$DUMP_NART_INDEX);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 145965L)
    public static SubLObject dump_nart_indices(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject indices_file = kb_dump_file((SubLObject)dumper.$str444$nat_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject indices_index_file = kb_dump_file((SubLObject)dumper.$str445$nat_indices_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject complex_file = kb_dump_file((SubLObject)dumper.$str447$nat_complex_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject compinx_file = kb_dump_file((SubLObject)dumper.$str448$nat_complex_indices_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var = indices_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$445 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$445, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$446 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$446 = file_utilities.enable_file_stream_memory_mapping(stream_$446);
                }
                try {
                    final SubLObject filename_var_$447 = indices_index_file;
                    SubLObject stream_$447 = (SubLObject)dumper.NIL;
                    try {
                        final SubLObject _prev_bind_0_$446 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                            stream_$447 = compatibility.open_binary(filename_var_$447, (SubLObject)dumper.$kw202$OUTPUT);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$446, thread);
                        }
                        if (!stream_$447.isStream()) {
                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$447);
                        }
                        SubLObject index_stream = stream_$447;
                        if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                            index_stream = file_utilities.enable_file_stream_memory_mapping(index_stream);
                        }
                        try {
                            dump_copyright(stream_$446);
                            final SubLObject filename_var_$448 = complex_file;
                            SubLObject stream_$448 = (SubLObject)dumper.NIL;
                            try {
                                final SubLObject _prev_bind_0_$447 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                try {
                                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                    stream_$448 = compatibility.open_binary(filename_var_$448, (SubLObject)dumper.$kw202$OUTPUT);
                                }
                                finally {
                                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$447, thread);
                                }
                                if (!stream_$448.isStream()) {
                                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$448);
                                }
                                SubLObject complex_stream = stream_$448;
                                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                                    complex_stream = file_utilities.enable_file_stream_memory_mapping(complex_stream);
                                }
                                try {
                                    final SubLObject filename_var_$449 = compinx_file;
                                    SubLObject stream_$449 = (SubLObject)dumper.NIL;
                                    try {
                                        final SubLObject _prev_bind_0_$448 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                        try {
                                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                            stream_$449 = compatibility.open_binary(filename_var_$449, (SubLObject)dumper.$kw202$OUTPUT);
                                        }
                                        finally {
                                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$448, thread);
                                        }
                                        if (!stream_$449.isStream()) {
                                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$449);
                                        }
                                        SubLObject compinx_stream = stream_$449;
                                        if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                                            compinx_stream = file_utilities.enable_file_stream_memory_mapping(compinx_stream);
                                        }
                                        try {
                                            dump_copyright(complex_stream);
                                            final SubLObject fvector = file_vector.create_file_vector(stream_$446, index_stream);
                                            final SubLObject complex_fvector = file_vector.create_file_vector(complex_stream, compinx_stream);
                                            kb_dump_stamp_file_vector_for_references(complex_fvector);
                                            final SubLObject idx = nart_handles.do_narts_table();
                                            final SubLObject mess = (SubLObject)dumper.$str451$Dumping_NART_indices;
                                            final SubLObject total = id_index.id_index_count(idx);
                                            SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                            assert dumper.NIL != Types.stringp(mess) : mess;
                                            final SubLObject _prev_bind_0_$449 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$457 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                            final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                            final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                            try {
                                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                try {
                                                    utilities_macros.noting_percent_progress_preamble(mess);
                                                    final SubLObject idx_$458 = idx;
                                                    if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$458, (SubLObject)dumper.$kw266$SKIP)) {
                                                        final SubLObject idx_$459 = idx_$458;
                                                        if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$459, (SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject vector_var = id_index.id_index_dense_objects(idx_$459);
                                                            final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                            SubLObject length;
                                                            SubLObject v_iteration;
                                                            SubLObject id;
                                                            SubLObject nart;
                                                            for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                                id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                                nart = Vectors.aref(vector_var, id);
                                                                if (dumper.NIL == id_index.id_index_tombstone_p(nart) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                    if (dumper.NIL != id_index.id_index_tombstone_p(nart)) {
                                                                        nart = (SubLObject)dumper.$kw266$SKIP;
                                                                    }
                                                                    file_vector.update_file_vector_index_linear(fvector);
                                                                    dump_nart_index(nart, stream_$446, complex_fvector);
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                }
                                                            }
                                                        }
                                                        final SubLObject idx_$460 = idx_$458;
                                                        if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$460) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject sparse = id_index.id_index_sparse_objects(idx_$460);
                                                            SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$460);
                                                            final SubLObject end_id = id_index.id_index_next_id(idx_$460);
                                                            final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                            while (id2.numL(end_id)) {
                                                                final SubLObject nart2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                                                if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(nart2)) {
                                                                    file_vector.update_file_vector_index_linear(fvector);
                                                                    dump_nart_index(nart2, stream_$446, complex_fvector);
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                }
                                                                id2 = Numbers.add(id2, (SubLObject)dumper.ONE_INTEGER);
                                                            }
                                                        }
                                                    }
                                                }
                                                finally {
                                                    final SubLObject _prev_bind_0_$450 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                        final SubLObject _values = Values.getValuesAsVector();
                                                        utilities_macros.noting_percent_progress_postamble();
                                                        Values.restoreValuesFromVector(_values);
                                                    }
                                                    finally {
                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$450, thread);
                                                    }
                                                }
                                            }
                                            finally {
                                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$457, thread);
                                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$449, thread);
                                            }
                                            possibly_persist_wide_fvector_mark(fvector, (SubLObject)dumper.$str445$nat_indices_index, directory_path, (SubLObject)dumper.$str446$NART_indices);
                                            if (dumper.NIL != dumper.$separate_file_for_complex_indexingP$.getDynamicValue(thread)) {
                                                possibly_persist_wide_fvector_mark(complex_fvector, (SubLObject)dumper.$str452$nart_complex_indices_index, directory_path, (SubLObject)dumper.$str449$complex_NART_indices);
                                            }
                                        }
                                        finally {
                                            final SubLObject _prev_bind_0_$451 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                final SubLObject _values2 = Values.getValuesAsVector();
                                                streams_high.close(compinx_stream, (SubLObject)dumper.UNPROVIDED);
                                                Values.restoreValuesFromVector(_values2);
                                            }
                                            finally {
                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$451, thread);
                                            }
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$452 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                            final SubLObject _values3 = Values.getValuesAsVector();
                                            if (stream_$449.isStream()) {
                                                streams_high.close(stream_$449, (SubLObject)dumper.UNPROVIDED);
                                            }
                                            Values.restoreValuesFromVector(_values3);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$452, thread);
                                        }
                                    }
                                    discard_dump_filename(filename_var_$449);
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$453 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values4 = Values.getValuesAsVector();
                                        streams_high.close(complex_stream, (SubLObject)dumper.UNPROVIDED);
                                        Values.restoreValuesFromVector(_values4);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$453, thread);
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$454 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values5 = Values.getValuesAsVector();
                                    if (stream_$448.isStream()) {
                                        streams_high.close(stream_$448, (SubLObject)dumper.UNPROVIDED);
                                    }
                                    Values.restoreValuesFromVector(_values5);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$454, thread);
                                }
                            }
                            discard_dump_filename(filename_var_$448);
                        }
                        finally {
                            final SubLObject _prev_bind_0_$455 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values6 = Values.getValuesAsVector();
                                streams_high.close(index_stream, (SubLObject)dumper.UNPROVIDED);
                                Values.restoreValuesFromVector(_values6);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$455, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$456 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values7 = Values.getValuesAsVector();
                            if (stream_$447.isStream()) {
                                streams_high.close(stream_$447, (SubLObject)dumper.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values7);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$456, thread);
                        }
                    }
                    discard_dump_filename(filename_var_$447);
                }
                finally {
                    final SubLObject _prev_bind_0_$457 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values8 = Values.getValuesAsVector();
                        streams_high.close(stream_$446, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values8);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$457, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$458 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values9 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values9);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$458, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        if (dumper.NIL == dumper.$separate_file_for_complex_indexingP$.getDynamicValue(thread)) {
            final SubLObject str = (SubLObject)dumper.$str424$Cleaning_up_empty_complex_indexin;
            final SubLObject _prev_bind_5 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_9 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_10 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_11 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_12 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                Threads.sleep((SubLObject)dumper.ONE_INTEGER);
                Filesys.delete_file(complex_file);
                Filesys.delete_file(compinx_file);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_12, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_11, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_10, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_9, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_8, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_5, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 147891L)
    public static SubLObject snapshot_nart_indices(final SubLObject active_dir, final SubLObject directory_path) {
        return snapshot_managed_object_simple_complex_index((SubLObject)dumper.$sym453$SNAPSHOT_NART_INDICES_INTERNAL, (SubLObject)dumper.$str454$NAT, active_dir, directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 148086L)
    public static SubLObject snapshot_nart_indices_internal(final SubLObject active_dir, final SubLObject directory_path, SubLObject widen_fvectorP, SubLObject widen_complexP) {
        if (widen_fvectorP == dumper.UNPROVIDED) {
            widen_fvectorP = (SubLObject)dumper.NIL;
        }
        if (widen_complexP == dumper.UNPROVIDED) {
            widen_complexP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        final SubLObject datum = current = replicate_fv_dump_files((SubLObject)dumper.$list455, (SubLObject)dumper.$list456, (SubLObject)ConsesLow.list(get_wide_mark_basename_from_index_basename((SubLObject)dumper.$str445$nat_indices_index), get_wide_mark_basename_from_index_basename((SubLObject)dumper.$str448$nat_complex_indices_index)), (SubLObject)ConsesLow.list(widen_fvectorP, widen_complexP), active_dir, directory_path, Sequences.cconcatenate((SubLObject)dumper.$str457$Copying_NAT_indices_from_, format_nil.format_nil_a_no_copy(active_dir)));
        SubLObject new_dfile = (SubLObject)dumper.NIL;
        SubLObject new_ifile = (SubLObject)dumper.NIL;
        SubLObject new_iwmark = (SubLObject)dumper.NIL;
        SubLObject new_cdfile = (SubLObject)dumper.NIL;
        SubLObject new_cifile = (SubLObject)dumper.NIL;
        SubLObject new_cwmark = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_dfile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_ifile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_iwmark = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_cdfile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_cifile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_cwmark = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            final SubLObject bufsize = file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread);
            final SubLObject small_bufsize = file_utilities.$default_small_stream_buffer_size$.getDynamicValue(thread);
            final SubLObject fvector = file_vector.open_file_vector_for_rewrite(new_dfile, new_ifile, new_iwmark, bufsize, small_bufsize, (SubLObject)dumper.UNPROVIDED);
            final SubLObject complex_fvector = file_vector.open_file_vector_for_append(new_cdfile, new_cifile, new_cwmark, bufsize, bufsize, (SubLObject)dumper.UNPROVIDED);
            try {
                snapshot_deleted_object_tombstones(fvector, nart_handles.deleted_nart_id_iterator(), (SubLObject)dumper.$str458$Tombstoning_deleted_NAT_indices);
                compatibility.set_file_position(file_vector.get_file_vector_data_stream(fvector), (SubLObject)dumper.$kw317$END);
                snapshot_changed_managed_objects(fvector, complex_fvector, nart_index_manager.new_muted_nart_index_iterator(), (SubLObject)dumper.$sym459$FIND_NART_BY_ID, (SubLObject)dumper.$sym460$SNAPSHOT_NART_INDEX, (SubLObject)dumper.$str461$Updating_changed_NAT_indices);
                if (dumper.NIL != nart_handles.has_new_nartsP()) {
                    file_vector.file_vector_change_stream_buffer_sizes(fvector, bufsize, bufsize);
                    snapshot_new_managed_objects(fvector, nart_handles.new_new_narts_iterator(), nart_handles.get_file_backed_nart_internal_id_threshold(), (SubLObject)dumper.$sym462$NART_ID, (SubLObject)dumper.$sym450$DUMP_NART_INDEX, (SubLObject)dumper.$str463$Appending_new_NAT_indices, complex_fvector);
                }
                possibly_persist_wide_fvector_mark(fvector, (SubLObject)dumper.$str445$nat_indices_index, directory_path, (SubLObject)dumper.$str464$NAT_indices);
                possibly_persist_wide_fvector_mark(complex_fvector, (SubLObject)dumper.$str448$nat_complex_indices_index, directory_path, (SubLObject)dumper.$str465$complex_NAT_indices);
            }
            finally {
                final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    file_vector.close_file_vector(fvector);
                    file_vector.close_file_vector(complex_fvector);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                }
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list429);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 150999L)
    public static SubLObject new_niniveh_nart_indices_iterator(final SubLObject directory_path) {
        return new_niniveh_index_iterator((SubLObject)dumper.$str444$nat_indices, directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 151136L)
    public static SubLObject load_nart_indices(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject indices_file = kb_dump_file((SubLObject)dumper.$str444$nat_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject indices_index_file = kb_dump_file((SubLObject)dumper.$str445$nat_indices_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject complex_file = kb_dump_file((SubLObject)dumper.$str447$nat_complex_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject compinx_file = kb_dump_file((SubLObject)dumper.$str448$nat_complex_indices_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != Filesys.probe_file(complex_file)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str466$__NART_indexing_will_be_swapped_i, indices_file, indices_index_file);
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str467$__NART_complex_indexing_will_be_s, complex_file, compinx_file);
            nart_index_manager.initialize_nart_index_hl_store_cache();
            if (dumper.NIL != nart_index_manager.wide_nart_index_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str468$___NART_indices_use_wide_index_en);
            }
            if (dumper.NIL != nart_index_manager.wide_nart_complex_index_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str469$___NART_complex_indices_use_wide_);
            }
        }
        else if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != Filesys.probe_file(indices_index_file)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str466$__NART_indexing_will_be_swapped_i, indices_file, indices_index_file);
            nart_index_manager.initialize_nart_index_hl_store_cache();
            if (dumper.NIL != nart_index_manager.wide_nart_index_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str468$___NART_indices_use_wide_index_en);
            }
        }
        else if (dumper.NIL != verify_file_existence(indices_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = indices_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$470 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$470 = file_utilities.enable_file_stream_memory_mapping(stream_$470);
                }
                try {
                    final SubLObject total = nart_handles.nart_count();
                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                    load_copyright(stream_$470);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str470$Loading_NART_indices);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$470, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$470, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                utilities_macros.note_percent_progress(sofar, total);
                                if (dump_id.isInteger()) {
                                    load_nart_index(dump_id, stream_$470);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$471 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$471, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$470, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 153195L)
    public static SubLObject dump_nart_index(final SubLObject nart, final SubLObject stream, final SubLObject fvector) {
        final SubLObject index = narts_low.nart_index(nart);
        final SubLObject id = narts_high.nart_dump_id(nart);
        dump_top_level_index_of_type(nart, id, index, stream, (SubLObject)dumper.$str275$NART, fvector, (SubLObject)dumper.$kw375$NART_INDEX);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 153426L)
    public static SubLObject snapshot_nart_index(final SubLObject nart, final SubLObject old_index, final SubLObject data_stream, final SubLObject complex_fvector) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject index = old_index;
        if (dumper.NIL != kb_indexing_datastructures.complex_index_p(index)) {
            SubLObject problem = (SubLObject)dumper.NIL;
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)dumper.$sym147$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        index = indexing_utilities.dump_changed_swappable_complex_index(index, complex_fvector, (SubLObject)dumper.$kw375$NART_INDEX);
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)dumper.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                problem = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
            if (problem.isString()) {
                Errors.error((SubLObject)dumper.$str471$Could_not_dump_the_NART_index_for, nart, nart_handles.nart_id(nart), problem);
            }
        }
        cfasl.cfasl_output(narts_high.nart_dump_id(nart), data_stream);
        cfasl.cfasl_output(index, data_stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 153988L)
    public static SubLObject load_nart_index(final SubLObject dump_id, final SubLObject stream) {
        final SubLObject nart = narts_high.find_nart_by_dump_id(dump_id);
        return narts_low.reset_nart_index(nart, cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 154143L)
    public static SubLObject load_nart_index_from_cache(final SubLObject dump_id, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject index = (SubLObject)dumper.NIL;
        final SubLObject _prev_bind_0 = cfasl.$within_cfasl_externalization$.currentBinding(thread);
        try {
            cfasl.$within_cfasl_externalization$.bind((SubLObject)dumper.NIL, thread);
            index = load_nart_index(dump_id, stream);
        }
        finally {
            cfasl.$within_cfasl_externalization$.rebind(_prev_bind_0, thread);
        }
        return index;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 154335L)
    public static SubLObject new_unrepresented_term_indices_writer(final SubLObject directory_path) {
        return new_index_writer(directory_path, (SubLObject)dumper.$str473$unrepresented_term_indices, (SubLObject)dumper.$str474$unrepresented_term_indices_index, (SubLObject)dumper.$str475$unrepresented_term_indices, (SubLObject)dumper.$str476$unrepresented_term_complex_indice, (SubLObject)dumper.$str477$unrepresented_term_complex_indice, (SubLObject)dumper.$str478$complex_unrepresented_term_indice, (SubLObject)dumper.$sym479$DUMP_UNREPRESENTED_TERM_INDEX);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 154857L)
    public static SubLObject dump_unrepresented_term_indices(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject indices_file = kb_dump_file((SubLObject)dumper.$str473$unrepresented_term_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject indices_index_file = kb_dump_file((SubLObject)dumper.$str474$unrepresented_term_indices_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject complex_file = kb_dump_file((SubLObject)dumper.$str476$unrepresented_term_complex_indice, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject compinx_file = kb_dump_file((SubLObject)dumper.$str477$unrepresented_term_complex_indice, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var = indices_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$472 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$472, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$473 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$473 = file_utilities.enable_file_stream_memory_mapping(stream_$473);
                }
                try {
                    final SubLObject filename_var_$474 = indices_index_file;
                    SubLObject stream_$474 = (SubLObject)dumper.NIL;
                    try {
                        final SubLObject _prev_bind_0_$473 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                            stream_$474 = compatibility.open_binary(filename_var_$474, (SubLObject)dumper.$kw202$OUTPUT);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$473, thread);
                        }
                        if (!stream_$474.isStream()) {
                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$474);
                        }
                        SubLObject index_stream = stream_$474;
                        if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                            index_stream = file_utilities.enable_file_stream_memory_mapping(index_stream);
                        }
                        try {
                            dump_copyright(stream_$473);
                            final SubLObject filename_var_$475 = complex_file;
                            SubLObject stream_$475 = (SubLObject)dumper.NIL;
                            try {
                                final SubLObject _prev_bind_0_$474 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                try {
                                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                    stream_$475 = compatibility.open_binary(filename_var_$475, (SubLObject)dumper.$kw202$OUTPUT);
                                }
                                finally {
                                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$474, thread);
                                }
                                if (!stream_$475.isStream()) {
                                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$475);
                                }
                                SubLObject complex_stream = stream_$475;
                                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                                    complex_stream = file_utilities.enable_file_stream_memory_mapping(complex_stream);
                                }
                                try {
                                    final SubLObject filename_var_$476 = compinx_file;
                                    SubLObject stream_$476 = (SubLObject)dumper.NIL;
                                    try {
                                        final SubLObject _prev_bind_0_$475 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                        try {
                                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                            stream_$476 = compatibility.open_binary(filename_var_$476, (SubLObject)dumper.$kw202$OUTPUT);
                                        }
                                        finally {
                                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$475, thread);
                                        }
                                        if (!stream_$476.isStream()) {
                                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$476);
                                        }
                                        SubLObject compinx_stream = stream_$476;
                                        if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                                            compinx_stream = file_utilities.enable_file_stream_memory_mapping(compinx_stream);
                                        }
                                        try {
                                            dump_copyright(complex_stream);
                                            final SubLObject fvector = file_vector.create_file_vector(stream_$473, index_stream);
                                            final SubLObject complex_fvector = file_vector.create_file_vector(complex_stream, compinx_stream);
                                            kb_dump_stamp_file_vector_for_references(complex_fvector);
                                            if (dumper.NIL != unrepresented_terms.use_unrepresented_term_fhtP()) {
                                                SubLObject msg = Sequences.cconcatenate((SubLObject)dumper.$str480$Dumping_unrepresented_term_indice, (SubLObject)dumper.$str292$____Old_Space);
                                                SubLObject release = (SubLObject)dumper.NIL;
                                                try {
                                                    release = Locks.seize_lock(unrepresented_terms.$unrepresented_term_fht_lock$.getGlobalValue());
                                                    final SubLObject table_var = unrepresented_terms.get_unrepresented_term_fht();
                                                    utilities_macros.$progress_note$.setDynamicValue(msg, thread);
                                                    utilities_macros.$progress_start_time$.setDynamicValue(Time.get_universal_time(), thread);
                                                    utilities_macros.$progress_total$.setDynamicValue(file_hash_table.file_hash_table_count(table_var), thread);
                                                    utilities_macros.$progress_sofar$.setDynamicValue((SubLObject)dumper.ZERO_INTEGER, thread);
                                                    final SubLObject _prev_bind_0_$476 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$484 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                                    final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                                    final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                                    try {
                                                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                        try {
                                                            utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                                            SubLObject continuation = (SubLObject)dumper.NIL;
                                                            SubLObject next;
                                                            for (SubLObject completeP = (SubLObject)dumper.NIL; dumper.NIL == completeP; completeP = Types.sublisp_null(next)) {
                                                                thread.resetMultipleValues();
                                                                final SubLObject the_key = file_hash_table.get_file_hash_table_any(table_var, continuation, (SubLObject)dumper.NIL);
                                                                final SubLObject the_value = thread.secondMultipleValue();
                                                                next = thread.thirdMultipleValue();
                                                                thread.resetMultipleValues();
                                                                if (dumper.NIL != next) {
                                                                    final SubLObject key = the_key;
                                                                    final SubLObject unrepresented_term = the_value;
                                                                    utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                                                    utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)dumper.ONE_INTEGER), thread);
                                                                    if (dumper.NIL == unrepresented_terms.deleted_unrepresented_term_itemP(key) && dumper.NIL != unrepresented_terms.fht_suid_item_p(key)) {
                                                                        final SubLObject id = unrepresented_terms.get_fht_suid_item_suid(key);
                                                                        file_vector.update_file_vector_index_linear(fvector);
                                                                        dump_unrepresented_term_index(unrepresented_term, stream_$473, complex_fvector);
                                                                    }
                                                                }
                                                                continuation = next;
                                                            }
                                                        }
                                                        finally {
                                                            final SubLObject _prev_bind_0_$477 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                                final SubLObject _values = Values.getValuesAsVector();
                                                                utilities_macros.noting_percent_progress_postamble();
                                                                Values.restoreValuesFromVector(_values);
                                                            }
                                                            finally {
                                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$477, thread);
                                                            }
                                                        }
                                                    }
                                                    finally {
                                                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                                                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                                                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$484, thread);
                                                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$476, thread);
                                                    }
                                                }
                                                finally {
                                                    if (dumper.NIL != release) {
                                                        Locks.release_lock(unrepresented_terms.$unrepresented_term_fht_lock$.getGlobalValue());
                                                    }
                                                }
                                                msg = Sequences.cconcatenate((SubLObject)dumper.$str480$Dumping_unrepresented_term_indice, (SubLObject)dumper.$str293$____New_Space);
                                                if (dumper.NIL != unrepresented_terms.use_unrepresented_term_fhtP()) {
                                                    final SubLObject list_var = unrepresented_terms.get_unrepresented_term_new_space_ascending_suid_keys();
                                                    final SubLObject _prev_bind_0_$478 = utilities_macros.$progress_note$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$485 = utilities_macros.$progress_start_time$.currentBinding(thread);
                                                    final SubLObject _prev_bind_3 = utilities_macros.$progress_total$.currentBinding(thread);
                                                    final SubLObject _prev_bind_4 = utilities_macros.$progress_sofar$.currentBinding(thread);
                                                    final SubLObject _prev_bind_5 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                                    final SubLObject _prev_bind_6 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                                    final SubLObject _prev_bind_7 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                                    final SubLObject _prev_bind_8 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                                    try {
                                                        utilities_macros.$progress_note$.bind((SubLObject)((dumper.NIL != msg) ? msg : dumper.$str63$cdolist), thread);
                                                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                                                        utilities_macros.$progress_total$.bind(Sequences.length(list_var), thread);
                                                        utilities_macros.$progress_sofar$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                        try {
                                                            utilities_macros.noting_percent_progress_preamble(utilities_macros.$progress_note$.getDynamicValue(thread));
                                                            SubLObject csome_list_var = list_var;
                                                            SubLObject suid_item = (SubLObject)dumper.NIL;
                                                            suid_item = csome_list_var.first();
                                                            while (dumper.NIL != csome_list_var) {
                                                                final SubLObject id2 = unrepresented_terms.get_fht_suid_item_suid(suid_item);
                                                                final SubLObject unrepresented_term2 = unrepresented_terms.find_unrepresented_term_by_suid(id2);
                                                                file_vector.update_file_vector_index_linear(fvector);
                                                                dump_unrepresented_term_index(unrepresented_term2, stream_$473, complex_fvector);
                                                                utilities_macros.$progress_sofar$.setDynamicValue(Numbers.add(utilities_macros.$progress_sofar$.getDynamicValue(thread), (SubLObject)dumper.ONE_INTEGER), thread);
                                                                utilities_macros.note_percent_progress(utilities_macros.$progress_sofar$.getDynamicValue(thread), utilities_macros.$progress_total$.getDynamicValue(thread));
                                                                csome_list_var = csome_list_var.rest();
                                                                suid_item = csome_list_var.first();
                                                            }
                                                        }
                                                        finally {
                                                            final SubLObject _prev_bind_0_$479 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                                final SubLObject _values2 = Values.getValuesAsVector();
                                                                utilities_macros.noting_percent_progress_postamble();
                                                                Values.restoreValuesFromVector(_values2);
                                                            }
                                                            finally {
                                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$479, thread);
                                                            }
                                                        }
                                                    }
                                                    finally {
                                                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_8, thread);
                                                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_7, thread);
                                                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_6, thread);
                                                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_5, thread);
                                                        utilities_macros.$progress_sofar$.rebind(_prev_bind_4, thread);
                                                        utilities_macros.$progress_total$.rebind(_prev_bind_3, thread);
                                                        utilities_macros.$progress_start_time$.rebind(_prev_bind_1_$485, thread);
                                                        utilities_macros.$progress_note$.rebind(_prev_bind_0_$478, thread);
                                                    }
                                                }
                                                else {
                                                    final SubLObject table_var = unrepresented_terms.do_unrepresented_terms_table();
                                                    final SubLObject first_id_var = unrepresented_terms.new_unrepresented_term_id_threshold();
                                                    final SubLObject total = Numbers.subtract(id_index.id_index_next_id(table_var), first_id_var);
                                                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                                    final SubLObject _prev_bind_0_$480 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                                    final SubLObject _prev_bind_1_$486 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                                    final SubLObject _prev_bind_9 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                                    final SubLObject _prev_bind_10 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                                    try {
                                                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                        try {
                                                            utilities_macros.noting_percent_progress_preamble(msg);
                                                            SubLObject unrepresented_term;
                                                            SubLObject end_var;
                                                            SubLObject end;
                                                            SubLObject id3;
                                                            SubLObject id_$491;
                                                            for (end = (end_var = id_index.id_index_next_id(table_var)), id3 = (SubLObject)dumper.NIL, id3 = first_id_var; !id3.numGE(end_var); id3 = number_utilities.f_1X(id3)) {
                                                                unrepresented_term = id_index.id_index_lookup(table_var, id3, (SubLObject)dumper.UNPROVIDED);
                                                                if (dumper.NIL != unrepresented_term) {
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    id_$491 = unrepresented_terms.unrepresented_term_suid(unrepresented_term);
                                                                    file_vector.update_file_vector_index_linear(fvector);
                                                                    dump_unrepresented_term_index(unrepresented_term, stream_$473, complex_fvector);
                                                                }
                                                            }
                                                        }
                                                        finally {
                                                            final SubLObject _prev_bind_0_$481 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                            try {
                                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                                final SubLObject _values3 = Values.getValuesAsVector();
                                                                utilities_macros.noting_percent_progress_postamble();
                                                                Values.restoreValuesFromVector(_values3);
                                                            }
                                                            finally {
                                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$481, thread);
                                                            }
                                                        }
                                                    }
                                                    finally {
                                                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_10, thread);
                                                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_9, thread);
                                                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$486, thread);
                                                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$480, thread);
                                                    }
                                                }
                                            }
                                            else {
                                                final SubLObject idx = unrepresented_terms.do_unrepresented_terms_table();
                                                final SubLObject mess = (SubLObject)dumper.$str480$Dumping_unrepresented_term_indice;
                                                final SubLObject total2 = id_index.id_index_count(idx);
                                                SubLObject sofar2 = (SubLObject)dumper.ZERO_INTEGER;
                                                assert dumper.NIL != Types.stringp(mess) : mess;
                                                final SubLObject _prev_bind_0_$482 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                                final SubLObject _prev_bind_1_$487 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                                final SubLObject _prev_bind_11 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                                final SubLObject _prev_bind_12 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                                try {
                                                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                    try {
                                                        utilities_macros.noting_percent_progress_preamble(mess);
                                                        final SubLObject idx_$495 = idx;
                                                        if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$495, (SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject idx_$496 = idx_$495;
                                                            if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$496, (SubLObject)dumper.$kw266$SKIP)) {
                                                                final SubLObject vector_var = id_index.id_index_dense_objects(idx_$496);
                                                                final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                                SubLObject id;
                                                                SubLObject length;
                                                                SubLObject v_iteration;
                                                                SubLObject unrepresented_term3;
                                                                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                                    id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                                    unrepresented_term3 = Vectors.aref(vector_var, id);
                                                                    if (dumper.NIL == id_index.id_index_tombstone_p(unrepresented_term3) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                        if (dumper.NIL != id_index.id_index_tombstone_p(unrepresented_term3)) {
                                                                            unrepresented_term3 = (SubLObject)dumper.$kw266$SKIP;
                                                                        }
                                                                        file_vector.update_file_vector_index_linear(fvector);
                                                                        dump_unrepresented_term_index(unrepresented_term3, stream_$473, complex_fvector);
                                                                        sofar2 = Numbers.add(sofar2, (SubLObject)dumper.ONE_INTEGER);
                                                                        utilities_macros.note_percent_progress(sofar2, total2);
                                                                    }
                                                                }
                                                            }
                                                            final SubLObject idx_$497 = idx_$495;
                                                            if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$497) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                final SubLObject sparse = id_index.id_index_sparse_objects(idx_$497);
                                                                SubLObject id4 = id_index.id_index_sparse_id_threshold(idx_$497);
                                                                final SubLObject end_id = id_index.id_index_next_id(idx_$497);
                                                                final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                                while (id4.numL(end_id)) {
                                                                    final SubLObject unrepresented_term2 = Hashtables.gethash_without_values(id4, sparse, v_default);
                                                                    if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(unrepresented_term2)) {
                                                                        file_vector.update_file_vector_index_linear(fvector);
                                                                        dump_unrepresented_term_index(unrepresented_term2, stream_$473, complex_fvector);
                                                                        sofar2 = Numbers.add(sofar2, (SubLObject)dumper.ONE_INTEGER);
                                                                        utilities_macros.note_percent_progress(sofar2, total2);
                                                                    }
                                                                    id4 = Numbers.add(id4, (SubLObject)dumper.ONE_INTEGER);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    finally {
                                                        final SubLObject _prev_bind_0_$483 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                        try {
                                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                            final SubLObject _values4 = Values.getValuesAsVector();
                                                            utilities_macros.noting_percent_progress_postamble();
                                                            Values.restoreValuesFromVector(_values4);
                                                        }
                                                        finally {
                                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$483, thread);
                                                        }
                                                    }
                                                }
                                                finally {
                                                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_12, thread);
                                                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_11, thread);
                                                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$487, thread);
                                                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$482, thread);
                                                }
                                            }
                                            possibly_persist_wide_fvector_mark(fvector, (SubLObject)dumper.$str474$unrepresented_term_indices_index, directory_path, (SubLObject)dumper.$str475$unrepresented_term_indices);
                                            if (dumper.NIL != dumper.$separate_file_for_complex_indexingP$.getDynamicValue(thread)) {
                                                possibly_persist_wide_fvector_mark(complex_fvector, (SubLObject)dumper.$str477$unrepresented_term_complex_indice, directory_path, (SubLObject)dumper.$str478$complex_unrepresented_term_indice);
                                            }
                                        }
                                        finally {
                                            final SubLObject _prev_bind_0_$484 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                final SubLObject _values5 = Values.getValuesAsVector();
                                                streams_high.close(compinx_stream, (SubLObject)dumper.UNPROVIDED);
                                                Values.restoreValuesFromVector(_values5);
                                            }
                                            finally {
                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$484, thread);
                                            }
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$485 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                            final SubLObject _values6 = Values.getValuesAsVector();
                                            if (stream_$476.isStream()) {
                                                streams_high.close(stream_$476, (SubLObject)dumper.UNPROVIDED);
                                            }
                                            Values.restoreValuesFromVector(_values6);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$485, thread);
                                        }
                                    }
                                    discard_dump_filename(filename_var_$476);
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$486 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values7 = Values.getValuesAsVector();
                                        streams_high.close(complex_stream, (SubLObject)dumper.UNPROVIDED);
                                        Values.restoreValuesFromVector(_values7);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$486, thread);
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$487 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values8 = Values.getValuesAsVector();
                                    if (stream_$475.isStream()) {
                                        streams_high.close(stream_$475, (SubLObject)dumper.UNPROVIDED);
                                    }
                                    Values.restoreValuesFromVector(_values8);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$487, thread);
                                }
                            }
                            discard_dump_filename(filename_var_$475);
                        }
                        finally {
                            final SubLObject _prev_bind_0_$488 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values9 = Values.getValuesAsVector();
                                streams_high.close(index_stream, (SubLObject)dumper.UNPROVIDED);
                                Values.restoreValuesFromVector(_values9);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$488, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$489 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values10 = Values.getValuesAsVector();
                            if (stream_$474.isStream()) {
                                streams_high.close(stream_$474, (SubLObject)dumper.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values10);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$489, thread);
                        }
                    }
                    discard_dump_filename(filename_var_$474);
                }
                finally {
                    final SubLObject _prev_bind_0_$490 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values11 = Values.getValuesAsVector();
                        streams_high.close(stream_$473, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values11);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$490, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$491 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values12 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values12);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$491, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        if (dumper.NIL == dumper.$separate_file_for_complex_indexingP$.getDynamicValue(thread)) {
            final SubLObject str = (SubLObject)dumper.$str424$Cleaning_up_empty_complex_indexin;
            final SubLObject _prev_bind_13 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_14 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_15 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_16 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_17 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_18 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_19 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_20 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                Threads.sleep((SubLObject)dumper.ONE_INTEGER);
                Filesys.delete_file(complex_file);
                Filesys.delete_file(compinx_file);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_20, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_19, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_18, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_17, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_16, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_15, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_14, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_13, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 157032L)
    public static SubLObject snapshot_unrepresented_term_indices(final SubLObject active_dir, final SubLObject directory_path) {
        return snapshot_managed_object_simple_complex_index((SubLObject)dumper.$sym481$SNAPSHOT_UNREPRESENTED_TERM_INDICES_INTERNAL, (SubLObject)dumper.$str482$unrepresented_term, active_dir, directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 157270L)
    public static SubLObject snapshot_unrepresented_term_indices_internal(final SubLObject active_dir, final SubLObject directory_path, SubLObject widen_fvectorP, SubLObject widen_complexP) {
        if (widen_fvectorP == dumper.UNPROVIDED) {
            widen_fvectorP = (SubLObject)dumper.NIL;
        }
        if (widen_complexP == dumper.UNPROVIDED) {
            widen_complexP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject current;
        final SubLObject datum = current = replicate_fv_dump_files((SubLObject)dumper.$list483, (SubLObject)dumper.$list484, (SubLObject)ConsesLow.list(get_wide_mark_basename_from_index_basename((SubLObject)dumper.$str474$unrepresented_term_indices_index), get_wide_mark_basename_from_index_basename((SubLObject)dumper.$str477$unrepresented_term_complex_indice)), (SubLObject)ConsesLow.list(widen_fvectorP, widen_complexP), active_dir, directory_path, Sequences.cconcatenate((SubLObject)dumper.$str485$Copying_unrepresented_term_indice, format_nil.format_nil_a_no_copy(active_dir)));
        SubLObject new_dfile = (SubLObject)dumper.NIL;
        SubLObject new_ifile = (SubLObject)dumper.NIL;
        SubLObject new_iwmark = (SubLObject)dumper.NIL;
        SubLObject new_cdfile = (SubLObject)dumper.NIL;
        SubLObject new_cifile = (SubLObject)dumper.NIL;
        SubLObject new_cwmark = (SubLObject)dumper.NIL;
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_dfile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_ifile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_iwmark = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_cdfile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_cifile = current.first();
        current = current.rest();
        cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list429);
        new_cwmark = current.first();
        current = current.rest();
        if (dumper.NIL == current) {
            final SubLObject bufsize = file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread);
            final SubLObject small_bufsize = file_utilities.$default_small_stream_buffer_size$.getDynamicValue(thread);
            final SubLObject fvector = file_vector.open_file_vector_for_rewrite(new_dfile, new_ifile, new_iwmark, bufsize, small_bufsize, (SubLObject)dumper.UNPROVIDED);
            final SubLObject complex_fvector = file_vector.open_file_vector_for_append(new_cdfile, new_cifile, new_cwmark, bufsize, bufsize, (SubLObject)dumper.UNPROVIDED);
            try {
                snapshot_deleted_object_tombstones(fvector, unrepresented_terms.deleted_unrepresented_term_id_iterator(), (SubLObject)dumper.$str486$Tombstoning_deleted_unrepresented);
                compatibility.set_file_position(file_vector.get_file_vector_data_stream(fvector), (SubLObject)dumper.$kw317$END);
                snapshot_changed_managed_objects(fvector, complex_fvector, unrepresented_term_index_manager.new_muted_unrepresented_term_index_iterator(), (SubLObject)dumper.$sym76$FIND_UNREPRESENTED_TERM_BY_SUID, (SubLObject)dumper.$sym487$SNAPSHOT_UNREPRESENTED_TERM_INDEX, (SubLObject)dumper.$str488$Updating_changed_unrepresented_te);
                if (dumper.NIL != unrepresented_terms.has_new_unrepresented_termsP()) {
                    file_vector.file_vector_change_stream_buffer_sizes(fvector, bufsize, bufsize);
                    snapshot_new_managed_objects(fvector, unrepresented_terms.new_new_unrepresented_terms_iterator(), unrepresented_term_index_manager.get_file_backed_unrepresented_term_internal_id_threshold(), (SubLObject)dumper.$sym489$UNREPRESENTED_TERM_SUID, (SubLObject)dumper.$sym479$DUMP_UNREPRESENTED_TERM_INDEX, (SubLObject)dumper.$str490$Appending_new_unrepresented_term_, complex_fvector);
                }
                possibly_persist_wide_fvector_mark(fvector, (SubLObject)dumper.$str474$unrepresented_term_indices_index, directory_path, (SubLObject)dumper.$str475$unrepresented_term_indices);
                possibly_persist_wide_fvector_mark(complex_fvector, (SubLObject)dumper.$str477$unrepresented_term_complex_indice, directory_path, (SubLObject)dumper.$str478$complex_unrepresented_term_indice);
            }
            finally {
                final SubLObject _prev_bind_0 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    file_vector.close_file_vector(fvector);
                    file_vector.close_file_vector(complex_fvector);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0, thread);
                }
            }
        }
        else {
            cdestructuring_bind.cdestructuring_bind_error(datum, (SubLObject)dumper.$list429);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 160513L)
    public static SubLObject new_niniveh_unrepresented_term_indices_iterator(final SubLObject directory_path) {
        return new_niniveh_index_iterator((SubLObject)dumper.$str473$unrepresented_term_indices, directory_path);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 160680L)
    public static SubLObject load_unrepresented_term_indices(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str473$unrepresented_term_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject index_file = kb_dump_file((SubLObject)dumper.$str474$unrepresented_term_indices_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject complex_file = kb_dump_file((SubLObject)dumper.$str476$unrepresented_term_complex_indice, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject compinx_file = kb_dump_file((SubLObject)dumper.$str477$unrepresented_term_complex_indice, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != Filesys.probe_file(complex_file)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str491$__Unrepresented_term_indexing_wil, cfasl_file, index_file);
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str492$__Unrepresented_complex_term_inde, complex_file, compinx_file);
            unrepresented_term_index_manager.initialize_unrepresented_term_index_hl_store_cache();
            if (dumper.NIL != unrepresented_term_index_manager.wide_unrepresented_term_index_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str493$___Unrepresented_term_indices_use);
            }
            if (dumper.NIL != unrepresented_term_index_manager.wide_unrepresented_term_complex_index_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str494$___Unrepresented_term_complex_ind);
            }
        }
        else if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != Filesys.probe_file(index_file)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str491$__Unrepresented_term_indexing_wil, cfasl_file, index_file);
            unrepresented_term_index_manager.initialize_unrepresented_term_index_hl_store_cache();
            if (dumper.NIL != unrepresented_term_index_manager.wide_unrepresented_term_index_hl_store_cacheP()) {
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str493$___Unrepresented_term_indices_use);
            }
        }
        else if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$507 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$507 = file_utilities.enable_file_stream_memory_mapping(stream_$507);
                }
                try {
                    final SubLObject total = unrepresented_terms.kb_unrepresented_term_count();
                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                    load_copyright(stream_$507);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str495$Loading_unrepresented_term_indice);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$507, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$507, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                utilities_macros.note_percent_progress(sofar, total);
                                if (dump_id.isInteger()) {
                                    load_unrepresented_term_index(dump_id, stream_$507);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$508 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$508, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$507, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 162965L)
    public static SubLObject dump_unrepresented_term_index(final SubLObject unrepresented_term, final SubLObject stream, final SubLObject fvector) {
        final SubLObject index = unrepresented_terms.unrepresented_term_index(unrepresented_term);
        final SubLObject id = unrepresented_terms.unrepresented_term_dump_id(unrepresented_term);
        dump_top_level_index_of_type(unrepresented_term, id, index, stream, (SubLObject)dumper.$str482$unrepresented_term, fvector, (SubLObject)dumper.$kw376$UNREPRESENTED_TERM_INDEX);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 163362L)
    public static SubLObject snapshot_unrepresented_term_index(final SubLObject unrepresented_term, final SubLObject old_index, final SubLObject data_stream, final SubLObject complex_fvector) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject index = old_index;
        final SubLObject id = unrepresented_terms.unrepresented_term_dump_id(unrepresented_term);
        if (dumper.NIL != kb_indexing_datastructures.complex_index_p(index)) {
            SubLObject problem = (SubLObject)dumper.NIL;
            try {
                thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                final SubLObject _prev_bind_0 = Errors.$error_handler$.currentBinding(thread);
                try {
                    Errors.$error_handler$.bind((SubLObject)dumper.$sym147$CATCH_ERROR_MESSAGE_HANDLER, thread);
                    try {
                        index = indexing_utilities.dump_changed_swappable_complex_index(index, complex_fvector, (SubLObject)dumper.$kw376$UNREPRESENTED_TERM_INDEX);
                    }
                    catch (Throwable catch_var) {
                        Errors.handleThrowable(catch_var, (SubLObject)dumper.NIL);
                    }
                }
                finally {
                    Errors.$error_handler$.rebind(_prev_bind_0, thread);
                }
            }
            catch (Throwable ccatch_env_var) {
                problem = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
            }
            finally {
                thread.throwStack.pop();
            }
            if (problem.isString()) {
                Errors.error((SubLObject)dumper.$str496$Could_not_dump_the_unrepresented_, unrepresented_term, id, problem);
            }
        }
        cfasl.cfasl_output(id, data_stream);
        cfasl.cfasl_output(index, data_stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 164021L)
    public static SubLObject load_unrepresented_term_index(final SubLObject dump_id, final SubLObject stream) {
        final SubLObject unrepresented_term = unrepresented_terms.find_unrepresented_term_by_dump_id(dump_id);
        return unrepresented_terms.reset_unrepresented_term_index(unrepresented_term, cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED), (SubLObject)dumper.UNPROVIDED);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 164246L)
    public static SubLObject load_unrepresented_term_index_from_cache(final SubLObject dump_id, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject index = (SubLObject)dumper.NIL;
        final SubLObject _prev_bind_0 = cfasl.$within_cfasl_externalization$.currentBinding(thread);
        try {
            cfasl.$within_cfasl_externalization$.bind((SubLObject)dumper.NIL, thread);
            index = load_unrepresented_term_index(dump_id, stream);
        }
        finally {
            cfasl.$within_cfasl_externalization$.rebind(_prev_bind_0, thread);
        }
        return index;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 164466L)
    public static SubLObject dump_assertion_indices(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject indices_file = kb_dump_file((SubLObject)dumper.$str498$assertion_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var = indices_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$509 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$509, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$510 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$510 = file_utilities.enable_file_stream_memory_mapping(stream_$510);
                }
                try {
                    dump_copyright(stream_$510);
                    final SubLObject idx = assertion_handles.do_assertions_table();
                    final SubLObject mess = (SubLObject)dumper.$str499$Dumping_assertion_indices;
                    final SubLObject total = id_index.id_index_count(idx);
                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                    assert dumper.NIL != Types.stringp(mess) : mess;
                    final SubLObject _prev_bind_0_$510 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$512 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble(mess);
                            final SubLObject idx_$513 = idx;
                            if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$513, (SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject idx_$514 = idx_$513;
                                if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$514, (SubLObject)dumper.$kw266$SKIP)) {
                                    final SubLObject vector_var = id_index.id_index_dense_objects(idx_$514);
                                    final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                    SubLObject length;
                                    SubLObject v_iteration;
                                    SubLObject a_id;
                                    SubLObject a_handle;
                                    SubLObject assertion;
                                    for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                        a_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                        a_handle = Vectors.aref(vector_var, a_id);
                                        if (dumper.NIL == id_index.id_index_tombstone_p(a_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                            if (dumper.NIL != id_index.id_index_tombstone_p(a_handle)) {
                                                a_handle = (SubLObject)dumper.$kw266$SKIP;
                                            }
                                            assertion = assertion_handles.resolve_assertion_id_value_pair(a_id, a_handle);
                                            if (dumper.NIL != assertion_utilities.assertion_has_meta_assertionsP(assertion)) {
                                                dump_assertion_index(assertion, stream_$510);
                                            }
                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                            utilities_macros.note_percent_progress(sofar, total);
                                        }
                                    }
                                }
                                final SubLObject idx_$515 = idx_$513;
                                if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$515) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                    final SubLObject sparse = id_index.id_index_sparse_objects(idx_$515);
                                    SubLObject a_id2 = id_index.id_index_sparse_id_threshold(idx_$515);
                                    final SubLObject end_id = id_index.id_index_next_id(idx_$515);
                                    final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                    while (a_id2.numL(end_id)) {
                                        final SubLObject a_handle2 = Hashtables.gethash_without_values(a_id2, sparse, v_default);
                                        if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(a_handle2)) {
                                            final SubLObject assertion2 = assertion_handles.resolve_assertion_id_value_pair(a_id2, a_handle2);
                                            if (dumper.NIL != assertion_utilities.assertion_has_meta_assertionsP(assertion2)) {
                                                dump_assertion_index(assertion2, stream_$510);
                                            }
                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                            utilities_macros.note_percent_progress(sofar, total);
                                        }
                                        a_id2 = Numbers.add(a_id2, (SubLObject)dumper.ONE_INTEGER);
                                    }
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$511 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$511, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$512, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$510, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$512 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$510, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$512, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$513 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$513, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 165059L)
    public static SubLObject load_assertion_indices(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str498$assertion_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$519 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$519 = file_utilities.enable_file_stream_memory_mapping(stream_$519);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$519);
                    load_copyright(stream_$519);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str500$Loading_assertion_indices);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$519, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$519, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$519), total);
                                if (dump_id.isInteger()) {
                                    load_assertion_index(dump_id, stream_$519);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$520 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$520, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$519, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 165721L)
    public static SubLObject replicate_meta_assertion_indexing(final SubLObject part_directory) {
        final SubLObject src_misc_file = kb_dump_file((SubLObject)dumper.$str498$assertion_indices, part_directory, (SubLObject)dumper.UNPROVIDED);
        final SubLObject trg_misc_file = kb_dump_file((SubLObject)dumper.$str498$assertion_indices, misc_utilities.generic_caches_directory(), (SubLObject)dumper.UNPROVIDED);
        file_utilities.copy_file_checked(src_misc_file, trg_misc_file);
        return part_directory;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 166126L)
    public static SubLObject dump_assertion_index(final SubLObject assertion, final SubLObject stream) {
        final SubLObject index = assertions_low.assertion_index(assertion);
        cfasl.cfasl_output(assertions_high.assertion_dump_id(assertion), stream);
        cfasl.cfasl_output(index, stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 166340L)
    public static SubLObject load_assertion_index(final SubLObject dump_id, final SubLObject stream) {
        final SubLObject assertion = assertions_high.find_assertion_by_dump_id(dump_id);
        return assertions_low.reset_assertion_index(assertion, cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 166520L)
    public static SubLObject dump_auxiliary_indices_file(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject misc_file = kb_dump_file((SubLObject)dumper.$str501$auxiliary_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var = misc_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$521 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$521, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$522 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$522 = file_utilities.enable_file_stream_memory_mapping(stream_$522);
                }
                try {
                    dump_copyright(stream_$522);
                    final SubLObject str = (SubLObject)dumper.$str502$Dumping_auxiliary_indices____;
                    final SubLObject _prev_bind_0_$522 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$524 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        auxiliary_indexing.dump_auxiliary_indices(stream_$522);
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$524, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$522, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$523 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$522, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$523, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$524 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$524, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 167035L)
    public static SubLObject load_auxiliary_indices_file(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str501$auxiliary_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$527 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$527 = file_utilities.enable_file_stream_memory_mapping(stream_$527);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$527);
                    load_copyright(stream_$527);
                    final SubLObject str = (SubLObject)dumper.$str503$Loading_auxiliary_indices;
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        auxiliary_indexing.load_auxiliary_indices(stream_$527);
                        if (cfasl.cfasl_input(stream_$527, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                            Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$527)), cfasl_file);
                        }
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$527, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 167654L)
    public static SubLObject replicate_auxiliary_assertion_indexing(final SubLObject part_directory) {
        final SubLObject src_misc_file = kb_dump_file((SubLObject)dumper.$str501$auxiliary_indices, part_directory, (SubLObject)dumper.UNPROVIDED);
        final SubLObject trg_misc_file = kb_dump_file((SubLObject)dumper.$str501$auxiliary_indices, misc_utilities.generic_caches_directory(), (SubLObject)dumper.UNPROVIDED);
        file_utilities.copy_file_checked(src_misc_file, trg_misc_file);
        return part_directory;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 168063L)
    public static SubLObject dump_bookkeeping_indices_file(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject misc_file = kb_dump_file((SubLObject)dumper.$str504$bookkeeping_indices, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var = misc_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$528 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$528, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$529 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$529 = file_utilities.enable_file_stream_memory_mapping(stream_$529);
                }
                try {
                    dump_copyright(stream_$529);
                    final SubLObject str = (SubLObject)dumper.$str505$Dumping_bookkeeping_indices;
                    final SubLObject _prev_bind_0_$529 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$531 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        dump_bookkeeping_indices(stream_$529);
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$531, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$529, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$530 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$529, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$530, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$531 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$531, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 168591L)
    public static SubLObject load_bookkeeping_indices_file(final SubLObject directory_path) {
        return load_unit_file(directory_path, (SubLObject)dumper.$str504$bookkeeping_indices, (SubLObject)dumper.$sym506$LOAD_BOOKKEEPING_INDICES, (SubLObject)dumper.$str507$Loading_bookkeeping_indices____);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 168778L)
    public static SubLObject dump_bookkeeping_indices(final SubLObject stream) {
        cfasl.cfasl_output(bookkeeping_store.dumper_dumpable_bookkeeping_index(), stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 168911L)
    public static SubLObject load_bookkeeping_indices(final SubLObject stream) {
        final SubLObject index = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        bookkeeping_store.dumper_load_bookkeeping_index(index);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 169057L)
    public static SubLObject dump_rule_set(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject indices_file = kb_dump_file((SubLObject)dumper.$str508$rule_set, directory_path, (SubLObject)dumper.UNPROVIDED);
            final SubLObject str = (SubLObject)dumper.$str509$Dumping_rule_set____;
            final SubLObject _prev_bind_0_$534 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_1_$535 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                final SubLObject filename_var = indices_file;
                SubLObject stream = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_0_$535 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$535, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                    }
                    SubLObject stream_$537 = stream;
                    if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                        stream_$537 = file_utilities.enable_file_stream_memory_mapping(stream_$537);
                    }
                    try {
                        dump_copyright(stream_$537);
                        assertions_low.dump_rule_set_to_stream(stream_$537);
                    }
                    finally {
                        final SubLObject _prev_bind_0_$536 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            streams_high.close(stream_$537, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$536, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$537 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$537, thread);
                    }
                }
                discard_dump_filename(filename_var);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$535, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$534, thread);
            }
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 169524L)
    public static SubLObject load_rule_set(final SubLObject directory_path) {
        return load_unit_file(directory_path, (SubLObject)dumper.$str508$rule_set, (SubLObject)dumper.$sym510$LOAD_RULE_SET_FROM_STREAM, (SubLObject)dumper.$str511$Loading_rule_set____);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 169674L)
    public static SubLObject dump_non_true_assertion_tv_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject indices_file = kb_dump_file((SubLObject)dumper.$str512$non_true_assertion_tv_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
            final SubLObject str = (SubLObject)dumper.$str513$Dumping_non_true_assertion_tv_cac;
            final SubLObject _prev_bind_0_$540 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_1_$541 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                final SubLObject filename_var = indices_file;
                SubLObject stream = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_0_$541 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$541, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                    }
                    SubLObject stream_$543 = stream;
                    if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                        stream_$543 = file_utilities.enable_file_stream_memory_mapping(stream_$543);
                    }
                    try {
                        dump_copyright(stream_$543);
                        assertions_low.dump_non_true_assertion_tv_cache_to_stream(stream_$543);
                    }
                    finally {
                        final SubLObject _prev_bind_0_$542 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            streams_high.close(stream_$543, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$542, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$543 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$543, thread);
                    }
                }
                discard_dump_filename(filename_var);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$541, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$540, thread);
            }
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 170274L)
    public static SubLObject load_non_true_assertion_tv_cache(final SubLObject directory_path) {
        return load_unit_file(directory_path, (SubLObject)dumper.$str512$non_true_assertion_tv_cache, (SubLObject)dumper.$sym514$LOAD_NON_TRUE_ASSERTION_TV_CACHE_FROM_STREAM, (SubLObject)dumper.$str515$Loading_non_true_assertion_tv_cac);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 170500L)
    public static SubLObject dump_nart_hl_formulas(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject nart_hl_formula_file = kb_dump_file((SubLObject)dumper.$str171$nart_hl_formula, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject nart_hl_formula_index_file = kb_dump_file((SubLObject)dumper.$str516$nart_hl_formula_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var = nart_hl_formula_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$546 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$546, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$547 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$547 = file_utilities.enable_file_stream_memory_mapping(stream_$547);
                }
                try {
                    final SubLObject filename_var_$548 = nart_hl_formula_index_file;
                    SubLObject stream_$548 = (SubLObject)dumper.NIL;
                    try {
                        final SubLObject _prev_bind_0_$547 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                            stream_$548 = compatibility.open_binary(filename_var_$548, (SubLObject)dumper.$kw202$OUTPUT);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$547, thread);
                        }
                        if (!stream_$548.isStream()) {
                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$548);
                        }
                        SubLObject index_stream = stream_$548;
                        if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                            index_stream = file_utilities.enable_file_stream_memory_mapping(index_stream);
                        }
                        try {
                            dump_copyright(stream_$547);
                            final SubLObject fvector = file_vector.create_file_vector(stream_$547, index_stream);
                            SubLObject message_var = (SubLObject)dumper.NIL;
                            final SubLObject was_appendingP = Eval.eval((SubLObject)dumper.$sym517$_APPEND_STACK_TRACES_TO_ERROR_MESSAGES__);
                            Eval.eval((SubLObject)dumper.$list518);
                            try {
                                try {
                                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                    final SubLObject _prev_bind_0_$548 = Errors.$error_handler$.currentBinding(thread);
                                    try {
                                        Errors.$error_handler$.bind((SubLObject)dumper.$sym147$CATCH_ERROR_MESSAGE_HANDLER, thread);
                                        try {
                                            final SubLObject idx = nart_handles.do_narts_table();
                                            final SubLObject mess = (SubLObject)dumper.$str519$Dumping_NART_HL_formulas;
                                            final SubLObject total = id_index.id_index_count(idx);
                                            SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                            assert dumper.NIL != Types.stringp(mess) : mess;
                                            final SubLObject _prev_bind_0_$549 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$553 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                            final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                            final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                            try {
                                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                try {
                                                    utilities_macros.noting_percent_progress_preamble(mess);
                                                    final SubLObject idx_$554 = idx;
                                                    if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$554, (SubLObject)dumper.$kw266$SKIP)) {
                                                        final SubLObject idx_$555 = idx_$554;
                                                        if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$555, (SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject vector_var = id_index.id_index_dense_objects(idx_$555);
                                                            final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                            SubLObject length;
                                                            SubLObject v_iteration;
                                                            SubLObject id;
                                                            SubLObject nart;
                                                            SubLObject nart_hl_formula;
                                                            for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                                id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                                nart = Vectors.aref(vector_var, id);
                                                                if (dumper.NIL == id_index.id_index_tombstone_p(nart) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                    if (dumper.NIL != id_index.id_index_tombstone_p(nart)) {
                                                                        nart = (SubLObject)dumper.$kw266$SKIP;
                                                                    }
                                                                    nart_hl_formula = narts_high.nart_hl_formula(nart);
                                                                    file_vector.update_file_vector_index_linear(fvector);
                                                                    dump_nart_hl_formula(nart, nart_hl_formula, stream_$547);
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                }
                                                            }
                                                        }
                                                        final SubLObject idx_$556 = idx_$554;
                                                        if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$556) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject sparse = id_index.id_index_sparse_objects(idx_$556);
                                                            SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$556);
                                                            final SubLObject end_id = id_index.id_index_next_id(idx_$556);
                                                            final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                            while (id2.numL(end_id)) {
                                                                final SubLObject nart2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                                                if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(nart2)) {
                                                                    final SubLObject nart_hl_formula2 = narts_high.nart_hl_formula(nart2);
                                                                    file_vector.update_file_vector_index_linear(fvector);
                                                                    dump_nart_hl_formula(nart2, nart_hl_formula2, stream_$547);
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                }
                                                                id2 = Numbers.add(id2, (SubLObject)dumper.ONE_INTEGER);
                                                            }
                                                        }
                                                    }
                                                }
                                                finally {
                                                    final SubLObject _prev_bind_0_$550 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                        final SubLObject _values = Values.getValuesAsVector();
                                                        utilities_macros.noting_percent_progress_postamble();
                                                        Values.restoreValuesFromVector(_values);
                                                    }
                                                    finally {
                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$550, thread);
                                                    }
                                                }
                                            }
                                            finally {
                                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$553, thread);
                                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$549, thread);
                                            }
                                        }
                                        catch (Throwable catch_var) {
                                            Errors.handleThrowable(catch_var, (SubLObject)dumper.NIL);
                                        }
                                    }
                                    finally {
                                        Errors.$error_handler$.rebind(_prev_bind_0_$548, thread);
                                    }
                                }
                                catch (Throwable ccatch_env_var) {
                                    message_var = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                }
                                finally {
                                    thread.throwStack.pop();
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$551 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values2 = Values.getValuesAsVector();
                                    Eval.eval((SubLObject)ConsesLow.list((SubLObject)dumper.$sym20$CSETQ, (SubLObject)dumper.$sym517$_APPEND_STACK_TRACES_TO_ERROR_MESSAGES__, was_appendingP));
                                    Values.restoreValuesFromVector(_values2);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$551, thread);
                                }
                            }
                            if (message_var.isString()) {
                                Errors.warn((SubLObject)dumper.$str520$_A, message_var);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$552 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values3 = Values.getValuesAsVector();
                                streams_high.close(index_stream, (SubLObject)dumper.UNPROVIDED);
                                Values.restoreValuesFromVector(_values3);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$552, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$553 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values4 = Values.getValuesAsVector();
                            if (stream_$548.isStream()) {
                                streams_high.close(stream_$548, (SubLObject)dumper.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values4);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$553, thread);
                        }
                    }
                    discard_dump_filename(filename_var_$548);
                }
                finally {
                    final SubLObject _prev_bind_0_$554 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values5 = Values.getValuesAsVector();
                        streams_high.close(stream_$547, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values5);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$554, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$555 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values6 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values6);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$555, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 171472L)
    public static SubLObject snapshot_nart_hl_formulas(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject nart_hl_formula_file = kb_dump_file((SubLObject)dumper.$str171$nart_hl_formula, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject nart_hl_formula_index_file = kb_dump_file((SubLObject)dumper.$str516$nart_hl_formula_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var = nart_hl_formula_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$563 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$563, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$564 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$564 = file_utilities.enable_file_stream_memory_mapping(stream_$564);
                }
                try {
                    final SubLObject filename_var_$565 = nart_hl_formula_index_file;
                    SubLObject stream_$565 = (SubLObject)dumper.NIL;
                    try {
                        final SubLObject _prev_bind_0_$564 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                        try {
                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                            stream_$565 = compatibility.open_binary(filename_var_$565, (SubLObject)dumper.$kw202$OUTPUT);
                        }
                        finally {
                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$564, thread);
                        }
                        if (!stream_$565.isStream()) {
                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$565);
                        }
                        SubLObject index_stream = stream_$565;
                        if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                            index_stream = file_utilities.enable_file_stream_memory_mapping(index_stream);
                        }
                        try {
                            dump_copyright(stream_$564);
                            final SubLObject fvector = file_vector.create_file_vector(stream_$564, index_stream);
                            SubLObject expected_id = (SubLObject)dumper.ZERO_INTEGER;
                            SubLObject message_var = (SubLObject)dumper.NIL;
                            final SubLObject was_appendingP = Eval.eval((SubLObject)dumper.$sym517$_APPEND_STACK_TRACES_TO_ERROR_MESSAGES__);
                            Eval.eval((SubLObject)dumper.$list518);
                            try {
                                try {
                                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                    final SubLObject _prev_bind_0_$565 = Errors.$error_handler$.currentBinding(thread);
                                    try {
                                        Errors.$error_handler$.bind((SubLObject)dumper.$sym147$CATCH_ERROR_MESSAGE_HANDLER, thread);
                                        try {
                                            final SubLObject idx = nart_handles.do_narts_table();
                                            final SubLObject mess = (SubLObject)dumper.$str519$Dumping_NART_HL_formulas;
                                            final SubLObject total = id_index.id_index_count(idx);
                                            SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                            assert dumper.NIL != Types.stringp(mess) : mess;
                                            final SubLObject _prev_bind_0_$566 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$570 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                            final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                            final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                            try {
                                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                try {
                                                    utilities_macros.noting_percent_progress_preamble(mess);
                                                    final SubLObject idx_$571 = idx;
                                                    if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$571, (SubLObject)dumper.$kw266$SKIP)) {
                                                        final SubLObject idx_$572 = idx_$571;
                                                        if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$572, (SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject vector_var = id_index.id_index_dense_objects(idx_$572);
                                                            final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                            SubLObject length;
                                                            SubLObject v_iteration;
                                                            SubLObject id;
                                                            SubLObject nart;
                                                            SubLObject nart_hl_formula;
                                                            SubLObject curr_id;
                                                            for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                                id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                                nart = Vectors.aref(vector_var, id);
                                                                if (dumper.NIL == id_index.id_index_tombstone_p(nart) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                    if (dumper.NIL != id_index.id_index_tombstone_p(nart)) {
                                                                        nart = (SubLObject)dumper.$kw266$SKIP;
                                                                    }
                                                                    nart_hl_formula = narts_high.nart_hl_formula(nart);
                                                                    for (curr_id = nart_handles.nart_id(nart); expected_id.numL(curr_id); expected_id = Numbers.add(expected_id, (SubLObject)dumper.ONE_INTEGER)) {
                                                                        file_vector.place_file_vector_index_tombstone(fvector);
                                                                    }
                                                                    file_vector.update_file_vector_index_linear(fvector);
                                                                    dump_nart_hl_formula(nart, nart_hl_formula, stream_$564);
                                                                    expected_id = Numbers.add((SubLObject)dumper.ONE_INTEGER, curr_id);
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                }
                                                            }
                                                        }
                                                        final SubLObject idx_$573 = idx_$571;
                                                        if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$573) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject sparse = id_index.id_index_sparse_objects(idx_$573);
                                                            SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$573);
                                                            final SubLObject end_id = id_index.id_index_next_id(idx_$573);
                                                            final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                            while (id2.numL(end_id)) {
                                                                final SubLObject nart2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                                                if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(nart2)) {
                                                                    final SubLObject nart_hl_formula2 = narts_high.nart_hl_formula(nart2);
                                                                    SubLObject curr_id2;
                                                                    for (curr_id2 = nart_handles.nart_id(nart2); expected_id.numL(curr_id2); expected_id = Numbers.add(expected_id, (SubLObject)dumper.ONE_INTEGER)) {
                                                                        file_vector.place_file_vector_index_tombstone(fvector);
                                                                    }
                                                                    file_vector.update_file_vector_index_linear(fvector);
                                                                    dump_nart_hl_formula(nart2, nart_hl_formula2, stream_$564);
                                                                    expected_id = Numbers.add((SubLObject)dumper.ONE_INTEGER, curr_id2);
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                }
                                                                id2 = Numbers.add(id2, (SubLObject)dumper.ONE_INTEGER);
                                                            }
                                                        }
                                                    }
                                                }
                                                finally {
                                                    final SubLObject _prev_bind_0_$567 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                        final SubLObject _values = Values.getValuesAsVector();
                                                        utilities_macros.noting_percent_progress_postamble();
                                                        Values.restoreValuesFromVector(_values);
                                                    }
                                                    finally {
                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$567, thread);
                                                    }
                                                }
                                            }
                                            finally {
                                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$570, thread);
                                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$566, thread);
                                            }
                                        }
                                        catch (Throwable catch_var) {
                                            Errors.handleThrowable(catch_var, (SubLObject)dumper.NIL);
                                        }
                                    }
                                    finally {
                                        Errors.$error_handler$.rebind(_prev_bind_0_$565, thread);
                                    }
                                }
                                catch (Throwable ccatch_env_var) {
                                    message_var = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                }
                                finally {
                                    thread.throwStack.pop();
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$568 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values2 = Values.getValuesAsVector();
                                    Eval.eval((SubLObject)ConsesLow.list((SubLObject)dumper.$sym20$CSETQ, (SubLObject)dumper.$sym517$_APPEND_STACK_TRACES_TO_ERROR_MESSAGES__, was_appendingP));
                                    Values.restoreValuesFromVector(_values2);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$568, thread);
                                }
                            }
                            if (message_var.isString()) {
                                Errors.warn((SubLObject)dumper.$str520$_A, message_var);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$569 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values3 = Values.getValuesAsVector();
                                streams_high.close(index_stream, (SubLObject)dumper.UNPROVIDED);
                                Values.restoreValuesFromVector(_values3);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$569, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$570 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values4 = Values.getValuesAsVector();
                            if (stream_$565.isStream()) {
                                streams_high.close(stream_$565, (SubLObject)dumper.UNPROVIDED);
                            }
                            Values.restoreValuesFromVector(_values4);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$570, thread);
                        }
                    }
                    discard_dump_filename(filename_var_$565);
                }
                finally {
                    final SubLObject _prev_bind_0_$571 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values5 = Values.getValuesAsVector();
                        streams_high.close(stream_$564, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values5);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$571, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$572 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values6 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values6);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$572, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 172680L)
    public static SubLObject load_nart_hl_formulas(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject nart_hl_formula_cfasl_file = kb_dump_file((SubLObject)dumper.$str171$nart_hl_formula, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject nart_hl_formula_index_file = kb_dump_file((SubLObject)dumper.$str516$nart_hl_formula_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue() && dumper.NIL != Filesys.probe_file(nart_hl_formula_index_file)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str521$__NART_HL_formulas_will_be_swappe, nart_hl_formula_cfasl_file, nart_hl_formula_index_file);
            nart_hl_formula_manager.initialize_nart_hl_formula_hl_store_cache();
        }
        else if (dumper.NIL != verify_file_existence(nart_hl_formula_cfasl_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var;
            final SubLObject nart_hl_formula_file = filename_var = nart_hl_formula_cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$580 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$580 = file_utilities.enable_file_stream_memory_mapping(stream_$580);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$580);
                    load_copyright(stream_$580);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str522$Loading_nart_hl_formula_definitio);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$580, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$580, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$580), total);
                                if (dump_id.isInteger()) {
                                    load_nart_hl_formula(dump_id, stream_$580);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$581 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$581, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$580, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 174335L)
    public static SubLObject dump_nart_hl_formula(final SubLObject nart, final SubLObject nart_hl_formula, final SubLObject stream) {
        cfasl.cfasl_output(narts_high.nart_dump_id(nart), stream);
        cfasl.cfasl_output(nart_hl_formula, stream);
        return nart;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 174510L)
    public static SubLObject load_nart_hl_formula(final SubLObject dump_id, final SubLObject stream) {
        final SubLObject nart_hl_formula = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        narts_low.register_nart_hl_formula_for_kb_load(dump_id, nart_hl_formula);
        return nart_hl_formula;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 174741L)
    public static SubLObject load_nart_hl_formula_from_cache(final SubLObject dump_id, final SubLObject stream) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject nart_hl_formula = (SubLObject)dumper.NIL;
        final SubLObject _prev_bind_0 = cfasl.$within_cfasl_externalization$.currentBinding(thread);
        try {
            cfasl.$within_cfasl_externalization$.bind((SubLObject)dumper.NIL, thread);
            nart_hl_formula = load_nart_hl_formula(dump_id, stream);
        }
        finally {
            cfasl.$within_cfasl_externalization$.rebind(_prev_bind_0, thread);
        }
        return nart_hl_formula;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 174965L)
    public static SubLObject dump_miscellaneous(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject misc_file = filename_var = kb_dump_file((SubLObject)dumper.$str523$misc, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$582 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$582 = file_utilities.enable_file_stream_memory_mapping(stream_$582);
            }
            try {
                dump_copyright(stream_$582);
                final SubLObject str = (SubLObject)dumper.$str524$Dumping_miscellaneous_stuff____;
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    cfasl.cfasl_output((SubLObject)dumper.NIL, stream_$582);
                    cfasl.cfasl_output(czer_vars.$skolem_axiom_table$.getGlobalValue(), stream_$582);
                    cfasl.cfasl_output((SubLObject)dumper.NIL, stream_$582);
                    final SubLObject kb_number = (dumper.NIL != dumper.$auto_increment_kb_number_on_dumpP$.getDynamicValue(thread)) ? Numbers.add(control_vars.kb_loaded(), (SubLObject)dumper.ONE_INTEGER) : control_vars.kb_loaded();
                    cfasl.cfasl_output(kb_number, stream_$582);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$582, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 175682L)
    public static SubLObject load_miscellaneous(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str523$misc, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$583 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$583 = file_utilities.enable_file_stream_memory_mapping(stream_$583);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$583);
                    load_copyright(stream_$583);
                    final SubLObject str = (SubLObject)dumper.$str525$Loading_miscellaneous_stuff____;
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        cfasl.cfasl_input(stream_$583, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        czer_vars.$skolem_axiom_table$.setGlobalValue(cfasl.cfasl_input(stream_$583, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        cfasl.cfasl_input(stream_$583, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        control_vars.set_build_kb_loaded(cfasl.cfasl_input(stream_$583, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        if (cfasl.cfasl_input(stream_$583, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                            Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$583)), cfasl_file);
                        }
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$583, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 176570L)
    public static SubLObject dump_sbhl_data(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject sbhl_file = kb_dump_file((SubLObject)dumper.$str526$sbhl_modules, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var = sbhl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$584 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$584, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$585 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$585 = file_utilities.enable_file_stream_memory_mapping(stream_$585);
                }
                try {
                    dump_copyright(stream_$585);
                    final SubLObject data_file = kb_dump_file((SubLObject)dumper.$str527$sbhl_module_graphs, directory_path, (SubLObject)dumper.UNPROVIDED);
                    final SubLObject index_file = kb_dump_file((SubLObject)dumper.$str528$sbhl_module_graphs_index, directory_path, (SubLObject)dumper.UNPROVIDED);
                    SubLObject fvector = (SubLObject)dumper.NIL;
                    try {
                        fvector = file_vector.new_file_vector(data_file, index_file, (SubLObject)dumper.$kw202$OUTPUT, file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), (SubLObject)dumper.UNPROVIDED);
                        kb_dump_stamp_file_vector_for_references(fvector);
                        final SubLObject str = (SubLObject)dumper.$str529$Dumping_SBHL_modules_and_graphs__;
                        final SubLObject _prev_bind_0_$585 = utilities_macros.$progress_start_time$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$587 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                        try {
                            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                            utilities_macros.noting_progress_preamble(str);
                            final SubLObject sbhl_modules = sbhl_module_vars.get_sbhl_module_list();
                            cfasl.cfasl_output(Sequences.length(sbhl_modules), stream_$585);
                            SubLObject cdolist_list_var = sbhl_modules;
                            SubLObject module = (SubLObject)dumper.NIL;
                            module = cdolist_list_var.first();
                            while (dumper.NIL != cdolist_list_var) {
                                sbhl_graphs.swap_in_all_graph_links(module);
                                final SubLObject new_map = file_vector_utilities.create_file_vector_backed_map_from_map(sbhl_module_vars.get_sbhl_module_graph(module), fvector, (SubLObject)dumper.$kw530$SWAPPED_OUT, (SubLObject)dumper.$kw531$COMPACT);
                                cfasl.cfasl_output(sbhl_module_vars.get_sbhl_module_link_pred(module), stream_$585);
                                cfasl.cfasl_output(new_map, stream_$585);
                                sbhl_graphs.swap_out_all_pristine_graph_links(module);
                                cdolist_list_var = cdolist_list_var.rest();
                                module = cdolist_list_var.first();
                            }
                            utilities_macros.noting_progress_postamble();
                        }
                        finally {
                            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$587, thread);
                            utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$585, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$586 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            if (dumper.NIL != file_vector.file_vector_p(fvector)) {
                                file_vector.close_file_vector(fvector);
                            }
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$586, thread);
                        }
                    }
                    discard_dump_filename(index_file);
                    discard_dump_filename(data_file);
                    dump_sbhl_miscellany(stream_$585);
                }
                finally {
                    final SubLObject _prev_bind_0_$587 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$585, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$587, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$588 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$588, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        dump_sbhl_time_state(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 179267L)
    public static SubLObject load_sbhl_data(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str526$sbhl_modules, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject data_file = kb_dump_file((SubLObject)dumper.$str527$sbhl_module_graphs, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject index_file = kb_dump_file((SubLObject)dumper.$str528$sbhl_module_graphs_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            if (dumper.NIL != verify_file_existence(data_file, (SubLObject)dumper.$kw532$WARN_ONLY) && dumper.NIL != verify_file_existence(index_file, (SubLObject)dumper.$kw532$WARN_ONLY)) {
                sbhl_graphs.initialize_sbhl_graph_caches_during_load_kb(data_file, index_file);
            }
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$591 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$591 = file_utilities.enable_file_stream_memory_mapping(stream_$591);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$591);
                    load_copyright(stream_$591);
                    sbhl_time_utilities.initialize_hl_endpoint_tables();
                    final SubLObject graph_count = cfasl.cfasl_input(stream_$591, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                    final SubLObject _prev_bind_2 = cfasl.$cfasl_stream_extensions_enabled$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = cfasl.$cfasl_unread_byte$.currentBinding(thread);
                    try {
                        cfasl.$cfasl_stream_extensions_enabled$.bind((SubLObject)dumper.T, thread);
                        cfasl.$cfasl_unread_byte$.bind((SubLObject)dumper.NIL, thread);
                        final SubLObject str = (SubLObject)dumper.$str533$Loading_SBHL_graphs____;
                        final SubLObject _prev_bind_0_$592 = utilities_macros.$progress_start_time$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$593 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                        final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                        final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                        final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                        final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                        try {
                            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                            utilities_macros.noting_progress_preamble(str);
                            sbhl_module_declarations.initialize_sbhl_modules((SubLObject)dumper.T);
                            SubLObject n;
                            SubLObject predicate;
                            SubLObject v_graph;
                            SubLObject module;
                            for (n = (SubLObject)dumper.NIL, n = (SubLObject)dumper.ZERO_INTEGER; n.numL(graph_count); n = Numbers.add(n, (SubLObject)dumper.ONE_INTEGER)) {
                                if (cfasl.cfasl_opcode_peek(stream_$591, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED).eql((SubLObject)dumper.$int534$30)) {
                                    predicate = cfasl.cfasl_input(stream_$591, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                                    v_graph = cfasl.cfasl_input(stream_$591, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                                    module = sbhl_module_vars.get_sbhl_module(predicate);
                                    if (dumper.NIL != constant_handles.valid_constantP(predicate, (SubLObject)dumper.UNPROVIDED) && v_graph.isHashtable() && dumper.NIL != sbhl_module_vars.sbhl_module_p(module)) {
                                        sbhl_module_vars.set_sbhl_module_property(module, (SubLObject)dumper.$kw535$GRAPH, v_graph);
                                    }
                                }
                            }
                            if (dumper.NIL != sbhl_module_vars.get_sbhl_modules()) {
                                sbhl_module_declarations.note_sbhl_modules_initialized();
                            }
                            load_sbhl_miscellany(stream_$591);
                            if (cfasl.cfasl_input(stream_$591, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                                Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$591)), cfasl_file);
                            }
                            utilities_macros.noting_progress_postamble();
                        }
                        finally {
                            utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                            utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                            utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$593, thread);
                            utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$592, thread);
                        }
                    }
                    finally {
                        cfasl.$cfasl_unread_byte$.rebind(_prev_bind_3, thread);
                        cfasl.$cfasl_stream_extensions_enabled$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$591, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        load_sbhl_time_state(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 181939L)
    public static SubLObject rebuild_sbhl_data() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$594 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$595 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$594);
            final SubLObject memory_mappedP_$596 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$594);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$594);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$594);
                final SubLObject manager_$595 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$596 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$595);
                final SubLObject memory_mappedP_$597 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$595);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$595);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$595);
                    final SubLObject manager_$596 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$597 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$596);
                    final SubLObject memory_mappedP_$598 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$596);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$596);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$596);
                        final SubLObject manager_$597 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$598 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$597);
                        final SubLObject memory_mappedP_$599 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$597);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$597);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$597);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                sbhl_link_methods.make_all_sbhl_links();
                                if (dumper.NIL != kb_control_vars.time_kb_loaded_p()) {
                                    sbhl_time_modules.cleanly_initialize_sbhl_time_modules();
                                    rebuild_sbhl_time_data();
                                }
                                else {
                                    Errors.warn((SubLObject)dumper.$str536$Cannot_initialize_SBHL_Time_due_t);
                                }
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$598) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$597);
                                }
                                if (dumper.NIL == memory_mappedP_$599) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$597, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$597) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$596);
                            }
                            if (dumper.NIL == memory_mappedP_$598) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$596, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$596) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$595);
                        }
                        if (dumper.NIL == memory_mappedP_$597) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$595, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$595) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$594);
                    }
                    if (dumper.NIL == memory_mappedP_$596) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$594, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 182920L)
    public static SubLObject recompute_missing_sbhl_graphs() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = mt_relevance_macros.$relevant_mt_function$.currentBinding(thread);
        final SubLObject _prev_bind_2 = mt_relevance_macros.$mt$.currentBinding(thread);
        try {
            mt_relevance_macros.$relevant_mt_function$.bind((SubLObject)dumper.$sym537$RELEVANT_MT_IS_EVERYTHING, thread);
            mt_relevance_macros.$mt$.bind(dumper.$const538$EverythingPSC, thread);
            SubLObject cdolist_list_var = sbhl_module_vars.get_sbhl_modules();
            SubLObject cons = (SubLObject)dumper.NIL;
            cons = cdolist_list_var.first();
            while (dumper.NIL != cdolist_list_var) {
                SubLObject current;
                final SubLObject datum = current = cons;
                SubLObject key = (SubLObject)dumper.NIL;
                SubLObject module = (SubLObject)dumper.NIL;
                cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list539);
                key = current.first();
                current = (module = current.rest());
                final SubLObject v_graph = sbhl_module_utilities.get_sbhl_graph(module);
                if (!v_graph.isHashtable() || (dumper.NIL != hash_table_utilities.hash_table_empty_p(v_graph) && (!kb_indexing.num_predicate_extent_index(sbhl_module_vars.get_sbhl_module_link_pred(module), (SubLObject)dumper.UNPROVIDED).isZero() || dumper.NIL != genl_predicates.all_proper_spec_predicates_and_inverses(sbhl_module_vars.get_sbhl_module_link_pred(module), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
                    sbhl_link_methods.make_sbhl_links_for_module(module);
                }
                cdolist_list_var = cdolist_list_var.rest();
                cons = cdolist_list_var.first();
            }
        }
        finally {
            mt_relevance_macros.$mt$.rebind(_prev_bind_2, thread);
            mt_relevance_macros.$relevant_mt_function$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 183498L)
    public static SubLObject dump_sbhl_miscellany(final SubLObject stream) {
        dump_isa_arg2_naut_table(stream);
        dump_non_fort_isa_table(stream);
        dump_non_fort_instance_table(stream);
        cfasl.cfasl_output((SubLObject)dumper.$kw317$END, stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 183698L)
    public static SubLObject dump_isa_arg2_naut_table(final SubLObject stream) {
        cfasl.cfasl_output((SubLObject)dumper.$kw540$ISA_ARG2_NAUT_TABLE, stream);
        cfasl.cfasl_output(sbhl_link_methods.$isa_arg2_naut_table$.getGlobalValue(), stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 183853L)
    public static SubLObject dump_non_fort_isa_table(final SubLObject stream) {
        cfasl.cfasl_output((SubLObject)dumper.$kw541$NON_FORT_ISA_TABLE, stream);
        cfasl.cfasl_output(sbhl_link_methods.non_fort_isa_table(), stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 184005L)
    public static SubLObject dump_non_fort_instance_table(final SubLObject stream) {
        cfasl.cfasl_output((SubLObject)dumper.$kw542$NON_FORT_INSTANCE_TABLE, stream);
        cfasl.cfasl_output(sbhl_link_methods.non_fort_instance_table(), stream);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 184172L)
    public static SubLObject load_sbhl_miscellany(final SubLObject stream) {
        SubLObject token = (SubLObject)dumper.NIL;
        while (dumper.$kw317$END != token) {
            token = cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
            if (token.isHashtable()) {
                sbhl_link_methods.$isa_arg2_naut_table$.setGlobalValue(token);
                sbhl_link_methods.rebuild_non_fort_isa_tables();
                token = (SubLObject)dumper.$kw317$END;
            }
            else {
                final SubLObject pcase_var = token;
                if (pcase_var.eql((SubLObject)dumper.$kw540$ISA_ARG2_NAUT_TABLE)) {
                    load_isa_arg2_naut_table(stream);
                }
                else if (pcase_var.eql((SubLObject)dumper.$kw541$NON_FORT_ISA_TABLE)) {
                    load_non_fort_isa_table(stream);
                }
                else if (pcase_var.eql((SubLObject)dumper.$kw542$NON_FORT_INSTANCE_TABLE)) {
                    load_non_fort_instance_table(stream);
                }
                else {
                    if (pcase_var.eql((SubLObject)dumper.$kw317$END)) {
                        continue;
                    }
                    Errors.warn((SubLObject)dumper.$str543$Could_not_handle_SBHL_miscellany_, token);
                }
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 185039L)
    public static SubLObject load_isa_arg2_naut_table(final SubLObject stream) {
        sbhl_link_methods.$isa_arg2_naut_table$.setGlobalValue(cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 185156L)
    public static SubLObject load_non_fort_isa_table(final SubLObject stream) {
        sbhl_link_methods.set_non_fort_isa_table(cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 185267L)
    public static SubLObject load_non_fort_instance_table(final SubLObject stream) {
        sbhl_link_methods.set_non_fort_instance_table(cfasl.cfasl_input(stream, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 185388L)
    public static SubLObject dump_sbhl_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject sbhl_file = filename_var = kb_dump_file((SubLObject)dumper.$str544$sbhl_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$606 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$606 = file_utilities.enable_file_stream_memory_mapping(stream_$606);
            }
            try {
                dump_copyright(stream_$606);
                final SubLObject str = (SubLObject)dumper.$str545$Dumping_SBHL_cache____;
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    cfasl.cfasl_output(sbhl_cache.$isa_cache$.getGlobalValue(), stream_$606);
                    cfasl.cfasl_output(sbhl_cache.$all_mts_isa_cache$.getGlobalValue(), stream_$606);
                    cfasl.cfasl_output(sbhl_cache.$genls_cache$.getGlobalValue(), stream_$606);
                    cfasl.cfasl_output(sbhl_cache.$all_mts_genls_cache$.getGlobalValue(), stream_$606);
                    cfasl.cfasl_output(sbhl_cache.$genl_predicate_cache$.getGlobalValue(), stream_$606);
                    cfasl.cfasl_output(sbhl_cache.$genl_inverse_cache$.getGlobalValue(), stream_$606);
                    cfasl.cfasl_output(sbhl_cache.$all_mts_genl_predicate_cache$.getGlobalValue(), stream_$606);
                    cfasl.cfasl_output(sbhl_cache.$all_mts_genl_inverse_cache$.getGlobalValue(), stream_$606);
                    if (dumper.NIL != dictionary.dictionary_p(sbhl_cache.$quoted_isa_cache$.getGlobalValue()) && dumper.NIL != dictionary.dictionary_p(sbhl_cache.$all_mts_quoted_isa_cache$.getGlobalValue())) {
                        cfasl.cfasl_output(sbhl_cache.$quoted_isa_cache$.getGlobalValue(), stream_$606);
                        cfasl.cfasl_output(sbhl_cache.$all_mts_quoted_isa_cache$.getGlobalValue(), stream_$606);
                    }
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$606, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 186252L)
    public static SubLObject load_sbhl_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str544$sbhl_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$607 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$607 = file_utilities.enable_file_stream_memory_mapping(stream_$607);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$607);
                    load_copyright(stream_$607);
                    final SubLObject str = (SubLObject)dumper.$str546$Loading_SBHL_cache____;
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        sbhl_cache.$isa_cache$.setGlobalValue(cfasl.cfasl_input(stream_$607, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_cache.$all_mts_isa_cache$.setGlobalValue(cfasl.cfasl_input(stream_$607, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_cache.$genls_cache$.setGlobalValue(cfasl.cfasl_input(stream_$607, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_cache.$all_mts_genls_cache$.setGlobalValue(cfasl.cfasl_input(stream_$607, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_cache.$genl_predicate_cache$.setGlobalValue(cfasl.cfasl_input(stream_$607, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_cache.$genl_inverse_cache$.setGlobalValue(cfasl.cfasl_input(stream_$607, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_cache.$all_mts_genl_predicate_cache$.setGlobalValue(cfasl.cfasl_input(stream_$607, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_cache.$all_mts_genl_inverse_cache$.setGlobalValue(cfasl.cfasl_input(stream_$607, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        SubLObject next_cache = cfasl.cfasl_input(stream_$607, (SubLObject)dumper.NIL, (SubLObject)dumper.NIL);
                        if (dumper.NIL != next_cache) {
                            sbhl_cache.$quoted_isa_cache$.setGlobalValue(next_cache);
                        }
                        next_cache = cfasl.cfasl_input(stream_$607, (SubLObject)dumper.NIL, (SubLObject)dumper.NIL);
                        if (dumper.NIL != next_cache) {
                            sbhl_cache.$all_mts_quoted_isa_cache$.setGlobalValue(next_cache);
                        }
                        sbhl_cache.note_sbhl_caches_initialized();
                        if (cfasl.cfasl_input(stream_$607, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                            Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$607)), cfasl_file);
                        }
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$607, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 187625L)
    public static SubLObject rebuild_sbhl_cache() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$608 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$609 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$608);
            final SubLObject memory_mappedP_$610 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$608);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$608);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$608);
                final SubLObject manager_$609 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$610 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$609);
                final SubLObject memory_mappedP_$611 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$609);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$609);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$609);
                    final SubLObject manager_$610 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$611 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$610);
                    final SubLObject memory_mappedP_$612 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$610);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$610);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$610);
                        final SubLObject manager_$611 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$612 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$611);
                        final SubLObject memory_mappedP_$613 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$611);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$611);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$611);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                sbhl_cache.initialize_all_sbhl_caching();
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$612) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$611);
                                }
                                if (dumper.NIL == memory_mappedP_$613) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$611, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$611) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$610);
                            }
                            if (dumper.NIL == memory_mappedP_$612) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$610, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$610) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$609);
                        }
                        if (dumper.NIL == memory_mappedP_$611) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$609, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$609) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$608);
                    }
                    if (dumper.NIL == memory_mappedP_$610) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$608, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 187752L)
    public static SubLObject dump_cardinality_estimates(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject filename = filename_var = kb_dump_file((SubLObject)dumper.$str547$cardinality_estimates, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$620 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$620 = file_utilities.enable_file_stream_memory_mapping(stream_$620);
            }
            try {
                dump_copyright(stream_$620);
                final SubLObject str = (SubLObject)dumper.$str548$Dumping_cardinality_estimates____;
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    cardinality_estimates.dump_cardinality_estimates_to_stream(stream_$620);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$620, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 188173L)
    public static SubLObject load_cardinality_estimates(final SubLObject directory_path) {
        return load_unit_file(directory_path, (SubLObject)dumper.$str547$cardinality_estimates, (SubLObject)dumper.$sym549$LOAD_CARDINALITY_ESTIMATES_FROM_STREAM, (SubLObject)dumper.$str550$Loading_cardinality_estimates____);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 188482L)
    public static SubLObject not_computing_arg_type_cache(final SubLObject macroform, final SubLObject environment) {
        final SubLObject datum = macroform.rest();
        final SubLObject body;
        final SubLObject current = body = datum;
        return (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym8$CLET, (SubLObject)dumper.$list551, ConsesLow.append(body, (SubLObject)dumper.NIL));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 188657L)
    public static SubLObject dump_arg_type_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$compute_arg_type_cache_on_dumpP$.getDynamicValue(thread)) {
            rebuild_arg_type_cache();
        }
        final SubLObject filename_var;
        final SubLObject at_file = filename_var = kb_dump_file((SubLObject)dumper.$str552$arg_type_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$621 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$621 = file_utilities.enable_file_stream_memory_mapping(stream_$621);
            }
            try {
                dump_copyright(stream_$621);
                final SubLObject str = (SubLObject)dumper.$str553$Dumping_arg_type_cache____;
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    cfasl.cfasl_output(at_cache.$arg_type_cache$.getGlobalValue(), stream_$621);
                    cfasl.cfasl_output((SubLObject)dumper.NIL, stream_$621);
                    cfasl.cfasl_output((SubLObject)dumper.NIL, stream_$621);
                    cfasl.cfasl_output((SubLObject)dumper.NIL, stream_$621);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$621, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 189214L)
    public static SubLObject load_arg_type_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str552$arg_type_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$622 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$622 = file_utilities.enable_file_stream_memory_mapping(stream_$622);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$622);
                    load_copyright(stream_$622);
                    final SubLObject str = (SubLObject)dumper.$str554$Loading_arg_type_cache____;
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        SubLObject dummy = (SubLObject)dumper.NIL;
                        at_cache.$arg_type_cache$.setGlobalValue(cfasl.cfasl_input(stream_$622, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        dummy = cfasl.cfasl_input(stream_$622, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        dummy = cfasl.cfasl_input(stream_$622, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        dummy = cfasl.cfasl_input(stream_$622, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                        at_cache.note_at_cache_initialized();
                        if (cfasl.cfasl_input(stream_$622, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                            Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$622)), cfasl_file);
                        }
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$622, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 190132L)
    public static SubLObject rebuild_arg_type_cache() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$623 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$624 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$623);
            final SubLObject memory_mappedP_$625 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$623);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$623);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$623);
                final SubLObject manager_$624 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$625 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$624);
                final SubLObject memory_mappedP_$626 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$624);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$624);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$624);
                    final SubLObject manager_$625 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$626 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$625);
                    final SubLObject memory_mappedP_$627 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$625);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$625);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$625);
                        final SubLObject manager_$626 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$627 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$626);
                        final SubLObject memory_mappedP_$628 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$626);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$626);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$626);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                final SubLObject str = (SubLObject)dumper.$str555$Rebuilding_arg_type_cache;
                                final SubLObject _prev_bind_0_$635 = utilities_macros.$progress_start_time$.currentBinding(thread);
                                final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                                final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                                final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                                final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                                final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                                final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                                final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                                try {
                                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                                    utilities_macros.noting_progress_preamble(str);
                                    at_cache.initialize_at_cache();
                                    utilities_macros.noting_progress_postamble();
                                }
                                finally {
                                    utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                                    utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                                    utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$635, thread);
                                }
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$627) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$626);
                                }
                                if (dumper.NIL == memory_mappedP_$628) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$626, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$626) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$625);
                            }
                            if (dumper.NIL == memory_mappedP_$627) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$625, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$625) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$624);
                        }
                        if (dumper.NIL == memory_mappedP_$626) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$624, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_12 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$624) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$623);
                    }
                    if (dumper.NIL == memory_mappedP_$625) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$623, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_12, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_13 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_13, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 190466L)
    public static SubLObject dump_defns_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL == dumper.$cyc_alexandria_defns_dump_load_supportedP$.getGlobalValue()) {
            final SubLObject filename_var;
            final SubLObject cfasl_file = filename_var = kb_dump_file((SubLObject)dumper.$str557$defns_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$636 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$636 = file_utilities.enable_file_stream_memory_mapping(stream_$636);
                }
                try {
                    dump_copyright(stream_$636);
                    final SubLObject str = (SubLObject)dumper.$str558$Dumping_defns_cache____;
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        defns.dump_defns_cache_to_stream(stream_$636);
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$636, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 190826L)
    public static SubLObject load_defns_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL == dumper.$cyc_alexandria_defns_dump_load_supportedP$.getGlobalValue()) {
            final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str557$defns_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
            if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
                final SubLObject filename_var = cfasl_file;
                SubLObject stream = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                    }
                    SubLObject stream_$637 = stream;
                    if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                        stream_$637 = file_utilities.enable_file_stream_memory_mapping(stream_$637);
                    }
                    try {
                        final SubLObject total = streams_high.file_length(stream_$637);
                        load_copyright(stream_$637);
                        final SubLObject str = (SubLObject)dumper.$str559$Loading_defns_cache____;
                        final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                        final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                        final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                        final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                        final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                        try {
                            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                            utilities_macros.noting_progress_preamble(str);
                            defns.load_defns_cache_from_stream(stream_$637);
                            if (cfasl.cfasl_input(stream_$637, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                                Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$637)), cfasl_file);
                            }
                            utilities_macros.noting_progress_postamble();
                        }
                        finally {
                            utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                            utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                            utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                            utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            streams_high.close(stream_$637, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                    }
                }
                discard_dump_filename(filename_var);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 191565L)
    public static SubLObject dump_rule_connectivity_graph(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject filename = filename_var = kb_dump_file((SubLObject)dumper.$str560$rule_connectivity_graph, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$638 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$638 = file_utilities.enable_file_stream_memory_mapping(stream_$638);
            }
            try {
                dump_copyright(stream_$638);
                final SubLObject str = (SubLObject)dumper.$str561$Dumping_rule_connectivity_graph__;
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    predicate_suggestor.dump_rule_connectivity_graph_to_stream(stream_$638);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$638, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 191565L)
    public static SubLObject load_rule_connectivity_graph(final SubLObject directory_path) {
        return load_unit_file(directory_path, (SubLObject)dumper.$str560$rule_connectivity_graph, (SubLObject)dumper.$sym562$LOAD_RULE_CONNECTIVITY_GRAPH_FROM_STREAM, (SubLObject)dumper.$str563$Loading_rule_connectivity_graph__);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 192245L)
    public static SubLObject dump_tva_cache(final SubLObject dump_directory) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject tva_cache_file = kb_dump_file((SubLObject)dumper.$str564$tva_cache, dump_directory, (SubLObject)dumper.UNPROVIDED);
            final SubLObject tvac_data_file = tva_cache.get_tva_cache_contents_data_file(dump_directory);
            final SubLObject tvac_index_file = tva_cache.get_tva_cache_contents_index_file(dump_directory);
            SubLObject fvector = (SubLObject)dumper.NIL;
            try {
                fvector = file_vector.new_file_vector(tvac_data_file, tvac_index_file, (SubLObject)dumper.$kw202$OUTPUT, file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), (SubLObject)dumper.UNPROVIDED);
                final SubLObject filename_var = tva_cache_file;
                SubLObject stream = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_0_$639 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$639, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                    }
                    SubLObject stream_$640 = stream;
                    if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                        stream_$640 = file_utilities.enable_file_stream_memory_mapping(stream_$640);
                    }
                    try {
                        dump_copyright(stream_$640);
                        final SubLObject str = (SubLObject)dumper.$str565$Dumping_TVA_cache____;
                        final SubLObject _prev_bind_0_$640 = utilities_macros.$progress_start_time$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$642 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                        try {
                            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                            utilities_macros.noting_progress_preamble(str);
                            tva_cache.dump_swappable_tva_cache_to_stream(stream_$640, fvector);
                            utilities_macros.noting_progress_postamble();
                        }
                        finally {
                            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$642, thread);
                            utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$640, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$641 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            streams_high.close(stream_$640, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$641, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$642 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$642, thread);
                    }
                }
                discard_dump_filename(filename_var);
            }
            finally {
                final SubLObject _prev_bind_0_$643 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (dumper.NIL != file_vector.file_vector_p(fvector)) {
                        file_vector.close_file_vector(fvector);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$643, thread);
                }
            }
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 192972L)
    public static SubLObject load_tva_cache(final SubLObject dump_directory) {
        final SubLObject result = load_unit_file(dump_directory, (SubLObject)dumper.$str564$tva_cache, (SubLObject)dumper.$sym566$LOAD_TVA_CACHE_FROM_STREAM, (SubLObject)dumper.$str567$Loading_TVA_cache____);
        tva_cache.reconnect_tva_cache_registry(dump_directory, cfasl.cfasl_current_common_symbols());
        return result;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 193258L)
    public static SubLObject dump_reformulator_rules(final SubLObject dump_directory) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject reformulator_rules_file = filename_var = kb_dump_file((SubLObject)dumper.$str568$reformulator_rules, dump_directory, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$646 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$646 = file_utilities.enable_file_stream_memory_mapping(stream_$646);
            }
            try {
                dump_copyright(stream_$646);
                final SubLObject str = (SubLObject)dumper.$str569$Dumping_reformulator_rules____;
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    reformulator_rule_unifier_datastructures.dump_reformulator_rules_to_stream(stream_$646);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$646, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 193258L)
    public static SubLObject load_reformulator_rules(final SubLObject dump_directory) {
        return load_unit_file(dump_directory, (SubLObject)dumper.$str568$reformulator_rules, (SubLObject)dumper.$sym570$LOAD_REFORMULATOR_RULES_FROM_STREAM, (SubLObject)dumper.$str571$Loading_reformulator_rules____);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 193914L)
    public static SubLObject dump_english_units_of_measure(final SubLObject dump_directory) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject str = (SubLObject)dumper.$str572$Dumping_English_units_of_measure_;
        final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(str);
            english_quantity_parser.ensure_english_units_of_measure_initialization();
            final SubLObject filename_var;
            final SubLObject english_units_of_measure_file = filename_var = kb_dump_file((SubLObject)dumper.$str573$english_units_of_measure, dump_directory, (SubLObject)dumper.UNPROVIDED);
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$647 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$647, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$648 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$648 = file_utilities.enable_file_stream_memory_mapping(stream_$648);
                }
                try {
                    dump_copyright(stream_$648);
                    english_quantity_parser.dump_english_units_of_measure_to_stream(stream_$648);
                }
                finally {
                    final SubLObject _prev_bind_0_$648 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$648, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$648, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$649 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$649, thread);
                }
            }
            discard_dump_filename(filename_var);
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 193914L)
    public static SubLObject load_english_units_of_measure(final SubLObject dump_directory) {
        return load_unit_file(dump_directory, (SubLObject)dumper.$str573$english_units_of_measure, (SubLObject)dumper.$sym574$LOAD_ENGLISH_UNITS_OF_MEASURE_FROM_STREAM, (SubLObject)dumper.$str575$Loading_English_units_of_measure_);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 194715L)
    public static SubLObject dump_cae_query_search_tables(final SubLObject dump_directory) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != control_vars.non_tiny_kb_loadedP()) {
            final SubLObject str = (SubLObject)dumper.$str576$Dumping_CAE_query_search_tables__;
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                cae_query_search.ensure_cae_query_search_tables_initialization();
                final SubLObject filename_var;
                final SubLObject cae_query_search_tables_file = filename_var = kb_dump_file((SubLObject)dumper.$str577$cae_query_search_tables, dump_directory, (SubLObject)dumper.UNPROVIDED);
                SubLObject stream = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_0_$651 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$651, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                    }
                    SubLObject stream_$652 = stream;
                    if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                        stream_$652 = file_utilities.enable_file_stream_memory_mapping(stream_$652);
                    }
                    try {
                        dump_copyright(stream_$652);
                        cae_query_search.dump_cae_query_search_tables_to_stream(stream_$652);
                    }
                    finally {
                        final SubLObject _prev_bind_0_$652 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            streams_high.close(stream_$652, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$652, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$653 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$653, thread);
                    }
                }
                discard_dump_filename(filename_var);
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 194715L)
    public static SubLObject load_cae_query_search_tables(final SubLObject dump_directory) {
        if (dumper.NIL != Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str577$cae_query_search_tables, dump_directory, (SubLObject)dumper.UNPROVIDED))) {
            return load_unit_file(dump_directory, (SubLObject)dumper.$str577$cae_query_search_tables, (SubLObject)dumper.$sym578$LOAD_CAE_QUERY_SEARCH_TABLES_FROM_STREAM, (SubLObject)dumper.$str579$Loading_CAE_Query_Search_Tables__);
        }
        return (SubLObject)dumper.T;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 195689L)
    public static SubLObject dump_sbhl_time_state(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject filename_var;
            final SubLObject sbhl_file = filename_var = kb_dump_file((SubLObject)dumper.$str580$sbhl_time, directory_path, (SubLObject)dumper.UNPROVIDED);
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0_$655 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$655, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$656 = stream;
                if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                    stream_$656 = file_utilities.enable_file_stream_memory_mapping(stream_$656);
                }
                try {
                    dump_copyright(stream_$656);
                    final SubLObject str = (SubLObject)dumper.$str581$Dumping_sbhl_time_state____;
                    final SubLObject _prev_bind_0_$656 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_1_$658 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        cfasl.cfasl_output(sbhl_time_vars.$sbhl_temporal_link_support_table$.getGlobalValue(), stream_$656);
                        cfasl.cfasl_output(sbhl_time_vars.$sbhl_temporal_link_disjunction_support_table$.getGlobalValue(), stream_$656);
                        cfasl.cfasl_output(sbhl_time_vars.$sbhl_temporal_link_disjunction_term_table$.getGlobalValue(), stream_$656);
                        cfasl.cfasl_output(sbhl_time_vars.$sbhl_extended_universal_date_list$.getGlobalValue(), stream_$656);
                        cfasl.cfasl_output(sbhl_time_dates.$sbhl_time_date_graph$.getGlobalValue(), stream_$656);
                        cfasl.cfasl_output(sbhl_time_dates.$sbhl_time_date_object_predicate_links$.getGlobalValue(), stream_$656);
                        cfasl.cfasl_output(sbhl_time_dates.$sbhl_time_date_object_inverse_links$.getGlobalValue(), stream_$656);
                        cfasl.cfasl_output(sbhl_time_dates.$sbhl_time_object_date_predicate_links$.getGlobalValue(), stream_$656);
                        cfasl.cfasl_output(sbhl_time_dates.$sbhl_time_object_date_inverse_links$.getGlobalValue(), stream_$656);
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$658, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$656, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$657 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$656, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$657, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$658 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$658, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 195689L)
    public static SubLObject load_sbhl_time_state(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str580$sbhl_time, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == Filesys.probe_file(cfasl_file)) {
            cfasl_file = kb_dump_file((SubLObject)dumper.$str582$sbhl, directory_path, (SubLObject)dumper.UNPROVIDED);
        }
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.UNPROVIDED)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$661 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$661 = file_utilities.enable_file_stream_memory_mapping(stream_$661);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$661);
                    load_copyright(stream_$661);
                    final SubLObject str = (SubLObject)dumper.$str583$Loading_SBHL_time_state____;
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        sbhl_time_vars.$sbhl_temporal_link_support_table$.setGlobalValue(cfasl.cfasl_input(stream_$661, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_time_vars.$sbhl_temporal_link_disjunction_support_table$.setGlobalValue(cfasl.cfasl_input(stream_$661, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_time_vars.$sbhl_temporal_link_disjunction_term_table$.setGlobalValue(cfasl.cfasl_input(stream_$661, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_time_vars.$sbhl_extended_universal_date_list$.setGlobalValue(cfasl.cfasl_input(stream_$661, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_time_dates.$sbhl_time_date_graph$.setGlobalValue(cfasl.cfasl_input(stream_$661, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_time_dates.$sbhl_time_date_object_predicate_links$.setGlobalValue(cfasl.cfasl_input(stream_$661, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_time_dates.$sbhl_time_date_object_inverse_links$.setGlobalValue(cfasl.cfasl_input(stream_$661, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_time_dates.$sbhl_time_object_date_predicate_links$.setGlobalValue(cfasl.cfasl_input(stream_$661, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        sbhl_time_dates.$sbhl_time_object_date_inverse_links$.setGlobalValue(cfasl.cfasl_input(stream_$661, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED));
                        if (cfasl.cfasl_input(stream_$661, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                            Errors.warn((SubLObject)dumper.$str584$_d_bytes_of_unread_sbhl_time_stat, Numbers.subtract(total, compatibility.get_file_position(stream_$661)), cfasl_file);
                        }
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$661, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 195689L)
    public static SubLObject rebuild_sbhl_time_data() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$662 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$663 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$662);
            final SubLObject memory_mappedP_$664 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$662);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$662);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$662);
                final SubLObject manager_$663 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$664 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$663);
                final SubLObject memory_mappedP_$665 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$663);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$663);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$663);
                    final SubLObject manager_$664 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$665 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$664);
                    final SubLObject memory_mappedP_$666 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$664);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$664);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$664);
                        final SubLObject manager_$665 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$666 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$665);
                        final SubLObject memory_mappedP_$667 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$665);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$665);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$665);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                sbhl_link_methods.make_all_sbhl_time_links();
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$666) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$665);
                                }
                                if (dumper.NIL == memory_mappedP_$667) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$665, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$665) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$664);
                            }
                            if (dumper.NIL == memory_mappedP_$666) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$664, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$664) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$663);
                        }
                        if (dumper.NIL == memory_mappedP_$665) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$663, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$663) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$662);
                    }
                    if (dumper.NIL == memory_mappedP_$664) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$662, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 198701L)
    public static SubLObject dump_rtp_rules_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject cfasl_file = filename_var = kb_dump_file((SubLObject)dumper.$str585$rtp_rules_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$674 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$674 = file_utilities.enable_file_stream_memory_mapping(stream_$674);
            }
            try {
                dump_copyright(stream_$674);
                final SubLObject str = (SubLObject)dumper.$str586$Dumping_RTP_rules_cache____;
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    rtp_datastructures.dump_rtp_rules_cache_to_stream(stream_$674);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$674, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 198701L)
    public static SubLObject load_rtp_rules_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = StreamsLow.$stream_initial_input_buffer_size$.currentBinding(thread);
        final SubLObject _prev_bind_2 = StreamsLow.$stream_initial_output_buffer_size$.currentBinding(thread);
        try {
            StreamsLow.$stream_initial_input_buffer_size$.bind(file_utilities.$default_big_stream_buffer_size$.getDynamicValue(thread), thread);
            StreamsLow.$stream_initial_output_buffer_size$.bind(StreamsLow.$stream_initial_input_buffer_size$.getDynamicValue(thread), thread);
            final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str585$rtp_rules_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
            if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
                final SubLObject filename_var = cfasl_file;
                SubLObject stream = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_0_$675 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$675, thread);
                    }
                    if (!stream.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                    }
                    SubLObject stream_$676 = stream;
                    if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                        stream_$676 = file_utilities.enable_file_stream_memory_mapping(stream_$676);
                    }
                    try {
                        final SubLObject total = streams_high.file_length(stream_$676);
                        load_copyright(stream_$676);
                        final SubLObject str = (SubLObject)dumper.$str587$Loading_RTP_rules_cache____;
                        final SubLObject _prev_bind_0_$676 = utilities_macros.$progress_start_time$.currentBinding(thread);
                        final SubLObject _prev_bind_1_$678 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                        final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                        final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                        final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                        try {
                            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                            utilities_macros.noting_progress_preamble(str);
                            rtp_datastructures.load_rtp_rules_cache_from_stream(stream_$676);
                            if (cfasl.cfasl_input(stream_$676, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                                Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$676)), cfasl_file);
                            }
                            utilities_macros.noting_progress_postamble();
                        }
                        finally {
                            utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                            utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                            utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$678, thread);
                            utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$676, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$677 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            streams_high.close(stream_$676, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$677, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$678 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (stream.isStream()) {
                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$678, thread);
                    }
                }
                discard_dump_filename(filename_var);
            }
        }
        finally {
            StreamsLow.$stream_initial_output_buffer_size$.rebind(_prev_bind_2, thread);
            StreamsLow.$stream_initial_input_buffer_size$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 200028L)
    public static SubLObject dump_somewhere_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject cfasl_file = filename_var = kb_dump_file((SubLObject)dumper.$str588$somewhere_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$681 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$681 = file_utilities.enable_file_stream_memory_mapping(stream_$681);
            }
            try {
                dump_copyright(stream_$681);
                final SubLObject str = (SubLObject)dumper.$str589$Dumping_somewhere_rules_cache____;
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    somewhere_cache.dump_somewhere_cache_to_stream(stream_$681);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$681, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 200445L)
    public static SubLObject load_somewhere_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str588$somewhere_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$682 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$682 = file_utilities.enable_file_stream_memory_mapping(stream_$682);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$682);
                    load_copyright(stream_$682);
                    final SubLObject str = (SubLObject)dumper.$str590$Loading_somewhere_cache____;
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        somewhere_cache.load_somewhere_cache_from_stream(stream_$682);
                        if (cfasl.cfasl_input(stream_$682, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                            Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$682)), cfasl_file);
                        }
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$682, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 201130L)
    public static SubLObject dump_arity_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject cfasl_file = filename_var = kb_dump_file((SubLObject)dumper.$str591$arity_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$683 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$683 = file_utilities.enable_file_stream_memory_mapping(stream_$683);
            }
            try {
                dump_copyright(stream_$683);
                final SubLObject str = (SubLObject)dumper.$str592$Dumping_arity_cache____;
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    arity.dump_arity_cache_to_stream(stream_$683);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$683, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 201519L)
    public static SubLObject load_arity_cache(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str591$arity_cache, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$684 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$684 = file_utilities.enable_file_stream_memory_mapping(stream_$684);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$684);
                    load_copyright(stream_$684);
                    final SubLObject str = (SubLObject)dumper.$str593$Loading_arity_cache____;
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        arity.load_arity_cache_from_stream(stream_$684);
                        if (cfasl.cfasl_input(stream_$684, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                            Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$684)), cfasl_file);
                        }
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$684, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject dump_pph_phrase_shells(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        dump_kb_object_count(directory_path, (SubLObject)dumper.$str594$pph_phrase_count, pph_data_structures.pph_phrase_count());
        final SubLObject filename_var;
        final SubLObject pph_phrase_shell_file = filename_var = kb_dump_file((SubLObject)dumper.$str595$pph_phrase_shell, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$685 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$685 = file_utilities.enable_file_stream_memory_mapping(stream_$685);
            }
            try {
                dump_copyright(stream_$685);
                final SubLObject idx = pph_data_structures.pph_phrase_id_index();
                final SubLObject mess = (SubLObject)dumper.$str596$Dumping_pph_phrase_shells;
                final SubLObject total = id_index.id_index_count(idx);
                SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                assert dumper.NIL != Types.stringp(mess) : mess;
                final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                try {
                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                    try {
                        utilities_macros.noting_percent_progress_preamble(mess);
                        final SubLObject idx_$686 = idx;
                        if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$686, (SubLObject)dumper.$kw266$SKIP)) {
                            final SubLObject idx_$687 = idx_$686;
                            if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$687, (SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject vector_var = id_index.id_index_dense_objects(idx_$687);
                                final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                SubLObject length;
                                SubLObject v_iteration;
                                SubLObject suid;
                                SubLObject v_pph_phrase;
                                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                    suid = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                    v_pph_phrase = Vectors.aref(vector_var, suid);
                                    if (dumper.NIL == id_index.id_index_tombstone_p(v_pph_phrase) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                        if (dumper.NIL != id_index.id_index_tombstone_p(v_pph_phrase)) {
                                            v_pph_phrase = (SubLObject)dumper.$kw266$SKIP;
                                        }
                                        if (!suid.equal(pph_phrase.pph_phrase_suid(v_pph_phrase))) {
                                            Errors.warn((SubLObject)dumper.$str597$PPH_phrase__A_indexed_incorrectly, v_pph_phrase);
                                        }
                                        else {
                                            dump_pph_phrase_shell(v_pph_phrase, stream_$685);
                                        }
                                        sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                }
                            }
                            final SubLObject idx_$688 = idx_$686;
                            if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$688)) {
                                final SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$688);
                                SubLObject suid2 = (SubLObject)dumper.NIL;
                                SubLObject v_pph_phrase2 = (SubLObject)dumper.NIL;
                                final Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                                try {
                                    while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                                        final Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                                        suid2 = Hashtables.getEntryKey(cdohash_entry);
                                        v_pph_phrase2 = Hashtables.getEntryValue(cdohash_entry);
                                        if (!suid2.equal(pph_phrase.pph_phrase_suid(v_pph_phrase2))) {
                                            Errors.warn((SubLObject)dumper.$str597$PPH_phrase__A_indexed_incorrectly, v_pph_phrase2);
                                        }
                                        else {
                                            dump_pph_phrase_shell(v_pph_phrase2, stream_$685);
                                        }
                                        sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                }
                                finally {
                                    Hashtables.releaseEntrySetIterator(cdohash_iterator);
                                }
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$689 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            utilities_macros.noting_percent_progress_postamble();
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$689, thread);
                        }
                    }
                }
                finally {
                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    streams_high.close(stream_$685, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values3 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values3);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject load_pph_phrase_shells(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str595$pph_phrase_shell, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject pph_phrase_count = load_pph_phrase_count(directory_path);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
            pph_data_structures.clear_pph_phrase_id_index((SubLObject)((dumper.NIL != pph_phrase_count) ? pph_phrase_count : dumper.ZERO_INTEGER));
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$690 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$690 = file_utilities.enable_file_stream_memory_mapping(stream_$690);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$690);
                    load_copyright(stream_$690);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str598$Loading_pph_phrase_shells);
                            SubLObject dump_id;
                            for (dump_id = (SubLObject)dumper.NIL, dump_id = cfasl.cfasl_input(stream_$690, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); dump_id != dumper.$kw226$EOF; dump_id = cfasl.cfasl_input(stream_$690, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$690), total);
                                if (dump_id.isInteger()) {
                                    load_pph_phrase_shell(dump_id, stream_$690);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$691 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$691, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$690, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject load_pph_phrase_count(final SubLObject directory_path) {
        return load_kb_object_count(directory_path, (SubLObject)dumper.$str594$pph_phrase_count);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject dump_pph_phrase_shell(final SubLObject v_pph_phrase, final SubLObject stream) {
        cfasl.cfasl_output(pph_phrase.pph_phrase_suid(v_pph_phrase), stream);
        return v_pph_phrase;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject load_pph_phrase_shell(final SubLObject dump_id, final SubLObject stream) {
        return pph_data_structures.make_pph_phrase_shell(dump_id);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject dump_pph_phrase_defs(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pph_phrase_file = kb_dump_file((SubLObject)dumper.$str599$pph_phrase, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject pph_phrase_index_file = kb_dump_file((SubLObject)dumper.$str600$pph_phrase_index, directory_path, (SubLObject)dumper.UNPROVIDED);
        final SubLObject filename_var = pph_phrase_file;
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$692 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$692 = file_utilities.enable_file_stream_memory_mapping(stream_$692);
            }
            try {
                final SubLObject filename_var_$693 = pph_phrase_index_file;
                SubLObject stream_$693 = (SubLObject)dumper.NIL;
                try {
                    final SubLObject _prev_bind_2 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                    try {
                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                        stream_$693 = compatibility.open_binary(filename_var_$693, (SubLObject)dumper.$kw202$OUTPUT);
                    }
                    finally {
                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_2, thread);
                    }
                    if (!stream_$693.isStream()) {
                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var_$693);
                    }
                    SubLObject index_stream = stream_$693;
                    if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                        index_stream = file_utilities.enable_file_stream_memory_mapping(index_stream);
                    }
                    try {
                        dump_copyright(stream_$692);
                        final SubLObject fvector = file_vector.create_file_vector(stream_$692, index_stream);
                        final SubLObject idx = pph_data_structures.pph_phrase_id_index();
                        final SubLObject mess = (SubLObject)dumper.$str601$Dumping_pph_phrase_definitions;
                        final SubLObject total = id_index.id_index_count(idx);
                        SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                        assert dumper.NIL != Types.stringp(mess) : mess;
                        final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                        final SubLObject _prev_bind_5 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                        final SubLObject _prev_bind_6 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                        try {
                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                            try {
                                utilities_macros.noting_percent_progress_preamble(mess);
                                final SubLObject idx_$695 = idx;
                                if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$695, (SubLObject)dumper.$kw266$SKIP)) {
                                    final SubLObject idx_$696 = idx_$695;
                                    if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$696, (SubLObject)dumper.$kw266$SKIP)) {
                                        final SubLObject vector_var = id_index.id_index_dense_objects(idx_$696);
                                        final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                        SubLObject length;
                                        SubLObject v_iteration;
                                        SubLObject suid;
                                        SubLObject v_pph_phrase;
                                        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                            suid = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                            v_pph_phrase = Vectors.aref(vector_var, suid);
                                            if (dumper.NIL == id_index.id_index_tombstone_p(v_pph_phrase) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                if (dumper.NIL != id_index.id_index_tombstone_p(v_pph_phrase)) {
                                                    v_pph_phrase = (SubLObject)dumper.$kw266$SKIP;
                                                }
                                                if (!suid.equal(pph_phrase.pph_phrase_suid(v_pph_phrase))) {
                                                    Errors.warn((SubLObject)dumper.$str597$PPH_phrase__A_indexed_incorrectly, v_pph_phrase);
                                                }
                                                else {
                                                    file_vector.update_file_vector_index_linear(fvector);
                                                    dump_pph_phrase_def(v_pph_phrase, stream_$692);
                                                }
                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                utilities_macros.note_percent_progress(sofar, total);
                                            }
                                        }
                                    }
                                    final SubLObject idx_$697 = idx_$695;
                                    if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$697)) {
                                        final SubLObject cdohash_table = id_index.id_index_sparse_objects(idx_$697);
                                        SubLObject suid2 = (SubLObject)dumper.NIL;
                                        SubLObject v_pph_phrase2 = (SubLObject)dumper.NIL;
                                        final Iterator cdohash_iterator = Hashtables.getEntrySetIterator(cdohash_table);
                                        try {
                                            while (Hashtables.iteratorHasNext(cdohash_iterator)) {
                                                final Map.Entry cdohash_entry = Hashtables.iteratorNextEntry(cdohash_iterator);
                                                suid2 = Hashtables.getEntryKey(cdohash_entry);
                                                v_pph_phrase2 = Hashtables.getEntryValue(cdohash_entry);
                                                if (!suid2.equal(pph_phrase.pph_phrase_suid(v_pph_phrase2))) {
                                                    Errors.warn((SubLObject)dumper.$str597$PPH_phrase__A_indexed_incorrectly, v_pph_phrase2);
                                                }
                                                else {
                                                    file_vector.update_file_vector_index_linear(fvector);
                                                    dump_pph_phrase_def(v_pph_phrase2, stream_$692);
                                                }
                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                utilities_macros.note_percent_progress(sofar, total);
                                            }
                                        }
                                        finally {
                                            Hashtables.releaseEntrySetIterator(cdohash_iterator);
                                        }
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$698 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    utilities_macros.noting_percent_progress_postamble();
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$698, thread);
                                }
                            }
                        }
                        finally {
                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_6, thread);
                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_5, thread);
                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_4, thread);
                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_3, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            streams_high.close(index_stream, (SubLObject)dumper.UNPROVIDED);
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (stream_$693.isStream()) {
                            streams_high.close(stream_$693, (SubLObject)dumper.UNPROVIDED);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                    }
                }
                discard_dump_filename(filename_var_$693);
            }
            finally {
                final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    streams_high.close(stream_$692, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject load_pph_phrase_defs(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject pph_phrase_cfasl_file = kb_dump_file((SubLObject)dumper.$str599$pph_phrase, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(pph_phrase_cfasl_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var;
            final SubLObject pph_phrase_file = filename_var = pph_phrase_cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$699 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$699 = file_utilities.enable_file_stream_memory_mapping(stream_$699);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$699);
                    load_copyright(stream_$699);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble((SubLObject)dumper.$str602$Loading_pph_phrase_definitions);
                            SubLObject suid;
                            for (suid = (SubLObject)dumper.NIL, suid = cfasl.cfasl_input(stream_$699, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED); suid != dumper.$kw226$EOF; suid = cfasl.cfasl_input(stream_$699, (SubLObject)dumper.NIL, (SubLObject)dumper.UNPROVIDED)) {
                                utilities_macros.note_percent_progress(compatibility.get_file_position(stream_$699), total);
                                if (suid.isInteger()) {
                                    load_pph_phrase_def(suid, stream_$699);
                                }
                                else {
                                    Errors.warn((SubLObject)dumper.$str603$pph_phrase_definitions_out_of_syn);
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$700 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$700, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_5, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_4, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        streams_high.close(stream_$699, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject dump_pph_phrase_def(final SubLObject v_pph_phrase, final SubLObject stream) {
        cfasl.cfasl_output(pph_phrase.pph_phrase_suid(v_pph_phrase), stream);
        pph_data_structures.dump_pph_phrase_content(v_pph_phrase, stream);
        return v_pph_phrase;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject load_pph_phrase_def(final SubLObject suid, final SubLObject stream) {
        final SubLObject v_pph_phrase = pph_data_structures.find_pph_phrase_by_id(suid);
        pph_data_structures.load_pph_phrase_content(v_pph_phrase, stream);
        return v_pph_phrase;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject dump_gen_template_store(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject filename_var;
        final SubLObject cfasl_file = filename_var = kb_dump_file((SubLObject)dumper.$str604$gen_template_store, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$701 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$701 = file_utilities.enable_file_stream_memory_mapping(stream_$701);
            }
            try {
                dump_copyright(stream_$701);
                final SubLObject str = (SubLObject)dumper.$str605$Dumping___genTemplate_store____;
                final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    pph_data_structures.dump_gen_template_store_to_stream(stream_$701);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$701, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject load_gen_template_store(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject cfasl_file = kb_dump_file((SubLObject)dumper.$str604$gen_template_store, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(cfasl_file, (SubLObject)dumper.T)) {
            final SubLObject filename_var = cfasl_file;
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$702 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$702 = file_utilities.enable_file_stream_memory_mapping(stream_$702);
                }
                try {
                    final SubLObject total = streams_high.file_length(stream_$702);
                    load_copyright(stream_$702);
                    final SubLObject str = (SubLObject)dumper.$str606$Loading___genTemplate_store____;
                    final SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                    final SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                    final SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                    final SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
                    final SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                    final SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
                    try {
                        utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                        utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                        utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                        utilities_macros.noting_progress_preamble(str);
                        pph_data_structures.load_gen_template_store_from_stream(stream_$702);
                        if (cfasl.cfasl_input(stream_$702, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF) != dumper.$kw226$EOF) {
                            Errors.warn((SubLObject)dumper.$str227$_d_bytes_of_unread_stuff_in__S, Numbers.subtract(total, compatibility.get_file_position(stream_$702)), cfasl_file);
                        }
                        utilities_macros.noting_progress_postamble();
                    }
                    finally {
                        utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
                        utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
                        utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
                        utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
                        utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
                        utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
                        utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
                        utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_10 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$702, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_10, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_11 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_11, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject dump_pph_name_string_preds(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject preds = pph_methods.pph_name_string_preds((SubLObject)dumper.UNPROVIDED);
        final SubLObject filename_var = kb_dump_file((SubLObject)dumper.$str607$pph_name_string_preds, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$703 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$703 = file_utilities.enable_file_stream_memory_mapping(stream_$703);
            }
            try {
                dump_copyright(stream_$703);
                cfasl.cfasl_output(preds, stream_$703);
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$703, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.$kw608$DUMPED;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject dump_pph_phrase_fns(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL == pph_functions.pph_phrase_fns_initializedP()) {
            pph_functions.initialize_pph_phrase_fns();
        }
        final SubLObject filename_var = kb_dump_file((SubLObject)dumper.$str609$pph_phrase_fns, directory_path, (SubLObject)dumper.UNPROVIDED);
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw202$OUTPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
            }
            SubLObject stream_$704 = stream;
            if (dumper.$kw202$OUTPUT == dumper.$kw151$INPUT) {
                stream_$704 = file_utilities.enable_file_stream_memory_mapping(stream_$704);
            }
            try {
                dump_copyright(stream_$704);
                cfasl.cfasl_output(pph_vars.$pph_phrase_fns$.getDynamicValue(thread), stream_$704);
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    streams_high.close(stream_$704, (SubLObject)dumper.UNPROVIDED);
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        discard_dump_filename(filename_var);
        return (SubLObject)dumper.$kw608$DUMPED;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject load_pph_phrase_fns(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject file_name = kb_dump_file((SubLObject)dumper.$str609$pph_phrase_fns, directory_path, (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != verify_file_existence(file_name, (SubLObject)dumper.T)) {
            final SubLObject filename_var = kb_dump_file((SubLObject)dumper.$str609$pph_phrase_fns, directory_path, (SubLObject)dumper.UNPROVIDED);
            SubLObject stream = (SubLObject)dumper.NIL;
            try {
                final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                try {
                    stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                    stream = compatibility.open_binary(filename_var, (SubLObject)dumper.$kw151$INPUT);
                }
                finally {
                    stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
                }
                if (!stream.isStream()) {
                    Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename_var);
                }
                SubLObject stream_$705 = stream;
                if (dumper.$kw151$INPUT == dumper.$kw151$INPUT) {
                    stream_$705 = file_utilities.enable_file_stream_memory_mapping(stream_$705);
                }
                try {
                    load_copyright(stream_$705);
                    pph_vars.$pph_phrase_fns$.setDynamicValue(cfasl.cfasl_input(stream_$705, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED), thread);
                }
                finally {
                    final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(stream_$705, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (stream.isStream()) {
                        streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                }
            }
            discard_dump_filename(filename_var);
        }
        else {
            pph_functions.initialize_pph_phrase_fns();
        }
        return (SubLObject)dumper.$kw610$LOADED;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject dump_paraphrase_cycl_caches(final SubLObject directory_path) {
        pph_main.ensure_pph_initialized();
        pph_data_structures.optimize_pph_phrase_id_index((SubLObject)dumper.T);
        dump_pph_phrase_shells(directory_path);
        dump_pph_phrase_defs(directory_path);
        dump_gen_template_store(directory_path);
        dump_pph_phrase_fns(directory_path);
        dump_pph_name_string_preds(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject rebuild_pph_phrases() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$706 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$707 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$706);
            final SubLObject memory_mappedP_$708 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$706);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$706);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$706);
                final SubLObject manager_$707 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$708 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$707);
                final SubLObject memory_mappedP_$709 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$707);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$707);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$707);
                    final SubLObject manager_$708 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$709 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$708);
                    final SubLObject memory_mappedP_$710 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$708);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$708);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$708);
                        final SubLObject manager_$709 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$710 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$709);
                        final SubLObject memory_mappedP_$711 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$709);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$709);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$709);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                pph_data_structures.clear_gen_template_store();
                                pph_templates.initialize_gen_template_store();
                            }
                            finally {
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$710) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$709);
                                }
                                if (dumper.NIL == memory_mappedP_$711) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$709, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$709) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$708);
                            }
                            if (dumper.NIL == memory_mappedP_$710) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$708, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$708) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$707);
                        }
                        if (dumper.NIL == memory_mappedP_$709) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$707, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$707) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$706);
                    }
                    if (dumper.NIL == memory_mappedP_$708) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$706, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 202188L)
    public static SubLObject load_paraphrase_cycl_caches(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str595$pph_phrase_shell, directory_path, (SubLObject)dumper.UNPROVIDED)) && dumper.NIL != Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str600$pph_phrase_index, directory_path, (SubLObject)dumper.UNPROVIDED)) && dumper.NIL != Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str599$pph_phrase, directory_path, (SubLObject)dumper.UNPROVIDED)) && dumper.NIL != Filesys.probe_file(kb_dump_file((SubLObject)dumper.$str604$gen_template_store, directory_path, (SubLObject)dumper.UNPROVIDED))) {
            final SubLObject str = (SubLObject)dumper.$str611$Initializing_minor_paraphrase_Cyc;
            final SubLObject _prev_bind_0 = utilities_macros.$progress_start_time$.currentBinding(thread);
            final SubLObject _prev_bind_2 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
            final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
            final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
            final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
            final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
            final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
            final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
            try {
                utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                utilities_macros.noting_progress_preamble(str);
                pph_vars.initialize_pph_vars();
                pph_data_structures.clear_gen_template_store();
                utilities_macros.noting_progress_postamble();
            }
            finally {
                utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_2, thread);
                utilities_macros.$progress_start_time$.rebind(_prev_bind_0, thread);
            }
            load_pph_phrase_fns(directory_path);
            load_pph_phrase_shells(directory_path);
            load_pph_phrase_defs(directory_path);
            load_gen_template_store(directory_path);
            pph_main.clear_paraphrase_caches((SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
            pph_data_structures.note_gen_template_store_initialized();
            if (dumper.NIL == load_pph_phrase_count(directory_path)) {
                pph_data_structures.optimize_pph_phrase_id_index((SubLObject)dumper.NIL);
            }
            pph_main.set_pph_initialized();
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 210511L)
    public static SubLObject dump_kb_activities(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str612$________Performing_other_KB_dump_, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED));
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        generate_constant_shell_file(directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 211035L)
    public static SubLObject load_kb_initializations() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.$str613$________Performing_KB_initializat, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED));
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        sbhl_module_vars.clean_sbhl_modules();
        kb_load_gc_checkpoint();
        constant_completion.compute_bogus_constant_names_in_code();
        kb_load_gc_checkpoint();
        kb_utilities.initialize_kb_state_hashes();
        kb_load_gc_checkpoint();
        ke.initialize_old_constant_names();
        kb_load_gc_checkpoint();
        utilities_macros.initialize_kb_variables();
        kb_load_gc_checkpoint();
        if (dumper.NIL != kb_control_vars.reformulator_kb_loaded_p()) {
            if (dumper.NIL == reformulator_datastructures.reformulator_variables_initializedP()) {
                reformulator_datastructures.initialize_reformulator_variables();
            }
            if (dumper.NIL == reformulator_datastructures.reformulator_rules_initializedP()) {
                reformulator_rule_unifier_datastructures.rebuild_reformulator_rules();
            }
        }
        if (dumper.NIL != kb_control_vars.lexicon_kb_loaded_p()) {
            lexicon_cache.initialize_lexicon_modules();
            kb_load_gc_checkpoint();
        }
        open_cyc_inference_api.initialize_open_cyc_inference_api_vars();
        kb_load_gc_checkpoint();
        rebuild_computable_but_not_dumpable_yet();
        kb_load_gc_checkpoint();
        if (dumper.NIL == control_vars.non_tiny_kb_loadedP()) {
            system_parameters.$allow_guest_to_editP$.setDynamicValue((SubLObject)dumper.T, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 213218L)
    public static SubLObject initialize_kb_features() {
        reformulator_datastructures.initialize_reformulator_kb_feature();
        pph_utilities.initialize_paraphrase_kb_feature();
        sksi_infrastructure_utilities.initialize_sksi_kb_feature();
        quantities.initialize_quant_kb_feature();
        date_utilities.initialize_date_kb_feature();
        extended_numbers.initialize_fraction_kb_feature();
        sbhl_time_utilities.initialize_time_kb_feature();
        if (dumper.NIL == kb_control_vars.time_kb_loaded_p()) {
            hlmt.disable_hlmts();
        }
        lexicon_cache.initialize_lexicon_kb_feature();
        parsing_vars.initialize_nl_kb_feature();
        wordnet_import.initialize_wordnet_import_kb_feature();
        rtp_initialize.initialize_rtp_kb_feature();
        rkf_tools.initialize_rkf_kb_feature();
        wordnet.initialize_wordnet_kb_feature();
        shop_main.initialize_planner_kb_feature();
        kct_utils.initialize_kct_kb_feature();
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 214716L)
    public static SubLObject show_kb_features() {
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str614$Reformulator___A__, kb_control_vars.reformulator_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str615$Paraphrase___A__, kb_control_vars.paraphrase_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str616$Cyc_Task_Scheduler___A__, kb_control_vars.cyc_task_scheduler_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str617$SKSI___A__, kb_control_vars.sksi_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str618$Quant___A__, kb_control_vars.quant_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str619$Date___A__, kb_control_vars.date_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str620$Time___A__, kb_control_vars.time_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str621$Lexicon___A__, kb_control_vars.lexicon_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str622$NL___A__, kb_control_vars.nl_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str623$RTP___A__, kb_control_vars.rtp_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str624$RKF___A__, kb_control_vars.rkf_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str625$Thesaurus___A__, kb_control_vars.thesaurus_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str626$Wordnet___A__, kb_control_vars.wordnet_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str627$Planner___A__, kb_control_vars.planner_kb_loaded_p());
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str628$Secure___A__, kb_control_vars.cyc_secure_kb_loaded_p());
        streams_high.force_output((SubLObject)dumper.T);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 220401L)
    public static SubLObject dump_essential_kb_evaluatable(SubLObject output_dir) {
        if (output_dir == dumper.UNPROVIDED) {
            output_dir = (SubLObject)dumper.$str629$_scratch_;
        }
        control_vars.$save_asked_queriesP$.setDynamicValue((SubLObject)dumper.NIL);
        dump_essential_kb_constants_evaluatable(Sequences.cconcatenate(output_dir, (SubLObject)dumper.$str630$load_all_constants_lisp));
        dump_essential_kb_narts_evaluatable(Sequences.cconcatenate(output_dir, (SubLObject)dumper.$str631$load_all_narts_lisp));
        dump_essential_kb_assertions_evaluatable(Sequences.cconcatenate(output_dir, (SubLObject)dumper.$str632$load_all_assertions_lisp));
        dump_essential_kb_kb_hl_supports_evaluatable(Sequences.cconcatenate(output_dir, (SubLObject)dumper.$str633$load_all_kb_hl_supports_lisp), Sequences.cconcatenate(output_dir, (SubLObject)dumper.$str634$load_all_kb_hl_supports_just_lisp));
        dump_essential_kb_deductions_evaluatable(Sequences.cconcatenate(output_dir, (SubLObject)dumper.$str635$load_all_deductions_lisp), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        dump_essential_kb_bookkeeping_gafs_evaluatable(Sequences.cconcatenate(output_dir, (SubLObject)dumper.$str636$load_all_bookkeeping_gafs_lisp));
        dump_experience(output_dir, (SubLObject)dumper.NIL);
        dump_special_objects(output_dir);
        sbhl_caching_policies.dump_active_kb_sbhl_caching_policies(output_dir, (SubLObject)dumper.T);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 222057L)
    public static SubLObject load_essential_kb_evaluatable_file(final SubLObject directory_path, final SubLObject file_name, final SubLObject file_type, final SubLObject first_file_type, final SubLObject finish_after_loading_specified_file_typeP, final SubLObject ops_per_transaction, final SubLObject start_operation, final SubLObject stop_operation, final SubLObject checkpoint_dir) {
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 223674L)
    public static SubLObject load_essential_kb_evaluatable(final SubLObject directory_path, SubLObject files, SubLObject finish_after_loading_specified_typeP, SubLObject ops_per_transaction, SubLObject start_operation, SubLObject stop_operation, SubLObject checkpoint_dir, SubLObject database_dir) {
        if (files == dumper.UNPROVIDED) {
            files = (SubLObject)dumper.$kw639$ALL;
        }
        if (finish_after_loading_specified_typeP == dumper.UNPROVIDED) {
            finish_after_loading_specified_typeP = (SubLObject)dumper.NIL;
        }
        if (ops_per_transaction == dumper.UNPROVIDED) {
            ops_per_transaction = (SubLObject)dumper.$int640$250;
        }
        if (start_operation == dumper.UNPROVIDED) {
            start_operation = (SubLObject)dumper.ZERO_INTEGER;
        }
        if (stop_operation == dumper.UNPROVIDED) {
            stop_operation = (SubLObject)dumper.NIL;
        }
        if (checkpoint_dir == dumper.UNPROVIDED) {
            checkpoint_dir = (SubLObject)dumper.NIL;
        }
        if (database_dir == dumper.UNPROVIDED) {
            database_dir = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        control_vars.$save_asked_queriesP$.setDynamicValue((SubLObject)dumper.NIL, thread);
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.$str641$________Loading_evaluatable_essen, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED));
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        final SubLObject _prev_bind_0 = control_vars.$bootstrapping_kbP$.currentBinding(thread);
        final SubLObject _prev_bind_2 = control_vars.$save_asked_queriesP$.currentBinding(thread);
        try {
            control_vars.$bootstrapping_kbP$.bind((SubLObject)dumper.T, thread);
            control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
            core.core_kb_start_bootstrapping();
            sbhl_link_methods.initialize_non_fort_isa_tables();
            system_parameters.load_system_parameters();
            final SubLObject _prev_bind_0_$718 = dumper.$bootstrapping_constantsP$.currentBinding(thread);
            try {
                dumper.$bootstrapping_constantsP$.bind((SubLObject)dumper.T, thread);
                final SubLObject str = (SubLObject)dumper.$str642$Loading_constants;
                final SubLObject _prev_bind_0_$719 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_1_$720 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    read_and_eval_evaluatable_dump_file(Sequences.cconcatenate(directory_path, (SubLObject)dumper.$str630$load_all_constants_lisp), ops_per_transaction, start_operation, stop_operation);
                    constant_handles.synchronize_constants_with_hl_store();
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$720, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$719, thread);
                }
            }
            finally {
                dumper.$bootstrapping_constantsP$.rebind(_prev_bind_0_$718, thread);
            }
            alexandria_iterators.clear_alexandria_caches();
            final SubLObject _prev_bind_0_$720 = dumper.$bootstrapping_nartsP$.currentBinding(thread);
            try {
                dumper.$bootstrapping_nartsP$.bind((SubLObject)dumper.T, thread);
                final SubLObject str = (SubLObject)dumper.$str643$Loading_narts;
                final SubLObject _prev_bind_0_$721 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_1_$721 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    read_and_eval_evaluatable_dump_file(Sequences.cconcatenate(directory_path, (SubLObject)dumper.$str631$load_all_narts_lisp), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$721, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$721, thread);
                }
            }
            finally {
                dumper.$bootstrapping_nartsP$.rebind(_prev_bind_0_$720, thread);
            }
            alexandria_iterators.clear_alexandria_caches();
            final SubLObject _prev_bind_0_$722 = dumper.$bootstrapping_assertionsP$.currentBinding(thread);
            try {
                dumper.$bootstrapping_assertionsP$.bind((SubLObject)dumper.T, thread);
                final SubLObject str = (SubLObject)dumper.$str644$Loading_assertions;
                final SubLObject _prev_bind_0_$723 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_1_$722 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    read_and_eval_evaluatable_dump_file(Sequences.cconcatenate(directory_path, (SubLObject)dumper.$str632$load_all_assertions_lisp), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$722, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$723, thread);
                }
            }
            finally {
                dumper.$bootstrapping_assertionsP$.rebind(_prev_bind_0_$722, thread);
            }
            alexandria_iterators.clear_alexandria_caches();
            final SubLObject _prev_bind_0_$724 = dumper.$bootstrapping_kb_hl_supportsP$.currentBinding(thread);
            try {
                dumper.$bootstrapping_kb_hl_supportsP$.bind((SubLObject)dumper.T, thread);
                final SubLObject str = (SubLObject)dumper.$str645$Loading_definitions_for_KB_HL_sup;
                final SubLObject _prev_bind_0_$725 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_1_$723 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    read_and_eval_evaluatable_dump_file(Sequences.cconcatenate(directory_path, (SubLObject)dumper.$str633$load_all_kb_hl_supports_lisp), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$723, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$725, thread);
                }
            }
            finally {
                dumper.$bootstrapping_kb_hl_supportsP$.rebind(_prev_bind_0_$724, thread);
            }
            alexandria_iterators.clear_alexandria_caches();
            final SubLObject _prev_bind_0_$726 = dumper.$bootstrapping_kb_hl_supportsP$.currentBinding(thread);
            try {
                dumper.$bootstrapping_kb_hl_supportsP$.bind((SubLObject)dumper.T, thread);
                final SubLObject str = (SubLObject)dumper.$str646$Loading_justifications_for_KB_HL_;
                final SubLObject _prev_bind_0_$727 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_1_$724 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    read_and_eval_evaluatable_dump_file(Sequences.cconcatenate(directory_path, (SubLObject)dumper.$str634$load_all_kb_hl_supports_just_lisp), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$724, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$727, thread);
                }
            }
            finally {
                dumper.$bootstrapping_kb_hl_supportsP$.rebind(_prev_bind_0_$726, thread);
            }
            alexandria_iterators.clear_alexandria_caches();
            final SubLObject _prev_bind_0_$728 = dumper.$bootstrapping_deductionsP$.currentBinding(thread);
            try {
                dumper.$bootstrapping_deductionsP$.bind((SubLObject)dumper.T, thread);
                final SubLObject str = (SubLObject)dumper.$str647$Loading_deductions;
                final SubLObject _prev_bind_0_$729 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_1_$725 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    read_and_eval_evaluatable_dump_file(Sequences.cconcatenate(directory_path, (SubLObject)dumper.$str635$load_all_deductions_lisp), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$725, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$729, thread);
                }
            }
            finally {
                dumper.$bootstrapping_deductionsP$.rebind(_prev_bind_0_$728, thread);
            }
            alexandria_iterators.clear_alexandria_caches();
            final SubLObject _prev_bind_0_$730 = dumper.$bootstrapping_bookkeeping_gafsP$.currentBinding(thread);
            try {
                dumper.$bootstrapping_bookkeeping_gafsP$.bind((SubLObject)dumper.T, thread);
                final SubLObject str = (SubLObject)dumper.$str648$Loading_bookkeeping_data;
                final SubLObject _prev_bind_0_$731 = utilities_macros.$progress_start_time$.currentBinding(thread);
                final SubLObject _prev_bind_1_$726 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$progress_notification_count$.currentBinding(thread);
                final SubLObject _prev_bind_5 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
                final SubLObject _prev_bind_6 = utilities_macros.$progress_count$.currentBinding(thread);
                final SubLObject _prev_bind_7 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
                final SubLObject _prev_bind_8 = utilities_macros.$silent_progressP$.currentBinding(thread);
                try {
                    utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
                    utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
                    utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
                    utilities_macros.noting_progress_preamble(str);
                    read_and_eval_evaluatable_dump_file(Sequences.cconcatenate(directory_path, (SubLObject)dumper.$str636$load_all_bookkeeping_gafs_lisp), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
                    utilities_macros.noting_progress_postamble();
                }
                finally {
                    utilities_macros.$silent_progressP$.rebind(_prev_bind_8, thread);
                    utilities_macros.$is_noting_progressP$.rebind(_prev_bind_7, thread);
                    utilities_macros.$progress_count$.rebind(_prev_bind_6, thread);
                    utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_5, thread);
                    utilities_macros.$progress_notification_count$.rebind(_prev_bind_4, thread);
                    utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_3, thread);
                    utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_1_$726, thread);
                    utilities_macros.$progress_start_time$.rebind(_prev_bind_0_$731, thread);
                }
            }
            finally {
                dumper.$bootstrapping_bookkeeping_gafsP$.rebind(_prev_bind_0_$730, thread);
            }
            alexandria_iterators.clear_alexandria_caches();
            dumper.$kb_dump_common_symbols$.setDynamicValue(load_special_objects(directory_path, (SubLObject)dumper.NIL), thread);
            load_experience(directory_path);
            load_essential_kb_initializations();
            wff_vars.$wff_mode$.setDynamicValue((SubLObject)dumper.$kw649$STRICT, thread);
            forward.perform_forward_inference();
            return (SubLObject)dumper.NIL;
        }
        finally {
            control_vars.$save_asked_queriesP$.rebind(_prev_bind_2, thread);
            control_vars.$bootstrapping_kbP$.rebind(_prev_bind_0, thread);
        }
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 226479L)
    public static SubLObject rebuild_alexandria_computable_kb() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        misc_utilities.system_code_initializations((SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.$str651$________Rebuilding_Computable_KB_, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED));
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        control_vars.$save_asked_queriesP$.setDynamicValue((SubLObject)dumper.NIL, thread);
        load_essential_kb_initializations();
        wff_vars.$wff_mode$.setDynamicValue((SubLObject)dumper.$kw649$STRICT, thread);
        forward.perform_forward_inference();
        constant_handles.synchronize_constants_with_hl_store();
        final SubLObject _prev_bind_0 = dumper.$compute_arg_type_cache_on_dumpP$.currentBinding(thread);
        try {
            dumper.$compute_arg_type_cache_on_dumpP$.bind((SubLObject)dumper.NIL, thread);
            cardinality_estimates.setup_cardinality_tables(constant_handles.constant_count());
            load_essential_kb_initializations();
            misc_utilities.system_code_hl_initializations();
            misc_utilities.system_kb_initializations();
            rebuild_computable_content_dumpable((SubLObject)dumper.T);
            wff_utilities.set_check_wff_semantics();
            control_vars.$bootstrapping_kbP$.setDynamicValue((SubLObject)dumper.NIL, thread);
            wff_vars.$wff_mode$.setDynamicValue((SubLObject)dumper.$kw652$ASSERTIVE, thread);
            czer_vars.$simplify_non_wff_literalP$.setDynamicValue((SubLObject)dumper.T, thread);
        }
        finally {
            dumper.$compute_arg_type_cache_on_dumpP$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 227293L)
    public static SubLObject load_alexandria_computable_kb_from_directory(final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject _prev_bind_0 = utilities_macros.$structure_resourcing_make_static$.currentBinding(thread);
        final SubLObject _prev_bind_2 = cfasl.$cfasl_input_to_static_area$.currentBinding(thread);
        try {
            utilities_macros.$structure_resourcing_make_static$.bind((SubLObject)dumper.T, thread);
            cfasl.$cfasl_input_to_static_area$.bind((SubLObject)dumper.T, thread);
            load_experience(directory_path);
        }
        finally {
            cfasl.$cfasl_input_to_static_area$.rebind(_prev_bind_2, thread);
            utilities_macros.$structure_resourcing_make_static$.rebind(_prev_bind_0, thread);
        }
        control_vars.$save_asked_queriesP$.setDynamicValue((SubLObject)dumper.NIL, thread);
        load_essential_kb_initializations();
        wff_vars.$wff_mode$.setDynamicValue((SubLObject)dumper.$kw649$STRICT, thread);
        forward.perform_forward_inference();
        constant_handles.synchronize_constants_with_hl_store();
        dumper.$kb_dump_common_symbols$.setDynamicValue(load_special_objects(directory_path, (SubLObject)dumper.UNPROVIDED), thread);
        final SubLObject common_symbols = dumper.$kb_dump_common_symbols$.getDynamicValue(thread);
        if (dumper.NIL == dumper.$force_monolithic_kb_assumption$.getGlobalValue()) {
            misc_utilities.initialize_hl_store_cache_directory_and_shared_symbols(directory_path, common_symbols);
            kb_load_gc_checkpoint();
        }
        kb_possibly_load_manifest_from_directory(directory_path);
        final SubLObject _prev_bind_3 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols(common_symbols);
            final SubLObject _prev_bind_0_$739 = api_control_vars.$cfasl_constant_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_4 = api_control_vars.$cfasl_nart_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_5 = api_control_vars.$cfasl_assertion_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_6 = api_control_vars.$cfasl_deduction_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_7 = api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.currentBinding(thread);
            final SubLObject _prev_bind_8 = api_control_vars.$cfasl_clause_struc_handle_lookup_func$.currentBinding(thread);
            try {
                api_control_vars.$cfasl_constant_handle_lookup_func$.bind((SubLObject)dumper.$sym48$FIND_CONSTANT_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_nart_handle_lookup_func$.bind((SubLObject)dumper.$sym49$FIND_NART_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_assertion_handle_lookup_func$.bind((SubLObject)dumper.$sym50$FIND_ASSERTION_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_deduction_handle_lookup_func$.bind((SubLObject)dumper.$sym51$FIND_DEDUCTION_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.bind((SubLObject)dumper.$sym52$FIND_KB_HL_SUPPORT_BY_DUMP_ID, thread);
                api_control_vars.$cfasl_clause_struc_handle_lookup_func$.bind((SubLObject)dumper.$sym53$FIND_CLAUSE_STRUC_BY_DUMP_ID, thread);
                load_computable_content(directory_path);
            }
            finally {
                api_control_vars.$cfasl_clause_struc_handle_lookup_func$.rebind(_prev_bind_8, thread);
                api_control_vars.$cfasl_kb_hl_support_handle_lookup_func$.rebind(_prev_bind_7, thread);
                api_control_vars.$cfasl_deduction_handle_lookup_func$.rebind(_prev_bind_6, thread);
                api_control_vars.$cfasl_assertion_handle_lookup_func$.rebind(_prev_bind_5, thread);
                api_control_vars.$cfasl_nart_handle_lookup_func$.rebind(_prev_bind_4, thread);
                api_control_vars.$cfasl_constant_handle_lookup_func$.rebind(_prev_bind_0_$739, thread);
            }
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_3, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 228100L)
    public static SubLObject dump_alexandria_units(final SubLObject kb_loaded, final SubLObject essential_evaluatable_directory_path, final SubLObject directory_path) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (dumper.NIL != dumper.$dump_verbose$.getDynamicValue(thread)) {
            PrintLow.format(StreamsLow.$standard_output$.getDynamicValue(thread), (SubLObject)dumper.$str653$________Dumping_Computable_KB_at_, numeric_date_utilities.timestring((SubLObject)dumper.UNPROVIDED));
            streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        }
        control_vars.$save_asked_queriesP$.setDynamicValue((SubLObject)dumper.NIL, thread);
        dumper.$compute_arg_type_cache_on_dumpP$.setDynamicValue((SubLObject)dumper.NIL, thread);
        control_vars.set_kb_loaded(kb_loaded);
        final SubLObject _prev_bind_0 = cfasl.$cfasl_common_symbols$.currentBinding(thread);
        try {
            cfasl.$cfasl_common_symbols$.bind((SubLObject)dumper.NIL, thread);
            cfasl.cfasl_set_common_symbols(kb_dump_common_symbols());
            dump_computable_remaining_hl(directory_path, (SubLObject)dumper.T);
        }
        finally {
            cfasl.$cfasl_common_symbols$.rebind(_prev_bind_0, thread);
        }
        SubLObject str = (SubLObject)dumper.$str654$Dumping_rule_utility_experience;
        SubLObject _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
        SubLObject _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        SubLObject _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        SubLObject _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        SubLObject _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        SubLObject _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
        SubLObject _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        SubLObject _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(str);
            file_utilities.copy_file_checked(Sequences.cconcatenate(essential_evaluatable_directory_path, (SubLObject)dumper.$str655$rule_utility_experience_cfasl), Sequences.cconcatenate(directory_path, (SubLObject)dumper.$str655$rule_utility_experience_cfasl));
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
        }
        str = (SubLObject)dumper.$str656$Dumping_sbhl_caching_policies;
        _prev_bind_2 = utilities_macros.$progress_start_time$.currentBinding(thread);
        _prev_bind_3 = utilities_macros.$progress_last_pacification_time$.currentBinding(thread);
        _prev_bind_4 = utilities_macros.$progress_elapsed_seconds_for_notification$.currentBinding(thread);
        _prev_bind_5 = utilities_macros.$progress_notification_count$.currentBinding(thread);
        _prev_bind_6 = utilities_macros.$progress_pacifications_since_last_nl$.currentBinding(thread);
        _prev_bind_7 = utilities_macros.$progress_count$.currentBinding(thread);
        _prev_bind_8 = utilities_macros.$is_noting_progressP$.currentBinding(thread);
        _prev_bind_9 = utilities_macros.$silent_progressP$.currentBinding(thread);
        try {
            utilities_macros.$progress_start_time$.bind(Time.get_universal_time(), thread);
            utilities_macros.$progress_last_pacification_time$.bind(utilities_macros.$progress_start_time$.getDynamicValue(thread), thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.bind(utilities_macros.$suppress_all_progress_faster_than_seconds$.getDynamicValue(thread), thread);
            utilities_macros.$progress_notification_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$progress_count$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$is_noting_progressP$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$silent_progressP$.bind((SubLObject)((dumper.NIL != str) ? utilities_macros.$silent_progressP$.getDynamicValue(thread) : dumper.T), thread);
            utilities_macros.noting_progress_preamble(str);
            file_utilities.copy_file_checked(Sequences.cconcatenate(essential_evaluatable_directory_path, (SubLObject)dumper.$str657$standard_kb_sbhl_caching_policies), Sequences.cconcatenate(directory_path, (SubLObject)dumper.$str657$standard_kb_sbhl_caching_policies));
            utilities_macros.noting_progress_postamble();
        }
        finally {
            utilities_macros.$silent_progressP$.rebind(_prev_bind_9, thread);
            utilities_macros.$is_noting_progressP$.rebind(_prev_bind_8, thread);
            utilities_macros.$progress_count$.rebind(_prev_bind_7, thread);
            utilities_macros.$progress_pacifications_since_last_nl$.rebind(_prev_bind_6, thread);
            utilities_macros.$progress_notification_count$.rebind(_prev_bind_5, thread);
            utilities_macros.$progress_elapsed_seconds_for_notification$.rebind(_prev_bind_4, thread);
            utilities_macros.$progress_last_pacification_time$.rebind(_prev_bind_3, thread);
            utilities_macros.$progress_start_time$.rebind(_prev_bind_2, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 229095L)
    public static SubLObject load_rebuild_and_dump_alexandria_computable_kb(final SubLObject kb_loaded, final SubLObject essential_evaluatable_directory_path, final SubLObject directory_path) {
        load_essential_kb_evaluatable(essential_evaluatable_directory_path, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        rebuild_alexandria_computable_kb();
        dump_alexandria_units(kb_loaded, essential_evaluatable_directory_path, directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 229433L)
    public static SubLObject rebuild_and_dump_alexandria_computable_kb(final SubLObject kb_loaded, final SubLObject essential_evaluatable_directory_path, final SubLObject directory_path) {
        rebuild_alexandria_computable_kb();
        dump_alexandria_units(kb_loaded, essential_evaluatable_directory_path, directory_path);
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 229695L)
    public static SubLObject count_forms_in_file(final SubLObject file_name) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject forms = (SubLObject)dumper.ZERO_INTEGER;
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            stream = compatibility.open_text(file_name, (SubLObject)dumper.$kw151$INPUT);
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, file_name);
            }
            final SubLObject bad_stream = stream;
            final SubLObject infile = file_utilities.change_file_stream_buffer_size(bad_stream, (SubLObject)dumper.$int658$4000000);
            try {
                if (infile.isStream()) {
                    final SubLObject _prev_bind_0 = reader.$read_suppress$.currentBinding(thread);
                    try {
                        reader.$read_suppress$.bind((SubLObject)dumper.NIL, thread);
                        SubLObject var;
                        for (var = (SubLObject)dumper.NIL, var = reader.read(infile, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF, (SubLObject)dumper.UNPROVIDED); dumper.$kw226$EOF != var; var = reader.read(infile, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF, (SubLObject)dumper.UNPROVIDED)) {
                            forms = Numbers.add(forms, (SubLObject)dumper.ONE_INTEGER);
                        }
                    }
                    finally {
                        reader.$read_suppress$.rebind(_prev_bind_0, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_2 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    if (infile.isStream()) {
                        streams_high.close(infile, (SubLObject)dumper.UNPROVIDED);
                    }
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_2, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return forms;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 230248L)
    public static SubLObject read_and_eval_evaluatable_dump_file(final SubLObject file_name, SubLObject operations_per_transaction, SubLObject min_op, SubLObject max_op) {
        if (operations_per_transaction == dumper.UNPROVIDED) {
            operations_per_transaction = (SubLObject)dumper.TEN_INTEGER;
        }
        if (min_op == dumper.UNPROVIDED) {
            min_op = (SubLObject)dumper.ZERO_INTEGER;
        }
        if (max_op == dumper.UNPROVIDED) {
            max_op = (SubLObject)dumper.$int659$15000000;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        if (min_op == dumper.NIL) {
            min_op = (SubLObject)dumper.ZERO_INTEGER;
        }
        if (max_op == dumper.NIL) {
            max_op = (SubLObject)dumper.$int660$2000000000;
        }
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_text(file_name, (SubLObject)dumper.$kw151$INPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, file_name);
            }
            final SubLObject bad_stream = stream;
            final SubLObject s = file_utilities.change_file_stream_buffer_size(bad_stream, (SubLObject)dumper.$int661$32000000);
            SubLObject total_op_count = (SubLObject)dumper.MINUS_ONE_INTEGER;
            SubLObject processed_op_count = (SubLObject)dumper.ZERO_INTEGER;
            final SubLObject _prev_bind_2 = kb_control_vars.$forward_inference_enabledP$.currentBinding(thread);
            final SubLObject _prev_bind_3 = control_vars.$bootstrapping_kbP$.currentBinding(thread);
            try {
                kb_control_vars.$forward_inference_enabledP$.bind((SubLObject)dumper.NIL, thread);
                control_vars.$bootstrapping_kbP$.bind((SubLObject)dumper.T, thread);
                try {
                    SubLObject operation = (SubLObject)dumper.NIL;
                    SubLObject cur_op_count = (SubLObject)dumper.ZERO_INTEGER;
                    SubLObject mem_clear_count = (SubLObject)dumper.ZERO_INTEGER;
                    kb_store_utils.avoid_using_simple_indexing((SubLObject)dumper.T);
                    while (dumper.$kw226$EOF != operation) {
                        while (dumper.$kw226$EOF != operation && cur_op_count.numL(operations_per_transaction)) {
                            cur_op_count = Numbers.add(cur_op_count, (SubLObject)dumper.ONE_INTEGER);
                            total_op_count = Numbers.add(total_op_count, (SubLObject)dumper.ONE_INTEGER);
                            utilities_macros.note_progress();
                            if (total_op_count.numGE(min_op)) {
                                operation = reader.read(s, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF, (SubLObject)dumper.UNPROVIDED);
                            }
                            else {
                                final SubLObject _prev_bind_0_$740 = reader.$read_suppress$.currentBinding(thread);
                                try {
                                    reader.$read_suppress$.bind((SubLObject)dumper.T, thread);
                                    operation = reader.read(s, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF, (SubLObject)dumper.UNPROVIDED);
                                }
                                finally {
                                    reader.$read_suppress$.rebind(_prev_bind_0_$740, thread);
                                }
                            }
                            if (total_op_count.numGE(min_op)) {
                                if (total_op_count.numG(max_op)) {
                                    operation = (SubLObject)dumper.$kw226$EOF;
                                }
                                if (dumper.$kw226$EOF == operation) {
                                    continue;
                                }
                                processed_op_count = Numbers.add(processed_op_count, (SubLObject)dumper.ONE_INTEGER);
                                mem_clear_count = Numbers.add(mem_clear_count, (SubLObject)dumper.ONE_INTEGER);
                                if (mem_clear_count.numG((SubLObject)dumper.$int662$20000)) {
                                    mem_clear_count = (SubLObject)dumper.ZERO_INTEGER;
                                    alexandria_iterators.clear_alexandria_caches();
                                }
                                SubLObject error_message = (SubLObject)dumper.NIL;
                                try {
                                    thread.throwStack.push(subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                    final SubLObject _prev_bind_0_$741 = Errors.$error_handler$.currentBinding(thread);
                                    try {
                                        Errors.$error_handler$.bind((SubLObject)dumper.$sym147$CATCH_ERROR_MESSAGE_HANDLER, thread);
                                        try {
                                            Eval.eval(operation);
                                        }
                                        catch (Throwable catch_var) {
                                            Errors.handleThrowable(catch_var, (SubLObject)dumper.NIL);
                                        }
                                    }
                                    finally {
                                        Errors.$error_handler$.rebind(_prev_bind_0_$741, thread);
                                    }
                                }
                                catch (Throwable ccatch_env_var) {
                                    error_message = Errors.handleThrowable(ccatch_env_var, subl_macro_promotions.$catch_error_message_target$.getGlobalValue());
                                }
                                finally {
                                    thread.throwStack.pop();
                                }
                                if (!error_message.isString()) {
                                    continue;
                                }
                                Errors.warn((SubLObject)dumper.$str663$__Error_with_operation___A___A__, operation, error_message);
                            }
                        }
                        cur_op_count = (SubLObject)dumper.ZERO_INTEGER;
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$742 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        kb_store_utils.avoid_using_simple_indexing((SubLObject)dumper.NIL);
                        kb_store_utils.possibly_commit_kb_store_transaction((SubLObject)dumper.T);
                        streams_high.close(s, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$742, thread);
                    }
                }
                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str664$Processed___A__A_operations_from_, new SubLObject[] { processed_op_count, total_op_count, file_name });
                streams_high.force_output((SubLObject)dumper.T);
            }
            finally {
                control_vars.$bootstrapping_kbP$.rebind(_prev_bind_3, thread);
                kb_control_vars.$forward_inference_enabledP$.rebind(_prev_bind_2, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_4 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_4, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 232580L)
    public static SubLObject eval_test_operation(final SubLObject op) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str665$Operation__S__, op);
        streams_high.force_output(StreamsLow.$standard_output$.getDynamicValue(thread));
        final SubLObject operation_type = op.first();
        final SubLObject function_name = conses_high.second(op);
        final SubLObject function_args = conses_high.third(op);
        final SubLObject function_expected_results = conses_high.fourth(op);
        final SubLObject function_call = (SubLObject)ConsesLow.cons(function_name, Mapping.mapcar((SubLObject)dumper.$sym666$QUOTIFY, function_args));
        final SubLObject result = Eval.eval(function_call);
        if (operation_type == dumper.$kw667$ACCESSOR && !result.equal(function_expected_results.first())) {
            Errors.error((SubLObject)dumper.$str668$Failed_operation___S__Got___S__, op, result);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 233320L)
    public static SubLObject read_and_eval_test_file(final SubLObject file_name, SubLObject operations_per_transaction) {
        if (operations_per_transaction == dumper.UNPROVIDED) {
            operations_per_transaction = (SubLObject)dumper.TEN_INTEGER;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject stream = (SubLObject)dumper.NIL;
        try {
            final SubLObject _prev_bind_0 = stream_macros.$stream_requires_locking$.currentBinding(thread);
            try {
                stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                stream = compatibility.open_text(file_name, (SubLObject)dumper.$kw151$INPUT);
            }
            finally {
                stream_macros.$stream_requires_locking$.rebind(_prev_bind_0, thread);
            }
            if (!stream.isStream()) {
                Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, file_name);
            }
            final SubLObject bad_stream = stream;
            final SubLObject s = file_utilities.change_file_stream_buffer_size(bad_stream, (SubLObject)dumper.$int669$8000000);
            final SubLObject _prev_bind_2 = control_vars.$bootstrapping_kbP$.currentBinding(thread);
            try {
                control_vars.$bootstrapping_kbP$.bind((SubLObject)dumper.T, thread);
                try {
                    SubLObject operation = (SubLObject)dumper.NIL;
                    SubLObject cur_op_count = (SubLObject)dumper.ZERO_INTEGER;
                    while (dumper.$kw226$EOF != operation) {
                        while (dumper.$kw226$EOF != operation && cur_op_count.numL(operations_per_transaction)) {
                            cur_op_count = Numbers.add(cur_op_count, (SubLObject)dumper.ONE_INTEGER);
                            operation = cfasl.cfasl_input(s, (SubLObject)dumper.NIL, (SubLObject)dumper.$kw226$EOF);
                            if (dumper.$kw226$EOF != operation) {
                                eval_test_operation(operation);
                            }
                        }
                        cur_op_count = (SubLObject)dumper.ZERO_INTEGER;
                    }
                }
                finally {
                    final SubLObject _prev_bind_0_$743 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values = Values.getValuesAsVector();
                        streams_high.close(s, (SubLObject)dumper.UNPROVIDED);
                        Values.restoreValuesFromVector(_values);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$743, thread);
                    }
                }
            }
            finally {
                control_vars.$bootstrapping_kbP$.rebind(_prev_bind_2, thread);
            }
        }
        finally {
            final SubLObject _prev_bind_3 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values2 = Values.getValuesAsVector();
                if (stream.isStream()) {
                    streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                }
                Values.restoreValuesFromVector(_values2);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_3, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 234582L)
    public static SubLObject dump_essential_kb_constants_evaluatable(final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        set.clear_set(dumper.$dump_invalid_constants$.getGlobalValue());
        control_vars.$save_asked_queriesP$.setDynamicValue((SubLObject)dumper.NIL, thread);
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$744 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$745 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$744);
            final SubLObject memory_mappedP_$746 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$744);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$744);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$744);
                final SubLObject manager_$745 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$746 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$745);
                final SubLObject memory_mappedP_$747 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$745);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$745);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$745);
                    final SubLObject manager_$746 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$747 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$746);
                    final SubLObject memory_mappedP_$748 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$746);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$746);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$746);
                        final SubLObject manager_$747 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$748 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$747);
                        final SubLObject memory_mappedP_$749 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$747);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$747);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$747);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            final SubLObject _prev_bind_2 = print_high.$print_pretty$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = print_high.$print_length$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = print_high.$print_level$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_pretty$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_length$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_level$.bind((SubLObject)dumper.NIL, thread);
                                SubLObject stream = (SubLObject)dumper.NIL;
                                try {
                                    final SubLObject _prev_bind_0_$756 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                    try {
                                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                        stream = compatibility.open_text(filename, (SubLObject)dumper.$kw202$OUTPUT);
                                    }
                                    finally {
                                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$756, thread);
                                    }
                                    if (!stream.isStream()) {
                                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename);
                                    }
                                    final SubLObject bad_stream = stream;
                                    final SubLObject s = file_utilities.change_file_stream_buffer_size(bad_stream, (SubLObject)dumper.$int669$8000000);
                                    SubLObject name = (SubLObject)dumper.NIL;
                                    SubLObject guid = (SubLObject)dumper.NIL;
                                    SubLObject invalid = (SubLObject)dumper.NIL;
                                    final SubLObject idx = constant_handles.do_constants_table();
                                    final SubLObject mess = (SubLObject)dumper.$str676$Dumping_forms_to_create_all_const;
                                    final SubLObject total = id_index.id_index_count(idx);
                                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                    assert dumper.NIL != Types.stringp(mess) : mess;
                                    final SubLObject _prev_bind_0_$757 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$758 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$759 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$760 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                    try {
                                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                        try {
                                            utilities_macros.noting_percent_progress_preamble(mess);
                                            final SubLObject idx_$761 = idx;
                                            if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$761, (SubLObject)dumper.$kw266$SKIP)) {
                                                final SubLObject idx_$762 = idx_$761;
                                                if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$762, (SubLObject)dumper.$kw266$SKIP)) {
                                                    final SubLObject vector_var = id_index.id_index_dense_objects(idx_$762);
                                                    final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                    SubLObject length;
                                                    SubLObject v_iteration;
                                                    SubLObject id;
                                                    SubLObject constant;
                                                    for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                        id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                        constant = Vectors.aref(vector_var, id);
                                                        if (dumper.NIL == id_index.id_index_tombstone_p(constant) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                            if (dumper.NIL != id_index.id_index_tombstone_p(constant)) {
                                                                constant = (SubLObject)dumper.$kw266$SKIP;
                                                            }
                                                            invalid = (SubLObject)dumper.NIL;
                                                            name = kb_utilities.hl_object_to_evaluatable_string(constants_high.constant_name(constant), (SubLObject)dumper.UNPROVIDED);
                                                            if (dumper.NIL == invalid && dumper.NIL == name) {
                                                                invalid = (SubLObject)dumper.T;
                                                            }
                                                            guid = kb_utilities.hl_object_to_evaluatable_string(constants_high.constant_guid(constant), (SubLObject)dumper.UNPROVIDED);
                                                            if (dumper.NIL == invalid && dumper.NIL == guid) {
                                                                invalid = (SubLObject)dumper.T;
                                                            }
                                                            if (dumper.NIL == invalid && dumper.NIL == constants_high.find_constant(Eval.eval(reader.read_from_string(name, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
                                                                invalid = (SubLObject)dumper.T;
                                                            }
                                                            if (dumper.NIL == invalid && dumper.NIL == constants_high.find_constant_by_guid(Eval.eval(reader.read_from_string(guid, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
                                                                invalid = (SubLObject)dumper.T;
                                                            }
                                                            if (dumper.NIL != invalid) {
                                                                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str677$Found_unfindable_constant___A_wit, constant, constant_handles.constant_suid(constant));
                                                                set.set_add(constant, dumper.$dump_invalid_constants$.getGlobalValue());
                                                            }
                                                            else {
                                                                PrintLow.format(s, (SubLObject)dumper.$str678$_kb_create_constant__A__A___, name, guid);
                                                            }
                                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                            utilities_macros.note_percent_progress(sofar, total);
                                                        }
                                                    }
                                                }
                                                final SubLObject idx_$763 = idx_$761;
                                                if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$763) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                    final SubLObject sparse = id_index.id_index_sparse_objects(idx_$763);
                                                    SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$763);
                                                    final SubLObject end_id = id_index.id_index_next_id(idx_$763);
                                                    final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                    while (id2.numL(end_id)) {
                                                        final SubLObject constant2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                                        if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(constant2)) {
                                                            invalid = (SubLObject)dumper.NIL;
                                                            name = kb_utilities.hl_object_to_evaluatable_string(constants_high.constant_name(constant2), (SubLObject)dumper.UNPROVIDED);
                                                            if (dumper.NIL == invalid && dumper.NIL == name) {
                                                                invalid = (SubLObject)dumper.T;
                                                            }
                                                            guid = kb_utilities.hl_object_to_evaluatable_string(constants_high.constant_guid(constant2), (SubLObject)dumper.UNPROVIDED);
                                                            if (dumper.NIL == invalid && dumper.NIL == guid) {
                                                                invalid = (SubLObject)dumper.T;
                                                            }
                                                            if (dumper.NIL == invalid && dumper.NIL == constants_high.find_constant(Eval.eval(reader.read_from_string(name, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
                                                                invalid = (SubLObject)dumper.T;
                                                            }
                                                            if (dumper.NIL == invalid && dumper.NIL == constants_high.find_constant_by_guid(Eval.eval(reader.read_from_string(guid, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
                                                                invalid = (SubLObject)dumper.T;
                                                            }
                                                            if (dumper.NIL != invalid) {
                                                                PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str677$Found_unfindable_constant___A_wit, constant2, constant_handles.constant_suid(constant2));
                                                                set.set_add(constant2, dumper.$dump_invalid_constants$.getGlobalValue());
                                                            }
                                                            else {
                                                                PrintLow.format(s, (SubLObject)dumper.$str678$_kb_create_constant__A__A___, name, guid);
                                                            }
                                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                            utilities_macros.note_percent_progress(sofar, total);
                                                        }
                                                        id2 = Numbers.add(id2, (SubLObject)dumper.ONE_INTEGER);
                                                    }
                                                }
                                            }
                                        }
                                        finally {
                                            final SubLObject _prev_bind_0_$758 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                final SubLObject _values = Values.getValuesAsVector();
                                                utilities_macros.noting_percent_progress_postamble();
                                                Values.restoreValuesFromVector(_values);
                                            }
                                            finally {
                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$758, thread);
                                            }
                                        }
                                    }
                                    finally {
                                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_3_$760, thread);
                                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_2_$759, thread);
                                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$758, thread);
                                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$757, thread);
                                    }
                                    streams_high.close(s, (SubLObject)dumper.UNPROVIDED);
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$759 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values2 = Values.getValuesAsVector();
                                        if (stream.isStream()) {
                                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                                        }
                                        Values.restoreValuesFromVector(_values2);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$759, thread);
                                    }
                                }
                            }
                            finally {
                                print_high.$print_level$.rebind(_prev_bind_4, thread);
                                print_high.$print_length$.rebind(_prev_bind_3, thread);
                                print_high.$print_pretty$.rebind(_prev_bind_2, thread);
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values3 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$748) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$747);
                                }
                                if (dumper.NIL == memory_mappedP_$749) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$747, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values3);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values4 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$747) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$746);
                            }
                            if (dumper.NIL == memory_mappedP_$748) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$746, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values4);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values5 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$746) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$745);
                        }
                        if (dumper.NIL == memory_mappedP_$747) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$745, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values5);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values6 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$745) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$744);
                    }
                    if (dumper.NIL == memory_mappedP_$746) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$744, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values6);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values7 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values7);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 236202L)
    public static SubLObject dump_essential_kb_narts_evaluatable(final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        set.clear_set(dumper.$dump_invalid_narts$.getGlobalValue());
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$766 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$767 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$766);
            final SubLObject memory_mappedP_$768 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$766);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$766);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$766);
                final SubLObject manager_$767 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$768 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$767);
                final SubLObject memory_mappedP_$769 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$767);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$767);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$767);
                    final SubLObject manager_$768 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$769 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$768);
                    final SubLObject memory_mappedP_$770 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$768);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$768);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$768);
                        final SubLObject manager_$769 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$770 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$769);
                        final SubLObject memory_mappedP_$771 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$769);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$769);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$769);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            final SubLObject _prev_bind_2 = print_high.$print_pretty$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = print_high.$print_length$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = print_high.$print_level$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_pretty$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_length$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_level$.bind((SubLObject)dumper.NIL, thread);
                                SubLObject stream = (SubLObject)dumper.NIL;
                                try {
                                    final SubLObject _prev_bind_0_$778 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                    try {
                                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                        stream = compatibility.open_text(filename, (SubLObject)dumper.$kw202$OUTPUT);
                                    }
                                    finally {
                                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$778, thread);
                                    }
                                    if (!stream.isStream()) {
                                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename);
                                    }
                                    final SubLObject bad_stream = stream;
                                    final SubLObject s = file_utilities.change_file_stream_buffer_size(bad_stream, (SubLObject)dumper.$int669$8000000);
                                    SubLObject nart_hl_formula = (SubLObject)dumper.NIL;
                                    SubLObject invalid = (SubLObject)dumper.NIL;
                                    final SubLObject unprocessed_narts = set.new_set((SubLObject)dumper.EQL, (SubLObject)dumper.$int679$150000);
                                    final SubLObject idx = nart_handles.do_narts_table();
                                    final SubLObject mess = (SubLObject)dumper.$str680$Dumping_forms_to_create_all_narts;
                                    final SubLObject total = id_index.id_index_count(idx);
                                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                    assert dumper.NIL != Types.stringp(mess) : mess;
                                    final SubLObject _prev_bind_0_$779 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                    final SubLObject _prev_bind_1_$780 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                    final SubLObject _prev_bind_2_$781 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                    final SubLObject _prev_bind_3_$782 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                    try {
                                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                        try {
                                            utilities_macros.noting_percent_progress_preamble(mess);
                                            final SubLObject idx_$783 = idx;
                                            if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$783, (SubLObject)dumper.$kw266$SKIP)) {
                                                final SubLObject idx_$784 = idx_$783;
                                                if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$784, (SubLObject)dumper.$kw266$SKIP)) {
                                                    final SubLObject vector_var = id_index.id_index_dense_objects(idx_$784);
                                                    final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                    SubLObject length;
                                                    SubLObject v_iteration;
                                                    SubLObject id;
                                                    SubLObject nart;
                                                    for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                        id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                        nart = Vectors.aref(vector_var, id);
                                                        if (dumper.NIL == id_index.id_index_tombstone_p(nart) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                            if (dumper.NIL != id_index.id_index_tombstone_p(nart)) {
                                                                nart = (SubLObject)dumper.$kw266$SKIP;
                                                            }
                                                            if (dumper.ZERO_INTEGER.numE(nart_depth(nart))) {
                                                                invalid = narts_high.invalid_nart_robustP(nart);
                                                                nart_hl_formula = kb_utilities.hl_object_to_evaluatable_string(narts_high.nart_hl_formula(nart), (SubLObject)dumper.UNPROVIDED);
                                                                if (dumper.NIL == nart_hl_formula) {
                                                                    invalid = (SubLObject)dumper.T;
                                                                }
                                                                if (dumper.NIL == invalid && dumper.NIL == cycl_grammar.cycl_formula_p(narts_high.nart_el_formula(nart))) {
                                                                    invalid = (SubLObject)dumper.T;
                                                                }
                                                                if (dumper.NIL == invalid && dumper.NIL == narts_high.find_nart(Eval.eval(reader.read_from_string(nart_hl_formula, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
                                                                    invalid = (SubLObject)dumper.T;
                                                                }
                                                                if (dumper.NIL != invalid) {
                                                                    PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str681$Found_unfindable_nart___A_with_id, nart, nart_handles.nart_id(nart));
                                                                    set.set_add(nart, dumper.$dump_invalid_narts$.getGlobalValue());
                                                                }
                                                                else {
                                                                    PrintLow.format(s, (SubLObject)dumper.$str682$_kb_create_nart__A___, nart_hl_formula);
                                                                }
                                                            }
                                                            else {
                                                                set.set_add(nart, unprocessed_narts);
                                                            }
                                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                            utilities_macros.note_percent_progress(sofar, total);
                                                        }
                                                    }
                                                }
                                                final SubLObject idx_$785 = idx_$783;
                                                if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$785) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                    final SubLObject sparse = id_index.id_index_sparse_objects(idx_$785);
                                                    SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$785);
                                                    final SubLObject end_id = id_index.id_index_next_id(idx_$785);
                                                    final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                    while (id2.numL(end_id)) {
                                                        final SubLObject nart2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                                        if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(nart2)) {
                                                            if (dumper.ZERO_INTEGER.numE(nart_depth(nart2))) {
                                                                invalid = narts_high.invalid_nart_robustP(nart2);
                                                                nart_hl_formula = kb_utilities.hl_object_to_evaluatable_string(narts_high.nart_hl_formula(nart2), (SubLObject)dumper.UNPROVIDED);
                                                                if (dumper.NIL == nart_hl_formula) {
                                                                    invalid = (SubLObject)dumper.T;
                                                                }
                                                                if (dumper.NIL == invalid && dumper.NIL == cycl_grammar.cycl_formula_p(narts_high.nart_el_formula(nart2))) {
                                                                    invalid = (SubLObject)dumper.T;
                                                                }
                                                                if (dumper.NIL == invalid && dumper.NIL == narts_high.find_nart(Eval.eval(reader.read_from_string(nart_hl_formula, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
                                                                    invalid = (SubLObject)dumper.T;
                                                                }
                                                                if (dumper.NIL != invalid) {
                                                                    PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str681$Found_unfindable_nart___A_with_id, nart2, nart_handles.nart_id(nart2));
                                                                    set.set_add(nart2, dumper.$dump_invalid_narts$.getGlobalValue());
                                                                }
                                                                else {
                                                                    PrintLow.format(s, (SubLObject)dumper.$str682$_kb_create_nart__A___, nart_hl_formula);
                                                                }
                                                            }
                                                            else {
                                                                set.set_add(nart2, unprocessed_narts);
                                                            }
                                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                            utilities_macros.note_percent_progress(sofar, total);
                                                        }
                                                        id2 = Numbers.add(id2, (SubLObject)dumper.ONE_INTEGER);
                                                    }
                                                }
                                            }
                                        }
                                        finally {
                                            final SubLObject _prev_bind_0_$780 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                final SubLObject _values = Values.getValuesAsVector();
                                                utilities_macros.noting_percent_progress_postamble();
                                                Values.restoreValuesFromVector(_values);
                                            }
                                            finally {
                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$780, thread);
                                            }
                                        }
                                    }
                                    finally {
                                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_3_$782, thread);
                                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_2_$781, thread);
                                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$780, thread);
                                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$779, thread);
                                    }
                                    SubLObject current_depth = (SubLObject)dumper.ONE_INTEGER;
                                    while (set.set_size(unprocessed_narts).numG((SubLObject)dumper.ZERO_INTEGER)) {
                                        SubLObject cdolist_list_var = set.set_element_list(unprocessed_narts);
                                        SubLObject nart3 = (SubLObject)dumper.NIL;
                                        nart3 = cdolist_list_var.first();
                                        while (dumper.NIL != cdolist_list_var) {
                                            if (current_depth.numE(nart_depth(nart3))) {
                                                invalid = (SubLObject)dumper.NIL;
                                                nart_hl_formula = kb_utilities.hl_object_to_evaluatable_string(narts_high.nart_hl_formula(nart3), (SubLObject)dumper.UNPROVIDED);
                                                if (dumper.NIL == nart_hl_formula) {
                                                    invalid = (SubLObject)dumper.T;
                                                }
                                                if (dumper.NIL == invalid && dumper.NIL == cycl_grammar.cycl_formula_p(narts_high.nart_el_formula(nart3))) {
                                                    invalid = (SubLObject)dumper.T;
                                                }
                                                if (dumper.NIL == invalid && dumper.NIL == narts_high.find_nart(Eval.eval(reader.read_from_string(nart_hl_formula, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
                                                    invalid = (SubLObject)dumper.T;
                                                }
                                                if (dumper.NIL != invalid) {
                                                    PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str681$Found_unfindable_nart___A_with_id, nart3, nart_handles.nart_id(nart3));
                                                    set.set_add(nart3, dumper.$dump_invalid_narts$.getGlobalValue());
                                                }
                                                else {
                                                    PrintLow.format(s, (SubLObject)dumper.$str682$_kb_create_nart__A___, nart_hl_formula);
                                                }
                                                set.set_remove(nart3, unprocessed_narts);
                                            }
                                            cdolist_list_var = cdolist_list_var.rest();
                                            nart3 = cdolist_list_var.first();
                                        }
                                        current_depth = Numbers.add(current_depth, (SubLObject)dumper.ONE_INTEGER);
                                    }
                                    streams_high.close(s, (SubLObject)dumper.UNPROVIDED);
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$781 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values2 = Values.getValuesAsVector();
                                        if (stream.isStream()) {
                                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                                        }
                                        Values.restoreValuesFromVector(_values2);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$781, thread);
                                    }
                                }
                            }
                            finally {
                                print_high.$print_level$.rebind(_prev_bind_4, thread);
                                print_high.$print_length$.rebind(_prev_bind_3, thread);
                                print_high.$print_pretty$.rebind(_prev_bind_2, thread);
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values3 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$770) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$769);
                                }
                                if (dumper.NIL == memory_mappedP_$771) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$769, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values3);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values4 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$769) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$768);
                            }
                            if (dumper.NIL == memory_mappedP_$770) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$768, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values4);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values5 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$768) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$767);
                        }
                        if (dumper.NIL == memory_mappedP_$769) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$767, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values5);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values6 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$767) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$766);
                    }
                    if (dumper.NIL == memory_mappedP_$768) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$766, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values6);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values7 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values7);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 239141L)
    public static SubLObject exportable_assertionP(final SubLObject assertion, SubLObject return_cnf_and_mt_evaluatable_stringsP) {
        if (return_cnf_and_mt_evaluatable_stringsP == dumper.UNPROVIDED) {
            return_cnf_and_mt_evaluatable_stringsP = (SubLObject)dumper.NIL;
        }
        if (dumper.NIL == assertion_handles.assertion_p(assertion) || dumper.NIL == cycl_grammar.cycl_sentence_p(uncanonicalizer.assertion_el_formula(assertion)) || dumper.NIL == exportable_mtP(assertions_high.assertion_mt(assertion))) {
            return (SubLObject)dumper.NIL;
        }
        SubLObject assertion_cnf = (SubLObject)dumper.NIL;
        SubLObject assertion_mt = (SubLObject)dumper.NIL;
        assertion_cnf = kb_utilities.hl_object_to_evaluatable_string(assertions_high.assertion_cnf(assertion), (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == assertion_cnf) {
            return (SubLObject)dumper.NIL;
        }
        assertion_mt = kb_utilities.hl_object_to_evaluatable_string(assertions_high.assertion_mt(assertion), (SubLObject)dumper.UNPROVIDED);
        if (dumper.NIL == assertion_mt || dumper.NIL != assertions_high.invalid_assertion_robustP(assertion) || dumper.NIL == kb_indexing.find_assertion(Eval.eval(reader.read_from_string(assertion_cnf, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)), Eval.eval(reader.read_from_string(assertion_mt, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
            return (SubLObject)dumper.NIL;
        }
        if (dumper.NIL != return_cnf_and_mt_evaluatable_stringsP) {
            return (SubLObject)ConsesLow.list(assertion_cnf, assertion_mt);
        }
        return (SubLObject)dumper.T;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240049L)
    public static SubLObject clear_exportable_mtP() {
        final SubLObject cs = dumper.$exportable_mtP_caching_state$.getGlobalValue();
        if (dumper.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240049L)
    public static SubLObject remove_exportable_mtP(final SubLObject mt) {
        return memoization_state.caching_state_remove_function_results_with_args(dumper.$exportable_mtP_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(mt), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240049L)
    public static SubLObject exportable_mtP_internal(final SubLObject mt) {
        return hlmt.hlmtP(mt);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240049L)
    public static SubLObject exportable_mtP(final SubLObject mt) {
        SubLObject caching_state = dumper.$exportable_mtP_caching_state$.getGlobalValue();
        if (dumper.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)dumper.$sym683$EXPORTABLE_MT_, (SubLObject)dumper.$sym684$_EXPORTABLE_MT__CACHING_STATE_, (SubLObject)dumper.NIL, (SubLObject)dumper.EQUAL, (SubLObject)dumper.ONE_INTEGER, (SubLObject)dumper.$int685$16000);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, mt, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(exportable_mtP_internal(mt)));
            memoization_state.caching_state_put(caching_state, mt, results, (SubLObject)dumper.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240204L)
    public static SubLObject exportable_deduction_supportsP(final SubLObject supports) {
        SubLObject result = (SubLObject)dumper.NIL;
        SubLObject cdolist_list_var = supports;
        SubLObject support = (SubLObject)dumper.NIL;
        support = cdolist_list_var.first();
        while (dumper.NIL != cdolist_list_var) {
            if (dumper.NIL != exportable_deduction_supportP(support)) {
                result = (SubLObject)ConsesLow.cons(support, result);
            }
            cdolist_list_var = cdolist_list_var.rest();
            support = cdolist_list_var.first();
        }
        return Sequences.nreverse(result);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240434L)
    public static SubLObject clear_exportable_deduction_supportP() {
        final SubLObject cs = dumper.$exportable_deduction_supportP_caching_state$.getGlobalValue();
        if (dumper.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240434L)
    public static SubLObject remove_exportable_deduction_supportP(final SubLObject support) {
        return memoization_state.caching_state_remove_function_results_with_args(dumper.$exportable_deduction_supportP_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(support), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240434L)
    public static SubLObject exportable_deduction_supportP_internal(final SubLObject support) {
        if (dumper.NIL != assertion_handles.assertion_p(support)) {
            return exportable_assertionP(support, (SubLObject)dumper.UNPROVIDED);
        }
        if (dumper.NIL != kb_hl_support_handles.kb_hl_support_p(support)) {
            return exportable_kb_hl_supportP(support);
        }
        if (dumper.NIL != arguments.hl_support_p(support)) {
            return exportable_hl_supportP(support);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240434L)
    public static SubLObject exportable_deduction_supportP(final SubLObject support) {
        SubLObject caching_state = dumper.$exportable_deduction_supportP_caching_state$.getGlobalValue();
        if (dumper.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)dumper.$sym686$EXPORTABLE_DEDUCTION_SUPPORT_, (SubLObject)dumper.$sym687$_EXPORTABLE_DEDUCTION_SUPPORT__CACHING_STATE_, (SubLObject)dumper.NIL, (SubLObject)dumper.EQUAL, (SubLObject)dumper.ONE_INTEGER, (SubLObject)dumper.$int688$300000);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, support, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(exportable_deduction_supportP_internal(support)));
            memoization_state.caching_state_put(caching_state, support, results, (SubLObject)dumper.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240770L)
    public static SubLObject clear_exportable_deduction_supported_objectP() {
        final SubLObject cs = dumper.$exportable_deduction_supported_objectP_caching_state$.getGlobalValue();
        if (dumper.NIL != cs) {
            memoization_state.caching_state_clear(cs);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240770L)
    public static SubLObject remove_exportable_deduction_supported_objectP(final SubLObject supported_object) {
        return memoization_state.caching_state_remove_function_results_with_args(dumper.$exportable_deduction_supported_objectP_caching_state$.getGlobalValue(), (SubLObject)ConsesLow.list(supported_object), (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240770L)
    public static SubLObject exportable_deduction_supported_objectP_internal(final SubLObject supported_object) {
        if (dumper.NIL == supported_object) {
            return (SubLObject)dumper.NIL;
        }
        if (dumper.NIL != assertion_handles.assertion_p(supported_object)) {
            return exportable_assertionP(supported_object, (SubLObject)dumper.UNPROVIDED);
        }
        if (dumper.NIL != kb_hl_support_handles.kb_hl_support_p(supported_object)) {
            return exportable_kb_hl_supportP(supported_object);
        }
        if (dumper.NIL != arguments.hl_support_p(supported_object)) {
            return exportable_hl_supportP(supported_object);
        }
        return (SubLObject)dumper.T;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 240770L)
    public static SubLObject exportable_deduction_supported_objectP(final SubLObject supported_object) {
        SubLObject caching_state = dumper.$exportable_deduction_supported_objectP_caching_state$.getGlobalValue();
        if (dumper.NIL == caching_state) {
            caching_state = memoization_state.create_global_caching_state_for_name((SubLObject)dumper.$sym689$EXPORTABLE_DEDUCTION_SUPPORTED_OBJECT_, (SubLObject)dumper.$sym690$_EXPORTABLE_DEDUCTION_SUPPORTED_OBJECT__CACHING_STATE_, (SubLObject)dumper.NIL, (SubLObject)dumper.EQUAL, (SubLObject)dumper.ONE_INTEGER, (SubLObject)dumper.$int688$300000);
        }
        SubLObject results = memoization_state.caching_state_lookup(caching_state, supported_object, memoization_state.$memoized_item_not_found$.getGlobalValue());
        if (results.eql(memoization_state.$memoized_item_not_found$.getGlobalValue())) {
            results = Values.arg2(Values.resetMultipleValues(), (SubLObject)Values.multiple_value_list(exportable_deduction_supported_objectP_internal(supported_object)));
            memoization_state.caching_state_put(caching_state, supported_object, results, (SubLObject)dumper.UNPROVIDED);
        }
        return memoization_state.caching_results(results);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 241224L)
    public static SubLObject exportable_deductionP(final SubLObject ded) {
        if (dumper.NIL == ded) {
            return (SubLObject)dumper.NIL;
        }
        if (dumper.NIL == exportable_deduction_supported_objectP(deductions_high.deduction_supported_object(ded))) {
            return (SubLObject)dumper.NIL;
        }
        if (dumper.NIL == exportable_deduction_supportsP(deductions_high.deduction_supports(ded))) {
            return (SubLObject)dumper.NIL;
        }
        return (SubLObject)dumper.T;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 241509L)
    public static SubLObject exportable_kb_hl_supportP(final SubLObject kb_hl_support) {
        if (dumper.NIL == exportable_hl_supportP(kb_hl_supports_high.kb_hl_support_hl_support(kb_hl_support))) {
            return (SubLObject)dumper.NIL;
        }
        if (dumper.NIL == exportable_deduction_supportsP(kb_hl_supports_high.kb_hl_support_justification(kb_hl_support))) {
            return (SubLObject)dumper.NIL;
        }
        return (SubLObject)dumper.T;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 241784L)
    public static SubLObject exportable_hl_supportP(final SubLObject hl_support) {
        if (dumper.NIL == exportable_mtP(arguments.hl_support_mt(hl_support))) {
            return (SubLObject)dumper.NIL;
        }
        if (dumper.NIL == cycl_grammar.cycl_sentence_p(arguments.hl_support_sentence(hl_support))) {
            return (SubLObject)dumper.NIL;
        }
        return (SubLObject)dumper.T;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 242037L)
    public static SubLObject clear_evaluatable_export_caches() {
        clear_exportable_deduction_supported_objectP();
        clear_exportable_deduction_supportP();
        clear_exportable_mtP();
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 242216L)
    public static SubLObject dump_essential_kb_assertions_evaluatable(final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        set.clear_set(dumper.$dump_invalid_assertions$.getGlobalValue());
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$788 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$789 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$788);
            final SubLObject memory_mappedP_$790 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$788);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$788);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$788);
                final SubLObject manager_$789 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$790 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$789);
                final SubLObject memory_mappedP_$791 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$789);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$789);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$789);
                    final SubLObject manager_$790 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$791 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$790);
                    final SubLObject memory_mappedP_$792 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$790);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$790);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$790);
                        final SubLObject manager_$791 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$792 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$791);
                        final SubLObject memory_mappedP_$793 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$791);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$791);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$791);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            final SubLObject _prev_bind_2 = print_high.$print_pretty$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = print_high.$print_length$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = print_high.$print_level$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_pretty$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_length$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_level$.bind((SubLObject)dumper.NIL, thread);
                                SubLObject stream = (SubLObject)dumper.NIL;
                                try {
                                    final SubLObject _prev_bind_0_$800 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                    try {
                                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                        stream = compatibility.open_text(filename, (SubLObject)dumper.$kw202$OUTPUT);
                                    }
                                    finally {
                                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$800, thread);
                                    }
                                    if (!stream.isStream()) {
                                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename);
                                    }
                                    final SubLObject bad_stream = stream;
                                    final SubLObject s = file_utilities.change_file_stream_buffer_size(bad_stream, (SubLObject)dumper.$int669$8000000);
                                    try {
                                        SubLObject assertion_cnf = (SubLObject)dumper.NIL;
                                        SubLObject assertion_mt = (SubLObject)dumper.NIL;
                                        SubLObject invalid = (SubLObject)dumper.NIL;
                                        SubLObject exportableP = (SubLObject)dumper.NIL;
                                        final SubLObject unprocessed_assertions = set.new_set((SubLObject)dumper.EQL, (SubLObject)dumper.$int691$350000);
                                        final SubLObject idx = assertion_handles.do_assertions_table();
                                        final SubLObject mess = (SubLObject)dumper.$str692$Dumping_forms_to_create_all_asser;
                                        final SubLObject total = id_index.id_index_count(idx);
                                        SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                        assert dumper.NIL != Types.stringp(mess) : mess;
                                        final SubLObject _prev_bind_0_$801 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$802 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$803 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$804 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                        try {
                                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                            try {
                                                utilities_macros.noting_percent_progress_preamble(mess);
                                                final SubLObject idx_$805 = idx;
                                                if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$805, (SubLObject)dumper.$kw266$SKIP)) {
                                                    final SubLObject idx_$806 = idx_$805;
                                                    if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$806, (SubLObject)dumper.$kw266$SKIP)) {
                                                        final SubLObject vector_var = id_index.id_index_dense_objects(idx_$806);
                                                        final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                        SubLObject length;
                                                        SubLObject v_iteration;
                                                        SubLObject a_id;
                                                        SubLObject a_handle;
                                                        SubLObject assertion;
                                                        SubLObject who;
                                                        SubLObject when;
                                                        SubLObject why;
                                                        SubLObject second;
                                                        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                            a_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                            a_handle = Vectors.aref(vector_var, a_id);
                                                            if (dumper.NIL == id_index.id_index_tombstone_p(a_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                if (dumper.NIL != id_index.id_index_tombstone_p(a_handle)) {
                                                                    a_handle = (SubLObject)dumper.$kw266$SKIP;
                                                                }
                                                                assertion = assertion_handles.resolve_assertion_id_value_pair(a_id, a_handle);
                                                                if (dumper.ONE_INTEGER.numE(kb_utilities.term_order(assertion))) {
                                                                    exportableP = exportable_assertionP(assertion, (SubLObject)dumper.T);
                                                                    invalid = Types.sublisp_null(exportableP);
                                                                    assertion_cnf = exportableP.first();
                                                                    assertion_mt = conses_high.second(exportableP);
                                                                    who = assertions_high.asserted_by(assertion);
                                                                    when = assertions_high.asserted_when(assertion);
                                                                    why = assertions_high.asserted_why(assertion);
                                                                    second = assertions_high.asserted_second(assertion);
                                                                    if (dumper.NIL != invalid) {
                                                                        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str693$Found_unfindable_assertion___A_wi, assertion, assertion_handles.assertion_id(assertion));
                                                                        set.set_add(assertion, dumper.$dump_invalid_assertions$.getGlobalValue());
                                                                    }
                                                                    else {
                                                                        if (dumper.NIL != who || dumper.NIL != when || dumper.NIL != why || dumper.NIL != second) {
                                                                            PrintLow.format(s, (SubLObject)dumper.$str694$_progn__);
                                                                        }
                                                                        PrintLow.format(s, (SubLObject)dumper.$str695$_csetq__last_assertion___kb_creat, new SubLObject[] { assertion_cnf, assertion_mt, assertions_high.assertion_variable_names(assertion), assertions_high.assertion_direction(assertion), assertions_high.assertion_truth(assertion), assertions_high.assertion_strength(assertion), assertions_high.get_asserted_argument(assertion) });
                                                                        if (dumper.NIL != who || dumper.NIL != when || dumper.NIL != why || dumper.NIL != second) {
                                                                            PrintLow.format(s, (SubLObject)dumper.$str696$_kb_timestamp_asserted_assertion_, new SubLObject[] { kb_utilities.hl_object_to_evaluatable_string(who, (SubLObject)dumper.UNPROVIDED), when, kb_utilities.hl_object_to_evaluatable_string(why, (SubLObject)dumper.UNPROVIDED), second });
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    set.set_add(assertion, unprocessed_assertions);
                                                                }
                                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                utilities_macros.note_percent_progress(sofar, total);
                                                            }
                                                        }
                                                    }
                                                    final SubLObject idx_$807 = idx_$805;
                                                    if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$807) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                        final SubLObject sparse = id_index.id_index_sparse_objects(idx_$807);
                                                        SubLObject a_id2 = id_index.id_index_sparse_id_threshold(idx_$807);
                                                        final SubLObject end_id = id_index.id_index_next_id(idx_$807);
                                                        final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                        while (a_id2.numL(end_id)) {
                                                            final SubLObject a_handle2 = Hashtables.gethash_without_values(a_id2, sparse, v_default);
                                                            if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(a_handle2)) {
                                                                final SubLObject assertion2 = assertion_handles.resolve_assertion_id_value_pair(a_id2, a_handle2);
                                                                if (dumper.ONE_INTEGER.numE(kb_utilities.term_order(assertion2))) {
                                                                    exportableP = exportable_assertionP(assertion2, (SubLObject)dumper.T);
                                                                    invalid = Types.sublisp_null(exportableP);
                                                                    assertion_cnf = exportableP.first();
                                                                    assertion_mt = conses_high.second(exportableP);
                                                                    final SubLObject who2 = assertions_high.asserted_by(assertion2);
                                                                    final SubLObject when2 = assertions_high.asserted_when(assertion2);
                                                                    final SubLObject why2 = assertions_high.asserted_why(assertion2);
                                                                    final SubLObject second2 = assertions_high.asserted_second(assertion2);
                                                                    if (dumper.NIL != invalid) {
                                                                        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str693$Found_unfindable_assertion___A_wi, assertion2, assertion_handles.assertion_id(assertion2));
                                                                        set.set_add(assertion2, dumper.$dump_invalid_assertions$.getGlobalValue());
                                                                    }
                                                                    else {
                                                                        if (dumper.NIL != who2 || dumper.NIL != when2 || dumper.NIL != why2 || dumper.NIL != second2) {
                                                                            PrintLow.format(s, (SubLObject)dumper.$str694$_progn__);
                                                                        }
                                                                        PrintLow.format(s, (SubLObject)dumper.$str695$_csetq__last_assertion___kb_creat, new SubLObject[] { assertion_cnf, assertion_mt, assertions_high.assertion_variable_names(assertion2), assertions_high.assertion_direction(assertion2), assertions_high.assertion_truth(assertion2), assertions_high.assertion_strength(assertion2), assertions_high.get_asserted_argument(assertion2) });
                                                                        if (dumper.NIL != who2 || dumper.NIL != when2 || dumper.NIL != why2 || dumper.NIL != second2) {
                                                                            PrintLow.format(s, (SubLObject)dumper.$str696$_kb_timestamp_asserted_assertion_, new SubLObject[] { kb_utilities.hl_object_to_evaluatable_string(who2, (SubLObject)dumper.UNPROVIDED), when2, kb_utilities.hl_object_to_evaluatable_string(why2, (SubLObject)dumper.UNPROVIDED), second2 });
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    set.set_add(assertion2, unprocessed_assertions);
                                                                }
                                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                utilities_macros.note_percent_progress(sofar, total);
                                                            }
                                                            a_id2 = Numbers.add(a_id2, (SubLObject)dumper.ONE_INTEGER);
                                                        }
                                                    }
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$802 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                    final SubLObject _values = Values.getValuesAsVector();
                                                    utilities_macros.noting_percent_progress_postamble();
                                                    Values.restoreValuesFromVector(_values);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$802, thread);
                                                }
                                            }
                                        }
                                        finally {
                                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_3_$804, thread);
                                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_2_$803, thread);
                                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$802, thread);
                                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$801, thread);
                                        }
                                        SubLObject current_depth = (SubLObject)dumper.ONE_INTEGER;
                                        while (set.set_size(unprocessed_assertions).numG((SubLObject)dumper.ZERO_INTEGER)) {
                                            SubLObject cdolist_list_var = set.set_element_list(unprocessed_assertions);
                                            SubLObject assertion3 = (SubLObject)dumper.NIL;
                                            assertion3 = cdolist_list_var.first();
                                            while (dumper.NIL != cdolist_list_var) {
                                                if (current_depth.numE(kb_utilities.term_order(assertion3))) {
                                                    exportableP = exportable_assertionP(assertion3, (SubLObject)dumper.T);
                                                    invalid = Types.sublisp_null(exportableP);
                                                    assertion_cnf = exportableP.first();
                                                    assertion_mt = conses_high.second(exportableP);
                                                    final SubLObject who3 = assertions_high.asserted_by(assertion3);
                                                    final SubLObject when3 = assertions_high.asserted_when(assertion3);
                                                    final SubLObject why3 = assertions_high.asserted_why(assertion3);
                                                    final SubLObject second3 = assertions_high.asserted_second(assertion3);
                                                    if (dumper.NIL != invalid) {
                                                        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str697$Found_unfindable_assertion2___A_w, assertion3, assertion_handles.assertion_id(assertion3));
                                                        set.set_add(assertion3, dumper.$dump_invalid_assertions$.getGlobalValue());
                                                    }
                                                    else {
                                                        if (dumper.NIL != who3 || dumper.NIL != when3 || dumper.NIL != why3 || dumper.NIL != second3) {
                                                            PrintLow.format(s, (SubLObject)dumper.$str694$_progn__);
                                                        }
                                                        PrintLow.format(s, (SubLObject)dumper.$str695$_csetq__last_assertion___kb_creat, new SubLObject[] { assertion_cnf, assertion_mt, assertions_high.assertion_variable_names(assertion3), assertions_high.assertion_direction(assertion3), assertions_high.assertion_truth(assertion3), assertions_high.assertion_strength(assertion3), assertions_high.get_asserted_argument(assertion3) });
                                                        if (dumper.NIL != who3 || dumper.NIL != when3 || dumper.NIL != why3 || dumper.NIL != second3) {
                                                            PrintLow.format(s, (SubLObject)dumper.$str696$_kb_timestamp_asserted_assertion_, new SubLObject[] { kb_utilities.hl_object_to_evaluatable_string(who3, (SubLObject)dumper.UNPROVIDED), when3, kb_utilities.hl_object_to_evaluatable_string(why3, (SubLObject)dumper.UNPROVIDED), second3 });
                                                        }
                                                    }
                                                    set.set_remove(assertion3, unprocessed_assertions);
                                                }
                                                cdolist_list_var = cdolist_list_var.rest();
                                                assertion3 = cdolist_list_var.first();
                                            }
                                            current_depth = Numbers.add(current_depth, (SubLObject)dumper.ONE_INTEGER);
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$803 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                            final SubLObject _values2 = Values.getValuesAsVector();
                                            streams_high.force_output(s);
                                            streams_high.close(s, (SubLObject)dumper.UNPROVIDED);
                                            Values.restoreValuesFromVector(_values2);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$803, thread);
                                        }
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$804 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values3 = Values.getValuesAsVector();
                                        if (stream.isStream()) {
                                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                                        }
                                        Values.restoreValuesFromVector(_values3);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$804, thread);
                                    }
                                }
                            }
                            finally {
                                print_high.$print_level$.rebind(_prev_bind_4, thread);
                                print_high.$print_length$.rebind(_prev_bind_3, thread);
                                print_high.$print_pretty$.rebind(_prev_bind_2, thread);
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values4 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$792) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$791);
                                }
                                if (dumper.NIL == memory_mappedP_$793) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$791, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values4);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values5 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$791) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$790);
                            }
                            if (dumper.NIL == memory_mappedP_$792) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$790, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values5);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values6 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$790) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$789);
                        }
                        if (dumper.NIL == memory_mappedP_$791) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$789, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values6);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values7 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$789) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$788);
                    }
                    if (dumper.NIL == memory_mappedP_$790) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$788, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values7);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values8 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values8);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 246947L)
    public static SubLObject dump_essential_kb_kb_hl_supports_evaluatable(final SubLObject base_filename, final SubLObject just_filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        set.clear_set(dumper.$dump_invalid_kb_hl_supports$.getGlobalValue());
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$811 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$812 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$811);
            final SubLObject memory_mappedP_$813 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$811);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$811);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$811);
                final SubLObject manager_$812 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$813 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$812);
                final SubLObject memory_mappedP_$814 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$812);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$812);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$812);
                    final SubLObject manager_$813 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$814 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$813);
                    final SubLObject memory_mappedP_$815 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$813);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$813);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$813);
                        final SubLObject manager_$814 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$815 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$814);
                        final SubLObject memory_mappedP_$816 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$814);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$814);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$814);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            final SubLObject _prev_bind_2 = print_high.$print_pretty$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = print_high.$print_length$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = print_high.$print_level$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_pretty$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_length$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_level$.bind((SubLObject)dumper.NIL, thread);
                                SubLObject stream = (SubLObject)dumper.NIL;
                                try {
                                    final SubLObject _prev_bind_0_$823 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                    try {
                                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                        stream = compatibility.open_text(base_filename, (SubLObject)dumper.$kw202$OUTPUT);
                                    }
                                    finally {
                                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$823, thread);
                                    }
                                    if (!stream.isStream()) {
                                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, base_filename);
                                    }
                                    final SubLObject bad_base_stream = stream;
                                    SubLObject stream_$824 = (SubLObject)dumper.NIL;
                                    try {
                                        final SubLObject _prev_bind_0_$824 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                        try {
                                            stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                            stream_$824 = compatibility.open_text(just_filename, (SubLObject)dumper.$kw202$OUTPUT);
                                        }
                                        finally {
                                            stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$824, thread);
                                        }
                                        if (!stream_$824.isStream()) {
                                            Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, just_filename);
                                        }
                                        final SubLObject bad_just_stream = stream_$824;
                                        final SubLObject s = file_utilities.change_file_stream_buffer_size(bad_base_stream, (SubLObject)dumper.$int669$8000000);
                                        final SubLObject u = file_utilities.change_file_stream_buffer_size(bad_just_stream, (SubLObject)dumper.$int669$8000000);
                                        try {
                                            SubLObject hl_support = (SubLObject)dumper.NIL;
                                            SubLObject just = (SubLObject)dumper.NIL;
                                            SubLObject invalid = (SubLObject)dumper.NIL;
                                            final SubLObject idx = kb_hl_support_handles.do_kb_hl_supports_table();
                                            final SubLObject mess = (SubLObject)dumper.$str698$Dumping_forms_to_create_all_KB_HL;
                                            final SubLObject total = id_index.id_index_count(idx);
                                            SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                            assert dumper.NIL != Types.stringp(mess) : mess;
                                            final SubLObject _prev_bind_0_$825 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                            final SubLObject _prev_bind_1_$827 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                            final SubLObject _prev_bind_2_$828 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                            final SubLObject _prev_bind_3_$829 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                            try {
                                                utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                                utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                                utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                                utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                                try {
                                                    utilities_macros.noting_percent_progress_preamble(mess);
                                                    final SubLObject idx_$830 = idx;
                                                    if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$830, (SubLObject)dumper.$kw266$SKIP)) {
                                                        final SubLObject idx_$831 = idx_$830;
                                                        if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$831, (SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject vector_var = id_index.id_index_dense_objects(idx_$831);
                                                            final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                            SubLObject length;
                                                            SubLObject v_iteration;
                                                            SubLObject s_id;
                                                            SubLObject s_handle;
                                                            SubLObject kb_hl_support;
                                                            for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                                s_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                                s_handle = Vectors.aref(vector_var, s_id);
                                                                if (dumper.NIL == id_index.id_index_tombstone_p(s_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                    if (dumper.NIL != id_index.id_index_tombstone_p(s_handle)) {
                                                                        s_handle = (SubLObject)dumper.$kw266$SKIP;
                                                                    }
                                                                    kb_hl_support = kb_hl_support_handles.resolve_kb_hl_support_id_value_pair(s_id, s_handle);
                                                                    invalid = (SubLObject)SubLObjectFactory.makeBoolean(dumper.NIL == exportable_kb_hl_supportP(kb_hl_support));
                                                                    if (dumper.NIL == invalid) {
                                                                        hl_support = kb_utilities.hl_object_to_evaluatable_string(kb_hl_supports_high.kb_hl_support_hl_support(kb_hl_support), (SubLObject)dumper.UNPROVIDED);
                                                                    }
                                                                    if (dumper.NIL == hl_support) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    if (dumper.NIL == invalid) {
                                                                        just = kb_utilities.hl_object_to_evaluatable_string(kb_hl_supports_high.kb_hl_support_justification(kb_hl_support), (SubLObject)dumper.UNPROVIDED);
                                                                    }
                                                                    if (dumper.NIL == invalid && dumper.NIL == just) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    if (dumper.NIL == invalid && dumper.NIL == kb_hl_supports_high.find_kb_hl_support(Eval.eval(reader.read_from_string(hl_support, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    if (dumper.NIL != invalid) {
                                                                        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str699$Found_unfindable_kb_hl_support__A, kb_hl_support, kb_hl_support_handles.kb_hl_support_id(kb_hl_support));
                                                                        set.set_add(kb_hl_support, dumper.$dump_invalid_kb_hl_supports$.getGlobalValue());
                                                                    }
                                                                    else {
                                                                        PrintLow.format(s, (SubLObject)dumper.$str700$_create_kb_hl_support__A_NIL___, hl_support);
                                                                        PrintLow.format(u, (SubLObject)dumper.$str701$_kb_hl_support_reset_justificatio, hl_support, just);
                                                                    }
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                }
                                                            }
                                                        }
                                                        final SubLObject idx_$832 = idx_$830;
                                                        if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$832) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                            final SubLObject sparse = id_index.id_index_sparse_objects(idx_$832);
                                                            SubLObject s_id2 = id_index.id_index_sparse_id_threshold(idx_$832);
                                                            final SubLObject end_id = id_index.id_index_next_id(idx_$832);
                                                            final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                            while (s_id2.numL(end_id)) {
                                                                final SubLObject s_handle2 = Hashtables.gethash_without_values(s_id2, sparse, v_default);
                                                                if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(s_handle2)) {
                                                                    final SubLObject kb_hl_support2 = kb_hl_support_handles.resolve_kb_hl_support_id_value_pair(s_id2, s_handle2);
                                                                    invalid = (SubLObject)SubLObjectFactory.makeBoolean(dumper.NIL == exportable_kb_hl_supportP(kb_hl_support2));
                                                                    if (dumper.NIL == invalid) {
                                                                        hl_support = kb_utilities.hl_object_to_evaluatable_string(kb_hl_supports_high.kb_hl_support_hl_support(kb_hl_support2), (SubLObject)dumper.UNPROVIDED);
                                                                    }
                                                                    if (dumper.NIL == hl_support) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    if (dumper.NIL == invalid) {
                                                                        just = kb_utilities.hl_object_to_evaluatable_string(kb_hl_supports_high.kb_hl_support_justification(kb_hl_support2), (SubLObject)dumper.UNPROVIDED);
                                                                    }
                                                                    if (dumper.NIL == invalid && dumper.NIL == just) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    if (dumper.NIL == invalid && dumper.NIL == kb_hl_supports_high.find_kb_hl_support(Eval.eval(reader.read_from_string(hl_support, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED)))) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    if (dumper.NIL != invalid) {
                                                                        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str699$Found_unfindable_kb_hl_support__A, kb_hl_support2, kb_hl_support_handles.kb_hl_support_id(kb_hl_support2));
                                                                        set.set_add(kb_hl_support2, dumper.$dump_invalid_kb_hl_supports$.getGlobalValue());
                                                                    }
                                                                    else {
                                                                        PrintLow.format(s, (SubLObject)dumper.$str700$_create_kb_hl_support__A_NIL___, hl_support);
                                                                        PrintLow.format(u, (SubLObject)dumper.$str701$_kb_hl_support_reset_justificatio, hl_support, just);
                                                                    }
                                                                    sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                    utilities_macros.note_percent_progress(sofar, total);
                                                                }
                                                                s_id2 = Numbers.add(s_id2, (SubLObject)dumper.ONE_INTEGER);
                                                            }
                                                        }
                                                    }
                                                }
                                                finally {
                                                    final SubLObject _prev_bind_0_$826 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                    try {
                                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                        final SubLObject _values = Values.getValuesAsVector();
                                                        utilities_macros.noting_percent_progress_postamble();
                                                        Values.restoreValuesFromVector(_values);
                                                    }
                                                    finally {
                                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$826, thread);
                                                    }
                                                }
                                            }
                                            finally {
                                                utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_3_$829, thread);
                                                utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_2_$828, thread);
                                                utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$827, thread);
                                                utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$825, thread);
                                            }
                                        }
                                        finally {
                                            final SubLObject _prev_bind_0_$827 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                            try {
                                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                final SubLObject _values2 = Values.getValuesAsVector();
                                                streams_high.close(s, (SubLObject)dumper.UNPROVIDED);
                                                streams_high.close(u, (SubLObject)dumper.UNPROVIDED);
                                                Values.restoreValuesFromVector(_values2);
                                            }
                                            finally {
                                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$827, thread);
                                            }
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$828 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                            final SubLObject _values3 = Values.getValuesAsVector();
                                            if (stream_$824.isStream()) {
                                                streams_high.close(stream_$824, (SubLObject)dumper.UNPROVIDED);
                                            }
                                            Values.restoreValuesFromVector(_values3);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$828, thread);
                                        }
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$829 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values4 = Values.getValuesAsVector();
                                        if (stream.isStream()) {
                                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                                        }
                                        Values.restoreValuesFromVector(_values4);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$829, thread);
                                    }
                                }
                            }
                            finally {
                                print_high.$print_level$.rebind(_prev_bind_4, thread);
                                print_high.$print_length$.rebind(_prev_bind_3, thread);
                                print_high.$print_pretty$.rebind(_prev_bind_2, thread);
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values5 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$815) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$814);
                                }
                                if (dumper.NIL == memory_mappedP_$816) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$814, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values5);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values6 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$814) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$813);
                            }
                            if (dumper.NIL == memory_mappedP_$815) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$813, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values6);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values7 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$813) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$812);
                        }
                        if (dumper.NIL == memory_mappedP_$814) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$812, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values7);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values8 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$812) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$811);
                    }
                    if (dumper.NIL == memory_mappedP_$813) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$811, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values8);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values9 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values9);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 249068L)
    public static SubLObject dump_essential_kb_deductions_evaluatable_in_parts(final SubLObject filename, final SubLObject part_num, final SubLObject total_number_of_parts) {
        final SubLObject deductions_per_part = Numbers.floor(Numbers.divide(deduction_handles.deduction_count(), total_number_of_parts), (SubLObject)dumper.UNPROVIDED);
        final SubLObject new_file_name = Sequences.cconcatenate(filename, new SubLObject[] { dumper.$str702$_, string_utilities.to_string(part_num) });
        final SubLObject min = Numbers.multiply(Numbers.subtract(part_num, (SubLObject)dumper.ONE_INTEGER), deductions_per_part);
        final SubLObject max = part_num.numGE(total_number_of_parts) ? deduction_handles.deduction_count() : Numbers.add(min, deductions_per_part);
        return dump_essential_kb_deductions_evaluatable(new_file_name, min, max);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 249593L)
    public static SubLObject dump_essential_kb_deductions_evaluatable(final SubLObject filename, SubLObject min, SubLObject max) {
        if (min == dumper.UNPROVIDED) {
            min = (SubLObject)dumper.ZERO_INTEGER;
        }
        if (max == dumper.UNPROVIDED) {
            max = deduction_handles.deduction_count();
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        set.clear_set(dumper.$dump_invalid_deductions$.getGlobalValue());
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$837 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$838 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$837);
            final SubLObject memory_mappedP_$839 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$837);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$837);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$837);
                final SubLObject manager_$838 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$839 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$838);
                final SubLObject memory_mappedP_$840 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$838);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$838);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$838);
                    final SubLObject manager_$839 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$840 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$839);
                    final SubLObject memory_mappedP_$841 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$839);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$839);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$839);
                        final SubLObject manager_$840 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$841 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$840);
                        final SubLObject memory_mappedP_$842 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$840);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$840);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$840);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            final SubLObject _prev_bind_2 = print_high.$print_pretty$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = print_high.$print_length$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = print_high.$print_level$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_pretty$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_length$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_level$.bind((SubLObject)dumper.NIL, thread);
                                SubLObject stream = (SubLObject)dumper.NIL;
                                try {
                                    final SubLObject _prev_bind_0_$849 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                    try {
                                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                        stream = compatibility.open_text(filename, (SubLObject)dumper.$kw202$OUTPUT);
                                    }
                                    finally {
                                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$849, thread);
                                    }
                                    if (!stream.isStream()) {
                                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename);
                                    }
                                    final SubLObject bad_stream = stream;
                                    final SubLObject s = file_utilities.change_file_stream_buffer_size(bad_stream, (SubLObject)dumper.$int669$8000000);
                                    try {
                                        SubLObject supported_object = (SubLObject)dumper.NIL;
                                        SubLObject supports = (SubLObject)dumper.NIL;
                                        SubLObject truth = (SubLObject)dumper.NIL;
                                        SubLObject i = (SubLObject)dumper.ZERO_INTEGER;
                                        SubLObject invalid = (SubLObject)dumper.NIL;
                                        final SubLObject idx = deduction_handles.do_deductions_table();
                                        final SubLObject mess = (SubLObject)dumper.$str703$Dumping_forms_to_create_all_deduc;
                                        final SubLObject total = id_index.id_index_count(idx);
                                        SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                                        assert dumper.NIL != Types.stringp(mess) : mess;
                                        final SubLObject _prev_bind_0_$850 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                                        final SubLObject _prev_bind_1_$851 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                                        final SubLObject _prev_bind_2_$852 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                                        final SubLObject _prev_bind_3_$853 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                                        try {
                                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                                            try {
                                                utilities_macros.noting_percent_progress_preamble(mess);
                                                final SubLObject idx_$854 = idx;
                                                if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$854, (SubLObject)dumper.$kw266$SKIP)) {
                                                    final SubLObject idx_$855 = idx_$854;
                                                    if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$855, (SubLObject)dumper.$kw266$SKIP)) {
                                                        final SubLObject vector_var = id_index.id_index_dense_objects(idx_$855);
                                                        final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                                        SubLObject length;
                                                        SubLObject v_iteration;
                                                        SubLObject d_id;
                                                        SubLObject d_handle;
                                                        SubLObject deduction;
                                                        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                                            d_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                                            d_handle = Vectors.aref(vector_var, d_id);
                                                            if (dumper.NIL == id_index.id_index_tombstone_p(d_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                                if (dumper.NIL != id_index.id_index_tombstone_p(d_handle)) {
                                                                    d_handle = (SubLObject)dumper.$kw266$SKIP;
                                                                }
                                                                deduction = deduction_handles.resolve_deduction_id_value_pair(d_id, d_handle);
                                                                if (i.numGE(max)) {
                                                                    return (SubLObject)dumper.NIL;
                                                                }
                                                                if (i.numGE(min)) {
                                                                    invalid = (SubLObject)SubLObjectFactory.makeBoolean(dumper.NIL == exportable_deductionP(deduction));
                                                                    if (dumper.NIL == invalid) {
                                                                        supported_object = kb_utilities.hl_object_to_evaluatable_string(deductions_high.deduction_supported_object(deduction), (SubLObject)dumper.UNPROVIDED);
                                                                    }
                                                                    if (dumper.NIL == supported_object) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    if (dumper.NIL == invalid) {
                                                                        supports = kb_utilities.hl_object_to_evaluatable_string(exportable_deduction_supportsP(deductions_high.deduction_supports(deduction)), (SubLObject)dumper.UNPROVIDED);
                                                                    }
                                                                    if (dumper.NIL == invalid && dumper.NIL == supports) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    truth = kb_utilities.hl_object_to_evaluatable_string(deductions_high.deduction_truth(deduction), (SubLObject)dumper.UNPROVIDED);
                                                                    if (dumper.NIL == invalid && dumper.NIL == truth) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    if (dumper.NIL != invalid) {
                                                                        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str704$Found_unfindable_deduction__A_wit, deduction, deduction_handles.deduction_id(deduction));
                                                                        set.set_add(deduction, dumper.$dump_invalid_deductions$.getGlobalValue());
                                                                    }
                                                                    else {
                                                                        PrintLow.format(s, (SubLObject)dumper.$str705$_kb_create_deduction__A__A__A__A_, new SubLObject[] { supported_object, supports, truth, kb_utilities.hl_object_to_evaluatable_string(deductions_high.deduction_strength(deduction), (SubLObject)dumper.UNPROVIDED) });
                                                                    }
                                                                }
                                                                i = Numbers.add(i, (SubLObject)dumper.ONE_INTEGER);
                                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                utilities_macros.note_percent_progress(sofar, total);
                                                            }
                                                        }
                                                    }
                                                    final SubLObject idx_$856 = idx_$854;
                                                    if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$856) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                        final SubLObject sparse = id_index.id_index_sparse_objects(idx_$856);
                                                        SubLObject d_id2 = id_index.id_index_sparse_id_threshold(idx_$856);
                                                        final SubLObject end_id = id_index.id_index_next_id(idx_$856);
                                                        final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                                        while (d_id2.numL(end_id)) {
                                                            final SubLObject d_handle2 = Hashtables.gethash_without_values(d_id2, sparse, v_default);
                                                            if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(d_handle2)) {
                                                                final SubLObject deduction2 = deduction_handles.resolve_deduction_id_value_pair(d_id2, d_handle2);
                                                                if (i.numGE(max)) {
                                                                    return (SubLObject)dumper.NIL;
                                                                }
                                                                if (i.numGE(min)) {
                                                                    invalid = (SubLObject)SubLObjectFactory.makeBoolean(dumper.NIL == exportable_deductionP(deduction2));
                                                                    if (dumper.NIL == invalid) {
                                                                        supported_object = kb_utilities.hl_object_to_evaluatable_string(deductions_high.deduction_supported_object(deduction2), (SubLObject)dumper.UNPROVIDED);
                                                                    }
                                                                    if (dumper.NIL == supported_object) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    if (dumper.NIL == invalid) {
                                                                        supports = kb_utilities.hl_object_to_evaluatable_string(exportable_deduction_supportsP(deductions_high.deduction_supports(deduction2)), (SubLObject)dumper.UNPROVIDED);
                                                                    }
                                                                    if (dumper.NIL == invalid && dumper.NIL == supports) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    truth = kb_utilities.hl_object_to_evaluatable_string(deductions_high.deduction_truth(deduction2), (SubLObject)dumper.UNPROVIDED);
                                                                    if (dumper.NIL == invalid && dumper.NIL == truth) {
                                                                        invalid = (SubLObject)dumper.T;
                                                                    }
                                                                    if (dumper.NIL != invalid) {
                                                                        PrintLow.format((SubLObject)dumper.T, (SubLObject)dumper.$str704$Found_unfindable_deduction__A_wit, deduction2, deduction_handles.deduction_id(deduction2));
                                                                        set.set_add(deduction2, dumper.$dump_invalid_deductions$.getGlobalValue());
                                                                    }
                                                                    else {
                                                                        PrintLow.format(s, (SubLObject)dumper.$str705$_kb_create_deduction__A__A__A__A_, new SubLObject[] { supported_object, supports, truth, kb_utilities.hl_object_to_evaluatable_string(deductions_high.deduction_strength(deduction2), (SubLObject)dumper.UNPROVIDED) });
                                                                    }
                                                                }
                                                                i = Numbers.add(i, (SubLObject)dumper.ONE_INTEGER);
                                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                                utilities_macros.note_percent_progress(sofar, total);
                                                            }
                                                            d_id2 = Numbers.add(d_id2, (SubLObject)dumper.ONE_INTEGER);
                                                        }
                                                    }
                                                }
                                            }
                                            finally {
                                                final SubLObject _prev_bind_0_$851 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                                try {
                                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                                    final SubLObject _values = Values.getValuesAsVector();
                                                    utilities_macros.noting_percent_progress_postamble();
                                                    Values.restoreValuesFromVector(_values);
                                                }
                                                finally {
                                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$851, thread);
                                                }
                                            }
                                        }
                                        finally {
                                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_3_$853, thread);
                                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_2_$852, thread);
                                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_1_$851, thread);
                                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0_$850, thread);
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$852 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                            final SubLObject _values2 = Values.getValuesAsVector();
                                            streams_high.close(s, (SubLObject)dumper.UNPROVIDED);
                                            Values.restoreValuesFromVector(_values2);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$852, thread);
                                        }
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$853 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values3 = Values.getValuesAsVector();
                                        if (stream.isStream()) {
                                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                                        }
                                        Values.restoreValuesFromVector(_values3);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$853, thread);
                                    }
                                }
                            }
                            finally {
                                print_high.$print_level$.rebind(_prev_bind_4, thread);
                                print_high.$print_length$.rebind(_prev_bind_3, thread);
                                print_high.$print_pretty$.rebind(_prev_bind_2, thread);
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values4 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$841) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$840);
                                }
                                if (dumper.NIL == memory_mappedP_$842) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$840, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values4);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values5 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$840) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$839);
                            }
                            if (dumper.NIL == memory_mappedP_$841) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$839, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values5);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values6 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$839) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$838);
                        }
                        if (dumper.NIL == memory_mappedP_$840) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$838, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values6);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values7 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$838) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$837);
                    }
                    if (dumper.NIL == memory_mappedP_$839) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$837, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values7);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values8 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values8);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 251831L)
    public static SubLObject dump_essential_kb_bookkeeping_gafs_evaluatable(final SubLObject filename) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        set.clear_set(dumper.$dump_invalid_bookkeeping_gafs$.getGlobalValue());
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$860 = deduction_manager.$deduction_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$861 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$860);
            final SubLObject memory_mappedP_$862 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$860);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$860);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$860);
                final SubLObject manager_$861 = kb_hl_support_manager.$kb_hl_support_content_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$862 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$861);
                final SubLObject memory_mappedP_$863 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$861);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$861);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$861);
                    final SubLObject manager_$862 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$863 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$862);
                    final SubLObject memory_mappedP_$864 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$862);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$862);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$862);
                        final SubLObject manager_$863 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                        final SubLObject maintaining_countsP_$864 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$863);
                        final SubLObject memory_mappedP_$865 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$863);
                        try {
                            kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$863);
                            kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$863);
                            final SubLObject _prev_bind_0 = control_vars.$save_asked_queriesP$.currentBinding(thread);
                            final SubLObject _prev_bind_2 = print_high.$print_pretty$.currentBinding(thread);
                            final SubLObject _prev_bind_3 = print_high.$print_length$.currentBinding(thread);
                            final SubLObject _prev_bind_4 = print_high.$print_level$.currentBinding(thread);
                            try {
                                control_vars.$save_asked_queriesP$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_pretty$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_length$.bind((SubLObject)dumper.NIL, thread);
                                print_high.$print_level$.bind((SubLObject)dumper.NIL, thread);
                                SubLObject stream = (SubLObject)dumper.NIL;
                                try {
                                    final SubLObject _prev_bind_0_$872 = stream_macros.$stream_requires_locking$.currentBinding(thread);
                                    try {
                                        stream_macros.$stream_requires_locking$.bind((SubLObject)dumper.NIL, thread);
                                        stream = compatibility.open_text(filename, (SubLObject)dumper.$kw202$OUTPUT);
                                    }
                                    finally {
                                        stream_macros.$stream_requires_locking$.rebind(_prev_bind_0_$872, thread);
                                    }
                                    if (!stream.isStream()) {
                                        Errors.error((SubLObject)dumper.$str152$Unable_to_open__S, filename);
                                    }
                                    final SubLObject bad_stream = stream;
                                    final SubLObject s = file_utilities.change_file_stream_buffer_size(bad_stream, (SubLObject)dumper.$int669$8000000);
                                    try {
                                        SubLObject count = (SubLObject)dumper.ZERO_INTEGER;
                                        SubLObject cdolist_list_var = bookkeeping_store.bookkeeping_binary_gaf_store();
                                        SubLObject cons = (SubLObject)dumper.NIL;
                                        cons = cdolist_list_var.first();
                                        while (dumper.NIL != cdolist_list_var) {
                                            SubLObject current;
                                            final SubLObject datum = current = cons;
                                            SubLObject pred = (SubLObject)dumper.NIL;
                                            SubLObject subindex = (SubLObject)dumper.NIL;
                                            cdestructuring_bind.destructuring_bind_must_consp(current, datum, (SubLObject)dumper.$list706);
                                            pred = current.first();
                                            current = (subindex = current.rest());
                                            SubLObject iteration_state;
                                            for (iteration_state = dictionary_contents.do_dictionary_contents_state(dictionary.dictionary_contents(subindex)); dumper.NIL == dictionary_contents.do_dictionary_contents_doneP(iteration_state); iteration_state = dictionary_contents.do_dictionary_contents_next(iteration_state)) {
                                                thread.resetMultipleValues();
                                                final SubLObject arg1 = dictionary_contents.do_dictionary_contents_key_value(iteration_state);
                                                final SubLObject arg2 = thread.secondMultipleValue();
                                                thread.resetMultipleValues();
                                                SubLObject should_warn = (SubLObject)dumper.NIL;
                                                if (dumper.NIL != forts.fort_p(pred) && dumper.NIL == forts.valid_fortP(pred)) {
                                                    should_warn = (SubLObject)dumper.T;
                                                }
                                                if (dumper.NIL != forts.fort_p(arg1) && dumper.NIL == forts.valid_fortP(arg1)) {
                                                    should_warn = (SubLObject)dumper.T;
                                                }
                                                if (dumper.NIL != forts.fort_p(arg2) && dumper.NIL == forts.valid_fortP(arg2)) {
                                                    should_warn = (SubLObject)dumper.T;
                                                }
                                                if (dumper.NIL != should_warn) {
                                                    count = Numbers.add(count, (SubLObject)dumper.ONE_INTEGER);
                                                    set.set_add((SubLObject)ConsesLow.list(pred, arg1, arg2), dumper.$dump_invalid_bookkeeping_gafs$.getGlobalValue());
                                                    Errors.warn((SubLObject)dumper.$str707$Got_bad_bookkeeping_gaf__S____S__, new SubLObject[] { count, pred, arg1, arg2 });
                                                }
                                                else {
                                                    PrintLow.format(s, (SubLObject)dumper.$str708$_hl_assert_bookkeeping_binary_gaf, new SubLObject[] { kb_utilities.hl_object_to_evaluatable_string(pred, (SubLObject)dumper.UNPROVIDED), kb_utilities.hl_object_to_evaluatable_string(arg1, (SubLObject)dumper.UNPROVIDED), kb_utilities.hl_object_to_evaluatable_string(arg2, (SubLObject)dumper.UNPROVIDED), dumper.$const709$BookkeepingMt });
                                                }
                                            }
                                            dictionary_contents.do_dictionary_contents_finalize(iteration_state);
                                            cdolist_list_var = cdolist_list_var.rest();
                                            cons = cdolist_list_var.first();
                                        }
                                    }
                                    finally {
                                        final SubLObject _prev_bind_0_$873 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                        try {
                                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                            final SubLObject _values = Values.getValuesAsVector();
                                            streams_high.close(s, (SubLObject)dumper.UNPROVIDED);
                                            Values.restoreValuesFromVector(_values);
                                        }
                                        finally {
                                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$873, thread);
                                        }
                                    }
                                }
                                finally {
                                    final SubLObject _prev_bind_0_$874 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                    try {
                                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                        final SubLObject _values2 = Values.getValuesAsVector();
                                        if (stream.isStream()) {
                                            streams_high.close(stream, (SubLObject)dumper.UNPROVIDED);
                                        }
                                        Values.restoreValuesFromVector(_values2);
                                    }
                                    finally {
                                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$874, thread);
                                    }
                                }
                            }
                            finally {
                                print_high.$print_level$.rebind(_prev_bind_4, thread);
                                print_high.$print_length$.rebind(_prev_bind_3, thread);
                                print_high.$print_pretty$.rebind(_prev_bind_2, thread);
                                control_vars.$save_asked_queriesP$.rebind(_prev_bind_0, thread);
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values3 = Values.getValuesAsVector();
                                if (dumper.NIL != maintaining_countsP_$864) {
                                    kb_object_manager.maintain_kb_object_usage_counts(manager_$863);
                                }
                                if (dumper.NIL == memory_mappedP_$865) {
                                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$863, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                                }
                                Values.restoreValuesFromVector(_values3);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values4 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$863) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$862);
                            }
                            if (dumper.NIL == memory_mappedP_$864) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$862, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values4);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values5 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$862) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$861);
                        }
                        if (dumper.NIL == memory_mappedP_$863) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$861, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values5);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values6 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$861) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$860);
                    }
                    if (dumper.NIL == memory_mappedP_$862) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$860, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values6);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_9 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values7 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values7);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_9, thread);
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 253429L)
    public static SubLObject nart_depth_internal(final SubLObject nart, SubLObject depth) {
        if (depth == dumper.UNPROVIDED) {
            depth = (SubLObject)dumper.ZERO_INTEGER;
        }
        final SubLObject formula = narts_high.nart_hl_formula(nart);
        final SubLObject narts = list_utilities.tree_gather(formula, (SubLObject)dumper.$sym710$NART_P, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED, (SubLObject)dumper.UNPROVIDED);
        SubLObject max_depth = depth;
        SubLObject cdolist_list_var = narts;
        SubLObject sub_nart = (SubLObject)dumper.NIL;
        sub_nart = cdolist_list_var.first();
        while (dumper.NIL != cdolist_list_var) {
            max_depth = Numbers.max(max_depth, nart_depth_internal(sub_nart, Numbers.add(depth, (SubLObject)dumper.ONE_INTEGER)));
            cdolist_list_var = cdolist_list_var.rest();
            sub_nart = cdolist_list_var.first();
        }
        return max_depth;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 253756L)
    public static SubLObject nart_depth(final SubLObject nart) {
        return nart_depth_internal(nart, (SubLObject)dumper.ZERO_INTEGER);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 253828L)
    public static SubLObject kb_hl_support_depth_internal(final SubLObject kb_hl_support, SubLObject depth) {
        if (depth == dumper.UNPROVIDED) {
            depth = (SubLObject)dumper.ZERO_INTEGER;
        }
        SubLObject max_depth = depth;
        SubLObject cdolist_list_var = kb_hl_supports_high.kb_hl_support_justification(kb_hl_support);
        SubLObject cur_just = (SubLObject)dumper.NIL;
        cur_just = cdolist_list_var.first();
        while (dumper.NIL != cdolist_list_var) {
            if (dumper.NIL != kb_hl_support_handles.kb_hl_support_p(cur_just)) {
                max_depth = Numbers.max(kb_hl_support_depth_internal(cur_just, Numbers.add(depth, (SubLObject)dumper.ONE_INTEGER)), dumper.EMPTY_SUBL_OBJECT_ARRAY);
            }
            cdolist_list_var = cdolist_list_var.rest();
            cur_just = cdolist_list_var.first();
        }
        return max_depth;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 254153L)
    public static SubLObject kb_hl_support_depth(final SubLObject kb_hl_support) {
        return kb_hl_support_depth_internal(kb_hl_support, (SubLObject)dumper.ZERO_INTEGER);
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 254350L)
    public static SubLObject test_that_all_narts_are_findable(SubLObject enable_bootstrappingP) {
        if (enable_bootstrappingP == dumper.UNPROVIDED) {
            enable_bootstrappingP = (SubLObject)dumper.NIL;
        }
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)dumper.NIL;
        final SubLObject manager = constant_index_manager.$constant_index_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$875 = nart_index_manager.$nart_index_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$876 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$875);
            final SubLObject memory_mappedP_$877 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$875);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$875);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$875);
                final SubLObject idx = nart_handles.do_narts_table();
                final SubLObject mess = (SubLObject)dumper.$str711$Testing_that_narts_are_findable__;
                final SubLObject total = id_index.id_index_count(idx);
                SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                assert dumper.NIL != Types.stringp(mess) : mess;
                final SubLObject _prev_bind_0 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                try {
                    utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                    utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                    utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                    utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                    try {
                        utilities_macros.noting_percent_progress_preamble(mess);
                        final SubLObject idx_$878 = idx;
                        if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$878, (SubLObject)dumper.$kw266$SKIP)) {
                            final SubLObject idx_$879 = idx_$878;
                            if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$879, (SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject vector_var = id_index.id_index_dense_objects(idx_$879);
                                final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                SubLObject length;
                                SubLObject v_iteration;
                                SubLObject id;
                                SubLObject nart;
                                SubLObject _prev_bind_0_$880;
                                for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                    id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                    nart = Vectors.aref(vector_var, id);
                                    if (dumper.NIL == id_index.id_index_tombstone_p(nart) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                        if (dumper.NIL != id_index.id_index_tombstone_p(nart)) {
                                            nart = (SubLObject)dumper.$kw266$SKIP;
                                        }
                                        _prev_bind_0_$880 = control_vars.$bootstrapping_kbP$.currentBinding(thread);
                                        try {
                                            control_vars.$bootstrapping_kbP$.bind((SubLObject)((dumper.NIL != enable_bootstrappingP) ? dumper.T : dumper.NIL), thread);
                                            if (dumper.NIL == narts_high.find_nart(narts_high.nart_hl_formula(nart))) {
                                                result = (SubLObject)ConsesLow.cons(nart, result);
                                                Errors.warn((SubLObject)dumper.$str712$Unfindable_nart__S___S, nart_handles.nart_id(nart), nart);
                                            }
                                        }
                                        finally {
                                            control_vars.$bootstrapping_kbP$.rebind(_prev_bind_0_$880, thread);
                                        }
                                        sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                }
                            }
                            final SubLObject idx_$880 = idx_$878;
                            if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$880) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject sparse = id_index.id_index_sparse_objects(idx_$880);
                                SubLObject id2 = id_index.id_index_sparse_id_threshold(idx_$880);
                                final SubLObject end_id = id_index.id_index_next_id(idx_$880);
                                final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                while (id2.numL(end_id)) {
                                    final SubLObject nart2 = Hashtables.gethash_without_values(id2, sparse, v_default);
                                    if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(nart2)) {
                                        final SubLObject _prev_bind_0_$881 = control_vars.$bootstrapping_kbP$.currentBinding(thread);
                                        try {
                                            control_vars.$bootstrapping_kbP$.bind((SubLObject)((dumper.NIL != enable_bootstrappingP) ? dumper.T : dumper.NIL), thread);
                                            if (dumper.NIL == narts_high.find_nart(narts_high.nart_hl_formula(nart2))) {
                                                result = (SubLObject)ConsesLow.cons(nart2, result);
                                                Errors.warn((SubLObject)dumper.$str712$Unfindable_nart__S___S, nart_handles.nart_id(nart2), nart2);
                                            }
                                        }
                                        finally {
                                            control_vars.$bootstrapping_kbP$.rebind(_prev_bind_0_$881, thread);
                                        }
                                        sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                        utilities_macros.note_percent_progress(sofar, total);
                                    }
                                    id2 = Numbers.add(id2, (SubLObject)dumper.ONE_INTEGER);
                                }
                            }
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_0_$882 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values = Values.getValuesAsVector();
                            utilities_macros.noting_percent_progress_postamble();
                            Values.restoreValuesFromVector(_values);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$882, thread);
                        }
                    }
                }
                finally {
                    utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                    utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                    utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
                    utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0, thread);
                }
            }
            finally {
                final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values2 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$876) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$875);
                    }
                    if (dumper.NIL == memory_mappedP_$877) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$875, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values2);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values3 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values3);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
            }
        }
        return result;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 254894L)
    public static SubLObject test_that_all_assertions_are_findable() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)dumper.NIL;
        final SubLObject manager = assertion_manager.$assertion_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$884 = nart_index_manager.$nart_index_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$885 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$884);
            final SubLObject memory_mappedP_$886 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$884);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$884);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$884);
                final SubLObject manager_$885 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$886 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$885);
                final SubLObject memory_mappedP_$887 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$885);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$885);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$885);
                    SubLObject count = (SubLObject)dumper.ZERO_INTEGER;
                    final SubLObject idx = assertion_handles.do_assertions_table();
                    final SubLObject mess = (SubLObject)dumper.$str713$Testing_that_assertions_are_finda;
                    final SubLObject total = id_index.id_index_count(idx);
                    SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                    assert dumper.NIL != Types.stringp(mess) : mess;
                    final SubLObject _prev_bind_0 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                    final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                    final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                    final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                    try {
                        utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                        utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                        utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                        utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                        try {
                            utilities_macros.noting_percent_progress_preamble(mess);
                            final SubLObject idx_$890 = idx;
                            if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$890, (SubLObject)dumper.$kw266$SKIP)) {
                                final SubLObject idx_$891 = idx_$890;
                                if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$891, (SubLObject)dumper.$kw266$SKIP)) {
                                    final SubLObject vector_var = id_index.id_index_dense_objects(idx_$891);
                                    final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                    SubLObject length;
                                    SubLObject v_iteration;
                                    SubLObject a_id;
                                    SubLObject a_handle;
                                    SubLObject assertion;
                                    SubLObject _prev_bind_0_$892;
                                    for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                        a_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                        a_handle = Vectors.aref(vector_var, a_id);
                                        if (dumper.NIL == id_index.id_index_tombstone_p(a_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                            if (dumper.NIL != id_index.id_index_tombstone_p(a_handle)) {
                                                a_handle = (SubLObject)dumper.$kw266$SKIP;
                                            }
                                            assertion = assertion_handles.resolve_assertion_id_value_pair(a_id, a_handle);
                                            _prev_bind_0_$892 = dumper.$current_dump_assertion$.currentBinding(thread);
                                            try {
                                                dumper.$current_dump_assertion$.bind(assertion, thread);
                                                kb_utilities.hl_object_to_evaluatable_string(assertions_high.assertion_cnf(assertion), (SubLObject)dumper.T);
                                                if (dumper.NIL != dumper.$last_invalid_assertion$.getDynamicValue(thread)) {
                                                    result = (SubLObject)ConsesLow.cons(assertion, result);
                                                }
                                                else if (dumper.NIL == kb_indexing.find_assertion(assertions_high.assertion_cnf(assertion), assertions_high.assertion_mt(assertion))) {
                                                    count = Numbers.add(count, (SubLObject)dumper.ONE_INTEGER);
                                                    result = (SubLObject)ConsesLow.cons(assertion, result);
                                                    Errors.warn((SubLObject)dumper.$str714$__S__Unfindable_assertion_id__S__, count, assertion_handles.assertion_id(assertion), assertion);
                                                }
                                            }
                                            finally {
                                                dumper.$current_dump_assertion$.rebind(_prev_bind_0_$892, thread);
                                            }
                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                            utilities_macros.note_percent_progress(sofar, total);
                                        }
                                    }
                                }
                                final SubLObject idx_$892 = idx_$890;
                                if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$892) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                    final SubLObject sparse = id_index.id_index_sparse_objects(idx_$892);
                                    SubLObject a_id2 = id_index.id_index_sparse_id_threshold(idx_$892);
                                    final SubLObject end_id = id_index.id_index_next_id(idx_$892);
                                    final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                    while (a_id2.numL(end_id)) {
                                        final SubLObject a_handle2 = Hashtables.gethash_without_values(a_id2, sparse, v_default);
                                        if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(a_handle2)) {
                                            final SubLObject assertion2 = assertion_handles.resolve_assertion_id_value_pair(a_id2, a_handle2);
                                            final SubLObject _prev_bind_0_$893 = dumper.$current_dump_assertion$.currentBinding(thread);
                                            try {
                                                dumper.$current_dump_assertion$.bind(assertion2, thread);
                                                kb_utilities.hl_object_to_evaluatable_string(assertions_high.assertion_cnf(assertion2), (SubLObject)dumper.T);
                                                if (dumper.NIL != dumper.$last_invalid_assertion$.getDynamicValue(thread)) {
                                                    result = (SubLObject)ConsesLow.cons(assertion2, result);
                                                }
                                                else if (dumper.NIL == kb_indexing.find_assertion(assertions_high.assertion_cnf(assertion2), assertions_high.assertion_mt(assertion2))) {
                                                    count = Numbers.add(count, (SubLObject)dumper.ONE_INTEGER);
                                                    result = (SubLObject)ConsesLow.cons(assertion2, result);
                                                    Errors.warn((SubLObject)dumper.$str714$__S__Unfindable_assertion_id__S__, count, assertion_handles.assertion_id(assertion2), assertion2);
                                                }
                                            }
                                            finally {
                                                dumper.$current_dump_assertion$.rebind(_prev_bind_0_$893, thread);
                                            }
                                            sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                            utilities_macros.note_percent_progress(sofar, total);
                                        }
                                        a_id2 = Numbers.add(a_id2, (SubLObject)dumper.ONE_INTEGER);
                                    }
                                }
                            }
                        }
                        finally {
                            final SubLObject _prev_bind_0_$894 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                            try {
                                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                final SubLObject _values = Values.getValuesAsVector();
                                utilities_macros.noting_percent_progress_postamble();
                                Values.restoreValuesFromVector(_values);
                            }
                            finally {
                                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$894, thread);
                            }
                        }
                    }
                    finally {
                        utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                        utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                        utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
                        utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0, thread);
                    }
                }
                finally {
                    final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values2 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$886) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$885);
                        }
                        if (dumper.NIL == memory_mappedP_$887) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$885, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values2);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values3 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$885) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$884);
                    }
                    if (dumper.NIL == memory_mappedP_$886) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$884, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values3);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values4 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values4);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
            }
        }
        return result;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 255776L)
    public static SubLObject test_that_all_deductions_are_findable() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject result = (SubLObject)dumper.NIL;
        final SubLObject manager = deduction_manager.$deduction_content_manager$.getGlobalValue();
        final SubLObject maintaining_countsP = kb_object_manager.kb_object_usage_counts_enabledP(manager);
        final SubLObject memory_mappedP = kb_object_manager.kb_object_manager_memory_mappedP(manager);
        try {
            kb_object_manager.dont_maintain_kb_object_usage_counts(manager);
            kb_object_manager.kb_object_manager_enable_memory_mapping(manager);
            final SubLObject manager_$896 = assertion_manager.$assertion_content_manager$.getGlobalValue();
            final SubLObject maintaining_countsP_$897 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$896);
            final SubLObject memory_mappedP_$898 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$896);
            try {
                kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$896);
                kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$896);
                final SubLObject manager_$897 = nart_index_manager.$nart_index_manager$.getGlobalValue();
                final SubLObject maintaining_countsP_$898 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$897);
                final SubLObject memory_mappedP_$899 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$897);
                try {
                    kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$897);
                    kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$897);
                    final SubLObject manager_$898 = constant_index_manager.$constant_index_manager$.getGlobalValue();
                    final SubLObject maintaining_countsP_$899 = kb_object_manager.kb_object_usage_counts_enabledP(manager_$898);
                    final SubLObject memory_mappedP_$900 = kb_object_manager.kb_object_manager_memory_mappedP(manager_$898);
                    try {
                        kb_object_manager.dont_maintain_kb_object_usage_counts(manager_$898);
                        kb_object_manager.kb_object_manager_enable_memory_mapping(manager_$898);
                        SubLObject count = (SubLObject)dumper.ZERO_INTEGER;
                        final SubLObject idx = deduction_handles.do_deductions_table();
                        final SubLObject mess = (SubLObject)dumper.$str715$Testing_that_deductions_are_finda;
                        final SubLObject total = id_index.id_index_count(idx);
                        SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
                        assert dumper.NIL != Types.stringp(mess) : mess;
                        final SubLObject _prev_bind_0 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
                        final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
                        final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
                        final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
                        try {
                            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
                            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
                            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
                            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
                            try {
                                utilities_macros.noting_percent_progress_preamble(mess);
                                final SubLObject idx_$905 = idx;
                                if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$905, (SubLObject)dumper.$kw266$SKIP)) {
                                    final SubLObject idx_$906 = idx_$905;
                                    if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$906, (SubLObject)dumper.$kw266$SKIP)) {
                                        final SubLObject vector_var = id_index.id_index_dense_objects(idx_$906);
                                        final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                                        SubLObject length;
                                        SubLObject v_iteration;
                                        SubLObject d_id;
                                        SubLObject d_handle;
                                        SubLObject deduction;
                                        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                                            d_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                                            d_handle = Vectors.aref(vector_var, d_id);
                                            if (dumper.NIL == id_index.id_index_tombstone_p(d_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                                if (dumper.NIL != id_index.id_index_tombstone_p(d_handle)) {
                                                    d_handle = (SubLObject)dumper.$kw266$SKIP;
                                                }
                                                deduction = deduction_handles.resolve_deduction_id_value_pair(d_id, d_handle);
                                                if (dumper.NIL == deductions_high.find_deduction(deductions_high.deduction_supported_object(deduction), deductions_high.deduction_supports(deduction), deductions_high.deduction_truth(deduction))) {
                                                    count = Numbers.add(count, (SubLObject)dumper.ONE_INTEGER);
                                                    result = (SubLObject)ConsesLow.cons(deduction, result);
                                                    Errors.warn((SubLObject)dumper.$str716$__S__Unfindable_deduction_id__S__, count, deduction_handles.deduction_id(deduction), deduction);
                                                }
                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                utilities_macros.note_percent_progress(sofar, total);
                                            }
                                        }
                                    }
                                    final SubLObject idx_$907 = idx_$905;
                                    if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$907) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                        final SubLObject sparse = id_index.id_index_sparse_objects(idx_$907);
                                        SubLObject d_id2 = id_index.id_index_sparse_id_threshold(idx_$907);
                                        final SubLObject end_id = id_index.id_index_next_id(idx_$907);
                                        final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                                        while (d_id2.numL(end_id)) {
                                            final SubLObject d_handle2 = Hashtables.gethash_without_values(d_id2, sparse, v_default);
                                            if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(d_handle2)) {
                                                final SubLObject deduction2 = deduction_handles.resolve_deduction_id_value_pair(d_id2, d_handle2);
                                                if (dumper.NIL == deductions_high.find_deduction(deductions_high.deduction_supported_object(deduction2), deductions_high.deduction_supports(deduction2), deductions_high.deduction_truth(deduction2))) {
                                                    count = Numbers.add(count, (SubLObject)dumper.ONE_INTEGER);
                                                    result = (SubLObject)ConsesLow.cons(deduction2, result);
                                                    Errors.warn((SubLObject)dumper.$str716$__S__Unfindable_deduction_id__S__, count, deduction_handles.deduction_id(deduction2), deduction2);
                                                }
                                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                                utilities_macros.note_percent_progress(sofar, total);
                                            }
                                            d_id2 = Numbers.add(d_id2, (SubLObject)dumper.ONE_INTEGER);
                                        }
                                    }
                                }
                            }
                            finally {
                                final SubLObject _prev_bind_0_$908 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                                try {
                                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                                    final SubLObject _values = Values.getValuesAsVector();
                                    utilities_macros.noting_percent_progress_postamble();
                                    Values.restoreValuesFromVector(_values);
                                }
                                finally {
                                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$908, thread);
                                }
                            }
                        }
                        finally {
                            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
                            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
                            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
                            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0, thread);
                        }
                    }
                    finally {
                        final SubLObject _prev_bind_5 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                        try {
                            Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                            final SubLObject _values2 = Values.getValuesAsVector();
                            if (dumper.NIL != maintaining_countsP_$899) {
                                kb_object_manager.maintain_kb_object_usage_counts(manager_$898);
                            }
                            if (dumper.NIL == memory_mappedP_$900) {
                                kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$898, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                            }
                            Values.restoreValuesFromVector(_values2);
                        }
                        finally {
                            Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_5, thread);
                        }
                    }
                }
                finally {
                    final SubLObject _prev_bind_6 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                    try {
                        Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                        final SubLObject _values3 = Values.getValuesAsVector();
                        if (dumper.NIL != maintaining_countsP_$898) {
                            kb_object_manager.maintain_kb_object_usage_counts(manager_$897);
                        }
                        if (dumper.NIL == memory_mappedP_$899) {
                            kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$897, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                        }
                        Values.restoreValuesFromVector(_values3);
                    }
                    finally {
                        Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_6, thread);
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_7 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values4 = Values.getValuesAsVector();
                    if (dumper.NIL != maintaining_countsP_$897) {
                        kb_object_manager.maintain_kb_object_usage_counts(manager_$896);
                    }
                    if (dumper.NIL == memory_mappedP_$898) {
                        kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager_$896, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                    }
                    Values.restoreValuesFromVector(_values4);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_7, thread);
                }
            }
        }
        finally {
            final SubLObject _prev_bind_8 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
            try {
                Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                final SubLObject _values5 = Values.getValuesAsVector();
                if (dumper.NIL != maintaining_countsP) {
                    kb_object_manager.maintain_kb_object_usage_counts(manager);
                }
                if (dumper.NIL == memory_mappedP) {
                    kb_object_manager.kb_object_manager_change_stream_buffer_sizes(manager, (SubLObject)dumper.$int56$2048, (SubLObject)dumper.$int57$256);
                }
                Values.restoreValuesFromVector(_values5);
            }
            finally {
                Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_8, thread);
            }
        }
        return result;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 256521L)
    public static SubLObject fix_bad_narts() {
        for (SubLObject bad_narts = test_that_all_narts_are_findable((SubLObject)dumper.UNPROVIDED); dumper.NIL != bad_narts; bad_narts = test_that_all_narts_are_findable((SubLObject)dumper.UNPROVIDED)) {
            SubLObject cdolist_list_var = bad_narts;
            SubLObject bad_nart = (SubLObject)dumper.NIL;
            bad_nart = cdolist_list_var.first();
            while (dumper.NIL != cdolist_list_var) {
                fix_bad_nart(bad_nart);
                cdolist_list_var = cdolist_list_var.rest();
                bad_nart = cdolist_list_var.first();
            }
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 256797L)
    public static SubLObject fix_bad_nart(final SubLObject bad_nart) {
        final SubLThread thread = SubLProcess.currentSubLThread();
        SubLObject cdolist_list_var = kb_mapping.gather_term_assertions(bad_nart, (SubLObject)dumper.UNPROVIDED);
        SubLObject assertion = (SubLObject)dumper.NIL;
        assertion = cdolist_list_var.first();
        while (dumper.NIL != cdolist_list_var) {
            fix_bad_assertion(assertion, (SubLObject)dumper.UNPROVIDED);
            cdolist_list_var = cdolist_list_var.rest();
            assertion = cdolist_list_var.first();
        }
        final SubLObject _prev_bind_0 = api_control_vars.$the_cyclist$.currentBinding(thread);
        try {
            api_control_vars.$the_cyclist$.bind(dumper.$const717$CycAdministrator, thread);
            cyc_kernel.cyc_kill(bad_nart);
        }
        finally {
            api_control_vars.$the_cyclist$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 257034L)
    public static SubLObject get_robust_nart_removal_form(final SubLObject nart) {
        return (SubLObject)ConsesLow.list((SubLObject)dumper.$sym718$IGNORE_ERRORS, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym8$CLET, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)dumper.$sym719$POSSIBLE_NART, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym459$FIND_NART_BY_ID, nart_handles.nart_id(nart)))), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym18$PWHEN, (SubLObject)dumper.$sym719$POSSIBLE_NART, (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym18$PWHEN, (SubLObject)ConsesLow.list((SubLObject)dumper.EQUAL, (SubLObject)dumper.$list720, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym721$EVAL, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym722$READ_FROM_STRING, kb_utilities.hl_object_to_evaluatable_string(narts_high.nart_hl_formula(nart), (SubLObject)dumper.UNPROVIDED)))), (SubLObject)dumper.$list723))));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 257753L)
    public static SubLObject get_robust_assertion_removal_form(final SubLObject assertion) {
        return (SubLObject)ConsesLow.list((SubLObject)dumper.$sym718$IGNORE_ERRORS, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym8$CLET, (SubLObject)ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)dumper.$sym724$POSSIBLE_ASSERTION, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym340$FIND_ASSERTION_BY_ID, assertion_handles.assertion_id(assertion)))), (SubLObject)ConsesLow.list((SubLObject)dumper.$sym18$PWHEN, (SubLObject)dumper.$sym724$POSSIBLE_ASSERTION, (SubLObject)ConsesLow.listS((SubLObject)dumper.$sym18$PWHEN, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym725$CAND, (SubLObject)ConsesLow.list((SubLObject)dumper.EQUAL, (SubLObject)dumper.$list726, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym721$EVAL, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym722$READ_FROM_STRING, kb_utilities.hl_object_to_evaluatable_string(assertions_high.assertion_mt(assertion), (SubLObject)dumper.UNPROVIDED)))), (SubLObject)ConsesLow.list((SubLObject)dumper.EQUAL, (SubLObject)dumper.$list727, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym721$EVAL, (SubLObject)ConsesLow.list((SubLObject)dumper.$sym722$READ_FROM_STRING, kb_utilities.hl_object_to_evaluatable_string(cycl_utilities.hl_to_el(assertions_high.assertion_cnf(assertion)), (SubLObject)dumper.UNPROVIDED))))), (SubLObject)dumper.$list728))));
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 258428L)
    public static SubLObject fix_bad_assertion(final SubLObject assertion, SubLObject kill_tous) {
        if (kill_tous == dumper.UNPROVIDED) {
            kill_tous = (SubLObject)dumper.NIL;
        }
        if (dumper.NIL == kill_tous && dumper.NIL != function_terms.tou_assertionP(assertion)) {
            return (SubLObject)dumper.NIL;
        }
        final SubLObject meta_assertions = assertion_utilities.all_meta_assertions(assertion);
        SubLObject new_assertion = (SubLObject)dumper.NIL;
        new_assertion = ke.ke_recanonicalize_assertion_now(assertion, meta_assertions);
        if (dumper.NIL == new_assertion) {
            Errors.warn((SubLObject)dumper.$str729$Deleting_potentially_bad_assertio, assertion_handles.assertion_id(assertion), assertion);
        }
        else {
            Errors.warn((SubLObject)dumper.$str730$Recanonicalized__A___A, assertion_handles.assertion_id(assertion), assertion);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 258962L)
    public static SubLObject find_assertion_with_kb_hl_support_deduction_dependent() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject idx = assertion_handles.do_assertions_table();
        final SubLObject mess = (SubLObject)dumper.$str731$Finding_assertions_____;
        final SubLObject total = id_index.id_index_count(idx);
        SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
        assert dumper.NIL != Types.stringp(mess) : mess;
        final SubLObject _prev_bind_0 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
        try {
            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
            try {
                utilities_macros.noting_percent_progress_preamble(mess);
                final SubLObject idx_$909 = idx;
                if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$909, (SubLObject)dumper.$kw266$SKIP)) {
                    final SubLObject idx_$910 = idx_$909;
                    if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$910, (SubLObject)dumper.$kw266$SKIP)) {
                        final SubLObject vector_var = id_index.id_index_dense_objects(idx_$910);
                        final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                        SubLObject length;
                        SubLObject v_iteration;
                        SubLObject a_id;
                        SubLObject a_handle;
                        SubLObject assertion;
                        SubLObject set_contents_var;
                        SubLObject basis_object;
                        SubLObject state;
                        SubLObject dep;
                        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                            a_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                            a_handle = Vectors.aref(vector_var, a_id);
                            if (dumper.NIL == id_index.id_index_tombstone_p(a_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                if (dumper.NIL != id_index.id_index_tombstone_p(a_handle)) {
                                    a_handle = (SubLObject)dumper.$kw266$SKIP;
                                }
                                assertion = assertion_handles.resolve_assertion_id_value_pair(a_id, a_handle);
                                set_contents_var = assertions_high.assertion_dependents(assertion);
                                for (basis_object = set_contents.do_set_contents_basis_object(set_contents_var), state = (SubLObject)dumper.NIL, state = set_contents.do_set_contents_initial_state(basis_object, set_contents_var); dumper.NIL == set_contents.do_set_contents_doneP(basis_object, state); state = set_contents.do_set_contents_update_state(state)) {
                                    dep = set_contents.do_set_contents_next(basis_object, state);
                                    if (dumper.NIL != set_contents.do_set_contents_element_validP(state, dep)) {
                                        if (dumper.NIL == deduction_handles.deduction_p(dep)) {
                                            Errors.error((SubLObject)dumper.$str732$Expected_a_deduction_got___S__, dep);
                                        }
                                        if (dumper.NIL != kb_hl_support_handles.kb_hl_support_p(deductions_high.deduction_supported_object(dep))) {
                                            return assertion;
                                        }
                                    }
                                }
                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                utilities_macros.note_percent_progress(sofar, total);
                            }
                        }
                    }
                    final SubLObject idx_$911 = idx_$909;
                    if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$911) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                        final SubLObject sparse = id_index.id_index_sparse_objects(idx_$911);
                        SubLObject a_id2 = id_index.id_index_sparse_id_threshold(idx_$911);
                        final SubLObject end_id = id_index.id_index_next_id(idx_$911);
                        final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                        while (a_id2.numL(end_id)) {
                            final SubLObject a_handle2 = Hashtables.gethash_without_values(a_id2, sparse, v_default);
                            if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(a_handle2)) {
                                final SubLObject assertion2 = assertion_handles.resolve_assertion_id_value_pair(a_id2, a_handle2);
                                final SubLObject set_contents_var2 = assertions_high.assertion_dependents(assertion2);
                                SubLObject basis_object2;
                                SubLObject state2;
                                SubLObject dep2;
                                for (basis_object2 = set_contents.do_set_contents_basis_object(set_contents_var2), state2 = (SubLObject)dumper.NIL, state2 = set_contents.do_set_contents_initial_state(basis_object2, set_contents_var2); dumper.NIL == set_contents.do_set_contents_doneP(basis_object2, state2); state2 = set_contents.do_set_contents_update_state(state2)) {
                                    dep2 = set_contents.do_set_contents_next(basis_object2, state2);
                                    if (dumper.NIL != set_contents.do_set_contents_element_validP(state2, dep2)) {
                                        if (dumper.NIL == deduction_handles.deduction_p(dep2)) {
                                            Errors.error((SubLObject)dumper.$str732$Expected_a_deduction_got___S__, dep2);
                                        }
                                        if (dumper.NIL != kb_hl_support_handles.kb_hl_support_p(deductions_high.deduction_supported_object(dep2))) {
                                            return assertion2;
                                        }
                                    }
                                }
                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                utilities_macros.note_percent_progress(sofar, total);
                            }
                            a_id2 = Numbers.add(a_id2, (SubLObject)dumper.ONE_INTEGER);
                        }
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$912 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    utilities_macros.noting_percent_progress_postamble();
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$912, thread);
                }
            }
        }
        finally {
            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    @SubLTranslatedFile.SubL(source = "cycl/dumper.lisp", position = 259331L)
    public static SubLObject find_complex_cnf() {
        final SubLThread thread = SubLProcess.currentSubLThread();
        final SubLObject idx = assertion_handles.do_assertions_table();
        final SubLObject mess = (SubLObject)dumper.$str733$Finding_cnf_with_non_trivial_term;
        final SubLObject total = id_index.id_index_count(idx);
        SubLObject sofar = (SubLObject)dumper.ZERO_INTEGER;
        assert dumper.NIL != Types.stringp(mess) : mess;
        final SubLObject _prev_bind_0 = utilities_macros.$last_percent_progress_index$.currentBinding(thread);
        final SubLObject _prev_bind_2 = utilities_macros.$last_percent_progress_prediction$.currentBinding(thread);
        final SubLObject _prev_bind_3 = utilities_macros.$within_noting_percent_progress$.currentBinding(thread);
        final SubLObject _prev_bind_4 = utilities_macros.$percent_progress_start_time$.currentBinding(thread);
        try {
            utilities_macros.$last_percent_progress_index$.bind((SubLObject)dumper.ZERO_INTEGER, thread);
            utilities_macros.$last_percent_progress_prediction$.bind((SubLObject)dumper.NIL, thread);
            utilities_macros.$within_noting_percent_progress$.bind((SubLObject)dumper.T, thread);
            utilities_macros.$percent_progress_start_time$.bind(Time.get_universal_time(), thread);
            try {
                utilities_macros.noting_percent_progress_preamble(mess);
                final SubLObject idx_$913 = idx;
                if (dumper.NIL == id_index.id_index_objects_empty_p(idx_$913, (SubLObject)dumper.$kw266$SKIP)) {
                    final SubLObject idx_$914 = idx_$913;
                    if (dumper.NIL == id_index.id_index_dense_objects_empty_p(idx_$914, (SubLObject)dumper.$kw266$SKIP)) {
                        final SubLObject vector_var = id_index.id_index_dense_objects(idx_$914);
                        final SubLObject backwardP_var = (SubLObject)dumper.NIL;
                        SubLObject length;
                        SubLObject v_iteration;
                        SubLObject a_id;
                        SubLObject a_handle;
                        SubLObject assertion;
                        for (length = Sequences.length(vector_var), v_iteration = (SubLObject)dumper.NIL, v_iteration = (SubLObject)dumper.ZERO_INTEGER; v_iteration.numL(length); v_iteration = Numbers.add(v_iteration, (SubLObject)dumper.ONE_INTEGER)) {
                            a_id = ((dumper.NIL != backwardP_var) ? Numbers.subtract(length, v_iteration, (SubLObject)dumper.ONE_INTEGER) : v_iteration);
                            a_handle = Vectors.aref(vector_var, a_id);
                            if (dumper.NIL == id_index.id_index_tombstone_p(a_handle) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                                if (dumper.NIL != id_index.id_index_tombstone_p(a_handle)) {
                                    a_handle = (SubLObject)dumper.$kw266$SKIP;
                                }
                                assertion = assertion_handles.resolve_assertion_id_value_pair(a_id, a_handle);
                                if (kb_utilities.term_order(assertion).numG((SubLObject)dumper.TWO_INTEGER)) {
                                    Errors.warn((SubLObject)dumper.$str734$Found_cnf__A, assertions_high.assertion_cnf(assertion));
                                    Errors.warn((SubLObject)dumper.$str735$Found_mt__A, assertions_high.assertion_mt(assertion));
                                    Errors.warn((SubLObject)dumper.$str736$Found_id__A, assertion_handles.assertion_id(assertion));
                                    return (SubLObject)dumper.NIL;
                                }
                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                utilities_macros.note_percent_progress(sofar, total);
                            }
                        }
                    }
                    final SubLObject idx_$915 = idx_$913;
                    if (dumper.NIL == id_index.id_index_sparse_objects_empty_p(idx_$915) || dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) {
                        final SubLObject sparse = id_index.id_index_sparse_objects(idx_$915);
                        SubLObject a_id2 = id_index.id_index_sparse_id_threshold(idx_$915);
                        final SubLObject end_id = id_index.id_index_next_id(idx_$915);
                        final SubLObject v_default = (SubLObject)((dumper.NIL != id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP)) ? dumper.NIL : dumper.$kw266$SKIP);
                        while (a_id2.numL(end_id)) {
                            final SubLObject a_handle2 = Hashtables.gethash_without_values(a_id2, sparse, v_default);
                            if (dumper.NIL == id_index.id_index_skip_tombstones_p((SubLObject)dumper.$kw266$SKIP) || dumper.NIL == id_index.id_index_tombstone_p(a_handle2)) {
                                final SubLObject assertion2 = assertion_handles.resolve_assertion_id_value_pair(a_id2, a_handle2);
                                if (kb_utilities.term_order(assertion2).numG((SubLObject)dumper.TWO_INTEGER)) {
                                    Errors.warn((SubLObject)dumper.$str734$Found_cnf__A, assertions_high.assertion_cnf(assertion2));
                                    Errors.warn((SubLObject)dumper.$str735$Found_mt__A, assertions_high.assertion_mt(assertion2));
                                    Errors.warn((SubLObject)dumper.$str736$Found_id__A, assertion_handles.assertion_id(assertion2));
                                    return (SubLObject)dumper.NIL;
                                }
                                sofar = Numbers.add(sofar, (SubLObject)dumper.ONE_INTEGER);
                                utilities_macros.note_percent_progress(sofar, total);
                            }
                            a_id2 = Numbers.add(a_id2, (SubLObject)dumper.ONE_INTEGER);
                        }
                    }
                }
            }
            finally {
                final SubLObject _prev_bind_0_$916 = Threads.$is_thread_performing_cleanupP$.currentBinding(thread);
                try {
                    Threads.$is_thread_performing_cleanupP$.bind((SubLObject)dumper.T, thread);
                    final SubLObject _values = Values.getValuesAsVector();
                    utilities_macros.noting_percent_progress_postamble();
                    Values.restoreValuesFromVector(_values);
                }
                finally {
                    Threads.$is_thread_performing_cleanupP$.rebind(_prev_bind_0_$916, thread);
                }
            }
        }
        finally {
            utilities_macros.$percent_progress_start_time$.rebind(_prev_bind_4, thread);
            utilities_macros.$within_noting_percent_progress$.rebind(_prev_bind_3, thread);
            utilities_macros.$last_percent_progress_prediction$.rebind(_prev_bind_2, thread);
            utilities_macros.$last_percent_progress_index$.rebind(_prev_bind_0, thread);
        }
        return (SubLObject)dumper.NIL;
    }

    public static SubLObject declare_dumper_file() {
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "force_monolithic_kb_assumptionP", "FORCE-MONOLITHIC-KB-ASSUMPTION?", 0, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "with_kb_dump_ids", "WITH-KB-DUMP-IDS");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "with_kb_load_ids", "WITH-KB-LOAD-IDS");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "with_kb_load_area_allocation", "WITH-KB-LOAD-AREA-ALLOCATION");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "without_kb_load_area_allocation", "WITHOUT-KB-LOAD-AREA-ALLOCATION");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "with_kb_dump_filename", "WITH-KB-DUMP-FILENAME");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "with_kb_dump_binary_file", "WITH-KB-DUMP-BINARY-FILE");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "with_kb_dump_text_file", "WITH-KB-DUMP-TEXT-FILE");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "discard_dump_filename", "DISCARD-DUMP-FILENAME", 1, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "with_pergamom_style_units", "WITH-PERGAMOM-STYLE-UNITS");
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "with_kelsos_style_units", "WITH-KELSOS-STYLE-UNITS");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_dump_directory", "KB-DUMP-DIRECTORY", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_wide_mark_basename_from_index_basename", "GET-WIDE-MARK-BASENAME-FROM-INDEX-BASENAME", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_dump_file", "KB-DUMP-FILE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_dump_product_file", "KB-DUMP-PRODUCT-FILE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_estimated_size", "DUMP-ESTIMATED-SIZE", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "verify_file_existence", "VERIFY-FILE-EXISTENCE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "validate_dump_directory", "VALIDATE-DUMP-DIRECTORY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_load_gc_checkpoint", "KB-LOAD-GC-CHECKPOINT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "preprocess_experience_and_dump_standard_kb", "PREPROCESS-EXPERIENCE-AND-DUMP-STANDARD-KB", 0, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_standard_kb", "DUMP-STANDARD-KB", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "perform_standard_pre_dump_kb_cleanups", "PERFORM-STANDARD-PRE-DUMP-KB-CLEANUPS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "perform_standard_pre_dump_kb_cleanups_complete", "PERFORM-STANDARD-PRE-DUMP-KB-CLEANUPS-COMPLETE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "perform_standard_pre_dump_kb_cleanups_partial", "PERFORM-STANDARD-PRE-DUMP-KB-CLEANUPS-PARTIAL", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "perform_kb_cleanups", "PERFORM-KB-CLEANUPS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "preprocess_experience", "PREPROCESS-EXPERIENCE", 0, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "preprocess_experience_and_dump_non_computable_kb", "PREPROCESS-EXPERIENCE-AND-DUMP-NON-COMPUTABLE-KB", 0, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_non_computable_kb", "DUMP-NON-COMPUTABLE-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_non_computable_kb_and_rebuild_computable_kb_and_write_image", "LOAD-NON-COMPUTABLE-KB-AND-REBUILD-COMPUTABLE-KB-AND-WRITE-IMAGE", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_non_computable_kb", "LOAD-NON-COMPUTABLE-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_non_computable_kb_and_rebuild_computable_kb", "LOAD-NON-COMPUTABLE-KB-AND-REBUILD-COMPUTABLE-KB", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_computable_kb_and_content", "DUMP-COMPUTABLE-KB-AND-CONTENT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_non_computable_kb_plus_rebuild_and_dump_computable_kb", "LOAD-NON-COMPUTABLE-KB-PLUS-REBUILD-AND-DUMP-COMPUTABLE-KB", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_and_reconnect_computable_kb", "REBUILD-AND-RECONNECT-COMPUTABLE-KB", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_and_reconnect_kb_indexing", "REBUILD-AND-RECONNECT-KB-INDEXING", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_assertion_indexing_for_reconnect", "REBUILD-ASSERTION-INDEXING-FOR-RECONNECT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_and_dump_assertion_indexing", "REBUILD-AND-DUMP-ASSERTION-INDEXING", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "merge_and_redump_assertion_indexing", "MERGE-AND-REDUMP-ASSERTION-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "merge_and_redump_constant_assertion_indexing", "MERGE-AND-REDUMP-CONSTANT-ASSERTION-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "merge_and_redump_nart_assertion_indexing", "MERGE-AND-REDUMP-NART-ASSERTION-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "merge_and_redump_unrepresented_term_assertion_indexing", "MERGE-AND-REDUMP-UNREPRESENTED-TERM-ASSERTION-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "merge_index_from_partial_results", "MERGE-INDEX-FROM-PARTIAL-RESULTS", 5, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "compute_rebuild_part_dirs", "COMPUTE-REBUILD-PART-DIRS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "cleanup_rebuild_part_dirs", "CLEANUP-REBUILD-PART-DIRS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "cyc_dump_kb", "CYC-DUMP-KB", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "cyc_dump_kb_unsafe", "CYC-DUMP-KB-UNSAFE", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "cyc_dump_kb_int", "CYC-DUMP-KB-INT", 2, 1, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "with_timed_kb_store_operation", "WITH-TIMED-KB-STORE-OPERATION");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb", "DUMP-KB", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb", "LOAD-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "minimal_tombstoning_modeP", "MINIMAL-TOMBSTONING-MODE?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "medium_tombstoning_modeP", "MEDIUM-TOMBSTONING-MODE?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "maximal_tombstoning_modeP", "MAXIMAL-TOMBSTONING-MODE?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_kb", "SNAPSHOT-KB", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "ensure_valid_dump_directory", "ENSURE-VALID-DUMP-DIRECTORY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "possibly_note_transcript_operations_processed", "POSSIBLY-NOTE-TRANSCRIPT-OPERATIONS-PROCESSED", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_manifest", "KB-MANIFEST", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_possibly_load_manifest_from_directory", "KB-POSSIBLY-LOAD-MANIFEST-FROM-DIRECTORY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_load_manifest_from_directory", "KB-LOAD-MANIFEST-FROM-DIRECTORY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "describe_knowledge_fvector_files", "DESCRIBE-KNOWLEDGE-FVECTOR-FILES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "describe_index_fvector_files", "DESCRIBE-INDEX-FVECTOR-FILES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_kb_units_file_vector_descriptions", "GET-KB-UNITS-FILE-VECTOR-DESCRIPTIONS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_kb_units_file_vector_categories", "GET-KB-UNITS-FILE-VECTOR-CATEGORIES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_dump_to_directory", "KB-DUMP-TO-DIRECTORY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_snapshot_to_directory", "KB-SNAPSHOT-TO-DIRECTORY", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_load_from_directory", "KB-LOAD-FROM-DIRECTORY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_ids", "DUMP-KB-IDS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_essential_kb", "DUMP-ESSENTIAL-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_essential_kb", "SNAPSHOT-ESSENTIAL-KB", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_essential_kb", "LOAD-ESSENTIAL-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_essential_kb_initializations", "LOAD-ESSENTIAL-KB-INITIALIZATIONS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_computable_kb_initializations", "LOAD-COMPUTABLE-KB-INITIALIZATIONS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_computable_remaining_hl_low_initializations", "LOAD-COMPUTABLE-REMAINING-HL-LOW-INITIALIZATIONS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_computable_content", "DUMP-COMPUTABLE-CONTENT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_computable_content", "LOAD-COMPUTABLE-CONTENT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_computable_content", "REBUILD-COMPUTABLE-CONTENT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_computable_content_dumpable", "REBUILD-COMPUTABLE-CONTENT-DUMPABLE", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_computable_content_dumpable_low", "REBUILD-COMPUTABLE-CONTENT-DUMPABLE-LOW", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_computable_kb", "DUMP-COMPUTABLE-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_computable_kb", "SNAPSHOT-COMPUTABLE-KB", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_computable_kb", "LOAD-COMPUTABLE-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_computable_kb", "REBUILD-COMPUTABLE-KB", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_computable_remaining_hl", "DUMP-COMPUTABLE-REMAINING-HL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_computable_remaining_hl_shared", "DUMP-COMPUTABLE-REMAINING-HL-SHARED", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_computable_remaining_hl", "SNAPSHOT-COMPUTABLE-REMAINING-HL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_computable_remaining_hl", "LOAD-COMPUTABLE-REMAINING-HL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_computable_remaining_hl", "REBUILD-COMPUTABLE-REMAINING-HL", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_computable_remaining_hl_low", "REBUILD-COMPUTABLE-REMAINING-HL-LOW", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_computable_remaining_hl_high", "REBUILD-COMPUTABLE-REMAINING-HL-HIGH", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_computable_but_not_dumpable_yet", "REBUILD-COMPUTABLE-BUT-NOT-DUMPABLE-YET", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_copyright", "DUMP-COPYRIGHT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_dump_stamp_file_vector_for_references", "KB-DUMP-STAMP-FILE-VECTOR-FOR-REFERENCES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_copyright", "LOAD-COPYRIGHT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_unit_file", "LOAD-UNIT-FILE", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_object_count", "DUMP-KB-OBJECT-COUNT", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_object_count", "LOAD-KB-OBJECT-COUNT", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_kb_object_deleted_id_set", "SNAPSHOT-KB-OBJECT-DELETED-ID-SET", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_object_deleted_id_set", "LOAD-KB-OBJECT-DELETED-ID-SET", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_changed_managed_objects", "SNAPSHOT-CHANGED-MANAGED-OBJECTS", 6, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_new_managed_objects", "SNAPSHOT-NEW-MANAGED-OBJECTS", 6, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_managed_object_simple_complex_index", "SNAPSHOT-MANAGED-OBJECT-SIMPLE-COMPLEX-INDEX", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_managed_object_simple_index", "SNAPSHOT-MANAGED-OBJECT-SIMPLE-INDEX", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_deleted_object_tombstones", "SNAPSHOT-DELETED-OBJECT-TOMBSTONES", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "replicate_fv_dump_files", "REPLICATE-FV-DUMP-FILES", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "replicate_one_dump_file", "REPLICATE-ONE-DUMP-FILE", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "replicate_one_index_file", "REPLICATE-ONE-INDEX-FILE", 5, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_dump_default_common_symbols", "KB-DUMP-DEFAULT-COMMON-SYMBOLS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_dump_common_symbols", "KB-DUMP-COMMON-SYMBOLS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_special_objects", "DUMP-SPECIAL-OBJECTS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_special_objects_internal", "DUMP-SPECIAL-OBJECTS-INTERNAL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_special_objects", "LOAD-SPECIAL-OBJECTS", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_product_shared_symbols", "LOAD-KB-PRODUCT-SHARED-SYMBOLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "setup_kb_state_from_dump", "SETUP-KB-STATE-FROM-DUMP", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_exclusive_constant_internal_id_limit_for_kb", "GET-EXCLUSIVE-CONSTANT-INTERNAL-ID-LIMIT-FOR-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_constant_shells", "DUMP-CONSTANT-SHELLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_constant_shells_int", "DUMP-CONSTANT-SHELLS-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_constant_shells", "SNAPSHOT-CONSTANT-SHELLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_deleted_constant_set", "SNAPSHOT-DELETED-CONSTANT-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "has_deleted_constant_id_setP", "HAS-DELETED-CONSTANT-ID-SET?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_constant_count", "LOAD-CONSTANT-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_constant_shells", "LOAD-CONSTANT-SHELLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "debug_map_constant_shell_file_position_to_constant_id", "DEBUG-MAP-CONSTANT-SHELL-FILE-POSITION-TO-CONSTANT-ID", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_constant_shell", "DUMP-CONSTANT-SHELL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_constant_shell_internal", "DUMP-CONSTANT-SHELL-INTERNAL", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_constant_shell", "LOAD-CONSTANT-SHELL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_constant_shell_internal", "LOAD-CONSTANT-SHELL-INTERNAL", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "generate_constant_shell_file", "GENERATE-CONSTANT-SHELL-FILE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_exclusive_nart_internal_id_limit_for_kb", "GET-EXCLUSIVE-NART-INTERNAL-ID-LIMIT-FOR-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_nart_count", "DUMP-NART-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_nart_count", "SNAPSHOT-NART-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_deleted_nart_id_set", "SNAPSHOT-DELETED-NART-ID-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_nart_shells", "LOAD-NART-SHELLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_nart_count", "LOAD-NART-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_deleted_nart_id_set", "LOAD-DELETED-NART-ID-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "has_deleted_nart_id_setP", "HAS-DELETED-NART-ID-SET?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "initialize_nart_shells", "INITIALIZE-NART-SHELLS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_nart_shells_legacy", "LOAD-NART-SHELLS-LEGACY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_nart_shell", "DUMP-NART-SHELL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_nart_shell", "LOAD-NART-SHELL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_exclusive_assertion_internal_id_limit_for_kb", "GET-EXCLUSIVE-ASSERTION-INTERNAL-ID-LIMIT-FOR-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_assertion_count", "DUMP-ASSERTION-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_assertion_count", "SNAPSHOT-ASSERTION-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_deleted_assertion_id_set", "SNAPSHOT-DELETED-ASSERTION-ID-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_assertion_shells", "LOAD-ASSERTION-SHELLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_assertion_count", "LOAD-ASSERTION-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_deleted_assertion_id_set", "LOAD-DELETED-ASSERTION-ID-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "has_deleted_assertion_id_setP", "HAS-DELETED-ASSERTION-ID-SET?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "initialize_assertion_shells", "INITIALIZE-ASSERTION-SHELLS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_assertion_shells_legacy", "LOAD-ASSERTION-SHELLS-LEGACY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_assertion_shell", "DUMP-ASSERTION-SHELL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_assertion_shell", "LOAD-ASSERTION-SHELL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_exclusive_kb_hl_support_internal_id_limit_for_kb", "GET-EXCLUSIVE-KB-HL-SUPPORT-INTERNAL-ID-LIMIT-FOR-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_hl_support_count", "DUMP-KB-HL-SUPPORT-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_kb_hl_support_count", "SNAPSHOT-KB-HL-SUPPORT-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_deleted_kb_hl_support_id_set", "SNAPSHOT-DELETED-KB-HL-SUPPORT-ID-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_hl_support_shells", "LOAD-KB-HL-SUPPORT-SHELLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_hl_support_count", "LOAD-KB-HL-SUPPORT-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_deleted_kb_hl_support_id_set", "LOAD-DELETED-KB-HL-SUPPORT-ID-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "has_deleted_kb_hl_support_id_setP", "HAS-DELETED-KB-HL-SUPPORT-ID-SET?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "initialize_kb_hl_support_shells", "INITIALIZE-KB-HL-SUPPORT-SHELLS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_hl_support_shells_legacy", "LOAD-KB-HL-SUPPORT-SHELLS-LEGACY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_hl_support_shell", "DUMP-KB-HL-SUPPORT-SHELL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_hl_support_shell", "LOAD-KB-HL-SUPPORT-SHELL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_exclusive_kb_unrepresented_term_internal_id_limit_for_kb", "GET-EXCLUSIVE-KB-UNREPRESENTED-TERM-INTERNAL-ID-LIMIT-FOR-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_unrepresented_terms", "DUMP-KB-UNREPRESENTED-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_unrepresented_terms_int", "DUMP-KB-UNREPRESENTED-TERMS-INT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_kb_unrepresented_terms", "SNAPSHOT-KB-UNREPRESENTED-TERMS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_unrepresented_terms", "LOAD-KB-UNREPRESENTED-TERMS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_unrepresented_term", "DUMP-KB-UNREPRESENTED-TERM", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_unrepresented_term", "LOAD-KB-UNREPRESENTED-TERM", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_unrepresented_term_count", "LOAD-KB-UNREPRESENTED-TERM-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_exclusive_clause_struc_internal_id_limit_for_kb", "GET-EXCLUSIVE-CLAUSE-STRUC-INTERNAL-ID-LIMIT-FOR-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_clause_struc_defs", "DUMP-CLAUSE-STRUC-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_clause_struc_defs_internal", "DUMP-CLAUSE-STRUC-DEFS-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_deleted_clause_struc_id_set", "SNAPSHOT-DELETED-CLAUSE-STRUC-ID-SET", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_clause_struc_defs", "SNAPSHOT-CLAUSE-STRUC-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_deleted_clause_struc_id_set", "LOAD-DELETED-CLAUSE-STRUC-ID-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "has_deleted_clause_struc_id_setP", "HAS-DELETED-CLAUSE-STRUC-ID-SET?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_clause_struc_defs", "LOAD-CLAUSE-STRUC-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_clause_struc_def", "DUMP-CLAUSE-STRUC-DEF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_clause_struc_def", "LOAD-CLAUSE-STRUC-DEF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_clause_struc_count", "LOAD-CLAUSE-STRUC-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "possibly_persist_wide_fvector_mark", "POSSIBLY-PERSIST-WIDE-FVECTOR-MARK", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_exclusive_deduction_internal_id_limit_for_kb", "GET-EXCLUSIVE-DEDUCTION-INTERNAL-ID-LIMIT-FOR-KB", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_deduction_count", "SNAPSHOT-DEDUCTION-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_deduction_defs", "DUMP-DEDUCTION-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_deduction_defs", "SNAPSHOT-DEDUCTION-DEFS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_deduction_defs_internal", "SNAPSHOT-DEDUCTION-DEFS-INTERNAL", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_deduction_defs", "LOAD-DEDUCTION-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_deduction_def", "DUMP-DEDUCTION-DEF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_deleted_deduction_id_set", "SNAPSHOT-DELETED-DEDUCTION-ID-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_deduction_def", "LOAD-DEDUCTION-DEF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_deduction_def_from_cache", "LOAD-DEDUCTION-DEF-FROM-CACHE", 2, 0, false);
        new $load_deduction_def_from_cache$BinaryFunction();
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_deduction_count", "LOAD-DEDUCTION-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_deleted_deduction_id_set", "LOAD-DELETED-DEDUCTION-ID-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "has_deleted_deduction_id_setP", "HAS-DELETED-DEDUCTION-ID-SET?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_assertion_defs", "DUMP-ASSERTION-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_assertion_defs", "SNAPSHOT-ASSERTION-DEFS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_assertion_defs_internal", "SNAPSHOT-ASSERTION-DEFS-INTERNAL", 2, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_assertion_defs", "LOAD-ASSERTION-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_assertion_def", "DUMP-ASSERTION-DEF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_assertion_def", "SNAPSHOT-ASSERTION-DEF", 3, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_assertion_def", "LOAD-ASSERTION-DEF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_assertion_def_from_cache", "LOAD-ASSERTION-DEF-FROM-CACHE", 2, 0, false);
        new $load_assertion_def_from_cache$BinaryFunction();
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_hl_support_defs", "DUMP-KB-HL-SUPPORT-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_kb_hl_support_defs", "SNAPSHOT-KB-HL-SUPPORT-DEFS", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_hl_support_defs", "LOAD-KB-HL-SUPPORT-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_hl_support_def", "DUMP-KB-HL-SUPPORT-DEF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_hl_support_def", "LOAD-KB-HL-SUPPORT-DEF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_hl_support_def_from_cache", "LOAD-KB-HL-SUPPORT-DEF-FROM-CACHE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_hl_support_indexing", "DUMP-KB-HL-SUPPORT-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_hl_support_indexing", "LOAD-KB-HL-SUPPORT-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_bookkeeping_assertions", "DUMP-BOOKKEEPING-ASSERTIONS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_bookkeeping_assertions_for_pred", "DUMP-BOOKKEEPING-ASSERTIONS-FOR-PRED", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_bookkeeping_assertion", "DUMP-BOOKKEEPING-ASSERTION", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_bookkeeping_assertions", "LOAD-BOOKKEEPING-ASSERTIONS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_bookkeeping_assertions_for_pred", "LOAD-BOOKKEEPING-ASSERTIONS-FOR-PRED", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_bookkeeping_assertion", "LOAD-BOOKKEEPING-ASSERTION", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_experience", "DUMP-EXPERIENCE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_rule_utility_experience", "DUMP-RULE-UTILITY-EXPERIENCE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_experience", "LOAD-EXPERIENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_rule_utility_experience", "LOAD-RULE-UTILITY-EXPERIENCE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "reload_experience", "RELOAD-EXPERIENCE", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "new_niniveh_index_iterator", "NEW-NINIVEH-INDEX-ITERATOR", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "construct_niniveh_iterator_state", "CONSTRUCT-NINIVEH-ITERATOR-STATE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "niniveh_index_iterator_doneP", "NINIVEH-INDEX-ITERATOR-DONE?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "niniveh_index_iterator_next", "NINIVEH-INDEX-ITERATOR-NEXT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "niniveh_index_iterator_finalize", "NINIVEH-INDEX-ITERATOR-FINALIZE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_indexing", "DUMP-KB-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_kb_indexing", "SNAPSHOT-KB-INDEXING", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_indexing", "LOAD-KB-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_assertion_indexing", "LOAD-KB-ASSERTION-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_kb_indexing", "REBUILD-KB-INDEXING", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "test_dump_kb_indexing", "TEST-DUMP-KB-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "test_load_kb_indexing", "TEST-LOAD-KB-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "index_writer_print_function_trampoline", "INDEX-WRITER-PRINT-FUNCTION-TRAMPOLINE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "index_writer_p", "INDEX-WRITER-P", 1, 0, false);
        new $index_writer_p$UnaryFunction();
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "idxwriter_directory", "IDXWRITER-DIRECTORY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "idxwriter_fvector", "IDXWRITER-FVECTOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "idxwriter_index_file", "IDXWRITER-INDEX-FILE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "idxwriter_index_label", "IDXWRITER-INDEX-LABEL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "idxwriter_complex_fvector", "IDXWRITER-COMPLEX-FVECTOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "idxwriter_complex_index_file", "IDXWRITER-COMPLEX-INDEX-FILE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "idxwriter_complex_index_label", "IDXWRITER-COMPLEX-INDEX-LABEL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "idxwriter_dump_fn", "IDXWRITER-DUMP-FN", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "_csetf_idxwriter_directory", "_CSETF-IDXWRITER-DIRECTORY", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "_csetf_idxwriter_fvector", "_CSETF-IDXWRITER-FVECTOR", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "_csetf_idxwriter_index_file", "_CSETF-IDXWRITER-INDEX-FILE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "_csetf_idxwriter_index_label", "_CSETF-IDXWRITER-INDEX-LABEL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "_csetf_idxwriter_complex_fvector", "_CSETF-IDXWRITER-COMPLEX-FVECTOR", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "_csetf_idxwriter_complex_index_file", "_CSETF-IDXWRITER-COMPLEX-INDEX-FILE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "_csetf_idxwriter_complex_index_label", "_CSETF-IDXWRITER-COMPLEX-INDEX-LABEL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "_csetf_idxwriter_dump_fn", "_CSETF-IDXWRITER-DUMP-FN", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "make_index_writer", "MAKE-INDEX-WRITER", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "visit_defstruct_index_writer", "VISIT-DEFSTRUCT-INDEX-WRITER", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "visit_defstruct_object_index_writer_method", "VISIT-DEFSTRUCT-OBJECT-INDEX-WRITER-METHOD", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "new_index_writer", "NEW-INDEX-WRITER", 8, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "index_writer_put_index_entry", "INDEX-WRITER-PUT-INDEX-ENTRY", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "close_index_writer", "CLOSE-INDEX-WRITER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "new_constant_indices_writer", "NEW-CONSTANT-INDICES-WRITER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_constant_indices", "DUMP-CONSTANT-INDICES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_constant_indices", "SNAPSHOT-CONSTANT-INDICES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_constant_indices_internal", "SNAPSHOT-CONSTANT-INDICES-INTERNAL", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "new_niniveh_constant_indices_iterator", "NEW-NINIVEH-CONSTANT-INDICES-ITERATOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_constant_indices", "LOAD-CONSTANT-INDICES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_constant_index", "DUMP-CONSTANT-INDEX", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_top_level_index_of_type", "DUMP-TOP-LEVEL-INDEX-OF-TYPE", 7, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_constant_index", "SNAPSHOT-CONSTANT-INDEX", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_constant_index", "LOAD-CONSTANT-INDEX", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_constant_index_from_cache", "LOAD-CONSTANT-INDEX-FROM-CACHE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "new_nart_indices_writer", "NEW-NART-INDICES-WRITER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_nart_indices", "DUMP-NART-INDICES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_nart_indices", "SNAPSHOT-NART-INDICES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_nart_indices_internal", "SNAPSHOT-NART-INDICES-INTERNAL", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "new_niniveh_nart_indices_iterator", "NEW-NINIVEH-NART-INDICES-ITERATOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_nart_indices", "LOAD-NART-INDICES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_nart_index", "DUMP-NART-INDEX", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_nart_index", "SNAPSHOT-NART-INDEX", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_nart_index", "LOAD-NART-INDEX", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_nart_index_from_cache", "LOAD-NART-INDEX-FROM-CACHE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "new_unrepresented_term_indices_writer", "NEW-UNREPRESENTED-TERM-INDICES-WRITER", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_unrepresented_term_indices", "DUMP-UNREPRESENTED-TERM-INDICES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_unrepresented_term_indices", "SNAPSHOT-UNREPRESENTED-TERM-INDICES", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_unrepresented_term_indices_internal", "SNAPSHOT-UNREPRESENTED-TERM-INDICES-INTERNAL", 2, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "new_niniveh_unrepresented_term_indices_iterator", "NEW-NINIVEH-UNREPRESENTED-TERM-INDICES-ITERATOR", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_unrepresented_term_indices", "LOAD-UNREPRESENTED-TERM-INDICES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_unrepresented_term_index", "DUMP-UNREPRESENTED-TERM-INDEX", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_unrepresented_term_index", "SNAPSHOT-UNREPRESENTED-TERM-INDEX", 4, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_unrepresented_term_index", "LOAD-UNREPRESENTED-TERM-INDEX", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_unrepresented_term_index_from_cache", "LOAD-UNREPRESENTED-TERM-INDEX-FROM-CACHE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_assertion_indices", "DUMP-ASSERTION-INDICES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_assertion_indices", "LOAD-ASSERTION-INDICES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "replicate_meta_assertion_indexing", "REPLICATE-META-ASSERTION-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_assertion_index", "DUMP-ASSERTION-INDEX", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_assertion_index", "LOAD-ASSERTION-INDEX", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_auxiliary_indices_file", "DUMP-AUXILIARY-INDICES-FILE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_auxiliary_indices_file", "LOAD-AUXILIARY-INDICES-FILE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "replicate_auxiliary_assertion_indexing", "REPLICATE-AUXILIARY-ASSERTION-INDEXING", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_bookkeeping_indices_file", "DUMP-BOOKKEEPING-INDICES-FILE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_bookkeeping_indices_file", "LOAD-BOOKKEEPING-INDICES-FILE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_bookkeeping_indices", "DUMP-BOOKKEEPING-INDICES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_bookkeeping_indices", "LOAD-BOOKKEEPING-INDICES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_rule_set", "DUMP-RULE-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_rule_set", "LOAD-RULE-SET", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_non_true_assertion_tv_cache", "DUMP-NON-TRUE-ASSERTION-TV-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_non_true_assertion_tv_cache", "LOAD-NON-TRUE-ASSERTION-TV-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_nart_hl_formulas", "DUMP-NART-HL-FORMULAS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "snapshot_nart_hl_formulas", "SNAPSHOT-NART-HL-FORMULAS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_nart_hl_formulas", "LOAD-NART-HL-FORMULAS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_nart_hl_formula", "DUMP-NART-HL-FORMULA", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_nart_hl_formula", "LOAD-NART-HL-FORMULA", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_nart_hl_formula_from_cache", "LOAD-NART-HL-FORMULA-FROM-CACHE", 2, 0, false);
        new $load_nart_hl_formula_from_cache$BinaryFunction();
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_miscellaneous", "DUMP-MISCELLANEOUS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_miscellaneous", "LOAD-MISCELLANEOUS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_sbhl_data", "DUMP-SBHL-DATA", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_sbhl_data", "LOAD-SBHL-DATA", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_sbhl_data", "REBUILD-SBHL-DATA", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "recompute_missing_sbhl_graphs", "RECOMPUTE-MISSING-SBHL-GRAPHS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_sbhl_miscellany", "DUMP-SBHL-MISCELLANY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_isa_arg2_naut_table", "DUMP-ISA-ARG2-NAUT-TABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_non_fort_isa_table", "DUMP-NON-FORT-ISA-TABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_non_fort_instance_table", "DUMP-NON-FORT-INSTANCE-TABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_sbhl_miscellany", "LOAD-SBHL-MISCELLANY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_isa_arg2_naut_table", "LOAD-ISA-ARG2-NAUT-TABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_non_fort_isa_table", "LOAD-NON-FORT-ISA-TABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_non_fort_instance_table", "LOAD-NON-FORT-INSTANCE-TABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_sbhl_cache", "DUMP-SBHL-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_sbhl_cache", "LOAD-SBHL-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_sbhl_cache", "REBUILD-SBHL-CACHE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_cardinality_estimates", "DUMP-CARDINALITY-ESTIMATES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_cardinality_estimates", "LOAD-CARDINALITY-ESTIMATES", 1, 0, false);
        SubLFiles.declareMacro("com.cyc.cycjava.cycl.dumper", "not_computing_arg_type_cache", "NOT-COMPUTING-ARG-TYPE-CACHE");
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_arg_type_cache", "DUMP-ARG-TYPE-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_arg_type_cache", "LOAD-ARG-TYPE-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_arg_type_cache", "REBUILD-ARG-TYPE-CACHE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_defns_cache", "DUMP-DEFNS-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_defns_cache", "LOAD-DEFNS-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_rule_connectivity_graph", "DUMP-RULE-CONNECTIVITY-GRAPH", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_rule_connectivity_graph", "LOAD-RULE-CONNECTIVITY-GRAPH", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_tva_cache", "DUMP-TVA-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_tva_cache", "LOAD-TVA-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_reformulator_rules", "DUMP-REFORMULATOR-RULES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_reformulator_rules", "LOAD-REFORMULATOR-RULES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_english_units_of_measure", "DUMP-ENGLISH-UNITS-OF-MEASURE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_english_units_of_measure", "LOAD-ENGLISH-UNITS-OF-MEASURE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_cae_query_search_tables", "DUMP-CAE-QUERY-SEARCH-TABLES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_cae_query_search_tables", "LOAD-CAE-QUERY-SEARCH-TABLES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_sbhl_time_state", "DUMP-SBHL-TIME-STATE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_sbhl_time_state", "LOAD-SBHL-TIME-STATE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_sbhl_time_data", "REBUILD-SBHL-TIME-DATA", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_rtp_rules_cache", "DUMP-RTP-RULES-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_rtp_rules_cache", "LOAD-RTP-RULES-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_somewhere_cache", "DUMP-SOMEWHERE-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_somewhere_cache", "LOAD-SOMEWHERE-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_arity_cache", "DUMP-ARITY-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_arity_cache", "LOAD-ARITY-CACHE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_pph_phrase_shells", "DUMP-PPH-PHRASE-SHELLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_pph_phrase_shells", "LOAD-PPH-PHRASE-SHELLS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_pph_phrase_count", "LOAD-PPH-PHRASE-COUNT", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_pph_phrase_shell", "DUMP-PPH-PHRASE-SHELL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_pph_phrase_shell", "LOAD-PPH-PHRASE-SHELL", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_pph_phrase_defs", "DUMP-PPH-PHRASE-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_pph_phrase_defs", "LOAD-PPH-PHRASE-DEFS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_pph_phrase_def", "DUMP-PPH-PHRASE-DEF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_pph_phrase_def", "LOAD-PPH-PHRASE-DEF", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_gen_template_store", "DUMP-GEN-TEMPLATE-STORE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_gen_template_store", "LOAD-GEN-TEMPLATE-STORE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_pph_name_string_preds", "DUMP-PPH-NAME-STRING-PREDS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_pph_phrase_fns", "DUMP-PPH-PHRASE-FNS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_pph_phrase_fns", "LOAD-PPH-PHRASE-FNS", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_paraphrase_cycl_caches", "DUMP-PARAPHRASE-CYCL-CACHES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_pph_phrases", "REBUILD-PPH-PHRASES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_paraphrase_cycl_caches", "LOAD-PARAPHRASE-CYCL-CACHES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_kb_activities", "DUMP-KB-ACTIVITIES", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_kb_initializations", "LOAD-KB-INITIALIZATIONS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "initialize_kb_features", "INITIALIZE-KB-FEATURES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "show_kb_features", "SHOW-KB-FEATURES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_essential_kb_evaluatable", "DUMP-ESSENTIAL-KB-EVALUATABLE", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_essential_kb_evaluatable_file", "LOAD-ESSENTIAL-KB-EVALUATABLE-FILE", 9, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_essential_kb_evaluatable", "LOAD-ESSENTIAL-KB-EVALUATABLE", 1, 7, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_alexandria_computable_kb", "REBUILD-ALEXANDRIA-COMPUTABLE-KB", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_alexandria_computable_kb_from_directory", "LOAD-ALEXANDRIA-COMPUTABLE-KB-FROM-DIRECTORY", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_alexandria_units", "DUMP-ALEXANDRIA-UNITS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "load_rebuild_and_dump_alexandria_computable_kb", "LOAD-REBUILD-AND-DUMP-ALEXANDRIA-COMPUTABLE-KB", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "rebuild_and_dump_alexandria_computable_kb", "REBUILD-AND-DUMP-ALEXANDRIA-COMPUTABLE-KB", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "count_forms_in_file", "COUNT-FORMS-IN-FILE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "read_and_eval_evaluatable_dump_file", "READ-AND-EVAL-EVALUATABLE-DUMP-FILE", 1, 3, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "eval_test_operation", "EVAL-TEST-OPERATION", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "read_and_eval_test_file", "READ-AND-EVAL-TEST-FILE", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_essential_kb_constants_evaluatable", "DUMP-ESSENTIAL-KB-CONSTANTS-EVALUATABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_essential_kb_narts_evaluatable", "DUMP-ESSENTIAL-KB-NARTS-EVALUATABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_assertionP", "EXPORTABLE-ASSERTION?", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "clear_exportable_mtP", "CLEAR-EXPORTABLE-MT?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "remove_exportable_mtP", "REMOVE-EXPORTABLE-MT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_mtP_internal", "EXPORTABLE-MT?-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_mtP", "EXPORTABLE-MT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_deduction_supportsP", "EXPORTABLE-DEDUCTION-SUPPORTS?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "clear_exportable_deduction_supportP", "CLEAR-EXPORTABLE-DEDUCTION-SUPPORT?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "remove_exportable_deduction_supportP", "REMOVE-EXPORTABLE-DEDUCTION-SUPPORT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_deduction_supportP_internal", "EXPORTABLE-DEDUCTION-SUPPORT?-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_deduction_supportP", "EXPORTABLE-DEDUCTION-SUPPORT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "clear_exportable_deduction_supported_objectP", "CLEAR-EXPORTABLE-DEDUCTION-SUPPORTED-OBJECT?", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "remove_exportable_deduction_supported_objectP", "REMOVE-EXPORTABLE-DEDUCTION-SUPPORTED-OBJECT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_deduction_supported_objectP_internal", "EXPORTABLE-DEDUCTION-SUPPORTED-OBJECT?-INTERNAL", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_deduction_supported_objectP", "EXPORTABLE-DEDUCTION-SUPPORTED-OBJECT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_deductionP", "EXPORTABLE-DEDUCTION?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_kb_hl_supportP", "EXPORTABLE-KB-HL-SUPPORT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "exportable_hl_supportP", "EXPORTABLE-HL-SUPPORT?", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "clear_evaluatable_export_caches", "CLEAR-EVALUATABLE-EXPORT-CACHES", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_essential_kb_assertions_evaluatable", "DUMP-ESSENTIAL-KB-ASSERTIONS-EVALUATABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_essential_kb_kb_hl_supports_evaluatable", "DUMP-ESSENTIAL-KB-KB-HL-SUPPORTS-EVALUATABLE", 2, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_essential_kb_deductions_evaluatable_in_parts", "DUMP-ESSENTIAL-KB-DEDUCTIONS-EVALUATABLE-IN-PARTS", 3, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_essential_kb_deductions_evaluatable", "DUMP-ESSENTIAL-KB-DEDUCTIONS-EVALUATABLE", 1, 2, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "dump_essential_kb_bookkeeping_gafs_evaluatable", "DUMP-ESSENTIAL-KB-BOOKKEEPING-GAFS-EVALUATABLE", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "nart_depth_internal", "NART-DEPTH-INTERNAL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "nart_depth", "NART-DEPTH", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_hl_support_depth_internal", "KB-HL-SUPPORT-DEPTH-INTERNAL", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "kb_hl_support_depth", "KB-HL-SUPPORT-DEPTH", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "test_that_all_narts_are_findable", "TEST-THAT-ALL-NARTS-ARE-FINDABLE", 0, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "test_that_all_assertions_are_findable", "TEST-THAT-ALL-ASSERTIONS-ARE-FINDABLE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "test_that_all_deductions_are_findable", "TEST-THAT-ALL-DEDUCTIONS-ARE-FINDABLE", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "fix_bad_narts", "FIX-BAD-NARTS", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "fix_bad_nart", "FIX-BAD-NART", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_robust_nart_removal_form", "GET-ROBUST-NART-REMOVAL-FORM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "get_robust_assertion_removal_form", "GET-ROBUST-ASSERTION-REMOVAL-FORM", 1, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "fix_bad_assertion", "FIX-BAD-ASSERTION", 1, 1, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "find_assertion_with_kb_hl_support_deduction_dependent", "FIND-ASSERTION-WITH-KB-HL-SUPPORT-DEDUCTION-DEPENDENT", 0, 0, false);
        SubLFiles.declareFunction("com.cyc.cycjava.cycl.dumper", "find_complex_cnf", "FIND-COMPLEX-CNF", 0, 0, false);
        return (SubLObject)dumper.NIL;
    }

    public static SubLObject init_dumper_file() {
        dumper.$force_monolithic_kb_assumption$ = SubLFiles.deflexical("*FORCE-MONOLITHIC-KB-ASSUMPTION*", (SubLObject)((dumper.NIL != Symbols.boundp((SubLObject)dumper.$sym0$_FORCE_MONOLITHIC_KB_ASSUMPTION_)) ? dumper.$force_monolithic_kb_assumption$.getGlobalValue() : dumper.NIL));
        dumper.$separate_file_for_complex_indexingP$ = SubLFiles.defparameter("*SEPARATE-FILE-FOR-COMPLEX-INDEXING?*", (SubLObject)dumper.T);
        dumper.$default_dump_path$ = SubLFiles.defparameter("*DEFAULT-DUMP-PATH*", (SubLObject)dumper.$list30);
        dumper.$default_dump_extension$ = SubLFiles.defparameter("*DEFAULT-DUMP-EXTENSION*", (SubLObject)dumper.$str31$cfasl);
        dumper.$default_dump_product_extension$ = SubLFiles.defparameter("*DEFAULT-DUMP-PRODUCT-EXTENSION*", (SubLObject)dumper.$str32$fht);
        dumper.$kb_dump_fvector_wide_mark_tag$ = SubLFiles.deflexical("*KB-DUMP-FVECTOR-WIDE-MARK-TAG*", (SubLObject)dumper.$str33$_wide_mark);
        dumper.$dump_bytes_per_assertion$ = SubLFiles.deflexical("*DUMP-BYTES-PER-ASSERTION*", (SubLObject)dumper.$int34$192);
        dumper.$dump_verify$ = SubLFiles.defparameter("*DUMP-VERIFY*", (SubLObject)dumper.T);
        dumper.$kb_load_gc_checkpoints_enabledP$ = SubLFiles.defparameter("*KB-LOAD-GC-CHECKPOINTS-ENABLED?*", (SubLObject)dumper.NIL);
        dumper.$perform_standard_pre_dump_kb_cleanups_completeP$ = SubLFiles.defparameter("*PERFORM-STANDARD-PRE-DUMP-KB-CLEANUPS-COMPLETE?*", (SubLObject)dumper.T);
        dumper.$assertion_tile_size$ = SubLFiles.deflexical("*ASSERTION-TILE-SIZE*", (SubLObject)dumper.$int59$1000000);
        dumper.$dump_verbose$ = SubLFiles.defparameter("*DUMP-VERBOSE*", (SubLObject)dumper.T);
        dumper.$dump_verbose_detail$ = SubLFiles.defparameter("*DUMP-VERBOSE-DETAIL*", (SubLObject)dumper.NIL);
        dumper.$auto_increment_kb_number_on_dumpP$ = SubLFiles.defparameter("*AUTO-INCREMENT-KB-NUMBER-ON-DUMP?*", (SubLObject)dumper.T);
        dumper.$snapshot_tombstoning_mode$ = SubLFiles.defparameter("*SNAPSHOT-TOMBSTONING-MODE*", (SubLObject)dumper.$kw108$MINIMAL);
        dumper.$kb_manifest$ = SubLFiles.deflexical("*KB-MANIFEST*", (SubLObject)((dumper.NIL != Symbols.boundp((SubLObject)dumper.$sym146$_KB_MANIFEST_)) ? dumper.$kb_manifest$.getGlobalValue() : dumper.NIL));
        dumper.$kb_units_fvector_descriptions$ = SubLFiles.deflexical("*KB-UNITS-FVECTOR-DESCRIPTIONS*", (SubLObject)ConsesLow.list(describe_knowledge_fvector_files((SubLObject)dumper.$str168$assertion), describe_knowledge_fvector_files((SubLObject)dumper.$str169$deduction), describe_knowledge_fvector_files((SubLObject)dumper.$str170$kb_hl_support), describe_knowledge_fvector_files((SubLObject)dumper.$str171$nart_hl_formula), describe_index_fvector_files((SubLObject)dumper.$str158$constant), describe_index_fvector_files((SubLObject)dumper.$str172$nat), describe_index_fvector_files((SubLObject)dumper.$str173$unrepresented_term)));
        dumper.$kb_dump_default_common_symbols$ = SubLFiles.deflexical("*KB-DUMP-DEFAULT-COMMON-SYMBOLS*", (SubLObject)dumper.$list258);
        dumper.$kb_dump_common_symbols$ = SubLFiles.defparameter("*KB-DUMP-COMMON-SYMBOLS*", dumper.$kb_dump_default_common_symbols$.getGlobalValue());
        dumper.$dtp_index_writer$ = SubLFiles.defconstant("*DTP-INDEX-WRITER*", (SubLObject)dumper.$sym381$INDEX_WRITER);
        dumper.$compute_arg_type_cache_on_dumpP$ = SubLFiles.defparameter("*COMPUTE-ARG-TYPE-CACHE-ON-DUMP?*", (SubLObject)dumper.T);
        dumper.$cyc_alexandria_defns_dump_load_supportedP$ = SubLFiles.deflexical("*CYC-ALEXANDRIA-DEFNS-DUMP-LOAD-SUPPORTED?*", (SubLObject)((dumper.NIL != Symbols.boundp((SubLObject)dumper.$sym556$_CYC_ALEXANDRIA_DEFNS_DUMP_LOAD_SUPPORTED__)) ? dumper.$cyc_alexandria_defns_dump_load_supportedP$.getGlobalValue() : dumper.NIL));
        dumper.$bootstrapping_constantsP$ = SubLFiles.defparameter("BOOTSTRAPPING-CONSTANTS?", (SubLObject)dumper.NIL);
        dumper.$bootstrapping_nartsP$ = SubLFiles.defparameter("BOOTSTRAPPING-NARTS?", (SubLObject)dumper.NIL);
        dumper.$bootstrapping_assertionsP$ = SubLFiles.defparameter("BOOTSTRAPPING-ASSERTIONS?", (SubLObject)dumper.NIL);
        dumper.$bootstrapping_kb_hl_supportsP$ = SubLFiles.defparameter("BOOTSTRAPPING-KB-HL-SUPPORTS?", (SubLObject)dumper.NIL);
        dumper.$bootstrapping_deductionsP$ = SubLFiles.defparameter("BOOTSTRAPPING-DEDUCTIONS?", (SubLObject)dumper.NIL);
        dumper.$bootstrapping_bookkeeping_gafsP$ = SubLFiles.defparameter("BOOTSTRAPPING-BOOKKEEPING-GAFS?", (SubLObject)dumper.NIL);
        dumper.$essential_kb_evaluatable_file_type$ = SubLFiles.deflexical("ESSENTIAL-KB-EVALUATABLE-FILE-TYPE", (SubLObject)((dumper.NIL != Symbols.boundp((SubLObject)dumper.$sym637$ESSENTIAL_KB_EVALUATABLE_FILE_TYPE)) ? dumper.$essential_kb_evaluatable_file_type$.getGlobalValue() : dumper.$list638));
        dumper.$dump_invalid_constants$ = SubLFiles.deflexical("*DUMP-INVALID-CONSTANTS*", (dumper.NIL != Symbols.boundp((SubLObject)dumper.$sym670$_DUMP_INVALID_CONSTANTS_)) ? dumper.$dump_invalid_constants$.getGlobalValue() : set.new_set(Symbols.symbol_function((SubLObject)dumper.EQL), (SubLObject)dumper.ZERO_INTEGER));
        dumper.$dump_invalid_narts$ = SubLFiles.deflexical("*DUMP-INVALID-NARTS*", (dumper.NIL != Symbols.boundp((SubLObject)dumper.$sym671$_DUMP_INVALID_NARTS_)) ? dumper.$dump_invalid_narts$.getGlobalValue() : set.new_set(Symbols.symbol_function((SubLObject)dumper.EQL), (SubLObject)dumper.ZERO_INTEGER));
        dumper.$dump_invalid_assertions$ = SubLFiles.deflexical("*DUMP-INVALID-ASSERTIONS*", (dumper.NIL != Symbols.boundp((SubLObject)dumper.$sym672$_DUMP_INVALID_ASSERTIONS_)) ? dumper.$dump_invalid_assertions$.getGlobalValue() : set.new_set(Symbols.symbol_function((SubLObject)dumper.EQL), (SubLObject)dumper.ZERO_INTEGER));
        dumper.$dump_invalid_kb_hl_supports$ = SubLFiles.deflexical("*DUMP-INVALID-KB-HL-SUPPORTS*", (dumper.NIL != Symbols.boundp((SubLObject)dumper.$sym673$_DUMP_INVALID_KB_HL_SUPPORTS_)) ? dumper.$dump_invalid_kb_hl_supports$.getGlobalValue() : set.new_set(Symbols.symbol_function((SubLObject)dumper.EQL), (SubLObject)dumper.ZERO_INTEGER));
        dumper.$dump_invalid_deductions$ = SubLFiles.deflexical("*DUMP-INVALID-DEDUCTIONS*", (dumper.NIL != Symbols.boundp((SubLObject)dumper.$sym674$_DUMP_INVALID_DEDUCTIONS_)) ? dumper.$dump_invalid_deductions$.getGlobalValue() : set.new_set(Symbols.symbol_function((SubLObject)dumper.EQL), (SubLObject)dumper.ZERO_INTEGER));
        dumper.$dump_invalid_bookkeeping_gafs$ = SubLFiles.deflexical("*DUMP-INVALID-BOOKKEEPING-GAFS*", (dumper.NIL != Symbols.boundp((SubLObject)dumper.$sym675$_DUMP_INVALID_BOOKKEEPING_GAFS_)) ? dumper.$dump_invalid_bookkeeping_gafs$.getGlobalValue() : set.new_set(Symbols.symbol_function((SubLObject)dumper.EQL), (SubLObject)dumper.ZERO_INTEGER));
        dumper.$exportable_mtP_caching_state$ = SubLFiles.deflexical("*EXPORTABLE-MT?-CACHING-STATE*", (SubLObject)dumper.NIL);
        dumper.$exportable_deduction_supportP_caching_state$ = SubLFiles.deflexical("*EXPORTABLE-DEDUCTION-SUPPORT?-CACHING-STATE*", (SubLObject)dumper.NIL);
        dumper.$exportable_deduction_supported_objectP_caching_state$ = SubLFiles.deflexical("*EXPORTABLE-DEDUCTION-SUPPORTED-OBJECT?-CACHING-STATE*", (SubLObject)dumper.NIL);
        dumper.$current_dump_assertion$ = SubLFiles.defparameter("*CURRENT-DUMP-ASSERTION*", (SubLObject)dumper.NIL);
        dumper.$last_invalid_assertion$ = SubLFiles.defparameter("*LAST-INVALID-ASSERTION*", (SubLObject)dumper.NIL);
        return (SubLObject)dumper.NIL;
    }

    public static SubLObject setup_dumper_file() {
        subl_macro_promotions.declare_defglobal((SubLObject)dumper.$sym0$_FORCE_MONOLITHIC_KB_ASSUMPTION_);
        access_macros.register_external_symbol((SubLObject)dumper.$sym54$LOAD_NON_COMPUTABLE_KB_PLUS_REBUILD_AND_DUMP_COMPUTABLE_KB);
        access_macros.register_external_symbol((SubLObject)dumper.$sym55$REBUILD_AND_RECONNECT_COMPUTABLE_KB);
        access_macros.register_external_symbol((SubLObject)dumper.$sym58$_ASSERTION_TILE_SIZE_);
        access_macros.register_external_symbol((SubLObject)dumper.$sym91$CYC_DUMP_KB);
        access_macros.register_external_symbol((SubLObject)dumper.$sym97$CYC_DUMP_KB_UNSAFE);
        subl_macro_promotions.declare_defglobal((SubLObject)dumper.$sym146$_KB_MANIFEST_);
        access_macros.register_external_symbol((SubLObject)dumper.$sym174$GET_KB_UNITS_FILE_VECTOR_DESCRIPTIONS);
        access_macros.register_external_symbol((SubLObject)dumper.$sym175$GET_KB_UNITS_FILE_VECTOR_CATEGORIES);
        utilities_macros.note_funcall_helper_function((SubLObject)dumper.$sym329$LOAD_DEDUCTION_DEF_FROM_CACHE);
        utilities_macros.note_funcall_helper_function((SubLObject)dumper.$sym349$LOAD_ASSERTION_DEF_FROM_CACHE);
        utilities_macros.note_funcall_helper_function((SubLObject)dumper.$sym354$LOAD_KB_HL_SUPPORT_DEF_FROM_CACHE);
        Structures.register_method(print_high.$print_object_method_table$.getGlobalValue(), dumper.$dtp_index_writer$.getGlobalValue(), Symbols.symbol_function((SubLObject)dumper.$sym388$INDEX_WRITER_PRINT_FUNCTION_TRAMPOLINE));
        SubLSpecialOperatorDeclarations.proclaim((SubLObject)dumper.$list389);
        Structures.def_csetf((SubLObject)dumper.$sym390$IDXWRITER_DIRECTORY, (SubLObject)dumper.$sym391$_CSETF_IDXWRITER_DIRECTORY);
        Structures.def_csetf((SubLObject)dumper.$sym392$IDXWRITER_FVECTOR, (SubLObject)dumper.$sym393$_CSETF_IDXWRITER_FVECTOR);
        Structures.def_csetf((SubLObject)dumper.$sym394$IDXWRITER_INDEX_FILE, (SubLObject)dumper.$sym395$_CSETF_IDXWRITER_INDEX_FILE);
        Structures.def_csetf((SubLObject)dumper.$sym396$IDXWRITER_INDEX_LABEL, (SubLObject)dumper.$sym397$_CSETF_IDXWRITER_INDEX_LABEL);
        Structures.def_csetf((SubLObject)dumper.$sym398$IDXWRITER_COMPLEX_FVECTOR, (SubLObject)dumper.$sym399$_CSETF_IDXWRITER_COMPLEX_FVECTOR);
        Structures.def_csetf((SubLObject)dumper.$sym400$IDXWRITER_COMPLEX_INDEX_FILE, (SubLObject)dumper.$sym401$_CSETF_IDXWRITER_COMPLEX_INDEX_FILE);
        Structures.def_csetf((SubLObject)dumper.$sym402$IDXWRITER_COMPLEX_INDEX_LABEL, (SubLObject)dumper.$sym403$_CSETF_IDXWRITER_COMPLEX_INDEX_LABEL);
        Structures.def_csetf((SubLObject)dumper.$sym404$IDXWRITER_DUMP_FN, (SubLObject)dumper.$sym405$_CSETF_IDXWRITER_DUMP_FN);
        Equality.identity((SubLObject)dumper.$sym381$INDEX_WRITER);
        Structures.register_method(visitation.$visit_defstruct_object_method_table$.getGlobalValue(), dumper.$dtp_index_writer$.getGlobalValue(), Symbols.symbol_function((SubLObject)dumper.$sym415$VISIT_DEFSTRUCT_OBJECT_INDEX_WRITER_METHOD));
        utilities_macros.note_funcall_helper_function((SubLObject)dumper.$sym443$LOAD_CONSTANT_INDEX_FROM_CACHE);
        utilities_macros.note_funcall_helper_function((SubLObject)dumper.$sym472$LOAD_NART_INDEX_FROM_CACHE);
        utilities_macros.note_funcall_helper_function((SubLObject)dumper.$sym497$LOAD_UNREPRESENTED_TERM_INDEX_FROM_CACHE);
        subl_macro_promotions.declare_defglobal((SubLObject)dumper.$sym556$_CYC_ALEXANDRIA_DEFNS_DUMP_LOAD_SUPPORTED__);
        subl_macro_promotions.declare_defglobal((SubLObject)dumper.$sym637$ESSENTIAL_KB_EVALUATABLE_FILE_TYPE);
        subl_macro_promotions.declare_defglobal((SubLObject)dumper.$sym670$_DUMP_INVALID_CONSTANTS_);
        subl_macro_promotions.declare_defglobal((SubLObject)dumper.$sym671$_DUMP_INVALID_NARTS_);
        subl_macro_promotions.declare_defglobal((SubLObject)dumper.$sym672$_DUMP_INVALID_ASSERTIONS_);
        subl_macro_promotions.declare_defglobal((SubLObject)dumper.$sym673$_DUMP_INVALID_KB_HL_SUPPORTS_);
        subl_macro_promotions.declare_defglobal((SubLObject)dumper.$sym674$_DUMP_INVALID_DEDUCTIONS_);
        subl_macro_promotions.declare_defglobal((SubLObject)dumper.$sym675$_DUMP_INVALID_BOOKKEEPING_GAFS_);
        memoization_state.note_globally_cached_function((SubLObject)dumper.$sym683$EXPORTABLE_MT_);
        memoization_state.note_globally_cached_function((SubLObject)dumper.$sym686$EXPORTABLE_DEDUCTION_SUPPORT_);
        memoization_state.note_globally_cached_function((SubLObject)dumper.$sym689$EXPORTABLE_DEDUCTION_SUPPORTED_OBJECT_);
        return (SubLObject)dumper.NIL;
    }

    public void declareFunctions() {
        declare_dumper_file();
    }

    public void initializeVariables() {
        init_dumper_file();
    }

    public void runTopLevelForms() {
        setup_dumper_file();
    }

    static {
        me = (SubLFile)new dumper();
        dumper.$force_monolithic_kb_assumption$ = null;
        dumper.$separate_file_for_complex_indexingP$ = null;
        dumper.$default_dump_path$ = null;
        dumper.$default_dump_extension$ = null;
        dumper.$default_dump_product_extension$ = null;
        dumper.$kb_dump_fvector_wide_mark_tag$ = null;
        dumper.$dump_bytes_per_assertion$ = null;
        dumper.$dump_verify$ = null;
        dumper.$kb_load_gc_checkpoints_enabledP$ = null;
        dumper.$perform_standard_pre_dump_kb_cleanups_completeP$ = null;
        dumper.$assertion_tile_size$ = null;
        dumper.$dump_verbose$ = null;
        dumper.$dump_verbose_detail$ = null;
        dumper.$auto_increment_kb_number_on_dumpP$ = null;
        dumper.$snapshot_tombstoning_mode$ = null;
        dumper.$kb_manifest$ = null;
        dumper.$kb_units_fvector_descriptions$ = null;
        dumper.$kb_dump_default_common_symbols$ = null;
        dumper.$kb_dump_common_symbols$ = null;
        dumper.$dtp_index_writer$ = null;
        dumper.$compute_arg_type_cache_on_dumpP$ = null;
        dumper.$cyc_alexandria_defns_dump_load_supportedP$ = null;
        dumper.$bootstrapping_constantsP$ = null;
        dumper.$bootstrapping_nartsP$ = null;
        dumper.$bootstrapping_assertionsP$ = null;
        dumper.$bootstrapping_kb_hl_supportsP$ = null;
        dumper.$bootstrapping_deductionsP$ = null;
        dumper.$bootstrapping_bookkeeping_gafsP$ = null;
        dumper.$essential_kb_evaluatable_file_type$ = null;
        dumper.$dump_invalid_constants$ = null;
        dumper.$dump_invalid_narts$ = null;
        dumper.$dump_invalid_assertions$ = null;
        dumper.$dump_invalid_kb_hl_supports$ = null;
        dumper.$dump_invalid_deductions$ = null;
        dumper.$dump_invalid_bookkeeping_gafs$ = null;
        dumper.$exportable_mtP_caching_state$ = null;
        dumper.$exportable_deduction_supportP_caching_state$ = null;
        dumper.$exportable_deduction_supported_objectP_caching_state$ = null;
        dumper.$current_dump_assertion$ = null;
        dumper.$last_invalid_assertion$ = null;
        $sym0$_FORCE_MONOLITHIC_KB_ASSUMPTION_ = SubLObjectFactory.makeSymbol("*FORCE-MONOLITHIC-KB-ASSUMPTION*");
        $sym1$WITH_CONSTANT_DUMP_ID_TABLE = SubLObjectFactory.makeSymbol("WITH-CONSTANT-DUMP-ID-TABLE");
        $sym2$WITH_NART_DUMP_ID_TABLE = SubLObjectFactory.makeSymbol("WITH-NART-DUMP-ID-TABLE");
        $sym3$WITH_UNREPRESENTED_TERM_DUMP_ID_TABLE = SubLObjectFactory.makeSymbol("WITH-UNREPRESENTED-TERM-DUMP-ID-TABLE");
        $sym4$WITH_ASSERTION_DUMP_ID_TABLE = SubLObjectFactory.makeSymbol("WITH-ASSERTION-DUMP-ID-TABLE");
        $sym5$WITH_DEDUCTION_DUMP_ID_TABLE = SubLObjectFactory.makeSymbol("WITH-DEDUCTION-DUMP-ID-TABLE");
        $sym6$WITH_KB_HL_SUPPORT_DUMP_ID_TABLE = SubLObjectFactory.makeSymbol("WITH-KB-HL-SUPPORT-DUMP-ID-TABLE");
        $sym7$WITH_CLAUSE_STRUC_DUMP_ID_TABLE = SubLObjectFactory.makeSymbol("WITH-CLAUSE-STRUC-DUMP-ID-TABLE");
        $sym8$CLET = SubLObjectFactory.makeSymbol("CLET");
        $list9 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*CFASL-CONSTANT-HANDLE-LOOKUP-FUNC*"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("FIND-CONSTANT-BY-DUMP-ID"))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*CFASL-NART-HANDLE-LOOKUP-FUNC*"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("FIND-NART-BY-DUMP-ID"))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*CFASL-ASSERTION-HANDLE-LOOKUP-FUNC*"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("FIND-ASSERTION-BY-DUMP-ID"))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*CFASL-DEDUCTION-HANDLE-LOOKUP-FUNC*"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("FIND-DEDUCTION-BY-DUMP-ID"))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*CFASL-KB-HL-SUPPORT-HANDLE-LOOKUP-FUNC*"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("FIND-KB-HL-SUPPORT-BY-DUMP-ID"))), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*CFASL-CLAUSE-STRUC-HANDLE-LOOKUP-FUNC*"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("QUOTE"), (SubLObject)SubLObjectFactory.makeSymbol("FIND-CLAUSE-STRUC-BY-DUMP-ID"))));
        $list10 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*STRUCTURE-RESOURCING-MAKE-STATIC*"), (SubLObject)dumper.T), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*CFASL-INPUT-TO-STATIC-AREA*"), (SubLObject)dumper.T));
        $list11 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*STRUCTURE-RESOURCING-MAKE-STATIC*"), (SubLObject)dumper.NIL), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*CFASL-INPUT-TO-STATIC-AREA*"), (SubLObject)dumper.NIL));
        $list12 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FILENAME-VAR"), (SubLObject)SubLObjectFactory.makeSymbol("FILENAME")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym13$DISCARD_DUMP_FILENAME = SubLObjectFactory.makeSymbol("DISCARD-DUMP-FILENAME");
        $list14 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("STREAM"), (SubLObject)SubLObjectFactory.makeSymbol("FILENAME"), (SubLObject)SubLObjectFactory.makeSymbol("DIRECTION")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym15$FILENAME_VAR = SubLObjectFactory.makeUninternedSymbol("FILENAME-VAR");
        $sym16$WITH_KB_DUMP_FILENAME = SubLObjectFactory.makeSymbol("WITH-KB-DUMP-FILENAME");
        $sym17$WITH_PRIVATE_BINARY_FILE = SubLObjectFactory.makeSymbol("WITH-PRIVATE-BINARY-FILE");
        $sym18$PWHEN = SubLObjectFactory.makeSymbol("PWHEN");
        $list19 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("INPUT"));
        $sym20$CSETQ = SubLObjectFactory.makeSymbol("CSETQ");
        $sym21$ENABLE_FILE_STREAM_MEMORY_MAPPING = SubLObjectFactory.makeSymbol("ENABLE-FILE-STREAM-MEMORY-MAPPING");
        $sym22$CUNWIND_PROTECT = SubLObjectFactory.makeSymbol("CUNWIND-PROTECT");
        $sym23$PROGN = SubLObjectFactory.makeSymbol("PROGN");
        $sym24$CLOSE = SubLObjectFactory.makeSymbol("CLOSE");
        $sym25$FILENAME_VAR = SubLObjectFactory.makeUninternedSymbol("FILENAME-VAR");
        $sym26$WITH_PRIVATE_TEXT_FILE = SubLObjectFactory.makeSymbol("WITH-PRIVATE-TEXT-FILE");
        $sym27$STRINGP = SubLObjectFactory.makeSymbol("STRINGP");
        $list28 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*SEPARATE-FILE-FOR-COMPLEX-INDEXING?*"), (SubLObject)dumper.T));
        $list29 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*SEPARATE-FILE-FOR-COMPLEX-INDEXING?*")));
        $list30 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("units"));
        $str31$cfasl = SubLObjectFactory.makeString("cfasl");
        $str32$fht = SubLObjectFactory.makeString("fht");
        $str33$_wide_mark = SubLObjectFactory.makeString("-wide-mark");
        $int34$192 = SubLObjectFactory.makeInteger(192);
        $str35$file__s_not_found = SubLObjectFactory.makeString("file ~s not found");
        $str36$Directory__S_does_not_exist_ = SubLObjectFactory.makeString("Directory ~S does not exist.");
        $str37$Directory__S_is_not_different_fro = SubLObjectFactory.makeString("Directory ~S is not different from the current KB directory.");
        $str38$Directory__S_cannot_be_written_to = SubLObjectFactory.makeString("Directory ~S cannot be written to.");
        $str39$Directory__S_does_not_have_enough = SubLObjectFactory.makeString("Directory ~S does not have enough space available, ~S bytes, for the KB dump.");
        $str40$KB_Load_GC_checkpoint_reached____ = SubLObjectFactory.makeString("KB Load GC checkpoint reached ...");
        $str41$rule_utility_experience = SubLObjectFactory.makeString("rule-utility-experience");
        $sym42$CONSTANT_DUMP_ID = SubLObjectFactory.makeSymbol("CONSTANT-DUMP-ID");
        $sym43$NART_DUMP_ID = SubLObjectFactory.makeSymbol("NART-DUMP-ID");
        $sym44$ASSERTION_DUMP_ID = SubLObjectFactory.makeSymbol("ASSERTION-DUMP-ID");
        $sym45$DEDUCTION_DUMP_ID = SubLObjectFactory.makeSymbol("DEDUCTION-DUMP-ID");
        $sym46$KB_HL_SUPPORT_DUMP_ID = SubLObjectFactory.makeSymbol("KB-HL-SUPPORT-DUMP-ID");
        $sym47$CLAUSE_STRUC_DUMP_ID = SubLObjectFactory.makeSymbol("CLAUSE-STRUC-DUMP-ID");
        $sym48$FIND_CONSTANT_BY_DUMP_ID = SubLObjectFactory.makeSymbol("FIND-CONSTANT-BY-DUMP-ID");
        $sym49$FIND_NART_BY_DUMP_ID = SubLObjectFactory.makeSymbol("FIND-NART-BY-DUMP-ID");
        $sym50$FIND_ASSERTION_BY_DUMP_ID = SubLObjectFactory.makeSymbol("FIND-ASSERTION-BY-DUMP-ID");
        $sym51$FIND_DEDUCTION_BY_DUMP_ID = SubLObjectFactory.makeSymbol("FIND-DEDUCTION-BY-DUMP-ID");
        $sym52$FIND_KB_HL_SUPPORT_BY_DUMP_ID = SubLObjectFactory.makeSymbol("FIND-KB-HL-SUPPORT-BY-DUMP-ID");
        $sym53$FIND_CLAUSE_STRUC_BY_DUMP_ID = SubLObjectFactory.makeSymbol("FIND-CLAUSE-STRUC-BY-DUMP-ID");
        $sym54$LOAD_NON_COMPUTABLE_KB_PLUS_REBUILD_AND_DUMP_COMPUTABLE_KB = SubLObjectFactory.makeSymbol("LOAD-NON-COMPUTABLE-KB-PLUS-REBUILD-AND-DUMP-COMPUTABLE-KB");
        $sym55$REBUILD_AND_RECONNECT_COMPUTABLE_KB = SubLObjectFactory.makeSymbol("REBUILD-AND-RECONNECT-COMPUTABLE-KB");
        $int56$2048 = SubLObjectFactory.makeInteger(2048);
        $int57$256 = SubLObjectFactory.makeInteger(256);
        $sym58$_ASSERTION_TILE_SIZE_ = SubLObjectFactory.makeSymbol("*ASSERTION-TILE-SIZE*");
        $int59$1000000 = SubLObjectFactory.makeInteger(1000000);
        $str60$Re_Indexing_KB_in_ = SubLObjectFactory.makeString("Re-Indexing KB in ");
        $str61$_parts__of_ = SubLObjectFactory.makeString(" parts (of ");
        $str62$_assertions_ = SubLObjectFactory.makeString(" assertions)");
        $str63$cdolist = SubLObjectFactory.makeString("cdolist");
        $str64$Reserving_known_TOP_N_indices = SubLObjectFactory.makeString("Reserving known TOP-N indices");
        $list65 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("TERM"), (SubLObject)SubLObjectFactory.makeSymbol("&REST"), (SubLObject)SubLObjectFactory.makeSymbol("KEYS"));
        $str66$Indexing_assertion_range__ = SubLObjectFactory.makeString("Indexing assertion range [");
        $str67$_ = SubLObjectFactory.makeString(",");
        $str68$_ = SubLObjectFactory.makeString("]");
        $str69$Dumping_partial_index_to_ = SubLObjectFactory.makeString("Dumping partial index to ");
        $sym70$NEW_NINIVEH_CONSTANT_INDICES_ITERATOR = SubLObjectFactory.makeSymbol("NEW-NINIVEH-CONSTANT-INDICES-ITERATOR");
        $kw71$EQUAL_SIZED = SubLObjectFactory.makeKeyword("EQUAL-SIZED");
        $str72$Building_constant_indices_from_pa = SubLObjectFactory.makeString("Building constant indices from partial results");
        $sym73$NEW_NINIVEH_NART_INDICES_ITERATOR = SubLObjectFactory.makeSymbol("NEW-NINIVEH-NART-INDICES-ITERATOR");
        $str74$Building_NART_indices_from_partia = SubLObjectFactory.makeString("Building NART indices from partial results");
        $sym75$NEW_NINIVEH_UNREPRESENTED_TERM_INDICES_ITERATOR = SubLObjectFactory.makeSymbol("NEW-NINIVEH-UNREPRESENTED-TERM-INDICES-ITERATOR");
        $sym76$FIND_UNREPRESENTED_TERM_BY_SUID = SubLObjectFactory.makeSymbol("FIND-UNREPRESENTED-TERM-BY-SUID");
        $str77$Building_unrepresented_term_indic = SubLObjectFactory.makeString("Building unrepresented term indices from partial results");
        $str78$Building_index_from_partial_resul = SubLObjectFactory.makeString("Building index from partial results");
        $kw79$ERROR = SubLObjectFactory.makeKeyword("ERROR");
        $kw80$TERM_ID = SubLObjectFactory.makeKeyword("TERM-ID");
        $str81$Iterator__A_was_done_at_ID__A_of_ = SubLObjectFactory.makeString("Iterator ~A was done at ID ~A of ~A.");
        $list82 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("TERM-ID"), (SubLObject)SubLObjectFactory.makeSymbol("INDEX"));
        $str83$Expected_index_for__A__got__A_ins = SubLObjectFactory.makeString("Expected index for ~A, got ~A instead from ~A.");
        $list84 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("MEMBERS"), (SubLObject)SubLObjectFactory.makeSymbol("CLEANUP-FN"));
        $sym85$ITERATION_FINALIZE = SubLObjectFactory.makeSymbol("ITERATION-FINALIZE");
        $str86$_part = SubLObjectFactory.makeString(".part");
        $str87$_ = SubLObjectFactory.makeString("/");
        $str88$Cannot_create_part_directory__A__ = SubLObjectFactory.makeString("Cannot create part directory ~A ... dirty units?");
        $str89$Cleaning_up_ = SubLObjectFactory.makeString("Cleaning up ");
        $kw90$CLEAN = SubLObjectFactory.makeKeyword("CLEAN");
        $sym91$CYC_DUMP_KB = SubLObjectFactory.makeSymbol("CYC-DUMP-KB");
        $kw92$AGENDA_TIMEOUT = SubLObjectFactory.makeKeyword("AGENDA-TIMEOUT");
        $str93$Setting_up_safe_KB_dump_environme = SubLObjectFactory.makeString("Setting up safe KB dump environment");
        $str94$Agenda_was_not_successfully_halte = SubLObjectFactory.makeString("Agenda was not successfully halted!");
        $kw95$UNKNOWN = SubLObjectFactory.makeKeyword("UNKNOWN");
        $str96$Restoring_pre_dump_environment = SubLObjectFactory.makeString("Restoring pre-dump environment");
        $sym97$CYC_DUMP_KB_UNSAFE = SubLObjectFactory.makeSymbol("CYC-DUMP-KB-UNSAFE");
        $str98$Dump__A_KB_trivially_finished__du = SubLObjectFactory.makeString("Dump ~A KB trivially finished: dump directory and current units are both ~S");
        $kw99$OVERWRITE_UNITS_ = SubLObjectFactory.makeKeyword("OVERWRITE-UNITS?");
        $str100$done_txt = SubLObjectFactory.makeString("done.txt");
        $str101$Cyc_units_aready_exist_in_directo = SubLObjectFactory.makeString("Cyc units aready exist in directory ~A");
        $kw102$FORCE_DIRECTORY_CREATE_ = SubLObjectFactory.makeKeyword("FORCE-DIRECTORY-CREATE?");
        $kw103$STANDARD = SubLObjectFactory.makeKeyword("STANDARD");
        $kw104$INCREMENTAL = SubLObjectFactory.makeKeyword("INCREMENTAL");
        $kw105$INCREMENTAL_STANDARD = SubLObjectFactory.makeKeyword("INCREMENTAL-STANDARD");
        $kw106$SNAPSHOT = SubLObjectFactory.makeKeyword("SNAPSHOT");
        $kw107$SNAPSHOT_MINIMAL = SubLObjectFactory.makeKeyword("SNAPSHOT-MINIMAL");
        $kw108$MINIMAL = SubLObjectFactory.makeKeyword("MINIMAL");
        $kw109$RAW = SubLObjectFactory.makeKeyword("RAW");
        $kw110$INCREMENTAL_RAW = SubLObjectFactory.makeKeyword("INCREMENTAL-RAW");
        $kw111$FULL = SubLObjectFactory.makeKeyword("FULL");
        $kw112$INCREMENTAL_ESSENTIAL = SubLObjectFactory.makeKeyword("INCREMENTAL-ESSENTIAL");
        $kw113$ESSENTIAL = SubLObjectFactory.makeKeyword("ESSENTIAL");
        $kw114$SNAPSHOT_MEDIUM = SubLObjectFactory.makeKeyword("SNAPSHOT-MEDIUM");
        $kw115$MEDIUM = SubLObjectFactory.makeKeyword("MEDIUM");
        $kw116$SNAPSHOT_MAXIMAL = SubLObjectFactory.makeKeyword("SNAPSHOT-MAXIMAL");
        $kw117$MAXIMAL = SubLObjectFactory.makeKeyword("MAXIMAL");
        $str118$Valid_DUMP_TYPE_not_specified = SubLObjectFactory.makeString("Valid DUMP-TYPE not specified");
        $list119 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("START-LABEL"), (SubLObject)SubLObjectFactory.makeSymbol("DIRECTION"), (SubLObject)SubLObjectFactory.makeSymbol("END-LABEL"), (SubLObject)SubLObjectFactory.makeSymbol("PATH")), (SubLObject)SubLObjectFactory.makeSymbol("&BODY"), (SubLObject)SubLObjectFactory.makeSymbol("BODY"));
        $sym120$OP_TIME = SubLObjectFactory.makeUninternedSymbol("OP-TIME");
        $sym121$_DUMP_VERBOSE_ = SubLObjectFactory.makeSymbol("*DUMP-VERBOSE*");
        $sym122$FORMAT = SubLObjectFactory.makeSymbol("FORMAT");
        $str123$_________A_KB = SubLObjectFactory.makeString("~&~%;;; ~A KB");
        $list124 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("PWHEN"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("KB-LOADED")), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("FORMAT"), (SubLObject)dumper.T, (SubLObject)SubLObjectFactory.makeString(" ~A"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("KB-VERSION-STRING"))));
        $str125$__A__A_at__A__ = SubLObjectFactory.makeString(" ~A ~A at ~A~%");
        $list126 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("TIMESTRING")));
        $sym127$CTIME = SubLObjectFactory.makeSymbol("CTIME");
        $sym128$FORCE_FORMAT = SubLObjectFactory.makeSymbol("FORCE-FORMAT");
        $str129$_________A_of_KB__A_completed___A = SubLObjectFactory.makeString("~&~%;;; ~A of KB ~A completed (~A) at ~A~%");
        $list130 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("KB-VERSION-STRING"));
        $sym131$ELAPSED_TIME_ABBREVIATION_STRING = SubLObjectFactory.makeSymbol("ELAPSED-TIME-ABBREVIATION-STRING");
        $str132$Dumping = SubLObjectFactory.makeString("Dumping");
        $str133$__A = SubLObjectFactory.makeString(" ~A");
        $str134$to = SubLObjectFactory.makeString("to");
        $str135$Dump = SubLObjectFactory.makeString("Dump");
        $kw136$LOAD_KB = SubLObjectFactory.makeKeyword("LOAD-KB");
        $str137$Loading = SubLObjectFactory.makeString("Loading");
        $str138$from = SubLObjectFactory.makeString("from");
        $kw139$POLICIES = SubLObjectFactory.makeKeyword("POLICIES");
        $str140$Load = SubLObjectFactory.makeString("Load");
        $kw141$SNAPSHOT_KB = SubLObjectFactory.makeKeyword("SNAPSHOT-KB");
        $str142$Snapshotting = SubLObjectFactory.makeString("Snapshotting");
        $str143$Snapshot = SubLObjectFactory.makeString("Snapshot");
        $str144$Create_directory_and_continue_ = SubLObjectFactory.makeString("Create directory and continue.");
        $str145$_____S_transcript_operations_proc = SubLObjectFactory.makeString("~&  ~S transcript operations processed~%");
        $sym146$_KB_MANIFEST_ = SubLObjectFactory.makeSymbol("*KB-MANIFEST*");
        $sym147$CATCH_ERROR_MESSAGE_HANDLER = SubLObjectFactory.makeSymbol("CATCH-ERROR-MESSAGE-HANDLER");
        $str148$Could_not_load_KB_manifest_from__ = SubLObjectFactory.makeString("Could not load KB manifest from ~A. Defaulting to undefined.~%");
        $kw149$ID = SubLObjectFactory.makeKeyword("ID");
        $str150$manifest = SubLObjectFactory.makeString("manifest");
        $kw151$INPUT = SubLObjectFactory.makeKeyword("INPUT");
        $str152$Unable_to_open__S = SubLObjectFactory.makeString("Unable to open ~S");
        $kw153$DATA_FILE = SubLObjectFactory.makeKeyword("DATA-FILE");
        $kw154$INDEX_FILE = SubLObjectFactory.makeKeyword("INDEX-FILE");
        $str155$_index = SubLObjectFactory.makeString("-index");
        $kw156$TYPE = SubLObjectFactory.makeKeyword("TYPE");
        $kw157$KNOWLEDGE = SubLObjectFactory.makeKeyword("KNOWLEDGE");
        $str158$constant = SubLObjectFactory.makeString("constant");
        $str159$indices = SubLObjectFactory.makeString("indices");
        $str160$_indices = SubLObjectFactory.makeString("-indices");
        $list161 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("&KEY"), (SubLObject)SubLObjectFactory.makeSymbol("DATA-FILE"), (SubLObject)SubLObjectFactory.makeSymbol("INDEX-FILE"), (SubLObject)SubLObjectFactory.makeSymbol("TYPE"));
        $list162 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("DATA-FILE"), (SubLObject)SubLObjectFactory.makeKeyword("INDEX-FILE"), (SubLObject)SubLObjectFactory.makeKeyword("TYPE"));
        $kw163$ALLOW_OTHER_KEYS = SubLObjectFactory.makeKeyword("ALLOW-OTHER-KEYS");
        $str164$_complex_indices = SubLObjectFactory.makeString("-complex-indices");
        $kw165$COMPLEX_DATA_FILE = SubLObjectFactory.makeKeyword("COMPLEX-DATA-FILE");
        $kw166$COMPLEX_INDEX_FILE = SubLObjectFactory.makeKeyword("COMPLEX-INDEX-FILE");
        $kw167$INDEXING = SubLObjectFactory.makeKeyword("INDEXING");
        $str168$assertion = SubLObjectFactory.makeString("assertion");
        $str169$deduction = SubLObjectFactory.makeString("deduction");
        $str170$kb_hl_support = SubLObjectFactory.makeString("kb-hl-support");
        $str171$nart_hl_formula = SubLObjectFactory.makeString("nart-hl-formula");
        $str172$nat = SubLObjectFactory.makeString("nat");
        $str173$unrepresented_term = SubLObjectFactory.makeString("unrepresented-term");
        $sym174$GET_KB_UNITS_FILE_VECTOR_DESCRIPTIONS = SubLObjectFactory.makeSymbol("GET-KB-UNITS-FILE-VECTOR-DESCRIPTIONS");
        $sym175$GET_KB_UNITS_FILE_VECTOR_CATEGORIES = SubLObjectFactory.makeSymbol("GET-KB-UNITS-FILE-VECTOR-CATEGORIES");
        $kw176$NOT_FOUND = SubLObjectFactory.makeKeyword("NOT-FOUND");
        $str177$ = SubLObjectFactory.makeString("");
        $str178$File_Vector_category_description_ = SubLObjectFactory.makeString("File Vector category description ~A has no type.~%");
        $str179$Skipping_unknown_File_Vector_cate = SubLObjectFactory.makeString("Skipping unknown File Vector category type ~A.~%");
        $kw180$COMPUTABLE = SubLObjectFactory.makeKeyword("COMPUTABLE");
        $str181$________Dumping_essential_KB__ = SubLObjectFactory.makeString("~&~%;;; Dumping essential KB~%");
        $str182$________Snapshotting_essential_KB = SubLObjectFactory.makeString("~&~%;;; Snapshotting essential KB~%");
        $kw183$CONSTANT_SHELLS = SubLObjectFactory.makeKeyword("CONSTANT-SHELLS");
        $kw184$NART_SHELLS = SubLObjectFactory.makeKeyword("NART-SHELLS");
        $kw185$ASSERTION_SHELLS = SubLObjectFactory.makeKeyword("ASSERTION-SHELLS");
        $kw186$DEDUCTION_DEFS = SubLObjectFactory.makeKeyword("DEDUCTION-DEFS");
        $kw187$KB_HL_SUPPORT_SHELLS = SubLObjectFactory.makeKeyword("KB-HL-SUPPORT-SHELLS");
        $kw188$CLAUSE_STRUC_DEFS = SubLObjectFactory.makeKeyword("CLAUSE-STRUC-DEFS");
        $kw189$ASSERTION_DEFS = SubLObjectFactory.makeKeyword("ASSERTION-DEFS");
        $kw190$KB_HL_SUPPORT_DEFS = SubLObjectFactory.makeKeyword("KB-HL-SUPPORT-DEFS");
        $kw191$BOOKEEPING_ASSERTIONS = SubLObjectFactory.makeKeyword("BOOKEEPING-ASSERTIONS");
        $kw192$EXPERIENCE = SubLObjectFactory.makeKeyword("EXPERIENCE");
        $str193$________Loading_essential_KB_at__ = SubLObjectFactory.makeString("~&~%;;; Loading essential KB at ~A~%");
        $kw194$SETUP = SubLObjectFactory.makeKeyword("SETUP");
        $kw195$UNREPRESENTED_TERMS = SubLObjectFactory.makeKeyword("UNREPRESENTED-TERMS");
        $kw196$KB_INDEXING = SubLObjectFactory.makeKeyword("KB-INDEXING");
        $kw197$RULE_SET = SubLObjectFactory.makeKeyword("RULE-SET");
        $kw198$NON_TRUE_ASSERTION_TV_CACHE = SubLObjectFactory.makeKeyword("NON-TRUE-ASSERTION-TV-CACHE");
        $str199$________Loading_computable_KB_at_ = SubLObjectFactory.makeString("~&~%;;; Loading computable KB at ~A~%");
        $str200$done = SubLObjectFactory.makeString("done");
        $str201$text = SubLObjectFactory.makeString("text");
        $kw202$OUTPUT = SubLObjectFactory.makeKeyword("OUTPUT");
        $str203$________Loading_computable_remain = SubLObjectFactory.makeString("~&~%;;; Loading computable remaining HL at ~A~%");
        $kw204$NART_HL_FORMULAS = SubLObjectFactory.makeKeyword("NART-HL-FORMULAS");
        $kw205$MISC = SubLObjectFactory.makeKeyword("MISC");
        $kw206$SBHL_DATA = SubLObjectFactory.makeKeyword("SBHL-DATA");
        $kw207$SBHL_CACHE = SubLObjectFactory.makeKeyword("SBHL-CACHE");
        $kw208$CARDINALITY_ESTIMATES = SubLObjectFactory.makeKeyword("CARDINALITY-ESTIMATES");
        $kw209$ARG_TYPE_CACHE = SubLObjectFactory.makeKeyword("ARG-TYPE-CACHE");
        $kw210$DEFNS_CACHE = SubLObjectFactory.makeKeyword("DEFNS-CACHE");
        $kw211$SOMEWHERE_CACHE = SubLObjectFactory.makeKeyword("SOMEWHERE-CACHE");
        $kw212$ARITY_CACHE = SubLObjectFactory.makeKeyword("ARITY-CACHE");
        $kw213$TVA_CACHE = SubLObjectFactory.makeKeyword("TVA-CACHE");
        $kw214$REFORMULATOR_RULES = SubLObjectFactory.makeKeyword("REFORMULATOR-RULES");
        $kw215$LEXICON_CACHE = SubLObjectFactory.makeKeyword("LEXICON-CACHE");
        $kw216$RTP_RULES = SubLObjectFactory.makeKeyword("RTP-RULES");
        $kw217$PARAPHRASE_CACHE = SubLObjectFactory.makeKeyword("PARAPHRASE-CACHE");
        $kw218$ENGLISH_UOM = SubLObjectFactory.makeKeyword("ENGLISH-UOM");
        $kw219$CAE_QUERY_SEARCH_TABLES = SubLObjectFactory.makeKeyword("CAE-QUERY-SEARCH-TABLES");
        $str220$Cannot_initialize_reformulator_du = SubLObjectFactory.makeString("Cannot initialize reformulator due to missing KB content.");
        $str221$Cannot_initialize_lexicon_cache_d = SubLObjectFactory.makeString("Cannot initialize lexicon cache due to missing KB content.");
        $str222$________Rebuilding_computable_but = SubLObjectFactory.makeString("~&~%;;; Rebuilding computable-but-not-dumpable-yet-KB at ~A~%");
        $str223$Cannot_initialize_paraphrase_code = SubLObjectFactory.makeString("Cannot initialize paraphrase code due to missing KB content.");
        $str224$Cannot_initialize_SKSI_due_to_mis = SubLObjectFactory.makeString("Cannot initialize SKSI due to missing KB content.");
        $sym225$SYMBOLP = SubLObjectFactory.makeSymbol("SYMBOLP");
        $kw226$EOF = SubLObjectFactory.makeKeyword("EOF");
        $str227$_d_bytes_of_unread_stuff_in__S = SubLObjectFactory.makeString("~d bytes of unread stuff in ~S");
        $str228$_a__ = SubLObjectFactory.makeString("~a~%");
        $sym229$NON_NEGATIVE_INTEGER_P = SubLObjectFactory.makeSymbol("NON-NEGATIVE-INTEGER-P");
        $str230$id = SubLObjectFactory.makeString("id");
        $str231$_was = SubLObjectFactory.makeString(" was");
        $str232$s_were = SubLObjectFactory.makeString("s were");
        $str233$Noting_that_ = SubLObjectFactory.makeString("Noting that ");
        $str234$_ = SubLObjectFactory.makeString(" ");
        $str235$_deleted = SubLObjectFactory.makeString(" deleted");
        $str236$Deleted_IDs_file__A_contained_no_ = SubLObjectFactory.makeString("Deleted IDs file ~A contained no set -- ignoring.~%");
        $list237 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("ID"), (SubLObject)SubLObjectFactory.makeSymbol("PAYLOAD"));
        $str238$__Dump_ID_regressed_from__A_to__A = SubLObjectFactory.makeString("~&Dump ID regressed from ~A to ~A ... this is inefficient.~%");
        $str239$______writing__S____A__index__i_e = SubLObjectFactory.makeString("~&... writing ~S (#~A) index, i.e. FVECTOR[~A] = ~A~%");
        $sym240$_ = SubLObjectFactory.makeSymbol("<");
        $str241$____tombstoning_companion_complex = SubLObjectFactory.makeString("... tombstoning companion complex index.");
        $kw242$UNPROVIDED = SubLObjectFactory.makeKeyword("UNPROVIDED");
        $str243$ID_ordering_regressed_from__A_to_ = SubLObjectFactory.makeString("ID ordering regressed from ~A to ~A--iterator for new objects broken.~%");
        $str244$______tombstoning____A__index__i_ = SubLObjectFactory.makeString("~&... tombstoning (#~A) index, i.e. FVECTOR[~A] = [T]~%");
        $str245$______appending__S____A__index__i = SubLObjectFactory.makeString("~&... appending ~S (#~A) index, i.e. FVECTOR[~A] = ~A~%");
        $kw246$OVERFLOW = SubLObjectFactory.makeKeyword("OVERFLOW");
        $kw247$COMPLEX = SubLObjectFactory.makeKeyword("COMPLEX");
        $kw248$FVECTOR = SubLObjectFactory.makeKeyword("FVECTOR");
        $str249$Inconsistent_state____already_for = SubLObjectFactory.makeString("Inconsistent state -- already forced widening of simple ~A index but still threw exception.");
        $str250$__Redoing__A_index_snap_shot_with = SubLObjectFactory.makeString("~&Redoing ~A index snap-shot with wide simple index.~%");
        $str251$Inconsistent_state____already_for = SubLObjectFactory.makeString("Inconsistent state -- already forced widening of complex ~A index but still threw exception.");
        $str252$__Redoing__A_index_snap_shot_with = SubLObjectFactory.makeString("~&Redoing ~A index snap-shot with wide complex index.~%");
        $str253$Unexpected_snapshot_state__A_____ = SubLObjectFactory.makeString("Unexpected snapshot state ~A ... cannot snapshot ~A index.~%");
        $str254$Redoing_ = SubLObjectFactory.makeString("Redoing ");
        $str255$_snapshot_with_wide_index_____ = SubLObjectFactory.makeString(" snapshot with wide index ....");
        $kw256$WIDEN_INDEX = SubLObjectFactory.makeKeyword("WIDEN-INDEX");
        $str257$Cannot_find_required_file__A_ = SubLObjectFactory.makeString("Cannot find required file ~A.");
        $list258 = ConsesLow.list(new SubLObject[] { dumper.EQUAL, SubLObjectFactory.makeKeyword("TRUE-DEF"), dumper.EQ, SubLObjectFactory.makeKeyword("ASSERT-INFO"), SubLObjectFactory.makeKeyword("ASSERTED-TRUE-DEF"), dumper.EQUALP, SubLObjectFactory.makeKeyword("DEPENDENTS"), SubLObjectFactory.makeKeyword("TRUE-MON"), SubLObjectFactory.makeKeyword("CODE"), SubLObjectFactory.makeKeyword("ASSERTED-TRUE-MON"), SubLObjectFactory.makeKeyword("COMPLEX"), SubLObjectFactory.makeKeyword("OPAQUE"), SubLObjectFactory.makeKeyword("INVERSE"), SubLObjectFactory.makeKeyword("SPEC-PRED"), SubLObjectFactory.makeKeyword("EVAL"), SubLObjectFactory.makeKeyword("ISA"), SubLObjectFactory.makeKeyword("WEAK"), SubLObjectFactory.makeKeyword("ACTION"), SubLObjectFactory.makeKeyword("DEFINITIONAL"), dumper.EQL, SubLObjectFactory.makeKeyword("SIGN"), SubLObjectFactory.makeKeyword("DONT-CARE"), SubLObjectFactory.makeKeyword("PPH-UNKNOWN-ARG-POSITION"), SubLObjectFactory.makeKeyword("SUBJECT"), SubLObjectFactory.makeKeyword("GAF-ARG"), SubLObjectFactory.makeKeyword("VARIABLE-NAMES"), SubLObjectFactory.makeKeyword("ARG1"), SubLObjectFactory.makeKeyword("GENLS"), SubLObjectFactory.makeKeyword("PPH-UNKNOWN-CYCL"), SubLObjectFactory.makeKeyword("ARG2"), SubLObjectFactory.makeKeyword("OBJECT"), SubLObjectFactory.makeKeyword("BEGINNING-OF-TIME"), SubLObjectFactory.makeKeyword("END-OF-TIME"), SubLObjectFactory.makeKeyword("QUERY"), SubLObjectFactory.makeKeyword("BACKWARD"), SubLObjectFactory.makeKeyword("OTHER"), SubLObjectFactory.makeKeyword("EQUALITY"), SubLObjectFactory.makeKeyword("PPH-EMPTY-INFO-VECTOR"), SubLObjectFactory.makeKeyword("TVA"), SubLObjectFactory.makeKeyword("GENLPREDS"), SubLObjectFactory.makeKeyword("NOUN"), SubLObjectFactory.makeKeyword("NART-ARG"), SubLObjectFactory.makeKeyword("OBLIQUE-OBJECT"), SubLObjectFactory.makeKeyword("ELEMENTOF"), SubLObjectFactory.makeSymbol("QUOTE"), dumper.T, SubLObjectFactory.makeKeyword("ADMIT"), SubLObjectFactory.makeKeyword("NEG"), SubLObjectFactory.makeKeyword("POS-PRED"), SubLObjectFactory.makeKeyword("CONSTANT-INDEX"), SubLObjectFactory.makeKeyword("NART-INDEX"), SubLObjectFactory.makeKeyword("NART-HL-FORMULA"), SubLObjectFactory.makeKeyword("ASSERTION-INDEX"), SubLObjectFactory.makeKeyword("DEDUCTION-INDEX"), SubLObjectFactory.makeKeyword("KB-HL-SUPPORT"), SubLObjectFactory.makeKeyword("UNREPRESENTED-TERM-INDEX") });
        $str259$Dumping_special_objects_at__A____ = SubLObjectFactory.makeString("Dumping special objects at ~A ...");
        $str260$special = SubLObjectFactory.makeString("special");
        $str261$Loading_special_objects____ = SubLObjectFactory.makeString("Loading special objects ...");
        $sym262$INTEGERP = SubLObjectFactory.makeSymbol("INTEGERP");
        $str263$constant_count = SubLObjectFactory.makeString("constant-count");
        $str264$constant_shell = SubLObjectFactory.makeString("constant-shell");
        $str265$Dumping_constant_shells = SubLObjectFactory.makeString("Dumping constant shells");
        $kw266$SKIP = SubLObjectFactory.makeKeyword("SKIP");
        $str267$deleted_constant_ids = SubLObjectFactory.makeString("deleted-constant-ids");
        $str268$Loading_constant_shells = SubLObjectFactory.makeString("Loading constant shells");
        $str269$The_specified_file_position__A_is = SubLObjectFactory.makeString("The specified file position ~A is past the length of the file ~A of ~A bytes.");
        $str270$_A_lies_within_the_file_header__0 = SubLObjectFactory.makeString("~A lies within the file header [0,~A) and designates no constant.");
        $str271$_A_specifies_a_file_position_in_t = SubLObjectFactory.makeString("~A specifies a file position in the definition of ~A (suid: ~A // guid: ~A).~%");
        $str272$_A_should_have_been_found_but_was = SubLObjectFactory.makeString("~A should have been found but was not ... error in the algorithm?");
        $str273$nart_count = SubLObjectFactory.makeString("nart-count");
        $str274$deleted_nart_ids = SubLObjectFactory.makeString("deleted-nart-ids");
        $str275$NART = SubLObjectFactory.makeString("NART");
        $str276$nat_shell = SubLObjectFactory.makeString("nat-shell");
        $str277$Loading_NART_shells = SubLObjectFactory.makeString("Loading NART shells");
        $str278$assertion_count = SubLObjectFactory.makeString("assertion-count");
        $str279$deleted_assertion_ids = SubLObjectFactory.makeString("deleted-assertion-ids");
        $str280$Enabling_lazy_assertion_handle_su = SubLObjectFactory.makeString("Enabling lazy assertion handle support");
        $str281$assertion_shell = SubLObjectFactory.makeString("assertion-shell");
        $str282$Loading_assertion_shells = SubLObjectFactory.makeString("Loading assertion shells");
        $str283$kb_hl_support_count = SubLObjectFactory.makeString("kb-hl-support-count");
        $str284$deleted_kb_hl_support_ids = SubLObjectFactory.makeString("deleted-kb-hl-support-ids");
        $str285$KB_HL_support = SubLObjectFactory.makeString("KB HL-support");
        $str286$Enabling_lazy_KB_HL_support_handl = SubLObjectFactory.makeString("Enabling lazy KB HL support handle support");
        $str287$kb_hl_support_shell = SubLObjectFactory.makeString("kb-hl-support-shell");
        $str288$Loading_KB_HL_support_shells = SubLObjectFactory.makeString("Loading KB HL support shells");
        $str289$unrepresented_term_count = SubLObjectFactory.makeString("unrepresented-term-count");
        $str290$unrepresented_terms = SubLObjectFactory.makeString("unrepresented-terms");
        $str291$Dumping_KB_unrepresented_terms = SubLObjectFactory.makeString("Dumping KB unrepresented terms");
        $str292$____Old_Space = SubLObjectFactory.makeString(" -- Old Space");
        $str293$____New_Space = SubLObjectFactory.makeString(" -- New Space");
        $str294$Reconnecting_to_unrepresented_ter = SubLObjectFactory.makeString("Reconnecting to unrepresented terms FHT ....");
        $str295$Could_not_locate__A__faling_back_ = SubLObjectFactory.makeString("Could not locate ~A, faling back on ID-INDEX implementation.~A");
        $str296$Loading_KB_unrepresented_terms = SubLObjectFactory.makeString("Loading KB unrepresented terms");
        $int297$500 = SubLObjectFactory.makeInteger(500);
        $str298$clause_struc_count = SubLObjectFactory.makeString("clause-struc-count");
        $str299$There_are__A_gaps_in_the_clause_s = SubLObjectFactory.makeString("There are ~A gaps in the clause struct ID range.~%");
        $str300$clause_struc = SubLObjectFactory.makeString("clause-struc");
        $str301$Dumping_clause_struc_definitions = SubLObjectFactory.makeString("Dumping clause-struc definitions");
        $str302$deleted_clause_struc_ids = SubLObjectFactory.makeString("deleted-clause-struc-ids");
        $str303$shared_clauses = SubLObjectFactory.makeString("shared clauses");
        $str304$Loading_clause_struc_definitions = SubLObjectFactory.makeString("Loading clause-struc definitions");
        $str305$__The__A_size_is_larger_than_4GB_ = SubLObjectFactory.makeString("~&The ~A size is larger than 4GB.~%");
        $str306$Persisting_wide_index_entry_suppo = SubLObjectFactory.makeString("Persisting wide index entry support ....");
        $str307$deduction_count = SubLObjectFactory.makeString("deduction-count");
        $str308$deduction_index = SubLObjectFactory.makeString("deduction-index");
        $str309$Dumping_deduction_definitions = SubLObjectFactory.makeString("Dumping deduction definitions");
        $str310$deduction_defs = SubLObjectFactory.makeString("deduction defs");
        $sym311$SNAPSHOT_DEDUCTION_DEFS_INTERNAL = SubLObjectFactory.makeSymbol("SNAPSHOT-DEDUCTION-DEFS-INTERNAL");
        $list312 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("deduction"));
        $list313 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("deduction-index"));
        $str314$Copying_deduction_definitions_fro = SubLObjectFactory.makeString("Copying deduction definitions from ");
        $list315 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("NEW-DFILE"), (SubLObject)SubLObjectFactory.makeSymbol("NEW-IFILE"), (SubLObject)SubLObjectFactory.makeSymbol("NEW-WIDEMARK"));
        $str316$Tombstoning_deleted_deduction_def = SubLObjectFactory.makeString("Tombstoning deleted deduction definitions");
        $kw317$END = SubLObjectFactory.makeKeyword("END");
        $sym318$DEDUCTION_ID = SubLObjectFactory.makeSymbol("DEDUCTION-ID");
        $sym319$DUMP_DEDUCTION_DEF = SubLObjectFactory.makeSymbol("DUMP-DEDUCTION-DEF");
        $str320$Appending_new_deduction_definitio = SubLObjectFactory.makeString("Appending new deduction definitions");
        $str321$__Deduction_definitions_will_be_s = SubLObjectFactory.makeString("~&Deduction definitions will be swapped in lazily from~%   ~A~%   ~A~%");
        $str322$Determining_deduction_max_ID_usin = SubLObjectFactory.makeString("Determining deduction max ID using wide index entries ....");
        $str323$Determining_deduction_max_ID_from = SubLObjectFactory.makeString("Determining deduction max ID from index entries ....");
        $str324$Enabling_lazy_deduction_handle_su = SubLObjectFactory.makeString("Enabling lazy deduction handle support");
        $str325$___Deduction_definitions_use_wide = SubLObjectFactory.makeString("~&(Deduction definitions use wide index entries.)~%");
        $str326$Not_yet_implemented_ = SubLObjectFactory.makeString("Not yet implemented.");
        $str327$Loading_deduction_definitions = SubLObjectFactory.makeString("Loading deduction definitions");
        $str328$deleted_deduction_ids = SubLObjectFactory.makeString("deleted-deduction-ids");
        $sym329$LOAD_DEDUCTION_DEF_FROM_CACHE = SubLObjectFactory.makeSymbol("LOAD-DEDUCTION-DEF-FROM-CACHE");
        $str330$assertion_index = SubLObjectFactory.makeString("assertion-index");
        $str331$Dumping_assertion_definitions = SubLObjectFactory.makeString("Dumping assertion definitions");
        $str332$assertion_defs = SubLObjectFactory.makeString("assertion defs");
        $sym333$SNAPSHOT_ASSERTION_DEFS_INTERNAL = SubLObjectFactory.makeSymbol("SNAPSHOT-ASSERTION-DEFS-INTERNAL");
        $list334 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("assertion"));
        $list335 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("assertion-index"));
        $str336$Copying_assertion_definitions_fro = SubLObjectFactory.makeString("Copying assertion definitions from ");
        $list337 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("NEW-AFILE"), (SubLObject)SubLObjectFactory.makeSymbol("NEW-IFILE"), (SubLObject)SubLObjectFactory.makeSymbol("NEW-WIDEMARK"));
        $str338$Tombstoning_deleted_assertion_def = SubLObjectFactory.makeString("Tombstoning deleted assertion definitions");
        $kw339$NO_COMPLEX_FVECTOR = SubLObjectFactory.makeKeyword("NO-COMPLEX-FVECTOR");
        $sym340$FIND_ASSERTION_BY_ID = SubLObjectFactory.makeSymbol("FIND-ASSERTION-BY-ID");
        $sym341$SNAPSHOT_ASSERTION_DEF = SubLObjectFactory.makeSymbol("SNAPSHOT-ASSERTION-DEF");
        $str342$Updating_changed_assertion_defini = SubLObjectFactory.makeString("Updating changed assertion definitions");
        $sym343$ASSERTION_ID = SubLObjectFactory.makeSymbol("ASSERTION-ID");
        $sym344$DUMP_ASSERTION_DEF = SubLObjectFactory.makeSymbol("DUMP-ASSERTION-DEF");
        $str345$Appending_new_assertion_definitio = SubLObjectFactory.makeString("Appending new assertion definitions");
        $str346$__Assertion_definitions_will_be_s = SubLObjectFactory.makeString("~&Assertion definitions will be swapped in lazily from:~%   ~A~%   ~A~%");
        $str347$___Assertion_definitions_use_wide = SubLObjectFactory.makeString("~&(Assertion definitions use wide index entries.)~%");
        $str348$Loading_assertion_definitions = SubLObjectFactory.makeString("Loading assertion definitions");
        $sym349$LOAD_ASSERTION_DEF_FROM_CACHE = SubLObjectFactory.makeSymbol("LOAD-ASSERTION-DEF-FROM-CACHE");
        $str350$kb_hl_support_index = SubLObjectFactory.makeString("kb-hl-support-index");
        $str351$Dumping_KB_HL_support_definitions = SubLObjectFactory.makeString("Dumping KB HL support definitions");
        $str352$__KB_HL_supports_will_be_swapped_ = SubLObjectFactory.makeString("~&KB HL supports will be swapped in lazily from:~%   ~A~%   ~A~%");
        $str353$Loading_KB_HL_support_definitions = SubLObjectFactory.makeString("Loading KB HL support definitions");
        $sym354$LOAD_KB_HL_SUPPORT_DEF_FROM_CACHE = SubLObjectFactory.makeSymbol("LOAD-KB-HL-SUPPORT-DEF-FROM-CACHE");
        $str355$kb_hl_support_indexing = SubLObjectFactory.makeString("kb-hl-support-indexing");
        $str356$Dumping_KB_HL_support_indexing___ = SubLObjectFactory.makeString("Dumping KB HL support indexing ...");
        $str357$Loading_KB_HL_support_indexing___ = SubLObjectFactory.makeString("Loading KB HL support indexing ...");
        $str358$bookkeeping_assertions = SubLObjectFactory.makeString("bookkeeping-assertions");
        $str359$Dumping_bookkeeping_assertions___ = SubLObjectFactory.makeString("Dumping bookkeeping assertions ...");
        $list360 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("PRED"), (SubLObject)SubLObjectFactory.makeSymbol("SUBINDEX"));
        $str361$Loading_bookkeeping_assertions___ = SubLObjectFactory.makeString("Loading bookkeeping assertions ...");
        $str362$Dumping_rule_utility_experience__ = SubLObjectFactory.makeString("Dumping rule utility experience ...");
        $str363$Loading_rule_utility_experience__ = SubLObjectFactory.makeString("Loading rule utility experience ...");
        $str364$Cannot_locate__A_ = SubLObjectFactory.makeString("Cannot locate ~A.");
        $str365$Cannot_open__A_for_reading___ = SubLObjectFactory.makeString("Cannot open ~A for reading.~%");
        $sym366$NINIVEH_INDEX_ITERATOR_DONE_ = SubLObjectFactory.makeSymbol("NINIVEH-INDEX-ITERATOR-DONE?");
        $sym367$NINIVEH_INDEX_ITERATOR_NEXT = SubLObjectFactory.makeSymbol("NINIVEH-INDEX-ITERATOR-NEXT");
        $sym368$NINIVEH_INDEX_ITERATOR_FINALIZE = SubLObjectFactory.makeSymbol("NINIVEH-INDEX-ITERATOR-FINALIZE");
        $kw369$STUB = SubLObjectFactory.makeKeyword("STUB");
        $list370 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("STREAM"), (SubLObject)SubLObjectFactory.makeSymbol("DONE?"), (SubLObject)SubLObjectFactory.makeSymbol("CONS-CELL"));
        $list371 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("STREAM"), (SubLObject)SubLObjectFactory.makeSymbol("CACHE-LOAD-FN"), (SubLObject)SubLObjectFactory.makeSymbol("DONE?"));
        $kw372$IGNORE_ERRORS_TARGET = SubLObjectFactory.makeKeyword("IGNORE-ERRORS-TARGET");
        $sym373$IGNORE_ERRORS_HANDLER = SubLObjectFactory.makeSymbol("IGNORE-ERRORS-HANDLER", "SUBLISP");
        $kw374$CONSTANT_INDEX = SubLObjectFactory.makeKeyword("CONSTANT-INDEX");
        $kw375$NART_INDEX = SubLObjectFactory.makeKeyword("NART-INDEX");
        $kw376$UNREPRESENTED_TERM_INDEX = SubLObjectFactory.makeKeyword("UNREPRESENTED-TERM-INDEX");
        $kw377$ASSERTION_INDEX = SubLObjectFactory.makeKeyword("ASSERTION-INDEX");
        $kw378$AUXILIARY_INDEX = SubLObjectFactory.makeKeyword("AUXILIARY-INDEX");
        $kw379$BOOKKEEPPING_INDEX = SubLObjectFactory.makeKeyword("BOOKKEEPPING-INDEX");
        $kw380$KB_HL_SUPPORT_INDEX = SubLObjectFactory.makeKeyword("KB-HL-SUPPORT-INDEX");
        $sym381$INDEX_WRITER = SubLObjectFactory.makeSymbol("INDEX-WRITER");
        $sym382$INDEX_WRITER_P = SubLObjectFactory.makeSymbol("INDEX-WRITER-P");
        $list383 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("DIRECTORY"), (SubLObject)SubLObjectFactory.makeSymbol("FVECTOR"), (SubLObject)SubLObjectFactory.makeSymbol("INDEX-FILE"), (SubLObject)SubLObjectFactory.makeSymbol("INDEX-LABEL"), (SubLObject)SubLObjectFactory.makeSymbol("COMPLEX-FVECTOR"), (SubLObject)SubLObjectFactory.makeSymbol("COMPLEX-INDEX-FILE"), (SubLObject)SubLObjectFactory.makeSymbol("COMPLEX-INDEX-LABEL"), (SubLObject)SubLObjectFactory.makeSymbol("DUMP-FN"));
        $list384 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("DIRECTORY"), (SubLObject)SubLObjectFactory.makeKeyword("FVECTOR"), (SubLObject)SubLObjectFactory.makeKeyword("INDEX-FILE"), (SubLObject)SubLObjectFactory.makeKeyword("INDEX-LABEL"), (SubLObject)SubLObjectFactory.makeKeyword("COMPLEX-FVECTOR"), (SubLObject)SubLObjectFactory.makeKeyword("COMPLEX-INDEX-FILE"), (SubLObject)SubLObjectFactory.makeKeyword("COMPLEX-INDEX-LABEL"), (SubLObject)SubLObjectFactory.makeKeyword("DUMP-FN"));
        $list385 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("IDXWRITER-DIRECTORY"), (SubLObject)SubLObjectFactory.makeSymbol("IDXWRITER-FVECTOR"), (SubLObject)SubLObjectFactory.makeSymbol("IDXWRITER-INDEX-FILE"), (SubLObject)SubLObjectFactory.makeSymbol("IDXWRITER-INDEX-LABEL"), (SubLObject)SubLObjectFactory.makeSymbol("IDXWRITER-COMPLEX-FVECTOR"), (SubLObject)SubLObjectFactory.makeSymbol("IDXWRITER-COMPLEX-INDEX-FILE"), (SubLObject)SubLObjectFactory.makeSymbol("IDXWRITER-COMPLEX-INDEX-LABEL"), (SubLObject)SubLObjectFactory.makeSymbol("IDXWRITER-DUMP-FN"));
        $list386 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-DIRECTORY"), (SubLObject)SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-FVECTOR"), (SubLObject)SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-INDEX-FILE"), (SubLObject)SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-INDEX-LABEL"), (SubLObject)SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-COMPLEX-FVECTOR"), (SubLObject)SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-COMPLEX-INDEX-FILE"), (SubLObject)SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-COMPLEX-INDEX-LABEL"), (SubLObject)SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-DUMP-FN"));
        $sym387$DEFAULT_STRUCT_PRINT_FUNCTION = SubLObjectFactory.makeSymbol("DEFAULT-STRUCT-PRINT-FUNCTION");
        $sym388$INDEX_WRITER_PRINT_FUNCTION_TRAMPOLINE = SubLObjectFactory.makeSymbol("INDEX-WRITER-PRINT-FUNCTION-TRAMPOLINE");
        $list389 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("OPTIMIZE-FUNCALL"), (SubLObject)SubLObjectFactory.makeSymbol("INDEX-WRITER-P"));
        $sym390$IDXWRITER_DIRECTORY = SubLObjectFactory.makeSymbol("IDXWRITER-DIRECTORY");
        $sym391$_CSETF_IDXWRITER_DIRECTORY = SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-DIRECTORY");
        $sym392$IDXWRITER_FVECTOR = SubLObjectFactory.makeSymbol("IDXWRITER-FVECTOR");
        $sym393$_CSETF_IDXWRITER_FVECTOR = SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-FVECTOR");
        $sym394$IDXWRITER_INDEX_FILE = SubLObjectFactory.makeSymbol("IDXWRITER-INDEX-FILE");
        $sym395$_CSETF_IDXWRITER_INDEX_FILE = SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-INDEX-FILE");
        $sym396$IDXWRITER_INDEX_LABEL = SubLObjectFactory.makeSymbol("IDXWRITER-INDEX-LABEL");
        $sym397$_CSETF_IDXWRITER_INDEX_LABEL = SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-INDEX-LABEL");
        $sym398$IDXWRITER_COMPLEX_FVECTOR = SubLObjectFactory.makeSymbol("IDXWRITER-COMPLEX-FVECTOR");
        $sym399$_CSETF_IDXWRITER_COMPLEX_FVECTOR = SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-COMPLEX-FVECTOR");
        $sym400$IDXWRITER_COMPLEX_INDEX_FILE = SubLObjectFactory.makeSymbol("IDXWRITER-COMPLEX-INDEX-FILE");
        $sym401$_CSETF_IDXWRITER_COMPLEX_INDEX_FILE = SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-COMPLEX-INDEX-FILE");
        $sym402$IDXWRITER_COMPLEX_INDEX_LABEL = SubLObjectFactory.makeSymbol("IDXWRITER-COMPLEX-INDEX-LABEL");
        $sym403$_CSETF_IDXWRITER_COMPLEX_INDEX_LABEL = SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-COMPLEX-INDEX-LABEL");
        $sym404$IDXWRITER_DUMP_FN = SubLObjectFactory.makeSymbol("IDXWRITER-DUMP-FN");
        $sym405$_CSETF_IDXWRITER_DUMP_FN = SubLObjectFactory.makeSymbol("_CSETF-IDXWRITER-DUMP-FN");
        $kw406$DIRECTORY = SubLObjectFactory.makeKeyword("DIRECTORY");
        $kw407$INDEX_LABEL = SubLObjectFactory.makeKeyword("INDEX-LABEL");
        $kw408$COMPLEX_FVECTOR = SubLObjectFactory.makeKeyword("COMPLEX-FVECTOR");
        $kw409$COMPLEX_INDEX_LABEL = SubLObjectFactory.makeKeyword("COMPLEX-INDEX-LABEL");
        $kw410$DUMP_FN = SubLObjectFactory.makeKeyword("DUMP-FN");
        $str411$Invalid_slot__S_for_construction_ = SubLObjectFactory.makeString("Invalid slot ~S for construction function");
        $kw412$BEGIN = SubLObjectFactory.makeKeyword("BEGIN");
        $sym413$MAKE_INDEX_WRITER = SubLObjectFactory.makeSymbol("MAKE-INDEX-WRITER");
        $kw414$SLOT = SubLObjectFactory.makeKeyword("SLOT");
        $sym415$VISIT_DEFSTRUCT_OBJECT_INDEX_WRITER_METHOD = SubLObjectFactory.makeSymbol("VISIT-DEFSTRUCT-OBJECT-INDEX-WRITER-METHOD");
        $str416$indices_index = SubLObjectFactory.makeString("indices-index");
        $str417$constant_indices = SubLObjectFactory.makeString("constant indices");
        $str418$constant_complex_indices = SubLObjectFactory.makeString("constant-complex-indices");
        $str419$constant_complex_indices_index = SubLObjectFactory.makeString("constant-complex-indices-index");
        $str420$constant_complex_indices = SubLObjectFactory.makeString("constant complex indices");
        $sym421$DUMP_CONSTANT_INDEX = SubLObjectFactory.makeSymbol("DUMP-CONSTANT-INDEX");
        $str422$Dumping_constant_indices = SubLObjectFactory.makeString("Dumping constant indices");
        $str423$complex_constant_indices = SubLObjectFactory.makeString("complex constant indices");
        $str424$Cleaning_up_empty_complex_indexin = SubLObjectFactory.makeString("Cleaning up empty complex indexing files");
        $sym425$SNAPSHOT_CONSTANT_INDICES_INTERNAL = SubLObjectFactory.makeSymbol("SNAPSHOT-CONSTANT-INDICES-INTERNAL");
        $list426 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("indices"), (SubLObject)SubLObjectFactory.makeString("constant-complex-indices"));
        $list427 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("indices-index"), (SubLObject)SubLObjectFactory.makeString("constant-complex-indices-index"));
        $str428$Copying_constant_indices_from_ = SubLObjectFactory.makeString("Copying constant indices from ");
        $list429 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("NEW-DFILE"), (SubLObject)SubLObjectFactory.makeSymbol("NEW-IFILE"), (SubLObject)SubLObjectFactory.makeSymbol("NEW-IWMARK"), (SubLObject)SubLObjectFactory.makeSymbol("NEW-CDFILE"), (SubLObject)SubLObjectFactory.makeSymbol("NEW-CIFILE"), (SubLObject)SubLObjectFactory.makeSymbol("NEW-CWMARK"));
        $str430$Tombstoning_deleted_constant_indi = SubLObjectFactory.makeString("Tombstoning deleted constant indices");
        $sym431$FIND_CONSTANT_BY_SUID = SubLObjectFactory.makeSymbol("FIND-CONSTANT-BY-SUID");
        $sym432$SNAPSHOT_CONSTANT_INDEX = SubLObjectFactory.makeSymbol("SNAPSHOT-CONSTANT-INDEX");
        $str433$Updating_changed_constant_indices = SubLObjectFactory.makeString("Updating changed constant indices");
        $sym434$CONSTANT_SUID = SubLObjectFactory.makeSymbol("CONSTANT-SUID");
        $str435$Appending_new_constant_indices = SubLObjectFactory.makeString("Appending new constant indices");
        $str436$__Constant_indexing_will_be_swapp = SubLObjectFactory.makeString("~&Constant indexing will be swapped in lazily from:~%   ~A~%   ~A~%");
        $str437$__Constant_complex_indexing_will_ = SubLObjectFactory.makeString("~&Constant complex indexing will be swapped in lazily from:~%   ~A~%   ~A~%");
        $str438$___Constant_indices_use_wide_inde = SubLObjectFactory.makeString("~&(Constant indices use wide index entries.)~%");
        $str439$___Constant_complex_indices_use_w = SubLObjectFactory.makeString("~&(Constant complex indices use wide index entries.)~%");
        $str440$Loading_constant_indices = SubLObjectFactory.makeString("Loading constant indices");
        $str441$Could_not_dump_the__A_index_for__ = SubLObjectFactory.makeString("Could not dump the ~A index for ~A (id: ~A).~%  ~A~%");
        $str442$Could_not_dump_the_constant_index = SubLObjectFactory.makeString("Could not dump the constant index for ~A (id: ~A).~%  ~A~%");
        $sym443$LOAD_CONSTANT_INDEX_FROM_CACHE = SubLObjectFactory.makeSymbol("LOAD-CONSTANT-INDEX-FROM-CACHE");
        $str444$nat_indices = SubLObjectFactory.makeString("nat-indices");
        $str445$nat_indices_index = SubLObjectFactory.makeString("nat-indices-index");
        $str446$NART_indices = SubLObjectFactory.makeString("NART indices");
        $str447$nat_complex_indices = SubLObjectFactory.makeString("nat-complex-indices");
        $str448$nat_complex_indices_index = SubLObjectFactory.makeString("nat-complex-indices-index");
        $str449$complex_NART_indices = SubLObjectFactory.makeString("complex NART indices");
        $sym450$DUMP_NART_INDEX = SubLObjectFactory.makeSymbol("DUMP-NART-INDEX");
        $str451$Dumping_NART_indices = SubLObjectFactory.makeString("Dumping NART indices");
        $str452$nart_complex_indices_index = SubLObjectFactory.makeString("nart-complex-indices-index");
        $sym453$SNAPSHOT_NART_INDICES_INTERNAL = SubLObjectFactory.makeSymbol("SNAPSHOT-NART-INDICES-INTERNAL");
        $str454$NAT = SubLObjectFactory.makeString("NAT");
        $list455 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("nat-indices"), (SubLObject)SubLObjectFactory.makeString("nat-complex-indices"));
        $list456 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("nat-indices-index"), (SubLObject)SubLObjectFactory.makeString("nat-complex-indices-index"));
        $str457$Copying_NAT_indices_from_ = SubLObjectFactory.makeString("Copying NAT indices from ");
        $str458$Tombstoning_deleted_NAT_indices = SubLObjectFactory.makeString("Tombstoning deleted NAT indices");
        $sym459$FIND_NART_BY_ID = SubLObjectFactory.makeSymbol("FIND-NART-BY-ID");
        $sym460$SNAPSHOT_NART_INDEX = SubLObjectFactory.makeSymbol("SNAPSHOT-NART-INDEX");
        $str461$Updating_changed_NAT_indices = SubLObjectFactory.makeString("Updating changed NAT indices");
        $sym462$NART_ID = SubLObjectFactory.makeSymbol("NART-ID");
        $str463$Appending_new_NAT_indices = SubLObjectFactory.makeString("Appending new NAT indices");
        $str464$NAT_indices = SubLObjectFactory.makeString("NAT indices");
        $str465$complex_NAT_indices = SubLObjectFactory.makeString("complex NAT indices");
        $str466$__NART_indexing_will_be_swapped_i = SubLObjectFactory.makeString("~&NART indexing will be swapped in lazily from:~%   ~A~%   ~A~%");
        $str467$__NART_complex_indexing_will_be_s = SubLObjectFactory.makeString("~&NART complex indexing will be swapped in lazily from:~%   ~A~%   ~A~%");
        $str468$___NART_indices_use_wide_index_en = SubLObjectFactory.makeString("~&(NART indices use wide index entries.)~%");
        $str469$___NART_complex_indices_use_wide_ = SubLObjectFactory.makeString("~&(NART complex indices use wide index entries.)~%");
        $str470$Loading_NART_indices = SubLObjectFactory.makeString("Loading NART indices");
        $str471$Could_not_dump_the_NART_index_for = SubLObjectFactory.makeString("Could not dump the NART index for ~A (id: ~A).~%  ~A~%");
        $sym472$LOAD_NART_INDEX_FROM_CACHE = SubLObjectFactory.makeSymbol("LOAD-NART-INDEX-FROM-CACHE");
        $str473$unrepresented_term_indices = SubLObjectFactory.makeString("unrepresented-term-indices");
        $str474$unrepresented_term_indices_index = SubLObjectFactory.makeString("unrepresented-term-indices-index");
        $str475$unrepresented_term_indices = SubLObjectFactory.makeString("unrepresented term indices");
        $str476$unrepresented_term_complex_indice = SubLObjectFactory.makeString("unrepresented-term-complex-indices");
        $str477$unrepresented_term_complex_indice = SubLObjectFactory.makeString("unrepresented-term-complex-indices-index");
        $str478$complex_unrepresented_term_indice = SubLObjectFactory.makeString("complex unrepresented term indices");
        $sym479$DUMP_UNREPRESENTED_TERM_INDEX = SubLObjectFactory.makeSymbol("DUMP-UNREPRESENTED-TERM-INDEX");
        $str480$Dumping_unrepresented_term_indice = SubLObjectFactory.makeString("Dumping unrepresented term indices");
        $sym481$SNAPSHOT_UNREPRESENTED_TERM_INDICES_INTERNAL = SubLObjectFactory.makeSymbol("SNAPSHOT-UNREPRESENTED-TERM-INDICES-INTERNAL");
        $str482$unrepresented_term = SubLObjectFactory.makeString("unrepresented term");
        $list483 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("unrepresented-term-indices"), (SubLObject)SubLObjectFactory.makeString("unrepresented-term-complex-indices"));
        $list484 = ConsesLow.list((SubLObject)SubLObjectFactory.makeString("unrepresented-term-indices-index"), (SubLObject)SubLObjectFactory.makeString("unrepresented-term-complex-indices-index"));
        $str485$Copying_unrepresented_term_indice = SubLObjectFactory.makeString("Copying unrepresented term indices from ");
        $str486$Tombstoning_deleted_unrepresented = SubLObjectFactory.makeString("Tombstoning deleted unrepresented term indices");
        $sym487$SNAPSHOT_UNREPRESENTED_TERM_INDEX = SubLObjectFactory.makeSymbol("SNAPSHOT-UNREPRESENTED-TERM-INDEX");
        $str488$Updating_changed_unrepresented_te = SubLObjectFactory.makeString("Updating changed unrepresented term indices");
        $sym489$UNREPRESENTED_TERM_SUID = SubLObjectFactory.makeSymbol("UNREPRESENTED-TERM-SUID");
        $str490$Appending_new_unrepresented_term_ = SubLObjectFactory.makeString("Appending new unrepresented term indices");
        $str491$__Unrepresented_term_indexing_wil = SubLObjectFactory.makeString("~&Unrepresented term indexing will be swapped in lazily from:~%   ~A~%   ~A~%");
        $str492$__Unrepresented_complex_term_inde = SubLObjectFactory.makeString("~&Unrepresented complex term indexing will be swapped in lazily from:~%   ~A~%   ~A~%");
        $str493$___Unrepresented_term_indices_use = SubLObjectFactory.makeString("~&(Unrepresented term indices use wide index entries.)~%");
        $str494$___Unrepresented_term_complex_ind = SubLObjectFactory.makeString("~&(Unrepresented term complex indices use wide index entries.)~%");
        $str495$Loading_unrepresented_term_indice = SubLObjectFactory.makeString("Loading unrepresented term indices");
        $str496$Could_not_dump_the_unrepresented_ = SubLObjectFactory.makeString("Could not dump the unrepresented term index for ~A.~%  ~A~%");
        $sym497$LOAD_UNREPRESENTED_TERM_INDEX_FROM_CACHE = SubLObjectFactory.makeSymbol("LOAD-UNREPRESENTED-TERM-INDEX-FROM-CACHE");
        $str498$assertion_indices = SubLObjectFactory.makeString("assertion-indices");
        $str499$Dumping_assertion_indices = SubLObjectFactory.makeString("Dumping assertion indices");
        $str500$Loading_assertion_indices = SubLObjectFactory.makeString("Loading assertion indices");
        $str501$auxiliary_indices = SubLObjectFactory.makeString("auxiliary-indices");
        $str502$Dumping_auxiliary_indices____ = SubLObjectFactory.makeString("Dumping auxiliary indices ...");
        $str503$Loading_auxiliary_indices = SubLObjectFactory.makeString("Loading auxiliary indices");
        $str504$bookkeeping_indices = SubLObjectFactory.makeString("bookkeeping-indices");
        $str505$Dumping_bookkeeping_indices = SubLObjectFactory.makeString("Dumping bookkeeping indices");
        $sym506$LOAD_BOOKKEEPING_INDICES = SubLObjectFactory.makeSymbol("LOAD-BOOKKEEPING-INDICES");
        $str507$Loading_bookkeeping_indices____ = SubLObjectFactory.makeString("Loading bookkeeping indices ...");
        $str508$rule_set = SubLObjectFactory.makeString("rule-set");
        $str509$Dumping_rule_set____ = SubLObjectFactory.makeString("Dumping rule set ...");
        $sym510$LOAD_RULE_SET_FROM_STREAM = SubLObjectFactory.makeSymbol("LOAD-RULE-SET-FROM-STREAM");
        $str511$Loading_rule_set____ = SubLObjectFactory.makeString("Loading rule set ...");
        $str512$non_true_assertion_tv_cache = SubLObjectFactory.makeString("non-true-assertion-tv-cache");
        $str513$Dumping_non_true_assertion_tv_cac = SubLObjectFactory.makeString("Dumping non-true assertion tv cache ...");
        $sym514$LOAD_NON_TRUE_ASSERTION_TV_CACHE_FROM_STREAM = SubLObjectFactory.makeSymbol("LOAD-NON-TRUE-ASSERTION-TV-CACHE-FROM-STREAM");
        $str515$Loading_non_true_assertion_tv_cac = SubLObjectFactory.makeString("Loading non-true assertion tv cache ...");
        $str516$nart_hl_formula_index = SubLObjectFactory.makeString("nart-hl-formula-index");
        $sym517$_APPEND_STACK_TRACES_TO_ERROR_MESSAGES__ = SubLObjectFactory.makeSymbol("*APPEND-STACK-TRACES-TO-ERROR-MESSAGES?*");
        $list518 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CSETQ"), (SubLObject)SubLObjectFactory.makeSymbol("*APPEND-STACK-TRACES-TO-ERROR-MESSAGES?*"), (SubLObject)dumper.NIL);
        $str519$Dumping_NART_HL_formulas = SubLObjectFactory.makeString("Dumping NART HL formulas");
        $str520$_A = SubLObjectFactory.makeString("~A");
        $str521$__NART_HL_formulas_will_be_swappe = SubLObjectFactory.makeString("~&NART HL formulas will be swapped in lazily from:~%   ~A~%   ~A~%");
        $str522$Loading_nart_hl_formula_definitio = SubLObjectFactory.makeString("Loading nart-hl-formula definitions");
        $str523$misc = SubLObjectFactory.makeString("misc");
        $str524$Dumping_miscellaneous_stuff____ = SubLObjectFactory.makeString("Dumping miscellaneous stuff ...");
        $str525$Loading_miscellaneous_stuff____ = SubLObjectFactory.makeString("Loading miscellaneous stuff ...");
        $str526$sbhl_modules = SubLObjectFactory.makeString("sbhl-modules");
        $str527$sbhl_module_graphs = SubLObjectFactory.makeString("sbhl-module-graphs");
        $str528$sbhl_module_graphs_index = SubLObjectFactory.makeString("sbhl-module-graphs-index");
        $str529$Dumping_SBHL_modules_and_graphs__ = SubLObjectFactory.makeString("Dumping SBHL modules and graphs ...");
        $kw530$SWAPPED_OUT = SubLObjectFactory.makeKeyword("SWAPPED-OUT");
        $kw531$COMPACT = SubLObjectFactory.makeKeyword("COMPACT");
        $kw532$WARN_ONLY = SubLObjectFactory.makeKeyword("WARN-ONLY");
        $str533$Loading_SBHL_graphs____ = SubLObjectFactory.makeString("Loading SBHL graphs ...");
        $int534$30 = SubLObjectFactory.makeInteger(30);
        $kw535$GRAPH = SubLObjectFactory.makeKeyword("GRAPH");
        $str536$Cannot_initialize_SBHL_Time_due_t = SubLObjectFactory.makeString("Cannot initialize SBHL Time due to missing KB content.");
        $sym537$RELEVANT_MT_IS_EVERYTHING = SubLObjectFactory.makeSymbol("RELEVANT-MT-IS-EVERYTHING");
        $const538$EverythingPSC = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("EverythingPSC"));
        $list539 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeUninternedSymbol("KEY"), (SubLObject)SubLObjectFactory.makeSymbol("MODULE"));
        $kw540$ISA_ARG2_NAUT_TABLE = SubLObjectFactory.makeKeyword("ISA-ARG2-NAUT-TABLE");
        $kw541$NON_FORT_ISA_TABLE = SubLObjectFactory.makeKeyword("NON-FORT-ISA-TABLE");
        $kw542$NON_FORT_INSTANCE_TABLE = SubLObjectFactory.makeKeyword("NON-FORT-INSTANCE-TABLE");
        $str543$Could_not_handle_SBHL_miscellany_ = SubLObjectFactory.makeString("Could not handle SBHL miscellany token ~s");
        $str544$sbhl_cache = SubLObjectFactory.makeString("sbhl-cache");
        $str545$Dumping_SBHL_cache____ = SubLObjectFactory.makeString("Dumping SBHL cache ...");
        $str546$Loading_SBHL_cache____ = SubLObjectFactory.makeString("Loading SBHL cache ...");
        $str547$cardinality_estimates = SubLObjectFactory.makeString("cardinality-estimates");
        $str548$Dumping_cardinality_estimates____ = SubLObjectFactory.makeString("Dumping cardinality estimates ...");
        $sym549$LOAD_CARDINALITY_ESTIMATES_FROM_STREAM = SubLObjectFactory.makeSymbol("LOAD-CARDINALITY-ESTIMATES-FROM-STREAM");
        $str550$Loading_cardinality_estimates____ = SubLObjectFactory.makeString("Loading cardinality estimates ...");
        $list551 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("*COMPUTE-ARG-TYPE-CACHE-ON-DUMP?*"), (SubLObject)dumper.NIL));
        $str552$arg_type_cache = SubLObjectFactory.makeString("arg-type-cache");
        $str553$Dumping_arg_type_cache____ = SubLObjectFactory.makeString("Dumping arg-type cache ...");
        $str554$Loading_arg_type_cache____ = SubLObjectFactory.makeString("Loading arg-type cache ...");
        $str555$Rebuilding_arg_type_cache = SubLObjectFactory.makeString("Rebuilding arg-type cache");
        $sym556$_CYC_ALEXANDRIA_DEFNS_DUMP_LOAD_SUPPORTED__ = SubLObjectFactory.makeSymbol("*CYC-ALEXANDRIA-DEFNS-DUMP-LOAD-SUPPORTED?*");
        $str557$defns_cache = SubLObjectFactory.makeString("defns-cache");
        $str558$Dumping_defns_cache____ = SubLObjectFactory.makeString("Dumping defns cache ...");
        $str559$Loading_defns_cache____ = SubLObjectFactory.makeString("Loading defns cache ...");
        $str560$rule_connectivity_graph = SubLObjectFactory.makeString("rule-connectivity-graph");
        $str561$Dumping_rule_connectivity_graph__ = SubLObjectFactory.makeString("Dumping rule connectivity graph ...");
        $sym562$LOAD_RULE_CONNECTIVITY_GRAPH_FROM_STREAM = SubLObjectFactory.makeSymbol("LOAD-RULE-CONNECTIVITY-GRAPH-FROM-STREAM");
        $str563$Loading_rule_connectivity_graph__ = SubLObjectFactory.makeString("Loading rule connectivity graph ...");
        $str564$tva_cache = SubLObjectFactory.makeString("tva-cache");
        $str565$Dumping_TVA_cache____ = SubLObjectFactory.makeString("Dumping TVA cache ...");
        $sym566$LOAD_TVA_CACHE_FROM_STREAM = SubLObjectFactory.makeSymbol("LOAD-TVA-CACHE-FROM-STREAM");
        $str567$Loading_TVA_cache____ = SubLObjectFactory.makeString("Loading TVA cache ...");
        $str568$reformulator_rules = SubLObjectFactory.makeString("reformulator-rules");
        $str569$Dumping_reformulator_rules____ = SubLObjectFactory.makeString("Dumping reformulator rules ...");
        $sym570$LOAD_REFORMULATOR_RULES_FROM_STREAM = SubLObjectFactory.makeSymbol("LOAD-REFORMULATOR-RULES-FROM-STREAM");
        $str571$Loading_reformulator_rules____ = SubLObjectFactory.makeString("Loading reformulator rules ...");
        $str572$Dumping_English_units_of_measure_ = SubLObjectFactory.makeString("Dumping English units of measure ...");
        $str573$english_units_of_measure = SubLObjectFactory.makeString("english-units-of-measure");
        $sym574$LOAD_ENGLISH_UNITS_OF_MEASURE_FROM_STREAM = SubLObjectFactory.makeSymbol("LOAD-ENGLISH-UNITS-OF-MEASURE-FROM-STREAM");
        $str575$Loading_English_units_of_measure_ = SubLObjectFactory.makeString("Loading English units of measure ...");
        $str576$Dumping_CAE_query_search_tables__ = SubLObjectFactory.makeString("Dumping CAE query search tables ...");
        $str577$cae_query_search_tables = SubLObjectFactory.makeString("cae-query-search-tables");
        $sym578$LOAD_CAE_QUERY_SEARCH_TABLES_FROM_STREAM = SubLObjectFactory.makeSymbol("LOAD-CAE-QUERY-SEARCH-TABLES-FROM-STREAM");
        $str579$Loading_CAE_Query_Search_Tables__ = SubLObjectFactory.makeString("Loading CAE Query Search Tables ...");
        $str580$sbhl_time = SubLObjectFactory.makeString("sbhl-time");
        $str581$Dumping_sbhl_time_state____ = SubLObjectFactory.makeString("Dumping sbhl time state ...");
        $str582$sbhl = SubLObjectFactory.makeString("sbhl");
        $str583$Loading_SBHL_time_state____ = SubLObjectFactory.makeString("Loading SBHL time state ...");
        $str584$_d_bytes_of_unread_sbhl_time_stat = SubLObjectFactory.makeString("~d bytes of unread sbhl time state in ~S");
        $str585$rtp_rules_cache = SubLObjectFactory.makeString("rtp-rules-cache");
        $str586$Dumping_RTP_rules_cache____ = SubLObjectFactory.makeString("Dumping RTP rules cache ...");
        $str587$Loading_RTP_rules_cache____ = SubLObjectFactory.makeString("Loading RTP rules cache ...");
        $str588$somewhere_cache = SubLObjectFactory.makeString("somewhere-cache");
        $str589$Dumping_somewhere_rules_cache____ = SubLObjectFactory.makeString("Dumping somewhere rules cache ...");
        $str590$Loading_somewhere_cache____ = SubLObjectFactory.makeString("Loading somewhere cache ...");
        $str591$arity_cache = SubLObjectFactory.makeString("arity-cache");
        $str592$Dumping_arity_cache____ = SubLObjectFactory.makeString("Dumping arity cache ...");
        $str593$Loading_arity_cache____ = SubLObjectFactory.makeString("Loading arity cache ...");
        $str594$pph_phrase_count = SubLObjectFactory.makeString("pph-phrase-count");
        $str595$pph_phrase_shell = SubLObjectFactory.makeString("pph-phrase-shell");
        $str596$Dumping_pph_phrase_shells = SubLObjectFactory.makeString("Dumping pph-phrase shells");
        $str597$PPH_phrase__A_indexed_incorrectly = SubLObjectFactory.makeString("PPH phrase ~A indexed incorrectly.");
        $str598$Loading_pph_phrase_shells = SubLObjectFactory.makeString("Loading pph-phrase shells");
        $str599$pph_phrase = SubLObjectFactory.makeString("pph-phrase");
        $str600$pph_phrase_index = SubLObjectFactory.makeString("pph-phrase-index");
        $str601$Dumping_pph_phrase_definitions = SubLObjectFactory.makeString("Dumping pph-phrase definitions");
        $str602$Loading_pph_phrase_definitions = SubLObjectFactory.makeString("Loading pph-phrase definitions");
        $str603$pph_phrase_definitions_out_of_syn = SubLObjectFactory.makeString("pph-phrase definitions out of sync on load");
        $str604$gen_template_store = SubLObjectFactory.makeString("gen-template-store");
        $str605$Dumping___genTemplate_store____ = SubLObjectFactory.makeString("Dumping #$genTemplate store ...");
        $str606$Loading___genTemplate_store____ = SubLObjectFactory.makeString("Loading #$genTemplate store ...");
        $str607$pph_name_string_preds = SubLObjectFactory.makeString("pph-name-string-preds");
        $kw608$DUMPED = SubLObjectFactory.makeKeyword("DUMPED");
        $str609$pph_phrase_fns = SubLObjectFactory.makeString("pph-phrase-fns");
        $kw610$LOADED = SubLObjectFactory.makeKeyword("LOADED");
        $str611$Initializing_minor_paraphrase_Cyc = SubLObjectFactory.makeString("Initializing minor paraphrase CycL structures ...");
        $str612$________Performing_other_KB_dump_ = SubLObjectFactory.makeString("~&~%;;; Performing other KB dump activities at ~A~%");
        $str613$________Performing_KB_initializat = SubLObjectFactory.makeString("~&~%;;; Performing KB initializations at ~A~%");
        $str614$Reformulator___A__ = SubLObjectFactory.makeString("Reformulator: ~A~%");
        $str615$Paraphrase___A__ = SubLObjectFactory.makeString("Paraphrase: ~A~%");
        $str616$Cyc_Task_Scheduler___A__ = SubLObjectFactory.makeString("Cyc Task Scheduler: ~A~%");
        $str617$SKSI___A__ = SubLObjectFactory.makeString("SKSI: ~A~%");
        $str618$Quant___A__ = SubLObjectFactory.makeString("Quant: ~A~%");
        $str619$Date___A__ = SubLObjectFactory.makeString("Date: ~A~%");
        $str620$Time___A__ = SubLObjectFactory.makeString("Time: ~A~%");
        $str621$Lexicon___A__ = SubLObjectFactory.makeString("Lexicon: ~A~%");
        $str622$NL___A__ = SubLObjectFactory.makeString("NL: ~A~%");
        $str623$RTP___A__ = SubLObjectFactory.makeString("RTP: ~A~%");
        $str624$RKF___A__ = SubLObjectFactory.makeString("RKF: ~A~%");
        $str625$Thesaurus___A__ = SubLObjectFactory.makeString("Thesaurus: ~A~%");
        $str626$Wordnet___A__ = SubLObjectFactory.makeString("Wordnet: ~A~%");
        $str627$Planner___A__ = SubLObjectFactory.makeString("Planner: ~A~%");
        $str628$Secure___A__ = SubLObjectFactory.makeString("Secure: ~A~%");
        $str629$_scratch_ = SubLObjectFactory.makeString("/scratch/");
        $str630$load_all_constants_lisp = SubLObjectFactory.makeString("load-all-constants.lisp");
        $str631$load_all_narts_lisp = SubLObjectFactory.makeString("load-all-narts.lisp");
        $str632$load_all_assertions_lisp = SubLObjectFactory.makeString("load-all-assertions.lisp");
        $str633$load_all_kb_hl_supports_lisp = SubLObjectFactory.makeString("load-all-kb-hl-supports.lisp");
        $str634$load_all_kb_hl_supports_just_lisp = SubLObjectFactory.makeString("load-all-kb-hl-supports-just.lisp");
        $str635$load_all_deductions_lisp = SubLObjectFactory.makeString("load-all-deductions.lisp");
        $str636$load_all_bookkeeping_gafs_lisp = SubLObjectFactory.makeString("load-all-bookkeeping-gafs.lisp");
        $sym637$ESSENTIAL_KB_EVALUATABLE_FILE_TYPE = SubLObjectFactory.makeSymbol("ESSENTIAL-KB-EVALUATABLE-FILE-TYPE");
        $list638 = ConsesLow.list((SubLObject)SubLObjectFactory.makeKeyword("ALL"), (SubLObject)SubLObjectFactory.makeKeyword("CONSTANTS"), (SubLObject)SubLObjectFactory.makeKeyword("NARTS"), (SubLObject)SubLObjectFactory.makeKeyword("ASSERTIONS"), (SubLObject)SubLObjectFactory.makeKeyword("HL-SUPPORTS"), (SubLObject)SubLObjectFactory.makeKeyword("HL-SUPPORT-JUSTIFICATIONS"), (SubLObject)SubLObjectFactory.makeKeyword("DEDUCTIONS"), (SubLObject)SubLObjectFactory.makeKeyword("BOOKKEEPING"));
        $kw639$ALL = SubLObjectFactory.makeKeyword("ALL");
        $int640$250 = SubLObjectFactory.makeInteger(250);
        $str641$________Loading_evaluatable_essen = SubLObjectFactory.makeString("~&~%;;; Loading evaluatable essential KB at ~A~%");
        $str642$Loading_constants = SubLObjectFactory.makeString("Loading constants");
        $str643$Loading_narts = SubLObjectFactory.makeString("Loading narts");
        $str644$Loading_assertions = SubLObjectFactory.makeString("Loading assertions");
        $str645$Loading_definitions_for_KB_HL_sup = SubLObjectFactory.makeString("Loading definitions for KB HL supports");
        $str646$Loading_justifications_for_KB_HL_ = SubLObjectFactory.makeString("Loading justifications for KB HL supports");
        $str647$Loading_deductions = SubLObjectFactory.makeString("Loading deductions");
        $str648$Loading_bookkeeping_data = SubLObjectFactory.makeString("Loading bookkeeping data");
        $kw649$STRICT = SubLObjectFactory.makeKeyword("STRICT");
        $sym650$_EXIT = SubLObjectFactory.makeSymbol("%EXIT");
        $str651$________Rebuilding_Computable_KB_ = SubLObjectFactory.makeString("~&~%;;; Rebuilding Computable KB at ~A~%");
        $kw652$ASSERTIVE = SubLObjectFactory.makeKeyword("ASSERTIVE");
        $str653$________Dumping_Computable_KB_at_ = SubLObjectFactory.makeString("~&~%;;; Dumping Computable KB at ~A~%");
        $str654$Dumping_rule_utility_experience = SubLObjectFactory.makeString("Dumping rule utility experience");
        $str655$rule_utility_experience_cfasl = SubLObjectFactory.makeString("rule-utility-experience.cfasl");
        $str656$Dumping_sbhl_caching_policies = SubLObjectFactory.makeString("Dumping sbhl caching policies");
        $str657$standard_kb_sbhl_caching_policies = SubLObjectFactory.makeString("standard-kb-sbhl-caching-policies.cfasl");
        $int658$4000000 = SubLObjectFactory.makeInteger(4000000);
        $int659$15000000 = SubLObjectFactory.makeInteger(15000000);
        $int660$2000000000 = SubLObjectFactory.makeInteger(2000000000);
        $int661$32000000 = SubLObjectFactory.makeInteger(32000000);
        $int662$20000 = SubLObjectFactory.makeInteger(20000);
        $str663$__Error_with_operation___A___A__ = SubLObjectFactory.makeString("~%Error with operation: ~A~%~A~%");
        $str664$Processed___A__A_operations_from_ = SubLObjectFactory.makeString("Processed: ~A/~A operations from file: ~A~%");
        $str665$Operation__S__ = SubLObjectFactory.makeString("Operation ~S~%");
        $sym666$QUOTIFY = SubLObjectFactory.makeSymbol("QUOTIFY");
        $kw667$ACCESSOR = SubLObjectFactory.makeKeyword("ACCESSOR");
        $str668$Failed_operation___S__Got___S__ = SubLObjectFactory.makeString("Failed operation: ~S, Got: ~S~%");
        $int669$8000000 = SubLObjectFactory.makeInteger(8000000);
        $sym670$_DUMP_INVALID_CONSTANTS_ = SubLObjectFactory.makeSymbol("*DUMP-INVALID-CONSTANTS*");
        $sym671$_DUMP_INVALID_NARTS_ = SubLObjectFactory.makeSymbol("*DUMP-INVALID-NARTS*");
        $sym672$_DUMP_INVALID_ASSERTIONS_ = SubLObjectFactory.makeSymbol("*DUMP-INVALID-ASSERTIONS*");
        $sym673$_DUMP_INVALID_KB_HL_SUPPORTS_ = SubLObjectFactory.makeSymbol("*DUMP-INVALID-KB-HL-SUPPORTS*");
        $sym674$_DUMP_INVALID_DEDUCTIONS_ = SubLObjectFactory.makeSymbol("*DUMP-INVALID-DEDUCTIONS*");
        $sym675$_DUMP_INVALID_BOOKKEEPING_GAFS_ = SubLObjectFactory.makeSymbol("*DUMP-INVALID-BOOKKEEPING-GAFS*");
        $str676$Dumping_forms_to_create_all_const = SubLObjectFactory.makeString("Dumping forms to create all constants ...");
        $str677$Found_unfindable_constant___A_wit = SubLObjectFactory.makeString("Found unfindable constant: ~A with id ~A.~%");
        $str678$_kb_create_constant__A__A___ = SubLObjectFactory.makeString("(kb-create-constant ~A ~A)~%");
        $int679$150000 = SubLObjectFactory.makeInteger(150000);
        $str680$Dumping_forms_to_create_all_narts = SubLObjectFactory.makeString("Dumping forms to create all narts ....");
        $str681$Found_unfindable_nart___A_with_id = SubLObjectFactory.makeString("Found unfindable nart: ~A with id ~A.~%");
        $str682$_kb_create_nart__A___ = SubLObjectFactory.makeString("(kb-create-nart ~A)~%");
        $sym683$EXPORTABLE_MT_ = SubLObjectFactory.makeSymbol("EXPORTABLE-MT?");
        $sym684$_EXPORTABLE_MT__CACHING_STATE_ = SubLObjectFactory.makeSymbol("*EXPORTABLE-MT?-CACHING-STATE*");
        $int685$16000 = SubLObjectFactory.makeInteger(16000);
        $sym686$EXPORTABLE_DEDUCTION_SUPPORT_ = SubLObjectFactory.makeSymbol("EXPORTABLE-DEDUCTION-SUPPORT?");
        $sym687$_EXPORTABLE_DEDUCTION_SUPPORT__CACHING_STATE_ = SubLObjectFactory.makeSymbol("*EXPORTABLE-DEDUCTION-SUPPORT?-CACHING-STATE*");
        $int688$300000 = SubLObjectFactory.makeInteger(300000);
        $sym689$EXPORTABLE_DEDUCTION_SUPPORTED_OBJECT_ = SubLObjectFactory.makeSymbol("EXPORTABLE-DEDUCTION-SUPPORTED-OBJECT?");
        $sym690$_EXPORTABLE_DEDUCTION_SUPPORTED_OBJECT__CACHING_STATE_ = SubLObjectFactory.makeSymbol("*EXPORTABLE-DEDUCTION-SUPPORTED-OBJECT?-CACHING-STATE*");
        $int691$350000 = SubLObjectFactory.makeInteger(350000);
        $str692$Dumping_forms_to_create_all_asser = SubLObjectFactory.makeString("Dumping forms to create all assertions ....");
        $str693$Found_unfindable_assertion___A_wi = SubLObjectFactory.makeString("Found unfindable assertion: ~A with id ~A.~%");
        $str694$_progn__ = SubLObjectFactory.makeString("(progn~%");
        $str695$_csetq__last_assertion___kb_creat = SubLObjectFactory.makeString("(csetq *last-assertion* (kb-create-assertion ~A ~A '~S ~S ~S ~S ~S))~%");
        $str696$_kb_timestamp_asserted_assertion_ = SubLObjectFactory.makeString("(kb-timestamp-asserted-assertion *last-assertion* ~A ~S ~A ~S))~%");
        $str697$Found_unfindable_assertion2___A_w = SubLObjectFactory.makeString("Found unfindable assertion2: ~A with id ~A.~%");
        $str698$Dumping_forms_to_create_all_KB_HL = SubLObjectFactory.makeString("Dumping forms to create all KB HL supports...");
        $str699$Found_unfindable_kb_hl_support__A = SubLObjectFactory.makeString("Found unfindable kb-hl-support ~A with id ~A~%");
        $str700$_create_kb_hl_support__A_NIL___ = SubLObjectFactory.makeString("(create-kb-hl-support ~A NIL)~%");
        $str701$_kb_hl_support_reset_justificatio = SubLObjectFactory.makeString("(kb-hl-support-reset-justification (find-kb-hl-support ~A) ~A)~%");
        $str702$_ = SubLObjectFactory.makeString("-");
        $str703$Dumping_forms_to_create_all_deduc = SubLObjectFactory.makeString("Dumping forms to create all deductions...");
        $str704$Found_unfindable_deduction__A_wit = SubLObjectFactory.makeString("Found unfindable deduction ~A with id ~A~%");
        $str705$_kb_create_deduction__A__A__A__A_ = SubLObjectFactory.makeString("(kb-create-deduction ~A ~A ~A ~A)~%");
        $list706 = (SubLList)ConsesLow.cons((SubLObject)SubLObjectFactory.makeSymbol("PRED"), (SubLObject)SubLObjectFactory.makeUninternedSymbol("SUBINDEX"));
        $str707$Got_bad_bookkeeping_gaf__S____S__ = SubLObjectFactory.makeString("Got bad bookkeeping gaf ~S: (~S ~S ~S)");
        $str708$_hl_assert_bookkeeping_binary_gaf = SubLObjectFactory.makeString("(hl-assert-bookkeeping-binary-gaf ~A ~A ~A ~A)~%");
        $const709$BookkeepingMt = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("BookkeepingMt"));
        $sym710$NART_P = SubLObjectFactory.makeSymbol("NART-P");
        $str711$Testing_that_narts_are_findable__ = SubLObjectFactory.makeString("Testing that narts are findable....");
        $str712$Unfindable_nart__S___S = SubLObjectFactory.makeString("Unfindable nart ~S: ~S");
        $str713$Testing_that_assertions_are_finda = SubLObjectFactory.makeString("Testing that assertions are findable....");
        $str714$__S__Unfindable_assertion_id__S__ = SubLObjectFactory.makeString("(~S) Unfindable assertion id ~S: ~S");
        $str715$Testing_that_deductions_are_finda = SubLObjectFactory.makeString("Testing that deductions are findable....");
        $str716$__S__Unfindable_deduction_id__S__ = SubLObjectFactory.makeString("(~S) Unfindable deduction id ~S: ~S");
        $const717$CycAdministrator = constant_handles.reader_make_constant_shell((SubLObject)SubLObjectFactory.makeString("CycAdministrator"));
        $sym718$IGNORE_ERRORS = SubLObjectFactory.makeSymbol("IGNORE-ERRORS");
        $sym719$POSSIBLE_NART = SubLObjectFactory.makeSymbol("POSSIBLE-NART");
        $list720 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("HL-TO-EL"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("NART-HL-FORMULA"), (SubLObject)SubLObjectFactory.makeSymbol("POSSIBLE-NART")));
        $sym721$EVAL = SubLObjectFactory.makeSymbol("EVAL");
        $sym722$READ_FROM_STRING = SubLObjectFactory.makeSymbol("READ-FROM-STRING");
        $list723 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("CYC-KILL"), (SubLObject)SubLObjectFactory.makeSymbol("POSSIBLE-NART")));
        $sym724$POSSIBLE_ASSERTION = SubLObjectFactory.makeSymbol("POSSIBLE-ASSERTION");
        $sym725$CAND = SubLObjectFactory.makeSymbol("CAND");
        $list726 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("ASSERTION-MT"), (SubLObject)SubLObjectFactory.makeSymbol("POSSIBLE-ASSERTION"));
        $list727 = ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("HL-TO-EL"), (SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("ASSERTION-CNF"), (SubLObject)SubLObjectFactory.makeSymbol("POSSIBLE-ASSERTION")));
        $list728 = ConsesLow.list((SubLObject)ConsesLow.list((SubLObject)SubLObjectFactory.makeSymbol("TMS-REMOVE-ASSERTION"), (SubLObject)SubLObjectFactory.makeSymbol("POSSIBLE-ASSERTION")));
        $str729$Deleting_potentially_bad_assertio = SubLObjectFactory.makeString("Deleting potentially bad assertion ~A: ~A");
        $str730$Recanonicalized__A___A = SubLObjectFactory.makeString("Recanonicalized ~A: ~A");
        $str731$Finding_assertions_____ = SubLObjectFactory.makeString("Finding assertions ....");
        $str732$Expected_a_deduction_got___S__ = SubLObjectFactory.makeString("Expected a deduction got: ~S~%");
        $str733$Finding_cnf_with_non_trivial_term = SubLObjectFactory.makeString("Finding cnf with non trivial term order ....");
        $str734$Found_cnf__A = SubLObjectFactory.makeString("Found cnf ~A");
        $str735$Found_mt__A = SubLObjectFactory.makeString("Found mt ~A");
        $str736$Found_id__A = SubLObjectFactory.makeString("Found id ~A");
    }

    public static final class $load_deduction_def_from_cache$BinaryFunction extends BinaryFunction
    {
        public $load_deduction_def_from_cache$BinaryFunction() {
            super(SubLTranslatedFile.extractFunctionNamed("LOAD-DEDUCTION-DEF-FROM-CACHE"));
        }

        public SubLObject processItem(final SubLObject arg1, final SubLObject arg2) {
            return dumper.load_deduction_def_from_cache(arg1, arg2);
        }
    }

    public static final class $load_assertion_def_from_cache$BinaryFunction extends BinaryFunction
    {
        public $load_assertion_def_from_cache$BinaryFunction() {
            super(SubLTranslatedFile.extractFunctionNamed("LOAD-ASSERTION-DEF-FROM-CACHE"));
        }

        public SubLObject processItem(final SubLObject arg1, final SubLObject arg2) {
            return dumper.load_assertion_def_from_cache(arg1, arg2);
        }
    }

    public static final class $index_writer_native extends SubLStructNative
    {
        public SubLObject $directory;
        public SubLObject $fvector;
        public SubLObject $index_file;
        public SubLObject $index_label;
        public SubLObject $complex_fvector;
        public SubLObject $complex_index_file;
        public SubLObject $complex_index_label;
        public SubLObject $dump_fn;
        private static final SubLStructDeclNative structDecl;

        public $index_writer_native() {
            this.$directory = (SubLObject)CommonSymbols.NIL;
            this.$fvector = (SubLObject)CommonSymbols.NIL;
            this.$index_file = (SubLObject)CommonSymbols.NIL;
            this.$index_label = (SubLObject)CommonSymbols.NIL;
            this.$complex_fvector = (SubLObject)CommonSymbols.NIL;
            this.$complex_index_file = (SubLObject)CommonSymbols.NIL;
            this.$complex_index_label = (SubLObject)CommonSymbols.NIL;
            this.$dump_fn = (SubLObject)CommonSymbols.NIL;
        }

        public SubLStructDecl getStructDecl() {
            return (SubLStructDecl)$index_writer_native.structDecl;
        }

        public SubLObject getField2() {
            return this.$directory;
        }

        public SubLObject getField3() {
            return this.$fvector;
        }

        public SubLObject getField4() {
            return this.$index_file;
        }

        public SubLObject getField5() {
            return this.$index_label;
        }

        public SubLObject getField6() {
            return this.$complex_fvector;
        }

        public SubLObject getField7() {
            return this.$complex_index_file;
        }

        public SubLObject getField8() {
            return this.$complex_index_label;
        }

        public SubLObject getField9() {
            return this.$dump_fn;
        }

        public SubLObject setField2(final SubLObject value) {
            return this.$directory = value;
        }

        public SubLObject setField3(final SubLObject value) {
            return this.$fvector = value;
        }

        public SubLObject setField4(final SubLObject value) {
            return this.$index_file = value;
        }

        public SubLObject setField5(final SubLObject value) {
            return this.$index_label = value;
        }

        public SubLObject setField6(final SubLObject value) {
            return this.$complex_fvector = value;
        }

        public SubLObject setField7(final SubLObject value) {
            return this.$complex_index_file = value;
        }

        public SubLObject setField8(final SubLObject value) {
            return this.$complex_index_label = value;
        }

        public SubLObject setField9(final SubLObject value) {
            return this.$dump_fn = value;
        }

        static {
            structDecl = Structures.makeStructDeclNative((Class)$index_writer_native.class, dumper.$sym381$INDEX_WRITER, dumper.$sym382$INDEX_WRITER_P, dumper.$list383, dumper.$list384, new String[] { "$directory", "$fvector", "$index_file", "$index_label", "$complex_fvector", "$complex_index_file", "$complex_index_label", "$dump_fn" }, dumper.$list385, dumper.$list386, dumper.$sym387$DEFAULT_STRUCT_PRINT_FUNCTION);
        }
    }

    public static final class $index_writer_p$UnaryFunction extends UnaryFunction
    {
        public $index_writer_p$UnaryFunction() {
            super(SubLTranslatedFile.extractFunctionNamed("INDEX-WRITER-P"));
        }

        public SubLObject processItem(final SubLObject arg1) {
            return dumper.index_writer_p(arg1);
        }
    }

    public static final class $load_nart_hl_formula_from_cache$BinaryFunction extends BinaryFunction
    {
        public $load_nart_hl_formula_from_cache$BinaryFunction() {
            super(SubLTranslatedFile.extractFunctionNamed("LOAD-NART-HL-FORMULA-FROM-CACHE"));
        }

        public SubLObject processItem(final SubLObject arg1, final SubLObject arg2) {
            return dumper.load_nart_hl_formula_from_cache(arg1, arg2);
        }
    }
}

/*

	Total time: 19051 ms
	 alexandriaP
	alexandriaP
	thread
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	directory_path
	alexandriaP
	thread
	alexandriaP
	directory_path
	directory_path
	file
	file
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
	thread
*/